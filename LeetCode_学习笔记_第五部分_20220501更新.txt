// Source https://leetcode.com/problems/minimum-swaps-to-make-sequences-increasing/

You are given two integer arrays of the same length nums1 and nums2. In one operation, you are allowed to swap nums1[i] with nums2[i].

For example, if nums1 = [1,2,3,8], and nums2 = [5,6,7,4], you can swap the element at i = 3 to obtain nums1 = [1,2,3,4] and nums2 = [5,6,7,8].
Return the minimum number of needed operations to make nums1 and nums2 strictly increasing. The test cases are generated so that the given input always makes it possible.

An array arr is strictly increasing if and only if arr[0] < arr[1] < arr[2] < ... < arr[arr.length - 1].

 

Example 1:

Input: nums1 = [1,3,5,4], nums2 = [1,2,3,7]
Output: 1
Explanation: 
Swap nums1[3] and nums2[3]. Then the sequences are:
nums1 = [1, 3, 5, 7] and nums2 = [1, 2, 3, 4]
which are both strictly increasing.
Example 2:

Input: nums1 = [0,3,5,8,9], nums2 = [2,1,4,6,9]
Output: 1
 

Constraints:

2 <= nums1.length <= 105
nums2.length == nums1.length
0 <= nums1[i], nums2[i] <= 2 * 105

class Solution
{
public:
    int n;
    int dp[100005][2];

    int recur(vector<int> &A, vector<int> &B, int prevA, int prevB, int swap, int idx)
    {
        if(idx == n) return 0;
        if(dp[idx][swap] != -1) return dp[idx][swap];
        int res = INT_MAX;
        if(A[idx] > prevA && B[idx] > prevB)
        {
            res = recur(A, B, A[idx], B[idx], 0, idx + 1);
        }
        if(B[idx] > prevA && A[idx] > prevB)
        {
            res = min(res, recur(A, B, B[idx], A[idx], 1, idx + 1) + 1);
        }
        return dp[idx][swap] = res;
    }

    int minSwap(vector<int> &A, vector<int> &B)
    {
        n = A.size();
        memset(dp, -1, sizeof(dp));
        return recur(A, B, -1, -1, 0, 0);
    }
};


// Source https://leetcode.com/problems/find-eventual-safe-states/

There is a directed graph of n nodes with each node labeled from 0 to n - 1. The graph is represented by a 0-indexed 2D integer array graph 
where graph[i] is an integer array of nodes adjacent to node i, meaning there is an edge from node i to each node in graph[i].

A node is a terminal node if there are no outgoing edges. A node is a safe node if every possible path starting from that node leads to a terminal node.

Return an array containing all the safe nodes of the graph. The answer should be sorted in ascending order.

 

Example 1:

Illustration of graph
Input: graph = [[1,2],[2,3],[5],[0],[5],[],[]]
Output: [2,4,5,6]
Explanation: The given graph is shown above.
Nodes 5 and 6 are terminal nodes as there are no outgoing edges from either of them.
Every path starting at nodes 2, 4, 5, and 6 all lead to either node 5 or 6.
Example 2:

Input: graph = [[1,2,3,4],[1,2],[3,4],[0,4],[]]
Output: [4]
Explanation:
Only node 4 is a terminal node, and every path starting at node 4 leads to node 4.
 

Constraints:

n == graph.length
1 <= n <= 104
0 <= graph[i].length <= n
0 <= graph[i][j] <= n - 1
graph[i] is sorted in a strictly increasing order.
The graph may contain self-loops.
The number of edges in the graph will be in the range [1, 4 * 104].

class Solution
{
public:

    vector<int> eventualSafeNodes(vector<vector<int>> &graph)
    {
        int n = graph.size();
        vector<int> adj[n];

        vector<int> outdegree(n, 0);
        for(int i = 0; i < n; i++)
        {
            for(auto x : graph[i])
            {
                adj[x].push_back(i);
                outdegree[i]++;
            }
        }

        queue<int> q;
        for(int i = 0; i < n; i++)
        {
            if(!outdegree[i])
                q.push(i);
        }

        vector<int> res;
        while(!q.empty())
        {
            int node = q.front();
            q.pop();
            res.push_back(node);
            for(auto v : adj[node])
            {
                if(--outdegree[v] == 0)
                    q.push(v);
            }
        }
        sort(res.begin(), res.end());
        return res;
    }
};


// Source https://leetcode.com/problems/bricks-falling-when-hit/

You are given an m x n binary grid, where each 1 represents a brick and 0 represents an empty space. A brick is stable if:

It is directly connected to the top of the grid, or
At least one other brick in its four adjacent cells is stable.
You are also given an array hits, which is a sequence of erasures we want to apply. Each time we want to erase the brick at the location hits[i] = (rowi, coli). 
The brick on that location (if it exists) will disappear. Some other bricks may no longer be stable because of that erasure and will fall. 
Once a brick falls, it is immediately erased from the grid (i.e., it does not land on other stable bricks).

Return an array result, where each result[i] is the number of bricks that will fall after the ith erasure is applied.

Note that an erasure may refer to a location with no brick, and if it does, no bricks drop.

 

Example 1:

Input: grid = [[1,0,0,0],[1,1,1,0]], hits = [[1,0]]
Output: [2]
Explanation: Starting with the grid:
[[1,0,0,0],
 [1,1,1,0]]
We erase the underlined brick at (1,0), resulting in the grid:
[[1,0,0,0],
 [0,1,1,0]]
The two underlined bricks are no longer stable as they are no longer connected to the top nor adjacent to another stable brick, so they will fall. The resulting grid is:
[[1,0,0,0],
 [0,0,0,0]]
Hence the result is [2].
Example 2:

Input: grid = [[1,0,0,0],[1,1,0,0]], hits = [[1,1],[1,0]]
Output: [0,0]
Explanation: Starting with the grid:
[[1,0,0,0],
 [1,1,0,0]]
We erase the underlined brick at (1,1), resulting in the grid:
[[1,0,0,0],
 [1,0,0,0]]
All remaining bricks are still stable, so no bricks fall. The grid remains the same:
[[1,0,0,0],
 [1,0,0,0]]
Next, we erase the underlined brick at (1,0), resulting in the grid:
[[1,0,0,0],
 [0,0,0,0]]
Once again, all remaining bricks are still stable, so no bricks fall.
Hence the result is [0,0].
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 200
grid[i][j] is 0 or 1.
1 <= hits.length <= 4 * 104
hits[i].length == 2
0 <= xi <= m - 1
0 <= yi <= n - 1
All (xi, yi) are unique.

class Solution
{
public:
    int m, n;
    vector <int> parent;
    vector <int> rank;
    vector <int> size;
    vector<vector<int>> directions = {{0, 1}, {0, -1}, {-1, 0}, {1, 0}};

    int find(int x)
    {
        if (parent[x] != x) parent[x] = find(parent[x]);
        return parent[x];
    }

    void Union(int x, int y)
    {
        int r1 = find(x);
        int r2 = find(y);
        if (r1 == r2) return;
        if (rank[r1] > rank[r2])
        {
            parent[r2] = r1;
            size[r1] += size[r2];
        }
        else if (rank[r2] > rank[r1])
        {
            parent[r1] = r2;
            size[r2] += size[r1];
        }
        else
        {
            parent[r2] = r1;
            size[r1] += size[r2];
            rank[r1]++;
        }
    }
    void unionAround(int i, int j, vector<vector<int>> &grid)
    {
        int seq = i * n + j + 1;
        for (auto &d : directions)
        {
            int ni = i + d[0], nj = j + d[1];
            if (ni >= 0 && ni < m && nj >= 0 && nj < n && grid[ni][nj] == 1)
            {
                int new_seq = ni * n + nj + 1;
                Union(seq, new_seq);
            }
        }
        if (i == 0) Union(0, seq);
    }
    vector<int> hitBricks(vector<vector<int>> &grid, vector<vector<int>> &hits)
    {
        m = grid.size();
        n = grid[0].size();
        int hitCnt = hits.size();
        size = vector<int>(m * n + 1, 1);
        size[0] = 0;
        parent = vector <int>(m * n + 1, 0);
        for (int i = 0; i <= m * n; i++) parent[i] = i;
        rank = vector<int>(m * n + 1, 0);
        vector <int> ans(hitCnt, 0);
        for (auto &v : hits)
        {
            int x = v[0], y = v[1];
            if (grid[x][y] == 1) grid[x][y] = 2;
        }
        for (int i = 0; i < m; i++)
        {
            for (int j = 0; j < n; j++)
            {
                if (grid[i][j] == 1) unionAround(i, j, grid);
            }
        }
        int currCnt = size[find(0)];
        for (int i = hitCnt - 1; i >= 0; i--)
        {
            int x = hits[i][0], y = hits[i][1];
            if (grid[x][y] == 2)
            {
                grid[x][y] = 1;
                unionAround(x, y, grid);
                int newCnt = size[find(0)];
                if (newCnt > currCnt) ans[i] = newCnt - currCnt - 1;
                currCnt = newCnt;
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/unique-morse-code-words/

International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows:

'a' maps to ".-",
'b' maps to "-...",
'c' maps to "-.-.", and so on.
For convenience, the full table for the 26 letters of the English alphabet is given below:

[".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."]
Given an array of strings words where each word can be written as a concatenation of the Morse code of each letter.

For example, "cab" can be written as "-.-..--...", which is the concatenation of "-.-.", ".-", and "-...". We will call such a concatenation the transformation of a word.
Return the number of different transformations among all words we have.

 

Example 1:

Input: words = ["gin","zen","gig","msg"]
Output: 2
Explanation: The transformation of each word is:
"gin" -> "--...-."
"zen" -> "--...-."
"gig" -> "--...--."
"msg" -> "--...--."
There are 2 different transformations: "--...-." and "--...--.".
Example 2:

Input: words = ["a"]
Output: 1
 

Constraints:

1 <= words.length <= 100
1 <= words[i].length <= 12
words[i] consists of lowercase English letters.

class Solution
{
public:
    int uniqueMorseRepresentations(vector<string> &words)
    {
        vector<string> morse{".-", "-...", "-.-.", "-..", ".", "..-.", "--.", "....", "..", ".---", "-.-", ".-..", "--", "-.", "---", ".--.", "--.-", ".-.", "...", "-", "..-", "...-", ".--", "-..-", "-.--", "--.."};
        unordered_set<string> s;
        for (string &word : words)
        {
            string t = "";
            for (char c : word) t += morse[c - 'a'];
            s.insert(t);
        }
        return s.size();
    }
};


// Source https://leetcode.com/problems/split-array-with-same-average/

You are given an integer array nums.

You should move each element of nums into one of the two arrays A and B such that A and B are non-empty, and average(A) == average(B).

Return true if it is possible to achieve that and false otherwise.

Note that for an array arr, average(arr) is the sum of all the elements of arr over the length of arr.

 

Example 1:

Input: nums = [1,2,3,4,5,6,7,8]
Output: true
Explanation: We can split the array into [1,4,5,8] and [2,3,6,7], and both of them have an average of 4.5.
Example 2:

Input: nums = [3,1]
Output: false
 

Constraints:

1 <= nums.length <= 30
0 <= nums[i] <= 104

n = n1 + n2
sum = avg * n
sum1 = avg1 * n1
sum2 = avg2 * n2
sum = sum1 + sum2
avg * n = avg1 * n1 + avg2 * n2
如果avg等于avg1，则avg也等于avg2
问题转化为是否存在sum1、n1使得sum / n = sum1 / n1

sum * n1 = sum1 * n -> (sum * n1) % n == 0

从nums的左半部分选择a个数，从nums的右半部分选择b个数
n1 = a + b
sum1 = sum1a + sum1b

sum * (a + b) = (sum1a + sum1b) * n
sum * (a + b) - (sum1a * n) = sum1b * n
问题转化为是否存在sum1a、sum1b、a、b使得sum * (a + b) - (sum1a * n) = sum1b * n

class Solution
{
public:
    int n;

    void solve(vector<int> &nums, int i, int sum, int count, int sz, unordered_map<int, unordered_set<int>> &m)
    {
        if(i == sz)
        {
            m[count].insert(sum * n);
            return ;
        }

        solve(nums, i + 1, sum + nums[i], count + 1, sz, m);
        solve(nums, i + 1, sum, count, sz, m);
    }

    bool splitArraySameAverage(vector<int> &nums)
    {
        n = nums.size();
        int sum = 0;
        for(auto x : nums) sum += x;
        int m = n / 2;
        bool possible = false;
        for (int i = 1; i <= m && !possible; ++i)
        {
            if ((sum * i) % n == 0) possible = true;
        }
        if (!possible) return false;

        //m1[x] stores all possible sum of length x made up of from left half
        //m2[x] stores all possible sum of length x made up of from right half
        unordered_map<int, unordered_set<int>> m1, m2;

        solve(nums, 0, 0, 0, n / 2, m1);
        solve(nums, n / 2, 0, 0, n, m2);

        for(auto &x : m1)
        {
            for(auto &y : x.second)
            {
                for(auto &z : m2)
                {
                    int a = x.first, b = z.first;

                    if(a + b == 0 || a + b == n) continue;

                    if(m2[b].find((a + b)*sum - y) != m2[b].end()) return true;
                }
            }
        }

        return false;
    }
};


// Source https://leetcode.com/problems/number-of-lines-to-write-string/

You are given a string s of lowercase English letters and an array widths denoting how many pixels wide each lowercase English letter is. 
Specifically, widths[0] is the width of 'a', widths[1] is the width of 'b', and so on.

You are trying to write s across several lines, where each line is no longer than 100 pixels. Starting at the beginning of s, write as many letters on the first line 
such that the total width does not exceed 100 pixels. Then, from where you stopped in s, continue writing as many letters as you can on the second line. 
Continue this process until you have written all of s.

Return an array result of length 2 where:

result[0] is the total number of lines.
result[1] is the width of the last line in pixels.
 

Example 1:

Input: widths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = "abcdefghijklmnopqrstuvwxyz"
Output: [3,60]
Explanation: You can write s as follows:
abcdefghij  // 100 pixels wide
klmnopqrst  // 100 pixels wide
uvwxyz      // 60 pixels wide
There are a total of 3 lines, and the last line is 60 pixels wide.
Example 2:

Input: widths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = "bbbcccdddaaa"
Output: [2,4]
Explanation: You can write s as follows:
bbbcccdddaa  // 98 pixels wide
a            // 4 pixels wide
There are a total of 2 lines, and the last line is 4 pixels wide.
 

Constraints:

widths.length == 26
2 <= widths[i] <= 10
1 <= s.length <= 1000
s contains only lowercase English letters.

class Solution
{
public:
    vector<int> numberOfLines(vector<int> &widths, string S)
    {
        int cnt = 1, cur = 0;
        for (char c : S)
        {
            int t = widths[c - 'a'];
            if (cur + t > 100)
            {
                ++cnt;
                cur = t;
            }
            else cur += t;
        }
        return {cnt, cur};
    }
};


// Source https://leetcode.com/problems/max-increase-to-keep-city-skyline/

There is a city composed of n x n blocks, where each block contains a single building shaped like a vertical square prism. 
You are given a 0-indexed n x n integer matrix grid where grid[r][c] represents the height of the building located in the block at row r and column c.

A city's skyline is the the outer contour formed by all the building when viewing the side of the city from a distance. 
The skyline from each cardinal direction north, east, south, and west may be different.

We are allowed to increase the height of any number of buildings by any amount (the amount can be different per building). 
The height of a 0-height building can also be increased. However, increasing the height of a building should not affect the city's skyline from any cardinal direction.

Return the maximum total sum that the height of the buildings can be increased by without changing the city's skyline from any cardinal direction.

 

Example 1:


Input: grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]
Output: 35
Explanation: The building heights are shown in the center of the above image.
The skylines when viewed from each cardinal direction are drawn in red.
The grid after increasing the height of buildings without affecting skylines is:
gridNew = [ [8, 4, 8, 7],
            [7, 4, 7, 7],
            [9, 4, 8, 7],
            [3, 3, 3, 3] ]
Example 2:

Input: grid = [[0,0,0],[0,0,0],[0,0,0]]
Output: 0
Explanation: Increasing the height of any building will result in the skyline changing.
 

Constraints:

n == grid.length
n == grid[r].length
2 <= n <= 50
0 <= grid[r][c] <= 100

class Solution
{
public:
    int maxIncreaseKeepingSkyline(vector<vector<int>> &grid)
    {
        int m = grid.size(), n = grid[0].size(), res = 0;
        vector<int> row(m, 0), col(n, 0);
        for (int i = 0; i < m; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                row[i] = max(row[i], grid[i][j]);
                col[j] = max(col[j], grid[i][j]);
            }
        }
        for (int i = 0; i < m; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                res += min(row[i] - grid[i][j], col[j] - grid[i][j]);
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/soup-servings/

There are two types of soup: type A and type B. Initially, we have n ml of each type of soup. There are four kinds of operations:

Serve 100 ml of soup A and 0 ml of soup B,
Serve 75 ml of soup A and 25 ml of soup B,
Serve 50 ml of soup A and 50 ml of soup B, and
Serve 25 ml of soup A and 75 ml of soup B.
When we serve some soup, we give it to someone, and we no longer have it. Each turn, we will choose from the four operations with an equal probability 0.25. 
If the remaining volume of soup is not enough to complete the operation, we will serve as much as possible. We stop once we no longer have some quantity of both types of soup.

Note that we do not have an operation where all 100 ml's of soup B are used first.

Return the probability that soup A will be empty first, plus half the probability that A and B become empty at the same time. Answers within 10-5 of the actual answer will be accepted.

 

Example 1:

Input: n = 50
Output: 0.62500
Explanation: If we choose the first two operations, A will become empty first.
For the third operation, A and B will become empty at the same time.
For the fourth operation, B will become empty first.
So the total probability of A becoming empty first plus half the probability that A and B become empty at the same time, is 0.25 * (1 + 1 + 0.5 + 0) = 0.625.
Example 2:

Input: n = 100
Output: 0.71875
 

Constraints:

0 <= n <= 109

两种汤，A和B，开始时各给了N毫升的。有下面四种操作：

1. 供应100毫升A汤，0毫升B汤。

2. 供应75毫升A汤，25毫升B汤。

3. 供应50毫升A汤，50毫升B汤。

4. 供应25毫升A汤，75毫升B汤。

我们选择每种操作的概率是一样的，让我们返回A汤先供应完的概率加上A汤和B汤同时供应完的一半概率。

先来看这四种操作，由于概率相同，所以这四种操作可以想象成迷宫遍历的四个方向。
我们发现汤的供应量都是25的倍数，所以我们可以将25毫升当作一份汤的量，所以这四种操作就变成了：

1. 供应4份A汤，0份B汤。

2. 供应3份A汤，1份B汤。

3. 供应2份A汤，2份B汤。

4. 供应1份A汤，3份B汤。

If the remaining volume of soup is not enough to complete the operation, we will serve as much as possible. We stop once we no longer have some quantity of both types of soup.
我们的汤份数可以通过除以25来获得，由于N可能不是25的倍数，会有余数，所以我们可以直接加上24再除以25就可以得到正确的份数。
首先判断如果两种汤都没了，那么返回0.5，因为题目中说了如果两种汤都供应完了，返回一半的概率；如果A汤没了，返回1；如果B汤没了，返回0；
如果上面的情况都没有进入，说明此时A汤和B汤都有剩余，所以我们先查记忆数组memo，如果其大于0，说明当前情况已经被计算过了，我们直接返回该值即可。
如果没有的话，我们就要计算这种情况的值，通过对四种情况分别调用递归函数中，将返回的概率值累加后除以4即可。
这道题还有一个很大的优化，就是当N大过某一个数值(4800左右)的时候，返回的都是1。

class Solution
{
public:
    double dp[200][200];

    double recur(int a, int b)
    {
        if (a <= 0 && b <= 0) return 0.5;
        if (a <= 0) return 1.0;
        if (b <= 0) return 0;
        if (dp[a][b] > 0) return dp[a][b];
        double res = 0;
        res = 0.25 * (recur(a - 4, b) + recur(a - 3, b - 1) + recur(a - 2, b - 2) + recur(a - 1, b - 3));
        return dp[a][b] = res;
    }

    double soupServings(int N)
    {
        memset(dp, 0x00, sizeof(dp));
        return N >= 4800 ? 1.0 : recur((N + 24) / 25, (N + 24) / 25);
    }
};


// Source https://leetcode.com/problems/expressive-words/

Sometimes people repeat letters to represent extra feeling. For example:

"hello" -> "heeellooo"
"hi" -> "hiiii"
In these strings like "heeellooo", we have groups of adjacent letters that are all the same: "h", "eee", "ll", "ooo".

You are given a string s and an array of query strings words. A query word is stretchy if it can be made to be equal to s by any number of applications of the following extension operation: 
choose a group consisting of characters c, and add some number of characters c to the group so that the size of the group is three or more.

For example, starting with "hello", we could do an extension on the group "o" to get "hellooo", but we cannot get "helloo" since the group "oo" has a size less than three. 
Also, we could do another extension like "ll" -> "lllll" to get "helllllooo". If s = "helllllooo", then the query word "hello" would be stretchy because of these two extension operations: 
query = "hello" -> "hellooo" -> "helllllooo" = s.
Return the number of query strings that are stretchy.

 

Example 1:

Input: s = "heeellooo", words = ["hello", "hi", "helo"]
Output: 1
Explanation: 
We can extend "e" and "o" in the word "hello" to get "heeellooo".
We can't extend "helo" to get "heeellooo" because the group "ll" is not size 3 or more.
Example 2:

Input: s = "zzzzzyyyyy", words = ["zzyy","zy","zyy"]
Output: 3
 

Constraints:

1 <= s.length, words.length <= 100
1 <= words[i].length <= 100
s and words[i] consist of lowercase letters.

class Solution
{
public:
    int expressiveWords(string S, vector<string> &words)
    {
        int res = 0, m = S.length();
        for (string &word : words)
        {
            int i = 0, j = 0, n = word.length();
            while (i < m && j < n)
            {
                if (S[i] != word[j]) { break; }
                int k = i + 1;
                for (; k < m && S[k] == S[k-1]; ++k);
                int len1 = k - i;
                int t = j + 1;
                for (; t < n && word[t] == word[t-1]; ++t);
                int len2 = t - j;
                if (len1 < len2) { break; }
                if (len1 > len2 && len1 <= 2) { break; }
                i = k;
                j = t;
            }
            if (i == m && j == n) ++res;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/chalkboard-xor-game/

You are given an array of integers nums represents the numbers written on a chalkboard.

Alice and Bob take turns erasing exactly one number from the chalkboard, with Alice starting first. 
If erasing a number causes the bitwise XOR of all the elements of the chalkboard to become 0, then that player loses. 
The bitwise XOR of one element is that element itself, and the bitwise XOR of no elements is 0.

Also, if any player starts their turn with the bitwise XOR of all the elements of the chalkboard equal to 0, then that player wins.

Return true if and only if Alice wins the game, assuming both players play optimally.

 

Example 1:

Input: nums = [1,1,2]
Output: false
Explanation: 
Alice has two choices: erase 1 or erase 2. 
If she erases 1, the nums array becomes [1, 2]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 2 = 3. 
Now Bob can remove any element he wants, because Alice will be the one to erase the last element and she will lose. 
If Alice erases 2 first, now nums become [1, 1]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 1 = 0. Alice will lose.
Example 2:

Input: nums = [0,1]
Output: true
Example 3:

Input: nums = [1,2,3]
Output: true
 

Constraints:

1 <= nums.length <= 1000
0 <= nums[i] < 216

某个选手在开始移除数字之前，如果数组的异或值为0的话，选手直接获胜。所以，先检查一遍数组的异或值，如果是0的话，直接获胜。
如果数组中的数字个数是偶数，且异或值为x（x != 0），那么选手只要移除一个不为x的数字就行了，这样移除后数组的异或值也不会是0，接下来问题转化为数组中的数字个数是奇数，且异或值不为0
如果数组中的数字个数是奇数，且异或值为x（x != 0），即便选手先移除掉了一个数字，使得数组异或值仍不为0，接下来问题转化为数组中的数字个数是偶数，且异或值不为0，
如果数组中只剩下最后一个数字，别无选择只能移除最后一个数字，此时数组为空，异或值为0，选手失败

class Solution
{
public:
    bool xorGame(vector<int> &nums)
    {
        int x = 0, n = nums.size();
        for (int num : nums) x ^= num;
        return x == 0 || n % 2 == 0;
    }
};


// Source https://leetcode.com/problems/subdomain-visit-count/

A website domain "discuss.leetcode.com" consists of various subdomains. At the top level, we have "com", at the next level, we have "leetcode.com" 
and at the lowest level, "discuss.leetcode.com". When we visit a domain like "discuss.leetcode.com", we will also visit the parent domains "leetcode.com" and "com" implicitly.

A count-paired domain is a domain that has one of the two formats "rep d1.d2.d3" or "rep d1.d2" where rep is the number of visits to the domain and d1.d2.d3 is the domain itself.

For example, "9001 discuss.leetcode.com" is a count-paired domain that indicates that discuss.leetcode.com was visited 9001 times.
Given an array of count-paired domains cpdomains, return an array of the count-paired domains of each subdomain in the input. You may return the answer in any order.

 

Example 1:

Input: cpdomains = ["9001 discuss.leetcode.com"]
Output: ["9001 leetcode.com","9001 discuss.leetcode.com","9001 com"]
Explanation: We only have one website domain: "discuss.leetcode.com".
As discussed above, the subdomain "leetcode.com" and "com" will also be visited. So they will all be visited 9001 times.
Example 2:

Input: cpdomains = ["900 google.mail.com", "50 yahoo.com", "1 intel.mail.com", "5 wiki.org"]
Output: ["901 mail.com","50 yahoo.com","900 google.mail.com","5 wiki.org","5 org","1 intel.mail.com","951 com"]
Explanation: We will visit "google.mail.com" 900 times, "yahoo.com" 50 times, "intel.mail.com" once and "wiki.org" 5 times.
For the subdomains, we will visit "mail.com" 900 + 1 = 901 times, "com" 900 + 50 + 1 = 951 times, and "org" 5 times.
 

Constraints:

1 <= cpdomain.length <= 100
1 <= cpdomain[i].length <= 100
cpdomain[i] follows either the "repi d1i.d2i.d3i" format or the "repi d1i.d2i" format.
repi is an integer in the range [1, 104].
d1i, d2i, and d3i consist of lowercase English letters.

class Solution
{
public:
    vector<string> subdomainVisits(vector<string> &cpdomains)
    {
        vector<string> res;
        unordered_map<string, int> subdomainCnt;
        for (auto &cpdomain : cpdomains)
        {
            int spaceIdx = cpdomain.find(" ");
            int cnt = stoi(cpdomain.substr(0, spaceIdx));
            string rem = cpdomain.substr(spaceIdx + 1);
            for (int i = 0; i < rem.size(); ++i)
            {
                if (rem[i] == '.')
                {
                    subdomainCnt[rem.substr(i + 1)] += cnt;
                }
            }
            subdomainCnt[rem] += cnt;
        }
        for (auto &p : subdomainCnt)
        {
            res.push_back(to_string(p.second) + " " + p.first);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/largest-triangle-area/

Given an array of points on the X-Y plane points where points[i] = [xi, yi], return the area of the largest triangle that can be formed by any three different points. 
Answers within 10-5 of the actual answer will be accepted.

 

Example 1:


Input: points = [[0,0],[0,1],[1,0],[0,2],[2,0]]
Output: 2.00000
Explanation: The five points are shown in the above figure. The red triangle is the largest.
Example 2:

Input: points = [[1,0],[0,0],[0,1]]
Output: 0.50000
 

Constraints:

3 <= points.length <= 50
-50 <= xi, yi <= 50
All the given points are unique.

	x1,y1(A)

		x3,y3(C)

x2,y2(B)

        (D)          (E)         (F)         -> x坐标轴

三角形面积= 梯形DEAB + 梯形FEAC - 梯形DFCB
=(y2 + y1) * (x1 - x2) / 2 + (y3 + y1) * (x3 - x1) /2 - (y2 + y3) * (x3 - x2) / 2
=(y2 * x1 - y2 * x2 + y1 * x1 - y1 * x2 + y3 * x3 - y3 * x1 + y1 * x3 - y1 * x1 - (y2 * x3 - y2 * x2 + y3 * x3 - y3 * x2)) / 2
=(y2 * x1 - y2 * x2 + y1 * x1 - y1 * x2 + y3 * x3 - y3 * x1 + y1 * x3 - y1 * x1 - y2 * x3 + y2 * x2 - y3 * x3 + y3 * x2) / 2
=(

y2 * x1 - y2 * x2
- y2 * x3 + y2 * x2 = y2 * x1 - y2 * x3

y1 * x1 - y1 * x2 
y1 * x3 - y1 * x1 = y1 * x3 - y1 * x2

y3 * x3 - y3 * x1
 - y3 * x3 + y3 * x2 = y3 * x2 - y3 * x1

= (y2 * x1 + y3 * x2 + y1 * x3 - y3 * x1 - y1 * x2 - y2 * x3) / 2

梯形面积 = (上底+下底) * 高 / 2
(上底 * 高) * 2 / 2 + (x1 * 高) / 2 + (x2 * 高) / 2
(上底 * 2 + x1 + x2） * 高 / 2
上底 + x1 + x2 = 下底

class Solution
{
public:
    double largestTriangleArea(vector<vector<int>> &points)
    {
        double res = 0;
        for (int i = 0; i < points.size(); ++i)
        {
            for (int j = i + 1; j < points.size(); ++j)
            {
                for (int k = j + 1; k < points.size(); ++k)
                {
                    int x1 = points[i][0], y1 = points[i][1];
                    int x2 = points[j][0], y2 = points[j][1];
                    int x3 = points[k][0], y3 = points[k][1];
                    double area = abs(0.5 * (x2 * y3 + x1 * y2 + x3 * y1 - x3 * y2 - x2 * y1 - x1 * y3));
                    res = max(res, area);
                }
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/largest-sum-of-averages/

You are given an integer array nums and an integer k. You can partition the array into at most k non-empty adjacent subarrays. 
The score of a partition is the sum of the averages of each subarray.

Note that the partition must use every integer in nums, and that the score is not necessarily an integer.

Return the maximum score you can achieve of all the possible partitions. Answers within 10-6 of the actual answer will be accepted.

 

Example 1:

Input: nums = [9,1,2,3,9], k = 3
Output: 20.00000
Explanation: 
The best choice is to partition nums into [9], [1, 2, 3], [9]. The answer is 9 + (1 + 2 + 3) / 3 + 9 = 20.
We could have also partitioned nums into [9, 1], [2], [3, 9], for example.
That partition would lead to a score of 5 + 2 + 6 = 13, which is worse.
Example 2:

Input: nums = [1,2,3,4,5,6,7], k = 4
Output: 20.50000
 

Constraints:

1 <= nums.length <= 100
1 <= nums[i] <= 104
1 <= k <= nums.length

class Solution
{
public:
    int n;
    double avg[200][200];
    double dp[200][200];
    double initVal;

    double largestAvgSum(int start, int k)
    {
        if (start >= n) return 0;

        if(k == 1) return avg[start][n - 1];

        if(dp[start][k] != initVal) return dp[start][k];

        double maxAvg = INT_MIN;
        for(int end = start; end < n; end++)
        {
            maxAvg = max(maxAvg, avg[start][end] + largestAvgSum(end + 1, k - 1));
        }
        return dp[start][k] =  maxAvg;
    }

    double largestSumOfAverages(vector<int> &nums, int k)
    {
        n = nums.size();
        memset(avg, 0x00, sizeof(avg));
        memset(dp, 0xf0, sizeof(dp));
        memset(&initVal, 0xf0, sizeof(initVal));

        for(int i = 0; i < n; i++)
        {
            double sum = 0;
            for(int j = i; j < n; j++)
            {
                sum += nums[j];
                avg[i][j] = avg[j][i] = sum / (j - i + 1);
            }
        }

        return largestAvgSum(0, k);
    }
};


// Source https://leetcode.com/problems/binary-tree-pruning/

Given the root of a binary tree, return the same tree where every subtree (of the given tree) not containing a 1 has been removed.

A subtree of a node node is node plus every node that is a descendant of node.

 

Example 1:


Input: root = [1,null,0,0,1]
Output: [1,null,0,null,1]
Explanation: 
Only the red nodes satisfy the property "every subtree not containing a 1".
The diagram on the right represents the answer.
Example 2:


Input: root = [1,0,1,0,0,0,1]
Output: [1,null,1,null,1]
Example 3:


Input: root = [1,1,0,1,1,0,1,0]
Output: [1,1,0,1,1,null,1]
 

Constraints:

The number of nodes in the tree is in the range [1, 200].
Node.val is either 0 or 1.

class Solution
{
public:
    TreeNode *pruneTree(TreeNode *root)
    {
        if (!root) return NULL;
        root->left = pruneTree(root->left);
        root->right = pruneTree(root->right);
        return (!root->left && !root->right && root->val == 0) ? NULL : root;
    }
};


// Source https://leetcode.com/problems/bus-routes/

You are given an array routes representing bus routes where routes[i] is a bus route that the ith bus repeats forever.

For example, if routes[0] = [1, 5, 7], this means that the 0th bus travels in the sequence 1 -> 5 -> 7 -> 1 -> 5 -> 7 -> 1 -> ... forever.
You will start at the bus stop source (You are not on any bus initially), and you want to go to the bus stop target. You can travel between bus stops by buses only.

Return the least number of buses you must take to travel from source to target. Return -1 if it is not possible.

 

Example 1:

Input: routes = [[1,2,7],[3,6,7]], source = 1, target = 6
Output: 2
Explanation: The best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6.
Example 2:

Input: routes = [[7,12],[4,5,15],[6],[15,19],[9,12,13]], source = 15, target = 12
Output: -1
 

Constraints:

1 <= routes.length <= 500.
1 <= routes[i].length <= 105
All the values of routes[i] are unique.
sum(routes[i].length) <= 105
0 <= routes[i][j] < 106
0 <= source, target < 106

class Solution
{
public:
    int numBusesToDestination(vector<vector<int>> &routes, int S, int T)
    {
        if (S == T) return 0;
        unordered_map<int, vector<int>> stop2bus;
        for (int i = 0; i < routes.size(); ++i)
        {
            for (int j : routes[i])
            {
                stop2bus[j].push_back(i);
            }
        }
        int res = 1;
        queue<int> q;
        unordered_set<int> visited;
        q.push(S);
        while (!q.empty())
        {
            int sz = q.size();
            for (int i = 0; i < sz; ++i)
            {
                int t = q.front();
                q.pop();
                for (int bus : stop2bus[t])
                {
                    if (visited.count(bus)) continue;
                    visited.insert(bus);
                    for (int stop : routes[bus])
                    {
                        if (stop == T) return res;
                        q.push(stop);
                    }
                }
            }
            ++res;
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/ambiguous-coordinates/

We had some 2-dimensional coordinates, like "(1, 3)" or "(2, 0.5)". Then, we removed all commas, decimal points, and spaces and ended up with the string s.

For example, "(1, 3)" becomes s = "(13)" and "(2, 0.5)" becomes s = "(205)".
Return a list of strings representing all possibilities for what our original coordinates could have been.

Our original representation never had extraneous zeroes, so we never started with numbers like "00", "0.0", "0.00", "1.0", "001", "00.01", 
or any other number that can be represented with fewer digits. Also, a decimal point within a number never occurs without at least one digit occurring before it, 
so we never started with numbers like ".1".

The final answer list can be returned in any order. All coordinates in the final answer have exactly one space between them (occurring after the comma.)

 

Example 1:

Input: s = "(123)"
Output: ["(1, 2.3)","(1, 23)","(1.2, 3)","(12, 3)"]
Example 2:

Input: s = "(0123)"
Output: ["(0, 1.23)","(0, 12.3)","(0, 123)","(0.1, 2.3)","(0.1, 23)","(0.12, 3)"]
Explanation: 0.0, 00, 0001 or 00.01 are not allowed.
Example 3:

Input: s = "(00011)"
Output: ["(0, 0.011)","(0.001, 1)"]
 

Constraints:

4 <= s.length <= 12
s[0] == '(' and s[s.length - 1] == ')'.
The rest of s are digits.

class Solution
{
public:
    vector<string> ambiguousCoordinates(string s)
    {
        s = s.substr(1, s.length() - 2);
        int size = s.length();
        vector<string> ans;
        for (int split = 1; split < size; split++)
        {
            for(auto first : generate(0, split - 1, s))
            {
                for(auto second : generate(split, size - 1, s))
                {
                    ans.push_back("(" + first + "," + " " + second + ")");
                }
            }
        }
        return ans;
    }
    vector<string> generate(int start, int end, string &s)
    {
        if(s[start] == '0')
        {
            if(end == start) return{"0"};
            else if (s[end] == '0') return{};
            else
            {
                return{"0." + s.substr(start + 1, end - start)};
            }
        }
        string base = s.substr(start, 1 + end - start);
        vector<string> res = {base};
        if(s[end] != '0')
        {
            for(int i = 1; i < base.length(); i++)
            {
                res.push_back(base.substr(0, i) + "." + base.substr(i));
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/linked-list-components/

You are given the head of a linked list containing unique integer values and an integer array nums that is a subset of the linked list values.

Return the number of connected components in nums where two values are connected if they appear consecutively in the linked list.

 

Example 1:


Input: head = [0,1,2,3], nums = [0,1,3]
Output: 2
Explanation: 0 and 1 are connected, so [0, 1] and [3] are the two connected components.
Example 2:


Input: head = [0,1,2,3,4], nums = [0,3,1,4]
Output: 2
Explanation: 0 and 1 are connected, 3 and 4 are connected, so [0, 1] and [3, 4] are the two connected components.
 

Constraints:

The number of nodes in the linked list is n.
1 <= n <= 104
0 <= Node.val < n
All the values Node.val are unique.
1 <= nums.length <= n
0 <= nums[i] < n
All the values of nums are unique.

class Solution
{
public:
    int numComponents(ListNode *head, vector<int> &nums)
    {
        int arr[10001];
        memset(arr, 0, sizeof(arr));
        for(auto val : nums) arr[val] = 1;
        int res = 0;
        ListNode *cur = head;
        while(cur)
        {
            if(arr[cur->val] == 1)
            {
                while(cur and arr[cur->val] == 1)
                {
                    cur = cur->next;
                }
                ++res;
            }
            else
                cur = cur->next;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/race-car/

Your car starts at position 0 and speed +1 on an infinite number line. Your car can go into negative positions. 
Your car drives automatically according to a sequence of instructions 'A' (accelerate) and 'R' (reverse):

When you get an instruction 'A', your car does the following:
position += speed
speed *= 2
When you get an instruction 'R', your car does the following:
If your speed is positive then speed = -1
otherwise speed = 1
Your position stays the same.
For example, after commands "AAR", your car goes to positions 0 --> 1 --> 3 --> 3, and your speed goes to 1 --> 2 --> 4 --> -1.

Given a target position target, return the length of the shortest sequence of instructions to get there.

 

Example 1:

Input: target = 3
Output: 2
Explanation: 
The shortest instruction sequence is "AA".
Your position goes from 0 --> 1 --> 3.
Example 2:

Input: target = 6
Output: 5
Explanation: 
The shortest instruction sequence is "AAARA".
Your position goes from 0 --> 1 --> 3 --> 7 --> 7 --> 6.
 

Constraints:

1 <= target <= 104

起始时小车在位置0，速度为1，目标位置为target
小车只有两种操作，第一种是加速操作，首先当前位置加上小车速度，然后小车速度乘以2。第二种是反向操作，小车位置不变，小车速度重置为单位长度，并且反向。
问我们最少需要多少个操作才能到达 target。我们首先来看下若小车一直加速的话，都能经过哪些位置，从起点开始，若小车连加五次速，位置的变化为：

0 -> 1 -> 3 -> 7 -> 15 -> 31

那么我们得出了结论，当小车从0开始连加n个速的话，其将会到达位置 2^n - 1。我们可以看出，小车越往后，位置跨度越大，那么当 target 不在这些位置上，很有可能一脚油门就开过了，
比如，target = 6 的话，小车在3的位置上，一脚油门，就到7了，这时候就要回头，回头后，速度变为 -1，此时正好就到达6了，那么小车的操作如下：

Initial:    pos -> 0,    speed -> 1

A:    　　pos -> 1,    speed -> 2

A:    　　pos -> 3,    speed -> 4

A:    　　pos -> 7,    speed -> 8

R:    　　pos -> 7,    speed -> -1

A:    　　pos -> 6,    speed -> -2

所以，我们只需要5步就可以了。但是还有个问题，假如回头，再一脚油门，又过站了怎么办？
比如 target = 5 的时候，之前小车回头之后到达了6的位置，此时速度已经是 -2了，再加个速，就直接干到了位置4，就得再回头，那么这种方式小车的操作如下：

Initial:    pos -> 0,    speed -> 1

A:    　　pos -> 1,    speed -> 2

A:    　　pos -> 3,    speed -> 4

A:    　　pos -> 7,    speed -> 8

R:    　　pos -> 7,    speed -> -1

A:    　　pos -> 6,    speed -> -2

A:    　　pos -> 4,    speed -> -4

R:    　　pos -> 4,    speed -> 1

A:    　　pos -> 5,    speed -> 2

那么此时我们就用了8步，但这是最优的方法么，我们一定要在过了目标才回头么？
其实不必，我们可以在到达 target 之前提前调头，然后往回走走，再调回来，使得之后能恰好到达 target，比如下面这种走法：

Initial:    pos -> 0,    speed -> 1

A:    　　pos -> 1,    speed -> 2

A:    　　pos -> 3,    speed -> 4

R:    　　pos -> 3,    speed -> -1

A:    　　pos -> 2,    speed -> -2

R:    　　pos -> 2,    speed -> 1

A:    　　pos -> 3,    speed -> 2

A:    　　pos -> 5,    speed -> 4

我们在未到达 target 的位置3时就直接掉头了，往后退到2，再调回来，往前走，到达5，此时总共只用了7步，是最优解。

class Solution
{
public:
    int racecar(int target)
    {
        queue<pair<int, long>>q;
        q.push({0, 1});
        int level = 0;
        while(!q.empty())
        {
            int sz = q.size();
            for(int i = 0; i < sz; i++)
            {
                pair<int, long> t = q.front();
                q.pop();
                if(t.first == target) return level;
                q.push({t.first + t.second, t.second * 2});
                long speed = t.second < 0 ? 1 : -1;
                if((t.first + t.second > target && t.second > 0) ||
                        (t.first + t.second < target && t.second < 0))
                {
                    q.push({t.first, speed});
                }
            }
            level++;
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/most-common-word/

Given a string paragraph and a string array of the banned words banned, return the most frequent word that is not banned. 
It is guaranteed there is at least one word that is not banned, and that the answer is unique.

The words in paragraph are case-insensitive and the answer should be returned in lowercase.

 

Example 1:

Input: paragraph = "Bob hit a ball, the hit BALL flew far after it was hit.", banned = ["hit"]
Output: "ball"
Explanation: 
"hit" occurs 3 times, but it is a banned word.
"ball" occurs twice (and no other word does), so it is the most frequent non-banned word in the paragraph. 
Note that words in the paragraph are not case sensitive,
that punctuation is ignored (even if adjacent to words, such as "ball,"), 
and that "hit" isn't the answer even though it occurs more because it is banned.
Example 2:

Input: paragraph = "a.", banned = []
Output: "a"
 

Constraints:

1 <= paragraph.length <= 1000
paragraph consists of English letters, space ' ', or one of the symbols: "!?',;.".
0 <= banned.length <= 100
1 <= banned[i].length <= 10
banned[i] consists of only lowercase English letters.

class Solution
{
public:
    string mostCommonWord(string paragraph, vector<string> &banned)
    {
        unordered_set<string> ban(banned.begin(), banned.end());
        unordered_map<string, int> strCnt;
        int mx = 0;
        for (auto &c : paragraph) c = isalpha(c) ? tolower(c) : ' ';
        istringstream iss(paragraph);
        string t = "", res = "";
        while (iss >> t)
        {
            if (!ban.count(t) && ++strCnt[t] > mx)
            {
                mx = strCnt[t];
                res = t;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/short-encoding-of-words/

A valid encoding of an array of words is any reference string s and array of indices indices such that:

words.length == indices.length
The reference string s ends with the '#' character.
For each index indices[i], the substring of s starting from indices[i] and up to (but not including) the next '#' character is equal to words[i].
Given an array of words, return the length of the shortest reference string s possible of any valid encoding of words.

 

Example 1:

Input: words = ["time", "me", "bell"]
Output: 10
Explanation: A valid encoding would be s = "time#bell#" and indices = [0, 2, 5].
words[0] = "time", the substring of s starting from indices[0] = 0 to the next '#' is underlined in "time#bell#"
words[1] = "me", the substring of s starting from indices[1] = 2 to the next '#' is underlined in "time#bell#"
words[2] = "bell", the substring of s starting from indices[2] = 5 to the next '#' is underlined in "time#bell#"
Example 2:

Input: words = ["t"]
Output: 2
Explanation: A valid encoding would be s = "t#" and indices = [0].
 

Constraints:

1 <= words.length <= 2000
1 <= words[i].length <= 7
words[i] consists of only lowercase letters.

class Solution
{
public:
    vector<string> reverse_words(vector<string> &words)
    {
        vector<string> res;
        for (auto word : words)
        {
            reverse(word.begin(), word.end());
            res.emplace_back(std::move(word));
        }
        return res;
    }

    int minimumLengthEncoding(vector<string> &words)
    {
        vector<string> r_words = reverse_words(words);
        int res = 0;
        sort(r_words.begin(), r_words.end());
        int n = r_words.size();
        for (int i = 0; i < n - 1; ++i)
        {
            if (r_words[i + 1].find(r_words[i]) != 0)
            {
                res += r_words[i].size() + 1;
            }
        }
        res += r_words[n - 1].size() + 1;
        return res;
    }
};


// Source https://leetcode.com/problems/shortest-distance-to-a-character/

Given a string s and a character c that occurs in s, return an array of integers answer where answer.length == s.length 
and answer[i] is the distance from index i to the closest occurrence of character c in s.

The distance between two indices i and j is abs(i - j), where abs is the absolute value function.

 

Example 1:

Input: s = "loveleetcode", c = "e"
Output: [3,2,1,0,1,0,0,1,2,2,1,0]
Explanation: The character 'e' appears at indices 3, 5, 6, and 11 (0-indexed).
The closest occurrence of 'e' for index 0 is at index 3, so the distance is abs(0 - 3) = 3.
The closest occurrence of 'e' for index 1 is at index 3, so the distance is abs(1 - 3) = 2.
For index 4, there is a tie between the 'e' at index 3 and the 'e' at index 5, but the distance is still the same: abs(4 - 3) == abs(4 - 5) = 1.
The closest occurrence of 'e' for index 8 is at index 6, so the distance is abs(8 - 6) = 2.
Example 2:

Input: s = "aaab", c = "b"
Output: [3,2,1,0]
 

Constraints:

1 <= s.length <= 104
s[i] and c are lowercase English letters.
It is guaranteed that c occurs at least once in s.

class Solution
{
public:
    vector<int> shortestToChar(string S, char C)
    {
        vector<int> res, idx;
        for (int i = 0; i < S.size(); ++i)
        {
            if (S[i] == C) idx.push_back(i);
        }
        for (int i = 0; i < S.size(); ++i)
        {
            auto it = lower_bound(idx.begin(), idx.end(), i);
            if (it == idx.end())
            {
                auto pre = prev(it);
                res.push_back(i - *pre);
            }
            else if (it == idx.begin()) res.push_back(*it - i);
            else
            {
                auto pre = prev(it);
                int d1 = *it - i, d2 = i - *pre;
                res.push_back(min(d1, d2));
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/card-flipping-game/

You are given n cards, with a positive integer printed on the front and back of each card (possibly different). You can flip any number of cards (possibly zero).

After choosing the front and the back of each card, you will pick each card, and if the integer printed on the back of this card is not printed on the front of any other card, 
then this integer is good.

You are given two integer array fronts and backs where fronts[i] and backs[i] are the integers printer on the front and the back of the ith card respectively.

Return the smallest good and integer after flipping the cards. If there are no good integers, return 0.

Note that a flip swaps the front and back numbers, so the value on the front is now on the back and vice versa.

 

Example 1:

Input: fronts = [1,2,4,4,7], backs = [1,3,4,1,3]
Output: 2
Explanation: If we flip the second card, the fronts are [1,3,4,4,7] and the backs are [1,2,4,1,3].
We choose the second card, which has the number 2 on the back, and it is not on the front of any card, so 2 is good.
Example 2:

Input: fronts = [1], backs = [1]
Output: 0
 

Constraints:

n == fronts.length
n == backs.length
1 <= n <= 1000
1 <= fronts[i], backs[i] <= 2000

class Solution
{
public:
    int flipgame(vector<int> &fronts, vector<int> &backs)
    {
        int res = INT_MAX, n = fronts.size();
        unordered_set<int> same;
        for (int i = 0; i < n; ++i)
        {
            if (fronts[i] == backs[i]) same.insert(fronts[i]);
        }
        for (int front : fronts)
        {
            if (!same.count(front)) res = min(res, front);
        }
        for (int back : backs)
        {
            if (!same.count(back)) res = min(res, back);
        }
        return (res == INT_MAX) ? 0 : res;
    }
};


// Source https://leetcode.com/problems/binary-trees-with-factors/

Given an array of unique integers, arr, where each integer arr[i] is strictly greater than 1.

We make a binary tree using these integers, and each number may be used for any number of times. 
Each non-leaf node's value should be equal to the product of the values of its children.

Return the number of binary trees we can make. The answer may be too large so return the answer modulo 109 + 7.

 

Example 1:

Input: arr = [2,4]
Output: 3
Explanation: We can make these trees: [2], [4], [4, 2, 2]
Example 2:

Input: arr = [2,4,5,10]
Output: 7
Explanation: We can make these trees: [2], [4], [5], [10], [4, 2, 2], [10, 2, 5], [10, 5, 2].
 

Constraints:

1 <= arr.length <= 1000
2 <= arr[i] <= 109
All the values of arr are unique.

class Solution
{
public:
    int numFactoredBinaryTrees(vector<int> &arr)
    {
        sort(arr.begin(), arr.end());
        int n = arr.size();
        int mod = 1000000007;
        vector<long long> dp(n, 1);
        unordered_set<int> st;
        for(int val : arr) st.insert(val);
        unordered_map<int, int> index;
        for(int i = 0; i < n; i++) index[arr[i]] = i;
        for(int i = 1; i < n; i++)
        {
            int num = arr[i];
            int srt = sqrt(num);
            for(int j = 0; j < i; j++)
            {
                int num2 = arr[j];
                if(num2 > srt)
                    break;
                int num3 = num / num2;
                if(num % num2 == 0 && st.find(num3) != st.end())
                {
                    if (num2 != num3)
                    {
                        dp[i] = (dp[i] + 2 * (dp[j] * dp[index[num3]])) % mod;
                    }
                    else
                    {
                        dp[i] = (dp[i] + (dp[j] * dp[index[num3]])) % mod;
                    }
                }
            }
        }
        int sum = 0;
        for(int cnt : dp) sum = (sum + cnt) % mod;
        return sum;
    }
};


// Source https://leetcode.com/problems/goat-latin/

You are given a string sentence that consist of words separated by spaces. Each word consists of lowercase and uppercase letters only.

We would like to convert the sentence to "Goat Latin" (a made-up language similar to Pig Latin.) The rules of Goat Latin are as follows:

If a word begins with a vowel ('a', 'e', 'i', 'o', or 'u'), append "ma" to the end of the word.
For example, the word "apple" becomes "applema".
If a word begins with a consonant (i.e., not a vowel), remove the first letter and append it to the end, then add "ma".
For example, the word "goat" becomes "oatgma".
Add one letter 'a' to the end of each word per its word index in the sentence, starting with 1.
For example, the first word gets "a" added to the end, the second word gets "aa" added to the end, and so on.
Return the final sentence representing the conversion from sentence to Goat Latin.

 

Example 1:

Input: sentence = "I speak Goat Latin"
Output: "Imaa peaksmaaa oatGmaaaa atinLmaaaaa"
Example 2:

Input: sentence = "The quick brown fox jumped over the lazy dog"
Output: "heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa"
 

Constraints:

1 <= sentence.length <= 150
sentence consists of English letters and spaces.
sentence has no leading or trailing spaces.
All the words in sentence are separated by a single space.

class Solution
{
public:
    string toGoatLatin(string S)
    {
        unordered_set<char> vowel{'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};
        istringstream ss(S);
        string res = "", t;
        int cnt = 1;
        while (ss >> t)
        {
            res += (vowel.count(t[0]) ? t : t.substr(1) + t[0]) + "ma" + string(cnt, 'a');
            res.push_back(' ');
            ++cnt;
        }
        res.pop_back();
        return res;
    }
};


// Source https://leetcode.com/problems/friends-of-appropriate-ages/

There are n persons on a social media website. You are given an integer array ages where ages[i] is the age of the ith person.

A Person x will not send a friend request to a person y (x != y) if any of the following conditions is true:

age[y] <= 0.5 * age[x] + 7
age[y] > age[x]
age[y] > 100 && age[x] < 100
Otherwise, x will send a friend request to y.

Note that if x sends a request to y, y will not necessarily send a request to x. Also, a person will not send a friend request to themself.

Return the total number of friend requests made.

 

Example 1:

Input: ages = [16,16]
Output: 2
Explanation: 2 people friend request each other.
Example 2:

Input: ages = [16,17,18]
Output: 2
Explanation: Friend requests are made 17 -> 16, 18 -> 17.
Example 3:

Input: ages = [20,30,100,110,120]
Output: 3
Explanation: Friend requests are made 110 -> 100, 120 -> 110, 120 -> 100.
 

Constraints:

n == ages.length
1 <= n <= 2 * 104
1 <= ages[i] <= 120

0.5 * age[x] + 7 < age[x]
7 < 0.5 * age[x]
14 < age[x]

有效的age[x]满足>=15 && <= 120

class Solution
{
public:
    int numFriendRequests(vector<int> &ages)
    {
        int res = 0;
        vector<int> numInAge(121), sumInAge(121);
        for (int age : ages) ++numInAge[age];
        for (int i = 1; i <= 120; ++i)
        {
            sumInAge[i] = numInAge[i] + sumInAge[i - 1];
        }
        for (int i = 15; i <= 120; ++i)
        {
            if (numInAge[i] == 0) continue;
            int cnt = sumInAge[i] - sumInAge[i * 0.5 + 7];
            if (cnt > 1) res += (cnt - 1) * numInAge[i];
        }
        return res;
    }
};


// Source https://leetcode.com/problems/most-profit-assigning-work/

You have n jobs and m workers. You are given three arrays: difficulty, profit, and worker where:

difficulty[i] and profit[i] are the difficulty and the profit of the ith job, and
worker[j] is the ability of jth worker (i.e., the jth worker can only complete a job with difficulty at most worker[j]).
Every worker can be assigned at most one job, but one job can be completed multiple times.

For example, if three workers attempt the same job that pays $1, then the total profit will be $3. If a worker cannot complete any job, their profit is $0.
Return the maximum profit we can achieve after assigning the workers to the jobs.

 

Example 1:

Input: difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7]
Output: 100
Explanation: Workers are assigned jobs of difficulty [4,4,6,6] and they get a profit of [20,20,30,30] separately.
Example 2:

Input: difficulty = [85,47,57], profit = [24,66,99], worker = [40,25,25]
Output: 0
 

Constraints:

n == difficulty.length
n == profit.length
m == worker.length
1 <= n, m <= 104
1 <= difficulty[i], profit[i], worker[i] <= 105

class Solution
{
public:
    int maxProfitAssignment(vector<int> &difficulty, vector<int> &profit, vector<int> &worker)
    {
        int res = 0, cur = 0;
        map<int, int> m;
        for (int i = 0; i < difficulty.size(); ++i)
        {
            m[difficulty[i]] = max(m[difficulty[i]], profit[i]);
        }
        for (auto &a : m)
        {
            a.second = max(a.second, cur);
            cur = a.second;
        }
        for (int i = 0; i < worker.size(); ++i)
        {
            auto it = m.upper_bound(worker[i]);
            if (it != m.begin())
            {
                auto pre = prev(it);
                res += pre->second;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/making-a-large-island/

You are given an n x n binary matrix grid. You are allowed to change at most one 0 to be 1.

Return the size of the largest island in grid after applying this operation.

An island is a 4-directionally connected group of 1s.

 

Example 1:

Input: grid = [[1,0],[0,1]]
Output: 3
Explanation: Change one 0 to 1 and connect two 1s, then we get an island with area = 3.
Example 2:

Input: grid = [[1,1],[1,0]]
Output: 4
Explanation: Change the 0 to 1 and make the island bigger, only one island with area = 4.
Example 3:

Input: grid = [[1,1],[1,1]]
Output: 4
Explanation: Can't change any 0 to 1, only one island with area = 4.
 

Constraints:

n == grid.length
n == grid[i].length
1 <= n <= 500
grid[i][j] is either 0 or 1.

class Solution
{
public:

    int parent[500001] = {0};
    int vsize[500001] = {0};
    int n;
    int ans;

    bool valid(int x, int y, int n)
    {
        return (x >= 0 && x < n && y >= 0 && y < n);
    }

    void make(int x)
    {
        parent[x] = x;
        vsize[x] = 1;
    }

    int find(int x)
    {
        if(parent[x] != x) parent[x] = find(parent[x]);
        return parent[x];
    }

    void join(int a, int b)
    {
        a = find(a);
        b = find(b);
        if(a == b) return;
        if(vsize[a] < vsize[b])
        {
            parent[a] = b;
            vsize[b] += vsize[a];
            ans = max(ans, vsize[b]);
        }
        else if(vsize[b] < vsize[a])
        {
            parent[b] = a;
            vsize[a] += vsize[b];
            ans = max(ans, vsize[a]);
        }
        else
        {
            parent[b] = a;
            vsize[a] += vsize[b];
            ans = max(ans, vsize[a]);
        }
    }

    int largestIsland(vector<vector<int>> &grid)
    {
        n = grid.size();
        ans = 0;
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(grid[i][j]) { make(1000 * i + j); ans = 1; }
            }
        }
        if (ans == 0) return 1;
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(grid[i][j])
                {
                    if(i && grid[i - 1][j]) join(1000 * i + j, 1000 * (i - 1) + j);
                    if(j && grid[i][j - 1]) join(1000 * i + j, 1000 * i + j - 1);
                    if(i < n - 1 && grid[i + 1][j]) join(1000 * i + j, 1000 * (i + 1) + j);
                    if(j < n - 1 && grid[i][j + 1]) join(1000 * i + j, 1000 * i + j + 1);
                }
            }
        }

        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(grid[i][j]) continue;
                int pp = 0;
                set<int> s;
                if(valid(i + 1, j, n) && grid[i + 1][j]) s.insert(find(1000 * (i + 1) + j));
                if(valid(i - 1, j, n) && grid[i - 1][j]) s.insert(find(1000 * (i - 1) + j));
                if(valid(i, j - 1, n) && grid[i][j - 1]) s.insert(find(1000 * i + j - 1));
                if(valid(i, j + 1, n) && grid[i][j + 1]) s.insert(find(1000 * i + j + 1));
                for(auto qq : s) pp += vsize[qq];
                ans = max(ans, pp + 1);
            }
        }

        return ans;
    }
};


// Source https://leetcode.com/problems/count-unique-characters-of-all-substrings-of-a-given-string/

Let's define a function countUniqueChars(s) that returns the number of unique characters on s.

For example, calling countUniqueChars(s) if s = "LEETCODE" then "L", "T", "C", "O", "D" are the unique characters since they appear only once in s, therefore countUniqueChars(s) = 5.
Given a string s, return the sum of countUniqueChars(t) where t is a substring of s.

Notice that some substrings can be repeated so in this case you have to count the repeated ones too.

 

Example 1:

Input: s = "ABC"
Output: 10
Explanation: All possible substrings are: "A","B","C","AB","BC" and "ABC".
Evey substring is composed with only unique letters.
Sum of lengths of all substring is 1 + 1 + 1 + 2 + 2 + 3 = 10
Example 2:

Input: s = "ABA"
Output: 8
Explanation: The same as example 1, except countUniqueChars("ABA") = 1.
Example 3:

Input: s = "LEETCODE"
Output: 92
 

Constraints:

1 <= s.length <= 105
s consists of uppercase English letters only.

首先来看一个字符串 CACACCAC，若想让第二个A成为子串中的唯一，那么必须要知道其前后两个相邻的A的位置，比如 CA(CACC)AC，括号中的子串 CACC 中A就是唯一的存在，
同样，对于 CAC(AC)CAC，括号中的子串 AC 中A也是唯一的存在。这样就可以观察出来，只要左括号的位置在第一个A和第二个A之间（共有2个位置），右括号在第二个A和第三个A之间（共有3个位置），
这样第二个A在6个子串中成为那个唯一的存在。换个角度来说，只有6个子串可以让第二个A作为单独的存在从而在结果中贡献。
这样的话，每个字母出现的位置就很重要了，由于上面的分析说了，只要知道三个位置，就可以求出中间的字母的贡献值，
为了节省空间，只保留每个字母最近两次的出现位置，这样加上当前位置i，就可以知道前一个字母的贡献值了。
这里使用一个长度为 26x2 的二维数组 idx，因为题目中限定了只有26个大写字母。这里只保留每个字母的前两个出现位置，均初始化为 -1。然后遍历S中每个字母，对于每个字符减去A，就是其对应位置，此时将前一个字母的贡献值累加到结果 res 中，假如当前字母是首次出现，也不用担心，前两个字母的出现位置都是 -1，相减后为0，所以累加值还是0。然后再更新 idx 数组的值。由于每次都是计算该字母前一个位置的贡献值，所以最后还需要一个 for 循环去计算每个字母最后出现位置的贡献值，此时由于身后没有该字母了，就用位置N来代替即可

class Solution
{
public:
    int uniqueLetterString(string S)
    {
        int res = 0, n = S.size(), M = 1e9 + 7;
        vector<vector<int>> idx(26, vector<int>(2, -1));
        for (int i = 0; i < n; ++i)
        {
            int c = S[i] - 'A';
            res = (res + (i - idx[c][1]) * (idx[c][1] - idx[c][0]) % M) % M;
            idx[c][0] = idx[c][1];
            idx[c][1] = i;
        }
        for (int c = 0; c < 26; ++c)
        {
            res = (res + (n - idx[c][1]) * (idx[c][1] - idx[c][0]) % M) % M;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/consecutive-numbers-sum/

Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.

 

Example 1:

Input: n = 5
Output: 2
Explanation: 5 = 2 + 3
Example 2:

Input: n = 9
Output: 3
Explanation: 9 = 4 + 5 = 2 + 3 + 4
Example 3:

Input: n = 15
Output: 4
Explanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5
 

Constraints:

1 <= n <= 109

由于要写成连续正整数之和，则肯定是一个等差数列，并且差值为1，这个等差数列不必从1开始，假设其是从x开始的，且个数共有k个，则可以写出这个等差数列为：
x, x+1, x+2, ..., x+k-1
其和为N，根据等差数列的求和公式，可以写出下列等式：

kx + (k-1)k / 2 = N
变形后可得到：

kx = N - (k-1)k / 2
这样，只要对于任意一个k值，x能得到正整数解，就表示一定会有一个对应的等差数列和为N。下面要来求k的范围，由于k是等差数列的长度，首先肯定是要大于0的，这是下限。
求上限还是要利用上面的那个式子，由于x也必须是正整数，可以得到不等式：

N - (k-1)k / 2 > 0
从而得到近似解：
2N > (k -1)k
k^2 - k - 2N = 0
k = (1 + sqrt(1 + 8N)) / 2 < 1/2 + sqrt(2*(N+1))
k < sqrt(2N)
有了k的范围就可以开始遍历了，首先数字N本身也是符合题意的，可以看作是长度为1的等差数列，则 res 可以初始化为1，然后i从2遍历到 sqrt(2N)，对于每个i值，只要 (N - i(i-1)/2) 能整除i，就表示存在长度为i的等差数列和为N，结果 res 自增1，这样就可以求出所有符合题意的等差数列的个数

class Solution
{
public:
    int consecutiveNumbersSum(int N)
    {
        int res = 1;
        int lim = (0.5 + sqrt(2 * (N+1)));
        for (int i = 2; i <= lim ; ++i)
        {
            int val = N - (i * (i - 1)) / 2;
            if (val > 0 && val % i == 0) ++res;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/positions-of-large-groups/

In a string s of lowercase letters, these letters form consecutive groups of the same character.

For example, a string like s = "abbxxxxzyy" has the groups "a", "bb", "xxxx", "z", and "yy".

A group is identified by an interval [start, end], where start and end denote the start and end indices (inclusive) of the group. In the above example, "xxxx" has the interval [3,6].

A group is considered large if it has 3 or more characters.

Return the intervals of every large group sorted in increasing order by start index.

 

Example 1:

Input: s = "abbxxxxzzy"
Output: [[3,6]]
Explanation: "xxxx" is the only large group with start index 3 and end index 6.
Example 2:

Input: s = "abc"
Output: []
Explanation: We have groups "a", "b", and "c", none of which are large groups.
Example 3:

Input: s = "abcdddeeeeaabbbcd"
Output: [[3,5],[6,9],[12,14]]
Explanation: The large groups are "ddd", "eeee", and "bbb".
 

Constraints:

1 <= s.length <= 1000
s contains lowercase English letters only.

class Solution
{
public:
    vector<vector<int>> largeGroupPositions(string S)
    {
        vector<vector<int>> res;
        int n = S.size(), i = 0;
        while (i < n)
        {
            int j = i + 1;
            for (; j < n && S[j] == S[i]; ++j);
            if (j - i >= 3) res.push_back({i, j - 1});
            i = j;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/masking-personal-information/

You are given a personal information string s, representing either an email address or a phone number. Return the masked personal information using the below rules.

Email address:

An email address is:

A name consisting of uppercase and lowercase English letters, followed by
The '@' symbol, followed by
The domain consisting of uppercase and lowercase English letters with a dot '.' somewhere in the middle (not the first or last character).
To mask an email:

The uppercase letters in the name and domain must be converted to lowercase letters.
The middle letters of the name (i.e., all but the first and last letters) must be replaced by 5 asterisks "*****".
Phone number:

A phone number is formatted as follows:

The phone number contains 10-13 digits.
The last 10 digits make up the local number.
The remaining 0-3 digits, in the beginning, make up the country code.
Separation characters from the set {'+', '-', '(', ')', ' '} separate the above digits in some way.
To mask a phone number:

Remove all separation characters.
The masked phone number should have the form:
"***-***-XXXX" if the country code has 0 digits.
"+*-***-***-XXXX" if the country code has 1 digit.
"+**-***-***-XXXX" if the country code has 2 digits.
"+***-***-***-XXXX" if the country code has 3 digits.
"XXXX" is the last 4 digits of the local number.
 

Example 1:

Input: s = "LeetCode@LeetCode.com"
Output: "l*****e@leetcode.com"
Explanation: s is an email address.
The name and domain are converted to lowercase, and the middle of the name is replaced by 5 asterisks.
Example 2:

Input: s = "AB@qq.com"
Output: "a*****b@qq.com"
Explanation: s is an email address.
The name and domain are converted to lowercase, and the middle of the name is replaced by 5 asterisks.
Note that even though "ab" is 2 characters, it still must have 5 asterisks in the middle.
Example 3:

Input: s = "1(234)567-890"
Output: "***-***-7890"
Explanation: s is a phone number.
There are 10 digits, so the local number is 10 digits and the country code is 0 digits.
Thus, the resulting masked number is "***-***-7890".
 

Constraints:

s is either a valid email or a phone number.
If s is an email:
8 <= s.length <= 40
s consists of uppercase and lowercase English letters and exactly one '@' symbol and '.' symbol.
If s is a phone number:
10 <= s.length <= 20
s consists of digits, spaces, and the symbols '(', ')', '-', and '+'.

class Solution
{
public:
    string maskPII(string S)
    {
        string res = "";
        auto pos = S.find('@');
        if (pos == string::npos)
        {
            string str = "";
            for (char c : S)
            {
                if (c >= '0' && c <= '9') str.push_back(c);
            }
            int n = str.length();
            if (n > 10) res += "+" + string(n - 10, '*') + "-";
            res += "***-***-" + str.substr(n - 4);
        }
        else
        {
            res = S.substr(0, 1) + "*****" + S.substr(pos - 1);
            for (auto &c : res) c = tolower(c);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/flipping-an-image/

Given an n x n binary matrix image, flip the image horizontally, then invert it, and return the resulting image.

To flip an image horizontally means that each row of the image is reversed.

For example, flipping [1,1,0] horizontally results in [0,1,1].
To invert an image means that each 0 is replaced by 1, and each 1 is replaced by 0.

For example, inverting [0,1,1] results in [1,0,0].
 

Example 1:

Input: image = [[1,1,0],[1,0,1],[0,0,0]]
Output: [[1,0,0],[0,1,0],[1,1,1]]
Explanation: First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].
Then, invert the image: [[1,0,0],[0,1,0],[1,1,1]]
Example 2:

Input: image = [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]
Output: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]
Explanation: First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]].
Then invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]
 

Constraints:

n == image.length
n == image[i].length
1 <= n <= 20
images[i][j] is either 0 or 1.

class Solution
{
public:
    vector<vector<int>> flipAndInvertImage(vector<vector<int>> &A)
    {
        for (auto &row : A) reverse(row.begin(), row.end());
        for (auto &row : A)
        {
            for (int &num : row) num ^= 1;
        }
        return A;
    }
};


// Source https://leetcode.com/problems/find-and-replace-in-string/

You are given a 0-indexed string s that you must perform k replacement operations on. 
The replacement operations are given as three 0-indexed parallel arrays, indices, sources, and targets, all of length k.

To complete the ith replacement operation:

Check if the substring sources[i] occurs at index indices[i] in the original string s.
If it does not occur, do nothing.
Otherwise if it does occur, replace that substring with targets[i].
For example, if s = "abcd", indices[i] = 0, sources[i] = "ab", and targets[i] = "eee", then the result of this replacement will be "eeecd".

All replacement operations must occur simultaneously, meaning the replacement operations should not affect the indexing of each other. 
The testcases will be generated such that the replacements will not overlap.

For example, a testcase with s = "abc", indices = [0, 1], and sources = ["ab","bc"] will not be generated because the "ab" and "bc" replacements overlap.
Return the resulting string after performing all replacement operations on s.

A substring is a contiguous sequence of characters in a string.

 

Example 1:


Input: s = "abcd", indices = [0, 2], sources = ["a", "cd"], targets = ["eee", "ffff"]
Output: "eeebffff"
Explanation:
"a" occurs at index 0 in s, so we replace it with "eee".
"cd" occurs at index 2 in s, so we replace it with "ffff".
Example 2:


Input: s = "abcd", indices = [0, 2], sources = ["ab","ec"], targets = ["eee","ffff"]
Output: "eeecd"
Explanation:
"ab" occurs at index 0 in s, so we replace it with "eee".
"ec" does not occur at index 2 in s, so we do nothing.
 

Constraints:

1 <= s.length <= 1000
k == indices.length == sources.length == targets.length
1 <= k <= 100
0 <= indexes[i] < s.length
1 <= sources[i].length, targets[i].length <= 50
s consists of only lowercase English letters.
sources[i] and targets[i] consist of only lowercase English letters.

class Solution
{
public:
    string findReplaceString(string S, vector<int> &indexes, vector<string> &sources, vector<string> &targets)
    {
        map<int, int, greater<int>> m;
        for (int i = 0; i < indexes.size(); ++i)
        {
            m[indexes[i]] = i;
        }
        for (auto a : m)
        {
            int i = a.first;
            string &s = sources[a.second];
            string &t = targets[a.second];
            if (S.substr(i, s.length()) == s)
            {
                S = S.substr(0, i) + t + S.substr(i + s.length());
            }
        }
        return S;
    }
};


// Source https://leetcode.com/problems/sum-of-distances-in-tree/

There is an undirected connected tree with n nodes labeled from 0 to n - 1 and n - 1 edges.

You are given the integer n and the array edges where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.

Return an array answer of length n where answer[i] is the sum of the distances between the ith node in the tree and all other nodes.

 

Example 1:


Input: n = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]
Output: [8,12,6,10,10,10]
Explanation: The tree is shown above.
We can see that dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) + dist(0,5)
equals 1 + 1 + 2 + 2 + 2 = 8.
Hence, answer[0] = 8, and so on.
Example 2:


Input: n = 1, edges = []
Output: [0]
Example 3:


Input: n = 2, edges = [[1,0]]
Output: [1,1]
 

Constraints:

1 <= n <= 3 * 104
edges.length == n - 1
edges[i].length == 2
0 <= ai, bi < n
ai != bi
The given input represents a valid tree.

假如只有一个结点的话，由于不存在其他结点，所以是0。

若有两个结点，比如下面所示：

  0
 / 
1
对于结点0来说，结点0只有1个子结点，距离之和为1。

若有三个结点的话，比如：

  0
 / \
1   2
对于结点0来说，结点0有2个子结点，距离之和为2。

    0
   / \
  1   2
 / \
3   4
所有结点到结点0的距离之和为6，左子树中的3和4到结点1的距离之和为2，而左子树总共有3个结点，加起来是5。右子树中的其他结点到结点2的距离之和为0，右子树总共有1个结点，5加上1，正好是6
两个数组 count 和 res，其中 count[i] 表示以结点i为根结点的子树中结点的个数，res[i] 表示子树中其他结点到根结点i的距离之和。根据上面的规律，可以总结出下面两个式子：

count[root] = sum(count[i]) + 1
res[root] = sum(res[i]) + sum(count[i])
root 表示某个子树的根结点，i表示与root直接相连的子结点，res[root] 表示的是以 root 为根结点的子树中其他结点到根节点root 的距离之和，子树之外的结点到结点root的距离之和还没有统计。

上面的res[root] 表示的是以 root 为根结点的子树中其他结点到根节点root 的距离之和，那么子树之外的结点到结点root 的距离也得加上，才是最终要求的 res[i]。
虽然现在还没有更新所有的 res[i]，但是有一个结点的 res 值是正确的，就是整个树的根结点。
现在假设要计算 root 结点的一个子结点i的 res 值，即要计算所有其他结点到结点i的距离，此时知道以结点i为根结点的子树的总结点个数为 count[i]，
而这 count[i] 个结点之前在算 res[root] 时都算了结点i到结点root一次，但是现在只要计算到结点i的距离，所以这 count[i] 个结点的距离都少了1，
而其他所有的结点，共 N - count[i] 个，离结点i的距离比离 root 结点的距离都增加了1，所以 res[i] 的更新方法如下：

res[i] = res[root] - count[i] + N - count[i]

class Solution
{
public:
    vector<int> sumOfDistancesInTree(int N, vector<vector<int>> &edges)
    {
        vector<int> res(N), count(N);
        vector<vector<int>> tree(N);
        for (auto &edge : edges)
        {
            tree[edge[0]].push_back(edge[1]);
            tree[edge[1]].push_back(edge[0]);
        }
        helper(tree, 0, -1, count, res);
        helper2(tree, 0, -1, count, res);
        return res;
    }
    void helper(vector<vector<int>> &tree, int cur, int pre, vector<int> &count, vector<int> &res)
    {
        for (int i : tree[cur])
        {
            if (i == pre) continue;
            helper(tree, i, cur, count, res);
            count[cur] += count[i];
            res[cur] += res[i] + count[i];
        }
        ++count[cur];
    }
    void helper2(vector<vector<int>> &tree, int cur, int pre, vector<int> &count, vector<int> &res)
    {
        for (int i : tree[cur])
        {
            if (i == pre) continue;
            res[i] = res[cur] - count[i] + count.size() - count[i];
            helper2(tree, i, cur, count, res);
        }
    }
};


// Source https://leetcode.com/problems/image-overlap/

You are given two images, img1 and img2, represented as binary, square matrices of size n x n. A binary matrix has only 0s and 1s as values.

We translate one image however we choose by sliding all the 1 bits left, right, up, and/or down any number of units. 
We then place it on top of the other image. We can then calculate the overlap by counting the number of positions that have a 1 in both images.

Note also that a translation does not include any kind of rotation. Any 1 bits that are translated outside of the matrix borders are erased.

Return the largest possible overlap.

 

Example 1:


Input: img1 = [[1,1,0],[0,1,0],[0,1,0]], img2 = [[0,0,0],[0,1,1],[0,0,1]]
Output: 3
Explanation: We translate img1 to right by 1 unit and down by 1 unit.

The number of positions that have a 1 in both images is 3 (shown in red).

Example 2:

Input: img1 = [[1]], img2 = [[1]]
Output: 1
Example 3:

Input: img1 = [[0]], img2 = [[0]]
Output: 0
 

Constraints:

n == img1.length == img1[i].length
n == img2.length == img2[i].length
1 <= n <= 30
img1[i][j] is either 0 or 1.
img2[i][j] is either 0 or 1.

只有值为1的地方才有可能重叠，所以我们只关心A和B中值为1的地方，将其坐标位置分别存入两个数组 listA 和 listB 中。
对于A和B中的任意两个1的位置，肯定有一种方法能将A平移到B，平移的方法就是横向平移其横坐标之差，竖向平移其纵坐标之差。
我们用一个 HashMap 来建立坐标差值和其出现次数之间的映射，为了降维，将横纵坐标之差转为字符串，然后中加上个横杠分隔开，
这样只要组成了相同的字符串，那么一定就是在同一个平移上，计数器自增1。最后在 HashMap 中找到最大的值即可

class Solution
{
public:
    int largestOverlap(vector<vector<int>> &A, vector<vector<int>> &B)
    {
        int res = 0, n = A.size();
        vector<pair<int, int>> listA, listB;
        unordered_map<int, int> diffCnt;
        for (int i = 0; i < n; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                if (A[i][j] == 1) listA.push_back({i, j});
                if (B[i][j] == 1) listB.push_back({i, j});
            }
        }
        for (auto a : listA)
        {
            for (auto b : listB)
            {
                ++diffCnt[ (a.first - b.first) * 100 + (a.second - b.second) ];
            }
        }
        for (auto diff : diffCnt)
        {
            res = max(res, diff.second);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/rectangle-overlap/

An axis-aligned rectangle is represented as a list [x1, y1, x2, y2], where (x1, y1) is the coordinate of its bottom-left corner, and (x2, y2) is the coordinate of its top-right corner. 
Its top and bottom edges are parallel to the X-axis, and its left and right edges are parallel to the Y-axis.

Two rectangles overlap if the area of their intersection is positive. To be clear, two rectangles that only touch at the corner or edges do not overlap.

Given two axis-aligned rectangles rec1 and rec2, return true if they overlap, otherwise return false.

 

Example 1:

Input: rec1 = [0,0,2,2], rec2 = [1,1,3,3]
Output: true
Example 2:

Input: rec1 = [0,0,1,1], rec2 = [1,0,2,1]
Output: false
Example 3:

Input: rec1 = [0,0,1,1], rec2 = [2,2,3,3]
Output: false
 

Constraints:

rect1.length == 4
rect2.length == 4
-109 <= rec1[i], rec2[i] <= 109
rec1 and rec2 represent a valid rectangle with a non-zero area.

对于两条线段，它们相交的话可以是如下情况：

           x3             x4
           |--------------|
 |--------------|
 x1             x2
我们可以直观的看出一些关系： 

x1 < x3 < x2 && x3 < x2 < x4

可以稍微化简一下：

x1 < x4 && x3 < x2

就算是调换个位置：

           x1             x2
           |--------------|
 |--------------|
 x3             x4
还是能得到同样的关系：

x3 < x2 && x1 < x4

两个矩形重叠有四种情况：

1）两个矩形在矩形1的右上角重叠：

           ____________________x4,y4
          |                   |
   _______|______x2,y2        |
  |       |______|____________|
  |      x3,y3   |
  |______________|
 x1,y1

满足的条件为：x1 < x4 && x3 < x2 && y1 < y4 && y3 < y2

2）两个矩形在矩形1的左上角重叠：

   ___________________  x4,y4
  |                   |
  |            _______|____________x2,y2
  |___________|_______|           |
x3,y3         |                   | 
              |___________________|
            x1,y1
满足的条件为：x3 < x2 && x1 < x4 && y1 < y4 && y3 < y2

3）两个矩形在矩形1的左下角重叠：

           ____________________x2,y2
          |                   |
   _______|______x4,y4        |
  |       |______|____________|
  |      x1,y1   |
  |______________|
 x3,y3

满足的条件为：x3 < x2 && x1 < x4 && y3 < y2 && y1 < y4

4）两个矩形在矩形1的右下角重叠：

   ___________________  x2,y2
  |                   |
  |            _______|____________x4,y4
  |___________|_______|           |
x1,y1         |                   | 
              |___________________|
            x3,y3

满足的条件为：x1 < x4 && x3 < x2 && y3 < y2 && y1 < y4

仔细观察可以发现，上面四种情况的满足条件其实都是相同的，只不过顺序调换了位置，所以我们只要一行就可以解决问题了

[x1, y1, x2, y2]
[x3, y3, x4, y4]

class Solution
{
public:
    bool isRectangleOverlap(vector<int> &rec1, vector<int> &rec2)
    {
        return rec1[0] < rec2[2] && rec2[0] < rec1[2] && rec1[1] < rec2[3] && rec2[1] < rec1[3];
    }
};


// Source https://leetcode.com/problems/new-21-game/

Alice plays the following game, loosely based on the card game "21".

Alice starts with 0 points and draws numbers while she has less than k points. During each draw, she gains an integer number of points randomly from the range [1, maxPts], 
where maxPts is an integer. Each draw is independent and the outcomes have equal probabilities.

Alice stops drawing numbers when she gets k or more points.

Return the probability that Alice has n or fewer points.

Answers within 10-5 of the actual answer are considered accepted.

 

Example 1:

Input: n = 10, k = 1, maxPts = 10
Output: 1.00000
Explanation: Alice gets a single card, then stops.
Example 2:

Input: n = 6, k = 1, maxPts = 10
Output: 0.60000
Explanation: Alice gets a single card, then stops.
In 6 out of 10 possibilities, she is at or below 6 points.
Example 3:

Input: n = 21, k = 17, maxPts = 10
Output: 0.73278
 

Constraints:

0 <= k <= n <= 104
1 <= maxPts <= 104

每次拿到 [1, W] 范围内的任意一张牌的概率都是 1/W
假设W = 10, 我们拿到15点的概率是多少呢？
这时候肯定不止拿一张牌了，那么我们分析最后一张牌，可以取1到 10，那么能拿到 15 点就有十种情况，
之前共拿5点且最后一张拿10，之前共拿6点且最后一张拿9，之前拿共7点且最后一张拿8，...，之前共拿 14 点且最后一张拿1。
那么拿 15 点的概率就是把这十种的概率都加起来。由于是‘且’的关系，所以是概率相乘，可以将 1/W 提取出来

拿到x点的概率就可以归纳出下面的等式：

P(x) = 1/W * (P(x-1) + P(x-2) + P(x-W))

Alice starts with 0 points and draws numbers while she has less than k points. 
Alice stops drawing numbers when she gets k or more points.

最终的点数一定 >=K && <=K - 1 + W，求最终的点数<=N的概率

当 K=0 时，由于题目中说当前点数大于等于K，不能摸牌，那么一开始就不能摸牌了，而 0 <= K <= N，所以永远不会超过N，概率返回1。
还有就是当 N >= K+W 的时候，K-1+W < N，所以返回概率为1。

我们新建一个大小为 K+W 的一维数组 sums，其中 sum[i] 表示获得范围 [0, i] 内的点数的概率综合，初始化 sum[0] = P[0] = 1.0。
sum[i] = sum[i-1] + P[i]
假设N=21, K=17, W=10。先来说一下当点数不超过 10 的更新方法，这个其实比较简单，比如拿到七点的概率 P[7]，
根据我们上面对于 P(x) 的求法，我们知道可以拆分为下列多种情况：
先拿到六点的概率 (P[6]) 乘以再拿一个1点的概率 (1/W)，先拿到五点的概率 (P[5]) 乘以再拿一个2点的概率 (1/W)，...，先拿到一点的概率 (P[1]) 乘以再拿一个六点的概率 (1/W)，直接拿个七点的概率 (1/W)，

P[7] = 1/W * (P[6] + p[5] + ... + P[1] + P[0]) = 1/W * sum[6]

那么当 i > W 的时候，情况是不一样的，比如要求得到 15 点的概率 P[15]，那么还是根据上面求 P(x) 的方法，拆分为下面多种情况：
先拿到 14 点的概率 (P[14]) 乘以再拿一个1点的概率 (1/W)，先拿到 13 点的概率 (P[13]) 乘以再拿一个2点的概率 (1/W)，...，先拿到五点的概率 (P[5]) 乘以再拿一个 10 点的概率 (1/W)，那么统统加起来就是：

P[15] = 1/W * (P[14] + P[13] + ... + P[5]) = 1/W * (sum[14] - sum[4])

更新K以内的P值，和更新大于K的P值是稍有不同的，比如 P[20] 的更新方法就有所不同了，由于超过了 17 点就不能再摸牌了，所以 20 点只能由下列情况组成：
先拿到 16 点的概率 (P[16]) 再拿到一个4点的概率 (1/W)，先拿到 15 点的概率 (P[15]) 再拿到一个5点的概率 (1/W)，...，先拿到 10 点的概率 (P[10]) 再拿到一个 10 点的概率 (1/W)，

P[20] = 1/W * (P[16] + P[15] + P[14] + ... + P[10]) = 1/W * (sum[16] - sum[9])

如果K > W
P[i] = 1/W * sum[i-1]     (when i <= K && i <= W)
P[i] = 1/W * (sum[i-1] - sum[i-W-1])    (when i <= K && i > W)
P[i] = 1/W * (sum[K-1] - sum[i-W-1])    (when i > K && i > W)

如果K < W
P[i] = 1/W * sum[i-1]     (when i <= K && i <= W)
P[i] = 1/W * sum[K-1]     (when i > K && i <= W)
P[i] = 1/W * (sum[K-1] - sum[i-W-1])    (when i > K && i > W)

sum[i] = sum[i-1] + P[i]

K和W的大小关系其实是不知道的，不过我们可以把二者揉在一起，我们每次使用 i-1 和 K-1 中的较小值来算 P[i] 即可，这样就完美把K融到了W的分类情况中，
当 sum 数组计算完成之后，我们就直接按照上面的条件概率公式来算 P(<=N | >=K) = P(<=N && >=K) / P(>=K) = sumP(K, N) / sumP(K, K+W-1) 就行了

class Solution
{
public:
    double sum[20001];

    double new21Game(int N, int K, int W)
    {
        if (K == 0 || N >= K + W) return 1.0;
        sum[0] = 1.0;
        for (int i = 1; i < K + W; ++i)
        {
            int t = min(i - 1, K - 1);
            if (i <= W) sum[i] = sum[i - 1] + sum[t] / W;
            else sum[i] = sum[i - 1] + (sum[t] - sum[i - W - 1]) / W;
        }
        return (sum[N] - sum[K - 1]) / (sum[K + W - 1] - sum[K - 1]);
    }
};


// Source https://leetcode.com/problems/push-dominoes/

There are n dominoes in a line, and we place each domino vertically upright. In the beginning, we simultaneously push some of the dominoes either to the left or to the right.

After each second, each domino that is falling to the left pushes the adjacent domino on the left. Similarly, the dominoes falling to the right push their adjacent dominoes standing on the right.

When a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces.

For the purposes of this question, we will consider that a falling domino expends no additional force to a falling or already fallen domino.

You are given a string dominoes representing the initial state where:

dominoes[i] = 'L', if the ith domino has been pushed to the left,
dominoes[i] = 'R', if the ith domino has been pushed to the right, and
dominoes[i] = '.', if the ith domino has not been pushed.
Return a string representing the final state.

 

Example 1:

Input: dominoes = "RR.L"
Output: "RR.L"
Explanation: The first domino expends no additional force on the second domino.
Example 2:


Input: dominoes = ".L.R...LR..L.."
Output: "LL.RR.LLRRLL.."
 

Constraints:

n == dominoes.length
1 <= n <= 105
dominoes[i] is either 'L', 'R', or '.'.

某个位置的骨牌会不会倒，并且朝哪个方向倒，是由左右两边受到的力的大小决定的，那么可以分为下列四种情况：

1）R....R  ->  RRRRRR

这是当两个向右推的操作连在一起时，那么中间的骨牌毫无悬念的都要向右边倒去。

2）L....L  ->  LLLLLL

当两个向左推的操作连在一起时，那么中间的骨牌毫无悬念的都要向左边倒去。

3）L....R  ->  L....R

当左边界的骨牌向左推，右边界的骨牌向右推，那么中间的骨牌不会收到力，所以依然保持坚挺。

4）R....L  -> RRRLLL   or   R.....L  ->  RRR.LLL

当左边界的骨牌向右推，右边界的骨牌向左推时，就要看中间的骨牌个数了，若是偶数，那么对半分，若是奇数，那么最中间的骨牌保持站立，其余的对半分。 

class Solution
{
public:
    string pushDominoes(string dominoes)
    {
        string res = "";
        dominoes = "L" + dominoes + "R";
        int n = dominoes.length();
        for (int i = 0, j = 1; j < n; ++j)
        {
            if (dominoes[j] == '.') continue;
            int mid = j - i - 1;
            if (i > 0) res += dominoes[i];
            if (dominoes[i] == dominoes[j]) res += string(mid, dominoes[i]);
            else if (dominoes[i] == 'L' && dominoes[j] == 'R') res += string(mid, '.');
            else res += string(mid / 2, 'R') + string(mid % 2, '.') + string(mid / 2, 'L');
            i = j;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/similar-string-groups/

Two strings X and Y are similar if we can swap two letters (in different positions) of X, so that it equals Y. Also two strings X and Y are similar if they are equal.

For example, "tars" and "rats" are similar (swapping at positions 0 and 2), and "rats" and "arts" are similar, but "star" is not similar to "tars", "rats", or "arts".

Together, these form two connected groups by similarity: {"tars", "rats", "arts"} and {"star"}.  Notice that "tars" and "arts" are in the same group even though they are not similar.  
Formally, each group is such that a word is in the group if and only if it is similar to at least one other word in the group.

We are given a list strs of strings where every string in strs is an anagram of every other string in strs. How many groups are there?

 

Example 1:

Input: strs = ["tars","rats","arts","star"]
Output: 2
Example 2:

Input: strs = ["omv","ovm"]
Output: 1
 

Constraints:

1 <= strs.length <= 300
1 <= strs[i].length <= 300
strs[i] consists of lowercase letters only.
All words in strs have the same length and are anagrams of each other.

class Solution
{
public:
    vector<int> parent;
    vector<int> vsize;

    int find(int x)
    {
        if(parent[x] != x) parent[x] = find(parent[x]);
        return parent[x];
    }

    void join(int a, int b)
    {
        a = find(a);
        b = find(b);
        if(a == b) return;
        if(vsize[a] < vsize[b])
        {
            parent[a] = b;
            vsize[b] += vsize[a];
        }
        else if(vsize[b] < vsize[a])
        {
            parent[b] = a;
            vsize[a] += vsize[b];
        }
        else
        {
            parent[b] = a;
            vsize[a] += vsize[b];
        }
    }

    bool isSimilar(string &str1, string &str2)
    {
        for (int i = 0, cnt = 0; i < str1.size(); ++i)
        {
            if (str1[i] == str2[i]) continue;
            if (++cnt > 2) return false;
        }
        return true;
    }

    int numSimilarGroups(vector<string> &A)
    {
        int res = 0, n = A.size();
        parent = vector<int>(n);
        vsize = vector<int>(n, 1);
        for (int i = 0; i < n; ++i) parent[i] = i;
        for (int i = 1; i < n; ++i)
        {
            for (int j = 0; j < i; ++j)
            {
                if (!isSimilar(A[i], A[j])) continue;
                join(i, j);
            }
        }
        for (int i = 0; i < n; ++i)
        {
            if (parent[i] == i) ++res;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/magic-squares-in-grid/

A 3 x 3 magic square is a 3 x 3 grid filled with distinct numbers from 1 to 9 such that each row, column, and both diagonals all have the same sum.

Given a row x col grid of integers, how many 3 x 3 "magic square" subgrids are there?  (Each subgrid is contiguous).

 

Example 1:


Input: grid = [[4,3,8,4],[9,5,1,9],[2,7,6,2]]
Output: 1
Explanation: 
The following subgrid is a 3 x 3 magic square:

while this one is not:

In total, there is only one magic square inside the given grid.
Example 2:

Input: grid = [[8]]
Output: 0
 

Constraints:

row == grid.length
col == grid[i].length
1 <= row, col <= 10
0 <= grid[i][j] <= 15

A 3 x 3 magic square is a 3 x 3 grid filled with distinct numbers from 1 to 9 such that each row, column, and both diagonals all have the same sum.
每行 每列 对角线 反对角线 和都是15，且中间的数必须是5

class Solution
{
public:
    int numMagicSquaresInside(vector<vector<int>> &grid)
    {
        int m = grid.size(), n = grid[0].size(), res = 0;
        for (int i = 0; i < m - 2; ++i)
        {
            for (int j = 0; j < n - 2; ++j)
            {
                if (grid[i + 1][j + 1] == 5 && isValid(grid, i, j)) ++res;
            }
        }
        return res;
    }
    bool isValid(vector<vector<int>> &grid, int i, int j)
    {
        vector<int> cnt(10);
        for (int x = i; x <= i + 2; ++x)
        {
            for (int y = j; y <= j + 2; ++y)
            {
                int k = grid[x][y];
                if (k < 1 || k > 9 || cnt[k] == 1) return false;
                cnt[k] = 1;
            }
        }
        if (15 != grid[i][j] + grid[i][j + 1] + grid[i][j + 2]) return false;
        if (15 != grid[i + 1][j] + grid[i + 1][j + 1] + grid[i + 1][j + 2]) return false;
        if (15 != grid[i + 2][j] + grid[i + 2][j + 1] + grid[i + 2][j + 2]) return false;
        if (15 != grid[i][j] + grid[i + 1][j] + grid[i + 2][j]) return false;
        if (15 != grid[i][j + 1] + grid[i + 1][j + 1] + grid[i + 2][j + 1]) return false;
        if (15 != grid[i][j + 2] + grid[i + 1][j + 2] + grid[i + 2][j + 2]) return false;
        if (15 != grid[i][j] + grid[i + 1][j + 1] + grid[i + 2][j + 2]) return false;
        if (15 != grid[i + 2][j] + grid[i + 1][j + 1] + grid[i][j + 2]) return false;
        return true;
    }
};


// Source https://leetcode.com/problems/keys-and-rooms/

There are n rooms labeled from 0 to n - 1 and all the rooms are locked except for room 0. Your goal is to visit all the rooms. However, you cannot enter a locked room without having its key.

When you visit a room, you may find a set of distinct keys in it. Each key has a number on it, denoting which room it unlocks, and you can take all of them with you to unlock the other rooms.

Given an array rooms where rooms[i] is the set of keys that you can obtain if you visited room i, return true if you can visit all the rooms, or false otherwise.

 

Example 1:

Input: rooms = [[1],[2],[3],[]]
Output: true
Explanation: 
We visit room 0 and pick up key 1.
We then visit room 1 and pick up key 2.
We then visit room 2 and pick up key 3.
We then visit room 3.
Since we were able to visit every room, we return true.
Example 2:

Input: rooms = [[1,3],[3,0,1],[2],[0]]
Output: false
Explanation: We can not enter room number 2 since the only key that unlocks it is in that room.
 

Constraints:

n == rooms.length
2 <= n <= 1000
0 <= rooms[i].length <= 1000
1 <= sum(rooms[i].length) <= 3000
0 <= rooms[i][j] < n
All the values of rooms[i] are unique.

class Solution
{
public:
    bool canVisitAllRooms(vector<vector<int>> &rooms)
    {
        unordered_set<int> visited;
        queue<int> q;
        q.push(0);
        visited.insert(0);
        while (!q.empty())
        {
            int t = q.front();
            q.pop();
            for (int key : rooms[t])
            {
                if (visited.count(key)) continue;
                q.push(key);
                visited.insert(key);
                if (visited.size() == rooms.size()) return true;
            }
        }
        return visited.size() == rooms.size();
    }
};


// Source https://leetcode.com/problems/split-array-into-fibonacci-sequence/

You are given a string of digits num, such as "123456579". We can split it into a Fibonacci-like sequence [123, 456, 579].

Formally, a Fibonacci-like sequence is a list f of non-negative integers such that:

0 <= f[i] < 2^31, (that is, each integer fits in a 32-bit signed integer type),
f.length >= 3, and
f[i] + f[i + 1] == f[i + 2] for all 0 <= i < f.length - 2.
Note that when splitting the string into pieces, each piece must not have extra leading zeroes, except if the piece is the number 0 itself.

Return any Fibonacci-like sequence split from num, or return [] if it cannot be done.

 

Example 1:

Input: num = "1101111"
Output: [11,0,11,11]
Explanation: The output [110, 1, 111] would also be accepted.
Example 2:

Input: num = "112358130"
Output: []
Explanation: The task is impossible.
Example 3:

Input: num = "0123"
Output: []
Explanation: Leading zeroes are not allowed, so "01", "2", "3" is not valid.
 

Constraints:

1 <= num.length <= 200
num contains only digits.

class Solution
{
public:
    int n;
    vector<int> res;

    vector<int> splitIntoFibonacci(string S)
    {
        n = S.length();
        vector<int> out;
        helper(S, 0, out);
        return res;
    }
    void helper(string &S, int start, vector<int> &out)
    {
        if (!res.empty()) return;
        if (start >= n)
        {
            if (out.size() >= 3) res = out;
            return;
        }
        for (int i = start; i < n; ++i)
        {
            string cur = S.substr(start, i - start + 1);
            if ((cur.size() > 1 && cur[0] == '0') || cur.size() > 10) break;
            long num = stol(cur);
            if (num > INT_MAX) break;
            int len = out.size();
            if (len >= 2 && num != ((long)out[len - 1] + out[len - 2])) continue;
            out.push_back(num);
            helper(S, i + 1, out);
            out.pop_back();
        }
    }
};


// Source https://leetcode.com/problems/guess-the-word/

This is an interactive problem.

You are given an array of unique strings wordlist where wordlist[i] is 6 letters long, and one word in this list is chosen as secret.

You may call Master.guess(word) to guess a word. The guessed word should have type string and must be from the original list with 6 lowercase letters.

This function returns an integer type, representing the number of exact matches (value and position) of your guess to the secret word. 
Also, if your guess is not in the given wordlist, it will return -1 instead.

For each test case, you have exactly 10 guesses to guess the word. At the end of any number of calls, 
if you have made 10 or fewer calls to Master.guess and at least one of these guesses was secret, then you pass the test case.

 

Example 1:

Input: secret = "acckzz", wordlist = ["acckzz","ccbazz","eiowzz","abcczz"], numguesses = 10
Output: You guessed the secret word correctly.
Explanation:
master.guess("aaaaaa") returns -1, because "aaaaaa" is not in wordlist.
master.guess("acckzz") returns 6, because "acckzz" is secret and has all 6 matches.
master.guess("ccbazz") returns 3, because "ccbazz" has 3 matches.
master.guess("eiowzz") returns 2, because "eiowzz" has 2 matches.
master.guess("abcczz") returns 4, because "abcczz" has 4 matches.
We made 5 calls to master.guess and one of them was the secret, so we pass the test case.
Example 2:

Input: secret = "hamada", wordlist = ["hamada","khaled"], numguesses = 10
Output: You guessed the secret word correctly.
 

Constraints:

1 <= wordlist.length <= 100
wordlist[i].length == 6
wordlist[i] consist of lowercase English letters.
All the strings of wordlist are unique.
secret exists in wordlist.
numguesses == 10

class Solution
{
public:
    int checkString(string &word1, string &word2)
    {
        int counter = 0;
        for (int i = 0; i < 6; i++)
        {
            if (word1[i] == word2[i])
            {
                counter++;
            }
        }
        return counter;
    }

    void findSecretWord(vector<string> &wordlist, Master &master)
    {
        for (int i = 0; i < 10; i++)
        {
            string &guessWord = wordlist[rand() % wordlist.size()];
            int guessMatch = master.guess(guessWord);
            vector <string> newList;
            for (string &word : wordlist)
            {
                if (guessMatch == checkString(word, guessWord))
                {
                    newList.push_back(word);
                }
            }
            wordlist = newList;
        }
    }
};


// Source https://leetcode.com/problems/backspace-string-compare/

Given two strings s and t, return true if they are equal when both are typed into empty text editors. '#' means a backspace character.

Note that after backspacing an empty text, the text will continue empty.

 

Example 1:

Input: s = "ab#c", t = "ad#c"
Output: true
Explanation: Both s and t become "ac".
Example 2:

Input: s = "ab##", t = "c#d#"
Output: true
Explanation: Both s and t become "".
Example 3:

Input: s = "a#c", t = "b"
Output: false
Explanation: s becomes "c" while t becomes "b".
 

Constraints:

1 <= s.length, t.length <= 200
s and t only contain lowercase letters and '#' characters.

class Solution
{
public:
    bool backspaceCompare(string s, string t)
    {
        int n = s.length();
        stack<char> st;
        for(int i = 0; i < n; i++)
        {
            if(!st.empty() && s[i] == '#')
            {
                st.pop();
            }
            else if(s[i] != '#')
            {
                st.push(s[i]);
            }
        }
        int m = t.length();
        stack<char> tt;
        for(int i = 0; i < m; i++)
        {
            if(!tt.empty() && t[i] == '#')
            {
                tt.pop();
            }
            else if(t[i] != '#')
            {
                tt.push(t[i]);
            }
        }
        string str1, str2;
        while(!st.empty())
        {
            str1.push_back(st.top());
            st.pop();
        }
        while(!tt.empty())
        {
            str2.push_back(tt.top());
            tt.pop();
        }
        return str1 == str2;
    }
};


// Source https://leetcode.com/problems/longest-mountain-in-array/

You may recall that an array arr is a mountain array if and only if:

arr.length >= 3
There exists some index i (0-indexed) with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
Given an integer array arr, return the length of the longest subarray, which is a mountain. Return 0 if there is no mountain subarray.

 

Example 1:

Input: arr = [2,1,4,7,3,2,5]
Output: 5
Explanation: The largest mountain is [1,4,7,3,2] which has length 5.
Example 2:

Input: arr = [2,2,2]
Output: 0
Explanation: There is no mountain.
 

Constraints:

1 <= arr.length <= 104
0 <= arr[i] <= 104

class Solution
{
public:
    int longestMountain(vector<int> &A)
    {
        int res = 0, n = A.size();
        vector<int> left(n), right(n);
        for (int i = n - 2; i >= 0; --i)
        {
            if (A[i] > A[i + 1]) right[i] = right[i + 1] + 1;
        }
        for (int i = 1; i < n; ++i)
        {
            if (A[i] > A[i - 1]) left[i] = left[i - 1] + 1;
            if (left[i] > 0 && right[i] > 0) res = max(res, left[i] + right[i] + 1);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/hand-of-straights/

Alice has some number of cards and she wants to rearrange the cards into groups so that each group is of size groupSize, and consists of groupSize consecutive cards.

Given an integer array hand where hand[i] is the value written on the ith card and an integer groupSize, return true if she can rearrange the cards, or false otherwise.

 

Example 1:

Input: hand = [1,2,3,6,2,3,4,7,8], groupSize = 3
Output: true
Explanation: Alice's hand can be rearranged as [1,2,3],[2,3,4],[6,7,8]
Example 2:

Input: hand = [1,2,3,4,5], groupSize = 4
Output: false
Explanation: Alice's hand can not be rearranged into groups of 4.

 

Constraints:

1 <= hand.length <= 104
0 <= hand[i] <= 109
1 <= groupSize <= hand.length

class Solution
{
public:
    bool isNStraightHand(vector<int> &hand, int groupSize)
    {
        int n = hand.size();
        if (n % groupSize) return false;
        map<int, int> m;
        for (int val : hand) ++m[val];
        for (auto a : m)
        {
            if (a.second == 0) continue;
            for (int i = a.first; i < a.first + groupSize; ++i)
            {
                if (m[i] < a.second) return false;
                m[i] = m[i] - a.second;
            }
        }
        return true;
    }
};


// Source https://leetcode.com/problems/shortest-path-visiting-all-nodes/

You have an undirected, connected graph of n nodes labeled from 0 to n - 1. You are given an array graph where graph[i] is a list of all the nodes connected with node i by an edge.

Return the length of the shortest path that visits every node. You may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges.

 

Example 1:


Input: graph = [[1,2,3],[0],[0],[0]]
Output: 4
Explanation: One possible path is [1,0,2,0,3]
Example 2:


Input: graph = [[1],[0,2,4],[1,3,4],[2],[1,2]]
Output: 4
Explanation: One possible path is [0,1,4,2,3]
 

Constraints:

n == graph.length
1 <= n <= 12
0 <= graph[i].length < n
graph[i] does not contain i.
If graph[a] contains b, then graph[b] contains a.
The input graph is always connected.

class Solution
{
public:
    int shortestPathLength(vector<vector<int>> &g)
    {
        int n = g.size();
        vector<vector<bool>> visited(n, vector<bool>((1 << n), false));
        queue<array<int, 3>> q;
        for(int i = 0; i < n; i++)
        {
            q.push({i, (1 << i), 0});
            visited[i][(1 << i)] = true;
        }
        int target = (1 << n) - 1;
        while(!q.empty())
        {
            auto curr = q.front();
            q.pop();
            int u = curr[0], mask = curr[1], cost = curr[2];
            if(mask == target) return cost;
            for(auto v : g[u])
            {
                int new_mask = mask | (1 << v);
                int new_u = v;
                int new_cost = cost + 1;
                if(visited[new_u][new_mask]) continue;
                q.push({new_u, new_mask, new_cost});
                visited[new_u][new_mask] = true;
            }
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/shifting-letters/

You are given a string s of lowercase English letters and an integer array shifts of the same length.

Call the shift() of a letter, the next letter in the alphabet, (wrapping around so that 'z' becomes 'a').

For example, shift('a') = 'b', shift('t') = 'u', and shift('z') = 'a'.
Now for each shifts[i] = x, we want to shift the first i + 1 letters of s, x times.

Return the final string after all such shifts to s are applied.

 

Example 1:

Input: s = "abc", shifts = [3,5,9]
Output: "rpl"
Explanation: We start with "abc".
After shifting the first 1 letters of s by 3, we have "dbc".
After shifting the first 2 letters of s by 5, we have "igc".
After shifting the first 3 letters of s by 9, we have "rpl", the answer.
Example 2:

Input: s = "aaa", shifts = [1,2,3]
Output: "gfd"
 

Constraints:

1 <= s.length <= 105
s consists of lowercase English letters.
shifts.length == s.length
0 <= shifts[i] <= 109

class Solution
{
public:
    string shiftingLetters(string S, vector<int> &shifts)
    {
        int n = shifts.size();
        for (int i = n - 2; i >= 0; --i)
        {
            shifts[i] = (shifts[i] + shifts[i + 1]) % 26;
        }
        for (int i = 0; i < n; ++i)
        {
            S[i] = (S[i] - 'a' + shifts[i]) % 26 + 'a';
        }
        return S;
    }
};


// Source https://leetcode.com/problems/maximize-distance-to-closest-person/

You are given an array representing a row of seats where seats[i] = 1 represents a person sitting in the ith seat, and seats[i] = 0 represents that the ith seat is empty (0-indexed).

There is at least one empty seat, and at least one person sitting.

Alex wants to sit in the seat such that the distance between him and the closest person to him is maximized. 

Return that maximum distance to the closest person.

 

Example 1:

1 0 0 0 0 1
Input: seats = [1,0,0,0,1,0,1]
Output: 2
Explanation: 
If Alex sits in the second open seat (i.e. seats[2]), then the closest person has distance 2.
If Alex sits in any other open seat, the closest person has distance 1.
Thus, the maximum distance to the closest person is 2.
Example 2:

Input: seats = [1,0,0,0]
Output: 3
Explanation: 
If Alex sits in the last seat (i.e. seats[3]), the closest person is 3 seats away.
This is the maximum distance possible, so the answer is 3.
Example 3:

Input: seats = [0,1]
Output: 1
 

Constraints:

2 <= seats.length <= 2 * 104
seats[i] is 0 or 1.
At least one seat is empty.
At least one seat is occupied.

class Solution
{
public:
    int maxDistToClosest(vector<int> &seats)
    {
        int n = seats.size(), res = 0;
        int i = 0;
        for (; i < n && seats[i] == 0; ++i);
        if (i > 0) res = i;
        while (i < n)
        {
            for (; i < n && seats[i] == 1; ++i);
            if (i == n) break;
            int start = i;
            for (; i < n && seats[i] == 0; ++i);
            if (i == n) { res = max(res, n - start); break; }
            else res = max(res, (i - start + 1) / 2);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/rectangle-area-ii/

You are given a 2D array of axis-aligned rectangles. Each rectangle[i] = [xi1, yi1, xi2, yi2] denotes the ith rectangle 
where (xi1, yi1) are the coordinates of the bottom-left corner, and (xi2, yi2) are the coordinates of the top-right corner.

Calculate the total area covered by all rectangles in the plane. Any area covered by two or more rectangles should only be counted once.

Return the total area. Since the answer may be too large, return it modulo 109 + 7.

 

Example 1:


Input: rectangles = [[0,0,2,2],[1,0,2,3],[1,0,3,1]]
Output: 6
Explanation: A total area of 6 is covered by all three rectangales, as illustrated in the picture.
From (1,1) to (2,2), the green and red rectangles overlap.
From (1,0) to (2,3), all three rectangles overlap.
Example 2:

Input: rectangles = [[0,0,1000000000,1000000000]]
Output: 49
Explanation: The answer is 1018 modulo (109 + 7), which is 49.
 

Constraints:

1 <= rectangles.length <= 200
rectanges[i].length == 4
0 <= xi1, yi1, xi2, yi2 <= 109

class Solution
{
public:
    int rectangleArea(vector<vector<int>> &rectangles)
    {
        map<int, vector<pair<int, int>>> groupMap;
        for (auto &a : rectangles)
        {
            groupMap[a[0]].push_back({a[1], 1});
            groupMap[a[0]].push_back({a[3], -1});
            groupMap[a[2]].push_back({a[1], -1});
            groupMap[a[2]].push_back({a[3], 1});
        }
        map<int, int> cntMap;
        long res = 0, pre_x = 0, height = 0, M = 1e9 + 7;
        for (auto &group : groupMap)
        {
            res = (res + (group.first - pre_x) * height) % M;
            for (auto a : group.second)
            {
                cntMap[a.first] += a.second;
            }
            height = 0;
            long start = 0, cnt = 0;
            for (auto a : cntMap)
            {
                if (a.second == 0) continue;
                if (cnt == 0) start = a.first;
                cnt += a.second;
                if (cnt == 0) height += a.first - start;
            }
            pre_x = group.first;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/loud-and-rich/

There is a group of n people labeled from 0 to n - 1 where each person has a different amount of money and a different level of quietness.

You are given an array richer where richer[i] = [ai, bi] indicates that ai has more money than bi and an integer array quiet where quiet[i] is the quietness of the ith person. 
All the given data in richer are logically correct (i.e., the data will not lead you to a situation where x is richer than y and y is richer than x at the same time).

Return an integer array answer where answer[x] = y if y is the least quiet person (that is, the person y with the smallest value of quiet[y]) among all people 
who definitely have equal to or more money than the person x.

 

Example 1:

Input: richer = [[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]], quiet = [3,2,5,4,6,1,7,0]
Output: [5,5,2,5,4,5,6,7]
Explanation: 
answer[0] = 5.
Person 5 has more money than 3, which has more money than 1, which has more money than 0.
The only person who is quieter (has lower quiet[x]) is person 7, but it is not clear if they have more money than person 0.
answer[7] = 7.
Among all people that definitely have equal to or more money than person 7 (which could be persons 3, 4, 5, 6, or 7), the person who is the quietest (has lower quiet[x]) is person 7.
The other answers can be filled out with similar reasoning.
Example 2:

Input: richer = [], quiet = [0]
Output: [0]
 

Constraints:

n == quiet.length
1 <= n <= 500
0 <= quiet[i] < n
All the values of quiet are unique.
0 <= richer.length <= n * (n - 1) / 2
0 <= ai, bi < n
ai != bi
All the pairs of richer are unique.
The observations in richer are all logically consistent.

class Solution
{
public:
    vector<int> loudAndRich(vector<vector<int>> &richer, vector<int> &quiet)
    {
        int n = quiet.size();
        vector<int> res(n, -1);
        unordered_map<int, vector<int>> findRicher;
        for (auto &a : richer) findRicher[a[1]].push_back(a[0]);
        for (int i = 0; i < n; ++i)
        {
            helper(findRicher, quiet, i, res);
        }
        return res;
    }
    int helper(unordered_map<int, vector<int>> &findRicher, vector<int> &quiet, int i, vector<int> &res)
    {
        if (res[i] != -1) return res[i];
        res[i] = i;
        for (int j : findRicher[i])
        {
            int idx = helper(findRicher, quiet, j, res);
            if (quiet[res[i]] > quiet[idx])
            {
                res[i] = idx;
            }
        }
        return res[i];
    }
};


// Source https://leetcode.com/problems/peak-index-in-a-mountain-array/

Let's call an array arr a mountain if the following properties hold:

arr.length >= 3
There exists some i with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... arr[i-1] < arr[i]
arr[i] > arr[i+1] > ... > arr[arr.length - 1]
Given an integer array arr that is guaranteed to be a mountain, return any i such that arr[0] < arr[1] < ... arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1].

 

Example 1:

Input: arr = [0,1,0]
Output: 1
Example 2:

Input: arr = [0,2,1,0]
Output: 1
Example 3:

Input: arr = [0,10,5,2]
Output: 1
 

Constraints:

3 <= arr.length <= 104
0 <= arr[i] <= 106
arr is guaranteed to be a mountain array.

class Solution
{
public:
    int peakIndexInMountainArray(vector<int> &A)
    {
        int n = A.size(), left = 0, right = n - 1;
        while (left < right)
        {
            int mid = left + (right - left) / 2;
            if (A[mid] < A[mid + 1]) left = mid + 1;
            else right = mid;
        }
        return right;
    }
};


// Source https://leetcode.com/problems/car-fleet/

There are n cars going to the same destination along a one-lane road. The destination is target miles away.

You are given two integer array position and speed, both of length n, where position[i] is the position of the ith car and speed[i] is the speed of the ith car (in miles per hour).

A car can never pass another car ahead of it, but it can catch up to it and drive bumper to bumper at the same speed. 
The faster car will slow down to match the slower car's speed. The distance between these two cars is ignored (i.e., they are assumed to have the same position).

A car fleet is some non-empty set of cars driving at the same position and same speed. Note that a single car is also a car fleet.

If a car catches up to a car fleet right at the destination point, it will still be considered as one car fleet.

Return the number of car fleets that will arrive at the destination.

 

Example 1:

Input: target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]
Output: 3
Explanation:
The cars starting at 10 (speed 2) and 8 (speed 4) become a fleet, meeting each other at 12.
The car starting at 0 does not catch up to any other car, so it is a fleet by itself.
The cars starting at 5 (speed 1) and 3 (speed 3) become a fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target.
Note that no other cars meet these fleets before the destination, so the answer is 3.
Example 2:

Input: target = 10, position = [3], speed = [3]
Output: 1
Explanation: There is only one car, hence there is only one fleet.
Example 3:

Input: target = 100, position = [0,2,4], speed = [4,2,1]
Output: 1
Explanation:
The cars starting at 0 (speed 4) and 2 (speed 2) become a fleet, meeting each other at 4. The fleet moves at speed 2.
Then, the fleet (speed 2) and the car starting at 4 (speed 1) become one fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target.
 

Constraints:

n == position.length == speed.length
1 <= n <= 105
0 < target <= 106
0 <= position[i] < target
All the values of position are unique.
0 < speed[i] <= 106

假如车B在车A的后面，而车B到终点线的时间小于等于车A，那么就知道车A和B一定会组成车队一起过线。
这样的话，就可以从离终点最近的一辆车开始，先算出其撞线的时间，然后再一次遍历身后的车，
若后面的车撞线的时间小于等于前面的车的时间，则会组成车队。反之，若大于前面的车的时间，则说明无法追上前面的车，于是自己会形成一个新的车队，且是车头，则结果 res 自增1即可。

class Solution
{
public:
    int carFleet(int target, vector<int> &position, vector<int> &speed)
    {
        priority_queue<pair<int, double>> q;
        for (int i = 0; i < position.size(); ++i)
        {
            double timeNeeded = (double)(target - position[i]) / speed[i];
            q.push({position[i], timeNeeded});
        }
        int res = 0;
        double cur = 0;
        while (!q.empty())
        {
            auto t = q.top();
            q.pop();
            if (t.second <= cur) continue;
            cur = t.second;
            ++res;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/k-similar-strings/

Strings s1 and s2 are k-similar (for some non-negative integer k) if we can swap the positions of two letters in s1 exactly k times so that the resulting string equals s2.

Given two anagrams s1 and s2, return the smallest k for which s1 and s2 are k-similar.

 

Example 1:

Input: s1 = "ab", s2 = "ba"
Output: 1
Example 2:

Input: s1 = "abc", s2 = "bca"
Output: 2
 

Constraints:

1 <= s1.length <= 20
s2.length == s1.length
s1 and s2 contain only lowercase letters from the set {'a', 'b', 'c', 'd', 'e', 'f'}.
s2 is an anagram of s1.

A和B是异构词，这表明A和B中的字符的种类及其个数都相同，就是排列顺序不同，则A经过交换是一定能变为B的，而且交换的次数在区间 [0, n-1] 内，n是A的长度。

class Solution
{
public:
    int kSimilarity(string A, string B)
    {
        queue<string> q;
        unordered_set<string> visited;
        q.push(A);
        visited.insert(A);
        int res = 0, n = A.size();
        while (!q.empty())
        {
            int sz = q.size();
            for (int k = 0; k < sz; ++k)
            {
                string cur = q.front();
                q.pop();
                if (cur == B) return res;
                int i = 0;
                while (i < n && cur[i] == B[i]) ++i;
                for (int j = i + 1; j < n; ++j)
                {
                    if (cur[j] == B[j] || cur[j] != B[i]) continue;
                    swap(cur[i], cur[j]);
                    if (!visited.count(cur))
                    {
                        q.push(cur);
                        visited.insert(cur);
                    }
                    swap(cur[i], cur[j]);
                }
            }
            ++res;
        }
        return -1;
    }
};

class Solution
{
public:
    int kSimilarity(string A, string B)
    {
        int n = A.size(), res = n - 1;
        for (int i = 0; i < n; ++i)
        {
            if (A[i] == B[i]) continue;
            vector<int> matches;
            for (int j = i + 1; j < n; ++j)
            {
                if (A[j] == B[j] || A[j] != B[i]) continue;
                matches.push_back(j);
                if (A[i] != B[j]) continue;
                swap(A[i], A[j]);
                return 1 + kSimilarity(A.substr(i + 1), B.substr(i + 1));
            }
            for (int j : matches)
            {
                swap(A[i], A[j]);
                res = min(res, 1 + kSimilarity(A.substr(i + 1), B.substr(i + 1)));
                swap(A[i], A[j]);
            }
            return res;
        }
        return 0;
    }
};


// Source https://leetcode.com/problems/exam-room/

There is an exam room with n seats in a single row labeled from 0 to n - 1.

When a student enters the room, they must sit in the seat that maximizes the distance to the closest person. 
If there are multiple such seats, they sit in the seat with the lowest number. If no one is in the room, then the student sits at seat number 0.

Design a class that simulates the mentioned exam room.

Implement the ExamRoom class:

ExamRoom(int n) Initializes the object of the exam room with the number of the seats n.
int seat() Returns the label of the seat at which the next student will set.
void leave(int p) Indicates that the student sitting at seat p will leave the room. It is guaranteed that there will be a student sitting at seat p.
 

Example 1:

Input
["ExamRoom", "seat", "seat", "seat", "seat", "leave", "seat"]
[[10], [], [], [], [], [4], []]
Output
[null, 0, 9, 4, 2, null, 5]

Explanation
ExamRoom examRoom = new ExamRoom(10);
examRoom.seat(); // return 0, no one is in the room, then the student sits at seat number 0.
examRoom.seat(); // return 9, the student sits at the last seat number 9.
examRoom.seat(); // return 4, the student sits at the last seat number 4.
examRoom.seat(); // return 2, the student sits at the last seat number 2.
examRoom.leave(4);
examRoom.seat(); // return 5, the student sits at the last seat number 5.

 

Constraints:

1 <= n <= 109
It is guaranteed that there is a student sitting at seat p.
At most 104 calls will be made to seat and leave.

class ExamRoom
{
public:
    int n;
    set<int> spots;

    ExamRoom(int N)
    {
        n = N;
    }

    int seat()
    {
        int start = 0, mx = 0, idx = 0;
        for (int i : spots)
        {
            if (start == 0)
            {
                if (mx < i - start)
                {
                    mx = i - start;
                    idx = 0;
                }
            }
            else
            {
                if (mx < (i - start + 1) / 2)
                {
                    mx = (i - start + 1) / 2;
                    idx = start + mx - 1;
                }
            }
            start = i + 1;
        }
        if (start > 0 && mx < n - start)
        {
            mx = n - start;
            idx = n - 1;
        }
        spots.insert(idx);
        return idx;
    }

    void leave(int p)
    {
        spots.erase(p);
    }
};


// Source https://leetcode.com/problems/score-of-parentheses/

Given a balanced parentheses string s, return the score of the string.

The score of a balanced parentheses string is based on the following rule:

"()" has score 1.
AB has score A + B, where A and B are balanced parentheses strings.
(A) has score 2 * A, where A is a balanced parentheses string.
 

Example 1:

Input: s = "()"
Output: 1
Example 2:

Input: s = "(())"
Output: 2
Example 3:

Input: s = "()()"
Output: 2
 

Constraints:

2 <= s.length <= 50
s consists of only '(' and ')'.
s is a balanced parentheses string.

class Solution
{
public:
    int scoreOfParentheses(string S)
    {
        int n = S.length();
        if (n == 2) return 1;
        int res = 0;
        int i = 0;
        while (i < n)
        {
            int pos = i + 1, cnt = 1;
            while (pos < n)
            {
                if (S[pos] == '(') ++cnt;
                else --cnt;
                if (cnt == 0) break;
                ++pos;
            }
            if (pos == (i + 1)) res += 1;
            else
            {
                int cur = scoreOfParentheses(S.substr(i + 1, pos - i - 1));
                res += (2 * cur);
            }
            i = pos +  1;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/minimum-cost-to-hire-k-workers/

There are n workers. You are given two integer arrays quality and wage where quality[i] is the quality of the ith worker and wage[i] is the minimum wage expectation for the ith worker.

We want to hire exactly k workers to form a paid group. To hire a group of k workers, we must pay them according to the following rules:

Every worker in the paid group should be paid in the ratio of their quality compared to other workers in the paid group.
Every worker in the paid group must be paid at least their minimum wage expectation.
Given the integer k, return the least amount of money needed to form a paid group satisfying the above conditions. Answers within 10-5 of the actual answer will be accepted.

 

Example 1:

Input: quality = [10,20,5], wage = [70,50,30], k = 2
Output: 105.00000
Explanation: We pay 70 to 0th worker and 35 to 2nd worker.
Example 2:

Input: quality = [3,1,10,10,1], wage = [4,8,2,2,7], k = 3
Output: 30.66667
Explanation: We pay 4 to 0th worker, 13.33333 to 2nd and 3rd workers separately.
 

Constraints:

n == quality.length == wage.length
1 <= k <= n <= 104
1 <= quality[i], wage[i] <= 104

两个员工A和B，若A的能力值是B的2倍，那么A的薪水就要是B的两倍
K个员工的薪水和能力比例值都是相同的，只要能够算出这个最低的薪水能力比例值，乘以K个员工的总能力值，就可以得到最少的总花费。
每个员工的薪水不能低于其期望值，最低的薪水能力比例值不能小于任何一个员工自己的比例值（期望值除以能力值）。

class Solution
{
public:
    double mincostToHireWorkers(vector<int> &quality, vector<int> &wage, int K)
    {
        int n = quality.size();
        vector<pair<double, int>> workers;
        for (int i = 0; i < n; ++i)
        {
            workers.push_back({double(wage[i]) / quality[i], quality[i]});
        }
        sort(workers.begin(), workers.end());
        priority_queue<int> pq;
        double res = DBL_MAX;
        int qsum = 0;
        for (auto worker : workers)
        {
            qsum += worker.second;
            pq.push(worker.second);
            if (pq.size() > K)
            {
                qsum -= pq.top();
                pq.pop();
            }
            if (pq.size() == K)
            {
                res = min(res, qsum * worker.first);
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/mirror-reflection/

There is a special square room with mirrors on each of the four walls. Except for the southwest corner, there are receptors on each of the remaining corners, numbered 0, 1, and 2.

The square room has walls of length p and a laser ray from the southwest corner first meets the east wall at a distance q from the 0th receptor.

Given the two integers p and q, return the number of the receptor that the ray meets first.

The test cases are guaranteed so that the ray will meet a receptor eventually.

2	1

	   q

空	0
      p


Example 1:


Input: p = 2, q = 1
Output: 2
Explanation: The ray meets receptor 2 the first time it gets reflected back to the left wall.
Example 2:

Input: p = 3, q = 1
Output: 1
 

Constraints:

1 <= q <= p <= 1000

p/q = 3 时，若我们在右边增加大小相同的2个房间，在第三个房间的时候，则激光会到达右上角
由于第二个房间和原始房间是镜面对称的，第三个房间和第二个房间也是镜面对称的，则第三个房间和原始房间就是一样的了
偶数个房间的布局和原始房间是镜面对称的，奇数个房间的布局和原始房间是一样的
p/q = 4 时，若我们在右边增加大小相同的3个房间，在第四个房间的时候，激光到达了右上角
当 p/q = 3/2 时，我们需要复制出一个 2x3 大小的矩阵出来，在水平方向共有三个房间，是奇数则水平方向和原始房间布局一致，
但是竖直方向也复制了房间，那么竖直方向有偶数个房间，则竖直方向和原始房间成镜面反射，则最右上角为接收器0。

分析到这里，我们应该已经能总结出规律如下了：

p为奇数，q为奇数时，到达接收器1。
p为奇数，q为偶数时，到达接收器0。
p为偶数，q为奇数时，到达接收器2。

若p和q均为偶数，则同时除以2，直到不同时为偶数时，然后再带入上面归纳的三种情况求解即可

class Solution
{
public:
    int mirrorReflection(int p, int q)
    {
        while (p % 2 == 0 && q % 2 == 0)
        {
            p /= 2;
            q /= 2;
        }
        if (p % 2 == 0) return 2;
        if (q % 2 == 0) return 0;
        return 1;
    }
};


// Source https://leetcode.com/problems/buddy-strings/

Given two strings s and goal, return true if you can swap two letters in s so the result is equal to goal, otherwise, return false.

Swapping letters is defined as taking two indices i and j (0-indexed) such that i != j and swapping the characters at s[i] and s[j].

For example, swapping at indices 0 and 2 in "abcd" results in "cbad".
 

Example 1:

Input: s = "ab", goal = "ba"
Output: true
Explanation: You can swap s[0] = 'a' and s[1] = 'b' to get "ba", which is equal to goal.
Example 2:

Input: s = "ab", goal = "ab"
Output: false
Explanation: The only letters you can swap are s[0] = 'a' and s[1] = 'b', which results in "ba" != goal.
Example 3:

Input: s = "aa", goal = "aa"
Output: true
Explanation: You can swap s[0] = 'a' and s[1] = 'a' to get "aa", which is equal to goal.
 

Constraints:

1 <= s.length, goal.length <= 2 * 104
s and goal consist of lowercase letters.

class Solution
{
public:
    bool buddyStrings(string A, string B)
    {
        if (A.size() != B.size()) return false;
        if (A == B && unordered_set<char>(A.begin(), A.end()).size() < A.size()) return true;
        vector<int> diff;
        for (int i = 0; i < A.size(); ++i)
        {
            if (A[i] != B[i]) diff.push_back(i);
        }
        return diff.size() == 2 && A[diff[0]] == B[diff[1]] && A[diff[1]] == B[diff[0]];
    }
};


// Source https://leetcode.com/problems/lemonade-change/

At a lemonade stand, each lemonade costs $5. Customers are standing in a queue to buy from you and order one at a time (in the order specified by bills). 
Each customer will only buy one lemonade and pay with either a $5, $10, or $20 bill. You must provide the correct change to each customer 
so that the net transaction is that the customer pays $5.

Note that you do not have any change in hand at first.

Given an integer array bills where bills[i] is the bill the ith customer pays, return true if you can provide every customer with the correct change, or false otherwise.

 

Example 1:

Input: bills = [5,5,5,10,20]
Output: true
Explanation: 
From the first 3 customers, we collect three $5 bills in order.
From the fourth customer, we collect a $10 bill and give back a $5.
From the fifth customer, we give a $10 bill and a $5 bill.
Since all customers got correct change, we output true.
Example 2:

Input: bills = [5,5,10,10,20]
Output: false
Explanation: 
From the first two customers in order, we collect two $5 bills.
For the next two customers in order, we collect a $10 bill and give back a $5 bill.
For the last customer, we can not give the change of $15 back because we only have two $10 bills.
Since not every customer received the correct change, the answer is false.
 

Constraints:

1 <= bills.length <= 105
bills[i] is either 5, 10, or 20.

10 刀的钞票需要5刀的找零，20 刀的钞票可以用1张 10 刀和1张5刀，或者3张5刀的钞票，当前5刀的个数一定不能小于 10 刀和 20 刀的个数之后，否则无法成功找零。
由于 20 刀可以用 10 刀来找零，每个 10 刀可以节省两个5刀，但是为了获得每张 10 刀，我们还得付出一张5刀的找零，所以实际上用 10 刀来找零只能省下1张5刀钞票，
但是假如 10 刀的个数不够，那么每张 20 刀的钞票还是需要3张5刀的钞票来找零的，所以判断若5刀钞票的个数小于 20 刀钞票个数的三倍减去 10 刀钞票的个数，直接返回 false

class Solution
{
public:
    bool lemonadeChange(vector<int> &bills)
    {
        int cnt[30] = {0};
        for (int bill : bills)
        {
            ++cnt[bill];
            if (cnt[5] < cnt[20] + cnt[10]) return false;
            if (cnt[5] < 3 * cnt[20] - cnt[10]) return false;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/score-after-flipping-matrix/

You are given an m x n binary matrix grid.

A move consists of choosing any row or column and toggling each value in that row or column (i.e., changing all 0's to 1's, and all 1's to 0's).

Every row of the matrix is interpreted as a binary number, and the score of the matrix is the sum of these numbers.

Return the highest possible score after making any number of moves (including zero moves).

 

Example 1:


Input: grid = [[0,0,1,1],[1,0,1,0],[1,1,0,0]]
Output: 39
Explanation: 0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39
Example 2:

Input: grid = [[0]]
Output: 1
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 20
grid[i][j] is either 0 or 1.

当最高位是0的时候，无论如何都是需要翻转当前行的，对于 mxn 的数组来说，每行的二进制数共有n位，最高位是1的话，就是 1<<(n-1)，那么共有m行，所以至少能将 m*(1<<(n-1)) 这么大的值收入囊中，
既然最高值一定要是1，那么每一行的翻转情况就确定了，若还想增大数字之和，就只能看各列是否还能翻转了，而且是从次高位列开始看，因为最高位列必须保证都是1。
由于每一行的翻转情况已经确定了，那么如何才能确定其他位到底是0还是1呢，此时就要看它跟最高位是否相同了，
若相同的话，不管最高位初始时是0还是1，最终都要变成1，那么当前位一定最终也会变成1，而一旦跟最高位相反，那么最后一定会是0。
我们翻转当前列的条件肯定是希望翻转之后1的个数要更多一些，这样值才能增加，所以就要统计每列当前的1的个数，若小于0的个数，才进行翻转，然后乘以该列的值，对于第j列，其值为 1<<(n-1-j)

class Solution
{
public:
    int matrixScore(vector<vector<int>> &A)
    {
        int m = A.size(), n = A[0].size(), res = (1 << (n - 1)) * m;
        for (int j = 1; j < n; ++j)
        {
            int cnt = 0;
            for (int i = 0; i < m; ++i)
            {
                cnt += (A[i][j] == A[i][0]);
            }
            res += max(cnt, m - cnt) * (1 << (n - 1 - j));
        }
        return res;
    }
};


// Source https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k/

Given an integer array nums and an integer k, return the length of the shortest non-empty subarray of nums with a sum of at least k. If there is no such subarray, return -1.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [1], k = 1
Output: 1
Example 2:

Input: nums = [1,2], k = 4
Output: -1
Example 3:

Input: nums = [2,-1,2], k = 3
Output: 3
 

Constraints:

1 <= nums.length <= 105
-105 <= nums[i] <= 105
1 <= k <= 109

class Solution
{
public:
    int shortestSubarray(vector<int> &nums, int k)
    {
        int n = nums.size();
        vector<long long> sum(n, 0L);
        sum[0] = nums[0];
        for (int i = 1; i < n; ++i) sum[i] = sum[i - 1] + nums[i];
        int minL = INT_MAX;
        deque<int>dq;
        for(int i = 0; i < n; i++)
        {
            if(sum[i] >= k) minL = min(minL, i + 1);
            while(!dq.empty() && sum[i] - sum[dq.front()] >= k)
            {
                minL = min(minL, i - dq.front());
                dq.pop_front();
            }

            while(!dq.empty() && sum[dq.back()] >= sum[i]) dq.pop_back();
            dq.push_back(i);
        }
        return minL == INT_MAX ? -1 : minL;
    }
};


// Source https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/

Given the root of a binary tree, the value of a target node target, and an integer k, return an array of the values of all nodes that have a distance k from the target node.

You can return the answer in any order.

 

Example 1:


Input: root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, k = 2
Output: [7,4,1]
Explanation: The nodes that are a distance 2 from the target node (with value 5) have values 7, 4, and 1.
Example 2:

Input: root = [1], target = 1, k = 3
Output: []
 

Constraints:

The number of nodes in the tree is in the range [1, 500].
0 <= Node.val <= 500
All the values Node.val are unique.
target is the value of one of the nodes in the tree.
0 <= k <= 1000

class Solution
{
public:
    void findParent(TreeNode *node, unordered_map<TreeNode *, TreeNode *> &parent)
    {
        if (!node) return;
        if (node->left) parent[node->left] = node;
        if (node->right) parent[node->right] = node;
        findParent(node->left, parent);
        findParent(node->right, parent);
    }

    void helper(TreeNode *node, int K, unordered_map<TreeNode *, TreeNode *> &parent, unordered_set<TreeNode *> &visited, vector<int> &res)
    {
        if (visited.count(node)) return;
        visited.insert(node);
        if (K == 0)
        {
            res.push_back(node->val);
            return;
        }
        if (node->left) helper(node->left, K - 1, parent, visited, res);
        if (node->right) helper(node->right, K - 1, parent, visited, res);
        if (parent[node]) helper(parent[node], K - 1, parent, visited, res);
    }

    vector<int> distanceK(TreeNode *root, TreeNode *target, int K)
    {
        unordered_map<TreeNode *, TreeNode *> parent;
        findParent(root, parent);
        unordered_set<TreeNode *> visited;
        vector<int> res;
        helper(target, K, parent, visited, res);
        return res;
    }
};


// Source https://leetcode.com/problems/shortest-path-to-get-all-keys/

You are given an m x n grid grid where:

'.' is an empty cell.
'#' is a wall.
'@' is the starting point.
Lowercase letters represent keys.
Uppercase letters represent locks.
You start at the starting point and one move consists of walking one space in one of the four cardinal directions. You cannot walk outside the grid, or walk into a wall.

If you walk over a key, you can pick it up and you cannot walk over a lock unless you have its corresponding key.

For some 1 <= k <= 6, there is exactly one lowercase and one uppercase letter of the first k letters of the English alphabet in the grid. 
This means that there is exactly one key for each lock, and one lock for each key; and also that the letters used to represent the keys and locks were chosen in the same order as the English alphabet.

Return the lowest number of moves to acquire all keys. If it is impossible, return -1.

 

Example 1:


Input: grid = ["@.a.#","###.#","b.A.B"]
Output: 8
Explanation: Note that the goal is to obtain all the keys not to open all the locks.
Example 2:


Input: grid = ["@..aA","..B#.","....b"]
Output: 6
Example 3:


Input: grid = ["@Aa"]
Output: -1
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 30
grid[i][j] is either an English letter, '.', '#', or '@'.
The number of keys in the grid is in the range [1, 6].
Each key in the grid is unique.
Each key in the grid has a matching lock.

class Solution
{
public:
    int shortestPathAllKeys(vector<string> &grid)
    {
        int m = grid.size(), n = grid[0].size(), keyCnt = 0;
        queue<pair<int, int>> q;
        unordered_set<long> visited;
        int dirX[4] = {-1, 0, 1, 0};
        int dirY[4] = {0, 1, 0, -1};
        for (int i = 0; i < m; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                if (grid[i][j] == '@')
                {
                    q.push({i * n + j, 0});
                    visited.insert((i * n + j + 1) * 1000 + 0);
                }
                if (grid[i][j] >= 'a' && grid[i][j] <= 'f') ++keyCnt;
            }
        }
        int res = 0;
        int target = (1 << keyCnt) - 1;
        while (!q.empty())
        {
            int sz = q.size();
            for (int i =0; i < sz; ++i)
            {
                auto p = q.front();
                q.pop();
                int t = p.first, curKeys = p.second;
                if (curKeys == target) return res;
                for (int k = 0; k < 4; ++k)
                {
                    int x = t / n + dirX[k], y = t % n + dirY[k];
                    if (x < 0 || x >= m || y < 0 || y >= n) continue;
                    char c = grid[x][y];
                    if (c == '#') continue;
                    int keys = curKeys;
                    if (c >= 'A' && c <= 'F' && (keys & (1 << (c - 'A'))) == 0) continue;
                    if (c >= 'a' && c <= 'f') keys |= 1 << (c - 'a');
                    long val = (x * n + y + 1) * 1000 + keys;
                    if (!visited.count(val))
                    {
                        q.push({x * n + y, keys});
                        visited.insert(val);
                    }
                }
            }
            ++res;
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes/

Given the root of a binary tree, the depth of each node is the shortest distance to the root.

Return the smallest subtree such that it contains all the deepest nodes in the original tree.

A node is called the deepest if it has the largest depth possible among any node in the entire tree.

The subtree of a node is a tree consisting of that node, plus the set of all descendants of that node.

 

Example 1:


Input: root = [3,5,1,6,2,0,8,null,null,7,4]
Output: [2,7,4]
Explanation: We return the node with value 2, colored in yellow in the diagram.
The nodes coloured in blue are the deepest nodes of the tree.
Notice that nodes 5, 3 and 2 contain the deepest nodes in the tree but node 2 is the smallest subtree among them, so we return it.
Example 2:

Input: root = [1]
Output: [1]
Explanation: The root is the deepest node in the tree.
Example 3:

Input: root = [0,1,3,null,2]
Output: [2]
Explanation: The deepest node in the tree is 2, the valid subtrees are the subtrees of nodes 2, 1 and 0 but the subtree of node 2 is the smallest.
 

Constraints:

The number of nodes in the tree will be in the range [1, 500].
0 <= Node.val <= 500
The values of the nodes in the tree are unique.

class Solution
{
public:
    unordered_map<TreeNode *, int> mp;

    int depth(TreeNode *node)
    {
        if (!node) return 0;
        int leftD = depth(node->left);
        int rightD = depth(node->right);
        return mp[node] = max(leftD, rightD) + 1;
    }

    TreeNode *recur(TreeNode *root)
    {
        if (root->left == nullptr && root->right == nullptr) return root;
        if (root->left == nullptr) return recur(root->right);
        if (root->right == nullptr) return recur(root->left);
        int diff = mp[root->left] - mp[root->right];
        if (diff == 0) return root;
        if (diff > 0) return recur(root->left);
        else return recur(root->right);
    }

    TreeNode *subtreeWithAllDeepest(TreeNode *root)
    {
        depth(root);
        return recur(root);
    }
};


// Source https://leetcode.com/problems/prime-palindrome/

Given an integer n, return the smallest prime palindrome greater than or equal to n.

An integer is prime if it has exactly two divisors: 1 and itself. Note that 1 is not a prime number.

For example, 2, 3, 5, 7, 11, and 13 are all primes.
An integer is a palindrome if it reads the same from left to right as it does from right to left.

For example, 101 and 12321 are palindromes.
The test cases are generated so that the answer always exists and is in the range [2, 2 * 108].

 

Example 1:

Input: n = 6
Output: 7
Example 2:

Input: n = 8
Output: 11
Example 3:

Input: n = 13
Output: 101
 

Constraints:

1 <= n <= 108

长度为偶数的回文数字一定是 11 的倍数

class Solution
{
public:
    bool isPrime(int num)
    {
        if (num < 2) return false;
        if (num < 4) return true;
        for (int i = 2; i * i <= num; ++i)
        {
            if (num % i == 0) return false;
        }
        return true;
    }

    int primePalindrome(int N)
    {
        if (N >= 8 && N <= 11) return 11;
        for (int i = 1; i < 1e5; ++i)
        {
            string s = to_string(i);
            string t(s.rbegin(), s.rend());
            int x = stoi(s + t.substr(1));
            if (x >= N && isPrime(x)) return x;
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/transpose-matrix/

Given a 2D integer array matrix, return the transpose of matrix.

The transpose of a matrix is the matrix flipped over its main diagonal, switching the matrix's row and column indices.



 

Example 1:

Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[1,4,7],[2,5,8],[3,6,9]]
Example 2:

Input: matrix = [[1,2,3],[4,5,6]]
Output: [[1,4],[2,5],[3,6]]
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 1000
1 <= m * n <= 105
-109 <= matrix[i][j] <= 109

class Solution
{
public:
    vector<vector<int>> transpose(vector<vector<int>> &A)
    {
        int m = A.size(), n = A[0].size();
        vector<vector<int>> res(n, vector<int>(m));
        for (int i = 0; i < m; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                res[j][i] = A[i][j];
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/binary-gap/

Given a positive integer n, find and return the longest distance between any two adjacent 1's in the binary representation of n. If there are no two adjacent 1's, return 0.

Two 1's are adjacent if there are only 0's separating them (possibly no 0's). The distance between two 1's is the absolute difference between their bit positions. 
For example, the two 1's in "1001" have a distance of 3.

 

Example 1:

Input: n = 22
Output: 2
Explanation: 22 in binary is "10110".
The first adjacent pair of 1's is "10110" with a distance of 2.
The second adjacent pair of 1's is "10110" with a distance of 1.
The answer is the largest of these two distances, which is 2.
Note that "10110" is not a valid pair since there is a 1 separating the two 1's underlined.
Example 2:

Input: n = 8
Output: 0
Explanation: 8 in binary is "1000".
There are not any adjacent pairs of 1's in the binary representation of 8, so we return 0.
Example 3:

Input: n = 5
Output: 2
Explanation: 5 in binary is "101".
 

Constraints:

1 <= n <= 109

class Solution
{
public:
    int binaryGap(int N)
    {
        vector<int> pos;
        for (int i = 0; i < 32; ++i)
        {
            if (((N >> i) & 1) != 0) pos.push_back(i);
        }
        int res = 0, n = pos.size();
        for (int i = 1; i < n; ++i)
        {
            res = max(res, pos[i] - pos[i - 1]);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/reordered-power-of-2/

You are given an integer n. We reorder the digits in any order (including the original order) such that the leading digit is not zero.

Return true if and only if we can do this so that the resulting number is a power of two.

 

Example 1:

Input: n = 1
Output: true
Example 2:

Input: n = 10
Output: false
 

Constraints:

1 <= n <= 109

class Solution
{
public:
    bool reorderedPowerOf2(int N)
    {
        string str = to_string(N);
        sort(str.begin(), str.end());
        for (int i = 0; i < 31; ++i)
        {
            string t = to_string(1 << i);
            sort(t.begin(), t.end());
            if (t == str) return true;
        }
        return false;
    }
};


// Source https://leetcode.com/problems/advantage-shuffle/

You are given two integer arrays nums1 and nums2 both of the same length. The advantage of nums1 with respect to nums2 is the number of indices i for which nums1[i] > nums2[i].

Return any permutation of nums1 that maximizes its advantage with respect to nums2.

 

Example 1:

Input: nums1 = [2,7,11,15], nums2 = [1,10,4,11]
Output: [2,11,7,15]
Example 2:

Input: nums1 = [12,24,8,32], nums2 = [13,25,32,11]
Output: [24,32,8,12]
 

Constraints:

1 <= nums1.length <= 105
nums2.length == nums1.length
0 <= nums1[i], nums2[i] <= 109

对于B中的每个数，先在A中找刚好大于该数的数字，用太大的数字就浪费了，而如果A中没有比之大的数字，就用A中最小的数字。

class Solution
{
public:
    vector<int> advantageCount(vector<int> &A, vector<int> &B)
    {
        vector<int> res;
        multiset<int> st(A.begin(), A.end());
        for (int i = 0; i < B.size(); ++i)
        {
            auto it = (*st.rbegin() <= B[i]) ? st.begin() : st.upper_bound(B[i]);
            res.push_back(*it);
            st.erase(it);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/minimum-number-of-refueling-stops/

A car travels from a starting position to a destination which is target miles east of the starting position.

There are gas stations along the way. The gas stations are represented as an array stations 
where stations[i] = [positioni, fueli] indicates that the ith gas station is positioni miles east of the starting position and has fueli liters of gas.

The car starts with an infinite tank of gas, which initially has startFuel liters of fuel in it. It uses one liter of gas per one mile that it drives. 
When the car reaches a gas station, it may stop and refuel, transferring all the gas from the station into the car.

Return the minimum number of refueling stops the car must make in order to reach its destination. If it cannot reach the destination, return -1.

Note that if the car reaches a gas station with 0 fuel left, the car can still refuel there. If the car reaches the destination with 0 fuel left, it is still considered to have arrived.

 

Example 1:

Input: target = 1, startFuel = 1, stations = []
Output: 0
Explanation: We can reach the target without refueling.
Example 2:

Input: target = 100, startFuel = 1, stations = [[10,100]]
Output: -1
Explanation: We can not reach the target (or even the first gas station).
Example 3:

Input: target = 100, startFuel = 10, stations = [[10,60],[20,30],[30,30],[60,40]]
Output: 2
Explanation: We start with 10 liters of fuel.
We drive to position 10, expending 10 liters of fuel.  We refuel from 0 liters to 60 liters of gas.
Then, we drive from position 10 to position 60 (expending 50 liters of fuel),
and refuel from 10 liters to 50 liters of gas.  We then drive to and reach the target.
We made 2 refueling stops along the way, so we return 2.
 

Constraints:

1 <= target, startFuel <= 109
0 <= stations.length <= 500
0 <= positioni <= positioni+1 < target
1 <= fueli < 109

将所有能到达的加油站根据油量的多少放入最大堆，这样每一次都选择油量最多的加油站去加油，才能尽可能的到达最远的地方

class Solution
{
public:
    int minRefuelStops(int target, int startFuel, vector<vector<int>> &stations)
    {
        int res = 0, i = 0, n = stations.size();
        priority_queue<int> pq;
        while (startFuel < target)
        {
            while (i < n && stations[i][0] <= startFuel)
            {
                pq.push(stations[i][1]);
                ++i;
            }
            if (pq.empty()) return -1;
            startFuel += pq.top();
            pq.pop();
            ++res;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/leaf-similar-trees/

Consider all the leaves of a binary tree, from left to right order, the values of those leaves form a leaf value sequence.



For example, in the given tree above, the leaf value sequence is (6, 7, 4, 9, 8).

Two binary trees are considered leaf-similar if their leaf value sequence is the same.

Return true if and only if the two given trees with head nodes root1 and root2 are leaf-similar.

 

Example 1:


Input: root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]
Output: true
Example 2:


Input: root1 = [1,2,3], root2 = [1,3,2]
Output: false
 

Constraints:

The number of nodes in each tree will be in the range [1, 200].
Both of the given trees will have values in the range [0, 200].

class Solution
{
public:
    bool leafSimilar(TreeNode *root1, TreeNode *root2)
    {
        vector<int> leaf1, leaf2;
        helper(root1, leaf1);
        helper(root2, leaf2);
        return leaf1 == leaf2;
    }
    void helper(TreeNode *node, vector<int> &leaf)
    {
        if (!node) return;
        if (!node->left && !node->right)
        {
            leaf.push_back(node->val);
        }
        helper(node->left, leaf);
        helper(node->right, leaf);
    }
};


// Source https://leetcode.com/problems/length-of-longest-fibonacci-subsequence/

A sequence x1, x2, ..., xn is Fibonacci-like if:

n >= 3
xi + xi+1 == xi+2 for all i + 2 <= n
Given a strictly increasing array arr of positive integers forming a sequence, return the length of the longest Fibonacci-like subsequence of arr. If one does not exist, return 0.

A subsequence is derived from another sequence arr by deleting any number of elements (including none) from arr, without changing the order of the remaining elements. 
For example, [3, 5, 8] is a subsequence of [3, 4, 5, 6, 7, 8].

 

Example 1:

Input: arr = [1,2,3,4,5,6,7,8]
Output: 5
Explanation: The longest subsequence that is fibonacci-like: [1,2,3,5,8].
Example 2:

Input: arr = [1,3,7,11,12,14,18]
Output: 3
Explanation: The longest subsequence that is fibonacci-like: [1,11,12], [3,11,14] or [7,11,18].
 

Constraints:

3 <= arr.length <= 1000
1 <= arr[i] < arr[i + 1] <= 109

class Solution
{
public:
    int lenLongestFibSubseq(vector<int> &A)
    {
        int res = 0, n = A.size();
        unordered_set<int> st(A.begin(), A.end());
        for (int i = 0; i < n; ++i)
        {
            for (int j = i + 1; j < n; ++j)
            {
                int a = A[i], b = A[j], cnt = 2;
                while (st.count(a + b))
                {
                    ++cnt;
                    int temp = a + b;
                    a = b;
                    b = temp;
                }
                res = max(res, cnt);
            }
        }
        return (res > 2) ? res : 0;
    }
};


// Source https://leetcode.com/problems/walking-robot-simulation/

A robot on an infinite XY-plane starts at point (0, 0) facing north. The robot can receive a sequence of these three possible types of commands:

-2: Turn left 90 degrees.
-1: Turn right 90 degrees.
1 <= k <= 9: Move forward k units, one unit at a time.
Some of the grid squares are obstacles. The ith obstacle is at grid point obstacles[i] = (xi, yi). 
If the robot runs into an obstacle, then it will instead stay in its current location and move on to the next command.

Return the maximum Euclidean distance that the robot ever gets from the origin squared (i.e. if the distance is 5, return 25).

Note:

North means +Y direction.
East means +X direction.
South means -Y direction.
West means -X direction.
 

Example 1:

Input: commands = [4,-1,3], obstacles = []
Output: 25
Explanation: The robot starts at (0, 0):
1. Move north 4 units to (0, 4).
2. Turn right.
3. Move east 3 units to (3, 4).
The furthest point the robot ever gets from the origin is (3, 4), which squared is 32 + 42 = 25 units away.
Example 2:

Input: commands = [4,-1,4,-2,4], obstacles = [[2,4]]
Output: 65
Explanation: The robot starts at (0, 0):
1. Move north 4 units to (0, 4).
2. Turn right.
3. Move east 1 unit and get blocked by the obstacle at (2, 4), robot is at (1, 4).
4. Turn left.
5. Move north 4 units to (1, 8).
The furthest point the robot ever gets from the origin is (1, 8), which squared is 12 + 82 = 65 units away.
Example 3:

Input: commands = [6,-1,-1,6], obstacles = []
Output: 36
Explanation: The robot starts at (0, 0):
1. Move north 6 units to (0, 6).
2. Turn right.
3. Turn right.
4. Move south 6 units to (0, 0).
The furthest point the robot ever gets from the origin is (0, 6), which squared is 62 = 36 units away.
 

Constraints:

1 <= commands.length <= 104
commands[i] is either -2, -1, or an integer in the range [1, 9].
0 <= obstacles.length <= 104
-3 * 104 <= xi, yi <= 3 * 104
The answer is guaranteed to be less than 231.

class Solution
{
public:
    int robotSim(vector<int> &commands, vector<vector<int>> &obstacles)
    {
        int res = 0, x = 0, y = 0, idx = 0;
        unordered_set<string> obs;
        for (auto &v : obstacles) obs.insert(to_string(v[0]) + "-" + to_string(v[1]));
        int dirX[4] = {0, 1, 0, -1};
        int dirY[4] = {1, 0, -1, 0};
        for (int command : commands)
        {
            if (command == -1) idx = (idx + 1) % 4;
            else if (command == -2) idx = (idx - 1 + 4) % 4;
            else
            {
                while (command > 0 && !obs.count(to_string(x + dirX[idx]) + "-" + to_string(y + dirY[idx])))
                {
                    x += dirX[idx];
                    y += dirY[idx];
                    --command;
                }
            }
            res = max(res, x * x + y * y);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/koko-eating-bananas/

Koko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] bananas. The guards have gone and will come back in h hours.

Koko can decide her bananas-per-hour eating speed of k. Each hour, she chooses some pile of bananas and eats k bananas from that pile. 
If the pile has less than k bananas, she eats all of them instead and will not eat any more bananas during this hour.

Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return.

Return the minimum integer k such that she can eat all the bananas within h hours.

 

Example 1:

Input: piles = [3,6,7,11], h = 8
Output: 4
Example 2:

Input: piles = [30,11,23,4,20], h = 5
Output: 30
Example 3:

Input: piles = [30,11,23,4,20], h = 6
Output: 23
 

Constraints:

1 <= piles.length <= 104
piles.length <= h <= 109
1 <= piles[i] <= 109

class Solution
{
public:
    int minEatingSpeed(vector<int> &piles, int H)
    {
        int left = 1, right = 1e9;
        while (left < right)
        {
            int mid = left + (right - left) / 2, cnt = 0;
            for (int pile : piles) cnt += (pile + mid - 1) / mid;
            if (cnt > H) left = mid + 1;
            else right = mid;
        }
        return right;
    }
};


// Source https://leetcode.com/problems/middle-of-the-linked-list/

Given the head of a singly linked list, return the middle node of the linked list.

If there are two middle nodes, return the second middle node.

 

Example 1:


Input: head = [1,2,3,4,5]
Output: [3,4,5]
Explanation: The middle node of the list is node 3.
Example 2:


Input: head = [1,2,3,4,5,6]
Output: [4,5,6]
Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.
 

Constraints:

The number of nodes in the list is in the range [1, 100].
1 <= Node.val <= 100

class Solution
{
public:
    ListNode *middleNode(ListNode *head)
    {
        ListNode *slow = head, *fast = head;
        while (fast && fast->next)
        {
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }
};


// Source https://leetcode.com/problems/stone-game/

Alice and Bob play a game with piles of stones. There are an even number of piles arranged in a row, and each pile has a positive integer number of stones piles[i].

The objective of the game is to end with the most stones. The total number of stones across all the piles is odd, so there are no ties.

Alice and Bob take turns, with Alice starting first. Each turn, a player takes the entire pile of stones either from the beginning or from the end of the row. 
This continues until there are no more piles left, at which point the person with the most stones wins.

Assuming Alice and Bob play optimally, return true if Alice wins the game, or false if Bob wins.

 

Example 1:

Input: piles = [5,3,4,5]
Output: true
Explanation: 
Alice starts first, and can only take the first 5 or the last 5.
Say she takes the first 5, so that the row becomes [3, 4, 5].
If Bob takes 3, then the board is [4, 5], and Alice takes 5 to win with 10 points.
If Bob takes the last 5, then the board is [3, 4], and Alice takes 4 to win with 9 points.
This demonstrated that taking the first 5 was a winning move for Alice, so we return true.
Example 2:

Input: piles = [3,7,2,3]
Output: true
 

Constraints:

2 <= piles.length <= 500
piles.length is even.
1 <= piles[i] <= 500
sum(piles[i]) is odd.

class Solution
{
public:
    int n;
    int dp[501][501];

    int solve(vector<int> &arr, int i, int j)
    {
        if(i > j) return 0;
        if(i == j)
        {
            return dp[i][j] = arr[i];
        }
        if(dp[i][j] != -1) return dp[i][j];
        int res = 0;
        res = max(res, solve(arr, i + 1, j) + arr[i]);
        res = max(res, solve(arr, i, j - 1) + arr[j]);
        return dp[i][j] = res;
    }

    bool stoneGame(vector<int> &piles)
    {
        n = piles.size();
        memset(dp, -1, sizeof(dp));
        int sum = 0;
        for(auto val : piles) sum += val;
        int a = solve(piles, 0, n - 1);
        int b = sum - a;
        return a > b;
    }
};


// Source https://leetcode.com/problems/nth-magical-number/

A positive integer is magical if it is divisible by either a or b.

Given the three integers n, a, and b, return the nth magical number. Since the answer may be very large, return it modulo 109 + 7.

 

Example 1:

Input: n = 1, a = 2, b = 3
Output: 2
Example 2:

Input: n = 4, a = 2, b = 3
Output: 6
 

Constraints:

1 <= n <= 109
2 <= a, b <= 4 * 104

class Solution
{
public:
    int gcd(int a, int b)
    {
        return (b == 0) ? a : gcd(b, a % b);
    }

    int nthMagicalNumber(int N, int A, int B)
    {
        long lcm = A * B / gcd(A, B), M = 1e9 + 7;
        long left = 2, right = 1e14;
        while (left < right)
        {
            long mid = left + (right - left) / 2;
            long cnt = (mid / A + mid / B - mid / lcm);
            if (cnt < N) left = mid + 1;
            else right = mid;
        }
        return right % M;
    }
};


// Source https://leetcode.com/problems/profitable-schemes/

There is a group of n members, and a list of various crimes they could commit. The ith crime generates a profit[i] and requires group[i] members to participate in it. 
If a member participates in one crime, that member can't participate in another crime.

Let's call a profitable scheme any subset of these crimes that generates at least minProfit profit, and the total number of members participating in that subset of crimes is at most n.

Return the number of schemes that can be chosen. Since the answer may be very large, return it modulo 109 + 7.

 

Example 1:

Input: n = 5, minProfit = 3, group = [2,2], profit = [2,3]
Output: 2
Explanation: To make a profit of at least 3, the group could either commit crimes 0 and 1, or just crime 1.
In total, there are 2 schemes.
Example 2:

Input: n = 10, minProfit = 5, group = [2,3,5], profit = [6,7,8]
Output: 7
Explanation: To make a profit of at least 5, the group could commit any crimes, as long as they commit one.
There are 7 possible schemes: (0), (1), (2), (0,1), (0,2), (1,2), and (0,1,2).
 

Constraints:

1 <= n <= 100
0 <= minProfit <= 100
1 <= group.length <= 100
1 <= group[i] <= 100
profit.length == group.length
0 <= profit[i] <= 100

class Solution
{
public:
    int sz;
    int mod = 1e9 + 7;
    int dp[101][101][101];

    int helper(vector<int> &group, vector<int> &profit, int idx, int cnt, int minProfit)
    {
        if(cnt < 0) return 0;
        if(idx == sz)
        {
            if(minProfit == 0) return 1;
            return 0;
        }
        if(dp[idx][cnt][minProfit] != -1) return dp[idx][cnt][minProfit];
        int op1 = helper(group, profit, idx + 1, cnt, minProfit);
        int op2 = helper(group, profit, idx + 1, cnt - group[idx], max(0, minProfit - profit[idx]));
        int ans = (op1 + op2) % mod;
        return dp[idx][cnt][minProfit] = ans;
    }

    int profitableSchemes(int n, int minProfit, vector<int> &group, vector<int> &profit)
    {
        sz = group.size();
        memset(dp, -1, sizeof(dp));
        return helper(group, profit, 0, n, minProfit);
    }
};


// Source https://leetcode.com/problems/decoded-string-at-index/

You are given an encoded string s. To decode the string to a tape, the encoded string is read one character at a time and the following steps are taken:

If the character read is a letter, that letter is written onto the tape.
If the character read is a digit d, the entire current tape is repeatedly written d - 1 more times in total.
Given an integer k, return the kth letter (1-indexed) in the decoded string.

 

Example 1:

Input: s = "leet2code3", k = 10
Output: "o"
Explanation: The decoded string is "leetleetcodeleetleetcodeleetleetcode".
The 10th letter in the string is "o".
Example 2:

Input: s = "ha22", k = 5
Output: "h"
Explanation: The decoded string is "hahahaha".
The 5th letter is "h".
Example 3:

Input: s = "a2345678999999999999999", k = 1
Output: "a"
Explanation: The decoded string is "a" repeated 8301530446056247680 times.
The 1st letter is "a".
 

Constraints:

2 <= s.length <= 100
s consists of lowercase English letters and digits 2 through 9.
s starts with a letter.
1 <= k <= 109
It is guaranteed that k is less than or equal to the length of the decoded string.
The decoded string is guaranteed to have less than 263 letters.

ha22cc22xx，k = 5
hahahahacchahahahacchahahahacchahahahaccxx

class Solution
{
public:
    string decodeAtIndex(string S, int K)
    {
        int i = 0;
        long cnt = 0;
        for (; cnt < K; ++i)
        {
            cnt = isdigit(S[i]) ? cnt * (S[i] - '0') : (cnt + 1);
        }
        int j = i - 1;
        while (j >= 0)
        {
            if (isdigit(S[j]))
            {
                cnt /= (S[j] - '0');
                K %= cnt;
            }
            else
            {
                if (K % cnt == 0) { break; }
                --cnt;
            }
            --j;
        }
        return string(1, S[j]);
    }
};


// Source https://leetcode.com/problems/boats-to-save-people/

You are given an array people where people[i] is the weight of the ith person, and an infinite number of boats where each boat can carry a maximum weight of limit. 
Each boat carries at most two people at the same time, provided the sum of the weight of those people is at most limit.

Return the minimum number of boats to carry every given person.

 

Example 1:

Input: people = [1,2], limit = 3
Output: 1
Explanation: 1 boat (1, 2)
Example 2:

Input: people = [3,2,2,1], limit = 3
Output: 3
Explanation: 3 boats (1, 2), (2) and (3)
Example 3:

Input: people = [3,5,3,4], limit = 5
Output: 4
Explanation: 4 boats (3), (3), (4), (5)
 

Constraints:

1 <= people.length <= 5 * 104
1 <= people[i] <= limit <= 3 * 104

class Solution
{
public:
    int numRescueBoats(vector<int> &people, int limit)
    {
        sort(people.begin(), people.end());
        int res = 0, n = people.size(), left = 0, right = n - 1;
        while (left < right)
        {
            if (people[left] + people[right] <= limit) ++left;
            --right;
            ++res;
        }
        if (left == right) ++res;
        return res;
    }
};


// Source https://leetcode.com/problems/reachable-nodes-in-subdivided-graph/

You are given an undirected graph (the "original graph") with n nodes labeled from 0 to n - 1. 
You decide to subdivide each edge in the graph into a chain of nodes, with the number of new nodes varying between each edge.

The graph is given as a 2D array of edges where edges[i] = [ui, vi, cnti] indicates that there is an edge between nodes ui and vi in the original graph, 
and cnti is the total number of new nodes that you will subdivide the edge into. Note that cnti == 0 means you will not subdivide the edge.

To subdivide the edge [ui, vi], replace it with (cnti + 1) new edges and cnti new nodes. 
The new nodes are x1, x2, ..., xcnti, and the new edges are [ui, x1], [x1, x2], [x2, x3], ..., [xcnti-1, xcnti], [xcnti, vi].

In this new graph, you want to know how many nodes are reachable from the node 0, where a node is reachable if the distance is maxMoves or less.

Given the original graph and maxMoves, return the number of nodes that are reachable from node 0 in the new graph.

 

Example 1:


Input: edges = [[0,1,10],[0,2,1],[1,2,2]], maxMoves = 6, n = 3
Output: 13
Explanation: The edge subdivisions are shown in the image above.
The nodes that are reachable are highlighted in yellow.
Example 2:

Input: edges = [[0,1,4],[1,2,6],[0,2,8],[1,3,1]], maxMoves = 10, n = 4
Output: 23
Example 3:

Input: edges = [[1,2,4],[1,4,5],[1,3,1],[2,3,4],[3,4,5]], maxMoves = 17, n = 5
Output: 1
Explanation: Node 0 is disconnected from the rest of the graph, so only node 0 is reachable.
 

Constraints:

0 <= edges.length <= min(n * (n - 1) / 2, 104)
edges[i].length == 3
0 <= ui < vi < n
There are no multiple edges in the graph.
0 <= cnti <= 104
0 <= maxMoves <= 109
1 <= n <= 3000

class Solution
{
public:
    int reachableNodes(vector<vector<int>> &edges, int M, int N)
    {
        unordered_map<int, unordered_map<int, int>> graph;
        for (auto &edge : edges)
        {
            graph[edge[0]][edge[1]] = edge[2];
            graph[edge[1]][edge[0]] = edge[2];
        }
        vector<bool> visited(N);
        priority_queue<pair<int, int>> pq;
        pq.push({M, 0});
        int res = 0;
        while (!pq.empty())
        {
            auto t = pq.top();
            pq.pop();
            int move = t.first, cur = t.second;
            if (visited[cur]) continue;
            visited[cur] = true;
            ++res;
            if (move == 0) continue;
            for (auto a : graph[cur])
            {
                int cnt = min(move, a.second);
                res += cnt;
                if (!visited[a.first])
                {
                    graph[a.first][cur] -= cnt;
                    if (move > a.second) pq.push({move - a.second - 1, a.first});
                }
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/projection-area-of-3d-shapes/

You are given an n x n grid where we place some 1 x 1 x 1 cubes that are axis-aligned with the x, y, and z axes.

Each value v = grid[i][j] represents a tower of v cubes placed on top of the cell (i, j).

We view the projection of these cubes onto the xy, yz, and zx planes.

A projection is like a shadow, that maps our 3-dimensional figure to a 2-dimensional plane. We are viewing the "shadow" when looking at the cubes from the top, the front, and the side.

Return the total area of all three projections.

 

Example 1:


Input: grid = [[1,2],[3,4]]
Output: 17
Explanation: Here are the three projections ("shadows") of the shape made with each axis-aligned plane.
Example 2:

Input: grid = [[2]]
Output: 5
Example 3:

Input: grid = [[1,0],[0,2]]
Output: 8
 

Constraints:

n == grid.length == grid[i].length
1 <= n <= 50
0 <= grid[i][j] <= 50

class Solution
{
public:
    int projectionArea(vector<vector<int>> &grid)
    {
        int n = grid[0].size(), res = 0;
        for (int i = 0; i < n; ++i)
        {
            int rowMax = 0, colMax = 0;
            for (int j = 0; j < n; ++j)
            {
                if (grid[i][j] > 0) ++res;
                rowMax = max(rowMax, grid[i][j]);
                colMax = max(colMax, grid[j][i]);
            }
            res += rowMax + colMax;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/uncommon-words-from-two-sentences/

A sentence is a string of single-space separated words where each word consists only of lowercase letters.

A word is uncommon if it appears exactly once in one of the sentences, and does not appear in the other sentence.

Given two sentences s1 and s2, return a list of all the uncommon words. You may return the answer in any order.

 

Example 1:

Input: s1 = "this apple is sweet", s2 = "this apple is sour"
Output: ["sweet","sour"]
Example 2:

Input: s1 = "apple apple", s2 = "banana"
Output: ["banana"]
 

Constraints:

1 <= s1.length, s2.length <= 200
s1 and s2 consist of lowercase English letters and spaces.
s1 and s2 do not have leading or trailing spaces.
All the words in s1 and s2 are separated by a single space.

class Solution
{
public:
    vector<string> uncommonFromSentences(string A, string B)
    {
        unordered_map<string, int> wordCnt;
        istringstream iss(A + " " + B);
        string t;
        while (iss >> t) ++wordCnt[t];
        vector<string> res;
        for (auto &a : wordCnt)
        {
            if (a.second == 1) res.push_back(a.first);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/spiral-matrix-iii/

You start at the cell (rStart, cStart) of an rows x cols grid facing east. The northwest corner is at the first row and column in the grid, and the southeast corner is at the last row and column.

You will walk in a clockwise spiral shape to visit every position in this grid. Whenever you move outside the grid's boundary, 
we continue our walk outside the grid (but may return to the grid boundary later.). Eventually, we reach all rows * cols spaces of the grid.

Return an array of coordinates representing the positions of the grid in the order you visited them.

 

Example 1:


Input: rows = 1, cols = 4, rStart = 0, cStart = 0
Output: [[0,0],[0,1],[0,2],[0,3]]
Example 2:


Input: rows = 5, cols = 6, rStart = 1, cStart = 4
Output: [[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]
 

Constraints:

1 <= rows, cols <= 100
0 <= rStart < rows
0 <= cStart < cols

class Solution
{
public:
    vector<vector<int>> spiralMatrixIII(int R, int C, int r0, int c0)
    {
        vector<vector<int>> res;
        int step = 1;
        while (res.size() < R * C)
        {
            for (int i = 0; i < step; ++i) add(R, C, r0, c0++, res);
            for (int i = 0; i < step; ++i) add(R, C, r0++, c0, res);
            ++step;
            for (int i = 0; i < step; ++i) add(R, C, r0, c0--, res);
            for (int i = 0; i < step; ++i) add(R, C, r0--, c0, res);
            ++step;
        }
        return res;
    }
    void add(int R, int C, int x, int y, vector<vector<int>> &res)
    {
        if (x >= 0 && x < R && y >= 0 && y < C) res.push_back({x, y});
    }
};


// Source https://leetcode.com/problems/possible-bipartition/

We want to split a group of n people (labeled from 1 to n) into two groups of any size. Each person may dislike some other people, and they should not go into the same group.

Given the integer n and the array dislikes where dislikes[i] = [ai, bi] indicates that the person labeled ai does not like the person labeled bi, 
return true if it is possible to split everyone into two groups in this way.

 

Example 1:

Input: n = 4, dislikes = [[1,2],[1,3],[2,4]]
Output: true
Explanation: group1 [1,4] and group2 [2,3].
Example 2:

Input: n = 3, dislikes = [[1,2],[1,3],[2,3]]
Output: false
Example 3:

Input: n = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]]
Output: false
 

Constraints:

1 <= n <= 2000
0 <= dislikes.length <= 104
dislikes[i].length == 2
1 <= dislikes[i][j] <= n
ai < bi
All the pairs of dislikes are unique.

class Solution
{
public:
    int find(vector<int> &root, int i)
    {
        if (root[i] != i) root[i] = find(root, root[i]);
        return root[i];
    }

    bool possibleBipartition(int N, vector<vector<int>> &dislikes)
    {
        unordered_map<int, vector<int>> g;
        for (auto &dislike : dislikes)
        {
            g[dislike[0]].push_back(dislike[1]);
            g[dislike[1]].push_back(dislike[0]);
        }
        vector<int> root(N + 1);
        for (int i = 0; i <= N; ++i) root[i] = i;
        for (int i = 1; i <= N; ++i)
        {
            if (!g.count(i)) continue;
            int x = find(root, i), y = find(root, g[i][0]);
            if (x == y) return false;
            for (int j = 1; j < g[i].size(); ++j)
            {
                int parent = find(root, g[i][j]);
                if (x == parent) return false;
                root[parent] = y;
            }
        }
        return true;
    }
};


// Source https://leetcode.com/problems/super-egg-drop/

You are given k identical eggs and you have access to a building with n floors labeled from 1 to n.

You know that there exists a floor f where 0 <= f <= n such that any egg dropped at a floor higher than f will break, and any egg dropped at or below floor f will not break.

Each move, you may take an unbroken egg and drop it from any floor x (where 1 <= x <= n). If the egg breaks, you can no longer use it. 
However, if the egg does not break, you may reuse it in future moves.

Return the minimum number of moves that you need to determine with certainty what the value of f is.

 

Example 1:

Input: k = 1, n = 2
Output: 2
Explanation: 
Drop the egg from floor 1. If it breaks, we know that f = 0.
Otherwise, drop the egg from floor 2. If it breaks, we know that f = 1.
If it does not break, then we know f = 2.
Hence, we need at minimum 2 moves to determine with certainty what the value of f is.
Example 2:

Input: k = 2, n = 6
Output: 3
Example 3:

Input: k = 3, n = 14
Output: 4
 

Constraints:

1 <= k <= 100
1 <= n <= 104

注意，题目求的是扔鸡蛋的次数

有K个鸡蛋，还有一栋共N层的大楼，有个临界点的层数F，任何鸡蛋在高于这个层数扔都会碎，低于等于这个层数就不会碎，
不管临界点的值是多少，我们都要能找到这个临界点，问最小需要多少操作，注意这里的操作只有当前还有没碎的鸡蛋才能进行。

假设我们只有1个鸡蛋，碎了就不能再用了，这时我们要测 100 楼的临界点的时候，只能一层一层从低处往高处去测，
当某层鸡蛋碎了之后，就知道临界点了，所以最坏情况要测 100 次（从第1层到第100层，临界点的值是100）。

假设我们有两个鸡蛋，我们可以把第一个鸡蛋仍在 14 楼，若碎了，说明临界点一定在 14 楼以内 [0,13]，
可以用第二个鸡蛋一层一层从低处往高处去测，所以最多操作 14 次（从第1层到第13层，临界点的值是13）。
若第一个鸡蛋没碎，则下一次扔在第 27 楼，假如碎了，说明临界点在 [14,27) 范围内，
可以用第二个鸡蛋一层一层从低处往高处去测，所以最多操作 14 次（从第15层到第26层，临界点的值是26）。
若第一个鸡蛋没碎，则下一次扔在第 39 楼，假如碎了，说明临界点在 [27,39) 范围内，
可以用第二个鸡蛋一层一层从低处往高处去测，所以最多操作 14 次（从第28层到第38层，临界点的值是38）。
若第一个鸡蛋没碎，则下一次扔在第 50 楼，假如碎了，说明临界点在 [39,50) 范围内，
可以用第二个鸡蛋一层一层从低处往高处去测，所以最多操作 14 次（从第40层到第49层，临界点的值是49）。
...
若第一个鸡蛋没碎，则下一次扔在第 95 楼，假如碎了，说明临界点在 [90,95) 范围内，
可以用第二个鸡蛋一层一层从低处往高处去测，所以最多操作 14 次（从第91层到第94层，临界点的值是94）。
若第一个鸡蛋没碎，则下一次扔在第 99 楼，假如碎了，说明临界点在 [95,99) 范围内，
可以用第二个鸡蛋一层一层从低处往高处去测，所以最多操作 14 次（从第96层到第98层，临界点的值是98）。
若第一个鸡蛋没碎，则下一次扔在第 100 楼，假如碎了，说明临界点为99，否则为100。

dp[i][j] 表示当有i次操作，且有j个鸡蛋时能测出的最高的楼层，先使用1个鸡蛋测试第 dp[i-1][j-1]+1 层，有两种情况：

鸡蛋碎掉：剩余i-1次操作，j-1个鸡蛋，还可以测出 0, 1, 2, ..., dp[i-1][j-1] 。
鸡蛋没碎：那这个鸡蛋可以继续利用，此时可以测出 dp[i-1][j-1]+1, ..., dp[i-1][j-1]+1 + dp[i-1][j]
这样，通过i次操作和j个鸡蛋查找的层数范围是 [0, dp[i-1][j-1] + dp[i-1][j] + 1]，状态转移方程如下：

dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j] + 1

当 dp[i][K] 正好大于等于N的时候，i就是我们要求的最小操作次数了

在鸡蛋数足够的前提下
用1次操作，可以测出的临界点如下 0, 1
先在第1层扔鸡蛋

用2次操作，可以测出的临界点如下 0, 1, 2, 3
先在第2层扔鸡蛋，再在第1层，第3层扔鸡蛋

用3次操作，可以测出的临界点如下 0, 1, 2, 3, 4, 5, 6, 7
现在第4层扔鸡蛋，再在第2，6层扔鸡蛋，再在第1层，第3层，第5，7层扔鸡蛋

class Solution
{
public:
    int superEggDrop(int K, int N)
    {
        vector<int> dp(K + 1);
        int m = 0;
        while (dp[K] < N)
        {
            ++m;
            vector<int> temp(K + 1);
            for (int j = 1; j <= K; ++j)
            {
                temp[j] = dp[j - 1] + dp[j] + 1;
            }
            swap(dp, temp);
        }
        return m;
    }
};


// Source https://leetcode.com/problems/fair-candy-swap/

Alice and Bob have a different total number of candies. You are given two integer arrays aliceSizes and bobSizes 
where aliceSizes[i] is the number of candies of the ith box of candy that Alice has and bobSizes[j] is the number of candies of the jth box of candy that Bob has.

Since they are friends, they would like to exchange one candy box each so that after the exchange, they both have the same total amount of candy. 
The total amount of candy a person has is the sum of the number of candies in each box they have.

Return an integer array answer where answer[0] is the number of candies in the box that Alice must exchange, and answer[1] is the number of candies in the box that Bob must exchange. 
If there are multiple answers, you may return any one of them. It is guaranteed that at least one answer exists.

 

Example 1:

Input: aliceSizes = [1,1], bobSizes = [2,2]
Output: [1,2]
Example 2:

Input: aliceSizes = [1,2], bobSizes = [2,3]
Output: [1,2]
Example 3:

Input: aliceSizes = [2], bobSizes = [1,3]
Output: [2,3]
 

Constraints:

1 <= aliceSizes.length, bobSizes.length <= 104
1 <= aliceSizes[i], bobSizes[j] <= 105
Alice and Bob have a different total number of candies.
There will be at least one valid answer for the given input.

class Solution
{
public:
    vector<int> fairCandySwap(vector<int> &A, vector<int> &B)
    {
        int diff = (accumulate(A.begin(), A.end(), 0) - accumulate(B.begin(), B.end(), 0)) / 2;
        unordered_set<int> st(A.begin(), A.end());
        for (int num : B)
        {
            if (st.count(num + diff)) return {num + diff, num};
        }
        return {};
    }
};


// Source https://leetcode.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal/

Given two integer arrays, preorder and postorder where preorder is the preorder traversal of a binary tree of distinct values 
and postorder is the postorder traversal of the same tree, reconstruct and return the binary tree.

If there exist multiple answers, you can return any of them.

 

Example 1:


Input: preorder = [1,2,4,5,3,6,7], postorder = [4,5,2,6,7,3,1]
Output: [1,2,3,4,5,6,7]
Example 2:

Input: preorder = [1], postorder = [1]
Output: [1]
 

Constraints:

1 <= preorder.length <= 30
1 <= preorder[i] <= preorder.length
All the values of preorder are unique.
postorder.length == preorder.length
1 <= postorder[i] <= postorder.length
All the values of postorder are unique.
It is guaranteed that preorder and postorder are the preorder traversal and postorder traversal of the same binary tree.

先序和后序的各个区间表示如下：

preorder -> [root] [left subtree] [right subtree]
postorder -> [left subtree] [right substree] [root]

具体到题目中的例子就是：

preorder -> [1] [2,4,5] [3,6,7]
postorder -> [4,5,2] [6,7,3] [1]

class Solution
{
public:
    int n;
    unordered_map<int, int> m;

    TreeNode *helper(vector<int> &pre, int preL, int preR, vector<int> &post, int postL, int postR)
    {
        if (preL > preR || postL > postR) return nullptr;
        TreeNode *node = new TreeNode(pre[preL]);
        if (preL == preR) return node;
        int idx = m[pre[preL + 1]], len = (idx - postL) + 1;
        node->left = helper(pre, preL + 1, preL + len, post, postL, idx);
        node->right = helper(pre, preL + 1 + len, preR, post, idx + 1, postR - 1);
        return node;
    }

    TreeNode *constructFromPrePost(vector<int> &pre, vector<int> &post)
    {
        n = post.size();
        for (int i = 0; i < n; ++i) m[post[i]] = i;
        return helper(pre, 0, n - 1, post, 0, n - 1);
    }
};


// Source https://leetcode.com/problems/find-and-replace-pattern/

Given a list of strings words and a string pattern, return a list of words[i] that match pattern. You may return the answer in any order.

A word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p(x), we get the desired word.

Recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.

 

Example 1:

Input: words = ["abc","deq","mee","aqq","dkd","ccc"], pattern = "abb"
Output: ["mee","aqq"]
Explanation: "mee" matches the pattern because there is a permutation {a -> m, b -> e, ...}. 
"ccc" does not match the pattern because {a -> c, b -> c, ...} is not a permutation, since a and b map to the same letter.
Example 2:

Input: words = ["a","b","c"], pattern = "a"
Output: ["a","b","c"]
 

Constraints:

1 <= pattern.length <= 20
1 <= words.length <= 50
words[i].length == pattern.length
pattern and words[i] are lowercase English letters.

class Solution
{
public:
    bool check(string &word, string &pattern)
    {
        unordered_map<char, char> w2p, p2w;
        int n = word.size();
        for (int i = 0; i < n; ++i)
        {
            if (w2p.count(word[i]) && w2p[word[i]] != pattern[i]) return false;
            w2p[word[i]] = pattern[i];
            if (p2w.count(pattern[i]) && p2w[pattern[i]] != word[i]) return false;
            p2w[pattern[i]] = word[i];
        }
        return true;
    }

    vector<string> findAndReplacePattern(vector<string> &words, string pattern)
    {
        vector<string> res;
        for (string &word : words)
        {
            if (check(word, pattern)) res.push_back(word);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/sum-of-subsequence-widths/

The width of a sequence is the difference between the maximum and minimum elements in the sequence.

Given an array of integers nums, return the sum of the widths of all the non-empty subsequences of nums. Since the answer may be very large, return it modulo 109 + 7.

A subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. 
For example, [3,6,2,7] is a subsequence of the array [0,3,1,6,2,2,7].

 

Example 1:

Input: nums = [2,1,3]
Output: 6
Explanation: The subsequences are [1], [2], [3], [2,1], [2,3], [1,3], [2,1,3].
The corresponding widths are 0, 0, 0, 1, 1, 2, 2.
The sum of these widths is 6.
Example 2:

Input: nums = [2]
Output: 0
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 105

一个长度为n的数组，共有多少个子序列，如果算上空集的话，共有 2^n 个。那么在给数组排序之后，对于其中任意一个数字 A[i]，其前面共有i个数是小于等于 A[i] 的，这i个数字共有 2^i 个子序列，
它们加上 A[i] 都可以组成一个新的非空子序列，并且 A[i] 是这里面最大的数字，那么在宽度计算的时候，就要加上 A[i] x (2^i)，同理，A[i] 后面还有 n-1-i 个数字是大于等于它的，后面可以形成 2^(n-1-i) 个子序列，
每个加上 A[i] 就都是一个新的非空子序列，同时 A[i] 是这些子序列中最小的一个，那么结果中就要减去 A[i] x (2 ^ (n-1-i))。对于每个数字都这么计算一下，就是最终要求的所有子序列的宽度之和了。
A[i] x (2^(n-1-i)) 转换为了 A[n-1-i] x 2^i，其实二者最终的累加和是相等的：
sum(A[i] * 2^(n-1-i)) = A[0]*2^(n-1) + A[1]*2^(n-2) + A[2]*2^(n-3) + ... + A[n-1]*2^0
sum(A[n-1-i] * 2^i) = A[n-1]*2^0 + A[n-2]*2^1 + ... + A[1]*2^(n-2) + A[0]*2^(n-1)
可以发现两个等式的值都是相等的，只不过顺序颠倒了一下

class Solution
{
public:
    int sumSubseqWidths(vector<int> &A)
    {
        sort(A.begin(), A.end());
        int n = A.size();
        long res = 0, M = 1e9 + 7, c = 1;
        for (int i = 0; i < n; ++i)
        {
            res = (res + A[i] * c - A[n - i - 1] * c) % M;
            c = (c << 1) % M;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/surface-area-of-3d-shapes/

You are given an n x n grid where you have placed some 1 x 1 x 1 cubes. Each value v = grid[i][j] represents a tower of v cubes placed on top of cell (i, j).

After placing these cubes, you have decided to glue any directly adjacent cubes to each other, forming several irregular 3D shapes.

Return the total surface area of the resulting shapes.

Note: The bottom face of each shape counts toward its surface area.

 

Example 1:


Input: grid = [[1,2],[3,4]]
Output: 34

6 + 10 + 14 + 18 - 1 * 2 - 1 * 2 - 2 * 2 - 3 * 2 = 48 - 14 = 34



Example 2:


Input: grid = [[1,1,1],[1,0,1],[1,1,1]]
Output: 32
Example 3:


Input: grid = [[2,2,2],[2,1,2],[2,2,2]]
Output: 46
 

Constraints:

n == grid.length == grid[i].length
1 <= n <= 50
0 <= grid[i][j] <= 50

每个小正方体的表面积是6，若在同一个位置累加两个，表面积就是10，三个累加到了一起就是14，其实是有规律的，n个小正方体累在一起，表面积是 4n+2。
6 * n - 2 * (n - 1) = 4 * n + 2
现在不仅仅是累加在一个小正方体上，而是在 nxn 的区间，累加出一个三维物体。

class Solution
{
public:
    int surfaceArea(vector<vector<int>> &grid)
    {
        int n = grid.size(), res = 0;
        for (int i = 0; i < n; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                if (grid[i][j] > 0) res += 4 * grid[i][j] + 2;
                if (i > 0) res -= min(grid[i][j], grid[i - 1][j]) * 2;
                if (j > 0) res -= min(grid[i][j], grid[i][j - 1]) * 2;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/groups-of-special-equivalent-strings/

You are given an array of strings of the same length words.

In one move, you can swap any two even indexed characters or any two odd indexed characters of a string words[i].

Two strings words[i] and words[j] are special-equivalent if after any number of moves, words[i] == words[j].

For example, words[i] = "zzxy" and words[j] = "xyzz" are special-equivalent because we may make the moves "zzxy" -> "xzzy" -> "xyzz".
A group of special-equivalent strings from words is a non-empty subset of words such that:

Every pair of strings in the group are special equivalent, and
The group is the largest size possible (i.e., there is not a string words[i] not in the group such that words[i] is special-equivalent to every string in the group).
Return the number of groups of special-equivalent strings from words.

 

Example 1:

Input: words = ["abcd","cdab","cbad","xyzz","zzxy","zzyx"]
Output: 3
Explanation: 
One group is ["abcd", "cdab", "cbad"], since they are all pairwise special equivalent, and none of the other strings is all pairwise special equivalent to these.
The other two groups are ["xyzz", "zzxy"] and ["zzyx"].
Note that in particular, "zzxy" is not special equivalent to "zzyx".
Example 2:

Input: words = ["abc","acb","bac","bca","cab","cba"]
Output: 3
 

Constraints:

1 <= words.length <= 1000
1 <= words[i].length <= 20
words[i] consist of lowercase English letters.
All the strings are of the same length.

class Solution
{
public:
    int numSpecialEquivGroups(vector<string> &A)
    {
        unordered_set<string> st;
        for (string &word : A)
        {
            string even, odd;
            for (int i = 0; i < word.size(); ++i)
            {
                if (i % 2 == 0) even += word[i];
                else odd += word[i];
            }
            sort(even.begin(), even.end());
            sort(odd.begin(), odd.end());
            st.insert(even + odd);
        }
        return st.size();
    }
};


// Source https://leetcode.com/problems/all-possible-full-binary-trees/

Given an integer n, return a list of all possible full binary trees with n nodes. Each node of each tree in the answer must have Node.val == 0.

Each element of the answer is the root node of one possible tree. You may return the final list of trees in any order.

A full binary tree is a binary tree where each node has exactly 0 or 2 children.

 

Example 1:


Input: n = 7
Output: [[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]
Example 2:

Input: n = 3
Output: [[0,0,0]]
 

Constraints:

1 <= n <= 20

满二叉树每个结点一定会有0个或2两个子结点，满二叉树的结点总数都是奇数，所以只要当N为偶数的时候，一定返回的是空数组。
当N是奇数时，如何生成不同的满二叉树。先从最简单的开始，当 N=1 时，就只有一个根结点，当 N=3 时，也只有一种情况，根结点和左右子结点，当 N=5 时，就有如下两种情况：
    0
   / \
  0   0
 / \
0   0


    0
   / \
  0   0
     / \
    0   0
我们可以看出来就是在 N=3 的情况下再多加两个结点，这两个结点可以都在左子结点下，或者都在右子结点下。
当 N=7 的时候，我们可以把多余出来的两个结点分别加到上面两棵树的任意一个叶结点下方，有5种，
其中有两种情况是重合的，即在第一棵树的最右叶结点下添加，跟在第二棵树的最左叶结点下添加后得到的完全二叉树是一样的，所以总共只有5种组合。

N个结点，除去根结点，左右子树一共N-1 个结点，满二叉树的子树也是满二叉树，所以每个子树的结点总数是奇数，由于N是奇数，N-1 是偶数，把 N-1 这个偶数拆分成任意两个奇数之和，
比如p和q，满足 p+q = N-1，且p，q均为奇数，然后对其分别对p和q调用递归函数，得到两个数组，数组里面的就是所有可能情况的左右子树的根结点。
之后要做的就是从这两个数组中任意取两个结点，加到一个新建的 cur 结点的左右子结点上，然后将 cur 结点存入结果 res 中。

class Solution
{
public:
    unordered_map<int, vector<TreeNode *>> m;

    vector<TreeNode *> allPossibleFBT(int N)
    {
        if (N % 2 == 0) return {};
        if (N == 1) return {new TreeNode(0)};
        if (m.count(N)) return m[N];
        vector<TreeNode *> res;
        for (int i = 1; i < N; i += 2)
        {
            vector<TreeNode *> left = allPossibleFBT(i), right = allPossibleFBT(N - i - 1);
            for (auto a : left)
            {
                for (auto b : right)
                {
                    TreeNode *cur = new TreeNode(0);
                    cur->left = a;
                    cur->right = b;
                    res.push_back(cur);
                }
            }
        }
        return m[N] = res;
    }
};


// Source https://leetcode.com/problems/maximum-frequency-stack/

Design a stack-like data structure to push elements to the stack and pop the most frequent element from the stack.

Implement the FreqStack class:

FreqStack() constructs an empty frequency stack.
void push(int val) pushes an integer val onto the top of the stack.
int pop() removes and returns the most frequent element in the stack.
If there is a tie for the most frequent element, the element closest to the stack's top is removed and returned.
 

Example 1:

Input
["FreqStack", "push", "push", "push", "push", "push", "push", "pop", "pop", "pop", "pop"]
[[], [5], [7], [5], [7], [4], [5], [], [], [], []]
Output
[null, null, null, null, null, null, null, 5, 7, 5, 4]

Explanation
FreqStack freqStack = new FreqStack();
freqStack.push(5); // The stack is [5]
freqStack.push(7); // The stack is [5,7]
freqStack.push(5); // The stack is [5,7,5]
freqStack.push(7); // The stack is [5,7,5,7]
freqStack.push(4); // The stack is [5,7,5,7,4]
freqStack.push(5); // The stack is [5,7,5,7,4,5]
freqStack.pop();   // return 5, as 5 is the most frequent. The stack becomes [5,7,5,7,4].
freqStack.pop();   // return 7, as 5 and 7 is the most frequent, but 7 is closest to the top. The stack becomes [5,7,5,4].
freqStack.pop();   // return 5, as 5 is the most frequent. The stack becomes [5,7,4].
freqStack.pop();   // return 4, as 4, 5 and 7 is the most frequent, but 4 is closest to the top. The stack becomes [5,7].
 

Constraints:

0 <= val <= 109
At most 2 * 104 calls will be made to push and pop.
It is guaranteed that there will be at least one element in the stack before calling pop.

class FreqStack
{
public:
    int pos;
    priority_queue<array<int, 3>> pq;
    unordered_map<int, int> mp;

    FreqStack()
    {
        pos = 1;
    }

    void push(int val)
    {
        mp[val]++;  //increasing the frequency of current element in map
        pq.push({mp[val], pos++, val});
    }

    int pop()
    {
        auto arr = pq.top();
        pq.pop();
        mp[arr[2]]--;  //decreasing the frequency of current element in map
        return arr[2];
    }
};

// Source https://leetcode.com/problems/monotonic-array/

An array is monotonic if it is either monotone increasing or monotone decreasing.

An array nums is monotone increasing if for all i <= j, nums[i] <= nums[j]. An array nums is monotone decreasing if for all i <= j, nums[i] >= nums[j].

Given an integer array nums, return true if the given array is monotonic, or false otherwise.

 

Example 1:

Input: nums = [1,2,2,3]
Output: true
Example 2:

Input: nums = [6,5,4,4]
Output: true
Example 3:

Input: nums = [1,3,2]
Output: false
 

Constraints:

1 <= nums.length <= 105
-105 <= nums[i] <= 105

class Solution
{
public:
    bool isMonotonic(vector<int> &A)
    {
        bool inc = true, dec = true;
        for (int i = 1; i < A.size(); ++i)
        {
            inc &= (A[i - 1] <= A[i]);
            dec &= (A[i - 1] >= A[i]);
            if (!inc && !dec) return false;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/increasing-order-search-tree/

Given the root of a binary search tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only one right child.

 

Example 1:


Input: root = [5,3,6,2,4,null,8,1,null,null,null,7,9]
Output: [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]
Example 2:


Input: root = [5,1,7]
Output: [1,null,5,null,7]
 

Constraints:

The number of nodes in the given tree will be in the range [1, 100].
0 <= Node.val <= 1000

class Solution
{
public:
    void inorder(vector<TreeNode *> &nodeVec, TreeNode*node)
    {
        if (!node) return;
        inorder(nodeVec, node->left);
        nodeVec.push_back(node);
        inorder(nodeVec, node->right);
    }

    TreeNode *increasingBST(TreeNode *root)
    {
        vector<TreeNode *> nodeVec;
        nodeVec.reserve(128);
        inorder(nodeVec, root);
        int n = nodeVec.size();
        for (int i = 0; i < n - 1; ++i)
        {
            nodeVec[i]->left = nullptr;
            nodeVec[i]->right = nodeVec[i + 1];
        }
        nodeVec[n - 1]->left = nullptr;
        nodeVec[n - 1]->right = nullptr;
        return nodeVec[0];
    }
};


// Source https://leetcode.com/problems/bitwise-ors-of-subarrays/

We have an array arr of non-negative integers.

For every (contiguous) subarray sub = [arr[i], arr[i + 1], ..., arr[j]] (with i <= j), we take the bitwise OR of all the elements in sub, obtaining a result arr[i] | arr[i + 1] | ... | arr[j].

Return the number of possible results. Results that occur more than once are only counted once in the final answer

 

Example 1:

Input: arr = [0]
Output: 1
Explanation: There is only one possible result: 0.
Example 2:

Input: arr = [1,1,2]
Output: 3
Explanation: The possible subarrays are [1], [1], [2], [1, 1], [1, 2], [1, 1, 2].
These yield the results 1, 1, 2, 1, 3, 3.
There are 3 unique values, so the answer is 3.
Example 3:

Input: arr = [1,2,4]
Output: 6
Explanation: The possible results are 1, 2, 3, 4, 6, and 7.
 

Constraints:

1 <= nums.length <= 5 * 104
0 <= nums[i] <= 109

数组 [0, 3, 4, 6, 5]，写成二进制的就是 [000, 011, 100, 110, 101]，生成子数组的方法是在现有的集合都加入当前数字，并每次新加一个只有当前数字的集合，顺序如下：

[001]
[001 011] [011]
[001 011 100] [011 100] [100]
[001 011 100 110] [011 100 110] [100 110] [110]
[001 011 100 110 101] [011 100 110 101] [100 110 101] [110 101] [101]

对每个集合都计算总'或'值，可以得到：

001
011 011
111 111 100
111 111 110 110
111 111 111 111 101
对重复值只需要保留一个，实际上就可以变成：

001
011
111 100
111 110
111 101

class Solution
{
public:
    int subarrayBitwiseORs(vector<int> &arr)
    {
        unordered_set<int>res;
        for( int i = 0; i < arr.size(); ++i )
        {
            res.insert(arr[i]);
            for( int j = i - 1; j >= 0; --j )
            {
                // arr[j] 保存 the bitwise OR of all the elements in arr[j ... i - 1]
                if( (arr[i] | arr[j]) == arr[j] )
                    break;
                // arr[j] 保存 the bitwise OR of all the elements in arr[j ... i]
                arr[j] |= arr[i];
                res.insert(arr[j]);
            }
        }
        return res.size();
    }
};


// Source https://leetcode.com/problems/orderly-queue/

You are given a string s and an integer k. You can choose one of the first k letters of s and append it at the end of the string..

Return the lexicographically smallest string you could have after applying the mentioned step any number of moves.

 

Example 1:

Input: s = "cba", k = 1
Output: "acb"
Explanation: 
In the first move, we move the 1st character 'c' to the end, obtaining the string "bac".
In the second move, we move the 1st character 'b' to the end, obtaining the final result "acb".
Example 2:

Input: s = "baaca", k = 3
Output: "aaabc"
Explanation: 
In the first move, we move the 1st character 'b' to the end, obtaining the string "aacab".
In the second move, we move the 3rd character 'c' to the end, obtaining the final result "aaabc".
 

Constraints:

1 <= k <= s.length <= 1000
s consist of lowercase English letters.

一个只有小写字母的字符串，说是每次可以把前K个字母中的任意一个移动到末尾，让我们返回可以变换成的字母顺序最小的字符串。
若 K=1，我们可以都生成，然后比较出其中最小的那个返回即可。
若 K>1,   直接对S串进行排序即可。

S="53214", K=2：

5 3 2 1 4
3 2 1 4 5
2 1 4 5 3
2 4 5 3 1
4 5 3 1 2
5 3 1 2 4
3 1 2 4 5
3 2 4 5 1
3 4 5 1 2
4 5 1 2 3
5 1 2 3 4
1 2 3 4 5

S="871524", K = 2

8 7 1 5 2 4
8 1 5 2 4 7
1 5 2 4 7 8
5 2 4 7 8 1
5 4 7 8 1 2
5 7 8 1 2 4
7 8 1 2 4 5
8 1 2 4 5 7
1 2 4 5 7 8

S="78635219", K = 2

7 8 6 3 5 2 1 9
8 6 3 5 2 1 9 7
6 3 5 2 1 9 7 8
3 5 2 1 9 7 8 6
5 2 1 9 7 8 6 3
2 1 9 7 8 6 3 5
2 9 7 8 6 3 5 1
9 7 8 6 3 5 1 2
7 8 6 3 5 1 2 9
8 6 3 5 1 2 9 7
6 3 5 1 2 9 7 8
3 5 1 2 9 7 8 6
3 1 2 9 7 8 6 5
3 2 9 7 8 6 5 1
3 9 7 8 6 5 1 2
9 7 8 6 5 1 2 3
7 8 6 5 1 2 3 9
8 6 5 1 2 3 9 7
6 5 1 2 3 9 7 8
5 1 2 3 9 7 8 6
5 2 3 9 7 8 6 1
5 3 9 7 8 6 1 2
5 9 7 8 6 1 2 3
9 7 8 6 1 2 3 5
7 8 6 1 2 3 5 9
8 6 1 2 3 5 9 7
6 1 2 3 5 9 7 8
6 2 3 5 9 7 8 1
6 3 5 9 7 8 1 2
6 5 9 7 8 1 2 3
6 9 7 8 1 2 3 5
9 7 8 1 2 3 5 6
9 8 1 2 3 5 6 7
9 1 2 3 5 6 7 8
1 2 3 5 6 7 8 9

当 K=2时,   先把最小的数字移动到末尾，形成 xxxxx1 这种类型的，然后将第二小的数字移动到末尾，变成 xxxx12，
以此类推类推，可以将所有数字按顺序移动到末尾

如果 the first k letters 中有2个字符的顺序是大在前，小在后，此时，可以先把小的字符移动到末尾，再把大的字符移动到末尾，从而变成小在前，大在后

class Solution
{
public:
    string orderlyQueue(string S, int K)
    {
        if (K > 1)
        {
            sort(S.begin(), S.end());
            return S;
        }
        string res = S;
        for (int i = 1; i < S.size(); ++i)
        {
            res = min(res, S.substr(i) + S.substr(0, i));
        }
        return res;
    }
};


// Source https://leetcode.com/problems/rle-iterator/

We can use run-length encoding (i.e., RLE) to encode a sequence of integers. In a run-length encoded array of even length encoding (0-indexed), 
for all even i, encoding[i] tells us the number of times that the non-negative integer value encoding[i + 1] is repeated in the sequence.

For example, the sequence arr = [8,8,8,5,5] can be encoded to be encoding = [3,8,2,5]. encoding = [3,8,0,9,2,5] and encoding = [2,8,1,8,2,5] are also valid RLE of arr.
Given a run-length encoded array, design an iterator that iterates through it.

Implement the RLEIterator class:

RLEIterator(int[] encoded) Initializes the object with the encoded array encoded.
int next(int n) Exhausts the next n elements and returns the last element exhausted in this way. If there is no element left to exhaust, return -1 instead.
 

Example 1:

Input
["RLEIterator", "next", "next", "next", "next"]
[[[3, 8, 0, 9, 2, 5]], [2], [1], [1], [2]]
Output
[null, 8, 8, 5, -1]

Explanation
RLEIterator rLEIterator = new RLEIterator([3, 8, 0, 9, 2, 5]); // This maps to the sequence [8,8,8,5,5].
rLEIterator.next(2); // exhausts 2 terms of the sequence, returning 8. The remaining sequence is now [8, 5, 5].
rLEIterator.next(1); // exhausts 1 term of the sequence, returning 8. The remaining sequence is now [5, 5].
rLEIterator.next(1); // exhausts 1 term of the sequence, returning 5. The remaining sequence is now [5].
rLEIterator.next(2); // exhausts 2 terms, returning -1. This is because the first term exhausted was 5,
but the second term did not exist. Since the last term exhausted does not exist, we return -1.
 

Constraints:

2 <= encoding.length <= 1000
encoding.length is even.
0 <= encoding[i] <= 109
1 <= n <= 109
At most 1000 calls will be made to next.

class RLEIterator
{
public:
    int cur;
    vector<int> nums;

    RLEIterator(vector<int> &A): nums(A), cur(0) {}

    int next(int n)
    {
        while (cur < nums.size() && n > nums[cur])
        {
            n -= nums[cur];
            cur += 2;
        }
        if (cur >= nums.size()) return -1;
        nums[cur] -= n;
        return nums[cur + 1];
    }
};


// Source https://leetcode.com/problems/online-stock-span/

Design an algorithm that collects daily price quotes for some stock and returns the span of that stock's price for the current day.

The span of the stock's price today is defined as the maximum number of consecutive days (starting from today and going backward) 
for which the stock price was less than or equal to today's price.

For example, if the price of a stock over the next 7 days were [100,80,60,70,60,75,85], then the stock spans would be [1,1,1,2,1,4,6].
Implement the StockSpanner class:

StockSpanner() Initializes the object of the class.
int next(int price) Returns the span of the stock's price given that today's price is price.
 

Example 1:

Input
["StockSpanner", "next", "next", "next", "next", "next", "next", "next"]
[[], [100], [80], [60], [70], [60], [75], [85]]
Output
[null, 1, 1, 1, 2, 1, 4, 6]

Explanation
StockSpanner stockSpanner = new StockSpanner();
stockSpanner.next(100); // return 1
stockSpanner.next(80);  // return 1
stockSpanner.next(60);  // return 1
stockSpanner.next(70);  // return 2
stockSpanner.next(60);  // return 1
stockSpanner.next(75);  // return 4, because the last 4 prices (including today's price of 75) were less than or equal to today's price.
stockSpanner.next(85);  // return 6
 

Constraints:

1 <= price <= 105
At most 104 calls will be made to next.

class StockSpanner
{
public:
    stack<pair<int, int>> st;

    StockSpanner() {}

    int next(int price)
    {
        int cnt = 1;
        while (!st.empty() && st.top().first <= price)
        {
            cnt += st.top().second;
            st.pop();
        }
        st.push({price, cnt});
        return cnt;
    }
};


// Source https://leetcode.com/problems/numbers-at-most-n-given-digit-set/

Given an array of digits which is sorted in non-decreasing order. You can write numbers using each digits[i] as many times as we want. 
For example, if digits = ['1','3','5'], we may write numbers such as '13', '551', and '1351315'.

Return the number of positive integers that can be generated that are less than or equal to a given integer n.

 

Example 1:

Input: digits = ["1","3","5","7"], n = 100
Output: 20
Explanation: 
The 20 numbers that can be written are:
1, 3, 5, 7, 11, 13, 15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77.
Example 2:

Input: digits = ["1","4","9"], n = 1000000000
Output: 29523
Explanation: 
We can write 3 one digit numbers, 9 two digit numbers, 27 three digit numbers,
81 four digit numbers, 243 five digit numbers, 729 six digit numbers,
2187 seven digit numbers, 6561 eight digit numbers, and 19683 nine digit numbers.
In total, this is 29523 integers that can be written using the digits array.
Example 3:

Input: digits = ["7"], n = 8
Output: 1
 

Constraints:

1 <= digits.length <= 9
digits[i].length == 1
digits[i] is a digit from '1' to '9'.
All the values in digits are unique.
digits is sorted in non-decreasing order.
1 <= n <= 109

假如 D={"1","3","5","7"}，N=365，我们可以很快的算出所有的两位数和一位数的组合情况总数 4^2 + 4 = 20 个。

对于N的百位数字3来说，D中的1小于N中的百位上的3，那么此时百位上固定为1，十位和个位上就可以是任意值了，即 1xx，共有 4^2 = 16 个。
对于N的百位数字3来说，D中的3等于N中的百位上的3，那么此时百位上固定为3，十位和个位的值还是不确定，此时就不能再继续遍历D中的数字了，因为之后的数字肯定大于3，但是我们可以继续尝试N的下一位。
对于N的十位数字6来说，D中的1小于N中的十位上的6，那么百位和十位分别固定为3和1，个位上就可以是任意值了，即 31x，共有 4 个。
对于N的十位数字6来说，D中的3小于N中的十位上的6，那么百位和十位分别固定为3和3，个位上就可以是任意值了，即 33x，共有 4 个。
对于N的十位数字6来说，D中的5小于N中的十位上的6，那么百位和十位分别固定为3和5，个位上就可以是任意值了，即 35x，共有 4 个。
对于N的十位数字6来说，D中的7大于N中的十位上的6，此时再也组不成小于N的数字了，直接返回最终的 20+16+4+4+4=48 个。

class Solution
{
public:
    int atMostNGivenDigitSet(vector<string> &D, int N)
    {
        string str = to_string(N);
        int res = 0, n = D.size(), len = str.size();
        for (int i = 1; i < len; ++i) res += pow(n, i);
        for (int i = 0; i < len; ++i)
        {
            bool hasSameNum = false;
            for (string &d : D)
            {
                if (d[0] < str[i]) res += pow(n, len - 1 - i);
                else if (d[0] == str[i]) { hasSameNum = true; break; }
            }
            if (!hasSameNum) return res;
        }
        return res + 1;
    }
};


// Source https://leetcode.com/problems/valid-permutations-for-di-sequence/

You are given a string s of length n where s[i] is either:

'D' means decreasing, or
'I' means increasing.
A permutation perm of n + 1 integers of all the integers in the range [0, n] is called a valid permutation if for all valid i:

If s[i] == 'D', then perm[i] > perm[i + 1], and
If s[i] == 'I', then perm[i] < perm[i + 1].
Return the number of valid permutations perm. Since the answer may be large, return it modulo 109 + 7.

 

Example 1:

Input: s = "DID"
Output: 5
Explanation: The 5 valid permutations of (0, 1, 2, 3) are:
(1, 0, 3, 2)
(2, 0, 3, 1)
(2, 1, 3, 0)
(3, 0, 2, 1)
(3, 1, 2, 0)
Example 2:

Input: s = "D"
Output: 1
 

Constraints:

n == s.length
1 <= n <= 200
s[i] is either 'I' or 'D'.

dp[i][j] 表示前i个数已经确定，当前要放第i + 1数，且它为剩余的n + 1 - i个数中的第j + 1小，the number of valid permutations

j + 1 <= n + 1 - i
j <= n - i

s = "DID", n = 3，all the integers in the range [0, 3]

dp[0][3] = 1  (3)
dp[0][2] = 1  (2)
dp[0][1] = 1  (1)
dp[0][0] = 1  (0)

dp[1][2] = dp[0][3] = 1  (32)
dp[1][1] = dp[0][3] + dp[0][2] = 2  (31, 21)
dp[1][0] = dp[0][3] + dp[0][2] + dp[0][1] = 3  (30, 20, 10)

dp[2][1] = dp[1][1] + dp[1][0] = 5  (312, 213, 302, 203, 103)
dp[2][0] = dp[1][0] = 3  (301, 201, 102)

dp[3][0] = dp[2][1] = 5 (3120, 2130, 3021, 2031, 1032)

if (S[i] == 'D')  dp[i+1][j] = sum(dp[i][k])    ( j < k <= n - i )
else                dp[i+1][j] = sum(dp[i][k])    ( 0 <= k <= j )

class Solution
{
public:
    int n;
    int dp[205][205];
    int M = 1e9 + 7;

    int numPermsDISequence(string S)
    {
        n = S.size();
        memset(dp, 0, sizeof(dp));
        for (int j = 0; j <= n; ++j) dp[0][j] = 1;
        for (int i = 1; i <= n; ++i)
        {
            if (S[i-1] == 'I')
            {
                int cur = 0;
                for (int j = 0; j <= n - i; ++j)
                {
                    cur = (cur + dp[i-1][j]) % M;
                    dp[i][j] = cur;
                }
            }
            else
            {
                int cur = 0;
                for (int j = n - i; j >= 0; --j)
                {
                    cur = (cur + dp[i - 1][j + 1]) % M;
                    dp[i][j] = cur;
                }
            }
        }
        return dp[n][0];
    }
};


// Source https://leetcode.com/problems/fruit-into-baskets/

You are visiting a farm that has a single row of fruit trees arranged from left to right. The trees are represented by an integer array fruits where fruits[i] is the type of fruit the ith tree produces.

You want to collect as much fruit as possible. However, the owner has some strict rules that you must follow:

You only have two baskets, and each basket can only hold a single type of fruit. There is no limit on the amount of fruit each basket can hold.
Starting from any tree of your choice, you must pick exactly one fruit from every tree (including the start tree) while moving to the right. The picked fruits must fit in one of your baskets.
Once you reach a tree with fruit that cannot fit in your baskets, you must stop.
Given the integer array fruits, return the maximum number of fruits you can pick.

 

Example 1:

Input: fruits = [1,2,1]
Output: 3
Explanation: We can pick from all 3 trees.
Example 2:

Input: fruits = [0,1,2,2]
Output: 3
Explanation: We can pick from trees [1,2,2].
If we had started at the first tree, we would only pick from trees [0,1].
Example 3:

Input: fruits = [1,2,3,2,2]
Output: 4
Explanation: We can pick from trees [2,3,2,2].
If we had started at the first tree, we would only pick from trees [1,2].
 

Constraints:

1 <= fruits.length <= 105
0 <= fruits[i] < fruits.length

有一排树，每棵树产的水果种类是 tree[i]，现在有两种操作，第一种是将当前树的水果加入果篮中，若不能加则停止；第二种是移动到下一个树，若没有下一棵树，则停止。
现在我们有两个果篮，可以从任意一个树的位置开始，但是必须按顺序执行操作一和二，问我们最多能收集多少个水果。
这道题的本质就是从任意位置开始，若最多只能收集两种水果，问最多能收集多少个水果，其实就是最多有两种不同字符的最长子串的长度。

class Solution
{
public:
    int totalFruit(vector<int> &tree)
    {
        int res = 0, start = 0, n = tree.size();
        unordered_map<int, int> fruitCnt;
        for (int i = 0; i < n; ++i)
        {
            ++fruitCnt[tree[i]];
            while (fruitCnt.size() > 2)
            {
                if (--fruitCnt[tree[start]] == 0)
                {
                    fruitCnt.erase(tree[start]);
                }
                ++start;
            }
            res = max(res, i - start + 1);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/sort-array-by-parity/

Given an integer array nums, move all the even integers at the beginning of the array followed by all the odd integers.

Return any array that satisfies this condition.

 

Example 1:

Input: nums = [3,1,2,4]
Output: [2,4,3,1]
Explanation: The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.
Example 2:

Input: nums = [0]
Output: [0]
 

Constraints:

1 <= nums.length <= 5000
0 <= nums[i] <= 5000

class Solution
{
public:
    vector<int> sortArrayByParity(vector<int> &A)
    {
        partition(A.begin(), A.end(), [](auto a)
        {
            return a % 2 == 0;
        });
        return A;
    }
};


// Source https://leetcode.com/problems/super-palindromes/

Let's say a positive integer is a super-palindrome if it is a palindrome, and it is also the square of a palindrome.

Given two positive integers left and right represented as strings, return the number of super-palindromes integers in the inclusive range [left, right].

 

Example 1:

Input: left = "4", right = "1000"
Output: 4
Explanation: 4, 9, 121, and 484 are superpalindromes.
Note that 676 is not a superpalindrome: 26 * 26 = 676, but 26 is not a palindrome.
Example 2:

Input: left = "1", right = "2"
Output: 1
 

Constraints:

1 <= left.length, right.length <= 18
left and right consist of only digits.
left and right cannot have leading zeros.
left and right represent integers in the range [1, 1018 - 1].
left is less than or equal to right.

class Solution
{
public:
    bool isPalindrome(const string &str)
    {
        int left = 0, right = (int)str.size() - 1;
        while (left < right)
        {
            if (str[left++] != str[right--]) return false;
        }
        return true;
    }

    void helper(string cur, long left, long right, int &res)
    {
        if (cur.size() > 9) return;
        if (!cur.empty() && cur[0] != '0')
        {
            long num = stol(cur);
            num *= num;
            if (num > right) return;
            if (num >= left && isPalindrome(to_string(num))) ++res;
        }
        for (char c = '0'; c <= '9'; ++c)
        {
            helper(string(1, c) + cur + string(1, c), left, right, res);
        }
    }

    int superpalindromesInRange(string L, string R)
    {
        int res = 0;
        long left = stol(L), right = stol(R);
        helper("", left, right, res);
        for (char c = '0'; c <= '9'; ++c)
        {
            helper(string(1, c), left, right, res);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/sum-of-subarray-minimums/

Given an array of integers arr, find the sum of min(b), where b ranges over every (contiguous) subarray of arr. Since the answer may be large, return the answer modulo 109 + 7.

 

Example 1:

Input: arr = [3,1,2,4]
Output: 17
Explanation: 
Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. 
Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.
Sum is 17.
Example 2:

Input: arr = [11,81,94,43,3]
Output: 444
 

Constraints:

1 <= arr.length <= 3 * 104
1 <= arr[i] <= 3 * 104

c1 = c2 = c3
d1 = d2 = d3 > c1
b1 = b2 = b3 > c1
a1 = a2 < c1

a1 b1 b2 c1 d1 d2 d3 c2 c3 b3 a2
小 大 大       大  大  大          大  小

left_smaller[j] = i 表示 从j向左，一直到arr[i] 才小于arr[j]
right_smaller[j] = i 表示 从j向右，一直到arr[i] 才小于等于arr[j]

right_smaller[c3] = a2，left_smaller[c3] = a1
right_smaller[c2] = c3，left_smaller[c2] = a1

一定包含c3的子数组，右边界大于等于c3且小于a2，左边界小于等于c3且大于a1，对应arr3
一定包含c2且不包含c3的子数组，右边界等于c2，左边界小于等于c2且大于a1，对应arr2
一定包含c1且不包含c3和c2的子数组，右边界大于等于c1且小于c2，左边界小于等于c1且大于a1，对应arr1

arr3中的子数组与arr2中的子数组没有重叠
arr3中的子数组与arr1中的子数组没有重叠
arr2中的子数组与arr1中的子数组没有重叠

class Solution
{
public:
    int mod = 1e9 + 7;

    int sumSubarrayMins(vector<int> &arr)
    {
        int n = arr.size();
        if(n == 1) return arr[0];
        int left_smaller[n], right_smaller[n];
        stack<int> st;
        st.push(0);
        for(int i = 1; i < n; i++)
        {
            if(arr[i] <= arr[st.top()])
            {
                while(!st.empty() && arr[i] <= arr[st.top()])
                {
                    right_smaller[st.top()] = i;
                    st.pop();
                }
            }
            st.push(i);
        }

        while(!st.empty())
        {
            right_smaller[st.top()] = n;
            st.pop();
        }

        st.push(n - 1);
        for(int i = n - 2; i >= 0; i--)
        {
            if(arr[i] < arr[st.top()])
            {
                while(!st.empty() && arr[i] < arr[st.top()])
                {
                    left_smaller[st.top()] = i;
                    st.pop();
                }
            }
            st.push(i);
        }

        while(!st.empty())
        {
            left_smaller[st.top()] = -1;
            st.pop();
        }

        long ans = 0;
        for(int i = 0 ; i < n; i++)
        {
            ans = (ans + (long)(i - left_smaller[i]) * (right_smaller[i] - i) * arr[i]) % mod;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/smallest-range-i/

You are given an integer array nums and an integer k.

In one operation, you can choose any index i where 0 <= i < nums.length and change nums[i] to nums[i] + x where x is an integer from the range [-k, k]. 
You can apply this operation at most once for each index i.

The score of nums is the difference between the maximum and minimum elements in nums.

Return the minimum score of nums after applying the mentioned operation at most once for each index in it.

 

Example 1:

Input: nums = [1], k = 0
Output: 0
Explanation: The score is max(nums) - min(nums) = 1 - 1 = 0.
Example 2:

Input: nums = [0,10], k = 2
Output: 6
Explanation: Change nums to be [2, 8]. The score is max(nums) - min(nums) = 8 - 2 = 6.
Example 3:

Input: nums = [1,3,6], k = 3
Output: 0
Explanation: Change nums to be [4, 4, 4]. The score is max(nums) - min(nums) = 4 - 4 = 0.
 

Constraints:

1 <= nums.length <= 104
0 <= nums[i] <= 104
0 <= k <= 104

class Solution
{
public:
    int smallestRangeI(vector<int> &A, int K)
    {
        int mx = A[0], mn = A[0];
        for (int num : A)
        {
            mx = max(mx, num);
            mn = min(mn, num);
        }
        return max(0, mx - mn - 2 * K);
    }
};


// Source https://leetcode.com/problems/snakes-and-ladders/

You are given an n x n integer matrix board where the cells are labeled from 1 to n^2 in a Boustrophedon style starting from the bottom left of the board 
(i.e. board[n - 1][0]) and alternating direction each row.

36	35	34	33	32	31
25	26	27	28	29	30
24	23	22	21	20	19
13	14	15	16	17	18
12	11	10	9	8	7
1	2	3	4	5	6

You start on square 1 of the board. In each move, starting from square curr, do the following:

Choose a destination square next with a label in the range [curr + 1, min(curr + 6, n^2)].
This choice simulates the result of a standard 6-sided die roll: i.e., there are always at most 6 destinations, regardless of the size of the board.
If next has a snake or ladder, you must move to the destination of that snake or ladder. Otherwise, you move to next.
The game ends when you reach the square n2.
A board square on row r and column c has a snake or ladder if board[r][c] != -1. The destination of that snake or ladder is board[r][c]. Squares 1 and n^2 do not have a snake or ladder.

Note that you only take a snake or ladder at most once per move. If the destination to a snake or ladder is the start of another snake or ladder, you do not follow the subsequent snake or ladder.

For example, suppose the board is [[-1,4],[-1,3]], and on the first move, your destination square is 2. You follow the ladder to square 3, but do not follow the subsequent ladder to 4.
Return the least number of moves required to reach the square n^2. If it is not possible to reach the square, return -1.

 

Example 1:


Input: board = [[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,35,-1,-1,13,-1],[-1,-1,-1,-1,-1,-1],[-1,15,-1,-1,-1,-1]]
Output: 4
Explanation: 
In the beginning, you start at square 1 (at row 5, column 0).
You decide to move to square 2 and must take the ladder to square 15.
You then decide to move to square 17 and must take the snake to square 13.
You then decide to move to square 14 and must take the ladder to square 35.
You then decide to move to square 36, ending the game.
This is the lowest possible number of moves to reach the last square, so return 4.
Example 2:

Input: board = [[-1,-1],[-1,3]]
Output: 1
 

Constraints:

n == board.length == board[i].length
2 <= n <= 20
grid[i][j] is either -1 or in the range [1, n2].
The squares labeled 1 and n2 do not have any ladders or snakes.

class Solution
{
public:
    int n;

    int getBoardValue(vector<vector<int>> &board, int num)
    {
        int x = (num - 1) / n, y = (num - 1) % n;
        if (x % 2 == 1) y = n - 1 - y;
        x = n - 1 - x;
        return board[x][y];
    }

    int snakesAndLadders(vector<vector<int>> &board)
    {
        n = board.size();
        queue<int> q;
        vector<bool> visited(n * n + 1);
        q.push(1);
        visited[1] = true;
        int res = 0;
        int target = n * n;
        while (!q.empty())
        {
            int sz = q.size();
            for (int k = 0; k < sz; ++k)
            {
                int num = q.front();
                q.pop();
                if (num == target) return res;
                for (int i = 1; i <= 6 && num + i <= n * n; ++i)
                {
                    int next = getBoardValue(board, num + i);
                    if (next == -1) next = num + i;
                    if (visited[next]) continue;
                    q.push(next);
                    visited[next] = true;
                }
            }
            ++res;
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/smallest-range-ii/

You are given an integer array nums and an integer k.

For each index i where 0 <= i < nums.length, change nums[i] to be either nums[i] + k or nums[i] - k.

The score of nums is the difference between the maximum and minimum elements in nums.

Return the minimum score of nums after changing the values at each index.

 

Example 1:

Input: nums = [1], k = 0
Output: 0
Explanation: The score is max(nums) - min(nums) = 1 - 1 = 0.
Example 2:

Input: nums = [0,10], k = 2
Output: 6
Explanation: Change nums to be [2, 8]. The score is max(nums) - min(nums) = 8 - 2 = 6.
Example 3:

Input: nums = [1,3,6], k = 3
Output: 3
Explanation: Change nums to be [4, 6, 3]. The score is max(nums) - min(nums) = 6 - 3 = 3.
 

Constraints:

1 <= nums.length <= 104
0 <= nums[i] <= 104
0 <= k <= 104

由于每个数字都需要加K或者减K，为了使得新数组的最大值最小值的差值最小，应该尽量使原数组中的较小的数字加K，较大的数字减K，所以最好是先给原数组排个序，
然后在数组的某个位置i为界限，将原数组分为两段，前面所有的数字都加K，后面所有的数字都减K。
则前半段 [0, i] 中的最大值是 A[i]+K，最小值是 A[0]+K，后半段 [i+1, n-1] 范围内的最大值是 A[n-1]-K，最小值是 A[i+1]-K，
所以整个数组的最大值是 A[i]+K 和 A[n-1]-K 中的较大值，最小值是 A[0]+K 和 A[i+1]-K 中的较小值，二者做差就是可能的结果了，遍历所有的i，用每次计算出的差值来更新结果 res 即可

class Solution
{
public:
    int smallestRangeII(vector<int> &A, int K)
    {
        int n = A.size();
        if (n == 1) return 0;
        sort(A.begin(), A.end());
        int res = A[n-1] - A[0]; // 全部加K，或全部减K
        int left = A[0] + K, right =  A[n - 1] - K;
        for (int i = 0; i < n - 1; ++i)
        {
            int high = max(right, A[i] + K);
            int low = min(left, A[i + 1] - K);
            res = min(res, high - low);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/online-election/

You are given two integer arrays persons and times. In an election, the ith vote was cast for persons[i] at time times[i].

For each query at a time t, find the person that was leading the election at time t. Votes cast at time t will count towards our query. 
In the case of a tie, the most recent vote (among tied candidates) wins.

Implement the TopVotedCandidate class:

TopVotedCandidate(int[] persons, int[] times) Initializes the object with the persons and times arrays.
int q(int t) Returns the number of the person that was leading the election at time t according to the mentioned rules.
 

Example 1:

Input
["TopVotedCandidate", "q", "q", "q", "q", "q", "q"]
[[[0, 1, 1, 0, 0, 1, 0], [0, 5, 10, 15, 20, 25, 30]], [3], [12], [25], [15], [24], [8]]
Output
[null, 0, 1, 1, 0, 0, 1]

Explanation
TopVotedCandidate topVotedCandidate = new TopVotedCandidate([0, 1, 1, 0, 0, 1, 0], [0, 5, 10, 15, 20, 25, 30]);
topVotedCandidate.q(3); // return 0, At time 3, the votes are [0], and 0 is leading.
topVotedCandidate.q(12); // return 1, At time 12, the votes are [0,1,1], and 1 is leading.
topVotedCandidate.q(25); // return 1, At time 25, the votes are [0,1,1,0,0,1], and 1 is leading (as ties go to the most recent vote.)
topVotedCandidate.q(15); // return 0
topVotedCandidate.q(24); // return 0
topVotedCandidate.q(8); // return 1

 

Constraints:

1 <= persons.length <= 5000
times.length == persons.length
0 <= persons[i] < persons.length
0 <= times[i] <= 109
times is sorted in a strictly increasing order.
times[0] <= t <= 109
At most 104 calls will be made to q.

class TopVotedCandidate
{
public:
    vector<int> leader;
    vector<int> times;

    TopVotedCandidate(vector<int> &persons, vector<int> &times)
    {
        int n = persons.size();
        vector<int> count(n);
        this->times = times;
        this->leader.resize(n, 0);
        int lead = 0;
        for (int i = 0; i < n; ++i)
        {
            if (++count[persons[i]] >= count[lead])
            {
                lead = persons[i];
            }
            leader[i] = lead;
        }
    }

    int q(int t)
    {
        auto itr = upper_bound(times.begin(), times.end(), t);
        --itr;
        auto idx = itr - times.begin();
        return leader[idx];
    }
};


// Source https://leetcode.com/problems/sort-an-array/

Given an array of integers nums, sort the array in ascending order.

 

Example 1:

Input: nums = [5,2,3,1]
Output: [1,2,3,5]
Example 2:

Input: nums = [5,1,1,2,0,0]
Output: [0,0,1,1,2,5]
 

Constraints:

1 <= nums.length <= 5 * 104
-5 * 104 <= nums[i] <= 5 * 104

class Solution
{
public:
    vector<int> sortArray(vector<int> &nums)
    {
        sort(nums.begin(), nums.end());
        return nums;
    }
};

class Solution
{
public:
    template<typename Iterator, typename CompareType = std::less<typename std::iterator_traits<Iterator>::value_type>>
    void merge(const Iterator begin, const Iterator end, const Iterator middle, CompareType compare = CompareType())
    {
        typedef typename std::iterator_traits<Iterator>::value_type T;// 迭代器指向对象的值类型
        if(std::distance(begin, middle) <= 0 || std::distance(middle, end) <= 0) return;
        std::vector<T> result(std::distance(begin, end)); //暂存结果
        auto current = result.begin();
        auto left_current = begin; //左侧序列当前比较位置
        auto right_current = middle; //右序列当前比较位置
        while(left_current != middle && right_current != end)
        {
            if(compare(*left_current, *right_current))
            {
                *current++ = *left_current++; //左侧较小
            }
            else
            {
                *current++ = *right_current++; //左侧较小
            }
        }
        if(left_current == middle && right_current != end) //当左侧序列为搬空
        {
            std::copy(right_current, end, current);
        }
        if(right_current == end && left_current != middle) //当右侧序列搬空
        {
            std::copy(left_current, middle, current);
        }
        std::copy(result.begin(), result.end(), begin); //复制回原序列，因此是非原地的
    }

    template<typename Iterator, typename CompareType = std::less<typename std::iterator_traits<Iterator>::value_type>>
    void merge_sort(const Iterator begin, const Iterator end, CompareType compare = CompareType())
    {
        auto size = std::distance(begin, end);
        if(size > 1)
        {
            Iterator middle = begin + size / 2;
            merge_sort(begin, middle, compare);
            merge_sort(middle, end, compare);
            merge(begin, end, middle, compare);
        }
    }
    vector<int> sortArray(vector<int> &nums)
    {
        merge_sort(nums.begin(), nums.end());
        return nums;
    }
};


// Source https://leetcode.com/problems/cat-and-mouse/

A game on an undirected graph is played by two players, Mouse and Cat, who alternate turns.

The graph is given as follows: graph[a] is a list of all nodes b such that ab is an edge of the graph.

The mouse starts at node 1 and goes first, the cat starts at node 2 and goes second, and there is a hole at node 0.

During each player's turn, they must travel along one edge of the graph that meets where they are.  For example, if the Mouse is at node 1, it must travel to any node in graph[1].

Additionally, it is not allowed for the Cat to travel to the Hole (node 0.)

Then, the game can end in three ways:

If ever the Cat occupies the same node as the Mouse, the Cat wins.
If ever the Mouse reaches the Hole, the Mouse wins.
If ever a position is repeated (i.e., the players are in the same position as a previous turn, and it is the same player's turn to move), the game is a draw.
Given a graph, and assuming both players play optimally, return

1 if the mouse wins the game,
2 if the cat wins the game, or
0 if the game is a draw.
 

Example 1:


Input: graph = [[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]
Output: 0
Example 2:


Input: graph = [[1,3],[0],[3],[0,2]]
Output: 1
 

Constraints:

3 <= graph.length <= 50
1 <= graph[i].length < graph.length
0 <= graph[i][j] < graph.length
graph[i][j] != i
graph[i] is unique.
The mouse and the cat can always move. 

If ever a position is repeated (i.e., the players are in the same position as a previous turn, and it is the same player's turn to move), the game is a draw.

class Solution
{
public:
    int n;
    int limit;
    int dp[55][55][200];

    int dfs(vector<vector<int>> &graph, int catpos, int mousepos, int moves)
    {
        if(mousepos == 0)
            return 1;
        if(catpos == mousepos)
            return 2;
        if(moves > limit)
            return 0;
        if (dp[catpos][mousepos][moves] != -1) return dp[catpos][mousepos][moves];
        if(moves % 2) //mouse turn
        {
            int winner = -1;
            bool canMouseWin = false;
            bool canDrawHappen = false;
            for(auto pos : graph[mousepos])
            {
                winner = dfs(graph, catpos, pos, moves + 1);
                if(winner == 1)
                {
                    canMouseWin = true;
                    break;
                }
                else if(winner == 0)
                    canDrawHappen = true;
            }
            if(canMouseWin)
                dp[catpos][mousepos][moves] = 1;
            else if(canDrawHappen)
                dp[catpos][mousepos][moves] = 0;
            else
                dp[catpos][mousepos][moves] = 2;
        }
        else//cat turn
        {
            int winner = -1;
            bool canCatWin = false;
            bool canDrawHappen = false;
            for(auto pos : graph[catpos])
            {
                if(pos == 0)
                    continue;
                winner = dfs(graph, pos, mousepos, moves + 1);
                if(winner == 2)
                {
                    canCatWin = true;
                    break;
                }
                else if(winner == 0)
                    canDrawHappen = true;
            }
            if(canCatWin)
                dp[catpos][mousepos][moves] = 2;
            else if(canDrawHappen)
                dp[catpos][mousepos][moves] = 0;
            else
                dp[catpos][mousepos][moves] = 1;
        }
        return dp[catpos][mousepos][moves];
    }

    int catMouseGame(vector<vector<int>> &graph)
    {
        n = graph.size();
        limit = 3 * n;
        memset(dp, -1, sizeof(dp));
        return dfs(graph, 2, 1, 1);
    }
};


自顶向下的动态规划由于判定平局的标准和轮数有关，因此时间复杂度较高。为了降低时间复杂度，需要使用自底向上的方法实现，消除结果和轮数之间的关系。

使用自底向上的方法实现时，游戏中的状态由老鼠的位置、猫的位置和轮到移动的一方三个因素确定。初始时，只有边界情况的胜负结果已知，其余所有状态的结果都初始化为平局。
边界情况为直接确定胜负的情况，包括两类情况：老鼠躲入洞里，无论猫位于哪个结点，都是老鼠获胜；猫和老鼠占据相同的节点，无论占据哪个结点，都是猫获胜。

从边界情况出发遍历其他情况。对于当前状态，可以得到老鼠的位置、猫的位置和轮到移动的一方，根据当前状态可知上一轮的所有可能状态，其中上一轮的移动方和当前的移动方相反，
上一轮的移动方在上一轮状态和当前状态所在的节点不同。假设当前状态是老鼠所在节点是 mouse，猫所在节点是 cat，则根据当前的移动方，可以得到上一轮的所有可能状态：

如果当前的移动方是老鼠，则上一轮的移动方是猫，上一轮状态中老鼠所在节点是 mouse，猫所在节点可能是 graph[cat] 中的任意一个节点（除了节点 0）；

如果当前的移动方是猫，则上一轮的移动方是老鼠，上一轮状态中老鼠所在节点可能是 graph[mouse] 中的任意一个节点，猫所在节点是 cat。

对于上一轮的每一种可能的状态，如果该状态的结果已知不是平局，则不需要重复计算该状态的结果，只有对结果是平局的状态，才需要计算该状态的结果。
对于上一轮的移动方，只有当可以确定上一轮状态是必胜状态或者必败状态时，才更新上一轮状态的结果。

如果上一轮的移动方和当前状态的结果的获胜方相同，上一轮状态更新为上一轮的移动方的必胜状态。

如果上一轮的移动方和当前状态的结果的获胜方不同，则上一轮的移动方需要尝试其他可能的移动，可能有以下三种情况：

如果存在一种移动可以到达上一轮的移动方的必胜状态，则上一轮状态更新为上一轮的移动方的必胜状态；

如果所有的移动都到达上一轮的移动方的必败状态，则上一轮状态更新为为上一轮的移动方的必败状态；

如果所有的移动都不能到达上一轮的移动方的必胜状态，但是存在一种移动可以到达上一轮的移动方的必和状态，则上一轮状态更新为为上一轮的移动方的必和状态。

其中，对于必败状态与必和状态的判断依据为上一轮的移动方可能的移动是都到达必败状态还是可以到达必和状态。为了实现必败状态与必和状态的判断，
需要记录每个状态的度，初始时每个状态的度为当前玩家在当前位置可以移动到的节点数。对于老鼠而言，初始的度为老鼠所在的节点的相邻节点数；
对于猫而言，初始的度为猫所在的节点的相邻且非节点 0 的节点数。

遍历过程中，从当前状态出发遍历上一轮的所有可能状态，如果上一轮状态的结果是平局且上一轮的移动方和当前状态的结果的获胜方不同，则将上一轮状态的度减 1。
如果上一轮状态的度减少到 0，则从上一轮状态出发到达的所有状态都是上一轮的移动方的必败状态，因此上一轮状态也是上一轮的移动方的必败状态。

在确定上一轮状态的结果（必胜或必败）之后，即可从上一轮状态出发，遍历其他结果是平局的状态。当没有更多的状态可以确定胜负结果时，遍历结束，此时即可得到初始状态的结果。

class Solution
{
public:
    int dp[2][55][55];
    int out_degree[2][55][55];
    int cat_degree[55];

    void recur(vector<vector<int>> &graph, int mouse, int cat, int turn, int result)
    {
        if (dp[turn][mouse][cat] != 0) return;
        dp[turn][mouse][cat] = result;
        if (turn) // 当前移动方为cat，上一轮移动方为mouse
        {
            turn = 0;
            for (int j : graph[mouse])
            {
                if (j == 0 || j == cat)
                {
                    continue;
                }
                if (result == 1)
                {
                    recur(graph, j, cat, turn, result);
                }
                else
                {
                    out_degree[turn][j][cat]++;
                    if (out_degree[turn][j][cat] == graph[j].size()) recur(graph, j, cat, turn, 2);
                }
            }
        }
        else  // 当前移动方为mouse，上一轮移动方为cat
        {
            turn = 1;
            for (int j : graph[cat])
            {
                if (j == 0 || j == mouse)
                {
                    continue;
                }
                if (result == 2)
                {
                    recur(graph, mouse, j, turn, result);
                }
                else
                {
                    out_degree[turn][mouse][j]++;
                    if (out_degree[turn][mouse][j] == cat_degree[j]) recur(graph, mouse, j, turn, 1);
                }
            }
        }
    }

    int catMouseGame(vector<vector<int>> &graph)
    {
        int n = graph.size();
        memset(dp, 0, sizeof(dp));
        memset(out_degree, 0, sizeof(out_degree));
        memset(cat_degree, 0, sizeof(cat_degree));

        for (int i = 1; i < n; ++i)
        {
            cat_degree[i] = graph[i].size();
        }
        for (int i : graph[0]) cat_degree[i]--;

        for (int i = 1; i < n; ++i)
        {
            recur(graph, 0, i, 1, 1);
            recur(graph, i, i, 0, 2);
            recur(graph, i, i, 1, 2);
        }
        return dp[0][1][2];
    }
};


// Source https://leetcode.com/problems/x-of-a-kind-in-a-deck-of-cards/

In a deck of cards, each card has an integer written on it.

Return true if and only if you can choose X >= 2 such that it is possible to split the entire deck into 1 or more groups of cards, where:

Each group has exactly X cards.
All the cards in each group have the same integer.
 

Example 1:

Input: deck = [1,2,3,4,4,3,2,1]
Output: true
Explanation: Possible partition [1,1],[2,2],[3,3],[4,4].
Example 2:

Input: deck = [1,1,1,2,2,2,3,3]
Output: false
Explanation: No possible partition.
 

Constraints:

1 <= deck.length <= 104
0 <= deck[i] < 104

class Solution
{
public:
    int gcd(int a, int b)
    {
        return b == 0 ? a : gcd(b, a % b);
    }

    bool hasGroupsSizeX(vector<int> &deck)
    {
        unordered_map<int, int> cardCnt;
        for (int card : deck) ++cardCnt[card];
        int res = 0;
        for (auto a : cardCnt)
        {
            if (a.second == 1) return false;
            res = gcd(res, a.second);
        }
        return res > 1;
    }
};


// Source https://leetcode.com/problems/partition-array-into-disjoint-intervals/

Given an integer array nums, partition it into two (contiguous) subarrays left and right so that:

Every element in left is less than or equal to every element in right.
left and right are non-empty.
left has the smallest possible size.
Return the length of left after such a partitioning.

Test cases are generated such that partitioning exists.

 

Example 1:

Input: nums = [5,0,3,8,6]
Output: 3
Explanation: left = [5,0,3], right = [8,6]
Example 2:

Input: nums = [1,1,1,0,6,12]
Output: 4
Explanation: left = [1,1,1,0], right = [6,12]
 

Constraints:

2 <= nums.length <= 105
0 <= nums[i] <= 106
There is at least one valid answer for the given input.

class Solution
{
public:
    int partitionDisjoint(vector<int> &A)
    {
        int n = A.size();
        vector<int> backMin(n);
        backMin[n-1] = A[n-1];
        for (int i = n - 2; i >= 0; --i)
        {
            backMin[i] = min(backMin[i + 1], A[i]);
        }
        int curMax = A[0];
        for (int i = 1; i < n; ++i)
        {
            if (curMax <= backMin[i]) return i;
            curMax = max(curMax, A[i]);
        }
        return 0;
    }
};


// Source https://leetcode.com/problems/word-subsets/

You are given two string arrays words1 and words2.

A string b is a subset of string a if every letter in b occurs in a including multiplicity.

For example, "wrr" is a subset of "warrior" but is not a subset of "world".
A string a from words1 is universal if for every string b in words2, b is a subset of a.

Return an array of all the universal strings in words1. You may return the answer in any order.

 

Example 1:

Input: words1 = ["amazon","apple","facebook","google","leetcode"], words2 = ["e","o"]
Output: ["facebook","google","leetcode"]
Example 2:

Input: words1 = ["amazon","apple","facebook","google","leetcode"], words2 = ["l","e"]
Output: ["apple","google","leetcode"]
 

Constraints:

1 <= words1.length, words2.length <= 104
1 <= words1[i].length, words2[i].length <= 10
words1[i] and words2[i] consist only of lowercase English letters.
All the strings of words1 are unique.

class Solution
{
public:
    vector<int> helper(string &word)
    {
        vector<int> res(26);
        for (char c : word) ++res[c - 'a'];
        return res;
    }

    vector<string> wordSubsets(vector<string> &A, vector<string> &B)
    {
        vector<int> charCnt(26);
        for (string &b : B)
        {
            vector<int> t = helper(b);
            for (int i = 0; i < 26; ++i)
            {
                charCnt[i] = max(charCnt[i], t[i]);
            }
        }
        vector<string> res;
        for (string &a : A)
        {
            vector<int> t = helper(a);
            int i = 0;
            for (; i < 26; ++i)
            {
                if (t[i] < charCnt[i]) break;
            }
            if (i == 26) res.push_back(a);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/reverse-only-letters/

Given a string s, reverse the string according to the following rules:

All the characters that are not English letters remain in the same position.
All the English letters (lowercase or uppercase) should be reversed.
Return s after reversing it.

 

Example 1:

Input: s = "ab-cd"
Output: "dc-ba"
Example 2:

Input: s = "a-bC-dEf-ghIj"
Output: "j-Ih-gfE-dCba"
Example 3:

Input: s = "Test1ng-Leet=code-Q!"
Output: "Qedo1ct-eeLg=ntse-T!"
 

Constraints:

1 <= s.length <= 100
s consists of characters with ASCII values in the range [33, 122].
s does not contain '\"' or '\\'.

class Solution
{
public:
    string reverseOnlyLetters(string S)
    {
        int n = S.size(), i = 0, j = n - 1;
        while (i < j)
        {
            if (!isalpha(S[i])) ++i;
            else if (!isalpha(S[j])) --j;
            else
            {
                swap(S[i], S[j]);
                ++i;
                --j;
            }
        }
        return S;
    }
};


// Source https://leetcode.com/problems/maximum-sum-circular-subarray/

Given a circular integer array nums of length n, return the maximum possible sum of a non-empty subarray of nums.

A circular array means the end of the array connects to the beginning of the array. Formally, the next element of nums[i] is nums[(i + 1) % n] 
and the previous element of nums[i] is nums[(i - 1 + n) % n].

A subarray may only include each element of the fixed buffer nums at most once. 
Formally, for a subarray nums[i], nums[i + 1], ..., nums[j], there does not exist i <= k1, k2 <= j with k1 % n == k2 % n.

 

Example 1:

Input: nums = [1,-2,3,-2]
Output: 3
Explanation: Subarray [3] has maximum sum 3.
Example 2:

Input: nums = [5,-3,5]
Output: 10
Explanation: Subarray [5,5] has maximum sum 5 + 5 = 10.
Example 3:

Input: nums = [-3,-2,-3]
Output: -2
Explanation: Subarray [-2] has maximum sum -2.
 

Constraints:

n == nums.length
1 <= n <= 3 * 104
-3 * 104 <= nums[i] <= 3 * 104

假如nums中的值全部小于等于0，那么和最小的子数组就是原数组本身，则sum - mn求出的差值是0

class Solution
{
public:
    int maxSubarraySumCircular(vector<int> &A)
    {
        int sum = 0, mn = INT_MAX, mx = INT_MIN, curMax = 0, curMin = 0;
        for (int num : A)
        {
            curMin = min(curMin + num, num);
            mn = min(mn, curMin);
            curMax = max(curMax + num, num);
            mx = max(mx, curMax);
            sum += num;
        }
        return (sum - mn == 0) ? mx : max(mx, sum - mn);
    }
};


// Source https://leetcode.com/problems/complete-binary-tree-inserter/

A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible.

Design an algorithm to insert a new node to a complete binary tree keeping it complete after the insertion.

Implement the CBTInserter class:

CBTInserter(TreeNode root) Initializes the data structure with the root of the complete binary tree.
int insert(int v) Inserts a TreeNode into the tree with value Node.val == val so that the tree remains complete, and returns the value of the parent of the inserted TreeNode.
TreeNode get_root() Returns the root node of the tree.
 

Example 1:


Input
["CBTInserter", "insert", "insert", "get_root"]
[[[1, 2]], [3], [4], []]
Output
[null, 1, 2, [1, 2, 3, 4]]

Explanation
CBTInserter cBTInserter = new CBTInserter([1, 2]);
cBTInserter.insert(3);  // return 1
cBTInserter.insert(4);  // return 2
cBTInserter.get_root(); // return [1, 2, 3, 4]
 

Constraints:

The number of nodes in the tree will be in the range [1, 1000].
0 <= Node.val <= 5000
root is a complete binary tree.
0 <= val <= 5000
At most 104 calls will be made to insert and get_root.

class CBTInserter
{
public:
    vector<TreeNode *> tree;

    CBTInserter(TreeNode *root)
    {
        tree.reserve(1000);
        queue<TreeNode *> q;
        q.push(root);
        while (!q.empty())
        {
            int sz = q.size();
            for (int k = 0; k < sz; ++k)
            {
                auto cur = q.front();
                q.pop();
                tree.push_back(cur);
                if (cur->left) q.push(cur->left);
                if (cur->right) q.push(cur->right);
            }
        }
    }

    int insert(int v)
    {
        TreeNode *node = new TreeNode(v);
        int n = tree.size();
        tree.push_back(node);
        if (n % 2 == 1) tree[(n - 1) / 2]->left = node;
        else tree[(n - 1) / 2]->right = node;
        return tree[(n - 1) / 2]->val;
    }

    TreeNode *get_root()
    {
        return tree[0];
    }
};



// Source https://leetcode.com/problems/number-of-music-playlists/

Your music player contains n different songs. You want to listen to goal songs (not necessarily different) during your trip. To avoid boredom, you will create a playlist so that:

Every song is played at least once.
A song can only be played again only if k other songs have been played.
Given n, goal, and k, return the number of possible playlists that you can create. Since the answer can be very large, return it modulo 109 + 7.

 

Example 1:

Input: n = 3, goal = 3, k = 1
Output: 6
Explanation: There are 6 possible playlists: [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], and [3, 2, 1].
Example 2:

Input: n = 2, goal = 3, k = 0
Output: 6
Explanation: There are 6 possible playlists: [1, 1, 2], [1, 2, 1], [2, 1, 1], [2, 2, 1], [2, 1, 2], and [1, 2, 2].
Example 3:

Input: n = 2, goal = 3, k = 1
Output: 2
Explanation: There are 2 possible playlists: [1, 2, 1] and [2, 1, 2].
 

Constraints:

0 <= k < n <= goal <= 100

class Solution
{
public:
    int mod = 1e9 + 7;
    int dp[105][105];

    long long solve(int cur_n, int cur_goal, int n, int goal, int k)
    {
        if(cur_n > n) return 0;
        if(cur_goal > goal) return 0;
        if(cur_goal == goal) return cur_n == n;
        if(dp[cur_n][cur_goal] != -1) return dp[cur_n][cur_goal];
        long long ans = 0;
        ans += (solve(cur_n, cur_goal + 1, n, goal, k) * max(0, cur_n - k)) % mod;
        ans += (solve(cur_n + 1, cur_goal + 1, n, goal, k) * (n - cur_n)) % mod;
        return dp[cur_n][cur_goal] = ans % mod;
    }

    int numMusicPlaylists(int n, int goal, int k)
    {
        memset(dp, -1, sizeof(dp));
        return solve(0, 0, n, goal, k);
    }
};


// Source https://leetcode.com/problems/minimum-add-to-make-parentheses-valid/

A parentheses string is valid if and only if:

It is the empty string,
It can be written as AB (A concatenated with B), where A and B are valid strings, or
It can be written as (A), where A is a valid string.
You are given a parentheses string s. In one move, you can insert a parenthesis at any position of the string.

For example, if s = "()))", you can insert an opening parenthesis to be "(()))" or a closing parenthesis to be "())))".
Return the minimum number of moves required to make s valid.

 

Example 1:

Input: s = "())"
Output: 1
Example 2:

Input: s = "((("
Output: 3
 

Constraints:

1 <= s.length <= 1000
s[i] is either '(' or ')'.

class Solution
{
public:
    int minAddToMakeValid(string s)
    {
        stack<char> st;
        int cnt = 0;
        for(char c : s)
        {
            if(c == '(')
                st.push(c);
            else
            {
                if(!st.empty())
                    st.pop();
                else
                    cnt++;
            }
        }
        return cnt + st.size();
    }
};


// Source https://leetcode.com/problems/sort-array-by-parity-ii/

Given an array of integers nums, half of the integers in nums are odd, and the other half are even.

Sort the array so that whenever nums[i] is odd, i is odd, and whenever nums[i] is even, i is even.

Return any answer array that satisfies this condition.

 

Example 1:

Input: nums = [4,2,5,7]
Output: [4,5,2,7]
Explanation: [4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.
Example 2:

Input: nums = [2,3]
Output: [2,3]
 

Constraints:

2 <= nums.length <= 2 * 104
nums.length is even.
Half of the integers in nums are even.
0 <= nums[i] <= 1000

class Solution
{
public:
    vector<int> sortArrayByParityII(vector<int> &A)
    {
        int n = A.size();
        vector<int> evenVec;
        vector<int> oddVec;
        evenVec.reserve(n/2);
        oddVec.reserve(n/2);
        for (auto val : A)
        {
            if (val % 2) oddVec.push_back(val);
            else evenVec.push_back(val);
        }
        vector<int> res;
        res.reserve(n);
        for (int i = 0; i < n / 2; ++i)
        {
            res.push_back(evenVec[i]);
            res.push_back(oddVec[i]);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/3sum-with-multiplicity/

Given an integer array arr, and an integer target, return the number of tuples i, j, k such that i < j < k and arr[i] + arr[j] + arr[k] == target.

As the answer can be very large, return it modulo 109 + 7.

 

Example 1:

Input: arr = [1,1,2,2,3,3,4,4,5,5], target = 8
Output: 20
Explanation: 
Enumerating by the values (arr[i], arr[j], arr[k]):
(1, 2, 5) occurs 8 times;
(1, 3, 4) occurs 8 times;
(2, 2, 4) occurs 2 times;
(2, 3, 3) occurs 2 times.
Example 2:

Input: arr = [1,1,2,2,2,2], target = 5
Output: 12
Explanation: 
arr[i] = 1, arr[j] = arr[k] = 2 occurs 12 times:
We choose one 1 from [1,1] in 2 ways,
and two 2s from [2,2,2,2] in 6 ways.
 

Constraints:

3 <= arr.length <= 3000
0 <= arr[i] <= 100
0 <= target <= 300

class Solution
{
public:
    int n;
    int mod = 1e9 + 7;
    int dp[3001][4][301];

    int recur(vector<int> &arr, int idx, int cnt, int target)
    {
        if(cnt < 0) return 0;
        if(target < 0) return 0;
        if(cnt == 0) return target == 0;
        if(idx >= n) return 0;
        if(dp[idx][cnt][target] != -1) return dp[idx][cnt][target];
        int pick = recur(arr, idx + 1, cnt - 1, target - arr[idx]) % mod;
        int notPick = recur(arr, idx + 1, cnt, target) % mod;
        return dp[idx][cnt][target] = (pick + notPick) % mod;
    }

    int threeSumMulti(vector<int> &arr, int target)
    {
        n = arr.size();
        memset(dp, -1, sizeof(dp));
        return recur(arr, 0, 3, target);
    }
};


// Source https://leetcode.com/problems/minimize-malware-spread/

You are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1.

Some nodes initial are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, 
both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops. We will remove exactly one node from initial.

Return the node that, if removed, would minimize M(initial). If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.

Note that if a node was removed from the initial list of infected nodes, it might still be infected later due to the malware spread.

 

Example 1:

Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0
Example 2:

Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
Output: 0
Example 3:

Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
Output: 1
 

Constraints:

n == graph.length
n == graph[i].length
2 <= n <= 300
graph[i][j] is 0 or 1.
graph[i][j] == graph[j][i]
graph[i][i] == 1
1 <= initial.length <= n
0 <= initial[i] <= n - 1
All the integers in initial are unique.

class Solution
{
public:
    int parent[300];
    int size[300];

    int find(int v)
    {
        if (parent[v] != v) parent[v] = find(parent[v]);
        return parent[v];
    }

    void join(int a, int b)
    {
        int root_a = find(a);
        int root_b = find(b);
        if (root_a == root_b) return;
        if (size[root_a] > size[root_b])
        {
            parent[root_b] = root_a;
            size[root_a] += size[root_b];
        }
        else
        {
            parent[root_a] = root_b;
            size[root_b] += size[root_a];
        }
    }

    int minMalwareSpread(vector<vector<int>> &graph, vector<int> &initial)
    {
        int n = graph.size();
        for(int i = 0; i < n; i++)
        {
            parent[i] = i;
            size[i] = 1;
        }

        for(int i = 0; i < n; i++)   // union different sets
        {
            for(int j = 0; j < n; j++)
            {
                if(graph[i][j] == 1 && i != j)
                {
                    join(i, j);
                }
            }
        }

        unordered_map<int, int> mp; // {component, no of initial}
        for(int i = 0; i < initial.size(); i++)
        {
            int root_a = find(initial[i]);
            mp[root_a]++;  // storing frequency of initials in each component
        }

        int componentSize = INT_MIN;
        int removeInitial = INT_MAX;

        for(auto it : initial)
        {
            int root_a = find(it);
            if(mp[root_a] == 1)   // if component contain only one initial, then we proceed
            {
                if(size[root_a] == componentSize)   // if two component have same size take min initial, as mentioned in question
                {
                    removeInitial = min(removeInitial, it);
                }
                else if(size[root_a] > componentSize)   // if component with large size than previous, we take current initial
                {
                    componentSize = size[root_a];
                    removeInitial = it;
                }
            }
        }

        // if we didn't get any initial to remove, we will take minimum of all initial, as mentioned in question
        if(removeInitial == INT_MAX)
        {
            for(auto it : initial)
            {
                removeInitial = min(removeInitial, it);
            }
        }
        return removeInitial;
    }
};


// Source https://leetcode.com/problems/long-pressed-name/

Your friend is typing his name into a keyboard. Sometimes, when typing a character c, the key might get long pressed, and the character will be typed 1 or more times.

You examine the typed characters of the keyboard. Return True if it is possible that it was your friends name, with some characters (possibly none) being long pressed.

 

Example 1:

Input: name = "alex", typed = "aaleex"
Output: true
Explanation: 'a' and 'e' in 'alex' were long pressed.
Example 2:

Input: name = "saeed", typed = "ssaaedd"
Output: false
Explanation: 'e' must have been pressed twice, but it was not in the typed output.
 

Constraints:

1 <= name.length, typed.length <= 1000
name and typed consist of only lowercase English letters.

class Solution
{
public:
    bool isLongPressedName(string name, string typed)
    {
        int m = name.size(), n = typed.size();
        int i = 0, j = 0;
        while (i < m && j < n)
        {
            if (name[i] != typed[j]) return false;
            int k1 = i + 1;
            for (; k1 < m && name[k1] == name[i]; ++k1);
            int cnt1 = k1 - i;
            int k2 = j + 1;
            for (; k2 < n && typed[k2] == typed[j]; ++k2);
            int cnt2 = k2 - j;
            if (cnt1 > cnt2) return false;
            i = k1;
            j = k2;
        }
        return i == m && j == n;
    }
};


// Source https://leetcode.com/problems/flip-string-to-monotone-increasing/

A binary string is monotone increasing if it consists of some number of 0's (possibly none), followed by some number of 1's (also possibly none).

You are given a binary string s. You can flip s[i] changing it from 0 to 1 or from 1 to 0.

Return the minimum number of flips to make s monotone increasing.

 

Example 1:

Input: s = "00110"
Output: 1
Explanation: We flip the last digit to get 00111.
Example 2:

Input: s = "010110"
Output: 2
Explanation: We flip to get 011111, or alternatively 000111.
Example 3:

Input: s = "00011000"
Output: 2
Explanation: We flip to get 00000000.
 

Constraints:

1 <= s.length <= 105
s[i] is either '0' or '1'.

全部为0不需要翻转
全部为1不需要翻转
若干个0后面是若干个1，不需要翻转
若干个1后面是若干个0，这种情况需要翻转
如果0的次数小于1的次数，则翻转次数为0的次数
如果0的次数大于等于1的次数，则翻转次数为1的次数
0011100110 变成0011111111，翻转3次
001110000011000  变成000000000000000，翻转5次
00011000 变成 00000000，翻转2次
010110 变成 000111，翻转2次
00110 变成00111，翻转1次
010 变成000或011，翻转1次

class Solution
{
public:
    int minFlipsMonoIncr(string s)
    {
        int cnt = 0, ans = 0;
        for(char ch : s)
        {
            if(ch == '0' and cnt > 0)
            {
                cnt--;
                ans++;
            }
            else if(ch == '1') cnt++;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/three-equal-parts/

You are given an array arr which consists of only zeros and ones, divide the array into three non-empty parts such that all of these parts represent the same binary value.

If it is possible, return any [i, j] with i + 1 < j, such that:

arr[0], arr[1], ..., arr[i] is the first part,
arr[i + 1], arr[i + 2], ..., arr[j - 1] is the second part, and
arr[j], arr[j + 1], ..., arr[arr.length - 1] is the third part.
All three parts have equal binary values.
If it is not possible, return [-1, -1].

Note that the entire part is used when considering what binary value it represents. For example, [1,1,0] represents 6 in decimal, not 3. 
Also, leading zeros are allowed, so [0,1,1] and [1,1] represent the same value.

 

Example 1:

Input: arr = [1,0,1,0,1]
Output: [0,3]
Example 2:

Input: arr = [1,1,0,1,1]
Output: [-1,-1]
Example 3:

Input: arr = [1,1,0,0,1]
Output: [0,2]
 

Constraints:

3 <= arr.length <= 3 * 104
arr[i] is 0 or 1

class Solution
{
public:
    vector<int> threeEqualParts(vector<int> &A)
    {
        int cntOne = 0, n = A.size();
        for (int num : A)
        {
            if (num == 1) ++cntOne;
        }
        if (cntOne == 0) return {0, n - 1};
        if (cntOne % 3 != 0) return {-1, -1};
        int k = cntOne / 3, start = 0, mid = 0, end = 0, cnt = 0;
        for (int i = 0; i < n; ++i)
        {
            if (A[i] == 0) continue;
            ++cnt;
            if (cnt == 1) start = i;
            if (cnt == k + 1) mid = i;
            if (cnt == 2 * k + 1)
            {
                end = i;
                break;
            }
        }
        while (end < n && A[start] == A[mid] && A[mid] == A[end])
        {
            ++start;
            ++mid;
            ++end;
        }
        if (end == n) return {start - 1, mid};
        return {-1, -1};
    }
};


// Source https://leetcode.com/problems/minimize-malware-spread-ii/

You are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1.

Some nodes initial are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, 
both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops.

We will remove exactly one node from initial, completely removing it and any connections from this node to any other node.

Return the node that, if removed, would minimize M(initial). If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.

 

Example 1:

Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0
Example 2:

Input: graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]
Output: 1
Example 3:

Input: graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]
Output: 1
 

Constraints:

n == graph.length
n == graph[i].length
2 <= n <= 300
graph[i][j] is 0 or 1.
graph[i][j] == graph[j][i]
graph[i][i] == 1
1 <= initial.length < n
0 <= initial[i] <= n - 1
All the integers in initial are unique.

之前的那道题是remove exactly one node from initial，这道题除了remove exactly one node from initial, 还会completely removing it and any connections from this node to any other node.

class Solution
{
public:
    int parent[300];
    int size[300];

    int find(int v)
    {
        if (parent[v] != v) parent[v] = find(parent[v]);
        return parent[v];
    }

    void join(int a, int b)
    {
        int root_a = find(a);
        int root_b = find(b);
        if (root_a == root_b) return;
        if (size[root_a] > size[root_b])
        {
            parent[root_b] = root_a;
            size[root_a] += size[root_b];
        }
        else
        {
            parent[root_a] = root_b;
            size[root_b] += size[root_a];
        }
    }

    int minMalwareSpread(vector<vector<int>> &graph, vector<int> &initial)
    {
        int n = graph.size();
        for(int i = 0; i < n; i++)
        {
            parent[i] = i;
            size[i] = 1;
        }

        unordered_set<int> s(initial.begin(), initial.end());
        for (int i = 0; i < n; i++)
        {
            if (s.count(i))
                continue;
            for (int j = 0; j < n; j++)
            {
                if (s.count(j)) continue;
                if(graph[i][j] == 1 && i != j)
                {
                    join(i, j);
                }
            }
        }

        vector<int> ref_cnt(n);
        for (auto a : initial)
        {
            unordered_set<int> nbrs;
            for (int i = 0; i < n; i++)
            {
                if (!s.count(i) && graph[a][i])
                    nbrs.insert(find(i));
            }
            for (auto nbr : nbrs)
                ref_cnt[nbr]++;
        }

        int mx = INT_MIN, res = -1;
        for (auto a : initial)
        {
            unordered_set<int> nbrs;
            for (int i = 0; i < n; i++)
            {
                if (!s.count(i) && graph[a][i])
                    nbrs.insert(find(i));
            }

            int cnt = 0;
            for (auto nbr : nbrs)
            {
                if (ref_cnt[nbr] == 1)
                    cnt += size[nbr];
            }
            if (cnt > mx || cnt == mx && a < res)
            {
                res = a;
                mx = cnt;
            }
        }

        return res;
    }
};


// Source https://leetcode.com/problems/unique-email-addresses/

Every valid email consists of a local name and a domain name, separated by the '@' sign. Besides lowercase letters, the email may contain one or more '.' or '+'.

For example, in "alice@leetcode.com", "alice" is the local name, and "leetcode.com" is the domain name.
If you add periods '.' between some characters in the local name part of an email address, mail sent there will be forwarded to the same address without dots in the local name. 
Note that this rule does not apply to domain names.

For example, "alice.z@leetcode.com" and "alicez@leetcode.com" forward to the same email address.
If you add a plus '+' in the local name, everything after the first plus sign will be ignored. This allows certain emails to be filtered. Note that this rule does not apply to domain names.

For example, "m.y+name@email.com" will be forwarded to "my@email.com".
It is possible to use both of these rules at the same time.

Given an array of strings emails where we send one email to each emails[i], return the number of different addresses that actually receive mails.

 

Example 1:

Input: emails = ["test.email+alex@leetcode.com","test.e.mail+bob.cathy@leetcode.com","testemail+david@lee.tcode.com"]
Output: 2
Explanation: "testemail@leetcode.com" and "testemail@lee.tcode.com" actually receive mails.
Example 2:

Input: emails = ["a@leetcode.com","b@leetcode.com","c@leetcode.com"]
Output: 3
 

Constraints:

1 <= emails.length <= 100
1 <= emails[i].length <= 100
emails[i] consist of lowercase English letters, '+', '.' and '@'.
Each emails[i] contains exactly one '@' character.
All local and domain names are non-empty.
Local names do not start with a '+' character.
Domain names end with the ".com" suffix.

class Solution
{
public:
    int numUniqueEmails(vector<string> &emails)
    {
        unordered_set<string> st;
        for (auto &email : emails)
        {
            string name;
            for (char c : email)
            {
                if (c == '.') continue;
                if (c == '+' || c == '@') break;
                name.push_back(c);
            }
            name += email.substr(email.find('@'));
            st.insert(name);
        }
        return st.size();
    }
};


// Source https://leetcode.com/problems/binary-subarrays-with-sum/

Given a binary array nums and an integer goal, return the number of non-empty subarrays with a sum goal.

A subarray is a contiguous part of the array.

 

Example 1:

Input: nums = [1,0,1,0,1], goal = 2
Output: 4
Explanation: The 4 subarrays are bolded and underlined below:
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
Example 2:

Input: nums = [0,0,0,0,0], goal = 0
Output: 15
 

Constraints:

1 <= nums.length <= 3 * 104
nums[i] is either 0 or 1.
0 <= goal <= nums.length

class Solution
{
public:
    int numSubarraysWithSum(vector<int> &arr, int goal)
    {
        int n = arr.size();
        vector<int> prefix(n + 1, 0);
        for(int i = 1; i <= n; i++)
        {
            prefix[i] = arr[i - 1] + prefix[i - 1];
        }
        int count = 0;
        unordered_map<int, int> mp;
        for(int i = 1; i <= n; i++)
        {
            if(prefix[i] == goal)
            {
                count++;
            }

            auto it = mp.find(prefix[i] - goal);

            if(it != mp.end())
            {
                count += it -> second;
            }

            mp[prefix[i]]++;
        }

        return count;
    }
};


// Source https://leetcode.com/problems/minimum-falling-path-sum/

Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.

A falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. 
Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).

 

Example 1:


Input: matrix = [[2,1,3],[6,5,4],[7,8,9]]
Output: 13
Explanation: There are two falling paths with a minimum sum as shown.
Example 2:


Input: matrix = [[-19,57],[-40,-5]]
Output: -59
Explanation: The falling path with a minimum sum is shown.
 

Constraints:

n == matrix.length == matrix[i].length
1 <= n <= 100
-100 <= matrix[i][j] <= 100

class Solution
{
public:
    int minFallingPathSum(vector<vector<int>> &A)
    {
        if (A.size() == 1) return *min_element(A[0].begin(), A[0].end());
        int n = A.size(), res = INT_MAX;
        for (int i = 1; i < n; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                int pre = A[i - 1][j];
                if (j > 0) pre = min(pre, A[i - 1][j - 1]);
                if (j < n - 1) pre = min(pre, A[i - 1][j + 1]);
                A[i][j] += pre;
                if (i == n - 1) res = min(res, A[i][j]);
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/beautiful-array/

An array nums of length n is beautiful if:

nums is a permutation of the integers in the range [1, n].
For every 0 <= i < j < n, there is no index k with i < k < j where 2 * nums[k] == nums[i] + nums[j].
Given the integer n, return any beautiful array nums of length n. There will be at least one valid answer for the given n.

 

Example 1:

Input: n = 4
Output: [2,1,4,3]

1
1 2
1 3 2 4
1 5 3 7 2 6 4 8

Example 2:

Input: n = 5
Output: [3,1,2,5,4]
 

Constraints:

1 <= n <= 1000

对于任意一个漂亮数组，若对每个数字都加上一个相同的数字，或者都乘上一个相同的数字，则一定还是漂亮数组，因为数字的之间的内在关系并没有改变。

For every 0 <= i < j < n, there is no index k with i < k < j where 2 * nums[k] == nums[i] + nums[j].

2 * 2 * nums[k] == (2 * nums[i]) + (2 * nums[j])
2 * 2 * nums[k] - 2 == (2 * nums[i]) - 1 + (2 * nums[j]) - 1
2 * (2 * nums[k] - 1) == (2 * nums[i] - 1) + (2 * nums[j] - 1)

假设此时已经有了一个长度为n的漂亮数组，如何将其扩大呢？可以将其中每个数字都乘以2并加1，就都会变成奇数，并且这个奇数数组还是漂亮的，
然后再将每个数字都乘以2，那么都会变成偶数，并且这个偶数数组还是漂亮的，两个数组拼接起来，就会得到一个长度为 2n 的漂亮数组。

nums[i]为奇数，nums[j]为偶数，奇数加偶数等于奇数，就不会是任何一个数字的2倍了。

可以从1开始，1本身就是一个漂亮数组，然后将其扩大，注意这里要卡一个N，不能让扩大的数组长度超过N，只要在变为奇数和偶数时加个判定就行了，将不大于N的数组加入到新的数组中

class Solution
{
public:
    vector<int> beautifulArray(int N)
    {
        vector<int> res{1};
        while (res.size() < N)
        {
            vector<int> t;
            for (int num : res)
            {
                if (num * 2 - 1 <= N) t.push_back(num * 2 - 1);
            }
            for (int num : res)
            {
                if (num * 2 <= N) t.push_back(num * 2);
            }
            res = t;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/number-of-recent-calls/

You have a RecentCounter class which counts the number of recent requests within a certain time frame.

Implement the RecentCounter class:

RecentCounter() Initializes the counter with zero recent requests.
int ping(int t) Adds a new request at time t, where t represents some time in milliseconds, and returns the number of requests that has happened in the past 3000 milliseconds 
(including the new request). Specifically, return the number of requests that have happened in the inclusive range [t - 3000, t].
It is guaranteed that every call to ping uses a strictly larger value of t than the previous call.

 

Example 1:

Input
["RecentCounter", "ping", "ping", "ping", "ping"]
[[], [1], [100], [3001], [3002]]
Output
[null, 1, 2, 3, 3]

Explanation
RecentCounter recentCounter = new RecentCounter();
recentCounter.ping(1);     // requests = [1], range is [-2999,1], return 1
recentCounter.ping(100);   // requests = [1, 100], range is [-2900,100], return 2
recentCounter.ping(3001);  // requests = [1, 100, 3001], range is [1,3001], return 3
recentCounter.ping(3002);  // requests = [1, 100, 3001, 3002], range is [2,3002], return 3
 

Constraints:

1 <= t <= 109
Each test case will call ping with strictly increasing values of t.
At most 104 calls will be made to ping.

class RecentCounter
{
public:
    queue<int> q;

    RecentCounter() {}

    int ping(int t)
    {
        while (!q.empty())
        {
            if (q.front() + 3000 >= t) break;
            q.pop();
        }
        q.push(t);
        return q.size();
    }
};


// Source https://leetcode.com/problems/shortest-bridge/

You are given an n x n binary matrix grid where 1 represents land and 0 represents water.

An island is a 4-directionally connected group of 1's not connected to any other 1's. There are exactly two islands in grid.

You may change 0's to 1's to connect the two islands to form one island.

Return the smallest number of 0's you must flip to connect the two islands.

 

Example 1:

Input: grid = [[0,1],[1,0]]
Output: 1
Example 2:

Input: grid = [[0,1,0],[0,0,0],[0,0,1]]
Output: 2
Example 3:

Input: grid = [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]
Output: 1
 

Constraints:

n == grid.length == grid[i].length
2 <= n <= 100
grid[i][j] is either 0 or 1.
There are exactly two islands in grid.

class Solution
{
public:
    int shortestBridge(vector<vector<int>> &A)
    {
        int n = A.size();
        queue<int> q1, q2;
        int dirX[4] = {-1, 0, 1, 0};
        int dirY[4] = {0, 1, 0, -1};
        for (int i = 0; i < n; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                if (A[i][j] == 0) continue;
                A[i][j] = 2;
                q1.push(i * n + j);
                break;
            }
            if (!q1.empty()) break;
        }
        while (!q1.empty())
        {
            int t = q1.front();
            q1.pop();
            q2.push(t);
            for (int k = 0; k < 4; ++k)
            {
                int x = t / n + dirX[k], y = t % n + dirY[k];
                if (x < 0 || x >= n || y < 0 || y >= n || A[x][y] == 0 || A[x][y] == 2) continue;
                A[x][y] = 2;
                q1.push(x * n + y);
            }
        }
        int res = 0;
        while (!q2.empty())
        {
            int sz = q2.size();
            for (int i = 0; i < sz; ++i)
            {
                int t = q2.front();
                q2.pop();
                for (int k = 0; k < 4; ++k)
                {
                    int x = t / n + dirX[k], y = t % n + dirY[k];
                    if (x < 0 || x >= n || y < 0 || y >= n || A[x][y] == 2) continue;
                    if (A[x][y] == 1) return res;
                    A[x][y] = 2;
                    q2.push(x * n + y);
                }
            }
            ++res;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/knight-dialer/

The chess knight has a unique movement, it may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically 
(with both forming the shape of an L). The possible movements of chess knight are shown in this diagaram:

A chess knight can move as indicated in the chess diagram below:

a	x	a	x	a
x	a	b	a	x
a	b	y	b	a
x	a	b	a	x
a	x	a	x	a

y为骑士，x为骑士移动目标

We have a chess knight and a phone pad as shown below, the knight can only stand on a numeric cell (i.e. blue cell).

1	2	3
4	5	6
7	8	9
*	0	#

Given an integer n, return how many distinct phone numbers of length n we can dial.

You are allowed to place the knight on any numeric cell initially and then you should perform n - 1 jumps to dial a number of length n. All jumps should be valid knight jumps.

As the answer may be very large, return the answer modulo 109 + 7.

 

Example 1:

Input: n = 1
Output: 10
Explanation: We need to dial a number of length 1, so placing the knight over any numeric cell of the 10 cells is sufficient.
Example 2:

Input: n = 2
Output: 20
Explanation: All the valid number we can dial are [04, 06, 16, 18, 27, 29, 34, 38, 40, 43, 49, 60, 61, 67, 72, 76, 81, 83, 92, 94]
Example 3:

Input: n = 3131
Output: 136006598
Explanation: Please take care of the mod.
 

Constraints:

1 <= n <= 5000

0 -> 4, 6
1 -> 6, 8
2 -> 7, 9
3 -> 4, 8
4 -> 3, 9, 0
5 ->
6 -> 1, 7, 0
7 -> 2, 6
8 -> 1, 3
9 -> 4, 2

可以发现，除了数字5之外，每个数字都可以跳到其他位置，其中4和6可以跳到三个不同位置，其他都只能取两个位置。

class Solution
{
public:
    const int M = 1e9 + 7;
    vector<vector<int>> path;
    int dp[5005][10];

    int helper(int n, int prev)
    {
        if (n == 0) return 1;
        if (dp[n][prev] != -1) return dp[n][prev];
        int res = 0;
        for (int idx : path[prev])
        {
            res = (res + helper(n - 1, idx)) % M;
        }
        return dp[n][prev] = res;
    }

    int knightDialer(int N)
    {
        path = {{4, 6}, {6, 8}, {7, 9}, {4, 8}, {3, 9, 0}, {}, {1, 7, 0}, {2, 6}, {1, 3}, {4, 2}};
        memset(dp, -1, sizeof(dp));
        int res = 0;
        for (int i = 0; i < 10; ++i)
        {
            res = (res + helper(N - 1, i)) % M;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/stamping-the-sequence/

You are given two strings stamp and target. Initially, there is a string s of length target.length with all s[i] == '?'.

In one turn, you can place stamp over s and replace every letter in the s with the corresponding letter from stamp.

For example, if stamp = "abc" and target = "abcba", then s is "?????" initially. In one turn you can:
place stamp at index 0 of s to obtain "abc??",
place stamp at index 1 of s to obtain "?abc?", or
place stamp at index 2 of s to obtain "??abc".
Note that stamp must be fully contained in the boundaries of s in order to stamp (i.e., you cannot place stamp at index 3 of s).
We want to convert s to target using at most 10 * target.length turns.

Return an array of the index of the left-most letter being stamped at each turn. If we cannot obtain target from s within 10 * target.length turns, return an empty array.

 

Example 1:

Input: stamp = "abc", target = "ababc"
Output: [0,2]
Explanation: Initially s = "?????".
- Place stamp at index 0 to get "abc??".
- Place stamp at index 2 to get "ababc".
[1,0,2] would also be accepted as an answer, as well as some other answers.
Example 2:

Input: stamp = "abca", target = "aabcaca"
Output: [3,0,1]
Explanation: Initially s = "???????".
- Place stamp at index 3 to get "???abca".
- Place stamp at index 0 to get "abcabca".
- Place stamp at index 1 to get "aabcaca".
 

Constraints:

1 <= stamp.length <= target.length <= 1000
stamp and target consist of lowercase English letters.

假如给的是 target 字符串，每次盖印章，将对应的位置变成星号，只要将 target 中所有的字符盖成星号，最终再把盖印章的顺序翻转一下，就是题目中所求了。

class Solution
{
public:
    int m, n;

    vector<int> movesToStamp(string stamp, string target)
    {
        m = stamp.length();
        n = target.length();
        string s(n, '?');
        vector<int> indices;
        int stamps = 10 * target.size();
        bool is_eligible = DFS_Stamp(stamp, target, s, stamps, indices);
        if (!is_eligible) return {};
        reverse(indices.begin(), indices.end());
        return indices;
    }

    bool DFS_Stamp(const string &stamp, string &target, const string &s, int stamps, vector<int> &indices)
    {
        if (s == target) return true;
        if (stamps == 0)
        {
            return false;
        }
        int cnt = indices.size();
        for (int istart = 0; istart <= n - m;)
        {
            if (!ShouldStamp(stamp, istart, target))
            {
                ++istart;
                continue;
            }
            for (int i = 0; i < m; ++i) target[istart + i] = '?';
            indices.push_back(istart);
            --stamps;
            if (stamps == 0) return s == target;
            istart += m;
        }
        if (cnt == indices.size()) return false;
        return DFS_Stamp(stamp, target, s, stamps, indices);
    }

    bool ShouldStamp(const string &stamp, int istart, const string &target)
    {
        int matched = 0, stamped = 0;
        for (int i = 0; i < m; ++i)
        {
            if(target[istart + i] == stamp[i] || target[istart + i] == '?') ++matched;
            if(target[istart + i] == '?') ++stamped;
        }
        return stamped == m ? false : matched == m;
    }
};


// Source https://leetcode.com/problems/reorder-data-in-log-files/

You are given an array of logs. Each log is a space-delimited string of words, where the first word is the identifier.

There are two types of logs:

Letter-logs: All words (except the identifier) consist of lowercase English letters.
Digit-logs: All words (except the identifier) consist of digits.
Reorder these logs so that:

The letter-logs come before all digit-logs.
The letter-logs are sorted lexicographically by their contents. If their contents are the same, then sort them lexicographically by their identifiers.
The digit-logs maintain their relative ordering.
Return the final order of the logs.

 

Example 1:

Input: logs = ["dig1 8 1 5 1","let1 art can","dig2 3 6","let2 own kit dig","let3 art zero"]
Output: ["let1 art can","let3 art zero","let2 own kit dig","dig1 8 1 5 1","dig2 3 6"]
Explanation:
The letter-log contents are all different, so their ordering is "art can", "art zero", "own kit dig".
The digit-logs have a relative order of "dig1 8 1 5 1", "dig2 3 6".
Example 2:

Input: logs = ["a1 9 2 3 1","g1 act car","zo4 4 7","ab1 off key dog","a8 act zoo"]
Output: ["g1 act car","a8 act zoo","ab1 off key dog","a1 9 2 3 1","zo4 4 7"]
 

Constraints:

1 <= logs.length <= 100
3 <= logs[i].length <= 100
All the tokens of logs[i] are separated by a single space.
logs[i] is guaranteed to have an identifier and at least one word after the identifier.

class Solution
{
public:
    vector<string> reorderLogFiles(vector<string> &logs)
    {
        vector<string> res, digitLogs;
        vector<pair<string, string>> data;
        for (string &log : logs)
        {
            auto pos = log.find(" ");
            if (log[pos + 1] >= '0' && log[pos + 1] <= '9')
            {
                digitLogs.push_back(log);
                continue;
            }
            data.push_back({log.substr(0, pos), log.substr(pos + 1)});
        }
        sort(data.begin(), data.end(), [](auto &a, auto &b)
        {
            return a.second < b.second || (a.second == b.second && a.first < b.first);
        });
        for (auto &a : data)
        {
            res.push_back(a.first + " " + a.second);
        }
        for (string &log : digitLogs) res.push_back(log);
        return res;
    }
};


// Source https://leetcode.com/problems/range-sum-of-bst/

Given the root node of a binary search tree and two integers low and high, return the sum of values of all nodes with a value in the inclusive range [low, high].

 

Example 1:


Input: root = [10,5,15,3,7,null,18], low = 7, high = 15
Output: 32
Explanation: Nodes 7, 10, and 15 are in the range [7, 15]. 7 + 10 + 15 = 32.
Example 2:


Input: root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10
Output: 23
Explanation: Nodes 6, 7, and 10 are in the range [6, 10]. 6 + 7 + 10 = 23.
 

Constraints:

The number of nodes in the tree is in the range [1, 2 * 104].
1 <= Node.val <= 105
1 <= low <= high <= 105
All Node.val are unique.

class Solution
{
public:
    int rangeSumBST(TreeNode *root, int L, int R)
    {
        if (!root) return 0;
        if (root->val < L) return rangeSumBST(root->right, L, R);
        if (root->val > R) return rangeSumBST(root->left, L, R);
        return root->val + rangeSumBST(root->left, L, R) + rangeSumBST(root->right, L, R);
    }
};


// Source https://leetcode.com/problems/minimum-area-rectangle/

You are given an array of points in the X-Y plane points where points[i] = [xi, yi].

Return the minimum area of a rectangle formed from these points, with sides parallel to the X and Y axes. If there is not any such rectangle, return 0.

 

Example 1:


Input: points = [[1,1],[1,3],[3,1],[3,3],[2,2]]
Output: 4
Example 2:


Input: points = [[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]
Output: 2
 

Constraints:

1 <= points.length <= 500
points[i].length == 2
0 <= xi, yi <= 4 * 104
All the given points are unique.

先找出两个对角线的顶点，一但两个对角顶点确定了，其实这个矩形的大小也就确定了，另外的两个点其实就是分别在跟这两个点具有相同的横坐标或纵坐标的点中寻找即可

class Solution
{
public:
    int minAreaRect(vector<vector<int>> &points)
    {
        int res = INT_MAX, n = points.size();
        unordered_map<int, unordered_set<int>> m;
        for (auto &point : points)
        {
            m[point[0]].insert(point[1]);
        }
        for (int i = 0; i < n; ++i)
        {
            for (int j = i + 1; j < n; ++j)
            {
                if (points[i][0] == points[j][0] || points[i][1] == points[j][1]) continue;
                if (m[points[i][0]].count(points[j][1]) && m[points[j][0]].count(points[i][1]))
                {
                    res = min(res, abs(points[i][0] - points[j][0]) * abs(points[i][1] - points[j][1]));
                }
            }
        }
        return res == INT_MAX ? 0 : res;
    }
};


// Source https://leetcode.com/problems/distinct-subsequences-ii/

Given a string s, return the number of distinct non-empty subsequences of s. Since the answer may be very large, return it modulo 109 + 7.

A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters 
without disturbing the relative positions of the remaining characters. (i.e., "ace" is a subsequence of "abcde" while "aec" is not.
 

Example 1:

Input: s = "abc"
Output: 7
Explanation: The 7 distinct subsequences are "a", "b", "c", "ab", "ac", "bc", and "abc".
Example 2:

Input: s = "aba"
Output: 6
Explanation: The 6 distinct subsequences are "a", "b", "ab", "aa", "ba", and "aba".
Example 3:

Input: s = "aaa"
Output: 3
Explanation: The 3 distinct subsequences are "a", "aa" and "aaa".
 

Constraints:

1 <= s.length <= 2000
s consists of lowercase English letters.

 dp[i] 表示以字符 i+'a' 结尾的不同子序列的个数，因为题目中限定了只有小写字母，所以只有 26 个。
以 aba 这个例子来分析一下，当遇到开头的a时，那么以a结尾的子序列只有一个，就是a，
当遇到中间的b时，此时知道以b结尾的子序列有2个，分别是 b 和 ab，其实是空串和a后面分别加个b得来的
当遇到末尾的a的时候，那么此时以a结尾的子序列就有4个，分别是 a，aa，ba，aba，其实是空串，a，b，ab，分别加上一个a
在当前不同序列的基础上，加上任何一个字符都会得到另一个不同的子序列，后面的加1是为了加上空串的情况

class Solution
{
public:
    int distinctSubseqII(string S)
    {
        int M = 1e9 + 7;
        vector<int> dp(26);
        for (char c : S)
        {
            dp[c - 'a'] = accumulate(dp.begin(), dp.end(), 1L) % M;
        }
        return accumulate(dp.begin(), dp.end(), 0L) % M;
    }
};


// Source https://leetcode.com/problems/valid-mountain-array/

Given an array of integers arr, return true if and only if it is a valid mountain array.

Recall that arr is a mountain array if and only if:

arr.length >= 3
There exists some i with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
arr[i] > arr[i + 1] > ... > arr[arr.length - 1]

 

Example 1:

Input: arr = [2,1]
Output: false
Example 2:

Input: arr = [3,5,5]
Output: false
Example 3:

Input: arr = [0,3,2,1]
Output: true
 

Constraints:

1 <= arr.length <= 104
0 <= arr[i] <= 104

class Solution
{
public:
    bool validMountainArray(vector<int> &A)
    {
        int n = A.size(), i = 0, j = n - 1;
        while (i < n - 1 && A[i] < A[i + 1]) ++i;
        while (j > 0 && A[j - 1] > A[j]) --j;
        return i > 0 && j < n - 1 && i == j;
    }
};


// Source https://leetcode.com/problems/di-string-match/

A permutation perm of n + 1 integers of all the integers in the range [0, n] can be represented as a string s of length n where:

s[i] == 'I' if perm[i] < perm[i + 1], and
s[i] == 'D' if perm[i] > perm[i + 1].
Given a string s, reconstruct the permutation perm and return it. If there are multiple valid permutations perm, return any of them.

 

Example 1:

Input: s = "IDID"
Output: [0,4,1,3,2]
Example 2:

Input: s = "III"
Output: [0,1,2,3]
Example 3:

Input: s = "DDI"
Output: [3,2,0,1]
 

Constraints:

1 <= s.length <= 105
s[i] is either 'I' or 'D'.

对于上升来说，可以从0开始累加，而对于下降来说，则可以从n开始下降，这样保证了在结束之前二者绝不会相遇，到最后一个数字的时候二者相同，再将这个相同数字加入即可

class Solution
{
public:
    vector<int> diStringMatch(string S)
    {
        vector<int> res;
        int n = S.size(), mn = 0, mx = n;
        for (char c : S)
        {
            if (c == 'I') res.push_back(mn++);
            else res.push_back(mx--);
        }
        res.push_back(mx);
        return res;
    }
};


// Source https://leetcode.com/problems/find-the-shortest-superstring/

Given an array of strings words, return the smallest string that contains each string in words as a substring. If there are multiple valid strings of the smallest length, return any of them.

You may assume that no string in words is a substring of another string in words.

 

Example 1:

Input: words = ["alex","loves","leetcode"]
Output: "alexlovesleetcode"
Explanation: All permutations of "alex","loves","leetcode" would also be accepted.
Example 2:

Input: words = ["catg","ctaagt","gcta","ttca","atgcatc"]
Output: "gctaagttcatgcatc"
 

Constraints:

1 <= words.length <= 12
1 <= words[i].length <= 20
words[i] consists of lowercase English letters.
All the strings of words are unique.

class Solution
{
public:
    int n;
    unordered_map<long, pair<int, int>> dp;
    int ovlp[20][20];

    pair<int, int> recur(vector<string> &words, long prev, long mask)
    {
        long key = ((prev + 10) << 16) + mask;
        if (dp.find(key) == dp.end())
        {
            if (mask == 0) return make_pair(0, 0);
            int vv = INT_MAX, kk = -1;
            for (int k = 0; k < n; ++k)
            {
                if (mask & (1 << k))
                {
                    auto [v, tmp] = recur(words, k, mask ^ (1 << k));
                    int offset = (prev == -1 ? size(words[k]) : size(words[k]) - ovlp[prev][k]);
                    if (v + offset < vv)
                    {
                        vv = v + offset;
                        kk = k;
                    }
                }
            }
            dp[key] = make_pair(vv, kk);
        }
        return dp[key];
    };

    string shortestSuperstring(vector<string> &words)
    {
        n = words.size();
        memset(ovlp, 0, sizeof(ovlp));

        for (int i = 0; i < n; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                if (i == j) continue;
                for (int k = min(words[i].size(), words[j].size()); k > 0; --k)
                {
                    // words[i] 的后缀 和 words[j]的前缀相等
                    if (words[i].substr(words[i].size() - k) == words[j].substr(0, k))
                    {
                        ovlp[i][j] = k;
                        break;
                    }
                }
            }
        }

        string ans;
        long prev = -1, mask = (1 << n) - 1;
        recur(words, prev, mask);
        while (mask)
        {
            auto [tmp, k] = recur(words, prev, mask);
            if (ans.size()) ans += words[k].substr(ovlp[prev][k]);
            else ans += words[k];
            prev = k;
            mask ^= 1 << k;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/delete-columns-to-make-sorted/

You are given an array of n strings strs, all of the same length.

The strings can be arranged such that there is one on each line, making a grid. For example, strs = ["abc", "bce", "cae"] can be arranged as:

abc
bce
cae
You want to delete the columns that are not sorted lexicographically. In the above example (0-indexed), columns 0 ('a', 'b', 'c') and 2 ('c', 'e', 'e') are sorted 
while column 1 ('b', 'c', 'a') is not, so you would delete column 1.

Return the number of columns that you will delete.

 

Example 1:

Input: strs = ["cba","daf","ghi"]
Output: 1
Explanation: The grid looks as follows:
  cba
  daf
  ghi
Columns 0 and 2 are sorted, but column 1 is not, so you only need to delete 1 column.
Example 2:

Input: strs = ["a","b"]
Output: 0
Explanation: The grid looks as follows:
  a
  b
Column 0 is the only column and is sorted, so you will not delete any columns.
Example 3:

Input: strs = ["zyx","wvu","tsr"]
Output: 3
Explanation: The grid looks as follows:
  zyx
  wvu
  tsr
All 3 columns are not sorted, so you will delete all 3.
 

Constraints:

n == strs.length
1 <= n <= 100
1 <= strs[i].length <= 1000
strs[i] consists of lowercase English letters.

class Solution
{
public:
    int minDeletionSize(vector<string> &A)
    {
        int n = A.size(), m = A[0].size(), res = 0;
        for (int j = 0; j < m; ++j)
        {
            for (int i = 0; i < n - 1; ++i)
            {
                if (A[i][j] <= A[i + 1][j]) continue;
                ++res;
                break;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/minimum-increment-to-make-array-unique/

You are given an integer array nums. In one move, you can pick an index i where 0 <= i < nums.length and increment nums[i] by 1.

Return the minimum number of moves to make every value in nums unique.

 

Example 1:

Input: nums = [1,2,2]
Output: 1
Explanation: After 1 move, the array could be [1, 2, 3].
Example 2:

Input: nums = [3,2,1,2,1,7]
Output: 6
Explanation: After 6 moves, the array could be [3, 4, 1, 2, 5, 7].
It can be shown with 5 or less moves that it is impossible for the array to have all unique values.
 
1 1 2 2 3 7
1 2 3 4 5 7

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 105

class Solution
{
public:
    int minIncrementForUnique(vector<int> &A)
    {
        int res = 0, need = 0;
        sort(A.begin(), A.end());
        int n = A.size();
        need = A[0] + 1;
        for (int i = 1; i < n; ++i)
        {
            res += max(need - A[i], 0);
            need = max(need, A[i]) + 1;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/validate-stack-sequences/

Given two integer arrays pushed and popped each with distinct values, return true if this could have been the result of a sequence of push and pop operations on an initially empty stack, or false otherwise.

 

Example 1:

Input: pushed = [1,2,3,4,5], popped = [4,5,3,2,1]
Output: true
Explanation: We might do the following sequence:
push(1), push(2), push(3), push(4),
pop() -> 4,
push(5),
pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1
Example 2:

Input: pushed = [1,2,3,4,5], popped = [4,3,5,1,2]
Output: false
Explanation: 1 cannot be popped before 2.
 

Constraints:

1 <= pushed.length <= 1000
0 <= pushed[i] <= 1000
All the elements of pushed are unique.
popped.length == pushed.length
popped is a permutation of pushed.

class Solution
{
public:
    bool validateStackSequences(vector<int> &pushed, vector<int> &popped)
    {
        stack<int> st;
        int i = 0;
        for (int num : pushed)
        {
            st.push(num);
            while (!st.empty() && st.top() == popped[i])
            {
                st.pop();
                ++i;
            }
        }
        return st.empty();
    }
};


// Source https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/

On a 2D plane, we place n stones at some integer coordinate points. Each coordinate point may have at most one stone.

A stone can be removed if it shares either the same row or the same column as another stone that has not been removed.

Given an array stones of length n where stones[i] = [xi, yi] represents the location of the ith stone, return the largest possible number of stones that can be removed.

 

Example 1:

Input: stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]
Output: 5
Explanation: One way to remove 5 stones is as follows:
1. Remove stone [2,2] because it shares the same row as [2,1].
2. Remove stone [2,1] because it shares the same column as [0,1].
3. Remove stone [1,2] because it shares the same row as [1,0].
4. Remove stone [1,0] because it shares the same column as [0,0].
5. Remove stone [0,1] because it shares the same row as [0,0].
Stone [0,0] cannot be removed since it does not share a row/column with another stone still on the plane.
Example 2:

Input: stones = [[0,0],[0,2],[1,1],[2,0],[2,2]]
Output: 3
Explanation: One way to make 3 moves is as follows:
1. Remove stone [2,2] because it shares the same row as [2,0].
2. Remove stone [2,0] because it shares the same column as [0,0].
3. Remove stone [0,2] because it shares the same row as [0,0].
Stones [0,0] and [1,1] cannot be removed since they do not share a row/column with another stone still on the plane.
Example 3:

Input: stones = [[0,0]]
Output: 0
Explanation: [0,0] is the only stone on the plane, so you cannot remove it.
 

Constraints:

1 <= stones.length <= 1000
0 <= xi, yi <= 104
No two stones are at the same coordinate point.

共行或共列的石头属于同一个群组，总有办法能把每个群组移除到只剩一个石子，所以总共有多少个群组，最终就会剩下多少个石子，最大的移除个数就是总石子个数减去群组个数。

class Solution
{
public:
    unordered_map<int, vector<int>> rowMap, colMap;

    int removeStones(vector<vector<int>> &stones)
    {
        for (auto &stone : stones)
        {
            rowMap[stone[0]].push_back(stone[1]);
            colMap[stone[1]].push_back(stone[0]);
        }
        unordered_set<int> rowVisited;
        int res = 0;
        for (auto &a : rowMap)
        {
            res += max(0, helper(a.first, rowVisited) - 1);
        }
        return res;
    }

    int helper(int row, unordered_set<int> &rowVisited)
    {
        if (rowVisited.count(row)) return 0;
        rowVisited.insert(row);
        int res = rowMap[row].size();
        for (int c : rowMap[row])
        {
            for (int r : colMap[c])
            {
                res += helper(r, rowVisited);
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/bag-of-tokens/

You have an initial power of power, an initial score of 0, and a bag of tokens where tokens[i] is the value of the ith token (0-indexed).

Your goal is to maximize your total score by potentially playing each token in one of two ways:

If your current power is at least tokens[i], you may play the ith token face up, losing tokens[i] power and gaining 1 score.
If your current score is at least 1, you may play the ith token face down, gaining tokens[i] power and losing 1 score.
Each token may be played at most once and in any order. You do not have to play all the tokens.

Return the largest possible score you can achieve after playing any number of tokens.

 

Example 1:

Input: tokens = [100], power = 50
Output: 0
Explanation: Playing the only token in the bag is impossible because you either have too little power or too little score.
Example 2:

Input: tokens = [100,200], power = 150
Output: 1
Explanation: Play the 0th token (100) face up, your power becomes 50 and score becomes 1.
There is no need to play the 1st token since you cannot play it face up to add to your score.
Example 3:

Input: tokens = [100,200,300,400], power = 200
Output: 2
Explanation: Play the tokens in this order to get a score of 2:
1. Play the 0th token (100) face up, your power becomes 100 and score becomes 1.
2. Play the 3rd token (400) face down, your power becomes 500 and score becomes 0.
3. Play the 1st token (200) face up, your power becomes 300 and score becomes 1.
4. Play the 2nd token (300) face up, your power becomes 0 and score becomes 2.
 

Constraints:

0 <= tokens.length <= 1000
0 <= tokens[i], power < 104

class Solution
{
public:
    int res;

    void helper(vector<int> &tokens, int curPower, int curScore, int i, int j)
    {
        res = max(res, curScore);
        if (i > j) return;
        if (tokens[i] <= curPower)
        {
            helper(tokens, curPower - tokens[i], curScore + 1, i + 1, j);
            return;
        }
        if (curScore > 0)
        {
            helper(tokens, curPower + tokens[j], curScore - 1, i, j - 1);
        }
    }

    int bagOfTokensScore(vector<int> &tokens, int P)
    {
        res = 0;
        sort(tokens.begin(), tokens.end());
        int n = tokens.size();
        helper(tokens, P, 0, 0, n - 1);
        return res;
    }
};


// Source https://leetcode.com/problems/largest-time-for-given-digits/

Given an array arr of 4 digits, find the latest 24-hour time that can be made using each digit exactly once.

24-hour times are formatted as "HH:MM", where HH is between 00 and 23, and MM is between 00 and 59. The earliest 24-hour time is 00:00, and the latest is 23:59.

Return the latest 24-hour time in "HH:MM" format. If no valid time can be made, return an empty string.

 

Example 1:

Input: arr = [1,2,3,4]
Output: "23:41"
Explanation: The valid 24-hour times are "12:34", "12:43", "13:24", "13:42", "14:23", "14:32", "21:34", "21:43", "23:14", and "23:41". Of these times, "23:41" is the latest.
Example 2:

Input: arr = [5,5,5,5]
Output: ""
Explanation: There are no valid 24-hour times as "55:55" is not valid.
 

Constraints:

arr.length == 4
0 <= arr[i] <= 9

class Solution
{
public:
    string largestTimeFromDigits(vector<int> &A)
    {
        string res;
        sort(A.begin(), A.end());
        do
        {
            int hour = (A[0] * 10 + A[1]), minute = (A[2] * 10 + A[3]);
            if (hour <= 23 && minute <= 59) res = string{char(A[0] + '0'), char(A[1] + '0'), ':', char(A[2] + '0'), char(A[3] + '0')};
        }
        while(next_permutation(A.begin(), A.end()));
        return res;
    }
};


// Source https://leetcode.com/problems/reveal-cards-in-increasing-order/

You are given an integer array deck. There is a deck of cards where every card has a unique integer. The integer on the ith card is deck[i].

You can order the deck in any order you want. Initially, all the cards start face down (unrevealed) in one deck.

You will do the following steps repeatedly until all cards are revealed:

Take the top card of the deck, reveal it, and take it out of the deck.
If there are still cards in the deck then put the next top card of the deck at the bottom of the deck.
If there are still unrevealed cards, go back to step 1. Otherwise, stop.
Return an ordering of the deck that would reveal the cards in increasing order.

Note that the first entry in the answer is considered to be the top of the deck.

 

Example 1:

Input: deck = [17,13,11,2,3,5,7]
Output: [2,13,3,11,5,17,7]
Explanation: 
We get the deck in the order [17,13,11,2,3,5,7] (this order does not matter), and reorder it.
After reordering, the deck starts as [2,13,3,11,5,17,7], where 2 is the top of the deck.
We reveal 2, and move 13 to the bottom.  The deck is now [3,11,5,17,7,13].
We reveal 3, and move 11 to the bottom.  The deck is now [5,17,7,13,11].
We reveal 5, and move 17 to the bottom.  The deck is now [7,13,11,17].
We reveal 7, and move 13 to the bottom.  The deck is now [11,17,13].
We reveal 11, and move 17 to the bottom.  The deck is now [13,17].
We reveal 13, and move 17 to the bottom.  The deck is now [17].
We reveal 17.
Since all the cards revealed are in increasing order, the answer is correct.
Example 2:

Input: deck = [1,1000]
Output: [1,1000]
 

Constraints:

1 <= deck.length <= 1000
1 <= deck[i] <= 106
All the values of deck are unique.

class Solution
{
public:
    vector<int> deckRevealedIncreasing(vector<int> &deck)
    {
        int n = deck.size();
        vector<int> res(n);
        queue<int> q;
        sort(deck.begin(), deck.end());
        for (int i = 0; i < n; ++i) q.push(i);
        for (int i = 0; i < n; ++i)
        {
            int t = q.front();
            q.pop();
            res[t] = deck[i];
            if (i == n - 1) break;
            int next = q.front();
            q.pop();
            q.push(next);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/flip-equivalent-binary-trees/

For a binary tree T, we can define a flip operation as follows: choose any node, and swap the left and right child subtrees.

A binary tree X is flip equivalent to a binary tree Y if and only if we can make X equal to Y after some number of flip operations.

Given the roots of two binary trees root1 and root2, return true if the two trees are flip equivalent or false otherwise.

 

Example 1:

Flipped Trees Diagram
Input: root1 = [1,2,3,4,5,6,null,null,null,7,8], root2 = [1,3,2,null,6,4,5,null,null,null,null,8,7]
Output: true
Explanation: We flipped at nodes with values 1, 3, and 5.
Example 2:

Input: root1 = [], root2 = []
Output: true
Example 3:

Input: root1 = [], root2 = [1]
Output: false
 

Constraints:

The number of nodes in each tree is in the range [0, 100].
Each tree will have unique node values in the range [0, 99].

class Solution
{
public:
    bool flipEquiv(TreeNode *root1, TreeNode *root2)
    {
        if (!root1 && !root2) return true;
        if (!root1 || !root2) return false;
        if (root1->val != root2->val) return false;
        return (flipEquiv(root1->left, root2->left) && flipEquiv(root1->right, root2->right)) || (flipEquiv(root1->left, root2->right) && flipEquiv(root1->right, root2->left));
    }
};


// Source https://leetcode.com/problems/largest-component-size-by-common-factor/

You are given an integer array of unique positive integers nums. Consider the following graph:

There are nums.length nodes, labeled nums[0] to nums[nums.length - 1],
There is an undirected edge between nums[i] and nums[j] if nums[i] and nums[j] share a common factor greater than 1.
Return the size of the largest connected component in the graph.

 

Example 1:


Input: nums = [4,6,15,35]
Output: 4
Example 2:


Input: nums = [20,50,9,63]
Output: 2
Example 3:


Input: nums = [2,3,6,7,4,12,21,39]
Output: 8
 

Constraints:

1 <= nums.length <= 2 * 104
1 <= nums[i] <= 105
All the values of nums are unique.

class Solution
{
public:
    int find(vector<int> &root, int x)
    {
        if (root[x] != x) root[x] = find(root, root[x]);
        return root[x];
    }

    int largestComponentSize(vector<int> &A)
    {
        int mx = 0;
        unordered_map<int, int> m;
        for (int num : A) mx = max(mx, num);
        vector<int> root(mx + 1);
        for (int i = 1; i <= mx; ++i) root[i] = i;
        for (int num : A)
        {
            for (int d = sqrt(num); d >= 2; --d)
            {
                if (num % d == 0)
                {
                    root[find(root, num)] = find(root, d);
                    root[find(root, num)] = find(root, num / d);
                }
            }
        }
        int res = 0;
        for (int num : A)
        {
            res = max(res, ++m[find(root, num)]);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/verifying-an-alien-dictionary/

In an alien language, surprisingly, they also use English lowercase letters, but possibly in a different order. The order of the alphabet is some permutation of lowercase letters.

Given a sequence of words written in the alien language, and the order of the alphabet, return true if and only if the given words are sorted lexicographically in this alien language.

 

Example 1:

Input: words = ["hello","leetcode"], order = "hlabcdefgijkmnopqrstuvwxyz"
Output: true
Explanation: As 'h' comes before 'l' in this language, then the sequence is sorted.
Example 2:

Input: words = ["word","world","row"], order = "worldabcefghijkmnpqstuvxyz"
Output: false
Explanation: As 'd' comes after 'l' in this language, then words[0] > words[1], hence the sequence is unsorted.
Example 3:

Input: words = ["apple","app"], order = "abcdefghijklmnopqrstuvwxyz"
Output: false
Explanation: The first three characters "app" match, and the second string is shorter (in size.) According to lexicographical rules "apple" > "app", because 'l' > '∅', where '∅' is defined as the blank character which is less than any other character (More info).
 

Constraints:

1 <= words.length <= 100
1 <= words[i].length <= 20
order.length == 26
All characters in words[i] and order are English lowercase letters.

class Solution
{
public:
    bool isAlienSorted(vector<string> &words, string order)
    {
        unordered_map<char, int> charMap;
        for (int i = 0; i < order.size(); ++i)
        {
            charMap[order[i]] = i;
        }
        for (int i = 1; i < words.size(); ++i)
        {
            string &word1 = words[i - 1];
            string &word2 = words[i];
            int n1 = word1.size(), n2 = word2.size();
            for (int j = 0; j < n1 && j < n2; ++j)
            {
                if (word1[j] == word2[j]) continue;
                if (charMap[word1[j]] > charMap[word2[j]]) return false;
                else break;
            }
            if (n1 > n2 && word1.substr(0, n2) == word2) return false;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/array-of-doubled-pairs/

Given an integer array of even length arr, return true if it is possible to reorder arr such that arr[2 * i + 1] = 2 * arr[2 * i] for every 0 <= i < len(arr) / 2, or false otherwise.

 

Example 1:

Input: arr = [3,1,3,6]
Output: false
Example 2:

Input: arr = [2,1,2,6]
Output: false
Example 3:

Input: arr = [4,-2,2,-4]
Output: true
Explanation: We can take two groups, [-2,-4] and [2,4] to form [-2,-4,2,4] or [2,4,-2,-4].
 

Constraints:

2 <= arr.length <= 3 * 104
arr.length is even.
-105 <= arr[i] <= 105

class Solution
{
public:
    bool canReorderDoubled(vector<int> &A)
    {
        map<int, int> m;
        for (int num : A) ++m[num];
        for (auto a : m)
        {
            if (a.second == 0) continue;
            if (a.first < 0 && a.first % 2 != 0) return false;
            int want = a.first < 0 ? a.first / 2 : a.first * 2;
            if (a.second > m[want]) return false;
            m[want] -= a.second;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/delete-columns-to-make-sorted-ii/

You are given an array of n strings strs, all of the same length.

We may choose any deletion indices, and we delete all the characters in those indices for each string.

For example, if we have strs = ["abcdef","uvwxyz"] and deletion indices {0, 2, 3}, then the final array after deletions is ["bef", "vyz"].

Suppose we chose a set of deletion indices answer such that after deletions, the final array has its elements in lexicographic order (i.e., strs[0] <= strs[1] <= strs[2] <= ... <= strs[n - 1]). 
Return the minimum possible value of answer.length.

 

Example 1:

Input: strs = ["ca","bb","ac"]
Output: 1
Explanation: 
After deleting the first column, strs = ["a", "b", "c"].
Now strs is in lexicographic order (ie. strs[0] <= strs[1] <= strs[2]).
We require at least 1 deletion since initially strs was not in lexicographic order, so the answer is 1.
Example 2:

Input: strs = ["xc","yb","za"]
Output: 0
Explanation: 
strs is already in lexicographic order, so we do not need to delete anything.
Note that the rows of strs are not necessarily in lexicographic order:
i.e., it is NOT necessarily true that (strs[0][0] <= strs[0][1] <= ...)
Example 3:

Input: strs = ["zyx","wvu","tsr"]
Output: 3
Explanation: We have to delete every column.
 

Constraints:

n == strs.length
1 <= n <= 100
1 <= strs[i].length <= 100
strs[i] consists of lowercase English letters.

class Solution
{
public:
    int minDeletionSize(vector<string> &A)
    {
        int res = 0, m = A.size(), n = A[0].size(), i = 0, j = 0;
        vector<int> sorted(m - 1);
        for (j = 0; j < n; ++j)
        {
            for (i = 0; i < m - 1; ++i)
            {
                if (!sorted[i] && A[i][j] > A[i + 1][j])
                {
                    ++res;
                    break;
                }
            }
            if (i < m - 1) continue;
            for (i = 0; i < m - 1; ++i)
            {
                sorted[i] |= (A[i][j] < A[i + 1][j]);
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/tallest-billboard/

You are installing a billboard and want it to have the largest height. The billboard will have two steel supports, one on each side. Each steel support must be an equal height.

You are given a collection of rods that can be welded together. For example, if you have rods of lengths 1, 2, and 3, you can weld them together to make a support of length 6.

Return the largest possible height of your billboard installation. If you cannot support the billboard, return 0.

 

Example 1:

Input: rods = [1,2,3,6]
Output: 6
Explanation: We have two disjoint subsets {1,2,3} and {6}, which have the same sum = 6.
Example 2:

Input: rods = [1,2,3,4,5,6]
Output: 10
Explanation: We have two disjoint subsets {2,3,5} and {4,6}, which have the same sum = 10.
Example 3:

Input: rods = [1,2]
Output: 0
Explanation: The billboard cannot be supported, so we return 0.
 

Constraints:

1 <= rods.length <= 20
1 <= rods[i] <= 1000
sum(rods[i]) <= 5000

dp[idx][diff + 5000] 表示rods 前idx个的选择情况已经确定，并且左边的高度与右边的高度差为diff，
当前还剩rods[idx ... n - 1]可供选择，使得左边的高度与右边的高度差变为0，左边的高度最多可增加的值

class Solution
{
public:
    int n;
    int dp[21][10001];

    int recur(vector<int> &rods, int idx, int diff)
    {
        if(idx >= n) return diff == 0 ? 0 : INT_MIN;
        if(dp[idx][diff + 5000] != -1) return dp[idx][diff + 5000];
        int res = recur(rods, idx + 1, diff);
        res = max(res, recur(rods, idx + 1, diff - rods[idx]));
        res = max(res, recur(rods, idx + 1, diff + rods[idx]) + rods[idx]);
        return dp[idx][diff + 5000] = res;
    }

    int tallestBillboard(vector<int> &rods)
    {
        n = rods.size();
        memset(dp, -1, sizeof(dp));
        return recur(rods, 0, 0);
    }
};


// Source https://leetcode.com/problems/prison-cells-after-n-days/

There are 8 prison cells in a row and each cell is either occupied or vacant.

Each day, whether the cell is occupied or vacant changes according to the following rules:

If a cell has two adjacent neighbors that are both occupied or both vacant, then the cell becomes occupied.
Otherwise, it becomes vacant.
Note that because the prison is a row, the first and the last cells in the row can't have two adjacent neighbors.

You are given an integer array cells where cells[i] == 1 if the ith cell is occupied and cells[i] == 0 if the ith cell is vacant, and you are given an integer n.

Return the state of the prison after n days (i.e., n such changes described above).

 

Example 1:

Input: cells = [0,1,0,1,1,0,0,1], n = 7
Output: [0,0,1,1,0,0,0,0]
Explanation: The following table summarizes the state of the prison on each day:
Day 0: [0, 1, 0, 1, 1, 0, 0, 1]
Day 1: [0, 1, 1, 0, 0, 0, 0, 0]
Day 2: [0, 0, 0, 0, 1, 1, 1, 0]
Day 3: [0, 1, 1, 0, 0, 1, 0, 0]
Day 4: [0, 0, 0, 0, 0, 1, 0, 0]
Day 5: [0, 1, 1, 1, 0, 1, 0, 0]
Day 6: [0, 0, 1, 0, 1, 1, 0, 0]
Day 7: [0, 0, 1, 1, 0, 0, 0, 0]
Example 2:

Input: cells = [1,0,0,1,0,0,1,0], n = 1000000000
Output: [0,0,1,1,1,1,1,0]
 

Constraints:

cells.length == 8
cells[i] is either 0 or 1.
1 <= n <= 109

一个只由0和1构成的数组，长度固定为8，现在要进行N步变换，变换的规则是若一个位置的左右两边的数字相同，则该位置的数字变为1，反之则变为0，让求N步变换后的数组的状态。
需要注意的数组的开头和结尾的两个位置，由于一个没有左边，一个没有右边，默认其左右两边的数字不相等，所以不管首尾数字初始的时候是啥，在第一次变换之后一定会是0，而且一直会保持0的状态。

class Solution
{
public:
    vector<int> prisonAfterNDays(vector<int> &cells, int N)
    {
        vector<int> res;
        string str;
        for (int num : cells) str.push_back(num + '0');
        unordered_map<string, int> m;
        m[str] = N;
        while (N > 0)
        {
            string cur(8, '0');
            for (int i = 1; i < 7; ++i)
            {
                cur[i] = (str[i - 1] == str[i + 1]) ? '1' : '0';
            }
            --N;
            if (m.count(cur))
            {
                N %= m[cur] - N;
            }
            else
            {
                m[cur] = N;
            }
            str = cur;
        }
        for (char c : str) res.push_back(c - '0');
        return res;
    }
};



// Source https://leetcode.com/problems/check-completeness-of-a-binary-tree/

Given the root of a binary tree, determine if it is a complete binary tree.

In a complete binary tree, every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. 
It can have between 1 and 2^h nodes inclusive at the last level h.

 

Example 1:


Input: root = [1,2,3,4,5,6]
Output: true
Explanation: Every level before the last is full (ie. levels with node-values {1} and {2, 3}), and all nodes in the last level ({4, 5, 6}) are as far left as possible.
Example 2:


Input: root = [1,2,3,4,5,null,7]
Output: false
Explanation: The node with value 7 isn't as far left as possible.
 

Constraints:

The number of nodes in the tree is in the range [1, 100].
1 <= Node.val <= 1000

class Solution
{
public:
    bool isCompleteTree(TreeNode *root)
    {
        queue<TreeNode *> q;
        bool found = false;
        q.push(root);
        while (!q.empty())
        {
            TreeNode *cur = q.front();
            q.pop();
            if (!cur)
            {
                found = true;
                continue;
            }
            if (found) return false;
            q.push(cur->left);
            q.push(cur->right);
        }
        return true;
    }
};


// Source https://leetcode.com/problems/regions-cut-by-slashes/

An n x n grid is composed of 1 x 1 squares where each 1 x 1 square consists of a '/', '\', or blank space ' '. These characters divide the square into contiguous regions.

Given the grid grid represented as a string array, return the number of regions.

Note that backslash characters are escaped, so a '\' is represented as '\\'.

 

Example 1:


Input: grid = [" /","/ "]
Output: 2
Example 2:


Input: grid = [" /","  "]
Output: 1
Example 3:


Input: grid = ["/\\","\\/"]
Output: 5
Explanation: Recall that because \ characters are escaped, "\\/" refers to \/, and "/\\" refers to /\.
 

Constraints:

n == grid.length == grid[i].length
1 <= n <= 30
grid[i][j] is either '/', '\', or ' '.

将每个小区间化为九个小格子，这样斜杠或者反斜杠就是对角线或者逆对角线了，这样只要把斜杠的位置都标记为1，而空白的位置都标记为0，这样只要找出分隔开的0的群组的个数就可以了

class Solution
{
public:
    int n, m;

    int regionsBySlashes(vector<string> &grid)
    {
        n = grid.size();
        m = 3 * n;
        vector<vector<int>> nums(m, vector<int>(m));
        for (int i = 0; i < n; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                if (grid[i][j] == '/')
                {
                    nums[i * 3][j * 3 + 2] = 1;
                    nums[i * 3 + 1][j * 3 + 1] = 1;
                    nums[i * 3 + 2][j * 3] = 1;
                }
                else if (grid[i][j] == '\\')
                {
                    nums[i * 3][j * 3] = 1;
                    nums[i * 3 + 1][j * 3 + 1] = 1;
                    nums[i * 3 + 2][j * 3 + 2] = 1;
                }
            }
        }
        int res = 0;
        for (int i = 0; i < m; ++i)
        {
            for (int j = 0; j < m; ++j)
            {
                if (nums[i][j] == 0)
                {
                    helper(nums, i, j);
                    ++res;
                }
            }
        }
        return res;
    }

    void helper(vector<vector<int>> &nums, int i, int j)
    {
        if (i < 0 || i >= m || j < 0 || j >= m || nums[i][j] == 1) return;
        nums[i][j] = 1;
        helper(nums, i - 1, j);
        helper(nums, i, j + 1);
        helper(nums, i + 1, j);
        helper(nums, i, j - 1);
    }
};


// Source https://leetcode.com/problems/delete-columns-to-make-sorted-iii/

You are given an array of n strings strs, all of the same length.

We may choose any deletion indices, and we delete all the characters in those indices for each string.

For example, if we have strs = ["abcdef","uvwxyz"] and deletion indices {0, 2, 3}, then the final array after deletions is ["bef", "vyz"].

Suppose we chose a set of deletion indices answer such that after deletions, the final array has every string (row) in lexicographic order. 
(i.e., (strs[0][0] <= strs[0][1] <= ... <= strs[0][strs[0].length - 1]), and (strs[1][0] <= strs[1][1] <= ... <= strs[1][strs[1].length - 1]), and so on). 
Return the minimum possible value of answer.length.

 

Example 1:

Input: strs = ["babca","bbazb"]
Output: 3
Explanation: After deleting columns 0, 1, and 4, the final array is strs = ["bc", "az"].
Both these rows are individually in lexicographic order (ie. strs[0][0] <= strs[0][1] and strs[1][0] <= strs[1][1]).
Note that strs[0] > strs[1] - the array strs is not necessarily in lexicographic order.
Example 2:

Input: strs = ["edcba"]
Output: 4
Explanation: If we delete less than 4 columns, the only row will not be lexicographically sorted.
Example 3:

Input: strs = ["ghi","def","abc"]
Output: 0
Explanation: All rows are already lexicographically sorted.
 

Constraints:

n == strs.length
1 <= n <= 100
1 <= strs[i].length <= 100
strs[i] consists of lowercase English letters.

class Solution
{
public:
    int n, m;
    int dp[105][105];

    bool check(vector<string> &strs, int prev, int curr)
    {
        if(prev < 0) return true;
        for(int i = 0; i < n; i++)
        {
            if(strs[i][prev] > strs[i][curr])
            {
                return false;
            }
        }
        return true;
    }

    int recur(vector<string> &strs, int prev, int curr)
    {
        if(curr == m) return 0;
        if(prev != -1 && dp[prev][curr] != -1) return dp[prev][curr];
        int dels = INT_MAX;
        if(check(strs, prev, curr)) dels = min(dels, recur(strs, curr, curr + 1));
        dels = min(dels, 1 + recur(strs, prev, curr + 1));
        if(prev != -1) dp[prev][curr] = dels;
        return dels;
    }

    int minDeletionSize(vector<string> &strs)
    {
        n = strs.size();
        m = strs[0].length();
        memset(dp, -1, sizeof(dp));
        return recur(strs, -1, 0);
    }
};


// Source https://leetcode.com/problems/n-repeated-element-in-size-2n-array/

You are given an integer array nums with the following properties:

nums.length == 2 * n.
nums contains n + 1 unique elements.
Exactly one element of nums is repeated n times.
Return the element that is repeated n times.

 

Example 1:

Input: nums = [1,2,3,3]
Output: 3
Example 2:

Input: nums = [2,1,2,5,3,2]
Output: 2
Example 3:

Input: nums = [5,1,5,2,5,3,5,4]
Output: 5
 

Constraints:

2 <= n <= 5000
nums.length == 2 * n
0 <= nums[i] <= 104
nums contains n + 1 unique elements and one of them is repeated exactly n times.

class Solution
{
public:
    int repeatedNTimes(vector<int> &A)
    {
        int n = A.size();
        unordered_map<int, int> numCnt;
        for (int num : A)
        {
            if (++numCnt[num] > 1) return num;
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/maximum-width-ramp/

A ramp in an integer array nums is a pair (i, j) for which i < j and nums[i] <= nums[j]. The width of such a ramp is j - i.

Given an integer array nums, return the maximum width of a ramp in nums. If there is no ramp in nums, return 0.

 

Example 1:

Input: nums = [6,0,8,2,1,5]
Output: 4
Explanation: The maximum width ramp is achieved at (i, j) = (1, 5): nums[1] = 0 and nums[5] = 5.
Example 2:

Input: nums = [9,8,1,0,1,9,4,0,4,1]
Output: 7
Explanation: The maximum width ramp is achieved at (i, j) = (2, 9): nums[2] = 1 and nums[9] = 1.
 

Constraints:

2 <= nums.length <= 5 * 104
0 <= nums[i] <= 5 * 104

class Solution
{
public:
    
    int maxWidthRamp(vector<int> &nums)
    {
        int res = 0;
        stack<int> st;
        for(int i = 0; i < nums.size(); i++)
        {
            if(st.empty() || nums[st.top()] > nums[i])
            {
                st.push(i);
            }
        }
        for(int i = nums.size() - 1; i >= 0; i--)
        {
            while(!st.empty() && nums[st.top()] <= nums[i])
            {
                res = max(res, i - st.top());
                st.pop();
            }
            if (st.empty()) break;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/minimum-area-rectangle-ii/

You are given an array of points in the X-Y plane points where points[i] = [xi, yi].

Return the minimum area of any rectangle formed from these points, with sides not necessarily parallel to the X and Y axes. If there is not any such rectangle, return 0.

Answers within 10-5 of the actual answer will be accepted.

 

Example 1:


Input: points = [[1,2],[2,1],[1,0],[0,1]]
Output: 2.00000
Explanation: The minimum area rectangle occurs at [1,2],[2,1],[1,0],[0,1], with an area of 2.
Example 2:


Input: points = [[0,1],[2,1],[1,1],[1,0],[2,0]]
Output: 1.00000
Explanation: The minimum area rectangle occurs at [1,0],[1,1],[2,1],[2,0], with an area of 1.
Example 3:


Input: points = [[0,3],[1,2],[3,1],[1,3],[2,1]]
Output: 0
Explanation: There is no possible rectangle to form from these points.
 

Constraints:

1 <= points.length <= 50
points[i].length == 2
0 <= xi, yi <= 4 * 104
All the given points are unique.

矩形的两条对角线长度是相等的，而且相交于矩形的中心，这个中心可以通过对角线的两个顶点的坐标求出来。
只要找到了两组顶点，它们的中心重合，并且表示的对角线长度相等，则一定可以组成矩形。

class Solution
{
public:
    long getLength(vector<int> &pt1, vector<int> &pt2)
    {
        return (pt1[0] - pt2[0]) * (pt1[0] - pt2[0]) + (pt1[1] - pt2[1]) * (pt1[1] - pt2[1]);
    }

    double minAreaFreeRect(vector<vector<int>> &points)
    {
        int n = points.size();
        if (n < 4) return 0.0;
        double res = DBL_MAX;
        unordered_map<string, vector<pair<int, int>>> m;
        for (int i = 0; i < n; ++i)
        {
            for (int j = i + 1; j < n; ++j)
            {
                long dist = getLength(points[i], points[j]);
                double centerX = (points[i][0] + points[j][0]) / 2.0;
                double centerY = (points[i][1] + points[j][1]) / 2.0;
                string key = to_string(dist) + "_" + to_string(centerX) + "_" + to_string(centerY);
                m[key].push_back({i, j});
            }
        }
        for (auto &a : m)
        {
            auto &vec = a.second;
            if (vec.size() < 2) continue;
            for (int i = 0; i < vec.size(); ++i)
            {
                for (int j = i + 1; j < vec.size(); ++j)
                {
                    int p1 = vec[i].first, p2 = vec[j].first, p3 = vec[j].second;
                    double len1 = sqrt(getLength(points[p1], points[p2]));
                    double len2 = sqrt(getLength(points[p1], points[p3]));
                    res = min(res, len1 * len2);
                }
            }
        }
        return res == DBL_MAX ? 0.0 : res;
    }
};


// Source https://leetcode.com/problems/least-operators-to-express-number/

Given a single positive integer x, we will write an expression of the form x (op1) x (op2) x (op3) x ... 
where each operator op1, op2, etc. is either addition, subtraction, multiplication, or division (+, -, *, or /). 
For example, with x = 3, we might write 3 * 3 / 3 + 3 - 3 which is a value of 3.

When writing such an expression, we adhere to the following conventions:

The division operator (/) returns rational numbers.
There are no parentheses placed anywhere.
We use the usual order of operations: multiplication and division happen before addition and subtraction.
It is not allowed to use the unary negation operator (-). For example, "x - x" is a valid expression as it only uses subtraction, but "-x + x" is not because it uses negation.
We would like to write an expression with the least number of operators such that the expression equals the given target. Return the least number of operators used.

 

Example 1:

Input: x = 3, target = 19
Output: 5
Explanation: 3 * 3 + 3 * 3 + 3 / 3.
The expression contains 5 operations.
Example 2:

Input: x = 5, target = 501
Output: 8
Explanation: 5 * 5 * 5 * 5 - 5 * 5 * 5 + 5 / 5.
The expression contains 8 operations.
Example 3:

Input: x = 100, target = 100000000
Output: 3
Explanation: 100 * 100 * 100 * 100.
The expression contains 3 operations.
 

Constraints:

2 <= x <= 100
1 <= target <= 2 * 108

若 x 等于 target，不用加任何运算符，返回0即可。

若 x 大于 target，比如 x=5，target=3，我们其实可以迅速的求出运算符的个数，因为5比3大，要凑3就只能先变成1，这里就有两种变法，
一种是全部都变成1，然后来凑3，即 5/5 + 5/5 + 5/5，这时的运算符个数是 target * 2 -1，因为加号的个数总是比除号少一个。
另一种凑法就是 5 - 5/5 - 5/5，这时候的运算符个数是 (x - target) * 2，此时的减号和除号的个数相同，均为x和 target 的差值。

若 x 小于 target，由于不知道x到底比 target 小多少，若差距太大的话，肯定不能用加号，所以应该先用乘号来让x变大，直到刚好大于等于 target 停止，并每次增加次数 cnt。
若此时 sum 正好等于 target，太幸运了，直接返回 cnt。但通常情况下 sum 会大于 target，此时 sum - target 的差值就需要另行计算了。
这里差值跟 target 的大小关系又要分为两种情况来讨论，当 sum - target < target 时，比如 x=5，sum=25，target=15，则 sum - target=10，
就是说现在已经乘到了 25，但需要再减去 10，这个差值 10 可以再次调用原函数来计算，此时新的 target 代入 10 即可，记得返回值要加上 cnt。
另一种凑的方法，由于 sum 超过了 target，所以回退一个x，变成 sum / x，此时小于 target，那么它们的差值 target - (sum / x) 就可以通过再次调用函数来计算，
注意这里加上 cnt 之后还要减去1，因为回退了一个x，少了一个乘号。最终二者的较小值即为所求，记得要加上个1，因为多加了1个加法或减法运算符

class Solution
{
public:
    unordered_map<int, int> dp;

    int recur(int x, int target)
    {
        if (x == target) return 0;
        if (x > target)
        {
            return min(target * 2 - 1, (x - target) * 2);
        }
        if(dp.find(target) != dp.end()) return dp[target];
        long sum = x;
        int cnt = 0;
        while (sum < target)
        {
            sum *= x;
            ++cnt;
        }
        if (sum == target) return cnt;
        int res1 = INT_MAX, res2 = INT_MAX;
        if (sum - target < target)
        {
            res1 = recur(x, sum - target) + cnt + 1; // 最后的1为多加的1个减法运算符
        }
        res2 = recur(x, target - (sum / x)) + cnt - 1 + 1; // 最后的1为多加的1个加法运算符
        return dp[target] = min(res1, res2);
    }

    int leastOpsExpressTarget(int x, int target)
    {
        return recur(x, target);
    }
};


// Source https://leetcode.com/problems/univalued-binary-tree/

A binary tree is uni-valued if every node in the tree has the same value.

Given the root of a binary tree, return true if the given tree is uni-valued, or false otherwise.

 

Example 1:


Input: root = [1,1,1,1,1,null,1]
Output: true
Example 2:


Input: root = [2,2,2,5,2]
Output: false
 

Constraints:

The number of nodes in the tree is in the range [1, 100].
0 <= Node.val < 100

class Solution
{
public:
    bool isUnivalTree(TreeNode *root)
    {
        return helper(root, root->val);
    }
    bool helper(TreeNode *node, int val)
    {
        if (!node) return true;
        if (node->val != val) return false;
        return helper(node->left, val) && helper(node->right, val);
    }
};


// Source https://leetcode.com/problems/vowel-spellchecker/

Given a wordlist, we want to implement a spellchecker that converts a query word into a correct word.

For a given query word, the spell checker handles two categories of spelling mistakes:

Capitalization: If the query matches a word in the wordlist (case-insensitive), then the query word is returned with the same case as the case in the wordlist.
Example: wordlist = ["yellow"], query = "YellOw": correct = "yellow"
Example: wordlist = ["Yellow"], query = "yellow": correct = "Yellow"
Example: wordlist = ["yellow"], query = "yellow": correct = "yellow"
Vowel Errors: If after replacing the vowels ('a', 'e', 'i', 'o', 'u') of the query word with any vowel individually, it matches a word in the wordlist (case-insensitive), 
then the query word is returned with the same case as the match in the wordlist.
Example: wordlist = ["YellOw"], query = "yollow": correct = "YellOw"
Example: wordlist = ["YellOw"], query = "yeellow": correct = "" (no match)
Example: wordlist = ["YellOw"], query = "yllw": correct = "" (no match)
In addition, the spell checker operates under the following precedence rules:

When the query exactly matches a word in the wordlist (case-sensitive), you should return the same word back.
When the query matches a word up to capitlization, you should return the first such match in the wordlist.
When the query matches a word up to vowel errors, you should return the first such match in the wordlist.
If the query has no matches in the wordlist, you should return the empty string.
Given some queries, return a list of words answer, where answer[i] is the correct word for query = queries[i].

 

Example 1:

Input: wordlist = ["KiTe","kite","hare","Hare"], queries = ["kite","Kite","KiTe","Hare","HARE","Hear","hear","keti","keet","keto"]
Output: ["kite","KiTe","KiTe","Hare","hare","","","KiTe","","KiTe"]
Example 2:

Input: wordlist = ["yellow"], queries = ["YellOw"]
Output: ["yellow"]
 

Constraints:

1 <= wordlist.length, queries.length <= 5000
1 <= wordlist[i].length, queries[i].length <= 7
wordlist[i] and queries[i] consist only of only English letters.

class Solution
{
public:
    vector<string> spellchecker(vector<string> &wordlist, vector<string> &queries)
    {
        vector<string> res;
        unordered_set<string> st;
        unordered_map<string, string> m1;
        unordered_map<string, string> m2;
        for (int i = 0; i < wordlist.size(); ++i)
        {
            string word = wordlist[i];
            st.insert(word);
            transform(word.begin(), word.end(), word.begin(), ::tolower);
            if (!m1.count(word)) m1[word] = wordlist[i];
            for (char &c : word)
            {
                if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') c = '_';
            }
            if (!m2.count(word)) m2[word] = wordlist[i];
        }
        for (string query : queries)
        {
            if (st.count(query))
            {
                res.push_back(query);
                continue;
            }
            transform(query.begin(), query.end(), query.begin(), ::tolower);
            if (m1.count(query))
            {
                res.push_back(m1[query]);
                continue;
            }
            for (char &c : query)
            {
                if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') c = '_';
            }
            if (m2.count(query))
            {
                res.push_back(m2[query]);
                continue;
            }
            res.push_back("");
        }
        return res;
    }
};


// Source https://leetcode.com/problems/numbers-with-same-consecutive-differences/

Return all non-negative integers of length n such that the absolute difference between every two consecutive digits is k.

Note that every number in the answer must not have leading zeros. For example, 01 has one leading zero and is invalid.

You may return the answer in any order.

 

Example 1:

Input: n = 3, k = 7
Output: [181,292,707,818,929]
Explanation: Note that 070 is not a valid number, because it has leading zeroes.
Example 2:

Input: n = 2, k = 1
Output: [10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]
 

Constraints:

2 <= n <= 9
0 <= k <= 9

class Solution
{
public:
    vector<int> numsSameConsecDiff(int n, int k)
    {
        vector<int> res{1, 2, 3, 4, 5, 6, 7, 8, 9};
        for (int i = 1; i < n; ++i)
        {
            vector<int> cur;
            for (int num : res)
            {
                int digit = num % 10;
                if (digit + k <= 9) cur.push_back(num * 10 + digit + k);
                // 判断k不等于0的原因是为了避免 digit+k 和 digit-k 相等，从而产生重复结果。
                if (k != 0 && digit - k >= 0) cur.push_back(num * 10 + digit - k);
            }
            swap(res, cur);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/binary-tree-cameras/

You are given the root of a binary tree. We install cameras on the tree nodes where each camera at a node can monitor its parent, itself, and its immediate children.

Return the minimum number of cameras needed to monitor all nodes of the tree.

 

Example 1:


Input: root = [0,0,null,0,0]
Output: 1
Explanation: One camera is enough to monitor all nodes if placed as shown.
Example 2:


Input: root = [0,0,null,0,null,0,null,null,0]
Output: 2
Explanation: At least two cameras are needed to monitor all nodes of the tree. The above image shows one of the valid configurations of camera placement.
 

Constraints:

The number of nodes in the tree is in the range [1, 1000].
Node.val == 0

摄像机放在叶结点的父结点上，这样最多可以拍到四个结点（当前结点本身，父结点，左右两个子结点）。所以策略应该是先找到叶结点，然后在其父结点放上相机，同时标记父结点的父结点为被拍到了。
这样就有3种不同的状态，用0来表示当前结点是叶结点，1表示当前结点是叶结点的父结点，并被放置了相机，2表示当前结点的是叶结点的爷爷结点，并被相机拍到了。
这里使用一个子函数，将全局变量 res 传进去，用来记录放置的相机的总个数。在递归函数中，若当前结点不存在，则返回2，空结点也可看作已经被相机拍到了。
否则分别对左右子结点调用递归函数，若二者中有一个返回0了，当前结点至少有一个子结点是叶结点，需要在当前位置放一个相机，结果 res 自增1，并返回1。
否则若左右子结点的返回值有一个为1，说明左右子结点中至少有一个已经被放上了相机，当前结点已经被拍到了，返回2。
若都不是，则说明当前结点是叶结点，返回0。在主函数中，若对根结点调用递归的返回值是0，说明根结点是叶结点，此时没有办法，只能在叶结点上放个相机了，所以要加上1，否则不用加

class Solution
{
public:
    int minCameraCover(TreeNode *root)
    {
        int res = 0;
        int type = helper(root, res);
        if (type == 0) ++res;
        return res;
    }

    int helper(TreeNode *node, int &res)
    {
        if (!node) return 2;
        int left = helper(node->left, res), right = helper(node->right, res);
        if (left == 0 || right == 0)
        {
            ++res;
            return 1;
        }
        return (left == 1 || right == 1) ? 2 : 0;
    }
};


// Source https://leetcode.com/problems/pancake-sorting/

Given an array of integers arr, sort the array by performing a series of pancake flips.

In one pancake flip we do the following steps:

Choose an integer k where 1 <= k <= arr.length.
Reverse the sub-array arr[0...k-1] (0-indexed).
For example, if arr = [3,2,1,4] and we performed a pancake flip choosing k = 3, we reverse the sub-array [3,2,1], so arr = [1,2,3,4] after the pancake flip at k = 3.

Return an array of the k-values corresponding to a sequence of pancake flips that sort arr. Any valid answer that sorts the array within 10 * arr.length flips will be judged as correct.

 

Example 1:

Input: arr = [3,2,4,1]
Output: [4,2,4,3]
Explanation: 
We perform 4 pancake flips, with k values 4, 2, 4, and 3.
Starting state: arr = [3, 2, 4, 1]
After 1st flip (k = 4): arr = [1, 4, 2, 3]
After 2nd flip (k = 2): arr = [4, 1, 2, 3]
After 3rd flip (k = 4): arr = [3, 2, 1, 4]
After 4th flip (k = 3): arr = [1, 2, 3, 4], which is sorted.
Example 2:

Input: arr = [1,2,3]
Output: []
Explanation: The input is already sorted, so there is no need to flip anything.
Note that other answers, such as [3, 3], would also be accepted.
 

Constraints:

1 <= arr.length <= 100
1 <= arr[i] <= arr.length
All integers in arr are unique (i.e. arr is a permutation of the integers from 1 to arr.length).

class Solution
{
public:
    vector<int> pancakeSort(vector<int> &arr)
    {
        int n = arr.size();
        vector<int> res;
        for (int i = n; i >= 1; --i)
        {
            int j = 0;
            for (; arr[j] != i; ++j);
            reverse(arr.begin(), arr.begin() + j + 1);
            res.push_back(j + 1);
            reverse(arr.begin(), arr.begin() + i);
            res.push_back(i);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/powerful-integers/

Given three integers x, y, and bound, return a list of all the powerful integers that have a value less than or equal to bound.

An integer is powerful if it can be represented as x^i + y^j for some integers i >= 0 and j >= 0.

You may return the answer in any order. In your answer, each value should occur at most once.

 

Example 1:

Input: x = 2, y = 3, bound = 10
Output: [2,3,4,5,7,9,10]
Explanation:
2 = 20 + 30
3 = 21 + 30
4 = 20 + 31
5 = 21 + 31
7 = 22 + 31
9 = 23 + 30
10 = 20 + 32
Example 2:

Input: x = 3, y = 5, bound = 15
Output: [2,4,6,8,10,14]
 

Constraints:

1 <= x, y <= 100
0 <= bound <= 106

class Solution
{
public:
    vector<int> powerfulIntegers(int x, int y, int bound)
    {
        set<int> res;
        for (int a = 1; a < bound; a *= x)
        {
            for (int b = 1; a + b <= bound; b *= y)
            {
                res.insert(a + b);
                if (y == 1) break;
            }
            if (x == 1) break;
        }
        return vector<int>(res.begin(), res.end());
    }
};


// Source https://leetcode.com/problems/flip-binary-tree-to-match-preorder-traversal/

You are given the root of a binary tree with n nodes, where each node is uniquely assigned a value from 1 to n. 
You are also given a sequence of n values voyage, which is the desired pre-order traversal of the binary tree.

Any node in the binary tree can be flipped by swapping its left and right subtrees. For example, flipping node 1 will have the following effect:

		1					1
	2		3	      ->		3		2
		4		5	4		5

Flip the smallest number of nodes so that the pre-order traversal of the tree matches voyage.

Return a list of the values of all flipped nodes. You may return the answer in any order. 
If it is impossible to flip the nodes in the tree to make the pre-order traversal match voyage, return the list [-1].

 

Example 1:


Input: root = [1,2], voyage = [2,1]
Output: [-1]
Explanation: It is impossible to flip the nodes such that the pre-order traversal matches voyage.
Example 2:


Input: root = [1,2,3], voyage = [1,3,2]
Output: [1]
Explanation: Flipping node 1 swaps nodes 2 and 3, so the pre-order traversal matches voyage.
Example 3:


Input: root = [1,2,3], voyage = [1,2,3]
Output: []
Explanation: The tree's pre-order traversal already matches voyage, so no nodes need to be flipped.
 

Constraints:

The number of nodes in the tree is n.
n == voyage.length
1 <= n <= 100
1 <= Node.val, voyage[i] <= n
All the values in the tree are unique.
All the values in voyage are unique.

class Solution
{
public:
    int n;
    
    vector<int> flipMatchVoyage(TreeNode *root, vector<int> &voyage)
    {
        vector<int> res;
        n = voyage.size();
        int i = 0;
        bool temp = helper(root, voyage, i, res);
        if (temp && i == n) return res;
        return vector<int>{-1};
    }

    bool helper(TreeNode *node, vector<int> &voyage, int &i, vector<int> &res)
    {
        if (i == n) return true;
        if (!node) return true;
        if (node->val != voyage[i]) return false;
        ++i;
        if (node->left && node->left->val != voyage[i])
        {
            res.push_back(node->val);
            return helper(node->right, voyage, i, res) && helper(node->left, voyage, i, res);
        }
        return helper(node->left, voyage, i, res) && helper(node->right, voyage, i, res);
    }
};


// Source https://leetcode.com/problems/equal-rational-numbers/

Given two strings s and t, each of which represents a non-negative rational number, return true if and only if they represent the same number. 
The strings may use parentheses to denote the repeating part of the rational number.

A rational number can be represented using up to three parts: <IntegerPart>, <NonRepeatingPart>, and a <RepeatingPart>. 
The number will be represented in one of the following three ways:

<IntegerPart>
For example, 12, 0, and 123.
<IntegerPart><.><NonRepeatingPart>
For example, 0.5, 1., 2.12, and 123.0001.
<IntegerPart><.><NonRepeatingPart><(><RepeatingPart><)>
For example, 0.1(6), 1.(9), 123.00(1212).
The repeating portion of a decimal expansion is conventionally denoted within a pair of round brackets. For example:

1/6 = 0.16666666... = 0.1(6) = 0.1666(6) = 0.166(66).
 

Example 1:

Input: s = "0.(52)", t = "0.5(25)"
Output: true
Explanation: Because "0.(52)" represents 0.52525252..., and "0.5(25)" represents 0.52525252525..... , the strings represent the same number.
Example 2:

Input: s = "0.1666(6)", t = "0.166(66)"
Output: true
Example 3:

Input: s = "0.9(9)", t = "1."
Output: true
Explanation: "0.9(9)" represents 0.999999999... repeated forever, which equals 1.  [See this link for an explanation.]
"1." represents the number 1, which is formed correctly: (IntegerPart) = "1" and (NonRepeatingPart) = "".
 

Constraints:

Each part consists only of digits.
The <IntegerPart> does not have leading zeros (except for the zero itself).
1 <= <IntegerPart>.length <= 4
0 <= <NonRepeatingPart>.length <= 4
1 <= <RepeatingPart>.length <= 4

class Solution
{
public:
    bool isRationalEqual(string S, string T)
    {
        return helper(S) == helper(T);
    }
    double helper(string S)
    {
        auto i = S.find('(');
        if (i != string::npos)
        {
            string base = S.substr(0, i);
            string rep = S.substr(i + 1, (int)S.length() - i - 2);
            for (int k = 0; k < 20; ++k) base += rep;
            return stod(base);
        }
        return stod(S);
    }
};


// Source https://leetcode.com/problems/k-closest-points-to-origin/

Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane and an integer k, return the k closest points to the origin (0, 0).

The distance between two points on the X-Y plane is the Euclidean distance (i.e., √(x1 - x2)2 + (y1 - y2)2).

You may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in).

 

Example 1:


Input: points = [[1,3],[-2,2]], k = 1
Output: [[-2,2]]
Explanation:
The distance between (1, 3) and the origin is sqrt(10).
The distance between (-2, 2) and the origin is sqrt(8).
Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.
We only want the closest k = 1 points from the origin, so the answer is just [[-2,2]].
Example 2:

Input: points = [[3,3],[5,-1],[-2,4]], k = 2
Output: [[3,3],[-2,4]]
Explanation: The answer [[-2,4],[3,3]] would also be accepted.
 

Constraints:

1 <= k <= points.length <= 104
-104 < xi, yi < 104

class Solution
{
public:
    vector<vector<int>> kClosest(vector<vector<int>> &points, int K)
    {
        vector<vector<int>> res;
        priority_queue<pair<int, int>> pq;
        for (int i = 0; i < points.size(); ++i)
        {
            int t = points[i][0] * points[i][0] + points[i][1] * points[i][1];
            pq.push({t, i});
            if (pq.size() > K) pq.pop();
        }
        while (!pq.empty())
        {
            auto t = pq.top();
            pq.pop();
            res.push_back(points[t.second]);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/subarray-sums-divisible-by-k/

Given an integer array nums and an integer k, return the number of non-empty subarrays that have a sum divisible by k.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [4,5,0,-2,-3,1], k = 5
Output: 7
Explanation: There are 7 subarrays with a sum divisible by k = 5:
[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]
Example 2:

Input: nums = [5], k = 9
Output: 0
 

Constraints:

1 <= nums.length <= 3 * 104
-104 <= nums[i] <= 104
2 <= k <= 104

class Solution
{
public:
    int subarraysDivByK(vector<int> &A, int K)
    {
        int res = 0, sum = 0;
        vector<int> cnt(K);
        cnt[0] = 1;
        for (int num : A)
        {
            sum = (sum + num % K + K) % K;
            res += cnt[sum];
            ++cnt[sum];
        }
        return res;
    }
};


// Source https://leetcode.com/problems/odd-even-jump/

You are given an integer array arr. From some starting index, you can make a series of jumps. The (1st, 3rd, 5th, ...) jumps in the series are called odd-numbered jumps, 
and the (2nd, 4th, 6th, ...) jumps in the series are called even-numbered jumps. Note that the jumps are numbered, not the indices.

You may jump forward from index i to index j (with i < j) in the following way:

During odd-numbered jumps (i.e., jumps 1, 3, 5, ...), you jump to the index j such that arr[i] <= arr[j] and arr[j] is the smallest possible value. 
If there are multiple such indices j, you can only jump to the smallest such index j.
During even-numbered jumps (i.e., jumps 2, 4, 6, ...), you jump to the index j such that arr[i] >= arr[j] and arr[j] is the largest possible value. 
If there are multiple such indices j, you can only jump to the smallest such index j.
It may be the case that for some index i, there are no legal jumps.
A starting index is good if, starting from that index, you can reach the end of the array (index arr.length - 1) by jumping some number of times (possibly 0 or more than once).

Return the number of good starting indices.

 

Example 1:

Input: arr = [10,13,12,14,15]
Output: 2
Explanation: 
From starting index i = 0, we can make our 1st jump to i = 2 (since arr[2] is the smallest among arr[1], arr[2], arr[3], arr[4] that is greater or equal to arr[0]), then we cannot jump any more.
From starting index i = 1 and i = 2, we can make our 1st jump to i = 3, then we cannot jump any more.
From starting index i = 3, we can make our 1st jump to i = 4, so we have reached the end.
From starting index i = 4, we have reached the end already.
In total, there are 2 different starting indices i = 3 and i = 4, where we can reach the end with some number of
jumps.
Example 2:

Input: arr = [2,3,1,1,4]
Output: 3
Explanation: 
From starting index i = 0, we make jumps to i = 1, i = 2, i = 3:
During our 1st jump (odd-numbered), we first jump to i = 1 because arr[1] is the smallest value in [arr[1], arr[2], arr[3], arr[4]] that is greater than or equal to arr[0].
During our 2nd jump (even-numbered), we jump from i = 1 to i = 2 because arr[2] is the largest value in [arr[2], arr[3], arr[4]] that is less than or equal to arr[1]. arr[3] is also the largest value, but 2 is a smaller index, so we can only jump to i = 2 and not i = 3
During our 3rd jump (odd-numbered), we jump from i = 2 to i = 3 because arr[3] is the smallest value in [arr[3], arr[4]] that is greater than or equal to arr[2].
We can't jump from i = 3 to i = 4, so the starting index i = 0 is not good.
In a similar manner, we can deduce that:
From starting index i = 1, we jump to i = 4, so we reach the end.
From starting index i = 2, we jump to i = 3, and then we can't jump anymore.
From starting index i = 3, we jump to i = 4, so we reach the end.
From starting index i = 4, we are already at the end.
In total, there are 3 different starting indices i = 1, i = 3, and i = 4, where we can reach the end with some
number of jumps.
Example 3:

Input: arr = [5,1,3,4,2]
Output: 3
Explanation: We can reach the end from starting indices 1, 2, and 4.
 

Constraints:

1 <= arr.length <= 2 * 104
0 <= arr[i] < 105

class Solution
{
public:
    int n;
    int dp[20001][2];
    int odd[20001];
    int even[20001];

    bool get(int i, int jump)
    {
        if(i == n - 1) return true;
        if(dp[i][jump] != -1) return dp[i][jump];
        bool res = false;
        if (jump)
        {
            if(odd[i] != -1)
            {
                res = get(odd[i], jump ^ 1);
            }
        }
        else
        {
            if(even[i] != -1)
            {
                res = get(even[i], jump ^ 1);
            }
        }
        return dp[i][jump] = res;
    }

    int oddEvenJumps(vector<int> &arr)
    {
        n = arr.size();
        memset(dp, -1, sizeof(dp));
        memset(odd, -1, sizeof(odd));
        memset(even, -1, sizeof(even));
        set<int>s;
        unordered_map<int, int>ind;
        for(int i = n - 1; i >= 0; i--)
        {
            auto it = s.lower_bound(arr[i]);
            if(it != s.end())
            {
                odd[i] = ind[(*it)];
            }
            it = s.upper_bound(arr[i]);
            if(it != s.begin())
            {
                it--;
                even[i] = ind[(*it)];
            }
            ind[arr[i]] = i;
            s.insert(arr[i]);
        }
        int res = 0;
        for(int i = 0; i < n; i++)
            res += get(i, 1);
        return res;
    }
};


// Source https://leetcode.com/problems/largest-perimeter-triangle/

Given an integer array nums, return the largest perimeter of a triangle with a non-zero area, formed from three of these lengths. 
If it is impossible to form any triangle of a non-zero area, return 0.

 

Example 1:

Input: nums = [2,1,2]
Output: 5
Example 2:

Input: nums = [1,2,1]
Output: 0
 

Constraints:

3 <= nums.length <= 104
1 <= nums[i] <= 106

class Solution
{
public:
    int largestPerimeter(vector<int> &A)
    {
        sort(A.begin(), A.end());
        int n = A.size();
        for (int i = n - 1; i >= 2; --i)
        {
            if (A[i] < A[i - 1] + A[i - 2])
            {
                return A[i] + A[i - 1] + A[i - 2];
            }
        }
        return 0;
    }
};


// Source https://leetcode.com/problems/squares-of-a-sorted-array/

Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.

 

Example 1:

Input: nums = [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Explanation: After squaring, the array becomes [16,1,0,9,100].
After sorting, it becomes [0,1,9,16,100].
Example 2:

Input: nums = [-7,-3,2,3,11]
Output: [4,9,9,49,121]
 

Constraints:

1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums is sorted in non-decreasing order.

class Solution
{
public:
    vector<int> sortedSquares(vector<int> &A)
    {
        int n = A.size(), i = 0, j = n - 1;
        vector<int> res(n);
        for (int k = n - 1; k >= 0; --k)
        {
            if (abs(A[i]) > abs(A[j]))
            {
                res[k] = A[i] * A[i];
                ++i;
            }
            else
            {
                res[k] = A[j] * A[j];
                --j;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/longest-turbulent-subarray/

Given an integer array arr, return the length of a maximum size turbulent subarray of arr.

A subarray is turbulent if the comparison sign flips between each adjacent pair of elements in the subarray.

More formally, a subarray [arr[i], arr[i + 1], ..., arr[j]] of arr is said to be turbulent if and only if:

For i <= k < j:
arr[k] > arr[k + 1] when k is odd, and
arr[k] < arr[k + 1] when k is even.
Or, for i <= k < j:
arr[k] > arr[k + 1] when k is even, and
arr[k] < arr[k + 1] when k is odd.
 

Example 1:

Input: arr = [9,4,2,10,7,8,8,1,9]
Output: 5
Explanation: arr[1] > arr[2] < arr[3] > arr[4] < arr[5]
Example 2:

Input: arr = [4,8,12,16]
Output: 2
Example 3:

Input: arr = [100]
Output: 1
 

Constraints:

1 <= arr.length <= 4 * 104
0 <= arr[i] <= 109

先增大再减小再增大等交替进行，或者是先减小再增大再减小等交替进行的

dec[i] 表示满足右边界为arr[i]，且arr[i-1] > arr[i]，子数组的最大长度
inc[i] 表示满足右边界为arr[i]，且arr[i-1] < arr[i]，子数组的最大长度

class Solution
{
public:
    int maxTurbulenceSize(vector<int> &arr)
    {
        int res = 1, n = arr.size();
        vector<int> dec(n, 1), inc(n, 1);
        for (int i = 1; i < n; ++i)
        {
            if (arr[i - 1] > arr[i])
            {
                dec[i] = inc[i - 1] + 1;
            }
            else if (arr[i - 1] < arr[i])
            {
                inc[i] = dec[i - 1] + 1;
            }
            res = max(res, max(dec[i], inc[i]));
        }
        return res;
    }
};


// Source https://leetcode.com/problems/distribute-coins-in-binary-tree/

You are given the root of a binary tree with n nodes where each node in the tree has node.val coins. There are n coins in total throughout the whole tree.

In one move, we may choose two adjacent nodes and move one coin from one node to another. A move may be from parent to child, or from child to parent.

Return the minimum number of moves required to make every node have exactly one coin.

 

Example 1:


Input: root = [3,0,0]
Output: 2
Explanation: From the root of the tree, we move one coin to its left child, and one coin to its right child.
Example 2:


Input: root = [0,3,0]
Output: 3
Explanation: From the left child of the root, we move two coins to the root [taking two moves]. Then, we move one coin from the root of the tree to the right child.
 

Constraints:

The number of nodes in the tree is n.
1 <= n <= 100
0 <= Node.val <= n
The sum of all Node.val is n.

叶结点要是硬币不够，只能从父结点获得，
叶结点要是硬币多了，只能传给父结点（除非该叶结点就是根结点）。

不管是给还是要，都是算一次移动，本质没有太大的区别，不需要分开统计，直接加在一起就行。
为了方便起见，就当作每个结点都会给出当前结点值减1个的硬币，若当前是0的话，就给出 -1 个，其实就是要一个。
这样每个结点可以给出的硬币的总个数就是左右子结点分别可以给出的个数加上当前结点值并减1。

class Solution
{
public:
    int distributeCoins(TreeNode *root)
    {
        int res = 0;
        helper(root, res);
        return res;
    }
    int helper(TreeNode *node, int &res)
    {
        if (!node) return 0;
        int left = helper(node->left, res), right = helper(node->right, res);
        res += abs(left) + abs(right);
        return node->val + left + right - 1;
    }
};


// Source https://leetcode.com/problems/unique-paths-iii/

You are given an m x n integer array grid where grid[i][j] could be:

1 representing the starting square. There is exactly one starting square.
2 representing the ending square. There is exactly one ending square.
0 representing empty squares we can walk over.
-1 representing obstacles that we cannot walk over.
Return the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once.

 

Example 1:


Input: grid = [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]
Output: 2
Explanation: We have the following two paths: 
1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)
2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)
Example 2:


Input: grid = [[1,0,0,0],[0,0,0,0],[0,0,0,2]]
Output: 4
Explanation: We have the following four paths: 
1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)
2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)
3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)
4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)
Example 3:


Input: grid = [[0,1],[2,0]]
Output: 0
Explanation: There is no path that walks over every empty square exactly once.
Note that the starting and ending square can be anywhere in the grid.
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 20
1 <= m * n <= 20
-1 <= grid[i][j] <= 2
There is exactly one starting cell and one ending cell.

class Solution
{
public:
    int m, n;
    int res, empty;
    int visit[30][30];

    void dfs(vector<vector<int>> &grid, int x, int y, int count)
    {
        if (x < 0 || x >= m || y < 0 || y >= n || grid[x][y] == -1 || visit[x][y] == 1) return;
        if (grid[x][y] == 2)
        {
            if(count == (empty + 1)) res++;
            return;
        }
        visit[x][y] = 1;
        dfs(grid, x + 1, y, count + 1);
        dfs(grid, x - 1, y, count + 1);
        dfs(grid, x, y + 1, count + 1);
        dfs(grid, x, y - 1, count + 1);
        visit[x][y] = 0;
    }

    int uniquePathsIII(vector<vector<int>> &grid)
    {
        m = grid.size();
        n = grid[0].size();
        empty = 0;
        int start_x, start_y;
        for (int i = 0; i < m; i++)
        {
            for (int j = 0; j < n; j++)
            {
                if (grid[i][j] == 1) start_x = i, start_y = j;
                else if (grid[i][j] == 0) empty++;
            }
        }
        memset(visit, 0, sizeof(visit));
        res = 0;
        dfs(grid, start_x, start_y, 0);
        return res;
    }
};


// Source https://leetcode.com/problems/time-based-key-value-store/

Design a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key's value at a certain timestamp.

Implement the TimeMap class:

TimeMap() Initializes the object of the data structure.
void set(String key, String value, int timestamp) Stores the key key with the value value at the given time timestamp.
String get(String key, int timestamp) Returns a value such that set was called previously, with timestamp_prev <= timestamp. 
If there are multiple such values, it returns the value associated with the largest timestamp_prev. If there are no values, it returns "".
 

Example 1:

Input
["TimeMap", "set", "get", "get", "set", "get", "get"]
[[], ["foo", "bar", 1], ["foo", 1], ["foo", 3], ["foo", "bar2", 4], ["foo", 4], ["foo", 5]]
Output
[null, null, "bar", "bar", null, "bar2", "bar2"]

Explanation
TimeMap timeMap = new TimeMap();
timeMap.set("foo", "bar", 1);  // store the key "foo" and value "bar" along with timestamp = 1.
timeMap.get("foo", 1);         // return "bar"
timeMap.get("foo", 3);         // return "bar", since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 is "bar".
timeMap.set("foo", "bar2", 4); // store the key "foo" and value "bar2" along with timestamp = 4.
timeMap.get("foo", 4);         // return "bar2"
timeMap.get("foo", 5);         // return "bar2"
 

Constraints:

1 <= key.length, value.length <= 100
key and value consist of lowercase English letters and digits.
1 <= timestamp <= 107
All the timestamps timestamp of set are strictly increasing.
At most 2 * 105 calls will be made to set and get.

class TimeMap
{
public:
    unordered_map<string, map<int, string>> dataMap;

    TimeMap() {}

    void set(string key, string value, int timestamp)
    {
        dataMap[key].insert({timestamp, value});
    }

    string get(string key, int timestamp)
    {
        auto it = dataMap[key].upper_bound(timestamp);
        return it == dataMap[key].begin() ? "" : prev(it)->second;
    }
};


// Source https://leetcode.com/problems/triples-with-bitwise-and-equal-to-zero/

Given an integer array nums, return the number of AND triples.

An AND triple is a triple of indices (i, j, k) such that:

0 <= i < nums.length
0 <= j < nums.length
0 <= k < nums.length
nums[i] & nums[j] & nums[k] == 0, where & represents the bitwise-AND operator.
 

Example 1:

Input: nums = [2,1,3]
Output: 12
Explanation: We could choose the following i, j, k triples:
(i=0, j=0, k=1) : 2 & 2 & 1
(i=0, j=1, k=0) : 2 & 1 & 2
(i=0, j=1, k=1) : 2 & 1 & 1
(i=0, j=1, k=2) : 2 & 1 & 3
(i=0, j=2, k=1) : 2 & 3 & 1
(i=1, j=0, k=0) : 1 & 2 & 2
(i=1, j=0, k=1) : 1 & 2 & 1
(i=1, j=0, k=2) : 1 & 2 & 3
(i=1, j=1, k=0) : 1 & 1 & 2
(i=1, j=2, k=0) : 1 & 3 & 2
(i=2, j=0, k=1) : 3 & 2 & 1
(i=2, j=1, k=0) : 3 & 1 & 2
Example 2:

Input: nums = [0,0,0]
Output: 27
 

Constraints:

1 <= nums.length <= 1000
0 <= nums[i] < 216

num的第i位为0，则curNum的第i位可以为1或0
num的第i位为1，则curNum的第i位只能为0

这样 num & curNum 就等于0

class Solution
{
public:
    int cnt[1 << 16];

    void traverse(int i, unsigned curNum, unsigned num, int &res)
    {
        if (i == 16)
        {
            res += cnt[curNum];
            return;
        }
        if (((num >> i) & 1) == 0)
        {
            traverse(i + 1, curNum, num, res);
            traverse(i + 1, curNum + (1 << i), num, res);
        }
        else
        {
            traverse(i + 1, curNum, num, res);
        }
    }

    int countTriplets(vector<int> &nums)
    {
        memset(cnt, 0, sizeof(cnt));
        for (int i = 0; i < nums.size(); ++i)
        {
            for (int j = 0; j < nums.size(); ++j)
            {
                cnt[nums[i] & nums[j]]++;
            }
        }
        int res = 0;
        for (auto num : nums)
        {
            traverse(0, 0, num, res);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/minimum-cost-for-tickets/

You have planned some train traveling one year in advance. The days of the year in which you will travel are given as an integer array days. Each day is an integer from 1 to 365.

Train tickets are sold in three different ways:

a 1-day pass is sold for costs[0] dollars,
a 7-day pass is sold for costs[1] dollars, and
a 30-day pass is sold for costs[2] dollars.
The passes allow that many days of consecutive travel.

For example, if we get a 7-day pass on day 2, then we can travel for 7 days: 2, 3, 4, 5, 6, 7, and 8.
Return the minimum number of dollars you need to travel every day in the given list of days.

 

Example 1:

Input: days = [1,4,6,7,8,20], costs = [2,7,15]
Output: 11
Explanation: For example, here is one way to buy passes that lets you travel your travel plan:
On day 1, you bought a 1-day pass for costs[0] = $2, which covered day 1.
On day 3, you bought a 7-day pass for costs[1] = $7, which covered days 3, 4, ..., 9.
On day 20, you bought a 1-day pass for costs[0] = $2, which covered day 20.
In total, you spent $11 and covered all the days of your travel.
Example 2:

Input: days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15]
Output: 17
Explanation: For example, here is one way to buy passes that lets you travel your travel plan:
On day 1, you bought a 30-day pass for costs[2] = $15 which covered days 1, 2, ..., 30.
On day 31, you bought a 1-day pass for costs[0] = $2 which covered day 31.
In total, you spent $17 and covered all the days of your travel.
 

Constraints:

1 <= days.length <= 365
1 <= days[i] <= 365
days is in strictly increasing order.
costs.length == 3
1 <= costs[i] <= 1000

class Solution
{
public:
    int n;
    int dp[500];

    int recur(int idx, vector<int> &days, vector<int> &costs)
    {
        if(idx >= n) return 0;
        if(dp[idx] != -1) return dp[idx];
        int index = idx;
        int res = costs[0] + recur(idx + 1, days, costs);
        int x = days[idx];
        x += 6;
        while(idx < n && days[idx] <= x)
        {
            idx++;
        }
        res = min(res, costs[1] + recur(idx, days, costs));
        x += 23;
        while(idx < n && days[idx] <= x)
        {
            idx++;
        }
        res = min(res, costs[2] + recur(idx, days, costs));
        return dp[index] = res;
    }

    int mincostTickets(vector<int> &days, vector<int> &costs)
    {
        n = days.size();
        memset(dp, -1, sizeof(dp));
        return recur(0, days, costs);
    }
};


// Source https://leetcode.com/problems/string-without-aaa-or-bbb/

Given two integers a and b, return any string s such that:

s has length a + b and contains exactly a 'a' letters, and exactly b 'b' letters,
The substring 'aaa' does not occur in s, and
The substring 'bbb' does not occur in s.
 

Example 1:

Input: a = 1, b = 2
Output: "abb"
Explanation: "abb", "bab" and "bba" are all correct answers.
Example 2:

Input: a = 4, b = 1
Output: "aabaa"
 

Constraints:

0 <= a, b <= 100
It is guaranteed such an s exists for the given a and b.

a大于b时，可以用两个a，加一个b，尽量让a和b往相等的方向靠拢，然后，对 a-2 和 b-1 递归调用
b大于a时，可以用两个b，加一个a，尽量让a和b往相等的方向靠拢，然后，对 a-1 和 b-2 递归调用

class Solution
{
public:
    string strWithout3a3b(int a, int b)
    {
        string res;
        while (a && b)
        {
            if (a > b)
            {
                res += "aab";
                --a;
            }
            else if (b > a)
            {
                res += "bba";
                --b;
            }
            else
            {
                res += "ab";
            }
            --a;
            --b;
        }
        res += string(a, 'a');
        res += string(b, 'b');
        return res;
    }
};


// Source https://leetcode.com/problems/sum-of-even-numbers-after-queries/

You are given an integer array nums and an array queries where queries[i] = [vali, indexi].

For each query i, first, apply nums[indexi] = nums[indexi] + vali, then print the sum of the even values of nums.

Return an integer array answer where answer[i] is the answer to the ith query.

 

Example 1:

Input: nums = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]]
Output: [8,6,2,4]
Explanation: At the beginning, the array is [1,2,3,4].
After adding 1 to nums[0], the array is [2,2,3,4], and the sum of even values is 2 + 2 + 4 = 8.
After adding -3 to nums[1], the array is [2,-1,3,4], and the sum of even values is 2 + 4 = 6.
After adding -4 to nums[0], the array is [-2,-1,3,4], and the sum of even values is -2 + 4 = 2.
After adding 2 to nums[3], the array is [-2,-1,3,6], and the sum of even values is -2 + 6 = 4.
Example 2:

Input: nums = [1], queries = [[4,0]]
Output: [0]
 

Constraints:

1 <= nums.length <= 104
-104 <= nums[i] <= 104
1 <= queries.length <= 104
-104 <= vali <= 104
0 <= indexi < nums.length

class Solution
{
public:
    vector<int> sumEvenAfterQueries(vector<int> &A, vector<vector<int>> &queries)
    {
        vector<int> res;
        int n = A.size(), even = 0;
        for (int num : A)
        {
            if (num % 2 == 0) even += num;
        }
        for (auto &query : queries)
        {
            int old = A[query[1]], cur = old + query[0];
            if (old % 2 == 0) even -= old;
            if (cur % 2 == 0) even += cur;
            A[query[1]] = cur;
            res.push_back(even);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/interval-list-intersections/

You are given two lists of closed intervals, firstList and secondList, where firstList[i] = [starti, endi] and secondList[j] = [startj, endj]. Each list of intervals is pairwise disjoint and in sorted order.

Return the intersection of these two interval lists.

A closed interval [a, b] (with a <= b) denotes the set of real numbers x with a <= x <= b.

The intersection of two closed intervals is a set of real numbers that are either empty or represented as a closed interval. For example, the intersection of [1, 3] and [2, 4] is [2, 3].

 

Example 1:


Input: firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24],[25,26]]
Output: [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]
Example 2:

Input: firstList = [[1,3],[5,9]], secondList = []
Output: []
 

Constraints:

0 <= firstList.length, secondList.length <= 1000
firstList.length + secondList.length >= 1
0 <= starti < endi <= 109
endi < starti+1
0 <= startj < endj <= 109
endj < startj+1

A closed interval [a, b] (with a <= b) denotes the set of real numbers x with a <= x <= b.

class Solution
{
public:
    vector<vector<int>> intervalIntersection(vector<vector<int>> &A, vector<vector<int>> &B)
    {
        int m = A.size(), n = B.size(), i = 0, j = 0;
        vector<vector<int>> res;
        while (i < m && j < n)
        {
            int lo = max(A[i][0], B[j][0]), hi = min(A[i][1], B[j][1]);
            if (lo <= hi) res.push_back({lo, hi});
            (A[i][1] < B[j][1]) ? ++i : ++j;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/

Given the root of a binary tree, calculate the vertical order traversal of the binary tree.

For each node at position (row, col), its left and right children will be at positions (row + 1, col - 1) and (row + 1, col + 1) respectively. The root of the tree is at (0, 0).

The vertical order traversal of a binary tree is a list of top-to-bottom orderings for each column index starting from the leftmost column and ending on the rightmost column. 
There may be multiple nodes in the same row and same column. In such a case, sort these nodes by their values.

Return the vertical order traversal of the binary tree.

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: [[9],[3,15],[20],[7]]
Explanation:
Column -1: Only node 9 is in this column.
Column 0: Nodes 3 and 15 are in this column in that order from top to bottom.
Column 1: Only node 20 is in this column.
Column 2: Only node 7 is in this column.
Example 2:


Input: root = [1,2,3,4,5,6,7]
Output: [[4],[2],[1,5,6],[3],[7]]
Explanation:
Column -2: Only node 4 is in this column.
Column -1: Only node 2 is in this column.
Column 0: Nodes 1, 5, and 6 are in this column.
          1 is at the top, so it comes first.
          5 and 6 are at the same position (2, 0), so we order them by their value, 5 before 6.
Column 1: Only node 3 is in this column.
Column 2: Only node 7 is in this column.
Example 3:


Input: root = [1,2,3,4,6,5,7]
Output: [[4],[2],[1,5,6],[3],[7]]
Explanation:
This case is the exact same as example 2, but with nodes 5 and 6 swapped.
Note that the solution remains the same since 5 and 6 are in the same location and should be ordered by their values.
 

Constraints:

The number of nodes in the tree is in the range [1, 1000].
0 <= Node.val <= 1000

class Solution
{
public:
    vector<vector<int>> verticalTraversal(TreeNode *root)
    {
        vector<vector<int>> res;
        map<int, map<int, vector<int>>> m;
        helper(root, 0, 0, m);
        for (auto &a : m)
        {
            vector<int> col;
            for (auto &it : a.second)
            {
                sort(it.second.begin(), it.second.end());
                col.insert(col.end(), it.second.begin(), it.second.end());
            }
            res.push_back(col);
        }
        return res;
    }
    void helper(TreeNode *root, int row, int col, map<int, map<int, vector<int>>> &m)
    {
        if (!root) return;
        m[col][row].push_back(root->val);
        helper(root->left, row + 1, col - 1, m);
        helper(root->right, row + 1, col + 1, m);
    }
};


// Source https://leetcode.com/problems/smallest-string-starting-from-leaf/

You are given the root of a binary tree where each node has a value in the range [0, 25] representing the letters 'a' to 'z'.

Return the lexicographically smallest string that starts at a leaf of this tree and ends at the root.

As a reminder, any shorter prefix of a string is lexicographically smaller.

For example, "ab" is lexicographically smaller than "aba".
A leaf of a node is a node that has no children.

 

Example 1:


Input: root = [0,1,2,3,4,3,4]
Output: "dba"
Example 2:


Input: root = [25,1,3,1,3,0,2]
Output: "adz"
Example 3:


Input: root = [2,2,1,null,1,0,null,0]
Output: "abc"
 

Constraints:

The number of nodes in the tree is in the range [1, 8500].
0 <= Node.val <= 25

class Solution
{
public:
    string res;

    string smallestFromLeaf(TreeNode *root)
    {
        res = "~";
        helper(root, "");
        return res;
    }
    void helper(TreeNode *node, string cur)
    {
        if (!node) return;
        cur = string(1, node->val + 'a') + cur;
        if (!node->left && !node->right)
        {
            res = min(res, cur);
        }
        helper(node->left, cur);
        helper(node->right, cur);
    }
};


// Source https://leetcode.com/problems/add-to-array-form-of-integer/

The array-form of an integer num is an array representing its digits in left to right order.

For example, for num = 1321, the array form is [1,3,2,1].
Given num, the array-form of an integer, and an integer k, return the array-form of the integer num + k.

 

Example 1:

Input: num = [1,2,0,0], k = 34
Output: [1,2,3,4]
Explanation: 1200 + 34 = 1234
Example 2:

Input: num = [2,7,4], k = 181
Output: [4,5,5]
Explanation: 274 + 181 = 455
Example 3:

Input: num = [2,1,5], k = 806
Output: [1,0,2,1]
Explanation: 215 + 806 = 1021
 

Constraints:

1 <= num.length <= 104
0 <= num[i] <= 9
num does not contain any leading zeros except for the zero itself.
1 <= k <= 104

class Solution
{
public:
    vector<int> addToArrayForm(vector<int> &A, int K)
    {
        vector<int> B;
        B.reserve(8);
        while (K > 0)
        {
            B.push_back(K % 10);
            K /= 10;
        }
        reverse(A.begin(), A.end());
        int n = A.size(), m = B.size(), carry = 0;
        int len = max(n, m);
        int i = 0;
        while (i < len || carry > 0)
        {
            int num = carry;
            if (i < n) num += A[i];
            if (i < m) num += B[i];
            carry = num / 10;
            num %= 10;
            if (i < n)
            {
                A[i] = num;
            }
            else
            {
                A.push_back(num);
            }
            ++i;
        }
        reverse(A.begin(), A.end());
        return A;
    }
};


// Source https://leetcode.com/problems/satisfiability-of-equality-equations/

You are given an array of strings equations that represent relationships between variables 
where each string equations[i] is of length 4 and takes one of two different forms: "xi==yi" or "xi!=yi".
Here, xi and yi are lowercase letters (not necessarily different) that represent one-letter variable names.

Return true if it is possible to assign integers to variable names so as to satisfy all the given equations, or false otherwise.

 

Example 1:

Input: equations = ["a==b","b!=a"]
Output: false
Explanation: If we assign say, a = 1 and b = 1, then the first equation is satisfied, but not the second.
There is no way to assign the variables to satisfy both equations.
Example 2:

Input: equations = ["b==a","a==b"]
Output: true
Explanation: We could assign a = 1 and b = 1 to satisfy both equations.
 

Constraints:

1 <= equations.length <= 500
equations[i].length == 4
equations[i][0] is a lowercase letter.
equations[i][1] is either '=' or '!'.
equations[i][2] is '='.
equations[i][3] is a lowercase letter.

class Solution
{
public:
    int root[26];
    int size[26];

    int find(int x)
    {
        if (root[x] != x) root[x] = find(root[x]);
        return root[x];
    }

    void join(int x, int y)
    {
        int root_x = find(x);
        int root_y = find(y);
        if (root_x == root_y) return;
        if (size[root_x] > size[root_y])
        {
            root[root_y] = root_x;
            size[root_x] += size[root_y];
        }
        else
        {
            root[root_x] = root_y;
            size[root_y] += size[root_x];
        }
    }

    bool equationsPossible(vector<string> &equations)
    {
        for (int i = 0; i < 26; ++i) { root[i] = i; size[i] = 1; }
        for (string &eq : equations)
        {
            if (eq[1] == '!') continue;
            join(eq[0] - 'a', eq[3] - 'a');
        }
        for (string &eq : equations)
        {
            if (eq[1] == '=') continue;
            if (find(eq[0] - 'a') == find(eq[3] - 'a')) return false;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/broken-calculator/

There is a broken calculator that has the integer startValue on its display initially. In one operation, you can:

multiply the number on display by 2, or
subtract 1 from the number on display.
Given two integers startValue and target, return the minimum number of operations needed to display target on the calculator.

 

Example 1:

Input: startValue = 2, target = 3
Output: 2
Explanation: Use double operation and then decrement operation {2 -> 4 -> 3}.
Example 2:

Input: startValue = 5, target = 8
Output: 2
Explanation: Use decrement and then double {5 -> 4 -> 8}.
Example 3:

Input: startValue = 3, target = 10
Output: 3
Explanation: Use double, decrement and double {3 -> 6 -> 5 -> 10}.
 

Constraints:

1 <= startValue, target <= 109

当startValue和target相等，不需要另外的操作
当startValue大于target时，由于都是正数，肯定不能再乘2了，所以此时直接就可以返回 startValue-target
当startValue小于target时，问题转化为target 除以2 或 加1得到startValue

class Solution
{
public:
    int brokenCalc(int startValue, int target)
    {
        if (startValue >= target) return startValue - target;
        return (target % 2 == 0) ? (1 + brokenCalc(startValue, target / 2)) : (1 + brokenCalc(startValue, target + 1));
    }
};


// Source https://leetcode.com/problems/subarrays-with-k-different-integers/

Given an integer array nums and an integer k, return the number of good subarrays of nums.

A good array is an array where the number of different integers in that array is exactly k.

For example, [1,2,3,1,2] has 3 different integers: 1, 2, and 3.
A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [1,2,1,2,3], k = 2
Output: 7
Explanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2]
Example 2:

Input: nums = [1,2,1,3,4], k = 3
Output: 3
Explanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].
 

Constraints:

1 <= nums.length <= 2 * 104
1 <= nums[i], k <= nums.length

class Solution
{
public:
    int subarraysWithKDistinct(vector<int> &A, int K)
    {
        return helper(A, K) - helper(A, K - 1);
    }
    int helper(vector<int> &A, int K)
    {
        int n = A.size(), res = 0;
        unordered_map<int, int> mp;
        int left = 0, i = 0;
        while (i < n)
        {
            mp[A[i]]++;
            while (mp.size() > K)
            {
                if (--mp[A[left]] == 0) mp.erase(A[left]);
                ++left;
            }
            res += i - left + 1;
            ++i;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/cousins-in-binary-tree/

Given the root of a binary tree with unique values and the values of two different nodes of the tree x and y, 
return true if the nodes corresponding to the values x and y in the tree are cousins, or false otherwise.

Two nodes of a binary tree are cousins if they have the same depth with different parents.

Note that in a binary tree, the root node is at the depth 0, and children of each depth k node are at the depth k + 1.

 

Example 1:


Input: root = [1,2,3,4], x = 4, y = 3
Output: false
Example 2:


Input: root = [1,2,3,null,4,null,5], x = 5, y = 4
Output: true
Example 3:


Input: root = [1,2,3,null,4], x = 2, y = 3
Output: false
 

Constraints:

The number of nodes in the tree is in the range [2, 100].
1 <= Node.val <= 100
Each node has a unique value.
x != y
x and y are exist in the tree.

class Solution
{
public:
    bool find(TreeNode *node, int val, vector<int> &res)
    {
        if (!node) return false;
        res.push_back(node->val);
        if (node->val == val) { return true; }
        if (find(node->left, val, res)) return true;
        if (find(node->right, val, res)) return true;
        res.pop_back();
        return false;
    }

    bool isCousins(TreeNode *root, int x, int y)
    {
        vector<int> resX, resY;
        resX.reserve(32);
        resY.reserve(32);
        find(root, x, resX);
        find(root, y, resY);
        if (resX.size() != resY.size()) return false;
        int n = resX.size();
        if (resX[n - 2] == resY[n - 2]) return false;
        return true;
    }
};


// Source https://leetcode.com/problems/rotting-oranges/

You are given an m x n grid where each cell can have one of three values:

0 representing an empty cell,
1 representing a fresh orange, or
2 representing a rotten orange.
Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

 

Example 1:


Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
Output: 4
Example 2:

Input: grid = [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.
Example 3:

Input: grid = [[0,2]]
Output: 0
Explanation: Since there are already no fresh oranges at minute 0, the answer is just 0.
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 10
grid[i][j] is 0, 1, or 2.

class Solution
{
public:
    int orangesRotting(vector<vector<int>> &grid)
    {
        int m = grid.size(), n = grid[0].size(), freshLeft = 0;
        queue<pair<int, int>> q;
        vector<array<int, 2>> dirs{{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
        for (int i = 0; i < m; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                if (grid[i][j] == 1) ++freshLeft;
                else if (grid[i][j] == 2) q.push({i, j});
            }
        }
        int res = 0;
        while (!q.empty() && freshLeft > 0)
        {
            int sz = q.size();
            for (int i = 0; i < sz; ++i)
            {
                auto cur = q.front();
                q.pop();
                for (int k = 0; k < 4; ++k)
                {
                    int x = cur.first + dirs[k][0], y = cur.second + dirs[k][1];
                    if (x < 0 || x >= m || y < 0 || y >= n || grid[x][y] != 1) continue;
                    grid[x][y] = 2;
                    q.push({x, y});
                    --freshLeft;
                }
            }
            ++res;
        }
        return freshLeft > 0 ? -1 : res;
    }
};


// Source https://leetcode.com/problems/minimum-number-of-k-consecutive-bit-flips/

You are given a binary array nums and an integer k.

A k-bit flip is choosing a subarray of length k from nums and simultaneously changing every 0 in the subarray to 1, and every 1 in the subarray to 0.

Return the minimum number of k-bit flips required so that there is no 0 in the array. If it is not possible, return -1.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [0,1,0], k = 1
Output: 2
Explanation: Flip nums[0], then flip nums[2].
Example 2:

Input: nums = [1,1,0], k = 2
Output: -1
Explanation: No matter how we flip subarrays of size 2, we cannot make the array become [1,1,1].
Example 3:

Input: nums = [0,0,0,1,0,1,1,0], k = 3
Output: 3
Explanation: 
Flip nums[0],nums[1],nums[2]: nums becomes [1,1,1,1,0,1,1,0]
Flip nums[4],nums[5],nums[6]: nums becomes [1,1,1,1,1,0,0,0]
Flip nums[5],nums[6],nums[7]: nums becomes [1,1,1,1,1,1,1,1]
 

Constraints:

1 <= nums.length <= 105
1 <= k <= nums.length

class Solution
{
public:
    int minKBitFlips(vector<int> &nums, int k)
    {
        int n = nums.size();
        queue<int> q;
        int ans = 0;
        for(int i = 0; i < n; i++)
        {
            while(!q.empty() && q.front() <= i - k)
                q.pop();
            int sz = q.size();
            int val = (nums[i] + sz % 2) % 2;
            if(!val)
            {
                if(i + k > n) return -1;
                ans++;
                q.push(i);
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/number-of-squareful-arrays/

An array is squareful if the sum of every pair of adjacent elements is a perfect square.

Given an integer array nums, return the number of permutations of nums that are squareful.

Two permutations perm1 and perm2 are different if there is some index i such that perm1[i] != perm2[i].

 

Example 1:

Input: nums = [1,17,8]
Output: 2
Explanation: [1,8,17] and [17,8,1] are the valid permutations.
Example 2:

Input: nums = [2,2,2]
Output: 1
 

Constraints:

1 <= nums.length <= 12
0 <= nums[i] <= 109

class Solution
{
public:
    int res;
    unordered_map<int, int> numCnt;
    unordered_map<int, unordered_set<int>> numMap;

    void helper(int x, int left)
    {
        if (left == 0)
        {
            ++res;
            return;
        }
        --numCnt[x];
        for (int y : numMap[x])
        {
            if (numCnt[y] > 0)
            {
                helper(y, left - 1);
            }
        }
        ++numCnt[x];
    }

    int numSquarefulPerms(vector<int> &A)
    {
        int n = A.size();
        for (int num : A) ++numCnt[num];
        for (auto &a : numCnt)
        {
            for (auto &b : numCnt)
            {
                int x = a.first, y = b.first, r = sqrt(x + y);
                if (r * r == x + y) numMap[x].insert(y);
            }
        }
        res = 0;
        for (auto a : numCnt)
        {
            helper(a.first, n - 1);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/find-the-town-judge/

In a town, there are n people labeled from 1 to n. There is a rumor that one of these people is secretly the town judge.

If the town judge exists, then:

The town judge trusts nobody.
Everybody (except for the town judge) trusts the town judge.
There is exactly one person that satisfies properties 1 and 2.
You are given an array trust where trust[i] = [ai, bi] representing that the person labeled ai trusts the person labeled bi.

Return the label of the town judge if the town judge exists and can be identified, or return -1 otherwise.

 

Example 1:

Input: n = 2, trust = [[1,2]]
Output: 2
Example 2:

Input: n = 3, trust = [[1,3],[2,3]]
Output: 3
Example 3:

Input: n = 3, trust = [[1,3],[2,3],[3,1]]
Output: -1
 

Constraints:

1 <= n <= 1000
0 <= trust.length <= 104
trust[i].length == 2
All the pairs of trust are unique.
ai != bi
1 <= ai, bi <= n

class Solution
{
public:
    int findJudge(int N, vector<vector<int>> &trust)
    {
        vector<int> in(N + 1), out(N + 1);
        for (auto &a : trust)
        {
            ++out[a[0]];
            ++in[a[1]];
        }
        for (int i = 1; i <= N; ++i)
        {
            if (in[i] == N - 1 && out[i] == 0) return i;
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/maximum-binary-tree-ii/

A maximum tree is a tree where every node has a value greater than any other value in its subtree.

You are given the root of a maximum binary tree and an integer val.

Just as in the previous problem, the given tree was constructed from a list a (root = Construct(a)) recursively with the following Construct(a) routine:

If a is empty, return null.
Otherwise, let a[i] be the largest element of a. Create a root node with the value a[i].
The left child of root will be Construct([a[0], a[1], ..., a[i - 1]]).
The right child of root will be Construct([a[i + 1], a[i + 2], ..., a[a.length - 1]]).
Return root.
Note that we were not given a directly, only a root node root = Construct(a).

Suppose b is a copy of a with the value val appended to it. It is guaranteed that b has unique values.

Return Construct(b).

 

Example 1:


Input: root = [4,1,3,null,null,2], val = 5
Output: [5,4,null,1,3,null,null,2]
Explanation: a = [1,4,2,3], b = [1,4,2,3,5]
Example 2:


Input: root = [5,2,4,null,1], val = 3
Output: [5,2,4,null,1,null,3]
Explanation: a = [2,1,5,4], b = [2,1,5,4,3]
Example 3:


Input: root = [5,2,3,null,1], val = 4
Output: [5,2,4,null,1,3]
Explanation: a = [2,1,5,3], b = [2,1,5,3,4]
 

Constraints:

The number of nodes in the tree is in the range [1, 100].
1 <= Node.val <= 100
All the values of the tree are unique.
1 <= val <= 100

b is a copy of a with the value val appended to it.
新的数字 val 一定是加在数组的末尾的
由于数组中的最大值将作为根结点，若 val 是最大值，则其一定是新的根结点，原二叉树直接变成其左子树了，直接就得到了结果。
若 val 小于当前数组的最大值，则其一定是在右子树中，则可以对最大值右边的子数组调用递归函数，即对根结点的右子结点调用递归函数，将返回的结点更新为新的右子结点即可

class Solution
{
public:
    TreeNode *insertIntoMaxTree(TreeNode *root, int val)
    {
        if (root && root->val > val)
        {
            root->right = insertIntoMaxTree(root->right, val);
            return root;
        }
        return new TreeNode(val, root, nullptr);
    }
};


// Source https://leetcode.com/problems/available-captures-for-rook/

On an 8 x 8 chessboard, there is exactly one white rook 'R' and some number of white bishops 'B', black pawns 'p', and empty squares '.'.
                                                                              车                                                     象                        兵
When the rook moves, it chooses one of four cardinal directions (north, east, south, or west), then moves in that direction until it chooses to stop, 
reaches the edge of the board, captures a black pawn, or is blocked by a white bishop. A rook is considered attacking a pawn if the rook can capture the pawn on the rook's turn. 
The number of available captures for the white rook is the number of pawns that the rook is attacking.

Return the number of available captures for the white rook.

 

Example 1:


Input: board = [[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","R",".",".",".","p"],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."]]
Output: 3
Explanation: In this example, the rook is attacking all the pawns.
Example 2:


Input: board = [[".",".",".",".",".",".",".","."],[".","p","p","p","p","p",".","."],[".","p","p","B","p","p",".","."],[".","p","B","R","B","p",".","."],[".","p","p","B","p","p",".","."],[".","p","p","p","p","p",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."]]
Output: 0
Explanation: The bishops are blocking the rook from attacking any of the pawns.
Example 3:


Input: board = [[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","p",".",".",".","."],["p","p",".","R",".","p","B","."],[".",".",".",".",".",".",".","."],[".",".",".","B",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","."]]
Output: 3
Explanation: The rook is attacking the pawns at positions b5, d6, and f5.
 

Constraints:

board.length == 8
board[i].length == 8
board[i][j] is either 'R', '.', 'B', or 'p'
There is exactly one cell with board[i][j] == 'R'

有三种棋子，分别是白方的车，白方的象，和黑方的兵，问白色方的车最多能吃到多少个黑方的兵。

class Solution
{
public:
    int numRookCaptures(vector<vector<char>> &board)
    {
        int x0 = 0, y0 = 0, res = 0;
        vector<vector<int>> dirs{{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
        for (int i = 0; i < 8; ++i)
        {
            for (int j = 0; j < 8; ++j)
            {
                if (board[i][j] == 'R')
                {
                    x0 = i;
                    y0 = j;
                    break;
                }
            }
        }
        for (auto &dir : dirs)
        {
            int x = x0 + dir[0], y = y0 + dir[1];
            while (x >= 0 && x < 8 && y >= 0 && y < 8)
            {
                if (board[x][y] == 'p') ++res;
                if (board[x][y] != '.') break;
                x += dir[0];
                y += dir[1];
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/minimum-cost-to-merge-stones/

There are n piles of stones arranged in a row. The ith pile has stones[i] stones.

A move consists of merging exactly k consecutive piles into one pile, and the cost of this move is equal to the total number of stones in these k piles.

Return the minimum cost to merge all piles of stones into one pile. If it is impossible, return -1.

 

Example 1:

Input: stones = [3,2,4,1], k = 2
Output: 20
Explanation: We start with [3, 2, 4, 1].
We merge [3, 2] for a cost of 5, and we are left with [5, 4, 1].
We merge [4, 1] for a cost of 5, and we are left with [5, 5].
We merge [5, 5] for a cost of 10, and we are left with [10].
The total cost was 20, and this is the minimum possible.
Example 2:

Input: stones = [3,2,4,1], k = 3
Output: -1
Explanation: After any merge operation, there are 2 piles left, and we can't merge anymore.  So the task is impossible.
Example 3:

Input: stones = [3,5,1,2,6], k = 3
Output: 25
Explanation: We start with [3, 5, 1, 2, 6].
We merge [5, 1, 2] for a cost of 8, and we are left with [3, 8, 6].
We merge [3, 8, 6] for a cost of 17, and we are left with [17].
The total cost was 25, and this is the minimum possible.
 

Constraints:

n == stones.length
1 <= n <= 30
1 <= stones[i] <= 100
2 <= k <= 30

class Solution
{
public:
    int N;
    int K;
    int dp[35][35][35];
    int sum[35];

    int solve(const int l, const int r, int piles)
    {
        if (piles > r - l + 1) return 1e9;
        if (l == r) return 0;
        if (dp[l][r][piles] != -1) return dp[l][r][piles];
        int ans = 1e9;
        if (piles == 1)
        {
            ans = min(ans, sum[r + 1] - sum[l] + solve(l, r, K));
            return dp[l][r][piles] = ans;
         }
        for (int i = l; i < r; i++)
        {
            ans = min(ans, solve(l, i, 1) + solve(i + 1, r, piles - 1));
        }
        return dp[l][r][piles] = ans;
    }

    int mergeStones(vector<int> &stones, int k)
    {
        this->N = stones.size();
        this->K = k;
        if((N-1)%(K-1)!=0) return -1;
        memset(dp, -1, sizeof(dp));
        memset(sum, 0, sizeof(sum));
        for (int i = 1; i <= N; i++)
            sum[i] = sum[i - 1] + stones[i - 1];
        int ans = solve(0, N - 1, 1);
        return ans == 1e9 ? -1 : ans;
    }
};
