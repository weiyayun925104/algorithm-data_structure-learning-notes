// Source https://leetcode.com/problems/two-sum/

Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

 

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]
 

Constraints:

2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109
Only one valid answer exists.

class Solution
{
public:
    vector<int> twoSum(vector<int> &nums, int target)
    {
        vector<pair<int, int>> v;
        vector<int> ans;

        for(int i = 0; i < nums.size(); i++)
        {
            v.push_back({nums[i], i});
        }
        sort(v.begin(), v.end());
        auto it1 = v.begin();
        auto it2 = v.end() - 1;

        while(it1 != it2)
        {
            if(((it1->first) + (it2->first)) == target)
            {
                ans.push_back(it1->second);
                ans.push_back(it2->second);
                break;
            }
            else if(((it1->first) + (it2->first)) > target)
            {
                it2--;
            }
            else
                it1++;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/add-two-numbers/

You are given two non-empty linked lists representing two non-negative integers. 
The digits are stored in reverse order, and each of their nodes contains a single digit. 
Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:


Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]
Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
 

Constraints:

The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.


class Solution
{
public:
    ListNode *addTwoNumbers(ListNode *l1, ListNode *l2)
    {
        ListNode *temp = new ListNode(0);
        ListNode *curr = temp;
        int carry = 0;
        ListNode *p = l1;
        ListNode *q = l2;
        while(p != NULL || q != NULL)
        {
            int x = (p != NULL) ? p->val : 0;
            int y = (q != NULL) ? q->val : 0;
            int sum = carry + x + y;
            carry = sum / 10;
            curr->next = new ListNode(sum % 10);
            curr = curr->next;
            if (p != NULL) p = p->next;
            if (q != NULL) q = q->next;
        }
        if(carry > 0)
        {
            curr->next = new ListNode(carry);
        }
        return temp->next;
    }
};


// Source https://leetcode.com/problems/longest-substring-without-repeating-characters/

Given a string s, find the length of the longest substring without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.

class Solution
{
public:
    int lengthOfLongestSubstring(string s)
    {
        int mp[256] = {0};
        int l = 0, r = 0, max_length = 0;

        while(r < s.size())
        {
            mp[(int)s[r]]++;
            while(mp[(int)s[r]] > 1)
            {
                mp[(int)s[l]]--;
                l++;
            }

            max_length = max(max_length, r - l + 1);
            r++;
        }

        return max_length;
    }
};


// Source https://leetcode.com/problems/median-of-two-sorted-arrays/

Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).

 

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
 

Constraints:

nums1.length == m
nums2.length == n
0 <= m <= 1000
0 <= n <= 1000
1 <= m + n <= 2000
-106 <= nums1[i], nums2[i] <= 106

class Solution
{
public:
    double findMedianSortedArrays(vector<int> &A, vector<int> &B)
    {
        vector<int> AB = A;
        AB.insert(AB.end(), B.begin(), B.end());

        int n = AB.size();
        double sum = 0;

        sort(AB.begin(), AB.end());

        if(n % 2 == 0)
        {
            int mid = n / 2 ;
            sum = AB[mid-1] + AB[mid];
            return sum / 2;
        }
        else
        {
            int mid = n / 2;
            return AB[mid];
        }

        return -1;
    }
};


// Source https://leetcode.com/problems/longest-palindromic-substring/

Given a string s, return the longest palindromic substring in s.

 

Example 1:

Input: s = "babad"
Output: "bab"
Explanation: "aba" is also a valid answer.
Example 2:

Input: s = "cbbd"
Output: "bb"
 

Constraints:

1 <= s.length <= 1000
s consist of only digits and English letters.

class Solution
{
public:
    string longestPalindrome(string s)
    {
        int n = s.size();
        int start = -1, end = n;
        int maxlen = 0;
        for(int i = 0; i < n; i++)
        {
            int left = i - 1, right = i + 1; //odd length palindrome
            while(left >= 0 && right < n && s[left] == s[right])
            {
                left--;
                right++;
            }
            int len = right - left - 1; // (right - 1) - (left + 1) + 1 = right - left -1
            if(len > maxlen)
            {
                maxlen = len;
                start = left + 1;
                end = right - 1;
            }

            left = i; //even length palindrome
            right = i + 1;
            while(left >= 0 && right < n && s[left] == s[right])
            {
                left--;
                right++;
            }
            len = right - left - 1;
            if(len > maxlen)
            {
                maxlen = len;
                start = left + 1;
                end = right - 1;
            }
        }

        string ans;
        for(int i = start; i <= end; i++) ans.push_back(s[i]);
        return ans;
    }
};


// Source https://leetcode.com/problems/zigzag-conversion/

The string "PAYPALISHIRING" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)

P	A	H	N
A   P	L   S	I   I	G
Y	I	R
And then read line by line: "PAHNAPLSIIGYIR"

Write the code that will take a string and make this conversion given a number of rows:

string convert(string s, int numRows);
 

Example 1:

Input: s = "PAYPALISHIRING", numRows = 3
Output: "PAHNAPLSIIGYIR"
Example 2:

Input: s = "PAYPALISHIRING", numRows = 4
Output: "PINALSIGYAHRPI"
Explanation:
P     I    N
A   L S  I G
Y A   H R
P     I
Example 3:

Input: s = "A", numRows = 1
Output: "A"
 

Constraints:

1 <= s.length <= 1000
s consists of English letters (lower-case and upper-case), ',' and '.'.
1 <= numRows <= 1000

class Solution
{
public:
    string convert(string s, int numRows)
    {
        int i = 0;
        int n = s.size();
        int row = 0;
        int cutOff = numRows - 1;
        vector<string> output(numRows);

        while(i < n)
        {
            for(row = 0; (row < numRows) && i < n; ++row)
            {
                output[row].push_back(s[i]);
                ++i;
            }

            for(row = cutOff - 1; (row > 0) && i < n; --row)
            {
                output[row].push_back(s[i]);
                ++i;
            }
        }

        string ans;
        for(auto &s : output)
        {
            ans += s;
        }

        return ans;
    }
};


// Source https://leetcode.com/problems/reverse-integer/

Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-2^31, 2^31 - 1], then return 0.

Assume the environment does not allow you to store 64-bit integers (signed or unsigned).

 

Example 1:

Input: x = 123
Output: 321
Example 2:

Input: x = -123
Output: -321
Example 3:

Input: x = 120
Output: 21
 

Constraints:

-231 <= x <= 231 - 1

-2,147,483,648
-8,463,847,412


class Solution
{
public:
    int reverse(int x)
    {
        if (x == INT_MIN) return 0;
        int ans = 0;
        int sign = 1;
        if(x < 0) sign = -1;
        x = abs(x);
        while(x > 0)
        {
            int last = x % 10;
            if(ans > (INT_MAX - last) / 10) return 0; // ans * 10 + last > INT_MAX
            ans = 10 * ans + last;
            x = x / 10;
        }
        
        return ans * sign;
    }
};


// Source https://leetcode.com/problems/string-to-integer-atoi/

Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++'s atoi function).

The algorithm for myAtoi(string s) is as follows:

Read in and ignore any leading whitespace.
Check if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. 
This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.
Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.
Convert these digits into an integer (i.e. "123" -> 123, "0032" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).
If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range. 
Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.
Return the integer as the final result.
Note:

Only the space character ' ' is considered a whitespace character.
Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.
 

Example 1:

Input: s = "42"
Output: 42
Explanation: The underlined characters are what is read in, the caret is the current reader position.
Step 1: "42" (no characters read because there is no leading whitespace)
         ^
Step 2: "42" (no characters read because there is neither a '-' nor '+')
         ^
Step 3: "42" ("42" is read in)
           ^
The parsed integer is 42.
Since 42 is in the range [-231, 231 - 1], the final result is 42.
Example 2:

Input: s = "   -42"
Output: -42
Explanation:
Step 1: "   -42" (leading whitespace is read and ignored)
            ^
Step 2: "   -42" ('-' is read, so the result should be negative)
             ^
Step 3: "   -42" ("42" is read in)
               ^
The parsed integer is -42.
Since -42 is in the range [-231, 231 - 1], the final result is -42.
Example 3:

Input: s = "4193 with words"
Output: 4193
Explanation:
Step 1: "4193 with words" (no characters read because there is no leading whitespace)
         ^
Step 2: "4193 with words" (no characters read because there is neither a '-' nor '+')
         ^
Step 3: "4193 with words" ("4193" is read in; reading stops because the next character is a non-digit)
             ^
The parsed integer is 4193.
Since 4193 is in the range [-231, 231 - 1], the final result is 4193.
 

Constraints:

0 <= s.length <= 200
s consists of English letters (lower-case and upper-case), digits (0-9), ' ', '+', '-', and '.'.

class Solution
{
public:
    int myAtoi(string s)
    {
        int pos = 0;
        int n = s.size();
        bool negative = false;
        long long int current = 0;
        while(pos < n && s[pos] == ' ') //skip leading whitespace
        {
            ++pos;
        }
        if (pos == n) return 0;
        if(s[pos] == '-') //check for sign
        {
            negative = true;
            ++pos;
        }
        else if(s[pos] == '+') //check for sign
        {
            ++pos;
        }
        while(pos < n && isdigit(s[pos]) && current < 1e10)
        {
            current *= 10;
            current += s[pos] - '0';
            ++pos;
        }
        if(current > INT_MAX) //clamp value if too big
        {
            return negative ? INT_MIN : INT_MAX;
        }
        return negative ? -current : current;
    }
};


// Source https://leetcode.com/problems/palindrome-number/

Given an integer x, return true if x is palindrome integer.

An integer is a palindrome when it reads the same backward as forward.

For example, 121 is a palindrome while 123 is not.
 

Example 1:

Input: x = 121
Output: true
Explanation: 121 reads as 121 from left to right and from right to left.
Example 2:

Input: x = -121
Output: false
Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.
Example 3:

Input: x = 10
Output: false
Explanation: Reads 01 from right to left. Therefore it is not a palindrome.
 

Constraints:

-231 <= x <= 231 - 1

class Solution
{
public:
    bool isPalindrome(int x)
    {
        long long p = 0;
        long long val = x;
        while(val > 0)
        {
            p = 10 * p + val % 10;
            val /= 10;
        }
        return x == p ? true : false;
    }
};

// Source https://leetcode.com/problems/regular-expression-matching/

Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:

'.' Matches any single character.​​​​
'*' Matches zero or more of the preceding element.
The matching should cover the entire input string (not partial).

 

Example 1:

Input: s = "aa", p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".
Example 2:

Input: s = "aa", p = "a*"
Output: true
Explanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes "aa".
Example 3:

Input: s = "ab", p = ".*"
Output: true
Explanation: ".*" means "zero or more (*) of any character (.)".
 

Constraints:

1 <= s.length <= 20
1 <= p.length <= 30
s contains only lowercase English letters.
p contains only lowercase English letters, '.', and '*'.
It is guaranteed for each appearance of the character '*', there will be a previous valid character to match.

class Solution
{
public:
    int m, n;
    int dp[35][35];
    bool solve(int i, int j, string &s, string &p)
    {
        if(i == m && j == n) return true;
        if(j == n)
        {
            return false;
        }
        if(i == m)
        {
            if(j + 1 < n && p[j + 1] == '*') return solve(i, j + 2, s, p);
            return false;
        }
        if(dp[i][j] != -1) return dp[i][j];
        if((s[i] == p[j] && (j + 1 >= n || p[j + 1] != '*')) || (p[j] == '.' && (j + 1 >= n || p[j + 1] != '*')))
        {
            return dp[i][j] = solve(i + 1, j + 1, s, p);
        }
        if(p[j] == '.' && j + 1 < n && p[j + 1] == '*')
        {
            bool l = solve(i, j + 2, s, p);
            if(l) return dp[i][j] = true;
            return dp[i][j] = solve(i + 1, j, s, p);
        }
        if(p[j] != '.' && j + 1 < n && p[j + 1] == '*')
        {
            bool l = solve(i, j + 2, s, p);
            if(l) return dp[i][j] =  true;
            return dp[i][j] = (p[j] == s[i] ? solve(i + 1, j, s, p) : false);
        }
        return dp[i][j] = false;
    }

    bool isMatch(string s, string p)
    {
        m = s.size();
        n = p.size();
        memset(dp, -1, sizeof(dp));
        return solve(0, 0, s, p);
    }
};


// Source https://leetcode.com/problems/container-with-most-water/

You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the container contains the most water.

Return the maximum amount of water a container can store.

Notice that you may not slant the container.

 

Example 1:


Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.
Example 2:

Input: height = [1,1]
Output: 1
 

Constraints:

n == height.length
2 <= n <= 105
0 <= height[i] <= 104

class Solution
{
public:
    int maxArea(vector<int> &height)
    {
        int n = height.size();

        int low = 0;
        int high = n - 1;

        int maxWater = 0;
        while(low < high)
        {
            int distance = high - low;

            int minHeight = min(height[low], height[high]);
            maxWater = max(maxWater, minHeight * distance);

            if(height[low] < height[high])
            {
                low++;
            }
            else
            {
                high--;
            }
        }
        return maxWater;
    }
};


// Source https://leetcode.com/problems/integer-to-roman/

Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.

Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
For example, 2 is written as II in Roman numeral, just two one's added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:

I can be placed before V (5) and X (10) to make 4 and 9. 
X can be placed before L (50) and C (100) to make 40 and 90. 
C can be placed before D (500) and M (1000) to make 400 and 900.
Given an integer, convert it to a roman numeral.

 

Example 1:

Input: num = 3
Output: "III"
Explanation: 3 is represented as 3 ones.
Example 2:

Input: num = 58
Output: "LVIII"
Explanation: L = 50, V = 5, III = 3.
Example 3:

Input: num = 1994
Output: "MCMXCIV"
Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.
 

Constraints:

1 <= num <= 3999

class Solution
{
public:
    string intToRoman(int num)
    {
        string roman = "";
        while(num >= 1000)
        {
            roman += "M";
            num -= 1000;
        }
        if(num >= 900)
        {
            roman += "CM";
            num -= 900;
        }
        if(num >= 500)
        {
            roman += "D";
            num -= 500;
        }
        if(num >= 400)
        {
            roman += "CD";
            num -= 400;
        }
        while(num >= 100)
        {
            roman += "C";
            num -= 100;
        }
        if(num >= 90)
        {
            roman += "XC";
            num -= 90;
        }
        if(num >= 50)
        {
            roman += "L";
            num -= 50;
        }
        if(num >= 40)
        {
            roman += "XL";
            num -= 40;
        }
        while(num >= 10)
        {
            roman += "X";
            num -= 10;
        }
        if(num >= 9)
        {
            roman += "IX";
            num -= 9;
        }
        if(num >= 5)
        {
            roman += "V";
            num -= 5;
        }
        if(num >= 4)
        {
            roman += "IV";
            num -= 4;
        }
        while(num >= 1)
        {
            roman += "I";
            num -= 1;
        }
        return roman;
    }
};


// Source https://leetcode.com/problems/roman-to-integer/

Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.

Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
For example, 2 is written as II in Roman numeral, just two one's added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:

I can be placed before V (5) and X (10) to make 4 and 9. 
X can be placed before L (50) and C (100) to make 40 and 90. 
C can be placed before D (500) and M (1000) to make 400 and 900.
Given a roman numeral, convert it to an integer.

 

Example 1:

Input: s = "III"
Output: 3
Explanation: III = 3.
Example 2:

Input: s = "LVIII"
Output: 58
Explanation: L = 50, V= 5, III = 3.
Example 3:

Input: s = "MCMXCIV"
Output: 1994
Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.
 

Constraints:

1 <= s.length <= 15
s contains only the characters ('I', 'V', 'X', 'L', 'C', 'D', 'M').
It is guaranteed that s is a valid roman numeral in the range [1, 3999].

class Solution
{
public:
    int romanToInt(string s)
    {
        int num = 0;
        char prev = 'r'; // give a trash value to inzializate it
        for (int i = s.size() - 1; i >= 0; i--)
        {
            if (s[i] == 'V') num += 5;
            else if (s[i] == 'L') num += 50;
            else if (s[i] == 'D') num += 500;
            else if (s[i] == 'M') num += 1000;
            else if (s[i] == 'I')
            {
                if (prev == 'V' || prev == 'X') num -= 1;
                else num += 1;
            }
            else if (s[i] == 'X')
            {
                if (prev == 'L' || prev == 'C') num -= 10;
                else num += 10;
            }
            else if (s[i] == 'C')
            {
                if (prev == 'D' || prev == 'M') num -= 100;
                else num += 100;
            }

            prev = s[i];
        }
        return num;
    }
};


// Source https://leetcode.com/problems/longest-common-prefix/

Write a function to find the longest common prefix string amongst an array of strings.

If there is no common prefix, return an empty string "".

 

Example 1:

Input: strs = ["flower","flow","flight"]
Output: "fl"
Example 2:

Input: strs = ["dog","racecar","car"]
Output: ""
Explanation: There is no common prefix among the input strings.
 

Constraints:

1 <= strs.length <= 200
0 <= strs[i].length <= 200
strs[i] consists of only lower-case English letters.

class Solution
{
public:
    string comn(string str1, string str2)
    {
        string result;
        int n1 = str1.length(), n2 = str2.length();

        for (int i = 0, j = 0; i < n1 && j < n2; i++, j++)
        {
            if (str1[i] != str2[j])
                break;
            result.push_back(str1[i]);
        }

        return result;
    }

    string longestCommonPrefix(vector<string> &strs)
    {
        string prefix = strs[0];
        int n = strs.size();
        for (int i = 1; i < n; i++)
            prefix = comn(prefix, strs[i]);

        return prefix;
    }
};


// Source https://leetcode.com/problems/3sum/

Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Example 2:

Input: nums = []
Output: []
Example 3:

Input: nums = [0]
Output: []
 

Constraints:

0 <= nums.length <= 3000
-105 <= nums[i] <= 105

class Solution
{
public:
    vector<vector<int>> ans;

    vector<vector<int>> threeSum(vector<int> &nums)
    {
        ans.clear();
        int n = nums.size();

        if( n < 3 ) return ans;

        sort(nums.begin(), nums.end());

        for(int i = 0; i < n - 2; i++)
        {
            if( i == 0 || (nums[i] != nums[i - 1]) )
                searchElement(i, n, nums);
        }
        return ans;
    }

    void searchElement(int i, int n, vector<int> &nums)
    {
        int j = i + 1, k = n - 1, sum;
        while(j < k)
        {
            sum = (nums[i] + nums[j] + nums[k]);
            if( sum == 0 )
            {
                ans.push_back({nums[i], nums[j], nums[k]});
                j++;
                while(j < n && nums[j] == nums[j - 1]) j++;
            }
            else if( sum > 0 ) k--;
            else j++;
        }
    }
};


// Source https://leetcode.com/problems/3sum-closest/

Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.

Return the sum of the three integers.

You may assume that each input would have exactly one solution.

 

Example 1:

Input: nums = [-1,2,1,-4], target = 1
Output: 2
Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
Example 2:

Input: nums = [0,0,0], target = 1
Output: 0
 

Constraints:

3 <= nums.length <= 1000
-1000 <= nums[i] <= 1000
-104 <= target <= 104

class Solution
{
public:
    int threeSumClosest(vector<int> &nums, int target)
    {
        int sum, diff = INT_MAX, res;
        int a, b;
        int n = nums.size();
        sort(nums.begin(), nums.end());
        for(int i = 0 ; i < n - 2; i++)
        {
            if (i > 0 && nums[i] == nums[i - 1]) continue;
            a = i + 1;
            b = n - 1;
            while(a < b)
            {
                sum = nums[i] + nums[a] + nums[b];
                if(sum == target)
                    return sum;
                if(sum < target)
                {
                    if(abs(target - sum) < diff)
                    {
                        diff = abs(target - sum);
                        res = sum;
                    }
                    a++;
                }
                else
                {
                    if(abs(sum - target) < diff)
                    {
                        diff = abs(sum - target);
                        res = sum;
                    }
                    b--;
                }
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/letter-combinations-of-a-phone-number/

Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

1		2(a b c)		3(d e f)
4(g h i)		5(j k l)		6(m n o)
7(p q r s)	8(t u v)		9(w x y z)

Example 1:

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
Example 2:

Input: digits = ""
Output: []
Example 3:

Input: digits = "2"
Output: ["a","b","c"]
 

Constraints:

0 <= digits.length <= 4
digits[i] is a digit in the range ['2', '9'].

class Solution
{
public:
    vector<string> letter(string digits, vector<vector<string>> &v)
    {
        if(digits.size() < 1)
        {
            return vector<string>();
        }
        if(digits.size() == 1)
        {
            int x = digits[0] - '0';
            return v[x];
        }
        vector<string> v2 = letter(digits.substr(1), v);
        vector<string> s;
        int x = digits[0] - '0';
        for(string c : v[x])
        {
            for(string a : v2)
            {
                s.emplace_back(std::move(c + a));
            }
        }
        return s;
    }

    vector<string> letterCombinations(string digits)
    {
        vector<vector<string>> v(10);
        v[2] = {"a", "b", "c"};
        v[3] = {"d", "e", "f"};
        v[4] = {"g", "h", "i"};
        v[5] = {"j", "k", "l"};
        v[6] = {"m", "n", "o"};
        v[7] = {"p", "q", "r", "s"};
        v[8] = {"t", "u", "v"};
        v[9] = {"w", "x", "y", "z"};
        return letter(digits, v);
    }
};


// Source https://leetcode.com/problems/4sum/

Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:

0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target
You may return the answer in any order.

 

Example 1:

Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]
Example 2:

Input: nums = [2,2,2,2,2], target = 8
Output: [[2,2,2,2]]
 

Constraints:

1 <= nums.length <= 200
-109 <= nums[i] <= 109
-109 <= target <= 109

class Solution
{
public:
    int n ;

    void dfs(vector<int> &nums, int target, vector<vector<int>> &ans, vector<int> &curr, int s, int count, int sum)
    {
        if(count == 4)
        {
            if (target == sum) ans.push_back(curr);
            return;
        }

        for(int i = s; i < n; i++)
        {
            if(i != s && nums[i] == nums[i - 1]) continue;
            long long val = (long long)nums[i] * (4 - count);
            if((sum + val) > target) break;
            val = nums[i] + (long long)nums[n - 1] * (4 - count - 1);
            if((sum + val) < target) continue;
            curr.push_back(nums[i]);
            dfs(nums, target, ans, curr, i + 1, count + 1, sum + nums[i]);
            curr.pop_back();
        }
    }

    vector<vector<int>> fourSum(vector<int> &nums, int target)
    {
        sort(nums.begin(), nums.end());
        n = nums.size();
        vector<vector<int>> ans;
        vector<int> curr;
        dfs(nums, target, ans, curr, 0, 0, 0);

        return ans;
    }
};


// Source https://leetcode.com/problems/remove-nth-node-from-end-of-list/

Given the head of a linked list, remove the nth node from the end of the list and return its head.

 

Example 1:


Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]
Example 2:

Input: head = [1], n = 1
Output: []
Example 3:

Input: head = [1,2], n = 1
Output: [1]
 

Constraints:

The number of nodes in the list is sz.
1 <= sz <= 30
0 <= Node.val <= 100
1 <= n <= sz

class Solution
{
public:
    ListNode *removeNthFromEnd(ListNode *head, int n)
    {
        if(head->next == NULL) return NULL;

        ListNode *tempHead = new ListNode(0);
        tempHead->next = head;

        ListNode *slow = tempHead;
        ListNode *fast = tempHead;

        for(int i = 0; i < n; i++)
            fast = fast->next;

        while(fast->next != NULL)
        {
            slow = slow->next;
            fast = fast->next;
        }

        slow->next = slow->next->next;
        return tempHead->next;
    }
};


// Source https://leetcode.com/problems/valid-parentheses/

Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false
 

Constraints:

1 <= s.length <= 104
s consists of parentheses only '()[]{}'.

class Solution
{
public:
    bool isValid(string s)
    {
        stack<char> st;

        for(int i = 0; i < s.length(); i++)
        {
            if((s[i] == '(') || (s[i] == '[') || (s[i] == '{'))
            {
                st.push(s[i]);
            }
            else if(!st.empty())
            {
                if( (s[i] == ')' && st.top() == '(') || (s[i] == '}' && st.top() == '{') || (s[i] == ']' && st.top() == '[') )
                {
                    st.pop();
                }
                else
                {
                    return false;
                }
            }
            else
                return false;
        }
        if(st.empty())
            return true;
        else
            return false;
    }
};


// Source https://leetcode.com/problems/merge-two-sorted-lists/

You are given the heads of two sorted linked lists list1 and list2.

Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.

Return the head of the merged linked list.

 

Example 1:


Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]
Example 2:

Input: list1 = [], list2 = []
Output: []
Example 3:

Input: list1 = [], list2 = [0]
Output: [0]
 

Constraints:

The number of nodes in both lists is in the range [0, 50].
-100 <= Node.val <= 100
Both list1 and list2 are sorted in non-decreasing order.

class Solution
{
public:
    ListNode *mergeTwoLists(ListNode *list1, ListNode *list2)
    {
        ListNode *dummyNode = new ListNode(-1);
        ListNode *p1 = list1;
        ListNode *p2 = list2;
        ListNode *p3 = dummyNode;
        while(p1 != NULL && p2 != NULL)
        {
            if(p1->val <= p2->val)
            {
                p3->next = p1;
                p1 = p1->next;
            }
            else
            {
                p3->next = p2;
                p2 = p2->next;
            }
            p3 = p3->next;
        }

        if(p1 != NULL)
        {
            p3->next = p1;
        }
        if(p2 != NULL)
        {
            p3->next = p2;
        }
        return dummyNode->next;
    }
};


// Source https://leetcode.com/problems/generate-parentheses/

Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

 

Example 1:

Input: n = 3
Output: ["((()))","(()())","(())()","()(())","()()()"]
Example 2:

Input: n = 1
Output: ["()"]
 

Constraints:

1 <= n <= 8

class Solution
{
public:
    vector<string> generateParenthesis(int n)
    {
        vector<string> combinations;
        int open = 0, close = 0;
        string pattern;
        pattern.reserve(n + n);
        generateCombinations(open, close, n, pattern, combinations);
        return combinations;
    }

    void generateCombinations(int &open, int &close, int limit, string &pattern, vector<string> &combinations)
    {
        if (open > limit || close > limit || open < close) return;
        if( open == limit && close == limit )
        {
            combinations.push_back(pattern);
            return;
        }

        if( open < limit )
        {
            open++;
            pattern.push_back('(');
            generateCombinations(open, close, limit, pattern, combinations);
            pattern.pop_back();
            open--;
        }

        if( close < open && close < limit )
        {
            close++;
            pattern.push_back(')');
            generateCombinations(open, close, limit, pattern, combinations);
            pattern.pop_back();
            close--;
        }
    }
};


// Source https://leetcode.com/problems/merge-k-sorted-lists/

You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

Merge all the linked-lists into one sorted linked-list and return it.

 

Example 1:

Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6
Example 2:

Input: lists = []
Output: []
Example 3:

Input: lists = [[]]
Output: []
 

Constraints:

k == lists.length
0 <= k <= 104
0 <= lists[i].length <= 500
-104 <= lists[i][j] <= 104
lists[i] is sorted in ascending order.
The sum of lists[i].length will not exceed 104.

class Solution
{
public:
    ListNode *mergeKLists(vector<ListNode *> &lists)
    {
        priority_queue<int, vector<int>, greater<>> pq;

        for(auto it : lists)
        {
            ListNode *c = it;
            while (c)
            {
                pq.push(c->val);
                c = c->next;
            }
        }

        ListNode *head = nullptr, *curr = head;
        while (!pq.empty())
        {
            int val = pq.top();
            pq.pop();

            ListNode *tmp = new ListNode(val);

            if(!head)
            {
                head = tmp;
                curr = head;
            }
            else
            {
                curr->next = tmp;
                curr = curr->next;
            }
        }
        return head;
    }
};


// Source https://leetcode.com/problems/swap-nodes-in-pairs/

Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)

 

Example 1:


Input: head = [1,2,3,4]
Output: [2,1,4,3]
Example 2:

Input: head = []
Output: []
Example 3:

Input: head = [1]
Output: [1]
 

Constraints:

The number of nodes in the list is in the range [0, 100].
0 <= Node.val <= 100

class Solution
{
public:
    ListNode *nodeArr[10005];
    int nodeCnt;

    int getLength(ListNode *head, int k)
    {
        int ct = 0;
        while(head != NULL && ct < k)
        {
            nodeArr[nodeCnt++] = head;
            ct++;
            head = head->next;
        }
        return ct;
    }

    void recur(ListNode *head, int k)
    {
        int count = getLength(head, k);

        if (count == k)
        {
            ListNode *next = nodeArr[nodeCnt - 1]->next;
            for (int i = nodeCnt - k, j = nodeCnt - 1; i < j; ++i, --j)
            {
                ListNode *temp = nodeArr[i];
                nodeArr[i] = nodeArr[j];
                nodeArr[j] = temp;
            }
            if (next != NULL) recur(next, k);
        }
    }

    ListNode *swapPairs(ListNode *head)
    {
        if(head == NULL || head->next == NULL) return head;
        nodeCnt = 0;
        recur(head, 2);
        for (int i = 0; i < nodeCnt - 1; ++i)
        {
            ListNode *curr = nodeArr[i];
            curr->next = nodeArr[i + 1];
        }
        nodeArr[nodeCnt - 1]->next = NULL;
        return nodeArr[0];
    }
};


// Source https://leetcode.com/problems/reverse-nodes-in-k-group/

Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.

 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]
Example 2:


Input: head = [1,2,3,4,5], k = 3
Output: [3,2,1,4,5]
 

Constraints:

The number of nodes in the list is n.
1 <= k <= n <= 5000
0 <= Node.val <= 1000

class Solution
{
public:
    ListNode *nodeArr[10005];
    int nodeCnt;

    int getLength(ListNode *head, int k)
    {
        int ct = 0;
        while(head != NULL && ct < k)
        {
            nodeArr[nodeCnt++] = head;
            ct++;
            head = head->next;
        }
        return ct;
    }

    void recur(ListNode *head, int k)
    {
        int count = getLength(head, k);

        if (count == k)
        {
            ListNode *next = nodeArr[nodeCnt - 1]->next;
            for (int i = nodeCnt - k, j = nodeCnt - 1; i < j; ++i, --j)
            {
                ListNode *temp = nodeArr[i];
                nodeArr[i] = nodeArr[j];
                nodeArr[j] = temp;
            }
            if (next != NULL) recur(next, k);
        }
    }

    ListNode *reverseKGroup(ListNode *head, int k)
    {
        if(head == NULL || head->next == NULL) return head;
        nodeCnt = 0;
        recur(head, k);
        for (int i = 0; i < nodeCnt - 1; ++i)
        {
            ListNode *curr = nodeArr[i];
            curr->next = nodeArr[i + 1];
        }
        nodeArr[nodeCnt - 1]->next = NULL;
        return nodeArr[0];
    }
};


// Source https://leetcode.com/problems/remove-duplicates-from-sorted-array/

Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. 
The relative order of the elements should be kept the same.

Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. 
More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. 
It does not matter what you leave beyond the first k elements.

Return k after placing the final result in the first k slots of nums.

Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.

Custom Judge:

The judge will test your solution with the following code:

int[] nums = [...]; // Input array
int[] expectedNums = [...]; // The expected answer with correct length

int k = removeDuplicates(nums); // Calls your implementation

assert k == expectedNums.length;
for (int i = 0; i < k; i++) {
    assert nums[i] == expectedNums[i];
}
If all assertions pass, then your solution will be accepted.

 

Example 1:

Input: nums = [1,1,2]
Output: 2, nums = [1,2,_]
Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).
Example 2:

Input: nums = [0,0,1,1,1,2,2,3,3,4]
Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]
Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).
 

Constraints:

1 <= nums.length <= 3 * 104
-100 <= nums[i] <= 100
nums is sorted in non-decreasing order.

class Solution
{
public:
    int removeDuplicates(vector<int> &nums)
    {
        int i = 0, j = 0;
        int n = nums.size();
        while(j < n)
        {
            int val = nums[j];
            ++j;
            while(j < n && nums[j] == val) ++j;
            swap(nums[i], nums[j-1]);
            ++i;
        }
        return i;
    }
};


// Source https://leetcode.com/problems/remove-element/

Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The relative order of the elements may be changed.

Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. 
More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. 
It does not matter what you leave beyond the first k elements.

Return k after placing the final result in the first k slots of nums.

Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.

Custom Judge:

The judge will test your solution with the following code:

int[] nums = [...]; // Input array
int val = ...; // Value to remove
int[] expectedNums = [...]; // The expected answer with correct length.
                            // It is sorted with no values equaling val.

int k = removeElement(nums, val); // Calls your implementation

assert k == expectedNums.length;
sort(nums, 0, k); // Sort the first k elements of nums
for (int i = 0; i < actualLength; i++) {
    assert nums[i] == expectedNums[i];
}
If all assertions pass, then your solution will be accepted.

 

Example 1:

Input: nums = [3,2,2,3], val = 3
Output: 2, nums = [2,2,_,_]
Explanation: Your function should return k = 2, with the first two elements of nums being 2.
It does not matter what you leave beyond the returned k (hence they are underscores).
Example 2:

Input: nums = [0,1,2,2,3,0,4,2], val = 2
Output: 5, nums = [0,1,4,0,3,_,_,_]
Explanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.
Note that the five elements can be returned in any order.
It does not matter what you leave beyond the returned k (hence they are underscores).
 

Constraints:

0 <= nums.length <= 100
0 <= nums[i] <= 50
0 <= val <= 100

class Solution
{
public:
    int removeElement(vector<int> &nums, int val)
    {
        int n = nums.size();
        int i = 0, j = n - 1;
        while(i <= j)
        {
            for(; i <= j && nums[i] != val; ++i);
            if(i <= j && nums[i] == val)
            {
                for(; j >= i && nums[j] == val; --j);
                if (i < j)
                {
                    swap(nums[i], nums[j]);
                    --j;
                    ++i;
                }
            }
        }
        return i;
    }
};


// Source https://leetcode.com/problems/implement-strstr/

Implement strStr().

Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.

Clarification:

What should we return when needle is an empty string? This is a great question to ask during an interview.

For the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to C's strstr() and Java's indexOf().

 

Example 1:

Input: haystack = "hello", needle = "ll"
Output: 2
Example 2:

Input: haystack = "aaaaa", needle = "bba"
Output: -1
Example 3:

Input: haystack = "", needle = ""
Output: 0
 

Constraints:

0 <= haystack.length, needle.length <= 5 * 104
haystack and needle consist of only lower-case English characters.

class Solution
{
public:
    int strStr(string haystack, string needle)
    {
        int n1 = haystack.size();
        int n2 = needle.size();

        if(n2 == 0)
            return 0;
        if (n1 < n2) return -1;
        if (n1 == n2)
        {
            if (haystack == needle) return 0;
            else return -1;
        }

        auto idx = haystack.find(needle);
        if(idx == string :: npos)
        {
            return -1;
        }
        return idx;
    }
};

class Solution
{
public:
    int strStr(string haystack, string needle)
    {
        int n1 = haystack.size();
        int n2 = needle.size();

        if(n2 == 0)
            return 0;
        if (n1 < n2) return -1;
        if (n1 == n2)
        {
            if (haystack == needle) return 0;
            else return -1;
        }

        auto it = search(haystack.begin(), haystack.end(),
                         boyer_moore_horspool_searcher(needle.begin(), needle.end()));
        return it == haystack.end() ? -1 : it - haystack.begin();
    }
};


// Source https://leetcode.com/problems/divide-two-integers/

Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.

The integer division should truncate toward zero, which means losing its fractional part. For example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2.

Return the quotient after dividing dividend by divisor.

Note: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [−231, 231 − 1]. For this problem, if the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the quotient is strictly less than -231, then return -231.

 

Example 1:

Input: dividend = 10, divisor = 3
Output: 3
Explanation: 10/3 = 3.33333.. which is truncated to 3.
Example 2:

Input: dividend = 7, divisor = -3
Output: -2
Explanation: 7/-3 = -2.33333.. which is truncated to -2.
 

Constraints:

-231 <= dividend, divisor <= 231 - 1
divisor != 0

The idea is simple, Instead of reducing one by one we can reduce in power of twos. This concept is used in many algos like binary lifting etc.

We try to remove divisor * (highest power of 2 possible) . Once that is removeed we can only remove a power of two less than the power we just removed from the remaining number.

Make sure to use long long int for overflow prevention.

class Solution
{
public:
    int divide(int x, int y)
    {
        if (x == 0) return 0;
        int sign = ((x < 0) ^ (y < 0)) ? -1 : 1;

        long long int q = 0;

        long long int dividend = abs(x);
        long long int div = abs(y);

        for (int i = 31; i >= 0; i--)
        {
            if ( (div << i)  <= dividend)
            {
                q = q | (1LL << i);
                dividend = dividend - (div << i);
            }

            if (dividend < div)
                break;
        }

        q = sign * q;
        if (q < INT_MIN)
            return INT_MIN;

        if (q > INT_MAX)
            return INT_MAX;

        return q;
    }
};


// Source https://leetcode.com/problems/substring-with-concatenation-of-all-words/

You are given a string s and an array of strings words of the same length. Return all starting indices of substring(s) in s that is a concatenation of each word in words exactly once, in any order, 
and without any intervening characters.

You can return the answer in any order.

 

Example 1:

Input: s = "barfoothefoobarman", words = ["foo","bar"]
Output: [0,9]
Explanation: Substrings starting at index 0 and 9 are "barfoo" and "foobar" respectively.
The output order does not matter, returning [9,0] is fine too.
Example 2:

Input: s = "wordgoodgoodgoodbestword", words = ["word","good","best","word"]
Output: []
Example 3:

Input: s = "barfoofoobarthefoobarman", words = ["bar","foo","the"]
Output: [6,9,12]
 

Constraints:

1 <= s.length <= 104
s consists of lower-case English letters.
1 <= words.length <= 5000
1 <= words[i].length <= 30
words[i] consists of lower-case English letters.

class Solution
{
public:
    vector<int> findSubstring(string s, vector<string> &words)
    {
        int len_s = s.size();
        int len_ws = words.size();
        int len_w = words[0].size();
        int window_size = len_w * len_ws;
        if(len_s < window_size)
        {
            return vector<int> ();
        }

        unordered_map<string, int> str_count;
        unordered_map<string, int> str_clim;

        for(auto &w : words)
        {
            str_clim[w]++;
        }

        vector<int> result;
        for(int i = 0; i < len_w; i++)
        {
            str_count.clear();

            int mis_count = 0;
            int left = i, right = i;
            for(; right + len_w <= len_s; right += len_w)
            {
                if(str_clim.find(s.substr(right, len_w)) == str_clim.end())
                {
                    mis_count ++;
                }
                else
                {
                    str_count[s.substr(right, len_w)]++;
                }

                if(right - left >= window_size)
                {
                    if(str_clim.find(s.substr(left, len_w)) == str_clim.end())
                    {
                        mis_count -- ;
                    }
                    else
                    {
                        str_count[s.substr(left, len_w)]--;
                    }
                    left += len_w;
                }

                if(mis_count)
                {
                    continue;
                }

                int count = 0;
                for(auto &x : str_clim)
                {
                    count += ((str_count[x.first] == x.second) ? x.second : 0);
                }

                if(count == len_ws)
                {
                    result.push_back(left);
                }
            }
        }

        return result;
    }
};


// Source https://leetcode.com/problems/next-permutation/

A permutation of an array of integers is an arrangement of its members into a sequence or linear order.

For example, for arr = [1,2,3], the following are considered permutations of arr: [1,2,3], [1,3,2], [3,1,2], [2,3,1].
The next permutation of an array of integers is the next lexicographically greater permutation of its integer. 
More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, 
then the next permutation of that array is the permutation that follows it in the sorted container. 
If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).

For example, the next permutation of arr = [1,2,3] is [1,3,2].
Similarly, the next permutation of arr = [2,3,1] is [3,1,2].
While the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.
Given an array of integers nums, find the next permutation of nums.

The replacement must be in place and use only constant extra memory.

 

Example 1:

Input: nums = [1,2,3]
Output: [1,3,2]
Example 2:

Input: nums = [3,2,1]
Output: [1,2,3]
Example 3:

Input: nums = [1,1,5]
Output: [1,5,1]
 

Constraints:

1 <= nums.length <= 100
0 <= nums[i] <= 100

class Solution
{
    void reverse(vector<int> &v, int start, int end)
    {
        while(start < end)
        {
            swap(v[start++], v[end--]);
        }
    }

    int justGreaterIndexAtRight(vector<int> &v, int number, int terminationIndex)
    {
        int n = v.size(), i = n - 1;
        while(i >= terminationIndex)
        {
            if(v[i] > number) return i;
            i--;
        }
        return -1;
    }

public:
    void nextPermutation(vector<int> &nums)
    {
        int n = nums.size(), i = n - 1;

        while(i > 0 && nums[i - 1] >= nums[i])
        {
            i--;
        }
        if(i == 0)
        {
            reverse(nums, 0, n - 1);
            return;
        }

        int left = i - 1, cur = i, right = justGreaterIndexAtRight(nums, nums[left], cur);

        swap(nums[left], nums[right]);
        reverse(nums, cur, n - 1);
    }
};


// Source https://leetcode.com/problems/longest-valid-parentheses/

Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.

 

Example 1:

Input: s = "(()"
Output: 2
Explanation: The longest valid parentheses substring is "()".
Example 2:

Input: s = ")()())"
Output: 4
Explanation: The longest valid parentheses substring is "()()".
Example 3:

Input: s = ""
Output: 0
 

Constraints:

0 <= s.length <= 3 * 104
s[i] is '(', or ')'.

class Solution
{
public:
    int longestValidParentheses(string s)
    {
        int n = s.size();
        vector<int> st;
        st.reserve(n);

        int res = 0;
        for(int i = 0; i < n; i++)
        {
            if(s[i] == '(')
            {
                st.push_back(i);
            }
            else
            {
                if(!st.empty() && s[st.back()] == '(')
                    st.pop_back();
                else
                    st.push_back(i);
            }
            if(st.empty())
                res = max(res, i + 1);
            else
                res = max(res, i - st.back());
        }
        return res;
    }
};


// Source https://leetcode.com/problems/search-in-rotated-sorted-array/

There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) 
such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). 
For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
Example 3:

Input: nums = [1], target = 0
Output: -1
 

Constraints:

1 <= nums.length <= 5000
-104 <= nums[i] <= 104
All values of nums are unique.
nums is an ascending array that is possibly rotated.
-104 <= target <= 104

0　　1　　2　　 4　　5　　6　　7
7　　0　　1　　 2　　4　　5　　6
6　　7　　0　　 1　　2　　4　　5
5　　6　　7　　 0　　1　　2　　4
4　　5　　6　　7　　0　　1　　2
2　　4　　5　　6　　7　　0　　1
1　　2　　4　　5　　6　　7　　0

class Solution
{
public:
    int search(vector<int> &nums, int target)
    {
        int n = nums.size();
        if (nums[0] == target) return 0;
        if (n == 1) return -1;
        if (nums[0] < nums[n-1] || nums[0] > nums[1])
        {
            auto itr = lower_bound(nums.begin()+1, nums.end(), target);
            if (itr != nums.end() && *itr == target) return itr - nums.begin();
            else return -1;
        }
        int low = 1, high = n - 2;
        int idx = 1;
        while (low <= high)
        {
            int mid = (low + high) / 2;
            if (nums[mid] > nums[0] && nums[mid] > nums[n - 1])
            {
                idx = mid;
                low = mid + 1;
            }
            else
            {
                high = mid - 1;
            }
        }
        auto itrEnd = nums.begin() + idx + 1;
        auto itr1 = lower_bound(nums.begin(), itrEnd, target);
        if (itr1 != itrEnd && *itr1 == target) return itr1 - nums.begin();
        auto itr2 = lower_bound(itrEnd, nums.end(), target);
        if (itr2 != nums.end() && *itr2 == target) return itr2 - nums.begin();
        return -1;
    }
};


// Source https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/

Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]
 

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109
nums is a non-decreasing array.
-109 <= target <= 109

class Solution
{
public:
    vector<int> searchRange(vector<int> &nums, int target)
    {
        auto startPosItr = lower_bound(nums.begin(), nums.end(), target);
        auto endPosItr = upper_bound(nums.begin(), nums.end(), target);

        if(startPosItr == endPosItr) return {-1, -1};

        int startPos = startPosItr - nums.begin();
        int endPos = (endPosItr - nums.begin()) - 1;

        return {startPos, endPos};
    }
};


// Source https://leetcode.com/problems/search-insert-position/

Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [1,3,5,6], target = 5
Output: 2
Example 2:

Input: nums = [1,3,5,6], target = 2
Output: 1
Example 3:

Input: nums = [1,3,5,6], target = 7
Output: 4
 

Constraints:

1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums contains distinct values sorted in ascending order.
-104 <= target <= 104

class Solution
{
public:
    int searchInsert(vector<int> &nums, int target)
    {
        return lower_bound(nums.begin(), nums.end(), target) - nums.begin();
    }
};


// Source https://leetcode.com/problems/valid-sudoku/

Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:

A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.
 

Example 1:


Input: board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: true
Example 2:

Input: board = 
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: false
Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.
 

Constraints:

board.length == 9
board[i].length == 9
board[i][j] is a digit 1-9 or '.'.

class Solution
{
public:

    bool isvalid(char c, int i, int j, vector<vector<char>> &board)
    {
        for(int k = 0; k < 9; k++)
        {
            if(k != j && board[i][k] == c)return false;
            if(k != i && board[k][j] == c)return false;
            int l = 3 * (i / 3) + (k / 3);
            int r = 3 * (j / 3) + (k % 3);
            if(l == i && r == j)continue;
            else
            {
                if(board[l][r] == c)return false;
            }
        }
        return true;
    }
    bool isValidSudoku(vector<vector<char>> &board)
    {
        for(int i = 0; i < 9; i++)
        {
            for(int j = 0; j < 9; j++)
            {
                if(board[i][j] != '.')
                {
                    char c = board[i][j];
                    if(!isvalid(c, i, j, board))
                    {
                        return false;
                    }
                }
            }
        }
        return true;
    }
};


// Source https://leetcode.com/problems/sudoku-solver/

Write a program to solve a Sudoku puzzle by filling the empty cells.

A sudoku solution must satisfy all of the following rules:

Each of the digits 1-9 must occur exactly once in each row.
Each of the digits 1-9 must occur exactly once in each column.
Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.
The '.' character indicates empty cells.

 

Example 1:


Input: board = [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]
Output: [["5","3","4","6","7","8","9","1","2"],["6","7","2","1","9","5","3","4","8"],["1","9","8","3","4","2","5","6","7"],["8","5","9","7","6","1","4","2","3"],["4","2","6","8","5","3","7","9","1"],["7","1","3","9","2","4","8","5","6"],["9","6","1","5","3","7","2","8","4"],["2","8","7","4","1","9","6","3","5"],["3","4","5","2","8","6","1","7","9"]]
Explanation: The input board is shown above and the only valid solution is shown below:


 

Constraints:

board.length == 9
board[i].length == 9
board[i][j] is a digit or '.'.
It is guaranteed that the input board has only one solution.

class Solution
{
public:
    void solveSudoku(vector<vector<char>> &board)
    {
        solve(board);
    }
    bool solve(vector<vector<char>> &board)
    {
        for(int row = 0; row < 9; row++)
        {
            for(int col = 0; col < 9; col++)
            {
                if(board[row][col] == '.')
                {
                    for(char c = '1'; c <= '9'; c++)
                    {
                        if(isValid(board, row, col, c) == true)
                        {
                            board[row][col] = c;
                            if(solve(board) == true) return true;
                            else board[row][col] = '.';
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }
    bool isValid(vector<vector<char>> &board, int row, int col, char c)
    {
        for(int i = 0; i < 9; i++)
        {
            if(board[i][col] == c) return false;
            if(board[row][i] == c) return false;
        }
        int sr = (row / 3) * 3;
        int sc = (col / 3) * 3;
        for(int i = sr; i < sr + 3; i++)
        {
            for(int j = sc; j < sc + 3; j++)
            {
                if(board[i][j] == c) return false;
            }
        }
        return true;
    }
};


// Source https://leetcode.com/problems/count-and-say/

The count-and-say sequence is a sequence of digit strings defined by the recursive formula:

countAndSay(1) = "1"
countAndSay(n) is the way you would "say" the digit string from countAndSay(n-1), which is then converted into a different digit string.
To determine how you "say" a digit string, split it into the minimal number of groups so that each group is a contiguous section all of the same character. 
Then for each group, say the number of characters, then say the character. To convert the saying into a digit string, replace the counts with a number and concatenate every saying.

For example, the saying and conversion for digit string "3322251":


Given a positive integer n, return the nth term of the count-and-say sequence.

题意是n=1时输出字符串1；n=2时，数上次字符串中的数值个数，因为上次字符串有1个1，所以输出11；
n=3时，由于上次字符是11，有2个1，所以输出21；n=4时，由于上次字符串是21，有1个2和1个1，所以输出1211。
依次类推，写个countAndSay(n)函数返回字符串。

Example 1:

Input: n = 1
Output: "1"
Explanation: This is the base case.
Example 2:

Input: n = 4
Output: "1211"
Explanation:
countAndSay(1) = "1"
countAndSay(2) = say "1" = one 1 = "11"
countAndSay(3) = say "11" = two 1's = "21"
countAndSay(4) = say "21" = one 2 + one 1 = "12" + "11" = "1211"
 

Constraints:

1 <= n <= 30

class Solution
{
public:
    string convert(string s)
    {
        int n = s.size();
        string ans = "";
        int cnt = 1;
        for (int i = 1; i < n; i++)
        {
            if(s[i] == s[i - 1])
            {
                cnt++;
            }
            else
            {
                ans += char(cnt + '0');
                ans += s[i - 1];
                cnt = 1;
            }
        }
        if(cnt > 0)
        {
            ans += char(cnt + '0');
            ans += s[n - 1];
        }
        return ans;
    }
    string countAndSay(int n)
    {
        if(n == 1)
        {
            return "1";
        }
        string s = countAndSay(n - 1);
        return convert(s);
    }
};


// Source https://leetcode.com/problems/combination-sum/

Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. 
You may return the combinations in any order.

The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.

It is guaranteed that the number of unique combinations that sum up to target is less than 150 combinations for the given input.

 

Example 1:

Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]
Explanation:
2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
7 is a candidate, and 7 = 7.
These are the only two combinations.
Example 2:

Input: candidates = [2,3,5], target = 8
Output: [[2,2,2,2],[2,3,3],[3,5]]
Example 3:

Input: candidates = [2], target = 1
Output: []
 

Constraints:

1 <= candidates.length <= 30
1 <= candidates[i] <= 200
All elements of candidates are distinct.
1 <= target <= 500

class Solution
{
public:
    int n;

    void generate(vector<int> &arr, int target, vector<vector<int>> &ans, vector<int> &cur, int index, int sum)
    {
        if(sum >= target)
        {
            if(sum == target)
            {
                ans.push_back(cur);
            }
            return;
        }

        for(int i = index; i < n; i++)
        {
            if(sum + arr[i] > target)
                break;
            if(i == index || arr[i] != arr[i - 1])
            {
                cur.push_back(arr[i]);
                generate(arr, target, ans, cur, i, sum + arr[i]);
                cur.pop_back();
            }
        }
    }

    vector<vector<int>> combinationSum(vector<int> &arr, int target)
    {
        sort(arr.begin(), arr.end());
        n = arr.size();
        vector<vector<int>>ans;
        vector<int> cur;
        generate(arr, target, ans, cur, 0, 0);
        return ans;
    }
};


// Source https://leetcode.com/problems/combination-sum-ii/

Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.

Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.

 

Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]
Example 2:

Input: candidates = [2,5,2,1,2], target = 5
Output: 
[
[1,2,2],
[5]
]
 

Constraints:

1 <= candidates.length <= 100
1 <= candidates[i] <= 50
1 <= target <= 30

class Solution
{
public:
    int n;

    void generate(vector<int> &arr, int target, vector<vector<int>> &ans, vector<int> &cur, int index, int sum)
    {
        if(sum >= target)
        {
            if(sum == target)
            {
                ans.push_back(cur);
            }
            return;
        }

        for(int i = index; i < n; i++)
        {
            if(sum + arr[i] > target)
                break;
            if(i == index || arr[i] != arr[i - 1])
            {
                cur.push_back(arr[i]);
                generate(arr, target, ans, cur, i + 1, sum + arr[i]);
                cur.pop_back();
            }
        }
    }

    vector<vector<int>> combinationSum2(vector<int> &arr, int target)
    {
        sort(arr.begin(), arr.end());
        n = arr.size();
        vector<vector<int>>ans;
        vector<int> cur;
        generate(arr, target, ans, cur, 0, 0);
        return ans;
    }
};


// Source https://leetcode.com/problems/first-missing-positive/

Given an unsorted integer array nums, return the smallest missing positive integer.

You must implement an algorithm that runs in O(n) time and uses constant extra space.

 

Example 1:

Input: nums = [1,2,0]
Output: 3
Example 2:

Input: nums = [3,4,-1,1]
Output: 2
Example 3:

Input: nums = [7,8,9,11,12]
Output: 1
 

Constraints:

1 <= nums.length <= 5 * 105
-231 <= nums[i] <= 231 - 1

class Solution
{
public:
    int firstMissingPositive(vector<int> &nums)
    {
        sort(nums.begin(), nums.end());
        int n = nums.size();
        int i = 0;
        for(; i < n && nums[i] <= 0; ++i);
        int ans = 1;
        while(i < n)
        {
            if(nums[i] != ans) break;
            ++i;
            for(; i < n && nums[i] == nums[i-1]; ++i);
            ++ans;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/trapping-rain-water/

Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

 

Example 1:


Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
Example 2:

Input: height = [4,2,0,3,2,5]
Output: 9
 

Constraints:

n == height.length
1 <= n <= 2 * 104
0 <= height[i] <= 105

class Solution
{
public:
    int trap(vector<int> &height)
    {
        int n = height.size();

        vector<int> leftMax(n);
        leftMax[0] = height[0];
        int maxVal = height[0];

        for(int i = 1; i < n; i++)
        {
            if(height[i] > maxVal)
                maxVal = height[i];
            leftMax[i] = maxVal;
        }

        vector<int> rightMax(n);
        rightMax[n - 1] = height[n - 1];
        maxVal = height[n - 1];

        for(int i = n - 2; i >= 0; i--)
        {
            if(height[i] > maxVal)
                maxVal = height[i];
            rightMax[i] = maxVal;
        }

        int sum = 0;
        for(int i = 1; i < n - 1; i++)
        {
            sum += min(leftMax[i], rightMax[i]) - height[i];
        }
        return sum;
    }
};


// Source https://leetcode.com/problems/multiply-strings/

Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.

Note: You must not use any built-in BigInteger library or convert the inputs to integer directly.

 

Example 1:

Input: num1 = "2", num2 = "3"
Output: "6"
Example 2:

Input: num1 = "123", num2 = "456"
Output: "56088"
 

Constraints:

1 <= num1.length, num2.length <= 200
num1 and num2 consist of digits only.
Both num1 and num2 do not contain any leading zero, except the number 0 itself.
      81
    81
    81
  81
  9801

class Solution
{
public:
    string multiply(string A, string B)
    {
        int n = A.length(), m = B.length();
        string res(n + m, '0');

        for(int i = n - 1; i >= 0; i--)
        {
            for(int j = m - 1; j >= 0; j--)
            {
                int num = (A[i] - '0') * (B[j] - '0');
                int idx = i + j + 1;
                while (num > 0)
                {
                   int val = num + (res[idx] - '0');
                   res[idx] = val % 10 + '0';
                   num = val / 10;
                    --idx;
                }
            }
        }
        for(int i = 0; i < res.length(); i++) if(res[i] != '0') return res.substr(i);
        return "0";
    }
};


// Source https://leetcode.com/problems/wildcard-matching/

Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:

'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).
The matching should cover the entire input string (not partial).

 

Example 1:

Input: s = "aa", p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".
Example 2:

Input: s = "aa", p = "*"
Output: true
Explanation: '*' matches any sequence.
Example 3:

Input: s = "cb", p = "?a"
Output: false
Explanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.
 

Constraints:

0 <= s.length, p.length <= 2000
s contains only lowercase English letters.
p contains only lowercase English letters, '?' or '*'.

class Solution
{
public:
    int m, n;
    vector<vector<int>> dp;
    bool solve(int i, int j, string &s, string &p)
    {
        if(i == m && j == n) return true;
        if(j == n)
        {
            return false;
        }
        if(i == m)
        {
            if(p[j] == '*') return solve(i, j + 1, s, p);
            return false;
        }
        if(dp[i][j] != -1) return dp[i][j];
        if(s[i] == p[j] || p[j] == '?')
        {
            return dp[i][j] = solve(i + 1, j + 1, s, p);
        }
        if(p[j] != '*') return dp[i][j] = false;
        bool l = solve(i, j + 1, s, p);
        if(l) return dp[i][j] = true;
        return dp[i][j] = solve(i + 1, j, s, p);        
    }

    bool isMatch(string s, string p)
    {
        m = s.size();
        n = p.size();
        dp = vector<vector<int>>(m + 1, vector<int>(n + 1, -1));
        return solve(0, 0, s, p);
    }
};


// Source https://leetcode.com/problems/jump-game-ii/

Given an array of non-negative integers nums, you are initially positioned at the first index of the array.

Each element in the array represents your maximum jump length at that position.

Your goal is to reach the last index in the minimum number of jumps.

You can assume that you can always reach the last index.

 

Example 1:

Input: nums = [2,3,1,1,4]
Output: 2
Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.
Example 2:

Input: nums = [2,3,0,1,4]
Output: 2
 

Constraints:

1 <= nums.length <= 104
0 <= nums[i] <= 1000

class Solution
{
public:

    int jump(vector<int> &nums)
    {
        int n = nums.size();
        if (n == 1) return 0;
        int farthest = 0 + nums[0], current = farthest, jumps = 1;

        for(int i = 1; i < n - 1; i++)
        {
            farthest = max(farthest, nums[i] + i);
            if(i == current)
            {
                current = farthest;
                jumps++;
            }
        }
        return jumps;
    }
};


// Source https://leetcode.com/problems/permutations/

Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]
 

Constraints:

1 <= nums.length <= 6
-10 <= nums[i] <= 10
All the integers of nums are unique.

class Solution
{
public:
    vector<vector<int>> permute(vector<int> &nums)
    {
        vector<vector<int>> result;
        sort(nums.begin(), nums.end());

        do
        {
            result.push_back(nums);
        }
        while (next_permutation(nums.begin(), nums.end()));

        return result;
    }
};


// Source https://leetcode.com/problems/permutations-ii/

Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.

 

Example 1:

Input: nums = [1,1,2]
Output:
[[1,1,2],
 [1,2,1],
 [2,1,1]]
Example 2:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
 

Constraints:

1 <= nums.length <= 8
-10 <= nums[i] <= 10

class Solution
{
public:
    vector<vector<int>> permuteUnique(vector<int> &nums)
    {
        vector<vector<int>> result;
        sort(nums.begin(), nums.end());

        do
        {
            result.push_back(nums);
        }
        while (next_permutation(nums.begin(), nums.end()));

        return result;
    }
};


// Source https://leetcode.com/problems/rotate-image/

You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).

You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.

 

Example 1:


Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[7,4,1],[8,5,2],[9,6,3]]
Example 2:


Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]
Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]
 

Constraints:

n == matrix.length == matrix[i].length
1 <= n <= 20
-1000 <= matrix[i][j] <= 1000

1   2   3		1   4   7		7   4   1
4   5   6		2   5   8		8   5   2
7   8   9		3   6   9		9   6   3

class Solution
{
public:
    void rotate(vector<vector<int>> &matrix)
    {
        int n = matrix.size();
        // first transformation
        for (int i = 0; i < n; i++)
        {
            for (int j = i + 1; j < n; j++)
            {
                int temp = matrix[i][j];
                matrix[i][j] = matrix[j][i];
                matrix[j][i] = temp;
            }
        }

        // second transformation
        for (int j = 0; j < n / 2; j++)
        {
            for (int i = 0; i < n; i++)
            {
                int temp = matrix[i][j];
                matrix[i][j] = matrix[i][n - j - 1];
                matrix[i][n - j - 1] = temp;
            }
        }
    }
};


// Source https://leetcode.com/problems/group-anagrams/

Given an array of strings strs, group the anagrams together. You can return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

 

Example 1:

Input: strs = ["eat","tea","tan","ate","nat","bat"]
Output: [["bat"],["nat","tan"],["ate","eat","tea"]]
Example 2:

Input: strs = [""]
Output: [[""]]
Example 3:

Input: strs = ["a"]
Output: [["a"]]
 

Constraints:

1 <= strs.length <= 104
0 <= strs[i].length <= 100
strs[i] consists of lowercase English letters.

class Solution
{
public:
    vector<vector<string>> groupAnagrams(vector<string> &strs)
    {
        map<vector<int>, vector<string>> mpp;

        for(int i = 0; i < strs.size(); i++)
        {
            vector<int> v(26, 0); //store the occurences of chars

            for(int j = 0; j < strs[i].size(); j++)
            {
                v[strs[i][j] - 'a']++;
            }

            mpp[v].push_back(strs[i]); //push the key and val as stored occurences and string
        }

        vector<vector<string>> ans;
        for(auto &it : mpp)
        {
            ans.push_back(it.second); //push the string vector into the ans
        }

        return ans;
    }
};


// Source https://leetcode.com/problems/powx-n/

Implement pow(x, n), which calculates x raised to the power n (i.e., xn).

 

Example 1:

Input: x = 2.00000, n = 10
Output: 1024.00000
Example 2:

Input: x = 2.10000, n = 3
Output: 9.26100
Example 3:

Input: x = 2.00000, n = -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25
 

Constraints:

-100.0 < x < 100.0
-231 <= n <= 231-1
-104 <= xn <= 104

class Solution
{
public:
    double pow(double x, long long n)
    {
        double res = 1;
        while(n > 0)
        {
            if(n & 1) res *= x;
            x *= x;
            n >>= 1;
        }
        return res;
    }
    double myPow(double x, int n)
    {
        long long cnt = n;
        if(cnt < 0)
        {
            return 1 / pow(x, -cnt);
        }
        else return pow(x, cnt);
    }
};


// Source https://leetcode.com/problems/n-queens/

The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.

 

Example 1:


Input: n = 4
Output: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above
Example 2:

Input: n = 1
Output: [["Q"]]
 

Constraints:

1 <= n <= 9

class Solution
{
public:
    vector<vector<string>> result;
    vector<vector<string>> solveNQueens(int n)
    {
        vector<string> originalBoard = vector<string>(n, string(n, '.'));

        placeQueens(0, n, originalBoard);
        return result;
    }

    void placeQueens(int row, int n, vector<string> &board)
    {
        if(row == n)
        {
            result.push_back(board);
            return;
        }

        for(int j = 0; j < n; j++)
        {
            if(isSafeForQueen(row, j, n, board))
            {
                board[row][j] = 'Q';
                placeQueens(row + 1, n, board);
                board[row][j] = '.';
            }
        }
        return;
    }

    bool isSafeForQueen(int row, int col, int n, vector<string> &board)
    {
        //Check up
        for(int i = 0; i < row; i++)
        {
            if(board[i][col] == 'Q') return false;
        }

        //Check left diag
        for(int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--)
        {
            if(board[i][j] == 'Q') return false;
        }

        //Check right diag
        for(int i = row - 1, j = col + 1; i >= 0 && j < n; i--, j++)
        {
            if(board[i][j] == 'Q') return false;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/n-queens-ii/

The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return the number of distinct solutions to the n-queens puzzle.

 

Example 1:


Input: n = 4
Output: 2
Explanation: There are two distinct solutions to the 4-queens puzzle as shown.
Example 2:

Input: n = 1
Output: 1
 

Constraints:

1 <= n <= 9

class Solution
{
public:
    int totalNQueens(int n)
    {
        int chessboard[9][9];
        memset(chessboard, -1, sizeof(chessboard));

        int total = 0;
        NQueens(chessboard, n, 0, total);

        return total;
    }

    void NQueens(int chessboard[][9], int n, int row, int &total)
    {
        if(row == n)
        {
            total++;
            return;
        }

        for(int col = 0; col < n; ++col)
        {
            if(IsQueenSafe(chessboard, row, col, n) == true)
            {
                chessboard[row][col] = 0;
                NQueens(chessboard, n, row + 1, total);
                chessboard[row][col] = -1;
            }
        }
    }

    bool IsQueenSafe(int chessboard[][9], int row, int col, int n)
    {
        for(int i = row - 1, j = col; i >= 0; --i)
        {
            if(chessboard[i][j] == 0)
                return false;
        }

        for(int i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j)
        {
            if(chessboard[i][j] == 0)
                return false;
        }

        for(int i = row - 1, j = col + 1; i >= 0 && j <= (n - 1); --i, ++j)
        {
            if(chessboard[i][j] == 0)
                return false;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/maximum-subarray/

Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Example 2:

Input: nums = [1]
Output: 1
Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104

class Solution
{
public:
    int maxSubArray(vector<int> &nums)
    {
        int n = nums.size();
        vector<int> dp(n);
        dp[0] = nums[0];
        int res = dp[0];

        for(int i = 1; i < n; ++i)
        {
            dp[i] = max(nums[i], nums[i] + dp[i - 1]);
            res = max(res, dp[i]);
        }

        return res;
    }
};


// Source https://leetcode.com/problems/spiral-matrix/

Given an m x n matrix, return all elements of the matrix in spiral order.

 

Example 1:


Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]
Example 2:


Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 10
-100 <= matrix[i][j] <= 100

class Solution
{
public:
    vector<int> spiralOrder(vector<vector<int>> &matrix)
    {
        vector<int> ans;
        int row = matrix.size();
        int col = matrix[0].size();

        int startingrow = 0;
        int startingcol = 0;
        int endingrow = row - 1;
        int endingcol = col - 1;

        int count = 0;
        int total = col * row;
        while(count < total)
        {
            for(int i = startingcol; count < total && i <= endingcol; i++ )
            {
                ans.push_back(matrix[startingrow][i]);
                count++;
            }
            startingrow++;

            for(int i = startingrow; count < total && i <= endingrow; i++)
            {
                ans.push_back(matrix[i][endingcol]);
                count++;
            }
            endingcol--;

            for(int i = endingcol; count < total && i >= startingcol; i--)
            {
                ans.push_back(matrix[endingrow][i]);
                count++;
            }
            endingrow--;

            for(int i = endingrow; count < total && i >= startingrow; i--)
            {

                ans.push_back(matrix[i][startingcol]);
                count++;
            }
            startingcol++;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/jump-game/

You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.

Return true if you can reach the last index, or false otherwise.

 

Example 1:

Input: nums = [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.
Example 2:

Input: nums = [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.
 

Constraints:

1 <= nums.length <= 104
0 <= nums[i] <= 105

class Solution
{
public:
    bool canJump(vector<int> &nums)
    {
        int n = nums.size();
        if (n == 1) return true;
        int farthest = 0 + nums[0];
        int i = 1;
        for(; i < n && i <= farthest; ++i)
        {
            farthest = max(farthest, nums[i] + i);
        }
        return i == n;
    }
};


// Source https://leetcode.com/problems/merge-intervals/

Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

 

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
 

Constraints:

1 <= intervals.length <= 104
intervals[i].length == 2
0 <= starti <= endi <= 104

class Solution
{
public:
    vector<vector<int>> merge(vector<vector<int>> &intervals)
    {
        if(intervals.size() < 2)
        {
            return intervals;
        }
        vector<vector<int>> ans;
        sort(intervals.begin(), intervals.end());
        vector<int> temp = intervals[0];
        int i = 1;
        int n = intervals.size();
        for (; i < n; ++i)
        {
            if(intervals[i][0] > temp[1])
            {
                ans.push_back(temp);
                temp[0] = intervals[i][0];
                temp[1] = intervals[i][1];
            }
            else
            {
                temp[1] = max(temp[1], intervals[i][1]);
            }
        }
        ans.push_back(temp);
        return ans;
    }
};


// Source https://leetcode.com/problems/insert-interval/

You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. 
You are also given an interval newInterval = [start, end] that represents the start and end of another interval.

Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).

Return intervals after the insertion.

 

Example 1:

Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
Output: [[1,5],[6,9]]
Example 2:

Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
Output: [[1,2],[3,10],[12,16]]
Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].
 

Constraints:

0 <= intervals.length <= 104
intervals[i].length == 2
0 <= starti <= endi <= 105
intervals is sorted by starti in ascending order.
newInterval.length == 2
0 <= start <= end <= 105

class Solution
{
public:
    vector<vector<int>> insert(vector<vector<int>> &intervals, vector<int> &newInterval)
    {
        vector<vector<int>> res;
        int n = intervals.size();
        if (n == 0)
        {
            res.push_back(newInterval);
            return res;
        }
        int i = 0;
        while(i < n && intervals[i][1] < newInterval[0])
        {
            res.push_back(intervals[i]);
            i++;
        }
        if (i == n)
        {
            res.push_back(newInterval);
            return res;
        }
        if(newInterval[1] < intervals[i][0])
        {
            res.push_back(newInterval);
            for(; i < n; ++i) res.push_back(intervals[i]);
            return res;
        }
        vector<int> temp = intervals[i];
        temp[0] = min(temp[0], newInterval[0]);
        temp[1] = max(temp[1], newInterval[1]);
        ++i;
        for(; i < n; ++i)
        {
            if(temp[1] < intervals[i][0])
            {
                res.push_back(temp);
                break;
            }
            else
            {
                temp[1] = max(temp[1], intervals[i][1]);
            }
        }
        if (i == n)
        {
            res.push_back(temp);
            return res;
        }
        for(; i < n; ++i)
        {
            res.push_back(intervals[i]);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/length-of-last-word/

Given a string s consisting of some words separated by some number of spaces, return the length of the last word in the string.

A word is a maximal substring consisting of non-space characters only.

 

Example 1:

Input: s = "Hello World"
Output: 5
Explanation: The last word is "World" with length 5.
Example 2:

Input: s = "   fly me   to   the moon  "
Output: 4
Explanation: The last word is "moon" with length 4.
Example 3:

Input: s = "luffy is still joyboy"
Output: 6
Explanation: The last word is "joyboy" with length 6.
 

Constraints:

1 <= s.length <= 104
s consists of only English letters and spaces ' '.
There will be at least one word in s.

class Solution
{
public:
    int lengthOfLastWord(string s)
    {
        int length = 0;
        for (int i = s.size() - 1; i >= 0; i--)
        {
            if (s[i] != ' ')
            {
                length++;
            }
            if (s[i] == ' ' && length > 0)
            {
                break;
            }
        }
        return length;
    }
};


// Source https://leetcode.com/problems/spiral-matrix-ii/

Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.

 

Example 1:


Input: n = 3
Output: [[1,2,3],[8,9,4],[7,6,5]]
Example 2:

Input: n = 1
Output: [[1]]
 

Constraints:

1 <= n <= 20

class Solution
{
public:
    vector<vector<int>> generateMatrix(int n)
    {
        vector<vector<int>>dp( n, vector<int>(n) );
        int r_start = 0, c_start = 0, r_end = n - 1, c_end = n - 1;
        int a = 1;
        int total = n * n;
        while(a <= total)
        {
            for(int i = c_start; a <= total && i <= c_end; i++)
            {
                dp[r_start][i] = a++;   //Horizontal  forward -->
            }
            r_start++;

            for(int i = r_start; a <= total && i <= r_end; i++)
            {
                dp[i][c_end] = a++;   //Vertically Down
            }
            c_end--;

            for(int i = c_end; a <= total && i >= c_start; i--)
            {
                dp[r_end][i] = a++;   //Horizontal  Backward  <--
            }
            r_end--;

            for(int i = r_end; a <= total && i >= r_start; i--)
            {
                dp[i][c_start] = a++;   //Vertically Up
            }
            c_start++;
        }

        return dp;
    }
};


// Source https://leetcode.com/problems/permutation-sequence/

The set [1, 2, 3, ..., n] contains a total of n! unique permutations.

By listing and labeling all of the permutations in order, we get the following sequence for n = 3:

"123"
"132"
"213"
"231"
"312"
"321"
Given n and k, return the kth permutation sequence.

 

Example 1:

Input: n = 3, k = 3
Output: "213"
Example 2:

Input: n = 4, k = 9
Output: "2314"
Example 3:

Input: n = 3, k = 1
Output: "123"
 

Constraints:

1 <= n <= 9
1 <= k <= n!

class Solution
{
public:
    int fact[12];

    void fun()
    {
        fact[0] = 1;
        fact[1] = 1;
        for(int i = 2; i <= 11; i++)
        {
            fact[i] = i * fact[i - 1];
        }
    }

    string getPermutation(int n, int k)
    {
        fun();

        string temp(n, '0');
        for(int i = 1; i <= n; i++)
        {
            temp[i-1] = i + '0';
        }

        string ans = "";
        k--;
        for(int i = 1; i <= n; i++)
        {
            int index = (k / fact[n - i]);
            ans.push_back(temp[index]);
            temp.erase(temp.begin() + index);
            k = k - (index) * fact[n - i];
        }

        return ans;
    }
};


// Source https://leetcode.com/problems/rotate-list/

Given the head of a linked list, rotate the list to the right by k places.

 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]
Example 2:


Input: head = [0,1,2], k = 4
Output: [2,0,1]
 

Constraints:

The number of nodes in the list is in the range [0, 500].
-100 <= Node.val <= 100
0 <= k <= 2 * 109

class Solution
{
private:
    int get_len(ListNode *head)
    {
        int res = 0;
        while(head)
        {
            res++;
            head = head->next;
        }
        return res;
    }

public:
    ListNode *rotateRight(ListNode *head, int k)
    {
        if(head == NULL)
            return NULL;

        int len = get_len(head);
        k = k % len;
        if (k == 0)
        {
            return head;
        }

        ListNode *end = head;
        for(int i = 0 ; i < k ; i ++)
            end = end->next;

        ListNode *start = head;
        while(end->next != NULL)
        {
            start = start->next;
            end = end->next;
        }

        ListNode *newHead = start->next;
        end->next = head;
        start->next = NULL;

        return newHead;
    }
};


// Source https://leetcode.com/problems/unique-paths/

There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). 
The robot can only move either down or right at any point in time.

Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The test cases are generated so that the answer will be less than or equal to 2 * 109.

 

Example 1:


Input: m = 3, n = 7
Output: 28
Example 2:

Input: m = 3, n = 2
Output: 3
Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Down -> Down
2. Down -> Down -> Right
3. Down -> Right -> Down
 

Constraints:

1 <= m, n <= 100

class Solution
{
public:
    vector<vector<int>> dp;

    int helper(int m, int n)
    {
        if(m == 0 && n == 0)
        {
            return 1;
        }
        else if(m < 0 || n < 0)
        {
            return 0;
        }

        if(dp[m][n] != -1)
        {
            return dp[m][n];
        }
        int up = helper(m - 1, n);
        int left = helper(m, n - 1);
        return dp[m][n] = up + left;
    }

    int uniquePaths(int m, int n)
    {
        dp = vector<vector<int>>(m, vector<int>(n, -1));
        return helper(m - 1, n - 1);
    }
};


// Source https://leetcode.com/problems/unique-paths-ii/

A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

Now consider if some obstacles are added to the grids. How many unique paths would there be?

An obstacle and space is marked as 1 and 0 respectively in the grid.

 

Example 1:


Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]
Output: 2
Explanation: There is one obstacle in the middle of the 3x3 grid above.
There are two ways to reach the bottom-right corner:
1. Right -> Right -> Down -> Down
2. Down -> Down -> Right -> Right
Example 2:


Input: obstacleGrid = [[0,1],[0,0]]
Output: 1
 

Constraints:

m == obstacleGrid.length
n == obstacleGrid[i].length
1 <= m, n <= 100
obstacleGrid[i][j] is 0 or 1.

class Solution
{
public:
     vector<vector<int>> dp;

    int path(int row, int col, vector<vector<int>> &obstacleGrid)
    {
        if(row == 0 && col == 0)
            return 1;
        if(row < 0 || col < 0)
            return 0;
        if(obstacleGrid[row][col] == 1)
            return 0;
        if(dp[row][col] != -1)
            return dp[row][col];

        int left = path(row, col - 1, obstacleGrid);
        int up = path(row - 1, col, obstacleGrid);
        return dp[row][col] = left + up;
    }

    int uniquePathsWithObstacles(vector<vector<int>> &obstacleGrid)
    {
        if(obstacleGrid[0][0] == 1) return 0;

        int row = obstacleGrid.size();
        int col = obstacleGrid[0].size();
        dp = vector<vector<int>>(row, vector<int> (col, -1));
        return path(row - 1, col - 1, obstacleGrid);
    }
};


// Source https://leetcode.com/problems/minimum-path-sum/

Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

 

Example 1:


Input: grid = [[1,3,1],[1,5,1],[4,2,1]]
Output: 7
Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.
Example 2:

Input: grid = [[1,2,3],[4,5,6]]
Output: 12
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 200
0 <= grid[i][j] <= 100

class Solution
{
public:
    int m, n;
    vector<vector<int>> dp;

    int minPathSum(vector<vector<int>> &grid)
    {
        m = grid.size();
        n = grid[0].size();
        dp = vector<vector<int>>(m, vector<int>(n, -1));
        return helper(m - 1, n - 1, grid);
    }

    int helper(int i, int j, vector<vector<int>> &grid)
    {
        if(i == 0 && j == 0) return grid[i][j];
        if(i < 0 || j < 0) return 1e9;

        if(dp[i][j] != -1) return dp[i][j];

        int up = helper(i - 1, j, grid);
        int left = helper(i, j - 1, grid);

        return dp[i][j] = grid[i][j] + min(up, left);
    }
};



// Source https://leetcode.com/problems/valid-number/

A valid number can be split up into these components (in order):

A decimal number or an integer.
(Optional) An 'e' or 'E', followed by an integer.
A decimal number can be split up into these components (in order):

(Optional) A sign character (either '+' or '-').
One of the following formats:
One or more digits, followed by a dot '.'.
One or more digits, followed by a dot '.', followed by one or more digits.
A dot '.', followed by one or more digits.
An integer can be split up into these components (in order):

(Optional) A sign character (either '+' or '-').
One or more digits.
For example, all the following are valid numbers: ["2", "0089", "-0.1", "+3.14", "4.", "-.9", "2e10", "-90E3", "3e+7", "+6e-1", "53.5e93", "-123.456e789"], 
while the following are not valid numbers: ["abc", "1a", "1e", "e3", "99e2.5", "--6", "-+3", "95a54e53"].

Given a string s, return true if s is a valid number.

 

Example 1:

Input: s = "0"
Output: true
Example 2:

Input: s = "e"
Output: false
Example 3:

Input: s = "."
Output: false
 

Constraints:

1 <= s.length <= 20
s consists of only English letters (both uppercase and lowercase), digits (0-9), plus '+', minus '-', or dot '.'.

class Solution
{
public:
    bool isNumber(string s)
    {
        int i = 0, n = s.length();
        int cnt1 = 0, cnt2 = 0;
        if(s[i] == '+' || s[i] == '-') ++i;
        while(i < n && s[i] >= '0' && s[i] <= '9') ++i, ++cnt1;
        if(i < n && s[i] == '.')
        {
            ++i;
            while(i < n && s[i] >= '0' && s[i] <= '9') ++i, ++cnt2;
        }
        if(cnt1 == 0 && cnt2 == 0) return false;
        int cnt3 = 0;
        if(i < n && (s[i] == 'e' || s[i] == 'E'))
        {
            ++i;
            if(s[i] == '+' || s[i] == '-') ++i;
            while(i < n && s[i] >= '0' && s[i] <= '9') ++i, ++cnt3;
            if(cnt3 == 0) return false;
        }
        return i == n;
    }
};


// Source https://leetcode.com/problems/plus-one/

You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. 
The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.

Increment the large integer by one and return the resulting array of digits.

 

Example 1:

Input: digits = [1,2,3]
Output: [1,2,4]
Explanation: The array represents the integer 123.
Incrementing by one gives 123 + 1 = 124.
Thus, the result should be [1,2,4].
Example 2:

Input: digits = [4,3,2,1]
Output: [4,3,2,2]
Explanation: The array represents the integer 4321.
Incrementing by one gives 4321 + 1 = 4322.
Thus, the result should be [4,3,2,2].
Example 3:

Input: digits = [9]
Output: [1,0]
Explanation: The array represents the integer 9.
Incrementing by one gives 9 + 1 = 10.
Thus, the result should be [1,0].
 

Constraints:

1 <= digits.length <= 100
0 <= digits[i] <= 9
digits does not contain any leading 0's.

class Solution
{
public:

    vector<int> plusOne(vector<int> &digits)
    {
        int n = digits.size();
        int carry = 1;
        for (int i = n - 1; i >= 0; --i)
        {
            if (carry == 0) return digits;
            int val = digits[i] + carry;
            digits[i] = val % 10;
            carry = val / 10;
        }
        if (carry) digits.insert(digits.begin(), 1);
        return digits;
    }
};


// Source https://leetcode.com/problems/add-binary/

Given two binary strings a and b, return their sum as a binary string.

 

Example 1:

Input: a = "11", b = "1"
Output: "100"
Example 2:

Input: a = "1010", b = "1011"
Output: "10101"
 

Constraints:

1 <= a.length, b.length <= 104
a and b consist only of '0' or '1' characters.
Each string does not contain leading zeros except for the zero itself.

class Solution
{
public:
    string addBinary(string a, string b)
    {
        string str = "";
        int i = a.size() - 1, j = b.size() - 1, carry = 0;

        while(i >= 0 && j >= 0)
        {
            int sum = (a[i] - '0') + (b[j] - '0') + carry;
            str.insert(0, 1, (sum % 2) + '0');
            carry = sum / 2;
            --i;
            --j;
        }

        while(i >= 0)
        {
            int sum = a[i] - '0' + carry;
            str.insert(0, 1, (sum % 2) + '0');
            carry = sum / 2;
            --i;
        }
        while(j >= 0)
        {
            int sum = b[j] - '0' + carry;
            str.insert(0, 1, (sum % 2) + '0');
            carry = sum / 2;
            --j;
        }
        if(carry) str.insert(0, 1, '1');
        return str;
    }
};


// Source https://leetcode.com/problems/text-justification/

Given an array of strings words and a width maxWidth, format the text such that each line has exactly maxWidth characters and is fully (left and right) justified.

You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces ' ' when necessary so that each line has exactly maxWidth characters.

Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, 
the empty slots on the left will be assigned more spaces than the slots on the right.

For the last line of text, it should be left-justified and no extra space is inserted between words.

Note:

A word is defined as a character sequence consisting of non-space characters only.
Each word's length is guaranteed to be greater than 0 and not exceed maxWidth.
The input array words contains at least one word.
 

Example 1:

Input: words = ["This", "is", "an", "example", "of", "text", "justification."], maxWidth = 16
Output:
[
   "This    is    an",
   "example  of text",
   "justification.  "
]
Example 2:

Input: words = ["What","must","be","acknowledgment","shall","be"], maxWidth = 16
Output:
[
  "What   must   be",
  "acknowledgment  ",
  "shall be        "
]
Explanation: Note that the last line is "shall be    " instead of "shall     be", because the last line must be left-justified instead of fully-justified.
Note that the second line is also left-justified becase it contains only one word.
Example 3:

Input: words = ["Science","is","what","we","understand","well","enough","to","explain","to","a","computer.","Art","is","everything","else","we","do"], maxWidth = 20
Output:
[
  "Science  is  what we",
  "understand      well",
  "enough to explain to",
  "a  computer.  Art is",
  "everything  else  we",
  "do                  "
]
 

Constraints:

1 <= words.length <= 300
1 <= words[i].length <= 20
words[i] consists of only English letters and symbols.
1 <= maxWidth <= 100
words[i].length <= maxWidth

class Solution
{
public:
    vector<string> fullJustify(vector<string> &words, int maxWidth)
    {
        vector<string> res;
        vector<string> cur_line;
        int charac_cnt = 0;
        for (const auto &w : words)
        {
            if (w.length() + charac_cnt + cur_line.size() <= maxWidth)  // cur_line.size() + 1个word需要cur_line.size() 段space，每段space至少1个空格
            {
                charac_cnt += w.length();
                cur_line.push_back(w);
            }
            else
            {
                if (cur_line.size() == 1)
                {
                    res.push_back(formLine(cur_line, 0, 0, maxWidth));
                }
                else
                {
                    int space = (maxWidth - charac_cnt) / (cur_line.size() - 1); // base space size
                    int front_increment = (maxWidth - charac_cnt) % (cur_line.size() - 1); // head spaces to increment size by 1
                    res.push_back(formLine(cur_line, space, front_increment, maxWidth));
                }
                // reset the line and character counts
                cur_line = vector<string> {w};
                charac_cnt = w.length();
            }
        }
        res.push_back(formLine(cur_line, 1, 0, maxWidth));
        return res;
    }
    string formLine(vector<string> &cur_line, int space, int front_increment, int maxWidth)
    {
        string res = cur_line[0];
        int n = cur_line.size();
        for (int i = 1; i < n; i++)
        {
            if (--front_increment >= 0)
            {
                res += " ";
            }
            for (int j = 0 ; j < space ; j++)
            {
                res += " ";
            }
            res += cur_line[i];
        }
        // fill the rest to be empty spaces for last line and one-word line
        while (res.length() < maxWidth)
        {
            res += " ";
        }
        return res;
    }
};


// Source https://leetcode.com/problems/sqrtx/

Given a non-negative integer x, compute and return the square root of x.

Since the return type is an integer, the decimal digits are truncated, and only the integer part of the result is returned.

Note: You are not allowed to use any built-in exponent function or operator, such as pow(x, 0.5) or x ** 0.5.

 

Example 1:

Input: x = 4
Output: 2
Example 2:

Input: x = 8
Output: 2
Explanation: The square root of 8 is 2.82842..., and since the decimal part is truncated, 2 is returned.
 

Constraints:

0 <= x <= 231 - 1

class Solution
{
public:
    int mySqrt(int x)
    {
        if (x <= 1) return x;
        long long start = 1, end = x;
        long long mid;
        int ans;
        while(start <= end)
        {
            mid = start + (end - start) / 2;
            long long val = mid * mid;
            if(val == x)
            {
                return (int)mid;
            }
            else if(val > x)
            {
                end = mid - 1;
            }
            else
            {
                ans = (int)mid;
                start = mid + 1;
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/climbing-stairs/

You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

 

Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
 

Constraints:

1 <= n <= 45

class Solution
{
public:
    vector<int> dp;
    int climbStairs(int n)
    {
        dp = vector<int>(50);
        return climb(n);
    }

    int climb (int n)
    {
        if(n < 0) return 0;
        if(n == 0) return 1;
        if (dp[n] != 0) return dp[n];
        return dp[n] = climb(n - 1) + climb(n - 2);
    }
};


// Source https://leetcode.com/problems/simplify-path/

Given a string path, which is an absolute path (starting with a slash '/') to a file or directory in a Unix-style file system, convert it to the simplified canonical path.

In a Unix-style file system, a period '.' refers to the current directory, a double period '..' refers to the directory up a level, 
and any multiple consecutive slashes (i.e. '//') are treated as a single slash '/'. 
For this problem, any other format of periods such as '...' are treated as file/directory names.

The canonical path should have the following format:

The path starts with a single slash '/'.
Any two directories are separated by a single slash '/'.
The path does not end with a trailing '/'.
The path only contains the directories on the path from the root directory to the target file or directory (i.e., no period '.' or double period '..')
Return the simplified canonical path.

 

Example 1:

Input: path = "/home/"
Output: "/home"
Explanation: Note that there is no trailing slash after the last directory name.
Example 2:

Input: path = "/../"
Output: "/"
Explanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go.
Example 3:

Input: path = "/home//foo/"
Output: "/home/foo"
Explanation: In the canonical path, multiple consecutive slashes are replaced by a single one.
 

Constraints:

1 <= path.length <= 3000
path consists of English letters, digits, period '.', slash '/' or '_'.
path is a valid absolute Unix path.

class Solution
{
public:
    string simplifyPath(string path)
    {
        vector<string> vec;
        string curr = "";
        int n = path.size();
        for(int i = 0; i < n; i++)
        {
            if (path[i] != '/')
            {
                curr += path[i];
                continue;
            }
            if(curr == "" || curr == ".")
            {
                curr = "";
                continue;
            }
            if(curr == "..")
            {
                if(!vec.empty())
                    vec.pop_back();
            }
            else
            {
                vec.push_back(curr);
            }
            curr = "";
        }
        if(curr.size() > 0 && curr != ".." && curr != ".")
        {
            vec.push_back(curr);
        }
        if(curr == ".." && !vec.empty())
        {
            vec.pop_back();
        }
        if(vec.size() == 0) return "/";
        string res = "";
        for(auto &str : vec)
        {
            res += ("/" + str);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/edit-distance/

Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character
 

Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')
Example 2:

Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')
 

Constraints:

0 <= word1.length, word2.length <= 500
word1 and word2 consist of lowercase English letters.

class Solution
{
public:
    int n, m;
    vector<vector<int>> dp;

    int minDistance(string word1, string word2)
    {
        n = word1.size();
        m = word2.size();
        dp = vector<vector<int>>(n, vector<int>(m, -1));
        return editDistance(0, 0, word1, word2);
    }
    int editDistance(int i, int j, string &word1, string &word2)
    {
        if (i == n && j == m) return 0;
        if(i == n)
        {
            return m - j;
        }
        if(j == m)
        {
            return n - i;
        }
        if(dp[i][j] != -1)
        {
            return dp[i][j];
        }
        if(word1[i] == word2[j])
        {
            return dp[i][j] = editDistance(i + 1, j + 1, word1, word2);
        }
        int cnt1 = 1 + editDistance(i, j + 1, word1, word2); //insert
        int cnt2 = 1 + editDistance(i + 1, j, word1, word2); //delete
        int cnt3 = 1 + editDistance(i + 1, j + 1, word1, word2); //replace
        return dp[i][j] = min(cnt1, min(cnt2, cnt3));
    }
};


// Source https://leetcode.com/problems/set-matrix-zeroes/

Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.

You must do it in place.

 

Example 1:


Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]
Output: [[1,0,1],[0,0,0],[1,0,1]]
Example 2:


Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]
Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]
 

Constraints:

m == matrix.length
n == matrix[0].length
1 <= m, n <= 200
-231 <= matrix[i][j] <= 231 - 1
 

Follow up:

A straightforward solution using O(mn) space is probably a bad idea.
A simple improvement uses O(m + n) space, but still not the best solution.
Could you devise a constant space solution?

class Solution
{
public:
    void setZeroes(vector<vector<int>> &matrix)
    {
        int m = matrix.size();
        int n = matrix[0].size();
        if(m == 1 && n == 1)
        {
            return;
        }

        bool row_flag = false;
        bool col_flag = false;

        //check for any zero in 1st row
        for(int i = 0; i < n; i++)
        {
            if(matrix[0][i] == 0)
            {
                row_flag = true;
            }
        }

        //check for any zero in 1st col
        for(int i = 0; i < m; i++)
        {
            if(matrix[i][0] == 0)
            {
                col_flag = true;
            }
        }

        for(int i = 1; i < m; i++)
        {
            for(int j = 1; j < n; j++)
            {
                if(matrix[i][j] == 0)
                {
                    matrix[0][j] = 0;
                    matrix[i][0] = 0;
                }
            }
        }

        //using inspace auxillary space as first row and first column, make submatrix values to be zero
        for(int i = 1; i < m; i++)
        {
            for(int j = 1; j < n; j++)
            {
                if(matrix[0][j] == 0 || matrix[i][0] == 0)
                {
                    matrix[i][j] = 0;
                }
            }
        }

        if(row_flag)
        {
            for(int i = 0; i < n; i++)
            {
                matrix[0][i] = 0;
            }
        }

        if(col_flag)
        {
            for(int i = 0; i < m; i++)
            {
                matrix[i][0] = 0;
            }
        }
    }
};


// Source https://leetcode.com/problems/search-a-2d-matrix/

Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
 

Example 1:


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true
Example 2:


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 100
-104 <= matrix[i][j], target <= 104

class Solution
{
public:
    bool searchMatrix(vector<vector<int>> &matrix, int target)
    {
        int m = matrix.size();
        int n = matrix[0].size();
        vector<int> vec(m);
        for(int i = 0; i < m; ++i)
        {
            vec[i] = matrix[i][n - 1];
        }
        auto itr = lower_bound(vec.begin(), vec.end(), target);
        if (itr == vec.end()) return false;
        int idx = itr - vec.begin();
        auto itr2 = lower_bound(begin(matrix[idx]), end(matrix[idx]), target);
        if (itr2 == end(matrix[idx]) || *itr2 != target) return false;
        return true;
    }
};


// Source https://leetcode.com/problems/sort-colors/

Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

 

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Example 2:

Input: nums = [2,0,1]
Output: [0,1,2]
 

Constraints:

n == nums.length
1 <= n <= 300
nums[i] is either 0, 1, or 2.

class Solution
{
public:
    void sortColors(vector<int> &nums)
    {
        int one = 0, zero = 0, two = 0;
        for (int i = 0; i < nums.size(); i++)
        {
            if (nums[i] == 0)
            {
                zero++;
            }
            else if (nums[i] == 1)
            {
                one++;
            }
            else
            {
                two++;
            }
        }
        nums.clear();
        nums.insert(nums.end(), zero, 0);
        nums.insert(nums.end(), one, 1);
        nums.insert(nums.end(), two, 2);
    }
};


// Source https://leetcode.com/problems/minimum-window-substring/

Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. 
If there is no such substring, return the empty string "".

The testcases will be generated such that the answer is unique.

A substring is a contiguous sequence of characters within the string.

 

Example 1:

Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t.
Example 2:

Input: s = "a", t = "a"
Output: "a"
Explanation: The entire string s is the minimum window.
Example 3:

Input: s = "a", t = "aa"
Output: ""
Explanation: Both 'a's from t must be included in the window.
Since the largest window of s only has one 'a', return empty string.
 

Constraints:

m == s.length
n == t.length
1 <= m, n <= 105
s and t consist of uppercase and lowercase English letters.

class Solution
{
public:
    string minWindow(string s, string t)
    {
        unordered_map<char, int> need, window;
        for (char c : t) need[c]++;
        int n = s.size();
        int left = 0, right = 0;
        int valid = 0;
        int start = 0, len = INT_MAX;
        while (right < n)
        {
            char c = s[right];
            if (need.count(c))
            {
                window[c]++;
                if (window[c] == need[c]) valid++; // valid 表示s[left ... right] 满足 window[c] >= need[c] 的字符c的个数
            }

            while (valid == need.size())
            {
                if (right - left + 1 < len)
                {
                    start = left;
                    len = right - left + 1;
                }
                char c = s[left];
                if (need.count(c))
                {
                    if (window[c] == need[c]) valid--;
                    window[c]--;
                }
                ++left;
            }
            ++right;
        }

        return len == INT_MAX ? "" : s.substr(start, len);
    }
};


// Source https://leetcode.com/problems/combinations/

Given two integers n and k, return all possible combinations of k numbers out of the range [1, n].

You may return the answer in any order.

 

Example 1:

Input: n = 4, k = 2
Output:
[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]
Example 2:

Input: n = 1, k = 1
Output: [[1]]
 

Constraints:

1 <= n <= 20
1 <= k <= n

class Solution
{
public:

    void recur(vector<int> &nums, int n, vector<vector<int>>&ans, vector<int> &cur, int k, int idx)
    {
        if(cur.size() == k)
        {
            ans.push_back(cur);
            return;
        }
        for(int i = idx; i < n; i++)
        {
            cur.push_back(nums[i]);
            recur(nums, n, ans, cur, k, i + 1);
            cur.pop_back();
        }
    }

    vector<vector<int>> combine(int n, int k)
    {
        vector<int> nums;
        for(int i = 1; i <= n; i++)
        {
            nums.push_back(i);
        }
        vector<vector<int>> ans;
        vector<int> cur;
        recur(nums, n, ans, cur, k, 0);
        return ans;
    }
};


// Source https://leetcode.com/problems/subsets/

Given an integer array nums of unique elements, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:

Input: nums = [0]
Output: [[],[0]]
 

Constraints:

1 <= nums.length <= 10
-10 <= nums[i] <= 10
All the numbers of nums are unique.

class Solution
{
public:

    void recur(vector<int> &nums, int n, vector<vector<int>>&ans, vector<int> &cur, int idx)
    {
        if(idx == n)
        {
            ans.push_back(cur);
            return;
        }
        cur.push_back(nums[idx]);
        recur(nums, n, ans, cur, idx + 1);
        cur.pop_back();
        recur(nums, n, ans, cur, idx + 1);
    }

    vector<vector<int>> subsets(vector<int> &nums)
    {
        vector<vector<int>> ans;
        vector<int> cur;
        int n = nums.size();
        recur(nums, n, ans, cur, 0);
        return ans;
    }
};


// Source https://leetcode.com/problems/word-search/

Given an m x n grid of characters board and a string word, return true if word exists in the grid.

The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.

 

Example 1:


Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
Output: true
Example 2:


Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "SEE"
Output: true
Example 3:


Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCB"
Output: false
 

Constraints:

m == board.length
n = board[i].length
1 <= m, n <= 6
1 <= word.length <= 15
board and word consists of only lowercase and uppercase English letters.

class Solution
{
private:
    int m, n, len;
    int visit[35][35];
    bool res;

    void backtrack(vector<vector<char>> &board, int i, int j, string &word, int idx)
    {
        if (res) return;
        if (idx >= len)
        {
            res = true;
            return;
        }
        if (i < 0 || i >= m || j < 0 || j >= n || visit[i][j] == 1 || board[i][j] != word[idx])
        {
            return;
        }
        visit[i][j] = 1;
        backtrack(board, i + 1, j, word, idx + 1);
        backtrack(board, i - 1, j, word, idx + 1);
        backtrack(board, i, j + 1, word, idx + 1);
        backtrack(board, i, j - 1, word, idx + 1);
        visit[i][j] = 0;
    }

public:
    bool exist(vector<vector<char>> &board, string word)
    {
        memset(visit, 0, sizeof(visit));
        m = board.size(), n = board[0].size(), len = word.length();
        res = false;
        for (int i = 0; i < m; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                backtrack(board, i, j, word, 0);
                if (res) return true;
            }
        }
        return false;
    }
};


// Source https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii/

Given an integer array nums sorted in non-decreasing order, remove some duplicates in-place such that each unique element appears at most twice. 
The relative order of the elements should be kept the same.

Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. 
More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. 
It does not matter what you leave beyond the first k elements.

Return k after placing the final result in the first k slots of nums.

Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.

Custom Judge:

The judge will test your solution with the following code:

int[] nums = [...]; // Input array
int[] expectedNums = [...]; // The expected answer with correct length

int k = removeDuplicates(nums); // Calls your implementation

assert k == expectedNums.length;
for (int i = 0; i < k; i++) {
    assert nums[i] == expectedNums[i];
}
If all assertions pass, then your solution will be accepted.

 

Example 1:

Input: nums = [1,1,1,2,2,3]
Output: 5, nums = [1,1,2,2,3,_]
Explanation: Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).
Example 2:

Input: nums = [0,0,1,1,1,1,2,3,3]
Output: 7, nums = [0,0,1,1,2,3,3,_,_]
Explanation: Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).
 

Constraints:

1 <= nums.length <= 3 * 104
-104 <= nums[i] <= 104
nums is sorted in non-decreasing order.

class Solution
{
public:
    int removeDuplicates(vector<int> &nums)
    {
        int l = 0, i = 0, n = nums.size();
        while (i < n)
        {
            int cnt = 1;
            ++i;
            for(; i < n && nums[i] == nums[i - 1]; ++i, ++cnt);
            if (cnt >= 2)
            {
                nums[l] = nums[i - 1];
                nums[l + 1] = nums[i - 1];
                l += 2;
            }
            else
            {
                nums[l] = nums[i - 1];
                ++l;
            }
        }

        return l;
    }
};


// Source https://leetcode.com/problems/search-in-rotated-sorted-array-ii/

There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).

Before being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is 
[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].

Given the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.

You must decrease the overall operation steps as much as possible.

 

Example 1:

Input: nums = [2,5,6,0,0,1,2], target = 0
Output: true
Example 2:

Input: nums = [2,5,6,0,0,1,2], target = 3
Output: false
 

Constraints:

1 <= nums.length <= 5000
-104 <= nums[i] <= 104
nums is guaranteed to be rotated at some pivot.
-104 <= target <= 104

0　　1　　2　　 4　　5　　6　　7
7　　0　　1　　 2　　4　　5　　6
6　　7　　0　　 1　　2　　4　　5
5　　6　　7　　 0　　1　　2　　4
4　　5　　6　　7　　0　　1　　2
2　　4　　5　　6　　7　　0　　1
1　　2　　4　　5　　6　　7　　0

class Solution
{
public:
    bool search(vector<int> &nums, int target)
    {
        int n = nums.size();
        if (nums[0] == target) return true;
        if (n == 1) return false;
        int i = 1;
        for(; i < n && nums[i] == nums[i - 1]; ++i);
        if (i == n) return false;
        if (nums[0] > nums[i] || nums[i] <= nums[n-1])
        {
            auto itr = lower_bound(nums.begin()+i, nums.end(), target);
            if (itr != nums.end() && *itr == target) return true;
            else return false;
        }
        int low = i, high = n - 1;
        int idx = i;
        while (low <= high)
        {
            int mid = (low + high) / 2;
            if (nums[mid] > nums[0] && nums[mid] > nums[n - 1])
            {
                idx = mid;
                low = mid + 1;
            }
            else
            {
                high = mid - 1;
            }
        }
        auto itrEnd = nums.begin() + idx + 1;
        auto itr1 = lower_bound(nums.begin(), itrEnd, target);
        if (itr1 != itrEnd && *itr1 == target) return true;
        auto itr2 = lower_bound(itrEnd, nums.end(), target);
        if (itr2 != nums.end() && *itr2 == target) return true;
        return false;
    }
};


// Source https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/

Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.

 

Example 1:


Input: head = [1,2,3,3,4,4,5]
Output: [1,2,5]
Example 2:


Input: head = [1,1,1,2,3]
Output: [2,3]
 

Constraints:

The number of nodes in the list is in the range [0, 300].
-100 <= Node.val <= 100
The list is guaranteed to be sorted in ascending order.

class Solution
{
public:
    ListNode *deleteDuplicates(ListNode *head)
    {
        ListNode *temp = new ListNode(0);
        temp->next = head;
        ListNode *prev = temp;
        ListNode *curr = head;

        while(curr)
        {
            auto val = curr->val;
            ListNode *end = curr;
            int cnt = 1;
            curr = curr->next;
            while (curr && curr->val == val) ++cnt, end = curr, curr = curr->next;
            if (cnt >= 2)
            {
                prev->next = curr;
            }
            else
            {
                prev = end;
            }
        }
        return temp->next;
    }
};


// Source https://leetcode.com/problems/remove-duplicates-from-sorted-list/

Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.

 

Example 1:


Input: head = [1,1,2]
Output: [1,2]
Example 2:


Input: head = [1,1,2,3,3]
Output: [1,2,3]
 

Constraints:

The number of nodes in the list is in the range [0, 300].
-100 <= Node.val <= 100
The list is guaranteed to be sorted in ascending order.

class Solution
{
public:
    ListNode *deleteDuplicates(ListNode *head)
    {
        ListNode *temp = new ListNode(0);
        temp->next = head;
        ListNode *prev = temp;
        ListNode *curr = head;

        while(curr)
        {
            auto val = curr->val;
            ListNode *end = curr;
            int cnt = 1;
            curr = curr->next;
            while (curr && curr->val == val) ++cnt, end = curr, curr = curr->next;
            if (cnt >= 2)
            {
                prev->next = end;
                prev = end;
            }
            else
            {
                prev = end;
            }
        }
        return temp->next;
    }
};

// Source https://leetcode.com/problems/largest-rectangle-in-histogram/

Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.

 

Example 1:


Input: heights = [2,1,5,6,2,3]
Output: 10
Explanation: The above is a histogram where width of each bar is 1.
The largest rectangle is shown in the red area, which has an area = 10 units.
Example 2:


Input: heights = [2,4]
Output: 4
 

Constraints:

1 <= heights.length <= 105
0 <= heights[i] <= 104

class Solution
{
public:
    int largestRectangleArea(vector<int> &heights)
    {
        int n = heights.size();
        vector<int> left(n, 0);
        vector<int> right(n, 0);
        left[0] = -1;
        vector<pair<int, int>> vec;
        vec.reserve(128);
        vec.push_back({0, heights[0]});
        for(int i = 1; i < n; i++)
        {
            while(vec.size() > 0)
            {
                if (vec.back().second < heights[i]) break;
                vec.pop_back();
            }
            int idx = -1;
            if (vec.size() > 0) idx = vec.back().first;
            left[i] = idx;
            vec.push_back({i, heights[i]});
        }
        right[n - 1] = n;
        vec.clear();
        vec.push_back({n-1, heights[n-1]});
        for(int i = n - 2; i >= 0; i--)
        {
            while(vec.size() > 0)
            {
                if (vec.back().second < heights[i]) break;
                vec.pop_back();
            }
            int idx = n;
            if (vec.size() > 0) idx = vec.back().first;
            right[i] = idx;
            vec.push_back({i, heights[i]});
        }
        int ans = 0;
        for(int i = 0; i < heights.size(); i++)
        {
            ans = max(ans, (right[i] - left[i] - 1) * heights[i]); // right[i] - i - 1 + i - left[i] -1 + 1 = right[i] - left[i] - 1
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/maximal-rectangle/

Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.

 

Example 1:


Input: matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
Output: 6
Explanation: The maximal rectangle is shown in the above picture.
Example 2:

Input: matrix = [["0"]]
Output: 0
Example 3:

Input: matrix = [["1"]]
Output: 1
 

Constraints:

rows == matrix.length
cols == matrix[i].length
1 <= row, cols <= 200
matrix[i][j] is '0' or '1'.

class Solution
{
public:
    int maximalRectangle(vector<vector<char>> &matrix)
    {
        int m = matrix.size();
        int n = matrix[0].size();
        vector<int> heights(n);
        int ans = 0;

        for(int i = 0 ; i < m ; i++)
        {
            for(int j = 0 ; j  < n ; j++)
            {
                if(matrix[i][j] == '1')
                {
                    heights[j]++;
                }
                else
                {
                    heights[j] = 0;
                }
            }

            vector<int> left(n, 0);
            vector<int> right(n, 0);
            left[0] = -1;
            vector<pair<int, int>> vec;
            vec.reserve(32);
            vec.push_back({0, heights[0]});
            for(int i = 1; i < n; i++)
            {
                while(vec.size() > 0)
                {
                    if (vec.back().second < heights[i]) break;
                    vec.pop_back();
                }
                int idx = -1;
                if (vec.size() > 0) idx = vec.back().first;
                left[i] = idx;
                vec.push_back({i, heights[i]});
            }
            right[n - 1] = n;
            vec.clear();
            vec.push_back({n - 1, heights[n - 1]});
            for(int i = n - 2; i >= 0; i--)
            {
                while(vec.size() > 0)
                {
                    if (vec.back().second < heights[i]) break;
                    vec.pop_back();
                }
                int idx = n;
                if (vec.size() > 0) idx = vec.back().first;
                right[i] = idx;
                vec.push_back({i, heights[i]});
            }
            for(int i = 0; i < heights.size(); i++)
            {
                ans = max(ans, (right[i] - left[i] - 1) * heights[i]); // right[i] - i - 1 + i - left[i] -1 + 1 = right[i] - left[i] - 1
            }
        }

        return ans;
    }
};


// Source https://leetcode.com/problems/partition-list/

Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

 

Example 1:


Input: head = [1,4,3,2,5,2], x = 3
Output: [1,2,2,4,3,5]
Example 2:

Input: head = [2,1], x = 2
Output: [1,2]
 

Constraints:

The number of nodes in the list is in the range [0, 200].
-100 <= Node.val <= 100
-200 <= x <= 200

class Solution
{
public:
    ListNode *partition(ListNode *head, int x)
    {
        ListNode *temp1 = new ListNode(0);
        ListNode *temp2 = new ListNode(0);

        ListNode *node1 = temp1;
        ListNode *node2 = temp2;

        ListNode *h = head;
        while(h)
        {
            if(h->val < x)
            {
                node1->next = h;
                node1 = node1->next;
            }
            else
            {
                node2->next = h;
                node2 = node2->next;
            }
            h = h->next;
        }

        node1->next = NULL;
        node2->next = NULL;

        node1->next = temp2->next;
        return temp1->next;
    }
};


// Source https://leetcode.com/problems/scramble-string/

We can scramble a string s to get a string t using the following algorithm:

If the length of the string is 1, stop.
If the length of the string is > 1, do the following:
Split the string into two non-empty substrings at a random index, i.e., if the string is s, divide it to x and y where s = x + y.
Randomly decide to swap the two substrings or to keep them in the same order. i.e., after this step, s may become s = x + y or s = y + x.
Apply step 1 recursively on each of the two substrings x and y.
Given two strings s1 and s2 of the same length, return true if s2 is a scrambled string of s1, otherwise, return false.

 

Example 1:

Input: s1 = "great", s2 = "rgeat"
Output: true
Explanation: One possible scenario applied on s1 is:
"great" --> "gr/eat" // divide at random index.
"gr/eat" --> "gr/eat" // random decision is not to swap the two substrings and keep them in order.
"gr/eat" --> "g/r / e/at" // apply the same algorithm recursively on both substrings. divide at ranom index each of them.
"g/r / e/at" --> "r/g / e/at" // random decision was to swap the first substring and to keep the second substring in the same order.
"r/g / e/at" --> "r/g / e/ a/t" // again apply the algorithm recursively, divide "at" to "a/t".
"r/g / e/ a/t" --> "r/g / e/ a/t" // random decision is to keep both substrings in the same order.
The algorithm stops now and the result string is "rgeat" which is s2.
As there is one possible scenario that led s1 to be scrambled to s2, we return true.
Example 2:

Input: s1 = "abcde", s2 = "caebd"
Output: false
Example 3:

Input: s1 = "a", s2 = "a"
Output: true
 

Constraints:

s1.length == s2.length
1 <= s1.length <= 30
s1 and s2 consist of lower-case English letters.

class Solution
{
public:
    unordered_map<string, bool> um;

    bool isScramble(string s1, string s2)
    {
        if(s1 == s2) return true;
        string S1 = s1;
        string S2 = s2;
        sort(S1.begin(), S1.end());
        sort(S2.begin(), S2.end());
        if(S1 != S2) return false;
        string tmp = s1 + "@" + s2;
        if(um.find(tmp) != um.end()) return um[tmp];

        int n = s1.size();
        for(int part = 1; part < n; part++)
        {
            bool l1 = isScramble(s1.substr(0, part), s2.substr(0, part));
            bool r1 = isScramble(s1.substr(part, n - part), s2.substr(part, n - part));
            bool l2 = isScramble(s1.substr(0, part), s2.substr(n - part, part));
            bool r2 = isScramble(s1.substr(part, n - part), s2.substr(0, n - part));
            if(l1 == true && r1 == true) return um[tmp] = true;
            if(l2 == true && r2 == true) return um[tmp] = true;
        }
        return um[tmp] = false;
    }
};


// Source https://leetcode.com/problems/merge-sorted-array/

You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be stored inside the array nums1. 
To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, 
and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

 

Example 1:

Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.
Example 2:

Input: nums1 = [1], m = 1, nums2 = [], n = 0
Output: [1]
Explanation: The arrays we are merging are [1] and [].
The result of the merge is [1].
Example 3:

Input: nums1 = [0], m = 0, nums2 = [1], n = 1
Output: [1]
Explanation: The arrays we are merging are [] and [1].
The result of the merge is [1].
Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.
 

Constraints:

nums1.length == m + n
nums2.length == n
0 <= m, n <= 200
1 <= m + n <= 200
-109 <= nums1[i], nums2[j] <= 109

class Solution
{
public:
    void merge(vector<int> &a, int n, vector<int> &b, int m)
    {
        int i = 0, j = 0;
        vector<int> v;
        v.reserve(n + m);
        while(i < n && j < m)
        {
            if(a[i] <= b[j]) v.push_back(a[i++]);
            else v.push_back(b[j++]);
        }
        for(; i < n; i++) v.push_back(a[i]);
        for(; j < m; j++) v.push_back(b[j]);
        a = v;
    }
};


// Source https://leetcode.com/problems/gray-code/

An n-bit gray code sequence is a sequence of 2^n integers where:

Every integer is in the inclusive range [0, 2^n - 1],
The first integer is 0,
An integer appears no more than once in the sequence,
The binary representation of every pair of adjacent integers differs by exactly one bit, and
The binary representation of the first and last integers differs by exactly one bit.
Given an integer n, return any valid n-bit gray code sequence.

 

Example 1:

Input: n = 2
Output: [0,1,3,2]
Explanation:
The binary representation of [0,1,3,2] is [00,01,11,10].
- 00 and 01 differ by one bit
- 01 and 11 differ by one bit
- 11 and 10 differ by one bit
- 10 and 00 differ by one bit
[0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01].
- 00 and 10 differ by one bit
- 10 and 11 differ by one bit
- 11 and 01 differ by one bit
- 01 and 00 differ by one bit
Example 2:

Input: n = 1
Output: [0,1]

i        ^ (i >> 1)
0000 ^ 0000 = 0000
0001 ^ 0000 = 0001
0010 ^ 0001 = 0011
0011 ^ 0001 = 0010
0100 ^ 0010 = 0110
0101 ^ 0010 = 0111
0110 ^ 0011 = 0101
0111 ^ 0011 = 0100
1000 ^ 0100 = 1100
1001 ^ 0100 = 1101
1010 ^ 0101 = 1111
1011 ^ 0101 = 1110
1100 ^ 0110 = 1010
1101 ^ 0110 = 1011
1110 ^ 0111 = 1001
1111 ^ 0111 = 1000

Constraints:

1 <= n <= 16

class Solution
{
public:
    vector<int> grayCode(int n)
    {
        int cnt = (1 << n);
        vector<int> v(cnt);

        for(int i = 0; i < cnt; i++)
        {
            v[i] = (i ^ (i >> 1));
        }

        return v;
    }
};


// Source https://leetcode.com/problems/subsets-ii/

Given an integer array nums that may contain duplicates, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,2]
Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]
Example 2:

Input: nums = [0]
Output: [[],[0]]
 

Constraints:

1 <= nums.length <= 10
-10 <= nums[i] <= 10


class Solution
{
public:

    void recur(vector<int> &nums, int n, vector<vector<int>>&ans, vector<int> &cur, int idx)
    {
        if(idx == n)
        {
            ans.push_back(cur);
            return;
        }
        int i = idx + 1;
        for (; i < n && nums[i] == nums[i - 1]; ++i);
        int cnt = i - idx;
        for (int k = 0; k < cnt; ++k)
        {
            cur.push_back(nums[idx]);
            recur(nums, n, ans, cur, i);
        }
        for (int k = 0; k < cnt; ++k) cur.pop_back();
        recur(nums, n, ans, cur, i);
    }

    vector<vector<int>> subsetsWithDup(vector<int> &nums)
    {
        vector<vector<int>> ans;
        vector<int> cur;
        sort(nums.begin(), nums.end());
        int n = nums.size();
        recur(nums, n, ans, cur, 0);
        return ans;
    }
};


// Source https://leetcode.com/problems/decode-ways/

A message containing letters from A-Z can be encoded into numbers using the following mapping:

'A' -> "1"
'B' -> "2"
...
'Z' -> "26"
To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). 
For example, "11106" can be mapped into:

"AAJF" with the grouping (1 1 10 6)
"KJF" with the grouping (11 10 6)
Note that the grouping (1 11 06) is invalid because "06" cannot be mapped into 'F' since "6" is different from "06".

Given a string s containing only digits, return the number of ways to decode it.

The test cases are generated so that the answer fits in a 32-bit integer.

 

Example 1:

Input: s = "12"
Output: 2
Explanation: "12" could be decoded as "AB" (1 2) or "L" (12).
Example 2:

Input: s = "226"
Output: 3
Explanation: "226" could be decoded as "BZ" (2 26), "VF" (22 6), or "BBF" (2 2 6).
Example 3:

Input: s = "06"
Output: 0
Explanation: "06" cannot be mapped to "F" because of the leading zero ("6" is different from "06").
 

Constraints:

1 <= s.length <= 100
s contains only digits and may contain leading zero(s).

class Solution
{
public:
    int dp[105];

    int recur(string &s, int n, int idx)
    {
        if (idx >= n) return 1;
        if (s[idx] == '0') return 0;
        if (dp[idx] != -1) return dp[idx];
        int ans = recur(s, n, idx + 1);
        if (idx + 1 < n && ((s[idx] - '0') * 10 + (s[idx + 1] - '0')) <= 26)
        {
            ans += recur(s, n, idx + 2);
        }
        return dp[idx] = ans;
    }
    int numDecodings(string s)
    {
        memset(dp, -1, sizeof(dp));
        int n = s.size();
        return recur(s, n, 0);
    }
};


// Source https://leetcode.com/problems/reverse-linked-list-ii/

Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.

 

Example 1:


Input: head = [1,2,3,4,5], left = 2, right = 4
Output: [1,4,3,2,5]
Example 2:

Input: head = [5], left = 1, right = 1
Output: [5]
 

Constraints:

The number of nodes in the list is n.
1 <= n <= 500
-500 <= Node.val <= 500
1 <= left <= right <= n

class Solution
{
public:
    ListNode *reverseBetween(ListNode *head, int left, int right)
    {
        if(head == NULL || head->next == NULL) return head;
        ListNode *dummy = new ListNode(0);
        dummy->next = head;
        ListNode *prev = dummy;
        ListNode *curr = head;
        int pos = 1;
        while (pos < left)
        {
            prev = curr;
            curr = curr->next;
            ++pos;
        }
        int cnt = 1;
        ListNode *start = curr;
        ListNode *end = curr;
        while (pos < right)
        {
            curr = curr->next;
            end = curr;
            ++cnt;
            ++pos;
        }
        ListNode *next = end->next;
        ListNode *ptrArr[cnt];
        ListNode *ptr = start;
        int idx = 0;
        while (ptr != next)
        {
            ptrArr[idx++] = ptr;
            ptr = ptr->next;
        }
        for (int i = cnt - 1; i > 0; --i)
        {
            ListNode *temp = ptrArr[i];
            temp->next = ptrArr[i - 1];
        }
        prev->next = ptrArr[cnt - 1];
        ptrArr[0]->next = next;
        return dummy->next;
    }
};


// Source https://leetcode.com/problems/restore-ip-addresses/

A valid IP address consists of exactly four integers separated by single dots. Each integer is between 0 and 255 (inclusive) and cannot have leading zeros.

For example, "0.1.2.201" and "192.168.1.1" are valid IP addresses, but "0.011.255.245", "192.168.1.312" and "192.168@1.1" are invalid IP addresses.
Given a string s containing only digits, return all possible valid IP addresses that can be formed by inserting dots into s. 
You are not allowed to reorder or remove any digits in s. You may return the valid IP addresses in any order.

 

Example 1:

Input: s = "25525511135"
Output: ["255.255.11.135","255.255.111.35"]
Example 2:

Input: s = "0000"
Output: ["0.0.0.0"]
Example 3:

Input: s = "101023"
Output: ["1.0.10.23","1.0.102.3","10.1.0.23","10.10.2.3","101.0.2.3"]
 

Constraints:

1 <= s.length <= 20
s consists of digits only.

class Solution
{
public:
    void recur(string &s, int n, vector<vector<string>> &ans, vector<string> &curr, int idx)
    {
        if (curr.size() == 4)
        {
            if (idx >= n) ans.push_back(curr);
            return ;
        }
        if (idx >= n) return ;
        string str = "";
        for (int i = 0; i < 3 && idx + i < n; ++i)
        {
            str += s[idx + i];
            if (str.size() > 1 && str[0] == '0') break;
            if (str.size() == 3 && ((str[0] - '0') * 100 + (str[1] - '0') * 10 + (str[2] - '0')) > 255) break;
            curr.push_back(str);
            recur(s, n, ans, curr, idx + i + 1);
            curr.pop_back();
        }
    }
    vector<string> restoreIpAddresses(string s)
    {
        int n = s.length();
        vector<vector<string>> ans;
        vector<string> curr;
        recur(s, n, ans, curr, 0);
        vector<string> res;
        for (auto &v : ans)
        {
            string temp = "";
            for (auto &str : v)
            {
                temp += (str + ".");
            }
            temp.pop_back();
            res.push_back(temp);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/binary-tree-inorder-traversal/

Given the root of a binary tree, return the inorder traversal of its nodes' values.

 

Example 1:


Input: root = [1,null,2,3]
Output: [1,3,2]
Example 2:

Input: root = []
Output: []
Example 3:

Input: root = [1]
Output: [1]
 

Constraints:

The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100

class Solution
{
public:
    vector<int> inorder;

    void recur(TreeNode *node)
    {
        if(node == nullptr) return ;
        recur(node->left);
        inorder.push_back(node->val);
        recur(node->right);
    }

    vector<int> inorderTraversal(TreeNode *root)
    {
        recur(root);
        return inorder;
    }
};

class Solution
{
public:
    vector<int> inorderTraversal(TreeNode *root)
    {
        vector<int> res;
        if (root == nullptr) return res;

        stack<TreeNode *> s;
        s.push(root);

        while(!s.empty())
        {
            TreeNode *curr = s.top();
            while(curr->left)
            {
                s.push(curr->left);
                curr = curr->left;
            }

            TreeNode *top = s.top();
            s.pop();
            res.push_back(top->val);

            while(!top->right && !s.empty())
            {
                top = s.top();
                s.pop();
                res.push_back(top->val);
            }

            if (top->right)
            {
                s.push(top->right);
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/unique-binary-search-trees-ii/

Given an integer n, return all the structurally unique BST's (binary search trees), which has exactly n nodes of unique values from 1 to n. 
Return the answer in any order.

 

Example 1:


Input: n = 3
Output: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]
Example 2:

Input: n = 1
Output: [[1]]
 

Constraints:

1 <= n <= 8

class Solution
{
public:
   vector<TreeNode *> dp[10][10];

    vector<TreeNode *> rec(int l, int r)
    {
        if (l > r) return {NULL};
        if (l == r) return {new TreeNode(l)};

        if (dp[l][r].size() > 0) return dp[l][r];

        vector<TreeNode *> ans;
        for (int root = l; root <= r; root++)
        {
            vector<TreeNode *> left = rec(l, root - 1);
            vector<TreeNode *> right = rec(root + 1, r);

            for (auto node_l : left)
            {
                for (auto node_r : right)
                {
                    TreeNode *rootNode = new TreeNode(root);
                    rootNode->left = node_l;
                    rootNode->right = node_r;
                    ans.push_back(rootNode);
                }
            }
        }

        return dp[l][r] = ans;
    }

    vector<TreeNode *> generateTrees(int n)
    {
        return rec(1, n);
    }
};


// Source https://leetcode.com/problems/unique-binary-search-trees/

Given an integer n, return the number of structurally unique BST's (binary search trees) which has exactly n nodes of unique values from 1 to n.

 

Example 1:


Input: n = 3
Output: 5
Example 2:

Input: n = 1
Output: 1
 

Constraints:

1 <= n <= 19

class Solution
{
public:
    int dp[30][30];

    int rec(int l, int r)
    {
        if (l > r) return 1;
        if (l == r) return 1;
        if (dp[l][r] != -1) return dp[l][r];
        int ans = 0;
        for (int i = l; i <= r; ++i)
        {
            int cntL = rec(l, i - 1);
            int cntR = rec(i + 1, r);
            ans += (cntL * cntR);
        }
        return dp[l][r] = ans;
    }

    int numTrees(int n)
    {
        memset(dp, -1, sizeof(dp));
        return rec(1, n);
    }
};


// Source https://leetcode.com/problems/interleaving-string/

Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.

An interleaving of two strings s and t is a configuration where they are divided into non-empty substrings such that:

s = s1 + s2 + ... + sn
t = t1 + t2 + ... + tm
|n - m| <= 1
The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...
Note: a + b is the concatenation of strings a and b.

 

Example 1:


Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbcbcac"
Output: true

aa		bc		c
	dbbc		a
Example 2:

Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbbaccc"
Output: false
aa		b
	dbb	
Example 3:

Input: s1 = "", s2 = "", s3 = ""
Output: true
 

Constraints:

0 <= s1.length, s2.length <= 100
0 <= s3.length <= 200
s1, s2, and s3 consist of lowercase English letters.

class Solution
{
public:
    int len1, len2, len3;
    int dp [2][105][105];
    bool res;

    void solve(string &str1, string &str2, string &str3, int i, int j, int k, int cnt1, int cnt2, int turn)
    {
        if (res) return ;
        if (i >= len1 && j >= len2)
        {
            if (k >= len3 && abs(cnt1 - cnt2) <= 1) res = true;
            return ;
        }
        if (i >= len1)
        {
            if ((len2 - j) != (len3 - k)) return;
            string s1 = str2.substr(j);
            string s2 = str3.substr(k);
            if (s1 == s2 && abs(cnt1 - cnt2 - 1) <= 1) res = true;
            return ;
        }
        if (j >= len2)
        {
            if ((len1 - i) != (len3 - k)) return;
            string s1 = str1.substr(i);
            string s2 = str3.substr(k);
            if (s1 == s2 && abs(cnt1 + 1 - cnt2) <= 1) res = true;
            return ;
        }
        if (dp[turn][i][j] != -1) return ;
        dp[turn][i][j] = 1;
        if (turn == 0)
        {
            while (i < len1 && k < len3 && str1[i] == str3[k])
            {
                ++i, ++k;
                solve(str1, str2, str3, i, j, k, cnt1 + 1, cnt2, 1);
            }
        }
        else
        {
            while (j < len2 && k < len3 && str2[j] == str3[k])
            {
                ++j, ++k;
                solve(str1, str2, str3, i, j, k, cnt1, cnt2 + 1, 0);
            }
        }
    }
    bool isInterleave(string s1, string s2, string s3)
    {
        len1 = s1.size();
        len2 = s2.size();
        len3 = s3.size();
        if(len1 + len2 != len3) return false;
        if(len3 == 0) return true;
        if(len1 == 0)
        {
            if (s2 == s3) return true;
            else return false;
        }
        if(len2 == 0)
        {
            if (s1 == s3) return true;
            else return false;
        }
        memset(dp, -1, sizeof(dp));
        res = false;
        solve(s1, s2, s3, 0, 0, 0, 0, 0, 0);
        solve(s1, s2, s3, 0, 0, 0, 0, 0, 1);
        return res;
    }
};


// Source https://leetcode.com/problems/validate-binary-search-tree/

Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
 

Example 1:


Input: root = [2,1,3]
Output: true
Example 2:


Input: root = [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
-231 <= Node.val <= 231 - 1

class Solution
{
public:

    bool helper(TreeNode *node, long long min, long long max)
    {
        if(node == NULL) return true;
        long long val = node->val;
        if(val < min || val > max) return false;
        return helper(node->left, min, val - 1) && helper(node->right, val + 1, max);
    }


    bool isValidBST(TreeNode *root)
    {
        return helper(root, INT_MIN, INT_MAX);
    }
};


// Source https://leetcode.com/problems/recover-binary-search-tree/

You are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.

 

Example 1:


Input: root = [1,3,null,null,2]
Output: [3,1,null,null,2]
Explanation: 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid.
Example 2:


Input: root = [3,1,4,null,null,2]
Output: [2,1,4,null,null,3]
Explanation: 2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid.
 

Constraints:

The number of nodes in the tree is in the range [2, 1000].
-231 <= Node.val <= 231 - 1

class Solution
{
public:
    void inorder(vector<int> &v, TreeNode *root)
    {
        if(root == NULL) return;
        inorder(v, root->left);
        v.push_back(root->val);
        inorder(v, root->right);
    }
    int index = 0;
    void correction(vector<int> &v, TreeNode *root )
    {
        if(root == NULL) return;
        correction(v, root->left );
        if(v[index] != root->val)
        {
            root->val = v[index];
        }
        index++;
        correction(v, root->right);
    }
    void recoverTree(TreeNode *root)
    {
        vector<int>sorted;
        inorder(sorted, root);
        sort(sorted.begin(), sorted.end());
        correction(sorted, root);
    }
};


// Source https://leetcode.com/problems/same-tree/

Given the roots of two binary trees p and q, write a function to check if they are the same or not.

Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.

 

Example 1:


Input: p = [1,2,3], q = [1,2,3]
Output: true
Example 2:


Input: p = [1,2], q = [1,null,2]
Output: false
Example 3:


Input: p = [1,2,1], q = [1,1,2]
Output: false
 

Constraints:

The number of nodes in both trees is in the range [0, 100].
-104 <= Node.val <= 104

class Solution
{
public:

    bool sameTree(TreeNode *p, TreeNode *q)
    {
        if(p == NULL && q == NULL)
            return true;
        if(p == NULL || q == NULL)
            return false;
        if(p->val != q->val)
            return false;
        return sameTree(p->left, q->left) && sameTree(p->right, q->right);
    }

    bool isSameTree(TreeNode *p, TreeNode *q)
    {
        return sameTree(p, q);
    }
};


// Source https://leetcode.com/problems/symmetric-tree/

Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).

 

Example 1:


Input: root = [1,2,2,3,4,4,3]
Output: true
Example 2:


Input: root = [1,2,2,null,3,null,3]
Output: false
 

Constraints:

The number of nodes in the tree is in the range [1, 1000].
-100 <= Node.val <= 100

class Solution
{
public:
    bool isSymmetric(TreeNode *root)
    {
        if (!root) return true;
        queue<TreeNode *> q1, q2;
        q1.push(root->left);
        q2.push(root->right);
        while (!q1.empty() && !q2.empty())
        {
            TreeNode *node1 = q1.front();
            q1.pop();
            TreeNode *node2 = q2.front();
            q2.pop();
            if (!node1 && !node2) continue;
            if((node1 && !node2) || (!node1 && node2)) return false;
            if (node1->val != node2->val) return false;
            q1.push(node1->left);
            q1.push(node1->right);
            q2.push(node2->right);
            q2.push(node2->left);
        }
        if (!q1.empty() || !q2.empty()) return false;
        return true;
    }
};


// Source https://leetcode.com/problems/binary-tree-level-order-traversal/

Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: [[3],[9,20],[15,7]]
Example 2:

Input: root = [1]
Output: [[1]]
Example 3:

Input: root = []
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 2000].
-1000 <= Node.val <= 1000

class Solution
{
public:
    vector<vector<int>> levelOrder(TreeNode *root)
    {
        vector<vector<int>> result;
        if (!root) return result;
        queue<TreeNode *> q;
        q.push(root);
        while (!q.empty())
        {
            int n = q.size();
            vector<int> res;
            while (n--)
            {
                TreeNode *curr = q.front();
                q.pop();
                res.push_back(curr->val);
                if (curr->left)
                {
                    q.push(curr->left);
                }
                if (curr->right)
                {
                    q.push(curr->right);
                }
            }
            result.push_back(res);
        }
        return result;
    }
};


// Source https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/

Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: [[3],[20,9],[15,7]]
Example 2:

Input: root = [1]
Output: [[1]]
Example 3:

Input: root = []
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 2000].
-100 <= Node.val <= 100

class Solution
{
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode *root)
    {
        vector<vector<int>>ans;
        if(!root) return ans;
        queue<TreeNode *>q;
        q.push(root);
        bool LtoR = true;
        while(!q.empty())
        {
            int sz = q.size();
            vector<int>level(sz);
            for(int i = 0; i < sz; i++)
            {
                TreeNode *node = q.front();
                q.pop();
                int idx = LtoR ? i : (sz - 1 - i);
                level[idx] = node->val;
                if(node->left) q.push(node->left);
                if(node->right) q.push(node->right);
            }
            LtoR = !LtoR;
            ans.push_back(level);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/maximum-depth-of-binary-tree/

Given the root of a binary tree, return its maximum depth.

A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: 3
Example 2:

Input: root = [1,null,2]
Output: 2
 

Constraints:

The number of nodes in the tree is in the range [0, 104].
-100 <= Node.val <= 100

class Solution
{
public:
    int maxDepth(TreeNode *root)
    {
        if(!root) return 0;
        int maxLeft = maxDepth(root->left);
        int maxRight = maxDepth(root->right);
        return max(maxLeft, maxRight) + 1;
    }
};

class Solution
{
public:
    int maxDepth(TreeNode *root)
    {
        if(root == NULL)
        {
            return 0;
        }
        queue<TreeNode *> q;
        q.push(root);
        int depth = 0;
        while(q.size())
        {
            int n = q.size();
            depth++;
            for(int i = 0; i < n; i++)
            {
                TreeNode *x = q.front();
                q.pop();
                if(x->left != NULL)
                {
                    q.push(x->left);
                }
                if(x->right != NULL)
                {
                    q.push(x->right);
                }
            }
        }
        return depth;
    }
};


// Source https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/

Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree 
and inorder is the inorder traversal of the same tree, construct and return the binary tree.

 

Example 1:


Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
Output: [3,9,20,null,null,15,7]
Example 2:

Input: preorder = [-1], inorder = [-1]
Output: [-1]
 

Constraints:

1 <= preorder.length <= 3000
inorder.length == preorder.length
-3000 <= preorder[i], inorder[i] <= 3000
preorder and inorder consist of unique values.
Each value of inorder also appears in preorder.
preorder is guaranteed to be the preorder traversal of the tree.
inorder is guaranteed to be the inorder traversal of the tree.

class Solution
{
public:
    unordered_map<int, int>mp;

    TreeNode *helper(vector<int> &preorder, int ps, int pe, vector<int> &inorder, int is, int ie)
    {
        if(ps > pe) return NULL;

        int i = mp[preorder[ps]] - is;

        TreeNode *root = new TreeNode(preorder[ps]);

        root->left = helper(preorder, ps + 1, ps + i, inorder, is, is + i - 1);
        root->right = helper(preorder, ps + i + 1, pe, inorder, is + i + 1, ie);

        return root;
    }
    TreeNode *buildTree(vector<int> &preorder, vector<int> &inorder)
    {
        for(int i = 0; i < inorder.size(); i++)
            mp[inorder[i]] = i;
        return helper(preorder, 0, preorder.size() - 1, inorder, 0, inorder.size() - 1);
    }
};


// Source https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/

Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree 
and postorder is the postorder traversal of the same tree, construct and return the binary tree.

 

Example 1:


Input: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]
Output: [3,9,20,null,null,15,7]
Example 2:

Input: inorder = [-1], postorder = [-1]
Output: [-1]
 

Constraints:

1 <= inorder.length <= 3000
postorder.length == inorder.length
-3000 <= inorder[i], postorder[i] <= 3000
inorder and postorder consist of unique values.
Each value of postorder also appears in inorder.
inorder is guaranteed to be the inorder traversal of the tree.
postorder is guaranteed to be the postorder traversal of the tree.

class Solution
{
public:
    unordered_map<int, int>mp;

    TreeNode *helper(vector<int> &postorder, int ps, int pe, vector<int> &inorder, int is, int ie)
    {
        if(ps > pe) return NULL;

        int i = mp[postorder[pe]] - is;

        TreeNode *root = new TreeNode(postorder[pe]);

        root->left = helper(postorder, ps, ps + i - 1, inorder, is, is + i - 1);
        root->right = helper(postorder, ps + i, pe - 1, inorder, is + i + 1, ie);

        return root;
    }

    TreeNode *buildTree(vector<int> &inorder, vector<int> &postorder)
    {
        for(int i = 0; i < inorder.size(); i++)
            mp[inorder[i]] = i;
        return helper(postorder, 0, postorder.size() - 1, inorder, 0, inorder.size() - 1);
    }
};


// Source https://leetcode.com/problems/binary-tree-level-order-traversal-ii/

Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: [[15,7],[9,20],[3]]
Example 2:

Input: root = [1]
Output: [[1]]
Example 3:

Input: root = []
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 2000].
-1000 <= Node.val <= 1000

class Solution
{
public:
    vector<vector<int>> levelOrderBottom(TreeNode *root)
    {
        vector<vector<int>>ans;
        if(root == NULL) return ans;
        queue<TreeNode *>q;
        q.push(root);
        while(!q.empty())
        {
            int currsize = q.size();
            vector<int>level;
            while(currsize--)
            {
                TreeNode *currNode = q.front();
                q.pop();
                level.push_back(currNode->val);
                if(currNode->left != NULL)
                    q.push(currNode->left);
                if(currNode->right != NULL)
                    q.push(currNode->right);
            }
            ans.push_back(level);
        }
        reverse(ans.begin(), ans.end());
        return ans;
    }
};


// Source https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/

Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.

A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.

 

Example 1:


Input: nums = [-10,-3,0,5,9]
Output: [0,-3,9,-10,null,5]
Explanation: [0,-10,5,null,-3,null,9] is also accepted:

Example 2:


Input: nums = [1,3]
Output: [3,1]
Explanation: [1,3] and [3,1] are both a height-balanced BSTs.
 

Constraints:

1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums is sorted in a strictly increasing order.

class Solution
{
public:
    TreeNode *sortedArrayToBST(vector<int> &nums)
    {
        return createBST(nums, 0, nums.size() - 1);
    }

    TreeNode *createBST(vector<int> &nums, int start, int end)
    {
        if(start > end)
            return NULL;

        int mid = (start + end) / 2;

        TreeNode *root = new TreeNode(nums[mid]);

        root->left = createBST(nums, start, mid - 1);
        root->right = createBST(nums, mid + 1, end);

        return root;
    }
};


// Source https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/

Given the head of a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

 

Example 1:


Input: head = [-10,-3,0,5,9]
Output: [0,-3,9,-10,null,5]
Explanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.
Example 2:

Input: head = []
Output: []
 

Constraints:

The number of nodes in head is in the range [0, 2 * 104].
-105 <= Node.val <= 105

class Solution
{
public:
    TreeNode *sortedListToBST(ListNode *head)
    {
        if(head == NULL)
            return NULL;
        if(head->next == NULL)
            return new TreeNode(head->val);
        ListNode *slow = head, *fast = head, *prev = NULL;
        while(fast && fast->next)
        {
            prev = slow;
            slow = slow->next;
            fast = fast->next->next;
        }
        if(prev)
            prev->next = NULL;
        TreeNode *root = new TreeNode(slow->val);
        root->left = sortedListToBST(head);
        root->right = sortedListToBST(slow->next);
        return root;
    }
};


// Source https://leetcode.com/problems/balanced-binary-tree/

Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as:

a binary tree in which the left and right subtrees of every node differ in height by no more than 1.

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: true
Example 2:


Input: root = [1,2,2,3,3,null,null,4,4]
Output: false
Example 3:

Input: root = []
Output: true
 

Constraints:

The number of nodes in the tree is in the range [0, 5000].
-104 <= Node.val <= 104

class Solution
{
public:
    pair<bool, int>isBalancedFast(TreeNode *root)
    {
        if(root == NULL)
        {
            pair<bool, int>p = make_pair(true, 0);
            return p;
        }

        pair<bool, int>left = isBalancedFast(root->left);
        pair<bool, int>right = isBalancedFast(root->right);

        bool leftAns = left.first;
        bool rightAns = right.first;

        bool diff = abs(left.second -  right.second) <= 1;

        pair<bool, int>ans;
        ans.second = max(left.second, right.second) + 1;

        if(leftAns && rightAns && diff)
        {
            ans.first = true;
        }
        else
        {
            ans.second = false;
        }
        return ans;
    }

    bool isBalanced(TreeNode *root)
    {
        return isBalancedFast(root).first;
    }
};


// Source https://leetcode.com/problems/minimum-depth-of-binary-tree/

Given a binary tree, find its minimum depth.

The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.

Note: A leaf is a node with no children.

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: 2
Example 2:

Input: root = [2,null,3,null,4,null,5,null,6]
Output: 5
 

Constraints:

The number of nodes in the tree is in the range [0, 105].
-1000 <= Node.val <= 1000

class Solution
{
public:
    int minDepth(TreeNode *root)
    {
        if(root == NULL)
        {
            return 0;
        }
        int rDepth = minDepth(root->right);
        int lDepth = minDepth(root->left);
        if(rDepth == 0 || lDepth == 0)
        {
            return 1 + max(rDepth, lDepth);
        }
        return 1 + min(rDepth, lDepth);
    }
};

class Solution
{
public:
    int minDepth(TreeNode *root)
    {
        if(root == NULL)
        {
            return 0;
        }
        queue<TreeNode *>q1;
        q1.push(root);

        int ans = 1;
        while(!q1.empty())
        {
            int size = q1.size();
            while(size--)
            {
                TreeNode *front = q1.front();
                q1.pop();
                if(front->left == NULL && front->right == NULL)
                {
                    return ans;
                }
                if(front->left != NULL)
                {
                    q1.push(front->left);
                }
                if(front->right != NULL)
                {
                    q1.push(front->right);
                }
            }
            ans++;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/path-sum/

Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.

A leaf is a node with no children.

 

Example 1:


Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22
Output: true
Explanation: The root-to-leaf path with the target sum is shown.
Example 2:


Input: root = [1,2,3], targetSum = 5
Output: false
Explanation: There two root-to-leaf paths in the tree:
(1 --> 2): The sum is 3.
(1 --> 3): The sum is 4.
There is no root-to-leaf path with sum = 5.
Example 3:

Input: root = [], targetSum = 0
Output: false
Explanation: Since the tree is empty, there are no root-to-leaf paths.
 

Constraints:

The number of nodes in the tree is in the range [0, 5000].
-1000 <= Node.val <= 1000
-1000 <= targetSum <= 1000

class Solution
{
public:
    bool hasPathSum(TreeNode *root, int targetSum)
    {
        if(root == NULL)
        {
            return false;
        }
        if(root->left == NULL && root->right == NULL)
        {
            if (targetSum == root->val) return true;
            else return false;
        }
        return hasPathSum(root->left, targetSum - root->val) || hasPathSum(root->right, targetSum - root->val);
    }
};


// Source https://leetcode.com/problems/path-sum-ii/

Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum. 
Each path should be returned as a list of the node values, not node references.

A root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.

 

Example 1:


Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22
Output: [[5,4,11,2],[5,8,4,5]]
Explanation: There are two paths whose sum equals targetSum:
5 + 4 + 11 + 2 = 22
5 + 8 + 4 + 5 = 22
Example 2:


Input: root = [1,2,3], targetSum = 5
Output: []
Example 3:

Input: root = [1,2], targetSum = 0
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 5000].
-1000 <= Node.val <= 1000
-1000 <= targetSum <= 1000

class Solution
{
public:
    unordered_map<int, vector<vector<int>>>subsets;
    vector<int>subset;

    void allSubsets(TreeNode *root, int sum)
    {
        if(!root) return;
        subset.push_back(root->val);
        sum += root->val;
        if(!root->left && !root->right)
        {
            subsets[sum].push_back(subset);
        }
        if(root->left)
        {
            allSubsets(root->left, sum);
        }
        if(root->right)
        {
            allSubsets(root->right, sum);
        }
        subset.pop_back();
    }

    vector<vector<int>> pathSum(TreeNode *root, int targetSum)
    {
        allSubsets(root, 0);
        return subsets[targetSum];
    }
};


// Source https://leetcode.com/problems/flatten-binary-tree-to-linked-list/

Given the root of a binary tree, flatten the tree into a "linked list":

The "linked list" should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null.
The "linked list" should be in the same order as a pre-order traversal of the binary tree.
 

Example 1:


Input: root = [1,2,5,3,4,null,6]
Output: [1,null,2,null,3,null,4,null,5,null,6]
Example 2:

Input: root = []
Output: []
Example 3:

Input: root = [0]
Output: [0]
 

Constraints:

The number of nodes in the tree is in the range [0, 2000].
-100 <= Node.val <= 100

class Solution
{
public:
   vector<TreeNode *> vec;

   void recur(TreeNode *node)
   {
       if (node == NULL) return;
       vec.push_back(node);
       recur(node->left);
       recur(node->right);
   }

    void flatten(TreeNode *root)
    {
        if(root == NULL || (root->left == NULL && root->right == NULL))
        {
            return ;
        }
        vec.reserve(2000);
        recur(root);
        int n = vec.size();
        for (int i = 0; i < n - 1; ++i)
        {
            TreeNode *temp = vec[i];
            temp->left = NULL;
            temp->right = vec[i + 1];
        }
        TreeNode *temp = vec[n - 1];
        temp->left = NULL;
        temp->right = NULL;
    }
};


// Source https://leetcode.com/problems/distinct-subsequences/

Given two strings s and t, return the number of distinct subsequences of s which equals t.

A string's subsequence is a new string formed from the original string by deleting some (can be none) of the characters without disturbing the remaining characters' relative positions. 
(i.e., "ACE" is a subsequence of "ABCDE" while "AEC" is not).

The test cases are generated so that the answer fits on a 32-bit signed integer.

 

Example 1:

Input: s = "rabbbit", t = "rabbit"
Output: 3
Explanation:
As shown below, there are 3 ways you can generate "rabbit" from S.
rabbbit
rabbbit
rabbbit
Example 2:

Input: s = "babgbag", t = "bag"
Output: 5
Explanation:
As shown below, there are 5 ways you can generate "bag" from S.
babgbag
babgbag
babgbag
babgbag
babgbag
 

Constraints:

1 <= s.length, t.length <= 1000
s and t consist of English letters.

class Solution
{
    int m, n;
    vector<vector<int>> dp;

    int recur(string &s, int i, string &t, int j)
    {
        if (j >= n) return 1;
        if (i >= m) return 0;
        if (dp[i][j] != -1) return dp[i][j];
        int ans = 0;
        for(int idx = i; idx <= min(m - 1, m - n + j); ++idx) // m - idx >= n - j 对应 m - n + j >= idx
        {
            if (s[idx] == t[j]) ans += recur(s, idx + 1, t, j + 1);
        }
        return dp[i][j] = ans;
    }
public:
    int numDistinct(string s, string t)
    {
        m = s.size();
        n = t.size();
        dp = vector<vector<int>>(m, vector<int>(n, -1));
        if (m < n) return 0;
        if (m == n) return s == t;
        return recur(s, 0, t, 0);
    }
};


// Source https://leetcode.com/problems/populating-next-right-pointers-in-each-node/

You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:

struct Node {
  int val;
  Node *left;
  Node *right;
  Node *next;
}
Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.

Initially, all next pointers are set to NULL.

 

Example 1:


Input: root = [1,2,3,4,5,6,7]
Output: [1,#,2,3,#,4,5,6,7,#]
Explanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.
Example 2:

Input: root = []
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 212 - 1].
-1000 <= Node.val <= 1000

class Solution
{
public:
    Node *connect(Node *root)
    {
        if(root == NULL) return NULL;
        queue<Node *> q;
        q.push(root);
        while(!q.empty())
        {
            int size = q.size();
            for(int i = 0 ; i < size ; i++)
            {
                Node *item = q.front();
                q.pop();
                if(size - 1 == i)
                    item -> next = NULL;
                if(size - 1 != i)
                    item->next = q.front();
                if(item->left != NULL)
                    q.push(item->left);
                if(item->right != NULL)
                    q.push(item->right);
            }
        }
        return root;
    }
};


// Source https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii/

Given a binary tree

struct Node {
  int val;
  Node *left;
  Node *right;
  Node *next;
}
Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.

Initially, all next pointers are set to NULL.

 

Example 1:


Input: root = [1,2,3,4,5,null,7]
Output: [1,#,2,3,#,4,5,7,#]
Explanation: Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.
Example 2:

Input: root = []
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 6000].
-100 <= Node.val <= 100

class Solution
{
public:
    Node *connect(Node *root)
    {
        if(root == NULL) return NULL;
        queue<Node *> q;
        q.push(root);
        while(!q.empty())
        {
            int size = q.size();
            for(int i = 0 ; i < size ; i++)
            {
                Node *item = q.front();
                q.pop();
                if(size - 1 == i)
                    item -> next = NULL;
                if(size - 1 != i)
                    item->next = q.front();
                if(item->left != NULL)
                    q.push(item->left);
                if(item->right != NULL)
                    q.push(item->right);
            }
        }
        return root;
    }
};


// Source https://leetcode.com/problems/pascals-triangle/

Given an integer numRows, return the first numRows of Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:


 

Example 1:

Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]
Example 2:

Input: numRows = 1
Output: [[1]]
 

Constraints:

1 <= numRows <= 30

class Solution
{
public:
    vector<vector<int>> generate(int numRows)
    {
        vector<vector<int>>pas_triangle;
        pas_triangle.push_back({1});
        if(numRows == 1)
            return pas_triangle;
        pas_triangle.push_back({1, 1});
        for(int i = 2; i < numRows; i++)
        {
            vector<int>t;
            t.push_back(1);
            for(int j = 0; j <= i - 2; j++)
            {
                t.push_back(pas_triangle[i - 1][j] + pas_triangle[i - 1][j + 1]);
            }
            t.push_back(1);
            pas_triangle.push_back(t);
        }
        return pas_triangle;
    }
};


// Source https://leetcode.com/problems/pascals-triangle-ii/

Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:


 

Example 1:

Input: rowIndex = 3
Output: [1,3,3,1]
Example 2:

Input: rowIndex = 0
Output: [1]
Example 3:

Input: rowIndex = 1
Output: [1,1]
 

Constraints:

0 <= rowIndex <= 33

class Solution
{
public:

    vector<int> getRow(int rowIndex)
    {
        if (rowIndex <= 0) return {1};
        vector<int> ans = {1, 1};
        if (rowIndex == 1) return ans;
        for(int i = 2; i <= rowIndex; i++)
        {
            vector<int>t;
            t.push_back(1);
            for(int j = 0; j <= i - 2; j++)
            {
                t.push_back(ans[j] + ans[j + 1]);
            }
            t.push_back(1);
            swap(ans, t);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/triangle/

Given a triangle array, return the minimum path sum from top to bottom.

For each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.

 

Example 1:

Input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]
Output: 11
Explanation: The triangle looks like:
   2
  3 4
 6 5 7
4 1 8 3
The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).
Example 2:

Input: triangle = [[-10]]
Output: -10
 

Constraints:

1 <= triangle.length <= 200
triangle[0].length == 1
triangle[i].length == triangle[i - 1].length + 1
-104 <= triangle[i][j] <= 104

class Solution
{
public:
    int n;
    int dp[201][201];

    int solve(vector<vector<int>> &triangle, int i, int j)
    {
        if(i == n - 1) return triangle[i][j];
        if(dp[i][j] != -1) return dp[i][j];

        int down = solve(triangle, i + 1, j);
        int diag = solve(triangle, i + 1, j + 1);

        return dp[i][j] = triangle[i][j] + min(down, diag);
    }

    int minimumTotal(vector<vector<int>> &triangle)
    {
        n = triangle.size();
        memset(dp, -1, sizeof(dp));
        return solve(triangle, 0, 0);
    }
};


// Source https://leetcode.com/problems/best-time-to-buy-and-sell-stock/

You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
Example 2:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.
 

Constraints:

1 <= prices.length <= 105
0 <= prices[i] <= 104

class Solution
{
public:
    int maxProfit(vector<int> &prices)
    {
        int n = prices.size();
        if (n == 1) return 0;
        vector<int> dp(n);
        dp[n - 1] = prices[n - 1];
        for (int i = n - 2; i >= 0; --i) dp[i] = max(prices[i], dp[i + 1]);
        int res = 0;
        for (int i = 0; i < n - 1; ++i) res = max(res, dp[i + 1] - prices[i]);
        return res;
    }
};


// Source https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/

You are given an integer array prices where prices[i] is the price of a given stock on the ith day.

On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.

Find and return the maximum profit you can achieve.

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 7
Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
Total profit is 4 + 3 = 7.
Example 2:

Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Total profit is 4.
Example 3:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.
 

Constraints:

1 <= prices.length <= 3 * 104
0 <= prices[i] <= 104

class Solution
{
public:
    int maxProfit(vector<int> &prices)
    {
        int profit = 0;

        for(int i = 1; i < prices.size(); i++)
        {
            profit += max(prices[i] - prices[i - 1], 0);
        }
        return profit;
    }
};


// Source https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/

You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete at most two transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: prices = [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.
Example 2:

Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.
Example 3:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.
 

Constraints:

1 <= prices.length <= 105
0 <= prices[i] <= 105

class Solution
{
public:
    int dp[4][100001];
    int helper(vector<int> &prices, int n, int day, int count)
    {
        if(day == n) return 0;
        if(count >= 4) return 0;
        if(dp[count][day] != -1) return dp[count][day];
        int notransaction = helper(prices, n, day + 1, count);
        int transaction = 0;
        bool buy = (count == 0 || count == 2);
        if(buy)
        {
            transaction = -prices[day] + helper(prices, n, day + 1, count + 1);
        }
        else
        {
            transaction = prices[day] + helper(prices, n, day + 1, count + 1);
        }
        return dp[count][day] = max(notransaction, transaction);
    }
    int maxProfit(vector<int> &prices)
    {
        int n = prices.size();
        memset(dp, -1, sizeof(dp));
        return helper(prices, n, 0, 0);
    }
};


// Source https://leetcode.com/problems/binary-tree-maximum-path-sum/

A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. 
A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.

The path sum of a path is the sum of the node's values in the path.

Given the root of a binary tree, return the maximum path sum of any non-empty path.

 

Example 1:


Input: root = [1,2,3]
Output: 6
Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.
Example 2:


Input: root = [-10,9,20,null,null,15,7]
Output: 42
Explanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.
 

Constraints:

The number of nodes in the tree is in the range [1, 3 * 104].
-1000 <= Node.val <= 1000

class Solution
{
public:

    int res = INT_MIN;
    int maxPathSum(TreeNode *root)
    {
        dfsHeight(root);
        return res;
    }

    int dfsHeight(TreeNode *root)
    {
        if(root == NULL) return 0;

        int lSum = max(0, dfsHeight(root->left));
        int rSum = max(0, dfsHeight(root->right));

        res = max(res, root->val + lSum + rSum);
        return root->val + max(lSum, rSum);
    }
};


// Source https://leetcode.com/problems/valid-palindrome/

A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. 
Alphanumeric characters include letters and numbers.

Given a string s, return true if it is a palindrome, or false otherwise.

 

Example 1:

Input: s = "A man, a plan, a canal: Panama"
Output: true
Explanation: "amanaplanacanalpanama" is a palindrome.
Example 2:

Input: s = "race a car"
Output: false
Explanation: "raceacar" is not a palindrome.
Example 3:

Input: s = " "
Output: true
Explanation: s is an empty string "" after removing non-alphanumeric characters.
Since an empty string reads the same forward and backward, it is a palindrome.
 

Constraints:

1 <= s.length <= 2 * 105
s consists only of printable ASCII characters.

class Solution
{
public:
    bool isPalindrome(string s)
    {
        string k;
        for(auto x : s)
        {
            if(isalpha(x) || isdigit(x))
            {
                k.push_back(tolower(x));
            }
        }
        int l = 0, hi = k.size() - 1;
        while(l < hi)
        {
            if(k[l] != k[hi])
            {
                return false;
            }
            l++;
            hi--;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/word-ladder-ii/

A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:

Every adjacent pair of words differs by a single letter.
Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
sk == endWord
Given two words, beginWord and endWord, and a dictionary wordList, return all the shortest transformation sequences from beginWord to endWord, or an empty list if no such sequence exists. 
Each sequence should be returned as a list of the words [beginWord, s1, s2, ..., sk].

 

Example 1:

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]
Output: [["hit","hot","dot","dog","cog"],["hit","hot","lot","log","cog"]]
Explanation: There are 2 shortest transformation sequences:
"hit" -> "hot" -> "dot" -> "dog" -> "cog"
"hit" -> "hot" -> "lot" -> "log" -> "cog"
Example 2:

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"]
Output: []
Explanation: The endWord "cog" is not in wordList, therefore there is no valid transformation sequence.
 

Constraints:

1 <= beginWord.length <= 5
endWord.length == beginWord.length
1 <= wordList.length <= 1000
wordList[i].length == beginWord.length
beginWord, endWord, and wordList[i] consist of lowercase English letters.
beginWord != endWord
All the words in wordList are unique.

class Solution
{
public:
    bool isAdj(string &a, string &b)
    {
        int diff = 0;
        for(int i = 0; i < a.size(); i++)
        {
            if(a[i] != b[i])
            {
                if(++diff == 2)
                {
                    return false;
                }
            }
        }
        return diff == 1;
    }
    void collectPaths(vector<string> &words, vector<vector<int>> &prevs,
                      vector<vector<string>> &result, int curr, vector<int> &currPath, int stop, int eindex)
    {
        if(stop == curr)
        {
            vector<string>temp;
            for(int i = currPath.size() - 1; i >= 0; i--)
            {
                temp.push_back(words[currPath[i]]);
            }
            temp.push_back(words[eindex]);
            result.push_back(temp);
            return;
        }
        for(int i = 0; i < prevs[curr].size(); i++)
        {
            currPath.push_back(prevs[curr][i]);
            collectPaths(words, prevs, result, prevs[curr][i], currPath, stop, eindex);
            currPath.pop_back();
        }
    }
    vector<vector<string>> findLadders(string beginWord, string endWord, vector<string> &wordList)
    {
        int eindex = -1;
        int root = -1;
        for(int i = 0; i < wordList.size(); i++)
        {
            if(wordList[i] == beginWord)
            {
                root = i;
            }
            else if(wordList[i] == endWord)
            {
                eindex = i;
            }
        }
        if(eindex == -1)
        {
            return {};
        }
        if(root == -1)
        {
            wordList.push_back(beginWord);
            root = wordList.size() - 1;
        }

        int n = wordList.size();
        vector<vector<int>>graph(n);
        for(int i = 0; i < n; i++)
        {
            for(int j = i + 1; j < n; j++)
            {
                if(isAdj(wordList[i], wordList[j]))
                {
                    graph[i].push_back(j);
                    graph[j].push_back(i);
                }
            }
        }

        vector<vector<int>>prevs(n);
        vector<int>steps(n, 0);
        queue<int>q;
        q.push(root);
        int level = 0;
        while(q.size())
        {
            int size = q.size();
            for(int i = 0; i < size; i++)
            {
                int curr = q.front();
                q.pop();

                for(auto adj : graph[curr])
                {
                    if(steps[adj])
                    {
                        if(steps[adj] == level + 1) // 如果steps[adj] < level + 1，则说明经过curr到达adj并不是到达adj的最短路径
                            prevs[adj].push_back(curr);
                        continue;
                    }
                    steps[adj] = level + 1;
                    prevs[adj].push_back(curr);
                    q.push(adj);
                }
            }
            level++;
        }

        vector<vector<string>>result;
        vector<int>currPath;
        collectPaths(wordList, prevs, result, eindex, currPath, root, eindex);
        return result;
    }
};


// Source https://leetcode.com/problems/word-ladder/

A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:

Every adjacent pair of words differs by a single letter.
Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
sk == endWord
Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, 
or 0 if no such sequence exists.

 

Example 1:

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]
Output: 5
Explanation: One shortest transformation sequence is "hit" -> "hot" -> "dot" -> "dog" -> cog", which is 5 words long.
Example 2:

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"]
Output: 0
Explanation: The endWord "cog" is not in wordList, therefore there is no valid transformation sequence.
 

Constraints:

1 <= beginWord.length <= 10
endWord.length == beginWord.length
1 <= wordList.length <= 5000
wordList[i].length == beginWord.length
beginWord, endWord, and wordList[i] consist of lowercase English letters.
beginWord != endWord
All the words in wordList are unique.

class Solution
{
public:
    bool isAdj(string &a, string &b)
    {
        int diff = 0;
        for(int i = 0; i < a.size(); i++)
        {
            if(a[i] != b[i])
            {
                if(++diff == 2)
                {
                    return false;
                }
            }
        }
        return diff == 1;
    }
    int ladderLength(string beginWord, string endWord, vector<string> &wordList)
    {
        int eindex = -1;
        int root = -1;
        for(int i = 0; i < wordList.size(); i++)
        {
            if(wordList[i] == beginWord)
            {
                root = i;
            }
            else if(wordList[i] == endWord)
            {
                eindex = i;
            }
        }
        if(eindex == -1)
        {
            return 0;
        }
        if(root == -1)
        {
            wordList.push_back(beginWord);
            root = wordList.size() - 1;
        }

        int n = wordList.size();
        vector<vector<int>>graph(n);
        for(int i = 0; i < n; i++)
        {
            for(int j = i + 1; j < n; j++)
            {
                if(isAdj(wordList[i], wordList[j]))
                {
                    graph[i].push_back(j);
                    graph[j].push_back(i);
                }
            }
        }

        vector<int>steps(n, 0);
        queue<int>q;
        q.push(root);
        int level = 0;
        while(q.size())
        {
            int size = q.size();
            for(int i = 0; i < size; i++)
            {
                int curr = q.front();
                q.pop();
                if (curr == eindex) return level + 1;
                for(auto adj : graph[curr])
                {
                    if(steps[adj]) continue;
                    steps[adj] = level + 1;
                    q.push(adj);
                }
            }
            level++;
        }
        return 0;
    }
};

// Source https://leetcode.com/problems/longest-consecutive-sequence/

Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.

You must write an algorithm that runs in O(n) time.

 

Example 1:

Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.
Example 2:

Input: nums = [0,3,7,2,5,8,4,6,0,1]
Output: 9
 

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109

class Solution
{
public:
    int longestConsecutive(vector<int> &nums)
    {
        int n = nums.size();
        if (n <= 1) return n;
        sort(nums.begin(), nums.end()) ;
        int candidate = nums[0] ;
        int count = 1, maxcount = 1 ;
        for (int i = 1 ; i < nums.size() ; i++)
        {
            if (nums[i] == candidate)
            {
                continue ;
            }
            if (nums[i] == candidate + 1)
            {
                count ++ ;
            }
            else
            {
                count = 1 ;
            }
            candidate = nums[i] ;
            maxcount = max(maxcount, count) ;
        }
        return maxcount ;
    }
};


// Source https://leetcode.com/problems/sum-root-to-leaf-numbers/

You are given the root of a binary tree containing digits from 0 to 9 only.

Each root-to-leaf path in the tree represents a number.

For example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123.
Return the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer.

A leaf node is a node with no children.

 

Example 1:


Input: root = [1,2,3]
Output: 25
Explanation:
The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.
Therefore, sum = 12 + 13 = 25.
Example 2:


Input: root = [4,9,0,5,1]
Output: 1026
Explanation:
The root-to-leaf path 4->9->5 represents the number 495.
The root-to-leaf path 4->9->1 represents the number 491.
The root-to-leaf path 4->0 represents the number 40.
Therefore, sum = 495 + 491 + 40 = 1026.
 

Constraints:

The number of nodes in the tree is in the range [1, 1000].
0 <= Node.val <= 9
The depth of the tree will not exceed 10.

class Solution
{
public:
    void rec(TreeNode *root, string &s, int &ans)
    {
        if(root == NULL)return ;
        s.push_back(root->val + '0');
        if(root->left == NULL && root->right == NULL)
        {
            ans += stoi(s);
            s.pop_back();
            return;
        }
        rec(root->left, s, ans);
        rec(root->right, s, ans);
        s.pop_back();
    }
    int sumNumbers(TreeNode *root)
    {
        int ans = 0;
        string s;
        s.reserve(256);
        s = "";
        rec(root, s, ans);
        return ans;
    }
};


// Source https://leetcode.com/problems/surrounded-regions/

Given an m x n matrix board containing 'X' and 'O', capture all regions that are 4-directionally surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.

 

Example 1:


Input: board = [["X","X","X","X"],["X","O","O","X"],["X","X","O","X"],["X","O","X","X"]]
Output: [["X","X","X","X"],["X","X","X","X"],["X","X","X","X"],["X","O","X","X"]]
Explanation: Surrounded regions should not be on the border, which means that any 'O' on the border of the board are not flipped to 'X'. Any 'O' that is not on the border and it is not connected to an 'O' on the border will be flipped to 'X'. Two cells are connected if they are adjacent cells connected horizontally or vertically.
Example 2:

Input: board = [["X"]]
Output: [["X"]]
 

Constraints:

m == board.length
n == board[i].length
1 <= m, n <= 200
board[i][j] is 'X' or 'O'.

class Solution
{
public:
    int m, n;

    void dfs(vector<vector<char>> &board, int x, int y)
    {
        if (x < 0 || x >= m || y < 0 || y >= n || board[x][y] == 'v' || board[x][y] == 'X') return ;
        board[x][y] = 'v';
        dfs(board, x + 1, y);
        dfs(board, x - 1, y);
        dfs(board, x, y + 1);
        dfs(board, x, y - 1);
    }

    void solve(vector<vector<char>> &board)
    {
        m = board.size();
        n = board[0].size();

        for (int i = 0; i < m; i++)
        {
            if (board[i][0] == 'O')
            {
                dfs(board, i, 0);
            }
            if (board[i][n - 1] == 'O')
            {
                dfs(board, i, n - 1);
            }
        }

        for (int j = 0; j < n; j++)
        {
            if (board[0][j] == 'O')
            {
                dfs(board, 0, j);
            }
            if (board[m - 1][j] == 'O')
            {
                dfs(board, m - 1, j);
            }
        }

        for (int i = 0; i < m; i++)
        {
            for (int j = 0; j < n; j++)
            {
                if (board[i][j] == 'v')
                {
                    board[i][j] = 'O';
                }
                else
                {
                    board[i][j] = 'X';
                }
            }
        }
    }
};


// Source https://leetcode.com/problems/palindrome-partitioning/

Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.

A palindrome string is a string that reads the same backward as forward.

 

Example 1:

Input: s = "aab"
Output: [["a","a","b"],["aa","b"]]
Example 2:

Input: s = "a"
Output: [["a"]]
 

Constraints:

1 <= s.length <= 16
s contains only lowercase English letters.

class Solution
{
public:
    int n;
    vector<vector<int>> isPali;

    void solve(string &s, int idx, vector<vector<string>> &ans, vector<string> &curr)
    {
        if(idx >= n)
        {
            ans.push_back(curr);
            return ;
        }
        for(int i = idx; i < n; i++)
        {
            if(isPali[idx][i])
            {
                curr.push_back(s.substr(idx, i - idx + 1));
                solve(s, i + 1, ans, curr);
                curr.pop_back();
            }
        }
    }

    vector<vector<string>> partition(string s)
    {
        n = s.size();
        isPali = vector<vector<int>>(n, vector<int>(n, 0));
        for(int i = 0; i < n; i++)
        {
            //pali for odd length
            int l = i, r = i;
            while(l >= 0 && r < n && s[l] == s[r])
            {
                isPali[l][r] = 1;
                l--, r++;
            }
            //pali for even length
            if(i + 1 < n)
            {
                l = i, r = i + 1;
                while(l >= 0 && r < n && s[l] == s[r])
                {
                    isPali[l][r] = 1;
                    l--, r++;
                }
            }
        }
        vector<vector<string>> ans;
        vector<string> curr;
        solve(s, 0, ans, curr);
        return ans;
    }
};


// Source https://leetcode.com/problems/palindrome-partitioning-ii/

Given a string s, partition s such that every substring of the partition is a palindrome.

Return the minimum cuts needed for a palindrome partitioning of s.

 

Example 1:

Input: s = "aab"
Output: 1
Explanation: The palindrome partitioning ["aa","b"] could be produced using 1 cut.
Example 2:

Input: s = "a"
Output: 0
Example 3:

Input: s = "ab"
Output: 1
 

Constraints:

1 <= s.length <= 2000
s consists of lowercase English letters only.

class Solution
{
public:
    int n;
    vector<vector<int>> isPali;
    vector<int> dp;

    int solve(string &s, int idx)
    {
        if(idx >= n) { return 0; }
        if(dp[idx] != -1) return dp[idx];
        int ans = 1e6;
        for(int i = n - 1; i >= idx; --i)
        {
            if(isPali[idx][i])
            {
                ans = min(ans, 1 + solve(s, i + 1));
            }
        }
        return dp[idx] = ans;
    }

    int minCut(string s)
    {
        n = s.size();
        isPali = vector<vector<int>>(n, vector<int>(n, 0));
        dp = vector<int>(n, -1);
        for(int i = 0; i < n; i++)
        {
            //pali for odd length
            int l = i, r = i;
            while(l >= 0 && r < n && s[l] == s[r])
            {
                isPali[l][r] = 1;
                l--, r++;
            }
            //pali for even length
            if(i + 1 < n)
            {
                l = i, r = i + 1;
                while(l >= 0 && r < n && s[l] == s[r])
                {
                    isPali[l][r] = 1;
                    l--, r++;
                }
            }
        }
        return solve(s, 0) - 1;
    }
};


// Source https://leetcode.com/problems/clone-graph/

Given a reference of a node in a connected undirected graph.

Return a deep copy (clone) of the graph.

Each node in the graph contains a value (int) and a list (List[Node]) of its neighbors.

class Node {
    public int val;
    public List<Node> neighbors;
}
 

Test case format:

For simplicity, each node's value is the same as the node's index (1-indexed). For example, the first node with val == 1, the second node with val == 2, and so on. 
The graph is represented in the test case using an adjacency list.

An adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.

The given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph.

 

Example 1:


Input: adjList = [[2,4],[1,3],[2,4],[1,3]]
Output: [[2,4],[1,3],[2,4],[1,3]]
Explanation: There are 4 nodes in the graph.
1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).
2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).
3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).
4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).
Example 2:


Input: adjList = [[]]
Output: [[]]
Explanation: Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.
Example 3:

Input: adjList = []
Output: []
Explanation: This an empty graph, it does not have any nodes.
 

Constraints:

The number of nodes in the graph is in the range [0, 100].
1 <= Node.val <= 100
Node.val is unique for each node.
There are no repeated edges and no self-loops in the graph.
The Graph is connected and all nodes can be visited starting from the given node.

class Solution
{
public:
    Node *nodeArr[101];
    Node *recur(Node *curr)
    {
        Node *temp = new Node(curr->val);
        nodeArr[curr->val] = temp;
        for(auto adj : curr->neighbors)
        {
            if(nodeArr[adj->val])
            {
                temp->neighbors.push_back(nodeArr[adj->val]);
            }
            else temp->neighbors.push_back(recur(adj));
        }
        return temp;
    }

    Node *cloneGraph(Node *node)
    {
        if(!node) return NULL;
        memset(nodeArr, NULL, sizeof(nodeArr));
        return recur(node);
    }
};


// Source https://leetcode.com/problems/gas-station/

There are n gas stations along a circular route, where the amount of gas at the ith station is gas[i].

You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. 
You begin the journey with an empty tank at one of the gas stations.

Given two integer arrays gas and cost, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1. 
If there exists a solution, it is guaranteed to be unique

 

Example 1:

Input: gas = [1,2,3,4,5], cost = [3,4,5,1,2]
Output: 3
Explanation:
Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
Travel to station 4. Your tank = 4 - 1 + 5 = 8
Travel to station 0. Your tank = 8 - 2 + 1 = 7
Travel to station 1. Your tank = 7 - 3 + 2 = 6
Travel to station 2. Your tank = 6 - 4 + 3 = 5
Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.
Therefore, return 3 as the starting index.
Example 2:

Input: gas = [2,3,4], cost = [3,4,3]
Output: -1
Explanation:
You can't start at station 0 or 1, as there is not enough gas to travel to the next station.
Let's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
Travel to station 0. Your tank = 4 - 3 + 2 = 3
Travel to station 1. Your tank = 3 - 3 + 3 = 3
You cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.
Therefore, you can't travel around the circuit once no matter where you start.
 

Constraints:

gas.length == n
cost.length == n
1 <= n <= 105
0 <= gas[i], cost[i] <= 104

gas[i] - cost[i] + gas[i + 1] - cost[i + 1] + ... + gas[n - 1] - cost[n - 1] + gas[0] - cost[0] + ... + gas[i - 1] - cost[i - 1]

sum(gas) - sum(cost) >= 0

class Solution
{
public:
    int canCompleteCircuit(vector<int> &gas, vector<int> &cost)
    {
        int n = gas.size();
        int gasSum = 0, costSum = 0, total = 0, idx = 0;
        for (int i = 0; i < n; ++i)
        {
            gasSum += gas[i];
            costSum += cost[i];
            total += (gas[i] - cost[i]);
            if (total < 0) { total = 0; idx = i + 1; }
        }
        if(gasSum < costSum)
            return -1;
        return idx;
    }
};


// Source https://leetcode.com/problems/candy/

There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.

You are giving candies to these children subjected to the following requirements:

Each child must have at least one candy.
Children with a higher rating get more candies than their neighbors.
Return the minimum number of candies you need to have to distribute the candies to the children.

 

Example 1:

Input: ratings = [1,0,2]
Output: 5
Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.
Example 2:

Input: ratings = [1,2,2]
Output: 4
Explanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.
The third child gets 1 candy because it satisfies the above two conditions.
 

Constraints:

n == ratings.length
1 <= n <= 2 * 104
0 <= ratings[i] <= 2 * 104

left[i] 记录ratings从i向左，单调递减的次数 k
ratings[i] > ratings[i - 1] > ratings[i - 2] > ... > ratings[i - k]
right[i] 记录ratings从i向右，单调递减的次数 k
ratings[i] < ratings[i + 1] < ratings[i + 2] < ... < ratings[i + k]

class Solution
{
public:
    int candy(vector<int> &ratings)
    {
        int n = ratings.size();
        vector<int>left(n, 0), right(n, 0);

        for(int i = 1; i < n; i++)
        {
            if(ratings[i] > ratings[i - 1])
                left[i] = 1 + left[i - 1];
        }

        for(int i = n - 2; i >= 0; --i)
        {
            if(ratings[i] > ratings[i + 1])
                right[i] = 1 + right[i + 1];
        }

        int ans = 0;
        for(int i = 0; i < n; i++)
        {
            ans += (1 + max(left[i], right[i]));
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/single-number/

Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.

 

Example 1:

Input: nums = [2,2,1]
Output: 1
Example 2:

Input: nums = [4,1,2,1,2]
Output: 4
Example 3:

Input: nums = [1]
Output: 1
 

Constraints:

1 <= nums.length <= 3 * 104
-3 * 104 <= nums[i] <= 3 * 104
Each element in the array appears twice except for one element which appears only once.

class Solution
{
public:
    int singleNumber(vector<int> &nums)
    {
        int ans = 0;
        for(auto x : nums)
            ans ^= x;
        return ans;
    }
};


// Source https://leetcode.com/problems/single-number-ii/

Given an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and return it.

You must implement a solution with a linear runtime complexity and use only constant extra space.

 

Example 1:

Input: nums = [2,2,3,2]
Output: 3
Example 2:

Input: nums = [0,1,0,1,0,1,99]
Output: 99
 

Constraints:

1 <= nums.length <= 3 * 104
-231 <= nums[i] <= 231 - 1
Each element in nums appears exactly three times except for one element which appears once.

class Solution
{
public:
    int singleNumber(vector<int> &nums)
    {
        vector<int> cnt(32, 0);
        for (auto val : nums)
        {
            for (int i = 0; i < 32; ++i)
            {
                if (val & (1 << i)) cnt[i]++;
            }
        }
        int res = 0;
        for (int i = 0; i < 32; ++i)
        {
            if (cnt[i] % 3) res |= (1 <<i);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/copy-list-with-random-pointer/

A linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null.

Construct a deep copy of the list. The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node. 
Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. 
None of the pointers in the new list should point to nodes in the original list.

For example, if there are two nodes X and Y in the original list, where X.random --> Y, then for the corresponding two nodes x and y in the copied list, x.random --> y.

Return the head of the copied linked list.

The linked list is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:

val: an integer representing Node.val
random_index: the index of the node (range from 0 to n-1) that the random pointer points to, or null if it does not point to any node.
Your code will only be given the head of the original linked list.

 

Example 1:


Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]
Output: [[7,null],[13,0],[11,4],[10,2],[1,0]]
Example 2:


Input: head = [[1,1],[2,1]]
Output: [[1,1],[2,1]]
Example 3:



Input: head = [[3,null],[3,0],[3,null]]
Output: [[3,null],[3,0],[3,null]]
 

Constraints:

0 <= n <= 1000
-104 <= Node.val <= 104
Node.random is null or is pointing to some node in the linked list.

class Solution
{
public:
    Node *copyRandomList(Node *head)
    {
        if(!head) return head;
 
       Node *curr = head;

        // STEP -> 1 : Create copy nodes of original nodes
        // by inserting copy node after original node
        while(curr != NULL)
        {
            Node *copy = new Node(curr->val);
            Node *next = curr->next;
            curr->next = copy;
            copy->next = next;
            curr = next;
        }

        //STEP -> 2 : Work for random pointers
        curr = head;
        while(curr)
        {
            Node *copy = curr->next;
            if(curr->random) copy->random = curr->random->next;
            curr = copy->next;
        }

        //Step -> 3 : DeLink orginal with copy
        curr = head;
        Node *ansHead = curr->next;
        while(curr)
        {
            Node *copy = curr->next;
            if(!copy->next)
            {
                curr->next = copy->next = NULL;
                break;
            }
            curr->next = copy->next;
            curr = curr->next;
            copy->next = curr->next;
            copy = copy->next;
        }

        return ansHead;
    }
};


// Source https://leetcode.com/problems/word-break/

Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.

Note that the same word in the dictionary may be reused multiple times in the segmentation.

 

Example 1:

Input: s = "leetcode", wordDict = ["leet","code"]
Output: true
Explanation: Return true because "leetcode" can be segmented as "leet code".
Example 2:

Input: s = "applepenapple", wordDict = ["apple","pen"]
Output: true
Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
Note that you are allowed to reuse a dictionary word.
Example 3:

Input: s = "catsandog", wordDict = ["cats","dog","sand","and","cat"]
Output: false
 

Constraints:

1 <= s.length <= 300
1 <= wordDict.length <= 1000
1 <= wordDict[i].length <= 20
s and wordDict[i] consist of only lowercase English letters.
All the strings of wordDict are unique.

class Solution
{
public:
    int n;
    int minL, maxL;
    unordered_set<string> strSet;
    vector<int> dp;

    int recur(string &s, int idx)
    {
        if(idx >= n) {return 1; }
        if(dp[idx] != -1) return dp[idx];
        int ans = 0;
        for (int len = minL; len <= maxL && len <= n - idx && !ans; ++len)
        {
            string str = s.substr(idx, len);
            if(strSet.find(str) != strSet.end())
            {
                ans = recur(s, idx + len);
            }
        }
        return dp[idx] = ans;
    }

    bool wordBreak(string &s, vector<string> &wordDict)
    {
        n = s.size();
        dp = vector<int>(n, -1);
        minL = 1000, maxL = 1;
        for(auto &w : wordDict)
        {
            strSet.insert(w);
            minL = min(minL, (int)w.size());
            maxL = max(maxL, (int)w.size());
        }
        return recur(s, 0);
    }
};


// Source https://leetcode.com/problems/word-break-ii/

Given a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in any order.

Note that the same word in the dictionary may be reused multiple times in the segmentation.

 

Example 1:

Input: s = "catsanddog", wordDict = ["cat","cats","and","sand","dog"]
Output: ["cats and dog","cat sand dog"]
Example 2:

Input: s = "pineapplepenapple", wordDict = ["apple","pen","applepen","pine","pineapple"]
Output: ["pine apple pen apple","pineapple pen apple","pine applepen apple"]
Explanation: Note that you are allowed to reuse a dictionary word.
Example 3:

Input: s = "catsandog", wordDict = ["cats","dog","sand","and","cat"]
Output: []
 

Constraints:

1 <= s.length <= 20
1 <= wordDict.length <= 1000
1 <= wordDict[i].length <= 10
s and wordDict[i] consist of only lowercase English letters.
All the strings of wordDict are unique.

class Solution
{
public:
    int n;
    int minL, maxL;
    unordered_set<string> strSet;
    unordered_map<int, vector<string>> dp;

    vector<string> recur(string &s, int idx)
    {
        if(idx >= n) return {}; 
        if(dp.count(idx)) return dp[idx];
        vector<string> ans;
        for (int len = minL; len <= maxL && len <= n - idx; ++len)
        {
            string str = s.substr(idx, len);
            if(strSet.find(str) != strSet.end())
            {
                if (len == n - idx) ans.push_back(str);
                else
                {
                    vector<string> retVec = recur(s, idx + len);
                    for(auto &retStr : retVec)
                        retStr = str + " " + retStr;
                    ans.insert(ans.end(), retVec.begin(), retVec.end());
                }
            }
        }
        return dp[idx] = ans;
    }

    vector<string> wordBreak(string s, vector<string> &wordDict)
    {
        n = s.size();
        minL = 1000, maxL = 1;
        for(auto &w : wordDict)
        {
            strSet.insert(w);
            minL = min(minL, (int)w.size());
            maxL = max(maxL, (int)w.size());
        }
        return recur(s, 0);
    }
};


// Source https://leetcode.com/problems/linked-list-cycle/

Given head, the head of a linked list, determine if the linked list has a cycle in it.

There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. 
Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.

Return true if there is a cycle in the linked list. Otherwise, return false.

 

Example 1:


Input: head = [3,2,0,-4], pos = 1
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).
Example 2:


Input: head = [1,2], pos = 0
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 0th node.
Example 3:


Input: head = [1], pos = -1
Output: false
Explanation: There is no cycle in the linked list.
 

Constraints:

The number of the nodes in the list is in the range [0, 104].
-105 <= Node.val <= 105
pos is -1 or a valid index in the linked-list.

class Solution
{
public:
    bool hasCycle(ListNode *head)
    {
        if(head == NULL || head->next == NULL)
        {
            return false;
        }
        ListNode *slow = head;
        ListNode *fast = head;
        do
        {
            slow = slow->next;
            fast = fast->next->next;
        }
        while(fast != slow && fast != NULL && fast->next != NULL);
        if(fast == slow) return true;
        return false;
    }
};


// Source https://leetcode.com/problems/linked-list-cycle-ii/

Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.

There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. 
Internally, pos is used to denote the index of the node that tail's next pointer is connected to (0-indexed). It is -1 if there is no cycle. Note that pos is not passed as a parameter.

Do not modify the linked list.

 

Example 1:


Input: head = [3,2,0,-4], pos = 1
Output: tail connects to node index 1
Explanation: There is a cycle in the linked list, where tail connects to the second node.
Example 2:


Input: head = [1,2], pos = 0
Output: tail connects to node index 0
Explanation: There is a cycle in the linked list, where tail connects to the first node.
Example 3:


Input: head = [1], pos = -1
Output: no cycle
Explanation: There is no cycle in the linked list.
 

Constraints:

The number of the nodes in the list is in the range [0, 104].
-105 <= Node.val <= 105
pos is -1 or a valid index in the linked-list.

fast每次走2步，slow每次走一步，当fast等于slow时，fast走过的步数为slow走过的步数的2倍
fast走过的步数为head到环的起始点的步数 + 环的起始点到相遇点的步数 + 相遇点的步数 到 相遇点的步数 （绕环一圈）
slow走过的步数为head到环的起始点的步数 + 环的起始点到相遇点的步数
head到环的起始点的步数 + 环的起始点到相遇点的步数 = 相遇点的步数 到 相遇点的步数 （绕环一圈）= 环的起始点到相遇点的步数 + 相遇点到环的起始点的步数 
head到环的起始点的步数 = 相遇点到环的起始点的步数 

class Solution
{
public:
    ListNode *detectCycle(ListNode *head)
    {
        if(head == NULL || head->next == NULL)
        {
            return NULL;
        }
        ListNode *slow = head;
        ListNode *fast = head;
        do
        {
            slow = slow->next;
            fast = fast->next->next;
        }
        while(fast != slow && fast != NULL && fast->next != NULL);
        if(fast == slow)
        {
            if(slow == head)
            {
                return head;
            }
            fast = head;
            while(fast !=slow)
                fast=fast->next, slow=slow->next;
            return fast;
        }
        return NULL;
    }
};


// Source https://leetcode.com/problems/reorder-list/

You are given the head of a singly linked-list. The list can be represented as:

L0 → L1 → … → Ln - 1 → Ln
Reorder the list to be on the following form:

L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …
You may not modify the values in the list's nodes. Only nodes themselves may be changed.

L0 L1 L2 L3 L4 L5 L6 L7 L8 
L0 L1 L2 L3 L4
    L8 L7 L6 L5
L0 L1 L2 L3 L4 L5 L6 L7 L8 L9
L0 L1 L2 L3 L4  L5
    L9 L8  L7 L6

Example 1:


Input: head = [1,2,3,4]
Output: [1,4,2,3]
Example 2:


Input: head = [1,2,3,4,5]
Output: [1,5,2,4,3]
 

Constraints:

The number of nodes in the list is in the range [1, 5 * 104].
1 <= Node.val <= 1000

class Solution
{
public:
    void reorderList(ListNode *head)
    {
        if (!head || !head->next || !head->next->next) return;
        ListNode *fast = head, *slow = head;
        while (fast != NULL && fast->next != NULL)
        {
            slow = slow->next;
            fast = fast->next->next;
        }
        ListNode *node = slow->next;
        slow->next = NULL;
        ListNode *curr = node, *prev = NULL;
        while (curr)
        {
            ListNode *next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }
        ListNode *node1 = prev;
        prev = head;
        while (prev && node1)
        {
            ListNode *next = prev->next;
            prev->next = node1;
            node1 = node1->next;
            prev->next->next = next;
            prev = next;
        }
    }
};


// Source https://leetcode.com/problems/binary-tree-preorder-traversal/

Given the root of a binary tree, return the preorder traversal of its nodes' values.

 

Example 1:


Input: root = [1,null,2,3]
Output: [1,2,3]
Example 2:

Input: root = []
Output: []
Example 3:

Input: root = [1]
Output: [1]
 

Constraints:

The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100

class Solution
{
public:
    vector<int>preOrderArr;
    void recur(TreeNode *node)
    {
        if(!node)return ;
        preOrderArr.push_back(node->val);
        recur(node->left);
        recur(node->right);
    }
    vector<int> preorderTraversal(TreeNode *root)
    {
        recur(root);
        return preOrderArr;
    }
};


// Source https://leetcode.com/problems/binary-tree-postorder-traversal/

Given the root of a binary tree, return the postorder traversal of its nodes' values.

 

Example 1:


Input: root = [1,null,2,3]
Output: [3,2,1]
Example 2:

Input: root = []
Output: []
Example 3:

Input: root = [1]
Output: [1]
 

Constraints:

The number of the nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100

class Solution
{
public:
    vector<int>postOrderArr;
    void recur(TreeNode *node)
    {
        if(!node)return ;
        recur(node->left);
        recur(node->right);
        postOrderArr.push_back(node->val);
    }
    vector<int> postorderTraversal(TreeNode *root)
    {
        recur(root);
        return postOrderArr;
    }
};


// Source https://leetcode.com/problems/lru-cache/

Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.

Implement the LRUCache class:

LRUCache(int capacity) Initialize the LRU cache with positive size capacity.
int get(int key) Return the value of the key if the key exists, otherwise return -1.
void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. 
If the number of keys exceeds the capacity from this operation, evict the least recently used key.
The functions get and put must each run in O(1) average time complexity.

 

Example 1:

Input
["LRUCache", "put", "put", "get", "put", "get", "put", "get", "get", "get"]
[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]
Output
[null, null, null, 1, null, -1, null, -1, 3, 4]

Explanation
LRUCache lRUCache = new LRUCache(2);
lRUCache.put(1, 1); // cache is {1=1}
lRUCache.put(2, 2); // cache is {1=1, 2=2}
lRUCache.get(1);    // return 1
lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}
lRUCache.get(2);    // returns -1 (not found)
lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}
lRUCache.get(1);    // return -1 (not found)
lRUCache.get(3);    // return 3
lRUCache.get(4);    // return 4
 

Constraints:

1 <= capacity <= 3000
0 <= key <= 104
0 <= value <= 105
At most 2 * 105 calls will be made to get and put.

struct Node
{
    Node *prev;
    Node *next;
    int val;
    int key;

    Node(int val, int key)
    {
        this->val = val;
        this->key = key;
        prev = NULL;
        next = NULL;
    }

};
class LRUCache
{
public:
    Node *dummyHead;
    Node *endPtr;
    unordered_map<int, Node *> mp;
    int capacity;

    LRUCache(int capacity)
    {
        this->capacity = capacity;
        dummyHead = new Node(0, -1);
        endPtr = dummyHead;
    }

    void remove(Node *node)
    {
        if(node->next)
        {
            Node *prev = node->prev;
            Node *next = node->next;
            prev->next = next;
            next->prev = prev;
        }
        else
        {
            endPtr = endPtr->prev;
            endPtr->next = NULL;
        }

        return;
    }

    void insert(Node *node)
    {
        node->prev = endPtr;
        node->next = NULL;
        endPtr->next = node;
        endPtr = endPtr->next;

        return;
    }

    int get(int key)
    {
        if(mp.find(key) == mp.end())
            return -1;
        Node *curr = mp[key];

        remove(curr);
        insert(curr);

        return curr->val;
    }

    void put(int key, int value)
    {
        if(mp.find(key) != mp.end())
        {
            Node *curr = mp[key];
            curr->val = value;
            remove(curr);
            insert(curr);
            return ;
        }
        if(mp.size() == capacity)
        {
            Node *node = dummyHead->next;
            remove(node);
            mp.erase(node->key);
        }

        Node *node = new Node(value, key);
        mp[key] = node;
        insert(node);
    }
};


// Source https://leetcode.com/problems/insertion-sort-list/

Given the head of a singly linked list, sort the list using insertion sort, and return the sorted list's head.

The steps of the insertion sort algorithm:

Insertion sort iterates, consuming one input element each repetition and growing a sorted output list.
At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list and inserts it there.
It repeats until no input elements remain.
The following is a graphical example of the insertion sort algorithm. The partially sorted list (black) initially contains only the first element in the list. One element (red) is removed from the input data and inserted in-place into the sorted list with each iteration.


 

Example 1:


Input: head = [4,2,1,3]
Output: [1,2,3,4]
Example 2:


Input: head = [-1,5,3,4,0]
Output: [-1,0,3,4,5]
 

Constraints:

The number of nodes in the list is in the range [1, 5000].
-5000 <= Node.val <= 5000

class Solution
{
public:
    ListNode *insertionSortList(ListNode *head)
    {
        if (head == NULL || head->next == NULL) return head;
        ListNode *dummy = new ListNode(0);
        ListNode *node = new ListNode(head->val);
        dummy->next = node;
        head = head->next;
        while (head)
        {
            ListNode *prev = dummy;
            node = dummy->next;
            int val = head->val;
            while (node)
            {
                if (node->val >= val)
                {
                    ListNode *temp = new ListNode(val);
                    prev->next = temp;
                    temp->next = node;
                    break;
                }
                prev = node;
                node = node->next;
            }
            if (node == nullptr)
            {
                ListNode *temp = new ListNode(val);
                prev->next = temp;
            }
            head = head->next;
        }
        return dummy->next;
    }
};


// Source https://leetcode.com/problems/sort-list/

Given the head of a linked list, return the list after sorting it in ascending order.

 

Example 1:


Input: head = [4,2,1,3]
Output: [1,2,3,4]
Example 2:


Input: head = [-1,5,3,4,0]
Output: [-1,0,3,4,5]
Example 3:

Input: head = []
Output: []
 

Constraints:

The number of nodes in the list is in the range [0, 5 * 104].
-105 <= Node.val <= 105

class Solution
{
public:
    ListNode *sortList(ListNode *head)
    {
        vector<int> v;
        ListNode *aux;
        aux = head;
        while(aux != nullptr)
        {
            v.emplace_back(aux->val);
            aux = aux->next;
        }
        sort(v.begin(), v.end());
        aux = head;
        int i = 0;
        while(aux != nullptr)
        {
            aux->val = v[i];
            ++i;
            aux = aux->next;
        }
        return head;
    }
};


// Source https://leetcode.com/problems/max-points-on-a-line/

Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.

 

Example 1:


Input: points = [[1,1],[2,2],[3,3]]
Output: 3
Example 2:


Input: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]
Output: 4
 

Constraints:

1 <= points.length <= 300
points[i].length == 2
-104 <= xi, yi <= 104
All the points are unique.

(y - y1) / (x - x1) = (y2 - y1) / (x2 - x1)
(y2 - y1) * (x - x1) = (x2 - x1) * (y - y1)

class Solution
{
public :

    int maxPoints(vector<vector<int>> &points)
    {
        if(points.size() <= 2) return points.size();
        int res = 0;
        int n = points.size();
        for(int i = 0; i < n; i++)
        {
            for(int j = i + 1; j < n; j++)
            {
                int x1 = points[i][0];
                int x2 = points[j][0];
                int y1 = points[i][1];
                int y2 = points[j][1];

                int total = 2;
                for(int k = 0; k < n && k != i && k != j; k++)
                {
                    int x = points[k][0];
                    int y = points[k][1];
                    if((y2 - y1) * (x - x1) == (x2 - x1) * (y - y1))
                        total++;
                }
                res = max(res, total);
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/evaluate-reverse-polish-notation/

Evaluate the value of an arithmetic expression in Reverse Polish Notation.

Valid operators are +, -, *, and /. Each operand may be an integer or another expression.

Note that division between two integers should truncate toward zero.

It is guaranteed that the given RPN expression is always valid. That means the expression would always evaluate to a result, and there will not be any division by zero operation.

 

Example 1:

Input: tokens = ["2","1","+","3","*"]
Output: 9
Explanation: ((2 + 1) * 3) = 9
Example 2:

Input: tokens = ["4","13","5","/","+"]
Output: 6
Explanation: (4 + (13 / 5)) = 6
Example 3:

Input: tokens = ["10","6","9","3","+","-11","*","/","*","17","+","5","+"]
Output: 22
Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22
 

Constraints:

1 <= tokens.length <= 104
tokens[i] is either an operator: "+", "-", "*", or "/", or an integer in the range [-200, 200].

class Solution
{
public:
    int evalRPN(vector<string> &tokens)
    {
        stack<int> s;
        int n = tokens.size();
        int n1, n2, res = 0;
        for (int i = 0; i < n; ++i)
        {
            if (tokens[i] == "+" || tokens[i] == "-" || tokens[i] == "*" || tokens[i] == "/")
            {
                n2 = s.top();
                s.pop();
                n1 = s.top();
                s.pop();
                if (tokens[i] == "+")
                {
                    res = n1 + n2;
                }
                else if (tokens[i] == "-")
                {
                    res = n1 - n2;
                }
                else if (tokens[i] == "*")
                {
                    res = n1 * n2;
                }
                else
                {
                    res = static_cast<int>(trunc((double)n1 / n2));
                }
                s.push(res);
            }
            else
            {
                s.push(stoi(tokens[i]));
            }
        }
        return s.top();
    }
};


// Source https://leetcode.com/problems/reverse-words-in-a-string/

Given an input string s, reverse the order of the words.

A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.

Return a string of the words in reverse order concatenated by a single space.

Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. 
Do not include any extra spaces.

 

Example 1:

Input: s = "the sky is blue"
Output: "blue is sky the"
Example 2:

Input: s = "  hello world  "
Output: "world hello"
Explanation: Your reversed string should not contain leading or trailing spaces.
Example 3:

Input: s = "a good   example"
Output: "example good a"
Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.
 

Constraints:

1 <= s.length <= 104
s contains English letters (upper-case and lower-case), digits, and spaces ' '.
There is at least one word in s.

class Solution
{
public:
    string reverseWords(string s)
    {
        stack<string> st ;
        int n = s.length();
        int i = 0 ;
        while (i < n)
        {
            while (i < n && s[i] == ' ')
            {
                i++ ;
            }
            string word = "" ;
            int j = i ;
            while (j < n && s[j] != ' ')
            {
                j++ ;
            }
            for (int k = i ; k < j ; k++)
            {
                word += s[k] ;
            }
            if (j > i) st.push(word) ;
            i = j ;
        }

        string res = "" ;
        while (!st.empty())
        {
            res += st.top() ;
            st.pop() ;
            res += " " ;
        }

        while (res.back() == ' ')
            res.pop_back() ;

        return res ;
    }
};


// Source https://leetcode.com/problems/maximum-product-subarray/

Given an integer array nums, find a contiguous non-empty subarray within the array that has the largest product, and return the product.

The test cases are generated so that the answer will fit in a 32-bit integer.

A subarray is a contiguous subsequence of the array.

 

Example 1:

Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.
Example 2:

Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.
 

Constraints:

1 <= nums.length <= 2 * 104
-10 <= nums[i] <= 10
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

class Solution
{
public:
    int maxProduct(vector<int> &nums)
    {
        int n = nums.size();
        vector<long> dpMax(n, INT_MIN);
        vector<long> dpMin(n, INT_MAX);
        dpMax[0] = nums[0];
        dpMin[0] = nums[0];
        long res = nums[0];
        for (int i = 1; i < n; ++i)
        {
            long val = nums[i];
            long temp1 = dpMax[i - 1] * val;
            long temp2 = dpMin[i - 1] * val;
            dpMax[i] = max(val, max(temp1, temp2));
            dpMin[i] = min(val, min(temp1, temp2));
            res = max(res, dpMax[i]);
        }
        return (int)res;
    }
};


// Source https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/

Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of unique elements, return the minimum element of this array.

You must write an algorithm that runs in O(log n) time.

 

Example 1:

Input: nums = [3,4,5,1,2]
Output: 1
Explanation: The original array was [1,2,3,4,5] rotated 3 times.
Example 2:

Input: nums = [4,5,6,7,0,1,2]
Output: 0
Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.
Example 3:

Input: nums = [11,13,15,17]
Output: 11
Explanation: The original array was [11,13,15,17] and it was rotated 4 times. 
 

Constraints:

n == nums.length
1 <= n <= 5000
-5000 <= nums[i] <= 5000
All the integers of nums are unique.
nums is sorted and rotated between 1 and n times.

class Solution
{
public:
    int findMin(vector<int> &nums)
    {
        int n = nums.size();
        if(n == 1) return nums[0];
        if(n == 2) return min(nums[0], nums[1]);
        int i = 1;
        for(; i < n && nums[i] == nums[i - 1]; ++i);
        if (i == n) return nums[0];
        if (nums[0] > nums[i])
        {
            return nums[i];
        }
        else if(nums[i] <= nums[n - 1])
        {
            return nums[0];
        }
        int low = i, high = n - 1;
        int idx = i;
        while (low <= high)
        {
            int mid = (low + high) / 2;
            if (nums[mid] > nums[0] && nums[mid] > nums[n - 1])
            {
                idx = mid;
                low = mid + 1;
            }
            else
            {
                high = mid - 1;
            }
        }
        return nums[idx + 1];
    }
};


// Source https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/

Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,4,4,5,6,7] might become:

[4,5,6,7,0,1,4] if it was rotated 4 times.
[0,1,4,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums that may contain duplicates, return the minimum element of this array.

You must decrease the overall operation steps as much as possible.

 

Example 1:

Input: nums = [1,3,5]
Output: 1
Example 2:

Input: nums = [2,2,2,0,1]
Output: 0
 

Constraints:

n == nums.length
1 <= n <= 5000
-5000 <= nums[i] <= 5000
nums is sorted and rotated between 1 and n times.

class Solution
{
public:
    int findMin(vector<int> &nums)
    {
        int n = nums.size();
        if(n == 1) return nums[0];
        if(n == 2) return min(nums[0], nums[1]);
        int i = 1;
        for(; i < n && nums[i] == nums[i - 1]; ++i);
        if (i == n) return nums[0];
        if (nums[0] > nums[i])
        {
            return nums[i];
        }
        else if(nums[i] <= nums[n - 1])
        {
            return nums[0];
        }
        int low = i, high = n - 1;
        int idx = i;
        while (low <= high)
        {
            int mid = (low + high) / 2;
            if (nums[mid] > nums[0] && nums[mid] > nums[n - 1])
            {
                idx = mid;
                low = mid + 1;
            }
            else
            {
                high = mid - 1;
            }
        }
        return nums[idx + 1];
    }
};


// Source https://leetcode.com/problems/min-stack/

Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

Implement the MinStack class:

MinStack() initializes the stack object.
void push(int val) pushes the element val onto the stack.
void pop() removes the element on the top of the stack.
int top() gets the top element of the stack.
int getMin() retrieves the minimum element in the stack.
 

Example 1:

Input
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

Output
[null,null,null,null,-3,null,0,-2]

Explanation
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2
 

Constraints:

-231 <= val <= 231 - 1
Methods pop, top and getMin operations will always be called on non-empty stacks.
At most 3 * 104 calls will be made to push, pop, top, and getMin.

class MinStack
{
private:
    stack<int> s1;
    stack<int> s2;   //从栈底到栈顶单调递减
public:
    void push(int val)
    {
        s1.push(val);
        if(s2.empty() || val <= s2.top())
            s2.push(val);
    }
    void pop()
    {
        if(s1.top() == s2.top())
            s2.pop();
        s1.pop();
    }
    int top()
    {
        return s1.top();
    }
    int getMin()
    {
        return s2.top();
    }
};


// Source https://leetcode.com/problems/intersection-of-two-linked-lists/

Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.

For example, the following two linked lists begin to intersect at node c1:


The test cases are generated such that there are no cycles anywhere in the entire linked structure.

Note that the linked lists must retain their original structure after the function returns.

Custom Judge:

The inputs to the judge are given as follows (your program is not given these inputs):

intersectVal - The value of the node where the intersection occurs. This is 0 if there is no intersected node.
listA - The first linked list.
listB - The second linked list.
skipA - The number of nodes to skip ahead in listA (starting from the head) to get to the intersected node.
skipB - The number of nodes to skip ahead in listB (starting from the head) to get to the intersected node.
The judge will then create the linked structure based on these inputs and pass the two heads, headA and headB to your program. 
If you correctly return the intersected node, then your solution will be accepted.

 

Example 1:


Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3
Output: Intersected at '8'
Explanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect).
From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.
Example 2:


Input: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1
Output: Intersected at '2'
Explanation: The intersected node's value is 2 (note that this must not be 0 if the two lists intersect).
From the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.
Example 3:


Input: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2
Output: No intersection
Explanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.
Explanation: The two lists do not intersect, so return null.
 

Constraints:

The number of nodes of listA is in the m.
The number of nodes of listB is in the n.
1 <= m, n <= 3 * 104
1 <= Node.val <= 105
0 <= skipA < m
0 <= skipB < n
intersectVal is 0 if listA and listB do not intersect.
intersectVal == listA[skipA] == listB[skipB] if listA and listB intersect.

class Solution
{
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB)
    {
        ListNode *temp = headA, *temp2 = headB;
        int cnt = 0, cnt2 = 0;
        while(temp)
        {
            cnt++;
            temp = temp->next;
        }
        while(temp2)
        {
            cnt2++;
            temp2 = temp2->next;
        }
        int diff = abs(cnt2 - cnt);
        if(cnt > cnt2)
        {
            temp = headA;
            temp2 = headB;
        }
        else
        {
            temp = headB;
            temp2 = headA;
        }
        while(temp && diff--)
        {
            temp = temp->next;
        }

        while(temp != NULL && temp2 != NULL)
        {
            if(temp == temp2)
            {
                return temp;
            }
            temp = temp->next;
            temp2 = temp2->next;
        }

        return NULL;
    }
};


// Source https://leetcode.com/problems/find-peak-element/

A peak element is an element that is strictly greater than its neighbors.

Given an integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.

You may imagine that nums[-1] = nums[n] = -∞.

You must write an algorithm that runs in O(log n) time.

 

Example 1:

Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.
Example 2:

Input: nums = [1,2,1,3,5,6,4]
Output: 5
Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.
 

Constraints:

1 <= nums.length <= 1000
-231 <= nums[i] <= 231 - 1
nums[i] != nums[i + 1] for all valid i.

class Solution
{
public:
    int findPeakElement(vector<int> &nums)
    {
        int n = nums.size();
        if(n == 1) return 0;
        vector<int>left(n, 0), right(n, 0);
        for(int i = 1; i < n; i++)
        {
            if(nums[i] > nums[i - 1])
                left[i] = 1 + left[i - 1];
        }

        for(int i = n - 2; i >= 0; --i)
        {
            if(nums[i] > nums[i + 1])
                right[i] = 1 + right[i + 1];
        }

        if (right[0] > 0) return 0;
        if (left[n - 1] > 0) return n - 1;
        for(int i = 1; i < n - 1; i++)
        {
            if (left[i] > 0 && right[i] > 0) return i;
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/maximum-gap/

Given an integer array nums, return the maximum difference between two successive elements in its sorted form. If the array contains less than two elements, return 0.

You must write an algorithm that runs in linear time and uses linear extra space.

 

Example 1:

Input: nums = [3,6,9,1]
Output: 3
Explanation: The sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3.
Example 2:

Input: nums = [10]
Output: 0
Explanation: The array contains less than 2 elements, therefore return 0.
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 109

class Solution
{
public:
    int maximumGap(vector<int> &nums)
    {
        int ans = INT_MIN;
        if(nums.size() < 2)
            return 0;
        sort(nums.begin(), nums.end());
        for (int i = 1; i < nums.size(); i++)
        {
            ans = max(ans, nums[i] - nums[i - 1]);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/compare-version-numbers/

Given two version numbers, version1 and version2, compare them.

Version numbers consist of one or more revisions joined by a dot '.'. Each revision consists of digits and may contain leading zeros. 
Every revision contains at least one character. Revisions are 0-indexed from left to right, with the leftmost revision being revision 0, the next revision being revision 1, and so on. 
For example 2.5.33 and 0.1 are valid version numbers.

To compare version numbers, compare their revisions in left-to-right order. Revisions are compared using their integer value ignoring any leading zeros. 
This means that revisions 1 and 001 are considered equal. If a version number does not specify a revision at an index, then treat the revision as 0. 
For example, version 1.0 is less than version 1.1 because their revision 0s are the same, but their revision 1s are 0 and 1 respectively, and 0 < 1.

Return the following:

If version1 < version2, return -1.
If version1 > version2, return 1.
Otherwise, return 0.
 

Example 1:

Input: version1 = "1.01", version2 = "1.001"
Output: 0
Explanation: Ignoring leading zeroes, both "01" and "001" represent the same integer "1".
Example 2:

Input: version1 = "1.0", version2 = "1.0.0"
Output: 0
Explanation: version1 does not specify revision 2, which means it is treated as "0".
Example 3:

Input: version1 = "0.1", version2 = "1.1"
Output: -1
Explanation: version1's revision 0 is "0", while version2's revision 0 is "1". 0 < 1, so version1 < version2.
 

Constraints:

1 <= version1.length, version2.length <= 500
version1 and version2 only contain digits and '.'.
version1 and version2 are valid version numbers.
All the given revisions in version1 and version2 can be stored in a 32-bit integer.

class Solution
{
public:
    int compareVersion(string version1, string version2)
    {
        int i = 0, j = 0;

        int n = version1.size();
        int m = version2.size();

        while(i < n || j < m)
        {
            int n1 = 0;
            int n2 = 0;

            while(i < n && version1[i] != '.')
            {
                n1 = n1 * 10 + version1[i] - '0';
                i++;
            }
            while(j < m && version2[j] != '.')
            {
                n2 = n2 * 10 + version2[j] - '0';
                j++;
            }

            if(n1 > n2)
            {
                return 1;
            }
            else if(n1 < n2)
            {
                return -1;
            }
            else
            {
                i++;
                j++;
            }
        }
        return 0;
    }
};


// Source https://leetcode.com/problems/fraction-to-recurring-decimal/

Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.

If the fractional part is repeating, enclose the repeating part in parentheses.

If multiple answers are possible, return any of them.

It is guaranteed that the length of the answer string is less than 104 for all the given inputs.

 

Example 1:

Input: numerator = 1, denominator = 2
Output: "0.5"
Example 2:

Input: numerator = 2, denominator = 1
Output: "2"
Example 3:

Input: numerator = 4, denominator = 333
Output: "0.(012)"
 

Constraints:

-231 <= numerator, denominator <= 231 - 1
denominator != 0

4 / 333
40 / 333
400 / 333 = 1，余数 67
670 / 333 = 2，余数 4
0.012012012 ...
0.(012)

class Solution
{
public:
    string fractionToDecimal(int numerator, int denominator)
    {
        unordered_map<long, int> mp;

        if(numerator == 0) return "0";
        string ans = (numerator < 0) ^ (denominator < 0) ? "-" : "";

        long n = abs(numerator);
        long d = abs(denominator);

        ans += to_string(n / d);
        n %= d;

        if(n)
        {
            ans += ".";
            while(n && mp.find(n) == mp.end())
            {
                mp[n] = ans.size();
                n = n * 10;
                ans += to_string(n / d);
                n %= d;
            }
            if(n)
            {
                ans = ans.substr(0, mp[n]) + "(" + ans.substr(mp[n]) + ")";
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/

Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. 
Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.

Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.

The tests are generated such that there is exactly one solution. You may not use the same element twice.

Your solution must use only constant extra space.

 

Example 1:

Input: numbers = [2,7,11,15], target = 9
Output: [1,2]
Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].
Example 2:

Input: numbers = [2,3,4], target = 6
Output: [1,3]
Explanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].
Example 3:

Input: numbers = [-1,0], target = -1
Output: [1,2]
Explanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2].
 

Constraints:

2 <= numbers.length <= 3 * 104
-1000 <= numbers[i] <= 1000
numbers is sorted in non-decreasing order.
-1000 <= target <= 1000
The tests are generated such that there is exactly one solution.

class Solution
{
public:
    vector<int> twoSum(vector<int> &numbers, int target)
    {
        int left = 0;
        int right = numbers.size() - 1;
        while(left < right)
        {
            if(numbers[left] + numbers[right] == target)
                return {left + 1, right + 1};
            else if(target < numbers[left] + numbers[right])
                right--;
            else
                left++;
        }
        return {left + 1, right + 1};
    }
};


// Source https://leetcode.com/problems/excel-sheet-column-title/

Given an integer columnNumber, return its corresponding column title as it appears in an Excel sheet.

For example:

A -> 1
B -> 2
C -> 3
...
Z -> 26
AA -> 27
AB -> 28 
...
AZ -> 52
BA -> 53

Example 1:

Input: columnNumber = 1
Output: "A"
Example 2:

Input: columnNumber = 28
Output: "AB"
Example 3:

Input: columnNumber = 701
Output: "ZY"
 

Constraints:

1 <= columnNumber <= 231 - 1

class Solution
{
public:
    string convertToTitle(int columnNumber)
    {
        string res;
        if (columnNumber <= 26)
        {
            res.push_back('A' + columnNumber - 1);
            return res;
        }
        vector<int> numVec;
        numVec.reserve(256);
        res.reserve(256);
        while(columnNumber > 26)
        {
            int val = columnNumber / 26;
            int mod = columnNumber % 26;
            if (mod == 0)
            {
                --val;
                mod = 26;
                columnNumber = val;
            }
            else
            {
                columnNumber = val;
            }
            numVec.push_back(mod);
        }
        numVec.push_back(columnNumber);
        reverse(numVec.begin(), numVec.end());
        int n = numVec.size();
        for (int i = 0; i < n; ++i)
        {
            res.push_back('A' + numVec[i] - 1);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/majority-element/

Given an array nums of size n, return the majority element.

The majority element is the element that appears more than n / 2 向下取整 times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2
 

Constraints:

n == nums.length
1 <= n <= 5 * 104
-231 <= nums[i] <= 231 - 1

class Solution
{
public:
    int majorityElement(vector<int> &nums)
    {
        int n = nums.size();
        int cnt = n / 2;
        unordered_map<int, int> count_map;
        for(auto val : nums)
        {
            if (++count_map[val] > cnt) return val;
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/excel-sheet-column-number/

Given a string columnTitle that represents the column title as appear in an Excel sheet, return its corresponding column number.

For example:

A -> 1
B -> 2
C -> 3
...
Z -> 26
AA -> 27
AB -> 28 
...
 

Example 1:

Input: columnTitle = "A"
Output: 1
Example 2:

Input: columnTitle = "AB"
Output: 28
Example 3:

Input: columnTitle = "ZY"
Output: 701
 

Constraints:

1 <= columnTitle.length <= 7
columnTitle consists only of uppercase English letters.
columnTitle is in the range ["A", "FXSHRXW"].

class Solution
{
public:
    int titleToNumber(string columnTitle)
    {
        int n = columnTitle.size(), i = 0;
        long long sum = 0;
        while(i < n)
        {
            sum = sum * 26;
            sum = sum + (columnTitle[i] - 'A' + 1);
            i++;
        }
        return sum;
    }
};


// Source https://leetcode.com/problems/factorial-trailing-zeroes/

Given an integer n, return the number of trailing zeroes in n!.

Note that n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1.

 

Example 1:

Input: n = 3
Output: 0
Explanation: 3! = 6, no trailing zero.
Example 2:

Input: n = 5
Output: 1
Explanation: 5! = 120, one trailing zero.
Example 3:

Input: n = 0
Output: 0
 

Constraints:

0 <= n <= 104

You will get zero when you multiply 5 with 2. We have a lots of 2's. So we count number of 5's
But some numbers like 25, 125, 625 will have multiple 5's in them. Hence count them as well.

n = 53
n / 5 = 10
5	10	15	20	25	30	35	40	45	50
n / 25 = 2
				25					50
总共12个5

class Solution
{
public:
    int trailingZeroes(int n)
    {
        int sum = 0;
        int power5 = 5;
        while(n / power5 != 0)
        {
            sum += n / power5;
            power5 = power5 * 5;
        }
        return sum;
    }
};


// Source https://leetcode.com/problems/binary-search-tree-iterator/

Implement the BSTIterator class that represents an iterator over the in-order traversal of a binary search tree (BST):

BSTIterator(TreeNode root) Initializes an object of the BSTIterator class. The root of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.
boolean hasNext() Returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false.
int next() Moves the pointer to the right, then returns the number at the pointer.
Notice that by initializing the pointer to a non-existent smallest number, the first call to next() will return the smallest element in the BST.

You may assume that next() calls will always be valid. That is, there will be at least a next number in the in-order traversal when next() is called.

 

Example 1:


Input
["BSTIterator", "next", "next", "hasNext", "next", "hasNext", "next", "hasNext", "next", "hasNext"]
[[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]
Output
[null, 3, 7, true, 9, true, 15, true, 20, false]

Explanation
BSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]);
bSTIterator.next();    // return 3
bSTIterator.next();    // return 7
bSTIterator.hasNext(); // return True
bSTIterator.next();    // return 9
bSTIterator.hasNext(); // return True
bSTIterator.next();    // return 15
bSTIterator.hasNext(); // return True
bSTIterator.next();    // return 20
bSTIterator.hasNext(); // return False
 

Constraints:

The number of nodes in the tree is in the range [1, 105].
0 <= Node.val <= 106
At most 105 calls will be made to hasNext, and next.

class BSTIterator
{
private:
    stack<TreeNode *>s;
    void PushAll(TreeNode *r)
    {
        while(r != NULL)
        {
            s.push(r);
            r = r->left;
        }
    }
public:
    BSTIterator(TreeNode *root)
    {
        PushAll(root);
    }

    int next()
    {
        auto it = s.top();
        s.pop();
        PushAll(it->right);
        return it->val;
    }

    bool hasNext()
    {
        return !s.empty();
    }
};

class BSTIterator
{
    vector<int> arr;
    int x = 0;

    void inorder(TreeNode *root)
    {
        if(root == nullptr)
        {
            return ;
        }
        inorder(root -> left);
        arr.push_back(root -> val);
        inorder(root -> right);
    }
public:
    BSTIterator(TreeNode *root)
    {
        inorder(root);
    }

    int next()
    {
        return arr[x++];
    }

    bool hasNext()
    {
        return x < arr.size();
    }
};


// Source https://leetcode.com/problems/dungeon-game/

The demons had captured the princess and imprisoned her in the bottom-right corner of a dungeon. The dungeon consists of m x n rooms laid out in a 2D grid. 
Our valiant knight was initially positioned in the top-left room and must fight his way through dungeon to rescue the princess.

The knight has an initial health point represented by a positive integer. If at any point his health point drops to 0 or below, he dies immediately.

Some of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; 
other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).

To reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.

Return the knight's minimum initial health so that he can rescue the princess.

Note that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.

 

Example 1:


Input: dungeon = [[-2,-3,3],[-5,-10,1],[10,30,-5]]
Output: 7
Explanation: The initial health of the knight must be at least 7 if he follows the optimal path: RIGHT-> RIGHT -> DOWN -> DOWN.
Example 2:

Input: dungeon = [[0]]
Output: 1
 

Constraints:

m == dungeon.length
n == dungeon[i].length
1 <= m, n <= 200
-1000 <= dungeon[i][j] <= 1000

class Solution
{
public:
    int n, m;
    int dp[201][201];
    int solve(vector<vector<int>> &dungeon, int row, int col)
    {
        if(row >= n || col >= m)
        {
            return INT_MAX;
        }
        if(row == n - 1 && col == m - 1)
        {
            if(dungeon[row][col] <= 0)
                return abs(dungeon[row][col]) + 1;
            return 1;
        }
        if(dp[row][col] != -1)
            return dp[row][col];
        int move_down = solve(dungeon, row + 1, col);
        int move_right = solve(dungeon, row, col + 1);
        int min_health = min(move_down, move_right) - dungeon[row][col];
        if(min_health <= 0) min_health = 1;
        return dp[row][col] = min_health;
    }
    int calculateMinimumHP(vector<vector<int>> &dungeon)
    {
        n = dungeon.size();
        m = dungeon[0].size();
        memset(dp, -1, sizeof(dp));
        return solve(dungeon, 0, 0);
    }
};


// Source https://leetcode.com/problems/largest-number/

Given a list of non-negative integers nums, arrange them such that they form the largest number and return it.

Since the result may be very large, so you need to return a string instead of an integer.

 

Example 1:

Input: nums = [10,2]
Output: "210"
Example 2:

Input: nums = [3,30,34,5,9]
Output: "9534330"
 

Constraints:

1 <= nums.length <= 100
0 <= nums[i] <= 109

class Solution
{
public:
    static bool compare(int a, int b)
    {
        string x = to_string(a), y = to_string(b);
        if((x + y) > (y + x))
            return true;
        else
            return false;
    }
    string largestNumber(vector<int> &nums)
    {
        string ans = "";
        sort(nums.begin(), nums.end(), compare);
        for(int i = 0; i < nums.size(); i++)
            ans += to_string(nums[i]);
        int i = 0;
        while(i < ans.length() && ans[i] == '0') i++;
        if(i == ans.length())
        {
            return "0";
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/repeated-dna-sequences/

The DNA sequence is composed of a series of nucleotides abbreviated as 'A', 'C', 'G', and 'T'.

For example, "ACGAATTCCG" is a DNA sequence.
When studying DNA, it is useful to identify repeated sequences within the DNA.

Given a string s that represents a DNA sequence, return all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in any order.

 

Example 1:

Input: s = "AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT"
Output: ["AAAAACCCCC","CCCCCAAAAA"]
Example 2:

Input: s = "AAAAAAAAAAAAA"
Output: ["AAAAAAAAAA"]
 

Constraints:

1 <= s.length <= 105
s[i] is either 'A', 'C', 'G', or 'T'.

class Solution
{
public:
    vector<string> findRepeatedDnaSequences(string s)
    {
        int i = 0;
        int n = s.size();
        unordered_set<string> uset;
        unordered_set<string> seen;
        while(i + 9 < n)
        {
            string candidateDna = s.substr(i, 10);
            if(uset.count(candidateDna))
            {
                seen.insert(candidateDna);
            }
            else
            {
                uset.insert(candidateDna);
            }
            i++;
        }
        return vector<string> (seen.begin(), seen.end());
    }
};


// Source https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/

You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.

Find the maximum profit you can achieve. You may complete at most k transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: k = 2, prices = [2,4,1]
Output: 2
Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.
Example 2:

Input: k = 2, prices = [3,2,6,5,0,3]
Output: 7
Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
 

Constraints:

0 <= k <= 100
0 <= prices.length <= 1000
0 <= prices[i] <= 1000


class Solution
{
public:
    int lim;
    int dp[205][1005];

    int helper(vector<int> &prices, int n, int day, int count)
    {
        if(day == n) return 0;
        if(count >= lim) return 0;
        if(dp[count][day] != -1) return dp[count][day];
        int notransaction = helper(prices, n, day + 1, count);
        int transaction = 0;
        bool buy = (count % 2 == 0);
        if(buy)
        {
            transaction = -prices[day] + helper(prices, n, day + 1, count + 1);
        }
        else
        {
            transaction = prices[day] + helper(prices, n, day + 1, count + 1);
        }
        return dp[count][day] = max(notransaction, transaction);
    }
    int maxProfit(int k, vector<int>& prices)
    {
        lim = 2 * k;
        int n = prices.size();
        memset(dp, -1, sizeof(dp));
        return helper(prices, n, 0, 0);
    }
};


// Source https://leetcode.com/problems/rotate-array/

Given an array, rotate the array to the right by k steps, where k is non-negative.

 

Example 1:

Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]
Example 2:

Input: nums = [-1,-100,3,99], k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]
 

Constraints:

1 <= nums.length <= 105
-231 <= nums[i] <= 231 - 1
0 <= k <= 105

class Solution
{
public:
    void rotate(vector<int> &nums, int k)
    {
        int n = k % nums.size();
        if (n == 0) return;
        reverse(nums.begin(), nums.end()); //reverse full array
        reverse(nums.begin(), nums.begin() + n); //reverse first k elements
        reverse(nums.begin() + n, nums.end());  // reverse remaining elements
    }
};


// Source https://leetcode.com/problems/reverse-bits/

Reverse bits of a given 32 bits unsigned integer.

Note:

Note that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. 
They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.
In Java, the compiler represents the signed integers using 2's complement notation. 
Therefore, in Example 2 above, the input represents the signed integer -3 and the output represents the signed integer -1073741825.
 

Example 1:

Input: n = 00000010100101000001111010011100
Output:    964176192 (00111001011110000010100101000000)
Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.
Example 2:

Input: n = 11111111111111111111111111111101
Output:   3221225471 (10111111111111111111111111111111)
Explanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111.
 

Constraints:

The input must be a binary string of length 32

class Solution
{
public:
    uint32_t reverseBits(uint32_t n)
    {
        uint32_t bit = 0;

        for (int i = 0; i < 32; i++)
        {
            bit = (bit << 1) | (n & 1);
            n >>= 1;
        }

        return bit;
    }
};


// Source https://leetcode.com/problems/number-of-1-bits/

Write a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).

Note:

Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.
In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 3, the input represents the signed integer. -3.
 

Example 1:

Input: n = 00000000000000000000000000001011
Output: 3
Explanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits.
Example 2:

Input: n = 00000000000000000000000010000000
Output: 1
Explanation: The input binary string 00000000000000000000000010000000 has a total of one '1' bit.
Example 3:

Input: n = 11111111111111111111111111111101
Output: 31
Explanation: The input binary string 11111111111111111111111111111101 has a total of thirty one '1' bits.
 

Constraints:

The input must be a binary string of length 32.

class Solution
{
public:
    int hammingWeight(uint32_t n)
    {
        return __builtin_popcount(n);
    }
};

class Solution
{
public:
    int hammingWeight(uint32_t n)
    {
        return bitset<32>{n}.count();
    }
};


// Source https://leetcode.com/problems/house-robber/

You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, 
the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected 
and it will automatically contact the police if two adjacent houses were broken into on the same night.

Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.

 

Example 1:

Input: nums = [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
Total amount you can rob = 1 + 3 = 4.
Example 2:

Input: nums = [2,7,9,3,1]
Output: 12
Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).
Total amount you can rob = 2 + 9 + 1 = 12.
 

Constraints:

1 <= nums.length <= 100
0 <= nums[i] <= 400

class Solution
{
public:
    int n;
    vector<int> dp;

    int solve(vector<int> &nums, int idx)
    {
        if (idx >= n) return 0;
        if(dp[idx] != -1)  return dp[idx];
        int ans = INT_MIN;
        ans = max(ans, solve(nums, idx + 1));
        ans = max(ans, nums[idx] + solve(nums, idx + 2));
        return dp[idx] = ans;
    }
    int rob(vector<int> &nums)
    {
        n = nums.size();
        dp = vector<int>(n, -1);
        return solve(nums, 0);
    }
};


// Source https://leetcode.com/problems/binary-tree-right-side-view/

Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

 

Example 1:


Input: root = [1,2,3,null,5,null,4]
Output: [1,3,4]
Example 2:

Input: root = [1,null,3]
Output: [1,3]
Example 3:

Input: root = []
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100

class Solution
{
public:
    vector<int> rightSideView(TreeNode *root)
    {
        vector<int> res;
        if(!root)return res;
        queue<TreeNode *> que;
        que.push(root);
        while(!que.empty())
        {
            int sz = que.size();
            for (int i = 0; i < sz; ++i)
            {
                TreeNode *node = que.front();
                que.pop();
                if(i == sz - 1) res.push_back(node->val);
                if(node->left)que.push(node->left);
                if(node->right)que.push(node->right);
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/number-of-islands/

Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

 

Example 1:

Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1
Example 2:

Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 300
grid[i][j] is '0' or '1'.

class Solution
{
public:
    int n, m;

    void dfs(vector<vector<char>> &grid, int r, int c)
    {
        if(r < 0 || r >= n || c < 0 || c >= m || grid[r][c] == '0') return;
        grid[r][c] = '0';
        dfs(grid, r - 1, c);
        dfs(grid, r + 1, c);
        dfs(grid, r, c - 1);
        dfs(grid, r, c + 1);
    }

    int numIslands(vector<vector<char>> &grid)
    {
        n = grid.size();
        m = grid[0].size();
        int res = 0;
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                if(grid[i][j] == '1')
                {
                    dfs(grid, i, j);
                    ++res;
                }
            }
        }
        return res;
    }
};
