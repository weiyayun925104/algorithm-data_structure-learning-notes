// Source https://leetcode.com/problems/two-sum/

Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

 

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]
 

Constraints:

2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109
Only one valid answer exists.

class Solution
{
public:
    vector<int> twoSum(vector<int> &nums, int target)
    {
        vector<pair<int, int>> v;
        vector<int> ans;

        for(int i = 0; i < nums.size(); i++)
        {
            v.push_back({nums[i], i});
        }
        sort(v.begin(), v.end());
        auto it1 = v.begin();
        auto it2 = v.end() - 1;

        while(it1 != it2)
        {
            if(((it1->first) + (it2->first)) == target)
            {
                ans.push_back(it1->second);
                ans.push_back(it2->second);
                break;
            }
            else if(((it1->first) + (it2->first)) > target)
            {
                it2--;
            }
            else
                it1++;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/add-two-numbers/

You are given two non-empty linked lists representing two non-negative integers. 
The digits are stored in reverse order, and each of their nodes contains a single digit. 
Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:


Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]
Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
 

Constraints:

The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.


class Solution
{
public:
    ListNode *addTwoNumbers(ListNode *l1, ListNode *l2)
    {
        ListNode *temp = new ListNode(0);
        ListNode *curr = temp;
        int carry = 0;
        ListNode *p = l1;
        ListNode *q = l2;
        while(p != NULL || q != NULL)
        {
            int x = (p != NULL) ? p->val : 0;
            int y = (q != NULL) ? q->val : 0;
            int sum = carry + x + y;
            carry = sum / 10;
            curr->next = new ListNode(sum % 10);
            curr = curr->next;
            if (p != NULL) p = p->next;
            if (q != NULL) q = q->next;
        }
        if(carry > 0)
        {
            curr->next = new ListNode(carry);
        }
        return temp->next;
    }
};


// Source https://leetcode.com/problems/longest-substring-without-repeating-characters/

Given a string s, find the length of the longest substring without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.

class Solution
{
public:
    int lengthOfLongestSubstring(string s)
    {
        int mp[256] = {0};
        int l = 0, r = 0, max_length = 0;

        while(r < s.size())
        {
            mp[(int)s[r]]++;
            while(mp[(int)s[r]] > 1)
            {
                mp[(int)s[l]]--;
                l++;
            }

            max_length = max(max_length, r - l + 1);
            r++;
        }

        return max_length;
    }
};


// Source https://leetcode.com/problems/median-of-two-sorted-arrays/

Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).

 

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
 

Constraints:

nums1.length == m
nums2.length == n
0 <= m <= 1000
0 <= n <= 1000
1 <= m + n <= 2000
-106 <= nums1[i], nums2[i] <= 106

class Solution
{
public:
    double findMedianSortedArrays(vector<int> &A, vector<int> &B)
    {
        vector<int> AB = A;
        AB.insert(AB.end(), B.begin(), B.end());

        int n = AB.size();
        double sum = 0;

        sort(AB.begin(), AB.end());

        if(n % 2 == 0)
        {
            int mid = n / 2 ;
            sum = AB[mid-1] + AB[mid];
            return sum / 2;
        }
        else
        {
            int mid = n / 2;
            return AB[mid];
        }

        return -1;
    }
};


// Source https://leetcode.com/problems/longest-palindromic-substring/

Given a string s, return the longest palindromic substring in s.

 

Example 1:

Input: s = "babad"
Output: "bab"
Explanation: "aba" is also a valid answer.
Example 2:

Input: s = "cbbd"
Output: "bb"
 

Constraints:

1 <= s.length <= 1000
s consist of only digits and English letters.

class Solution
{
public:
    string longestPalindrome(string s)
    {
        int n = s.size();
        int start = -1, end = n;
        int maxlen = 0;
        for(int i = 0; i < n; i++)
        {
            int left = i - 1, right = i + 1; //odd length palindrome
            while(left >= 0 && right < n && s[left] == s[right])
            {
                left--;
                right++;
            }
            int len = right - left - 1; // (right - 1) - (left + 1) + 1 = right - left -1
            if(len > maxlen)
            {
                maxlen = len;
                start = left + 1;
                end = right - 1;
            }

            left = i; //even length palindrome
            right = i + 1;
            while(left >= 0 && right < n && s[left] == s[right])
            {
                left--;
                right++;
            }
            len = right - left - 1;
            if(len > maxlen)
            {
                maxlen = len;
                start = left + 1;
                end = right - 1;
            }
        }

        string ans;
        for(int i = start; i <= end; i++) ans.push_back(s[i]);
        return ans;
    }
};


// Source https://leetcode.com/problems/zigzag-conversion/

The string "PAYPALISHIRING" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)

P	A	H	N
A   P	L   S	I   I	G
Y	I	R
And then read line by line: "PAHNAPLSIIGYIR"

Write the code that will take a string and make this conversion given a number of rows:

string convert(string s, int numRows);
 

Example 1:

Input: s = "PAYPALISHIRING", numRows = 3
Output: "PAHNAPLSIIGYIR"
Example 2:

Input: s = "PAYPALISHIRING", numRows = 4
Output: "PINALSIGYAHRPI"
Explanation:
P     I    N
A   L S  I G
Y A   H R
P     I
Example 3:

Input: s = "A", numRows = 1
Output: "A"
 

Constraints:

1 <= s.length <= 1000
s consists of English letters (lower-case and upper-case), ',' and '.'.
1 <= numRows <= 1000

class Solution
{
public:
    string convert(string s, int numRows)
    {
        int i = 0;
        int n = s.size();
        int row = 0;
        int cutOff = numRows - 1;
        vector<string> output(numRows);

        while(i < n)
        {
            for(row = 0; (row < numRows) && i < n; ++row)
            {
                output[row].push_back(s[i]);
                ++i;
            }

            for(row = cutOff - 1; (row > 0) && i < n; --row)
            {
                output[row].push_back(s[i]);
                ++i;
            }
        }

        string ans;
        for(auto &s : output)
        {
            ans += s;
        }

        return ans;
    }
};


// Source https://leetcode.com/problems/reverse-integer/

Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-2^31, 2^31 - 1], then return 0.

Assume the environment does not allow you to store 64-bit integers (signed or unsigned).

 

Example 1:

Input: x = 123
Output: 321
Example 2:

Input: x = -123
Output: -321
Example 3:

Input: x = 120
Output: 21
 

Constraints:

-231 <= x <= 231 - 1

-2,147,483,648
-8,463,847,412


class Solution
{
public:
    int reverse(int x)
    {
        if (x == INT_MIN) return 0;
        int ans = 0;
        int sign = 1;
        if(x < 0) sign = -1;
        x = abs(x);
        while(x > 0)
        {
            int last = x % 10;
            if(ans > (INT_MAX - last) / 10) return 0; // ans * 10 + last > INT_MAX
            ans = 10 * ans + last;
            x = x / 10;
        }
        
        return ans * sign;
    }
};


// Source https://leetcode.com/problems/string-to-integer-atoi/

Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++'s atoi function).

The algorithm for myAtoi(string s) is as follows:

Read in and ignore any leading whitespace.
Check if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. 
This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.
Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.
Convert these digits into an integer (i.e. "123" -> 123, "0032" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).
If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range. 
Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.
Return the integer as the final result.
Note:

Only the space character ' ' is considered a whitespace character.
Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.
 

Example 1:

Input: s = "42"
Output: 42
Explanation: The underlined characters are what is read in, the caret is the current reader position.
Step 1: "42" (no characters read because there is no leading whitespace)
         ^
Step 2: "42" (no characters read because there is neither a '-' nor '+')
         ^
Step 3: "42" ("42" is read in)
           ^
The parsed integer is 42.
Since 42 is in the range [-231, 231 - 1], the final result is 42.
Example 2:

Input: s = "   -42"
Output: -42
Explanation:
Step 1: "   -42" (leading whitespace is read and ignored)
            ^
Step 2: "   -42" ('-' is read, so the result should be negative)
             ^
Step 3: "   -42" ("42" is read in)
               ^
The parsed integer is -42.
Since -42 is in the range [-231, 231 - 1], the final result is -42.
Example 3:

Input: s = "4193 with words"
Output: 4193
Explanation:
Step 1: "4193 with words" (no characters read because there is no leading whitespace)
         ^
Step 2: "4193 with words" (no characters read because there is neither a '-' nor '+')
         ^
Step 3: "4193 with words" ("4193" is read in; reading stops because the next character is a non-digit)
             ^
The parsed integer is 4193.
Since 4193 is in the range [-231, 231 - 1], the final result is 4193.
 

Constraints:

0 <= s.length <= 200
s consists of English letters (lower-case and upper-case), digits (0-9), ' ', '+', '-', and '.'.

class Solution
{
public:
    int myAtoi(string s)
    {
        int pos = 0;
        int n = s.size();
        bool negative = false;
        long long int current = 0;
        while(pos < n && s[pos] == ' ') //skip leading whitespace
        {
            ++pos;
        }
        if (pos == n) return 0;
        if(s[pos] == '-') //check for sign
        {
            negative = true;
            ++pos;
        }
        else if(s[pos] == '+') //check for sign
        {
            ++pos;
        }
        while(pos < n && isdigit(s[pos]) && current < 1e10)
        {
            current *= 10;
            current += s[pos] - '0';
            ++pos;
        }
        if(current > INT_MAX) //clamp value if too big
        {
            return negative ? INT_MIN : INT_MAX;
        }
        return negative ? -current : current;
    }
};


// Source https://leetcode.com/problems/palindrome-number/

Given an integer x, return true if x is palindrome integer.

An integer is a palindrome when it reads the same backward as forward.

For example, 121 is a palindrome while 123 is not.
 

Example 1:

Input: x = 121
Output: true
Explanation: 121 reads as 121 from left to right and from right to left.
Example 2:

Input: x = -121
Output: false
Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.
Example 3:

Input: x = 10
Output: false
Explanation: Reads 01 from right to left. Therefore it is not a palindrome.
 

Constraints:

-231 <= x <= 231 - 1

class Solution
{
public:
    bool isPalindrome(int x)
    {
        long long p = 0;
        long long val = x;
        while(val > 0)
        {
            p = 10 * p + val % 10;
            val /= 10;
        }
        return x == p ? true : false;
    }
};

// Source https://leetcode.com/problems/regular-expression-matching/

Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:

'.' Matches any single character.​​​​
'*' Matches zero or more of the preceding element.
The matching should cover the entire input string (not partial).

 

Example 1:

Input: s = "aa", p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".
Example 2:

Input: s = "aa", p = "a*"
Output: true
Explanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes "aa".
Example 3:

Input: s = "ab", p = ".*"
Output: true
Explanation: ".*" means "zero or more (*) of any character (.)".
 

Constraints:

1 <= s.length <= 20
1 <= p.length <= 30
s contains only lowercase English letters.
p contains only lowercase English letters, '.', and '*'.
It is guaranteed for each appearance of the character '*', there will be a previous valid character to match.

class Solution
{
public:
    int m, n;
    int dp[35][35];
    bool solve(int i, int j, string &s, string &p)
    {
        if(i == m && j == n) return true;
        if(j == n)
        {
            return false;
        }
        if(i == m)
        {
            if(j + 1 < n && p[j + 1] == '*') return solve(i, j + 2, s, p);
            return false;
        }
        if(dp[i][j] != -1) return dp[i][j];
        if((s[i] == p[j] && (j + 1 >= n || p[j + 1] != '*')) || (p[j] == '.' && (j + 1 >= n || p[j + 1] != '*')))
        {
            return dp[i][j] = solve(i + 1, j + 1, s, p);
        }
        if(p[j] == '.' && j + 1 < n && p[j + 1] == '*')
        {
            bool l = solve(i, j + 2, s, p);
            if(l) return dp[i][j] = true;
            return dp[i][j] = solve(i + 1, j, s, p);
        }
        if(p[j] != '.' && j + 1 < n && p[j + 1] == '*')
        {
            bool l = solve(i, j + 2, s, p);
            if(l) return dp[i][j] =  true;
            return dp[i][j] = (p[j] == s[i] ? solve(i + 1, j, s, p) : false);
        }
        return dp[i][j] = false;
    }

    bool isMatch(string s, string p)
    {
        m = s.size();
        n = p.size();
        memset(dp, -1, sizeof(dp));
        return solve(0, 0, s, p);
    }
};


// Source https://leetcode.com/problems/container-with-most-water/

You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the container contains the most water.

Return the maximum amount of water a container can store.

Notice that you may not slant the container.

 

Example 1:


Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.
Example 2:

Input: height = [1,1]
Output: 1
 

Constraints:

n == height.length
2 <= n <= 105
0 <= height[i] <= 104

class Solution
{
public:
    int maxArea(vector<int> &height)
    {
        int n = height.size();

        int low = 0;
        int high = n - 1;

        int maxWater = 0;
        while(low < high)
        {
            int distance = high - low;

            int minHeight = min(height[low], height[high]);
            maxWater = max(maxWater, minHeight * distance);

            if(height[low] < height[high])
            {
                low++;
            }
            else
            {
                high--;
            }
        }
        return maxWater;
    }
};


// Source https://leetcode.com/problems/integer-to-roman/

Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.

Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
For example, 2 is written as II in Roman numeral, just two one's added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:

I can be placed before V (5) and X (10) to make 4 and 9. 
X can be placed before L (50) and C (100) to make 40 and 90. 
C can be placed before D (500) and M (1000) to make 400 and 900.
Given an integer, convert it to a roman numeral.

 

Example 1:

Input: num = 3
Output: "III"
Explanation: 3 is represented as 3 ones.
Example 2:

Input: num = 58
Output: "LVIII"
Explanation: L = 50, V = 5, III = 3.
Example 3:

Input: num = 1994
Output: "MCMXCIV"
Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.
 

Constraints:

1 <= num <= 3999

class Solution
{
public:
    string intToRoman(int num)
    {
        string roman = "";
        while(num >= 1000)
        {
            roman += "M";
            num -= 1000;
        }
        if(num >= 900)
        {
            roman += "CM";
            num -= 900;
        }
        if(num >= 500)
        {
            roman += "D";
            num -= 500;
        }
        if(num >= 400)
        {
            roman += "CD";
            num -= 400;
        }
        while(num >= 100)
        {
            roman += "C";
            num -= 100;
        }
        if(num >= 90)
        {
            roman += "XC";
            num -= 90;
        }
        if(num >= 50)
        {
            roman += "L";
            num -= 50;
        }
        if(num >= 40)
        {
            roman += "XL";
            num -= 40;
        }
        while(num >= 10)
        {
            roman += "X";
            num -= 10;
        }
        if(num >= 9)
        {
            roman += "IX";
            num -= 9;
        }
        if(num >= 5)
        {
            roman += "V";
            num -= 5;
        }
        if(num >= 4)
        {
            roman += "IV";
            num -= 4;
        }
        while(num >= 1)
        {
            roman += "I";
            num -= 1;
        }
        return roman;
    }
};


// Source https://leetcode.com/problems/roman-to-integer/

Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.

Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
For example, 2 is written as II in Roman numeral, just two one's added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:

I can be placed before V (5) and X (10) to make 4 and 9. 
X can be placed before L (50) and C (100) to make 40 and 90. 
C can be placed before D (500) and M (1000) to make 400 and 900.
Given a roman numeral, convert it to an integer.

 

Example 1:

Input: s = "III"
Output: 3
Explanation: III = 3.
Example 2:

Input: s = "LVIII"
Output: 58
Explanation: L = 50, V= 5, III = 3.
Example 3:

Input: s = "MCMXCIV"
Output: 1994
Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.
 

Constraints:

1 <= s.length <= 15
s contains only the characters ('I', 'V', 'X', 'L', 'C', 'D', 'M').
It is guaranteed that s is a valid roman numeral in the range [1, 3999].

class Solution
{
public:
    int romanToInt(string s)
    {
        int num = 0;
        char prev = 'r'; // give a trash value to inzializate it
        for (int i = s.size() - 1; i >= 0; i--)
        {
            if (s[i] == 'V') num += 5;
            else if (s[i] == 'L') num += 50;
            else if (s[i] == 'D') num += 500;
            else if (s[i] == 'M') num += 1000;
            else if (s[i] == 'I')
            {
                if (prev == 'V' || prev == 'X') num -= 1;
                else num += 1;
            }
            else if (s[i] == 'X')
            {
                if (prev == 'L' || prev == 'C') num -= 10;
                else num += 10;
            }
            else if (s[i] == 'C')
            {
                if (prev == 'D' || prev == 'M') num -= 100;
                else num += 100;
            }

            prev = s[i];
        }
        return num;
    }
};


// Source https://leetcode.com/problems/longest-common-prefix/

Write a function to find the longest common prefix string amongst an array of strings.

If there is no common prefix, return an empty string "".

 

Example 1:

Input: strs = ["flower","flow","flight"]
Output: "fl"
Example 2:

Input: strs = ["dog","racecar","car"]
Output: ""
Explanation: There is no common prefix among the input strings.
 

Constraints:

1 <= strs.length <= 200
0 <= strs[i].length <= 200
strs[i] consists of only lower-case English letters.

class Solution
{
public:
    string comn(string str1, string str2)
    {
        string result;
        int n1 = str1.length(), n2 = str2.length();

        for (int i = 0, j = 0; i < n1 && j < n2; i++, j++)
        {
            if (str1[i] != str2[j])
                break;
            result.push_back(str1[i]);
        }

        return result;
    }

    string longestCommonPrefix(vector<string> &strs)
    {
        string prefix = strs[0];
        int n = strs.size();
        for (int i = 1; i < n; i++)
            prefix = comn(prefix, strs[i]);

        return prefix;
    }
};


// Source https://leetcode.com/problems/3sum/

Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Example 2:

Input: nums = []
Output: []
Example 3:

Input: nums = [0]
Output: []
 

Constraints:

0 <= nums.length <= 3000
-105 <= nums[i] <= 105

class Solution
{
public:
    vector<vector<int>> ans;

    vector<vector<int>> threeSum(vector<int> &nums)
    {
        ans.clear();
        int n = nums.size();

        if( n < 3 ) return ans;

        sort(nums.begin(), nums.end());

        for(int i = 0; i < n - 2; i++)
        {
            if( i == 0 || (nums[i] != nums[i - 1]) )
                searchElement(i, n, nums);
        }
        return ans;
    }

    void searchElement(int i, int n, vector<int> &nums)
    {
        int j = i + 1, k = n - 1, sum;
        while(j < k)
        {
            sum = (nums[i] + nums[j] + nums[k]);
            if( sum == 0 )
            {
                ans.push_back({nums[i], nums[j], nums[k]});
                j++;
                while(j < n && nums[j] == nums[j - 1]) j++;
            }
            else if( sum > 0 ) k--;
            else j++;
        }
    }
};


// Source https://leetcode.com/problems/3sum-closest/

Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.

Return the sum of the three integers.

You may assume that each input would have exactly one solution.

 

Example 1:

Input: nums = [-1,2,1,-4], target = 1
Output: 2
Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
Example 2:

Input: nums = [0,0,0], target = 1
Output: 0
 

Constraints:

3 <= nums.length <= 1000
-1000 <= nums[i] <= 1000
-104 <= target <= 104

class Solution
{
public:
    int threeSumClosest(vector<int> &nums, int target)
    {
        int sum, diff = INT_MAX, res;
        int a, b;
        int n = nums.size();
        sort(nums.begin(), nums.end());
        for(int i = 0 ; i < n - 2; i++)
        {
            if (i > 0 && nums[i] == nums[i - 1]) continue;
            a = i + 1;
            b = n - 1;
            while(a < b)
            {
                sum = nums[i] + nums[a] + nums[b];
                if(sum == target)
                    return sum;
                if(sum < target)
                {
                    if(abs(target - sum) < diff)
                    {
                        diff = abs(target - sum);
                        res = sum;
                    }
                    a++;
                }
                else
                {
                    if(abs(sum - target) < diff)
                    {
                        diff = abs(sum - target);
                        res = sum;
                    }
                    b--;
                }
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/letter-combinations-of-a-phone-number/

Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

1		2(a b c)		3(d e f)
4(g h i)		5(j k l)		6(m n o)
7(p q r s)	8(t u v)		9(w x y z)

Example 1:

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
Example 2:

Input: digits = ""
Output: []
Example 3:

Input: digits = "2"
Output: ["a","b","c"]
 

Constraints:

0 <= digits.length <= 4
digits[i] is a digit in the range ['2', '9'].

class Solution
{
public:
    vector<string> letter(string digits, vector<vector<string>> &v)
    {
        if(digits.size() < 1)
        {
            return vector<string>();
        }
        if(digits.size() == 1)
        {
            int x = digits[0] - '0';
            return v[x];
        }
        vector<string> v2 = letter(digits.substr(1), v);
        vector<string> s;
        int x = digits[0] - '0';
        for(string c : v[x])
        {
            for(string a : v2)
            {
                s.emplace_back(std::move(c + a));
            }
        }
        return s;
    }

    vector<string> letterCombinations(string digits)
    {
        vector<vector<string>> v(10);
        v[2] = {"a", "b", "c"};
        v[3] = {"d", "e", "f"};
        v[4] = {"g", "h", "i"};
        v[5] = {"j", "k", "l"};
        v[6] = {"m", "n", "o"};
        v[7] = {"p", "q", "r", "s"};
        v[8] = {"t", "u", "v"};
        v[9] = {"w", "x", "y", "z"};
        return letter(digits, v);
    }
};


// Source https://leetcode.com/problems/4sum/

Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:

0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target
You may return the answer in any order.

 

Example 1:

Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]
Example 2:

Input: nums = [2,2,2,2,2], target = 8
Output: [[2,2,2,2]]
 

Constraints:

1 <= nums.length <= 200
-109 <= nums[i] <= 109
-109 <= target <= 109

class Solution
{
public:
    int n ;

    void dfs(vector<int> &nums, int target, vector<vector<int>> &ans, vector<int> &curr, int s, int count, int sum)
    {
        if(count == 4)
        {
            if (target == sum) ans.push_back(curr);
            return;
        }

        for(int i = s; i < n; i++)
        {
            if(i != s && nums[i] == nums[i - 1]) continue;
            long long val = (long long)nums[i] * (4 - count);
            if((sum + val) > target) break;
            val = nums[i] + (long long)nums[n - 1] * (4 - count - 1);
            if((sum + val) < target) continue;
            curr.push_back(nums[i]);
            dfs(nums, target, ans, curr, i + 1, count + 1, sum + nums[i]);
            curr.pop_back();
        }
    }

    vector<vector<int>> fourSum(vector<int> &nums, int target)
    {
        sort(nums.begin(), nums.end());
        n = nums.size();
        vector<vector<int>> ans;
        vector<int> curr;
        dfs(nums, target, ans, curr, 0, 0, 0);

        return ans;
    }
};


// Source https://leetcode.com/problems/remove-nth-node-from-end-of-list/

Given the head of a linked list, remove the nth node from the end of the list and return its head.

 

Example 1:


Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]
Example 2:

Input: head = [1], n = 1
Output: []
Example 3:

Input: head = [1,2], n = 1
Output: [1]
 

Constraints:

The number of nodes in the list is sz.
1 <= sz <= 30
0 <= Node.val <= 100
1 <= n <= sz

class Solution
{
public:
    ListNode *removeNthFromEnd(ListNode *head, int n)
    {
        if(head->next == NULL) return NULL;

        ListNode *tempHead = new ListNode(0);
        tempHead->next = head;

        ListNode *slow = tempHead;
        ListNode *fast = tempHead;

        for(int i = 0; i < n; i++)
            fast = fast->next;

        while(fast->next != NULL)
        {
            slow = slow->next;
            fast = fast->next;
        }

        slow->next = slow->next->next;
        return tempHead->next;
    }
};


// Source https://leetcode.com/problems/valid-parentheses/

Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false
 

Constraints:

1 <= s.length <= 104
s consists of parentheses only '()[]{}'.

class Solution
{
public:
    bool isValid(string s)
    {
        stack<char> st;

        for(int i = 0; i < s.length(); i++)
        {
            if((s[i] == '(') || (s[i] == '[') || (s[i] == '{'))
            {
                st.push(s[i]);
            }
            else if(!st.empty())
            {
                if( (s[i] == ')' && st.top() == '(') || (s[i] == '}' && st.top() == '{') || (s[i] == ']' && st.top() == '[') )
                {
                    st.pop();
                }
                else
                {
                    return false;
                }
            }
            else
                return false;
        }
        if(st.empty())
            return true;
        else
            return false;
    }
};


// Source https://leetcode.com/problems/merge-two-sorted-lists/

You are given the heads of two sorted linked lists list1 and list2.

Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.

Return the head of the merged linked list.

 

Example 1:


Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]
Example 2:

Input: list1 = [], list2 = []
Output: []
Example 3:

Input: list1 = [], list2 = [0]
Output: [0]
 

Constraints:

The number of nodes in both lists is in the range [0, 50].
-100 <= Node.val <= 100
Both list1 and list2 are sorted in non-decreasing order.

class Solution
{
public:
    ListNode *mergeTwoLists(ListNode *list1, ListNode *list2)
    {
        ListNode *dummyNode = new ListNode(-1);
        ListNode *p1 = list1;
        ListNode *p2 = list2;
        ListNode *p3 = dummyNode;
        while(p1 != NULL && p2 != NULL)
        {
            if(p1->val <= p2->val)
            {
                p3->next = p1;
                p1 = p1->next;
            }
            else
            {
                p3->next = p2;
                p2 = p2->next;
            }
            p3 = p3->next;
        }

        if(p1 != NULL)
        {
            p3->next = p1;
        }
        if(p2 != NULL)
        {
            p3->next = p2;
        }
        return dummyNode->next;
    }
};


// Source https://leetcode.com/problems/generate-parentheses/

Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

 

Example 1:

Input: n = 3
Output: ["((()))","(()())","(())()","()(())","()()()"]
Example 2:

Input: n = 1
Output: ["()"]
 

Constraints:

1 <= n <= 8

class Solution
{
public:
    vector<string> generateParenthesis(int n)
    {
        vector<string> combinations;
        int open = 0, close = 0;
        string pattern;
        pattern.reserve(n + n);
        generateCombinations(open, close, n, pattern, combinations);
        return combinations;
    }

    void generateCombinations(int &open, int &close, int limit, string &pattern, vector<string> &combinations)
    {
        if (open > limit || close > limit || open < close) return;
        if( open == limit && close == limit )
        {
            combinations.push_back(pattern);
            return;
        }

        if( open < limit )
        {
            open++;
            pattern.push_back('(');
            generateCombinations(open, close, limit, pattern, combinations);
            pattern.pop_back();
            open--;
        }

        if( close < open && close < limit )
        {
            close++;
            pattern.push_back(')');
            generateCombinations(open, close, limit, pattern, combinations);
            pattern.pop_back();
            close--;
        }
    }
};


// Source https://leetcode.com/problems/merge-k-sorted-lists/

You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

Merge all the linked-lists into one sorted linked-list and return it.

 

Example 1:

Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6
Example 2:

Input: lists = []
Output: []
Example 3:

Input: lists = [[]]
Output: []
 

Constraints:

k == lists.length
0 <= k <= 104
0 <= lists[i].length <= 500
-104 <= lists[i][j] <= 104
lists[i] is sorted in ascending order.
The sum of lists[i].length will not exceed 104.

class Solution
{
public:
    ListNode *mergeKLists(vector<ListNode *> &lists)
    {
        priority_queue<int, vector<int>, greater<>> pq;

        for(auto it : lists)
        {
            ListNode *c = it;
            while (c)
            {
                pq.push(c->val);
                c = c->next;
            }
        }

        ListNode *head = nullptr, *curr = head;
        while (!pq.empty())
        {
            int val = pq.top();
            pq.pop();

            ListNode *tmp = new ListNode(val);

            if(!head)
            {
                head = tmp;
                curr = head;
            }
            else
            {
                curr->next = tmp;
                curr = curr->next;
            }
        }
        return head;
    }
};


// Source https://leetcode.com/problems/swap-nodes-in-pairs/

Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)

 

Example 1:


Input: head = [1,2,3,4]
Output: [2,1,4,3]
Example 2:

Input: head = []
Output: []
Example 3:

Input: head = [1]
Output: [1]
 

Constraints:

The number of nodes in the list is in the range [0, 100].
0 <= Node.val <= 100

class Solution
{
public:
    ListNode *nodeArr[10005];
    int nodeCnt;

    int getLength(ListNode *head, int k)
    {
        int ct = 0;
        while(head != NULL && ct < k)
        {
            nodeArr[nodeCnt++] = head;
            ct++;
            head = head->next;
        }
        return ct;
    }

    void recur(ListNode *head, int k)
    {
        int count = getLength(head, k);

        if (count == k)
        {
            ListNode *next = nodeArr[nodeCnt - 1]->next;
            for (int i = nodeCnt - k, j = nodeCnt - 1; i < j; ++i, --j)
            {
                ListNode *temp = nodeArr[i];
                nodeArr[i] = nodeArr[j];
                nodeArr[j] = temp;
            }
            if (next != NULL) recur(next, k);
        }
    }

    ListNode *swapPairs(ListNode *head)
    {
        if(head == NULL || head->next == NULL) return head;
        nodeCnt = 0;
        recur(head, 2);
        for (int i = 0; i < nodeCnt - 1; ++i)
        {
            ListNode *curr = nodeArr[i];
            curr->next = nodeArr[i + 1];
        }
        nodeArr[nodeCnt - 1]->next = NULL;
        return nodeArr[0];
    }
};


// Source https://leetcode.com/problems/reverse-nodes-in-k-group/

Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.

 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]
Example 2:


Input: head = [1,2,3,4,5], k = 3
Output: [3,2,1,4,5]
 

Constraints:

The number of nodes in the list is n.
1 <= k <= n <= 5000
0 <= Node.val <= 1000

class Solution
{
public:
    ListNode *nodeArr[10005];
    int nodeCnt;

    int getLength(ListNode *head, int k)
    {
        int ct = 0;
        while(head != NULL && ct < k)
        {
            nodeArr[nodeCnt++] = head;
            ct++;
            head = head->next;
        }
        return ct;
    }

    void recur(ListNode *head, int k)
    {
        int count = getLength(head, k);

        if (count == k)
        {
            ListNode *next = nodeArr[nodeCnt - 1]->next;
            for (int i = nodeCnt - k, j = nodeCnt - 1; i < j; ++i, --j)
            {
                ListNode *temp = nodeArr[i];
                nodeArr[i] = nodeArr[j];
                nodeArr[j] = temp;
            }
            if (next != NULL) recur(next, k);
        }
    }

    ListNode *reverseKGroup(ListNode *head, int k)
    {
        if(head == NULL || head->next == NULL) return head;
        nodeCnt = 0;
        recur(head, k);
        for (int i = 0; i < nodeCnt - 1; ++i)
        {
            ListNode *curr = nodeArr[i];
            curr->next = nodeArr[i + 1];
        }
        nodeArr[nodeCnt - 1]->next = NULL;
        return nodeArr[0];
    }
};


// Source https://leetcode.com/problems/remove-duplicates-from-sorted-array/

Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. 
The relative order of the elements should be kept the same.

Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. 
More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. 
It does not matter what you leave beyond the first k elements.

Return k after placing the final result in the first k slots of nums.

Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.

Custom Judge:

The judge will test your solution with the following code:

int[] nums = [...]; // Input array
int[] expectedNums = [...]; // The expected answer with correct length

int k = removeDuplicates(nums); // Calls your implementation

assert k == expectedNums.length;
for (int i = 0; i < k; i++) {
    assert nums[i] == expectedNums[i];
}
If all assertions pass, then your solution will be accepted.

 

Example 1:

Input: nums = [1,1,2]
Output: 2, nums = [1,2,_]
Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).
Example 2:

Input: nums = [0,0,1,1,1,2,2,3,3,4]
Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]
Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).
 

Constraints:

1 <= nums.length <= 3 * 104
-100 <= nums[i] <= 100
nums is sorted in non-decreasing order.

class Solution
{
public:
    int removeDuplicates(vector<int> &nums)
    {
        int i = 0, j = 0;
        int n = nums.size();
        while(j < n)
        {
            int val = nums[j];
            ++j;
            while(j < n && nums[j] == val) ++j;
            swap(nums[i], nums[j-1]);
            ++i;
        }
        return i;
    }
};


// Source https://leetcode.com/problems/remove-element/

Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The relative order of the elements may be changed.

Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. 
More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. 
It does not matter what you leave beyond the first k elements.

Return k after placing the final result in the first k slots of nums.

Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.

Custom Judge:

The judge will test your solution with the following code:

int[] nums = [...]; // Input array
int val = ...; // Value to remove
int[] expectedNums = [...]; // The expected answer with correct length.
                            // It is sorted with no values equaling val.

int k = removeElement(nums, val); // Calls your implementation

assert k == expectedNums.length;
sort(nums, 0, k); // Sort the first k elements of nums
for (int i = 0; i < actualLength; i++) {
    assert nums[i] == expectedNums[i];
}
If all assertions pass, then your solution will be accepted.

 

Example 1:

Input: nums = [3,2,2,3], val = 3
Output: 2, nums = [2,2,_,_]
Explanation: Your function should return k = 2, with the first two elements of nums being 2.
It does not matter what you leave beyond the returned k (hence they are underscores).
Example 2:

Input: nums = [0,1,2,2,3,0,4,2], val = 2
Output: 5, nums = [0,1,4,0,3,_,_,_]
Explanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.
Note that the five elements can be returned in any order.
It does not matter what you leave beyond the returned k (hence they are underscores).
 

Constraints:

0 <= nums.length <= 100
0 <= nums[i] <= 50
0 <= val <= 100

class Solution
{
public:
    int removeElement(vector<int> &nums, int val)
    {
        int n = nums.size();
        int i = 0, j = n - 1;
        while(i <= j)
        {
            for(; i <= j && nums[i] != val; ++i);
            if(i <= j && nums[i] == val)
            {
                for(; j >= i && nums[j] == val; --j);
                if (i < j)
                {
                    swap(nums[i], nums[j]);
                    --j;
                    ++i;
                }
            }
        }
        return i;
    }
};


// Source https://leetcode.com/problems/implement-strstr/

Implement strStr().

Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.

Clarification:

What should we return when needle is an empty string? This is a great question to ask during an interview.

For the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to C's strstr() and Java's indexOf().

 

Example 1:

Input: haystack = "hello", needle = "ll"
Output: 2
Example 2:

Input: haystack = "aaaaa", needle = "bba"
Output: -1
Example 3:

Input: haystack = "", needle = ""
Output: 0
 

Constraints:

0 <= haystack.length, needle.length <= 5 * 104
haystack and needle consist of only lower-case English characters.

class Solution
{
public:
    int strStr(string haystack, string needle)
    {
        int n1 = haystack.size();
        int n2 = needle.size();

        if(n2 == 0)
            return 0;
        if (n1 < n2) return -1;
        if (n1 == n2)
        {
            if (haystack == needle) return 0;
            else return -1;
        }

        auto idx = haystack.find(needle);
        if(idx == string :: npos)
        {
            return -1;
        }
        return idx;
    }
};

class Solution
{
public:
    int strStr(string haystack, string needle)
    {
        int n1 = haystack.size();
        int n2 = needle.size();

        if(n2 == 0)
            return 0;
        if (n1 < n2) return -1;
        if (n1 == n2)
        {
            if (haystack == needle) return 0;
            else return -1;
        }

        auto it = search(haystack.begin(), haystack.end(),
                         boyer_moore_horspool_searcher(needle.begin(), needle.end()));
        return it == haystack.end() ? -1 : it - haystack.begin();
    }
};


// Source https://leetcode.com/problems/divide-two-integers/

Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.

The integer division should truncate toward zero, which means losing its fractional part. For example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2.

Return the quotient after dividing dividend by divisor.

Note: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [−231, 231 − 1]. For this problem, if the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the quotient is strictly less than -231, then return -231.

 

Example 1:

Input: dividend = 10, divisor = 3
Output: 3
Explanation: 10/3 = 3.33333.. which is truncated to 3.
Example 2:

Input: dividend = 7, divisor = -3
Output: -2
Explanation: 7/-3 = -2.33333.. which is truncated to -2.
 

Constraints:

-231 <= dividend, divisor <= 231 - 1
divisor != 0

The idea is simple, Instead of reducing one by one we can reduce in power of twos. This concept is used in many algos like binary lifting etc.

We try to remove divisor * (highest power of 2 possible) . Once that is removeed we can only remove a power of two less than the power we just removed from the remaining number.

Make sure to use long long int for overflow prevention.

class Solution
{
public:
    int divide(int x, int y)
    {
        if (x == 0) return 0;
        int sign = ((x < 0) ^ (y < 0)) ? -1 : 1;

        long long int q = 0;

        long long int dividend = abs(x);
        long long int div = abs(y);

        for (int i = 31; i >= 0; i--)
        {
            if ( (div << i)  <= dividend)
            {
                q = q | (1LL << i);
                dividend = dividend - (div << i);
            }

            if (dividend < div)
                break;
        }

        q = sign * q;
        if (q < INT_MIN)
            return INT_MIN;

        if (q > INT_MAX)
            return INT_MAX;

        return q;
    }
};


// Source https://leetcode.com/problems/substring-with-concatenation-of-all-words/

You are given a string s and an array of strings words of the same length. Return all starting indices of substring(s) in s that is a concatenation of each word in words exactly once, in any order, 
and without any intervening characters.

You can return the answer in any order.

 

Example 1:

Input: s = "barfoothefoobarman", words = ["foo","bar"]
Output: [0,9]
Explanation: Substrings starting at index 0 and 9 are "barfoo" and "foobar" respectively.
The output order does not matter, returning [9,0] is fine too.
Example 2:

Input: s = "wordgoodgoodgoodbestword", words = ["word","good","best","word"]
Output: []
Example 3:

Input: s = "barfoofoobarthefoobarman", words = ["bar","foo","the"]
Output: [6,9,12]
 

Constraints:

1 <= s.length <= 104
s consists of lower-case English letters.
1 <= words.length <= 5000
1 <= words[i].length <= 30
words[i] consists of lower-case English letters.

class Solution
{
public:
    vector<int> findSubstring(string s, vector<string> &words)
    {
        int len_s = s.size();
        int len_ws = words.size();
        int len_w = words[0].size();
        int window_size = len_w * len_ws;
        if(len_s < window_size)
        {
            return vector<int> ();
        }

        unordered_map<string, int> str_count;
        unordered_map<string, int> str_clim;

        for(auto &w : words)
        {
            str_clim[w]++;
        }

        vector<int> result;
        for(int i = 0; i < len_w; i++)
        {
            str_count.clear();

            int mis_count = 0;
            int left = i, right = i;
            for(; right + len_w <= len_s; right += len_w)
            {
                if(str_clim.find(s.substr(right, len_w)) == str_clim.end())
                {
                    mis_count ++;
                }
                else
                {
                    str_count[s.substr(right, len_w)]++;
                }

                if(right - left >= window_size)
                {
                    if(str_clim.find(s.substr(left, len_w)) == str_clim.end())
                    {
                        mis_count -- ;
                    }
                    else
                    {
                        str_count[s.substr(left, len_w)]--;
                    }
                    left += len_w;
                }

                if(mis_count)
                {
                    continue;
                }

                int count = 0;
                for(auto &x : str_clim)
                {
                    count += ((str_count[x.first] == x.second) ? x.second : 0);
                }

                if(count == len_ws)
                {
                    result.push_back(left);
                }
            }
        }

        return result;
    }
};


// Source https://leetcode.com/problems/next-permutation/

A permutation of an array of integers is an arrangement of its members into a sequence or linear order.

For example, for arr = [1,2,3], the following are considered permutations of arr: [1,2,3], [1,3,2], [3,1,2], [2,3,1].
The next permutation of an array of integers is the next lexicographically greater permutation of its integer. 
More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, 
then the next permutation of that array is the permutation that follows it in the sorted container. 
If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).

For example, the next permutation of arr = [1,2,3] is [1,3,2].
Similarly, the next permutation of arr = [2,3,1] is [3,1,2].
While the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.
Given an array of integers nums, find the next permutation of nums.

The replacement must be in place and use only constant extra memory.

 

Example 1:

Input: nums = [1,2,3]
Output: [1,3,2]
Example 2:

Input: nums = [3,2,1]
Output: [1,2,3]
Example 3:

Input: nums = [1,1,5]
Output: [1,5,1]
 

Constraints:

1 <= nums.length <= 100
0 <= nums[i] <= 100

class Solution
{
    void reverse(vector<int> &v, int start, int end)
    {
        while(start < end)
        {
            swap(v[start++], v[end--]);
        }
    }

    int justGreaterIndexAtRight(vector<int> &v, int number, int terminationIndex)
    {
        int n = v.size(), i = n - 1;
        while(i >= terminationIndex)
        {
            if(v[i] > number) return i;
            i--;
        }
        return -1;
    }

public:
    void nextPermutation(vector<int> &nums)
    {
        int n = nums.size(), i = n - 1;

        while(i > 0 && nums[i - 1] >= nums[i])
        {
            i--;
        }
        if(i == 0)
        {
            reverse(nums, 0, n - 1);
            return;
        }

        int left = i - 1, cur = i, right = justGreaterIndexAtRight(nums, nums[left], cur);

        swap(nums[left], nums[right]);
        reverse(nums, cur, n - 1);
    }
};


// Source https://leetcode.com/problems/longest-valid-parentheses/

Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.

 

Example 1:

Input: s = "(()"
Output: 2
Explanation: The longest valid parentheses substring is "()".
Example 2:

Input: s = ")()())"
Output: 4
Explanation: The longest valid parentheses substring is "()()".
Example 3:

Input: s = ""
Output: 0
 

Constraints:

0 <= s.length <= 3 * 104
s[i] is '(', or ')'.

class Solution
{
public:
    int longestValidParentheses(string s)
    {
        int n = s.size();
        vector<int> st;
        st.reserve(n);

        int res = 0;
        for(int i = 0; i < n; i++)
        {
            if(s[i] == '(')
            {
                st.push_back(i);
            }
            else
            {
                if(!st.empty() && s[st.back()] == '(')
                    st.pop_back();
                else
                    st.push_back(i);
            }
            if(st.empty())
                res = max(res, i + 1);
            else
                res = max(res, i - st.back());
        }
        return res;
    }
};


// Source https://leetcode.com/problems/search-in-rotated-sorted-array/

There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) 
such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). 
For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
Example 3:

Input: nums = [1], target = 0
Output: -1
 

Constraints:

1 <= nums.length <= 5000
-104 <= nums[i] <= 104
All values of nums are unique.
nums is an ascending array that is possibly rotated.
-104 <= target <= 104

0　　1　　2　　 4　　5　　6　　7
7　　0　　1　　 2　　4　　5　　6
6　　7　　0　　 1　　2　　4　　5
5　　6　　7　　 0　　1　　2　　4
4　　5　　6　　7　　0　　1　　2
2　　4　　5　　6　　7　　0　　1
1　　2　　4　　5　　6　　7　　0

class Solution
{
public:
    int search(vector<int> &nums, int target)
    {
        int n = nums.size();
        if (nums[0] == target) return 0;
        if (n == 1) return -1;
        if (nums[0] < nums[n-1] || nums[0] > nums[1])
        {
            auto itr = lower_bound(nums.begin()+1, nums.end(), target);
            if (itr != nums.end() && *itr == target) return itr - nums.begin();
            else return -1;
        }
        int low = 1, high = n - 2;
        int idx = 1;
        while (low <= high)
        {
            int mid = (low + high) / 2;
            if (nums[mid] > nums[0] && nums[mid] > nums[n - 1])
            {
                idx = mid;
                low = mid + 1;
            }
            else
            {
                high = mid - 1;
            }
        }
        auto itrEnd = nums.begin() + idx + 1;
        auto itr1 = lower_bound(nums.begin(), itrEnd, target);
        if (itr1 != itrEnd && *itr1 == target) return itr1 - nums.begin();
        auto itr2 = lower_bound(itrEnd, nums.end(), target);
        if (itr2 != nums.end() && *itr2 == target) return itr2 - nums.begin();
        return -1;
    }
};


// Source https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/

Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]
 

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109
nums is a non-decreasing array.
-109 <= target <= 109

class Solution
{
public:
    vector<int> searchRange(vector<int> &nums, int target)
    {
        auto startPosItr = lower_bound(nums.begin(), nums.end(), target);
        auto endPosItr = upper_bound(nums.begin(), nums.end(), target);

        if(startPosItr == endPosItr) return {-1, -1};

        int startPos = startPosItr - nums.begin();
        int endPos = (endPosItr - nums.begin()) - 1;

        return {startPos, endPos};
    }
};


// Source https://leetcode.com/problems/search-insert-position/

Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [1,3,5,6], target = 5
Output: 2
Example 2:

Input: nums = [1,3,5,6], target = 2
Output: 1
Example 3:

Input: nums = [1,3,5,6], target = 7
Output: 4
 

Constraints:

1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums contains distinct values sorted in ascending order.
-104 <= target <= 104

class Solution
{
public:
    int searchInsert(vector<int> &nums, int target)
    {
        return lower_bound(nums.begin(), nums.end(), target) - nums.begin();
    }
};


// Source https://leetcode.com/problems/valid-sudoku/

Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:

A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.
 

Example 1:


Input: board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: true
Example 2:

Input: board = 
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: false
Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.
 

Constraints:

board.length == 9
board[i].length == 9
board[i][j] is a digit 1-9 or '.'.

class Solution
{
public:

    bool isvalid(char c, int i, int j, vector<vector<char>> &board)
    {
        for(int k = 0; k < 9; k++)
        {
            if(k != j && board[i][k] == c)return false;
            if(k != i && board[k][j] == c)return false;
            int l = 3 * (i / 3) + (k / 3);
            int r = 3 * (j / 3) + (k % 3);
            if(l == i && r == j)continue;
            else
            {
                if(board[l][r] == c)return false;
            }
        }
        return true;
    }
    bool isValidSudoku(vector<vector<char>> &board)
    {
        for(int i = 0; i < 9; i++)
        {
            for(int j = 0; j < 9; j++)
            {
                if(board[i][j] != '.')
                {
                    char c = board[i][j];
                    if(!isvalid(c, i, j, board))
                    {
                        return false;
                    }
                }
            }
        }
        return true;
    }
};


// Source https://leetcode.com/problems/sudoku-solver/

Write a program to solve a Sudoku puzzle by filling the empty cells.

A sudoku solution must satisfy all of the following rules:

Each of the digits 1-9 must occur exactly once in each row.
Each of the digits 1-9 must occur exactly once in each column.
Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.
The '.' character indicates empty cells.

 

Example 1:


Input: board = [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]
Output: [["5","3","4","6","7","8","9","1","2"],["6","7","2","1","9","5","3","4","8"],["1","9","8","3","4","2","5","6","7"],["8","5","9","7","6","1","4","2","3"],["4","2","6","8","5","3","7","9","1"],["7","1","3","9","2","4","8","5","6"],["9","6","1","5","3","7","2","8","4"],["2","8","7","4","1","9","6","3","5"],["3","4","5","2","8","6","1","7","9"]]
Explanation: The input board is shown above and the only valid solution is shown below:


 

Constraints:

board.length == 9
board[i].length == 9
board[i][j] is a digit or '.'.
It is guaranteed that the input board has only one solution.

class Solution
{
public:
    void solveSudoku(vector<vector<char>> &board)
    {
        solve(board);
    }
    bool solve(vector<vector<char>> &board)
    {
        for(int row = 0; row < 9; row++)
        {
            for(int col = 0; col < 9; col++)
            {
                if(board[row][col] == '.')
                {
                    for(char c = '1'; c <= '9'; c++)
                    {
                        if(isValid(board, row, col, c) == true)
                        {
                            board[row][col] = c;
                            if(solve(board) == true) return true;
                            else board[row][col] = '.';
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }
    bool isValid(vector<vector<char>> &board, int row, int col, char c)
    {
        for(int i = 0; i < 9; i++)
        {
            if(board[i][col] == c) return false;
            if(board[row][i] == c) return false;
        }
        int sr = (row / 3) * 3;
        int sc = (col / 3) * 3;
        for(int i = sr; i < sr + 3; i++)
        {
            for(int j = sc; j < sc + 3; j++)
            {
                if(board[i][j] == c) return false;
            }
        }
        return true;
    }
};


// Source https://leetcode.com/problems/count-and-say/

The count-and-say sequence is a sequence of digit strings defined by the recursive formula:

countAndSay(1) = "1"
countAndSay(n) is the way you would "say" the digit string from countAndSay(n-1), which is then converted into a different digit string.
To determine how you "say" a digit string, split it into the minimal number of groups so that each group is a contiguous section all of the same character. 
Then for each group, say the number of characters, then say the character. To convert the saying into a digit string, replace the counts with a number and concatenate every saying.

For example, the saying and conversion for digit string "3322251":


Given a positive integer n, return the nth term of the count-and-say sequence.

题意是n=1时输出字符串1；n=2时，数上次字符串中的数值个数，因为上次字符串有1个1，所以输出11；
n=3时，由于上次字符是11，有2个1，所以输出21；n=4时，由于上次字符串是21，有1个2和1个1，所以输出1211。
依次类推，写个countAndSay(n)函数返回字符串。

Example 1:

Input: n = 1
Output: "1"
Explanation: This is the base case.
Example 2:

Input: n = 4
Output: "1211"
Explanation:
countAndSay(1) = "1"
countAndSay(2) = say "1" = one 1 = "11"
countAndSay(3) = say "11" = two 1's = "21"
countAndSay(4) = say "21" = one 2 + one 1 = "12" + "11" = "1211"
 

Constraints:

1 <= n <= 30

class Solution
{
public:
    string convert(string s)
    {
        int n = s.size();
        string ans = "";
        int cnt = 1;
        for (int i = 1; i < n; i++)
        {
            if(s[i] == s[i - 1])
            {
                cnt++;
            }
            else
            {
                ans += char(cnt + '0');
                ans += s[i - 1];
                cnt = 1;
            }
        }
        if(cnt > 0)
        {
            ans += char(cnt + '0');
            ans += s[n - 1];
        }
        return ans;
    }
    string countAndSay(int n)
    {
        if(n == 1)
        {
            return "1";
        }
        string s = countAndSay(n - 1);
        return convert(s);
    }
};


// Source https://leetcode.com/problems/combination-sum/

Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. 
You may return the combinations in any order.

The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.

It is guaranteed that the number of unique combinations that sum up to target is less than 150 combinations for the given input.

 

Example 1:

Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]
Explanation:
2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
7 is a candidate, and 7 = 7.
These are the only two combinations.
Example 2:

Input: candidates = [2,3,5], target = 8
Output: [[2,2,2,2],[2,3,3],[3,5]]
Example 3:

Input: candidates = [2], target = 1
Output: []
 

Constraints:

1 <= candidates.length <= 30
1 <= candidates[i] <= 200
All elements of candidates are distinct.
1 <= target <= 500

class Solution
{
public:
    int n;

    void generate(vector<int> &arr, int target, vector<vector<int>> &ans, vector<int> &cur, int index, int sum)
    {
        if(sum >= target)
        {
            if(sum == target)
            {
                ans.push_back(cur);
            }
            return;
        }

        for(int i = index; i < n; i++)
        {
            if(sum + arr[i] > target)
                break;
            if(i == index || arr[i] != arr[i - 1])
            {
                cur.push_back(arr[i]);
                generate(arr, target, ans, cur, i, sum + arr[i]);
                cur.pop_back();
            }
        }
    }

    vector<vector<int>> combinationSum(vector<int> &arr, int target)
    {
        sort(arr.begin(), arr.end());
        n = arr.size();
        vector<vector<int>>ans;
        vector<int> cur;
        generate(arr, target, ans, cur, 0, 0);
        return ans;
    }
};


// Source https://leetcode.com/problems/combination-sum-ii/

Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.

Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.

 

Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]
Example 2:

Input: candidates = [2,5,2,1,2], target = 5
Output: 
[
[1,2,2],
[5]
]
 

Constraints:

1 <= candidates.length <= 100
1 <= candidates[i] <= 50
1 <= target <= 30

class Solution
{
public:
    int n;

    void generate(vector<int> &arr, int target, vector<vector<int>> &ans, vector<int> &cur, int index, int sum)
    {
        if(sum >= target)
        {
            if(sum == target)
            {
                ans.push_back(cur);
            }
            return;
        }

        for(int i = index; i < n; i++)
        {
            if(sum + arr[i] > target)
                break;
            if(i == index || arr[i] != arr[i - 1])
            {
                cur.push_back(arr[i]);
                generate(arr, target, ans, cur, i + 1, sum + arr[i]);
                cur.pop_back();
            }
        }
    }

    vector<vector<int>> combinationSum2(vector<int> &arr, int target)
    {
        sort(arr.begin(), arr.end());
        n = arr.size();
        vector<vector<int>>ans;
        vector<int> cur;
        generate(arr, target, ans, cur, 0, 0);
        return ans;
    }
};


// Source https://leetcode.com/problems/first-missing-positive/

Given an unsorted integer array nums, return the smallest missing positive integer.

You must implement an algorithm that runs in O(n) time and uses constant extra space.

 

Example 1:

Input: nums = [1,2,0]
Output: 3
Example 2:

Input: nums = [3,4,-1,1]
Output: 2
Example 3:

Input: nums = [7,8,9,11,12]
Output: 1
 

Constraints:

1 <= nums.length <= 5 * 105
-231 <= nums[i] <= 231 - 1

class Solution
{
public:
    int firstMissingPositive(vector<int> &nums)
    {
        sort(nums.begin(), nums.end());
        int n = nums.size();
        int i = 0;
        for(; i < n && nums[i] <= 0; ++i);
        int ans = 1;
        while(i < n)
        {
            if(nums[i] != ans) break;
            ++i;
            for(; i < n && nums[i] == nums[i-1]; ++i);
            ++ans;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/trapping-rain-water/

Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

 

Example 1:


Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
Example 2:

Input: height = [4,2,0,3,2,5]
Output: 9
 

Constraints:

n == height.length
1 <= n <= 2 * 104
0 <= height[i] <= 105

class Solution
{
public:
    int trap(vector<int> &height)
    {
        int n = height.size();

        vector<int> leftMax(n);
        leftMax[0] = height[0];
        int maxVal = height[0];

        for(int i = 1; i < n; i++)
        {
            if(height[i] > maxVal)
                maxVal = height[i];
            leftMax[i] = maxVal;
        }

        vector<int> rightMax(n);
        rightMax[n - 1] = height[n - 1];
        maxVal = height[n - 1];

        for(int i = n - 2; i >= 0; i--)
        {
            if(height[i] > maxVal)
                maxVal = height[i];
            rightMax[i] = maxVal;
        }

        int sum = 0;
        for(int i = 1; i < n - 1; i++)
        {
            sum += min(leftMax[i], rightMax[i]) - height[i];
        }
        return sum;
    }
};


// Source https://leetcode.com/problems/multiply-strings/

Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.

Note: You must not use any built-in BigInteger library or convert the inputs to integer directly.

 

Example 1:

Input: num1 = "2", num2 = "3"
Output: "6"
Example 2:

Input: num1 = "123", num2 = "456"
Output: "56088"
 

Constraints:

1 <= num1.length, num2.length <= 200
num1 and num2 consist of digits only.
Both num1 and num2 do not contain any leading zero, except the number 0 itself.
      81
    81
    81
  81
  9801

class Solution
{
public:
    string multiply(string A, string B)
    {
        int n = A.length(), m = B.length();
        string res(n + m, '0');

        for(int i = n - 1; i >= 0; i--)
        {
            for(int j = m - 1; j >= 0; j--)
            {
                int num = (A[i] - '0') * (B[j] - '0');
                int idx = i + j + 1;
                while (num > 0)
                {
                   int val = num + (res[idx] - '0');
                   res[idx] = val % 10 + '0';
                   num = val / 10;
                    --idx;
                }
            }
        }
        for(int i = 0; i < res.length(); i++) if(res[i] != '0') return res.substr(i);
        return "0";
    }
};


// Source https://leetcode.com/problems/wildcard-matching/

Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:

'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).
The matching should cover the entire input string (not partial).

 

Example 1:

Input: s = "aa", p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".
Example 2:

Input: s = "aa", p = "*"
Output: true
Explanation: '*' matches any sequence.
Example 3:

Input: s = "cb", p = "?a"
Output: false
Explanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.
 

Constraints:

0 <= s.length, p.length <= 2000
s contains only lowercase English letters.
p contains only lowercase English letters, '?' or '*'.

class Solution
{
public:
    int m, n;
    vector<vector<int>> dp;
    bool solve(int i, int j, string &s, string &p)
    {
        if(i == m && j == n) return true;
        if(j == n)
        {
            return false;
        }
        if(i == m)
        {
            if(p[j] == '*') return solve(i, j + 1, s, p);
            return false;
        }
        if(dp[i][j] != -1) return dp[i][j];
        if(s[i] == p[j] || p[j] == '?')
        {
            return dp[i][j] = solve(i + 1, j + 1, s, p);
        }
        if(p[j] != '*') return dp[i][j] = false;
        bool l = solve(i, j + 1, s, p);
        if(l) return dp[i][j] = true;
        return dp[i][j] = solve(i + 1, j, s, p);        
    }

    bool isMatch(string s, string p)
    {
        m = s.size();
        n = p.size();
        dp = vector<vector<int>>(m + 1, vector<int>(n + 1, -1));
        return solve(0, 0, s, p);
    }
};


// Source https://leetcode.com/problems/jump-game-ii/

Given an array of non-negative integers nums, you are initially positioned at the first index of the array.

Each element in the array represents your maximum jump length at that position.

Your goal is to reach the last index in the minimum number of jumps.

You can assume that you can always reach the last index.

 

Example 1:

Input: nums = [2,3,1,1,4]
Output: 2
Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.
Example 2:

Input: nums = [2,3,0,1,4]
Output: 2
 

Constraints:

1 <= nums.length <= 104
0 <= nums[i] <= 1000

class Solution
{
public:

    int jump(vector<int> &nums)
    {
        int n = nums.size();
        if (n == 1) return 0;
        int farthest = 0 + nums[0], current = farthest, jumps = 1;

        for(int i = 1; i < n - 1; i++)
        {
            farthest = max(farthest, nums[i] + i);
            if(i == current)
            {
                current = farthest;
                jumps++;
            }
        }
        return jumps;
    }
};


// Source https://leetcode.com/problems/permutations/

Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]
 

Constraints:

1 <= nums.length <= 6
-10 <= nums[i] <= 10
All the integers of nums are unique.

class Solution
{
public:
    vector<vector<int>> permute(vector<int> &nums)
    {
        vector<vector<int>> result;
        sort(nums.begin(), nums.end());

        do
        {
            result.push_back(nums);
        }
        while (next_permutation(nums.begin(), nums.end()));

        return result;
    }
};


// Source https://leetcode.com/problems/permutations-ii/

Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.

 

Example 1:

Input: nums = [1,1,2]
Output:
[[1,1,2],
 [1,2,1],
 [2,1,1]]
Example 2:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
 

Constraints:

1 <= nums.length <= 8
-10 <= nums[i] <= 10

class Solution
{
public:
    vector<vector<int>> permuteUnique(vector<int> &nums)
    {
        vector<vector<int>> result;
        sort(nums.begin(), nums.end());

        do
        {
            result.push_back(nums);
        }
        while (next_permutation(nums.begin(), nums.end()));

        return result;
    }
};


// Source https://leetcode.com/problems/rotate-image/

You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).

You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.

 

Example 1:


Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[7,4,1],[8,5,2],[9,6,3]]
Example 2:


Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]
Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]
 

Constraints:

n == matrix.length == matrix[i].length
1 <= n <= 20
-1000 <= matrix[i][j] <= 1000

1   2   3		1   4   7		7   4   1
4   5   6		2   5   8		8   5   2
7   8   9		3   6   9		9   6   3

class Solution
{
public:
    void rotate(vector<vector<int>> &matrix)
    {
        int n = matrix.size();
        // first transformation
        for (int i = 0; i < n; i++)
        {
            for (int j = i + 1; j < n; j++)
            {
                int temp = matrix[i][j];
                matrix[i][j] = matrix[j][i];
                matrix[j][i] = temp;
            }
        }

        // second transformation
        for (int j = 0; j < n / 2; j++)
        {
            for (int i = 0; i < n; i++)
            {
                int temp = matrix[i][j];
                matrix[i][j] = matrix[i][n - j - 1];
                matrix[i][n - j - 1] = temp;
            }
        }
    }
};


// Source https://leetcode.com/problems/group-anagrams/

Given an array of strings strs, group the anagrams together. You can return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

 

Example 1:

Input: strs = ["eat","tea","tan","ate","nat","bat"]
Output: [["bat"],["nat","tan"],["ate","eat","tea"]]
Example 2:

Input: strs = [""]
Output: [[""]]
Example 3:

Input: strs = ["a"]
Output: [["a"]]
 

Constraints:

1 <= strs.length <= 104
0 <= strs[i].length <= 100
strs[i] consists of lowercase English letters.

class Solution
{
public:
    vector<vector<string>> groupAnagrams(vector<string> &strs)
    {
        map<vector<int>, vector<string>> mpp;

        for(int i = 0; i < strs.size(); i++)
        {
            vector<int> v(26, 0); //store the occurences of chars

            for(int j = 0; j < strs[i].size(); j++)
            {
                v[strs[i][j] - 'a']++;
            }

            mpp[v].push_back(strs[i]); //push the key and val as stored occurences and string
        }

        vector<vector<string>> ans;
        for(auto &it : mpp)
        {
            ans.push_back(it.second); //push the string vector into the ans
        }

        return ans;
    }
};


// Source https://leetcode.com/problems/powx-n/

Implement pow(x, n), which calculates x raised to the power n (i.e., xn).

 

Example 1:

Input: x = 2.00000, n = 10
Output: 1024.00000
Example 2:

Input: x = 2.10000, n = 3
Output: 9.26100
Example 3:

Input: x = 2.00000, n = -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25
 

Constraints:

-100.0 < x < 100.0
-231 <= n <= 231-1
-104 <= xn <= 104

class Solution
{
public:
    double pow(double x, long long n)
    {
        double res = 1;
        while(n > 0)
        {
            if(n & 1) res *= x;
            x *= x;
            n >>= 1;
        }
        return res;
    }
    double myPow(double x, int n)
    {
        long long cnt = n;
        if(cnt < 0)
        {
            return 1 / pow(x, -cnt);
        }
        else return pow(x, cnt);
    }
};


// Source https://leetcode.com/problems/n-queens/

The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.

 

Example 1:


Input: n = 4
Output: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above
Example 2:

Input: n = 1
Output: [["Q"]]
 

Constraints:

1 <= n <= 9

class Solution
{
public:
    vector<vector<string>> result;
    vector<vector<string>> solveNQueens(int n)
    {
        vector<string> originalBoard = vector<string>(n, string(n, '.'));

        placeQueens(0, n, originalBoard);
        return result;
    }

    void placeQueens(int row, int n, vector<string> &board)
    {
        if(row == n)
        {
            result.push_back(board);
            return;
        }

        for(int j = 0; j < n; j++)
        {
            if(isSafeForQueen(row, j, n, board))
            {
                board[row][j] = 'Q';
                placeQueens(row + 1, n, board);
                board[row][j] = '.';
            }
        }
        return;
    }

    bool isSafeForQueen(int row, int col, int n, vector<string> &board)
    {
        //Check up
        for(int i = 0; i < row; i++)
        {
            if(board[i][col] == 'Q') return false;
        }

        //Check left diag
        for(int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--)
        {
            if(board[i][j] == 'Q') return false;
        }

        //Check right diag
        for(int i = row - 1, j = col + 1; i >= 0 && j < n; i--, j++)
        {
            if(board[i][j] == 'Q') return false;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/n-queens-ii/

The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return the number of distinct solutions to the n-queens puzzle.

 

Example 1:


Input: n = 4
Output: 2
Explanation: There are two distinct solutions to the 4-queens puzzle as shown.
Example 2:

Input: n = 1
Output: 1
 

Constraints:

1 <= n <= 9

class Solution
{
public:
    int totalNQueens(int n)
    {
        int chessboard[9][9];
        memset(chessboard, -1, sizeof(chessboard));

        int total = 0;
        NQueens(chessboard, n, 0, total);

        return total;
    }

    void NQueens(int chessboard[][9], int n, int row, int &total)
    {
        if(row == n)
        {
            total++;
            return;
        }

        for(int col = 0; col < n; ++col)
        {
            if(IsQueenSafe(chessboard, row, col, n) == true)
            {
                chessboard[row][col] = 0;
                NQueens(chessboard, n, row + 1, total);
                chessboard[row][col] = -1;
            }
        }
    }

    bool IsQueenSafe(int chessboard[][9], int row, int col, int n)
    {
        for(int i = row - 1, j = col; i >= 0; --i)
        {
            if(chessboard[i][j] == 0)
                return false;
        }

        for(int i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j)
        {
            if(chessboard[i][j] == 0)
                return false;
        }

        for(int i = row - 1, j = col + 1; i >= 0 && j <= (n - 1); --i, ++j)
        {
            if(chessboard[i][j] == 0)
                return false;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/maximum-subarray/

Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Example 2:

Input: nums = [1]
Output: 1
Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104

class Solution
{
public:
    int maxSubArray(vector<int> &nums)
    {
        int n = nums.size();
        vector<int> dp(n);
        dp[0] = nums[0];
        int res = dp[0];

        for(int i = 1; i < n; ++i)
        {
            dp[i] = max(nums[i], nums[i] + dp[i - 1]);
            res = max(res, dp[i]);
        }

        return res;
    }
};


// Source https://leetcode.com/problems/spiral-matrix/

Given an m x n matrix, return all elements of the matrix in spiral order.

 

Example 1:


Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]
Example 2:


Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 10
-100 <= matrix[i][j] <= 100

class Solution
{
public:
    vector<int> spiralOrder(vector<vector<int>> &matrix)
    {
        vector<int> ans;
        int row = matrix.size();
        int col = matrix[0].size();

        int startingrow = 0;
        int startingcol = 0;
        int endingrow = row - 1;
        int endingcol = col - 1;

        int count = 0;
        int total = col * row;
        while(count < total)
        {
            for(int i = startingcol; count < total && i <= endingcol; i++ )
            {
                ans.push_back(matrix[startingrow][i]);
                count++;
            }
            startingrow++;

            for(int i = startingrow; count < total && i <= endingrow; i++)
            {
                ans.push_back(matrix[i][endingcol]);
                count++;
            }
            endingcol--;

            for(int i = endingcol; count < total && i >= startingcol; i--)
            {
                ans.push_back(matrix[endingrow][i]);
                count++;
            }
            endingrow--;

            for(int i = endingrow; count < total && i >= startingrow; i--)
            {

                ans.push_back(matrix[i][startingcol]);
                count++;
            }
            startingcol++;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/jump-game/

You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.

Return true if you can reach the last index, or false otherwise.

 

Example 1:

Input: nums = [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.
Example 2:

Input: nums = [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.
 

Constraints:

1 <= nums.length <= 104
0 <= nums[i] <= 105

class Solution
{
public:
    bool canJump(vector<int> &nums)
    {
        int n = nums.size();
        if (n == 1) return true;
        int farthest = 0 + nums[0];
        int i = 1;
        for(; i < n && i <= farthest; ++i)
        {
            farthest = max(farthest, nums[i] + i);
        }
        return i == n;
    }
};


// Source https://leetcode.com/problems/merge-intervals/

Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

 

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
 

Constraints:

1 <= intervals.length <= 104
intervals[i].length == 2
0 <= starti <= endi <= 104

class Solution
{
public:
    vector<vector<int>> merge(vector<vector<int>> &intervals)
    {
        if(intervals.size() < 2)
        {
            return intervals;
        }
        vector<vector<int>> ans;
        sort(intervals.begin(), intervals.end());
        vector<int> temp = intervals[0];
        int i = 1;
        int n = intervals.size();
        for (; i < n; ++i)
        {
            if(intervals[i][0] > temp[1])
            {
                ans.push_back(temp);
                temp[0] = intervals[i][0];
                temp[1] = intervals[i][1];
            }
            else
            {
                temp[1] = max(temp[1], intervals[i][1]);
            }
        }
        ans.push_back(temp);
        return ans;
    }
};


// Source https://leetcode.com/problems/insert-interval/

You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. 
You are also given an interval newInterval = [start, end] that represents the start and end of another interval.

Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).

Return intervals after the insertion.

 

Example 1:

Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
Output: [[1,5],[6,9]]
Example 2:

Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
Output: [[1,2],[3,10],[12,16]]
Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].
 

Constraints:

0 <= intervals.length <= 104
intervals[i].length == 2
0 <= starti <= endi <= 105
intervals is sorted by starti in ascending order.
newInterval.length == 2
0 <= start <= end <= 105

class Solution
{
public:
    vector<vector<int>> insert(vector<vector<int>> &intervals, vector<int> &newInterval)
    {
        vector<vector<int>> res;
        int n = intervals.size();
        if (n == 0)
        {
            res.push_back(newInterval);
            return res;
        }
        int i = 0;
        while(i < n && intervals[i][1] < newInterval[0])
        {
            res.push_back(intervals[i]);
            i++;
        }
        if (i == n)
        {
            res.push_back(newInterval);
            return res;
        }
        if(newInterval[1] < intervals[i][0])
        {
            res.push_back(newInterval);
            for(; i < n; ++i) res.push_back(intervals[i]);
            return res;
        }
        vector<int> temp = intervals[i];
        temp[0] = min(temp[0], newInterval[0]);
        temp[1] = max(temp[1], newInterval[1]);
        ++i;
        for(; i < n; ++i)
        {
            if(temp[1] < intervals[i][0])
            {
                res.push_back(temp);
                break;
            }
            else
            {
                temp[1] = max(temp[1], intervals[i][1]);
            }
        }
        if (i == n)
        {
            res.push_back(temp);
            return res;
        }
        for(; i < n; ++i)
        {
            res.push_back(intervals[i]);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/length-of-last-word/

Given a string s consisting of some words separated by some number of spaces, return the length of the last word in the string.

A word is a maximal substring consisting of non-space characters only.

 

Example 1:

Input: s = "Hello World"
Output: 5
Explanation: The last word is "World" with length 5.
Example 2:

Input: s = "   fly me   to   the moon  "
Output: 4
Explanation: The last word is "moon" with length 4.
Example 3:

Input: s = "luffy is still joyboy"
Output: 6
Explanation: The last word is "joyboy" with length 6.
 

Constraints:

1 <= s.length <= 104
s consists of only English letters and spaces ' '.
There will be at least one word in s.

class Solution
{
public:
    int lengthOfLastWord(string s)
    {
        int length = 0;
        for (int i = s.size() - 1; i >= 0; i--)
        {
            if (s[i] != ' ')
            {
                length++;
            }
            if (s[i] == ' ' && length > 0)
            {
                break;
            }
        }
        return length;
    }
};


// Source https://leetcode.com/problems/spiral-matrix-ii/

Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.

 

Example 1:


Input: n = 3
Output: [[1,2,3],[8,9,4],[7,6,5]]
Example 2:

Input: n = 1
Output: [[1]]
 

Constraints:

1 <= n <= 20

class Solution
{
public:
    vector<vector<int>> generateMatrix(int n)
    {
        vector<vector<int>>dp( n, vector<int>(n) );
        int r_start = 0, c_start = 0, r_end = n - 1, c_end = n - 1;
        int a = 1;
        int total = n * n;
        while(a <= total)
        {
            for(int i = c_start; a <= total && i <= c_end; i++)
            {
                dp[r_start][i] = a++;   //Horizontal  forward -->
            }
            r_start++;

            for(int i = r_start; a <= total && i <= r_end; i++)
            {
                dp[i][c_end] = a++;   //Vertically Down
            }
            c_end--;

            for(int i = c_end; a <= total && i >= c_start; i--)
            {
                dp[r_end][i] = a++;   //Horizontal  Backward  <--
            }
            r_end--;

            for(int i = r_end; a <= total && i >= r_start; i--)
            {
                dp[i][c_start] = a++;   //Vertically Up
            }
            c_start++;
        }

        return dp;
    }
};


// Source https://leetcode.com/problems/permutation-sequence/

The set [1, 2, 3, ..., n] contains a total of n! unique permutations.

By listing and labeling all of the permutations in order, we get the following sequence for n = 3:

"123"
"132"
"213"
"231"
"312"
"321"
Given n and k, return the kth permutation sequence.

 

Example 1:

Input: n = 3, k = 3
Output: "213"
Example 2:

Input: n = 4, k = 9
Output: "2314"
Example 3:

Input: n = 3, k = 1
Output: "123"
 

Constraints:

1 <= n <= 9
1 <= k <= n!

class Solution
{
public:
    int fact[12];

    void fun()
    {
        fact[0] = 1;
        fact[1] = 1;
        for(int i = 2; i <= 11; i++)
        {
            fact[i] = i * fact[i - 1];
        }
    }

    string getPermutation(int n, int k)
    {
        fun();

        string temp(n, '0');
        for(int i = 1; i <= n; i++)
        {
            temp[i-1] = i + '0';
        }

        string ans = "";
        k--;
        for(int i = 1; i <= n; i++)
        {
            int index = (k / fact[n - i]);
            ans.push_back(temp[index]);
            temp.erase(temp.begin() + index);
            k = k - (index) * fact[n - i];
        }

        return ans;
    }
};


// Source https://leetcode.com/problems/rotate-list/

Given the head of a linked list, rotate the list to the right by k places.

 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]
Example 2:


Input: head = [0,1,2], k = 4
Output: [2,0,1]
 

Constraints:

The number of nodes in the list is in the range [0, 500].
-100 <= Node.val <= 100
0 <= k <= 2 * 109

class Solution
{
private:
    int get_len(ListNode *head)
    {
        int res = 0;
        while(head)
        {
            res++;
            head = head->next;
        }
        return res;
    }

public:
    ListNode *rotateRight(ListNode *head, int k)
    {
        if(head == NULL)
            return NULL;

        int len = get_len(head);
        k = k % len;
        if (k == 0)
        {
            return head;
        }

        ListNode *end = head;
        for(int i = 0 ; i < k ; i ++)
            end = end->next;

        ListNode *start = head;
        while(end->next != NULL)
        {
            start = start->next;
            end = end->next;
        }

        ListNode *newHead = start->next;
        end->next = head;
        start->next = NULL;

        return newHead;
    }
};


// Source https://leetcode.com/problems/unique-paths/

There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). 
The robot can only move either down or right at any point in time.

Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The test cases are generated so that the answer will be less than or equal to 2 * 109.

 

Example 1:


Input: m = 3, n = 7
Output: 28
Example 2:

Input: m = 3, n = 2
Output: 3
Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Down -> Down
2. Down -> Down -> Right
3. Down -> Right -> Down
 

Constraints:

1 <= m, n <= 100

class Solution
{
public:
    vector<vector<int>> dp;

    int helper(int m, int n)
    {
        if(m == 0 && n == 0)
        {
            return 1;
        }
        else if(m < 0 || n < 0)
        {
            return 0;
        }

        if(dp[m][n] != -1)
        {
            return dp[m][n];
        }
        int up = helper(m - 1, n);
        int left = helper(m, n - 1);
        return dp[m][n] = up + left;
    }

    int uniquePaths(int m, int n)
    {
        dp = vector<vector<int>>(m, vector<int>(n, -1));
        return helper(m - 1, n - 1);
    }
};


// Source https://leetcode.com/problems/unique-paths-ii/

A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

Now consider if some obstacles are added to the grids. How many unique paths would there be?

An obstacle and space is marked as 1 and 0 respectively in the grid.

 

Example 1:


Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]
Output: 2
Explanation: There is one obstacle in the middle of the 3x3 grid above.
There are two ways to reach the bottom-right corner:
1. Right -> Right -> Down -> Down
2. Down -> Down -> Right -> Right
Example 2:


Input: obstacleGrid = [[0,1],[0,0]]
Output: 1
 

Constraints:

m == obstacleGrid.length
n == obstacleGrid[i].length
1 <= m, n <= 100
obstacleGrid[i][j] is 0 or 1.

class Solution
{
public:
     vector<vector<int>> dp;

    int path(int row, int col, vector<vector<int>> &obstacleGrid)
    {
        if(row == 0 && col == 0)
            return 1;
        if(row < 0 || col < 0)
            return 0;
        if(obstacleGrid[row][col] == 1)
            return 0;
        if(dp[row][col] != -1)
            return dp[row][col];

        int left = path(row, col - 1, obstacleGrid);
        int up = path(row - 1, col, obstacleGrid);
        return dp[row][col] = left + up;
    }

    int uniquePathsWithObstacles(vector<vector<int>> &obstacleGrid)
    {
        if(obstacleGrid[0][0] == 1) return 0;

        int row = obstacleGrid.size();
        int col = obstacleGrid[0].size();
        dp = vector<vector<int>>(row, vector<int> (col, -1));
        return path(row - 1, col - 1, obstacleGrid);
    }
};


// Source https://leetcode.com/problems/minimum-path-sum/

Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

 

Example 1:


Input: grid = [[1,3,1],[1,5,1],[4,2,1]]
Output: 7
Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.
Example 2:

Input: grid = [[1,2,3],[4,5,6]]
Output: 12
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 200
0 <= grid[i][j] <= 100

class Solution
{
public:
    int m, n;
    vector<vector<int>> dp;

    int minPathSum(vector<vector<int>> &grid)
    {
        m = grid.size();
        n = grid[0].size();
        dp = vector<vector<int>>(m, vector<int>(n, -1));
        return helper(m - 1, n - 1, grid);
    }

    int helper(int i, int j, vector<vector<int>> &grid)
    {
        if(i == 0 && j == 0) return grid[i][j];
        if(i < 0 || j < 0) return 1e9;

        if(dp[i][j] != -1) return dp[i][j];

        int up = helper(i - 1, j, grid);
        int left = helper(i, j - 1, grid);

        return dp[i][j] = grid[i][j] + min(up, left);
    }
};



// Source https://leetcode.com/problems/valid-number/

A valid number can be split up into these components (in order):

A decimal number or an integer.
(Optional) An 'e' or 'E', followed by an integer.
A decimal number can be split up into these components (in order):

(Optional) A sign character (either '+' or '-').
One of the following formats:
One or more digits, followed by a dot '.'.
One or more digits, followed by a dot '.', followed by one or more digits.
A dot '.', followed by one or more digits.
An integer can be split up into these components (in order):

(Optional) A sign character (either '+' or '-').
One or more digits.
For example, all the following are valid numbers: ["2", "0089", "-0.1", "+3.14", "4.", "-.9", "2e10", "-90E3", "3e+7", "+6e-1", "53.5e93", "-123.456e789"], 
while the following are not valid numbers: ["abc", "1a", "1e", "e3", "99e2.5", "--6", "-+3", "95a54e53"].

Given a string s, return true if s is a valid number.

 

Example 1:

Input: s = "0"
Output: true
Example 2:

Input: s = "e"
Output: false
Example 3:

Input: s = "."
Output: false
 

Constraints:

1 <= s.length <= 20
s consists of only English letters (both uppercase and lowercase), digits (0-9), plus '+', minus '-', or dot '.'.

class Solution
{
public:
    bool isNumber(string s)
    {
        int i = 0, n = s.length();
        int cnt1 = 0, cnt2 = 0;
        if(s[i] == '+' || s[i] == '-') ++i;
        while(i < n && s[i] >= '0' && s[i] <= '9') ++i, ++cnt1;
        if(i < n && s[i] == '.')
        {
            ++i;
            while(i < n && s[i] >= '0' && s[i] <= '9') ++i, ++cnt2;
        }
        if(cnt1 == 0 && cnt2 == 0) return false;
        int cnt3 = 0;
        if(i < n && (s[i] == 'e' || s[i] == 'E'))
        {
            ++i;
            if(s[i] == '+' || s[i] == '-') ++i;
            while(i < n && s[i] >= '0' && s[i] <= '9') ++i, ++cnt3;
            if(cnt3 == 0) return false;
        }
        return i == n;
    }
};


// Source https://leetcode.com/problems/plus-one/

You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. 
The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.

Increment the large integer by one and return the resulting array of digits.

 

Example 1:

Input: digits = [1,2,3]
Output: [1,2,4]
Explanation: The array represents the integer 123.
Incrementing by one gives 123 + 1 = 124.
Thus, the result should be [1,2,4].
Example 2:

Input: digits = [4,3,2,1]
Output: [4,3,2,2]
Explanation: The array represents the integer 4321.
Incrementing by one gives 4321 + 1 = 4322.
Thus, the result should be [4,3,2,2].
Example 3:

Input: digits = [9]
Output: [1,0]
Explanation: The array represents the integer 9.
Incrementing by one gives 9 + 1 = 10.
Thus, the result should be [1,0].
 

Constraints:

1 <= digits.length <= 100
0 <= digits[i] <= 9
digits does not contain any leading 0's.

class Solution
{
public:

    vector<int> plusOne(vector<int> &digits)
    {
        int n = digits.size();
        int carry = 1;
        for (int i = n - 1; i >= 0; --i)
        {
            if (carry == 0) return digits;
            int val = digits[i] + carry;
            digits[i] = val % 10;
            carry = val / 10;
        }
        if (carry) digits.insert(digits.begin(), 1);
        return digits;
    }
};


// Source https://leetcode.com/problems/add-binary/

Given two binary strings a and b, return their sum as a binary string.

 

Example 1:

Input: a = "11", b = "1"
Output: "100"
Example 2:

Input: a = "1010", b = "1011"
Output: "10101"
 

Constraints:

1 <= a.length, b.length <= 104
a and b consist only of '0' or '1' characters.
Each string does not contain leading zeros except for the zero itself.

class Solution
{
public:
    string addBinary(string a, string b)
    {
        string str = "";
        int i = a.size() - 1, j = b.size() - 1, carry = 0;

        while(i >= 0 && j >= 0)
        {
            int sum = (a[i] - '0') + (b[j] - '0') + carry;
            str.insert(0, 1, (sum % 2) + '0');
            carry = sum / 2;
            --i;
            --j;
        }

        while(i >= 0)
        {
            int sum = a[i] - '0' + carry;
            str.insert(0, 1, (sum % 2) + '0');
            carry = sum / 2;
            --i;
        }
        while(j >= 0)
        {
            int sum = b[j] - '0' + carry;
            str.insert(0, 1, (sum % 2) + '0');
            carry = sum / 2;
            --j;
        }
        if(carry) str.insert(0, 1, '1');
        return str;
    }
};


// Source https://leetcode.com/problems/text-justification/

Given an array of strings words and a width maxWidth, format the text such that each line has exactly maxWidth characters and is fully (left and right) justified.

You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces ' ' when necessary so that each line has exactly maxWidth characters.

Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, 
the empty slots on the left will be assigned more spaces than the slots on the right.

For the last line of text, it should be left-justified and no extra space is inserted between words.

Note:

A word is defined as a character sequence consisting of non-space characters only.
Each word's length is guaranteed to be greater than 0 and not exceed maxWidth.
The input array words contains at least one word.
 

Example 1:

Input: words = ["This", "is", "an", "example", "of", "text", "justification."], maxWidth = 16
Output:
[
   "This    is    an",
   "example  of text",
   "justification.  "
]
Example 2:

Input: words = ["What","must","be","acknowledgment","shall","be"], maxWidth = 16
Output:
[
  "What   must   be",
  "acknowledgment  ",
  "shall be        "
]
Explanation: Note that the last line is "shall be    " instead of "shall     be", because the last line must be left-justified instead of fully-justified.
Note that the second line is also left-justified becase it contains only one word.
Example 3:

Input: words = ["Science","is","what","we","understand","well","enough","to","explain","to","a","computer.","Art","is","everything","else","we","do"], maxWidth = 20
Output:
[
  "Science  is  what we",
  "understand      well",
  "enough to explain to",
  "a  computer.  Art is",
  "everything  else  we",
  "do                  "
]
 

Constraints:

1 <= words.length <= 300
1 <= words[i].length <= 20
words[i] consists of only English letters and symbols.
1 <= maxWidth <= 100
words[i].length <= maxWidth

class Solution
{
public:
    vector<string> fullJustify(vector<string> &words, int maxWidth)
    {
        vector<string> res;
        vector<string> cur_line;
        int charac_cnt = 0;
        for (const auto &w : words)
        {
            if (w.length() + charac_cnt + cur_line.size() <= maxWidth)  // cur_line.size() + 1个word需要cur_line.size() 段space，每段space至少1个空格
            {
                charac_cnt += w.length();
                cur_line.push_back(w);
            }
            else
            {
                if (cur_line.size() == 1)
                {
                    res.push_back(formLine(cur_line, 0, 0, maxWidth));
                }
                else
                {
                    int space = (maxWidth - charac_cnt) / (cur_line.size() - 1); // base space size
                    int front_increment = (maxWidth - charac_cnt) % (cur_line.size() - 1); // head spaces to increment size by 1
                    res.push_back(formLine(cur_line, space, front_increment, maxWidth));
                }
                // reset the line and character counts
                cur_line = vector<string> {w};
                charac_cnt = w.length();
            }
        }
        res.push_back(formLine(cur_line, 1, 0, maxWidth));
        return res;
    }
    string formLine(vector<string> &cur_line, int space, int front_increment, int maxWidth)
    {
        string res = cur_line[0];
        int n = cur_line.size();
        for (int i = 1; i < n; i++)
        {
            if (--front_increment >= 0)
            {
                res += " ";
            }
            for (int j = 0 ; j < space ; j++)
            {
                res += " ";
            }
            res += cur_line[i];
        }
        // fill the rest to be empty spaces for last line and one-word line
        while (res.length() < maxWidth)
        {
            res += " ";
        }
        return res;
    }
};


// Source https://leetcode.com/problems/sqrtx/

Given a non-negative integer x, compute and return the square root of x.

Since the return type is an integer, the decimal digits are truncated, and only the integer part of the result is returned.

Note: You are not allowed to use any built-in exponent function or operator, such as pow(x, 0.5) or x ** 0.5.

 

Example 1:

Input: x = 4
Output: 2
Example 2:

Input: x = 8
Output: 2
Explanation: The square root of 8 is 2.82842..., and since the decimal part is truncated, 2 is returned.
 

Constraints:

0 <= x <= 231 - 1

class Solution
{
public:
    int mySqrt(int x)
    {
        if (x <= 1) return x;
        long long start = 1, end = x;
        long long mid;
        int ans;
        while(start <= end)
        {
            mid = start + (end - start) / 2;
            long long val = mid * mid;
            if(val == x)
            {
                return (int)mid;
            }
            else if(val > x)
            {
                end = mid - 1;
            }
            else
            {
                ans = (int)mid;
                start = mid + 1;
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/climbing-stairs/

You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

 

Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
 

Constraints:

1 <= n <= 45

class Solution
{
public:
    vector<int> dp;
    int climbStairs(int n)
    {
        dp = vector<int>(50);
        return climb(n);
    }

    int climb (int n)
    {
        if(n < 0) return 0;
        if(n == 0) return 1;
        if (dp[n] != 0) return dp[n];
        return dp[n] = climb(n - 1) + climb(n - 2);
    }
};


// Source https://leetcode.com/problems/simplify-path/

Given a string path, which is an absolute path (starting with a slash '/') to a file or directory in a Unix-style file system, convert it to the simplified canonical path.

In a Unix-style file system, a period '.' refers to the current directory, a double period '..' refers to the directory up a level, 
and any multiple consecutive slashes (i.e. '//') are treated as a single slash '/'. 
For this problem, any other format of periods such as '...' are treated as file/directory names.

The canonical path should have the following format:

The path starts with a single slash '/'.
Any two directories are separated by a single slash '/'.
The path does not end with a trailing '/'.
The path only contains the directories on the path from the root directory to the target file or directory (i.e., no period '.' or double period '..')
Return the simplified canonical path.

 

Example 1:

Input: path = "/home/"
Output: "/home"
Explanation: Note that there is no trailing slash after the last directory name.
Example 2:

Input: path = "/../"
Output: "/"
Explanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go.
Example 3:

Input: path = "/home//foo/"
Output: "/home/foo"
Explanation: In the canonical path, multiple consecutive slashes are replaced by a single one.
 

Constraints:

1 <= path.length <= 3000
path consists of English letters, digits, period '.', slash '/' or '_'.
path is a valid absolute Unix path.

class Solution
{
public:
    string simplifyPath(string path)
    {
        vector<string> vec;
        string curr = "";
        int n = path.size();
        for(int i = 0; i < n; i++)
        {
            if (path[i] != '/')
            {
                curr += path[i];
                continue;
            }
            if(curr == "" || curr == ".")
            {
                curr = "";
                continue;
            }
            if(curr == "..")
            {
                if(!vec.empty())
                    vec.pop_back();
            }
            else
            {
                vec.push_back(curr);
            }
            curr = "";
        }
        if(curr.size() > 0 && curr != ".." && curr != ".")
        {
            vec.push_back(curr);
        }
        if(curr == ".." && !vec.empty())
        {
            vec.pop_back();
        }
        if(vec.size() == 0) return "/";
        string res = "";
        for(auto &str : vec)
        {
            res += ("/" + str);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/edit-distance/

Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character
 

Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')
Example 2:

Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')
 

Constraints:

0 <= word1.length, word2.length <= 500
word1 and word2 consist of lowercase English letters.

class Solution
{
public:
    int n, m;
    vector<vector<int>> dp;

    int minDistance(string word1, string word2)
    {
        n = word1.size();
        m = word2.size();
        dp = vector<vector<int>>(n, vector<int>(m, -1));
        return editDistance(0, 0, word1, word2);
    }
    int editDistance(int i, int j, string &word1, string &word2)
    {
        if (i == n && j == m) return 0;
        if(i == n)
        {
            return m - j;
        }
        if(j == m)
        {
            return n - i;
        }
        if(dp[i][j] != -1)
        {
            return dp[i][j];
        }
        if(word1[i] == word2[j])
        {
            return dp[i][j] = editDistance(i + 1, j + 1, word1, word2);
        }
        int cnt1 = 1 + editDistance(i, j + 1, word1, word2); //insert
        int cnt2 = 1 + editDistance(i + 1, j, word1, word2); //delete
        int cnt3 = 1 + editDistance(i + 1, j + 1, word1, word2); //replace
        return dp[i][j] = min(cnt1, min(cnt2, cnt3));
    }
};


// Source https://leetcode.com/problems/set-matrix-zeroes/

Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.

You must do it in place.

 

Example 1:


Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]
Output: [[1,0,1],[0,0,0],[1,0,1]]
Example 2:


Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]
Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]
 

Constraints:

m == matrix.length
n == matrix[0].length
1 <= m, n <= 200
-231 <= matrix[i][j] <= 231 - 1
 

Follow up:

A straightforward solution using O(mn) space is probably a bad idea.
A simple improvement uses O(m + n) space, but still not the best solution.
Could you devise a constant space solution?

class Solution
{
public:
    void setZeroes(vector<vector<int>> &matrix)
    {
        int m = matrix.size();
        int n = matrix[0].size();
        if(m == 1 && n == 1)
        {
            return;
        }

        bool row_flag = false;
        bool col_flag = false;

        //check for any zero in 1st row
        for(int i = 0; i < n; i++)
        {
            if(matrix[0][i] == 0)
            {
                row_flag = true;
            }
        }

        //check for any zero in 1st col
        for(int i = 0; i < m; i++)
        {
            if(matrix[i][0] == 0)
            {
                col_flag = true;
            }
        }

        for(int i = 1; i < m; i++)
        {
            for(int j = 1; j < n; j++)
            {
                if(matrix[i][j] == 0)
                {
                    matrix[0][j] = 0;
                    matrix[i][0] = 0;
                }
            }
        }

        //using inspace auxillary space as first row and first column, make submatrix values to be zero
        for(int i = 1; i < m; i++)
        {
            for(int j = 1; j < n; j++)
            {
                if(matrix[0][j] == 0 || matrix[i][0] == 0)
                {
                    matrix[i][j] = 0;
                }
            }
        }

        if(row_flag)
        {
            for(int i = 0; i < n; i++)
            {
                matrix[0][i] = 0;
            }
        }

        if(col_flag)
        {
            for(int i = 0; i < m; i++)
            {
                matrix[i][0] = 0;
            }
        }
    }
};


// Source https://leetcode.com/problems/search-a-2d-matrix/

Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
 

Example 1:


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true
Example 2:


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 100
-104 <= matrix[i][j], target <= 104

class Solution
{
public:
    bool searchMatrix(vector<vector<int>> &matrix, int target)
    {
        int m = matrix.size();
        int n = matrix[0].size();
        vector<int> vec(m);
        for(int i = 0; i < m; ++i)
        {
            vec[i] = matrix[i][n - 1];
        }
        auto itr = lower_bound(vec.begin(), vec.end(), target);
        if (itr == vec.end()) return false;
        int idx = itr - vec.begin();
        auto itr2 = lower_bound(begin(matrix[idx]), end(matrix[idx]), target);
        if (itr2 == end(matrix[idx]) || *itr2 != target) return false;
        return true;
    }
};


// Source https://leetcode.com/problems/sort-colors/

Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

 

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Example 2:

Input: nums = [2,0,1]
Output: [0,1,2]
 

Constraints:

n == nums.length
1 <= n <= 300
nums[i] is either 0, 1, or 2.

class Solution
{
public:
    void sortColors(vector<int> &nums)
    {
        int one = 0, zero = 0, two = 0;
        for (int i = 0; i < nums.size(); i++)
        {
            if (nums[i] == 0)
            {
                zero++;
            }
            else if (nums[i] == 1)
            {
                one++;
            }
            else
            {
                two++;
            }
        }
        nums.clear();
        nums.insert(nums.end(), zero, 0);
        nums.insert(nums.end(), one, 1);
        nums.insert(nums.end(), two, 2);
    }
};


// Source https://leetcode.com/problems/minimum-window-substring/

Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. 
If there is no such substring, return the empty string "".

The testcases will be generated such that the answer is unique.

A substring is a contiguous sequence of characters within the string.

 

Example 1:

Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t.
Example 2:

Input: s = "a", t = "a"
Output: "a"
Explanation: The entire string s is the minimum window.
Example 3:

Input: s = "a", t = "aa"
Output: ""
Explanation: Both 'a's from t must be included in the window.
Since the largest window of s only has one 'a', return empty string.
 

Constraints:

m == s.length
n == t.length
1 <= m, n <= 105
s and t consist of uppercase and lowercase English letters.

class Solution
{
public:
    string minWindow(string s, string t)
    {
        unordered_map<char, int> need, window;
        for (char c : t) need[c]++;
        int n = s.size();
        int left = 0, right = 0;
        int valid = 0;
        int start = 0, len = INT_MAX;
        while (right < n)
        {
            char c = s[right];
            if (need.count(c))
            {
                window[c]++;
                if (window[c] == need[c]) valid++; // valid 表示s[left ... right] 满足 window[c] >= need[c] 的字符c的个数
            }

            while (valid == need.size())
            {
                if (right - left + 1 < len)
                {
                    start = left;
                    len = right - left + 1;
                }
                char c = s[left];
                if (need.count(c))
                {
                    if (window[c] == need[c]) valid--;
                    window[c]--;
                }
                ++left;
            }
            ++right;
        }

        return len == INT_MAX ? "" : s.substr(start, len);
    }
};


// Source https://leetcode.com/problems/combinations/

Given two integers n and k, return all possible combinations of k numbers out of the range [1, n].

You may return the answer in any order.

 

Example 1:

Input: n = 4, k = 2
Output:
[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]
Example 2:

Input: n = 1, k = 1
Output: [[1]]
 

Constraints:

1 <= n <= 20
1 <= k <= n

class Solution
{
public:

    void recur(vector<int> &nums, int n, vector<vector<int>>&ans, vector<int> &cur, int k, int idx)
    {
        if(cur.size() == k)
        {
            ans.push_back(cur);
            return;
        }
        for(int i = idx; i < n; i++)
        {
            cur.push_back(nums[i]);
            recur(nums, n, ans, cur, k, i + 1);
            cur.pop_back();
        }
    }

    vector<vector<int>> combine(int n, int k)
    {
        vector<int> nums;
        for(int i = 1; i <= n; i++)
        {
            nums.push_back(i);
        }
        vector<vector<int>> ans;
        vector<int> cur;
        recur(nums, n, ans, cur, k, 0);
        return ans;
    }
};


// Source https://leetcode.com/problems/subsets/

Given an integer array nums of unique elements, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:

Input: nums = [0]
Output: [[],[0]]
 

Constraints:

1 <= nums.length <= 10
-10 <= nums[i] <= 10
All the numbers of nums are unique.

class Solution
{
public:

    void recur(vector<int> &nums, int n, vector<vector<int>>&ans, vector<int> &cur, int idx)
    {
        if(idx == n)
        {
            ans.push_back(cur);
            return;
        }
        cur.push_back(nums[idx]);
        recur(nums, n, ans, cur, idx + 1);
        cur.pop_back();
        recur(nums, n, ans, cur, idx + 1);
    }

    vector<vector<int>> subsets(vector<int> &nums)
    {
        vector<vector<int>> ans;
        vector<int> cur;
        int n = nums.size();
        recur(nums, n, ans, cur, 0);
        return ans;
    }
};


// Source https://leetcode.com/problems/word-search/

Given an m x n grid of characters board and a string word, return true if word exists in the grid.

The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.

 

Example 1:


Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
Output: true
Example 2:


Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "SEE"
Output: true
Example 3:


Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCB"
Output: false
 

Constraints:

m == board.length
n = board[i].length
1 <= m, n <= 6
1 <= word.length <= 15
board and word consists of only lowercase and uppercase English letters.

class Solution
{
private:
    int m, n, len;
    int visit[35][35];
    bool res;

    void backtrack(vector<vector<char>> &board, int i, int j, string &word, int idx)
    {
        if (res) return;
        if (idx >= len)
        {
            res = true;
            return;
        }
        if (i < 0 || i >= m || j < 0 || j >= n || visit[i][j] == 1 || board[i][j] != word[idx])
        {
            return;
        }
        visit[i][j] = 1;
        backtrack(board, i + 1, j, word, idx + 1);
        backtrack(board, i - 1, j, word, idx + 1);
        backtrack(board, i, j + 1, word, idx + 1);
        backtrack(board, i, j - 1, word, idx + 1);
        visit[i][j] = 0;
    }

public:
    bool exist(vector<vector<char>> &board, string word)
    {
        memset(visit, 0, sizeof(visit));
        m = board.size(), n = board[0].size(), len = word.length();
        res = false;
        for (int i = 0; i < m; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                backtrack(board, i, j, word, 0);
                if (res) return true;
            }
        }
        return false;
    }
};


// Source https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii/

Given an integer array nums sorted in non-decreasing order, remove some duplicates in-place such that each unique element appears at most twice. 
The relative order of the elements should be kept the same.

Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. 
More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. 
It does not matter what you leave beyond the first k elements.

Return k after placing the final result in the first k slots of nums.

Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.

Custom Judge:

The judge will test your solution with the following code:

int[] nums = [...]; // Input array
int[] expectedNums = [...]; // The expected answer with correct length

int k = removeDuplicates(nums); // Calls your implementation

assert k == expectedNums.length;
for (int i = 0; i < k; i++) {
    assert nums[i] == expectedNums[i];
}
If all assertions pass, then your solution will be accepted.

 

Example 1:

Input: nums = [1,1,1,2,2,3]
Output: 5, nums = [1,1,2,2,3,_]
Explanation: Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).
Example 2:

Input: nums = [0,0,1,1,1,1,2,3,3]
Output: 7, nums = [0,0,1,1,2,3,3,_,_]
Explanation: Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).
 

Constraints:

1 <= nums.length <= 3 * 104
-104 <= nums[i] <= 104
nums is sorted in non-decreasing order.

class Solution
{
public:
    int removeDuplicates(vector<int> &nums)
    {
        int l = 0, i = 0, n = nums.size();
        while (i < n)
        {
            int cnt = 1;
            ++i;
            for(; i < n && nums[i] == nums[i - 1]; ++i, ++cnt);
            if (cnt >= 2)
            {
                nums[l] = nums[i - 1];
                nums[l + 1] = nums[i - 1];
                l += 2;
            }
            else
            {
                nums[l] = nums[i - 1];
                ++l;
            }
        }

        return l;
    }
};


// Source https://leetcode.com/problems/search-in-rotated-sorted-array-ii/

There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).

Before being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is 
[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].

Given the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.

You must decrease the overall operation steps as much as possible.

 

Example 1:

Input: nums = [2,5,6,0,0,1,2], target = 0
Output: true
Example 2:

Input: nums = [2,5,6,0,0,1,2], target = 3
Output: false
 

Constraints:

1 <= nums.length <= 5000
-104 <= nums[i] <= 104
nums is guaranteed to be rotated at some pivot.
-104 <= target <= 104

0　　1　　2　　 4　　5　　6　　7
7　　0　　1　　 2　　4　　5　　6
6　　7　　0　　 1　　2　　4　　5
5　　6　　7　　 0　　1　　2　　4
4　　5　　6　　7　　0　　1　　2
2　　4　　5　　6　　7　　0　　1
1　　2　　4　　5　　6　　7　　0

class Solution
{
public:
    bool search(vector<int> &nums, int target)
    {
        int n = nums.size();
        if (nums[0] == target) return true;
        if (n == 1) return false;
        int i = 1;
        for(; i < n && nums[i] == nums[i - 1]; ++i);
        if (i == n) return false;
        if (nums[0] > nums[i] || nums[i] <= nums[n-1])
        {
            auto itr = lower_bound(nums.begin()+i, nums.end(), target);
            if (itr != nums.end() && *itr == target) return true;
            else return false;
        }
        int low = i, high = n - 1;
        int idx = i;
        while (low <= high)
        {
            int mid = (low + high) / 2;
            if (nums[mid] > nums[0] && nums[mid] > nums[n - 1])
            {
                idx = mid;
                low = mid + 1;
            }
            else
            {
                high = mid - 1;
            }
        }
        auto itrEnd = nums.begin() + idx + 1;
        auto itr1 = lower_bound(nums.begin(), itrEnd, target);
        if (itr1 != itrEnd && *itr1 == target) return true;
        auto itr2 = lower_bound(itrEnd, nums.end(), target);
        if (itr2 != nums.end() && *itr2 == target) return true;
        return false;
    }
};


// Source https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/

Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.

 

Example 1:


Input: head = [1,2,3,3,4,4,5]
Output: [1,2,5]
Example 2:


Input: head = [1,1,1,2,3]
Output: [2,3]
 

Constraints:

The number of nodes in the list is in the range [0, 300].
-100 <= Node.val <= 100
The list is guaranteed to be sorted in ascending order.

class Solution
{
public:
    ListNode *deleteDuplicates(ListNode *head)
    {
        ListNode *temp = new ListNode(0);
        temp->next = head;
        ListNode *prev = temp;
        ListNode *curr = head;

        while(curr)
        {
            auto val = curr->val;
            ListNode *end = curr;
            int cnt = 1;
            curr = curr->next;
            while (curr && curr->val == val) ++cnt, end = curr, curr = curr->next;
            if (cnt >= 2)
            {
                prev->next = curr;
            }
            else
            {
                prev = end;
            }
        }
        return temp->next;
    }
};


// Source https://leetcode.com/problems/remove-duplicates-from-sorted-list/

Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.

 

Example 1:


Input: head = [1,1,2]
Output: [1,2]
Example 2:


Input: head = [1,1,2,3,3]
Output: [1,2,3]
 

Constraints:

The number of nodes in the list is in the range [0, 300].
-100 <= Node.val <= 100
The list is guaranteed to be sorted in ascending order.

class Solution
{
public:
    ListNode *deleteDuplicates(ListNode *head)
    {
        ListNode *temp = new ListNode(0);
        temp->next = head;
        ListNode *prev = temp;
        ListNode *curr = head;

        while(curr)
        {
            auto val = curr->val;
            ListNode *end = curr;
            int cnt = 1;
            curr = curr->next;
            while (curr && curr->val == val) ++cnt, end = curr, curr = curr->next;
            if (cnt >= 2)
            {
                prev->next = end;
                prev = end;
            }
            else
            {
                prev = end;
            }
        }
        return temp->next;
    }
};

// Source https://leetcode.com/problems/largest-rectangle-in-histogram/

Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.

 

Example 1:


Input: heights = [2,1,5,6,2,3]
Output: 10
Explanation: The above is a histogram where width of each bar is 1.
The largest rectangle is shown in the red area, which has an area = 10 units.
Example 2:


Input: heights = [2,4]
Output: 4
 

Constraints:

1 <= heights.length <= 105
0 <= heights[i] <= 104

class Solution
{
public:
    int largestRectangleArea(vector<int> &heights)
    {
        int n = heights.size();
        vector<int> left(n, 0);
        vector<int> right(n, 0);
        left[0] = -1;
        vector<pair<int, int>> vec;
        vec.reserve(128);
        vec.push_back({0, heights[0]});
        for(int i = 1; i < n; i++)
        {
            while(vec.size() > 0)
            {
                if (vec.back().second < heights[i]) break;
                vec.pop_back();
            }
            int idx = -1;
            if (vec.size() > 0) idx = vec.back().first;
            left[i] = idx;
            vec.push_back({i, heights[i]});
        }
        right[n - 1] = n;
        vec.clear();
        vec.push_back({n-1, heights[n-1]});
        for(int i = n - 2; i >= 0; i--)
        {
            while(vec.size() > 0)
            {
                if (vec.back().second < heights[i]) break;
                vec.pop_back();
            }
            int idx = n;
            if (vec.size() > 0) idx = vec.back().first;
            right[i] = idx;
            vec.push_back({i, heights[i]});
        }
        int ans = 0;
        for(int i = 0; i < heights.size(); i++)
        {
            ans = max(ans, (right[i] - left[i] - 1) * heights[i]); // right[i] - i - 1 + i - left[i] -1 + 1 = right[i] - left[i] - 1
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/maximal-rectangle/

Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.

 

Example 1:


Input: matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
Output: 6
Explanation: The maximal rectangle is shown in the above picture.
Example 2:

Input: matrix = [["0"]]
Output: 0
Example 3:

Input: matrix = [["1"]]
Output: 1
 

Constraints:

rows == matrix.length
cols == matrix[i].length
1 <= row, cols <= 200
matrix[i][j] is '0' or '1'.

class Solution
{
public:
    int maximalRectangle(vector<vector<char>> &matrix)
    {
        int m = matrix.size();
        int n = matrix[0].size();
        vector<int> heights(n);
        int ans = 0;

        for(int i = 0 ; i < m ; i++)
        {
            for(int j = 0 ; j  < n ; j++)
            {
                if(matrix[i][j] == '1')
                {
                    heights[j]++;
                }
                else
                {
                    heights[j] = 0;
                }
            }

            vector<int> left(n, 0);
            vector<int> right(n, 0);
            left[0] = -1;
            vector<pair<int, int>> vec;
            vec.reserve(32);
            vec.push_back({0, heights[0]});
            for(int i = 1; i < n; i++)
            {
                while(vec.size() > 0)
                {
                    if (vec.back().second < heights[i]) break;
                    vec.pop_back();
                }
                int idx = -1;
                if (vec.size() > 0) idx = vec.back().first;
                left[i] = idx;
                vec.push_back({i, heights[i]});
            }
            right[n - 1] = n;
            vec.clear();
            vec.push_back({n - 1, heights[n - 1]});
            for(int i = n - 2; i >= 0; i--)
            {
                while(vec.size() > 0)
                {
                    if (vec.back().second < heights[i]) break;
                    vec.pop_back();
                }
                int idx = n;
                if (vec.size() > 0) idx = vec.back().first;
                right[i] = idx;
                vec.push_back({i, heights[i]});
            }
            for(int i = 0; i < heights.size(); i++)
            {
                ans = max(ans, (right[i] - left[i] - 1) * heights[i]); // right[i] - i - 1 + i - left[i] -1 + 1 = right[i] - left[i] - 1
            }
        }

        return ans;
    }
};


// Source https://leetcode.com/problems/partition-list/

Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

 

Example 1:


Input: head = [1,4,3,2,5,2], x = 3
Output: [1,2,2,4,3,5]
Example 2:

Input: head = [2,1], x = 2
Output: [1,2]
 

Constraints:

The number of nodes in the list is in the range [0, 200].
-100 <= Node.val <= 100
-200 <= x <= 200

class Solution
{
public:
    ListNode *partition(ListNode *head, int x)
    {
        ListNode *temp1 = new ListNode(0);
        ListNode *temp2 = new ListNode(0);

        ListNode *node1 = temp1;
        ListNode *node2 = temp2;

        ListNode *h = head;
        while(h)
        {
            if(h->val < x)
            {
                node1->next = h;
                node1 = node1->next;
            }
            else
            {
                node2->next = h;
                node2 = node2->next;
            }
            h = h->next;
        }

        node1->next = NULL;
        node2->next = NULL;

        node1->next = temp2->next;
        return temp1->next;
    }
};


// Source https://leetcode.com/problems/scramble-string/

We can scramble a string s to get a string t using the following algorithm:

If the length of the string is 1, stop.
If the length of the string is > 1, do the following:
Split the string into two non-empty substrings at a random index, i.e., if the string is s, divide it to x and y where s = x + y.
Randomly decide to swap the two substrings or to keep them in the same order. i.e., after this step, s may become s = x + y or s = y + x.
Apply step 1 recursively on each of the two substrings x and y.
Given two strings s1 and s2 of the same length, return true if s2 is a scrambled string of s1, otherwise, return false.

 

Example 1:

Input: s1 = "great", s2 = "rgeat"
Output: true
Explanation: One possible scenario applied on s1 is:
"great" --> "gr/eat" // divide at random index.
"gr/eat" --> "gr/eat" // random decision is not to swap the two substrings and keep them in order.
"gr/eat" --> "g/r / e/at" // apply the same algorithm recursively on both substrings. divide at ranom index each of them.
"g/r / e/at" --> "r/g / e/at" // random decision was to swap the first substring and to keep the second substring in the same order.
"r/g / e/at" --> "r/g / e/ a/t" // again apply the algorithm recursively, divide "at" to "a/t".
"r/g / e/ a/t" --> "r/g / e/ a/t" // random decision is to keep both substrings in the same order.
The algorithm stops now and the result string is "rgeat" which is s2.
As there is one possible scenario that led s1 to be scrambled to s2, we return true.
Example 2:

Input: s1 = "abcde", s2 = "caebd"
Output: false
Example 3:

Input: s1 = "a", s2 = "a"
Output: true
 

Constraints:

s1.length == s2.length
1 <= s1.length <= 30
s1 and s2 consist of lower-case English letters.

class Solution
{
public:
    unordered_map<string, bool> um;

    bool isScramble(string s1, string s2)
    {
        if(s1 == s2) return true;
        string S1 = s1;
        string S2 = s2;
        sort(S1.begin(), S1.end());
        sort(S2.begin(), S2.end());
        if(S1 != S2) return false;
        string tmp = s1 + "@" + s2;
        if(um.find(tmp) != um.end()) return um[tmp];

        int n = s1.size();
        for(int part = 1; part < n; part++)
        {
            bool l1 = isScramble(s1.substr(0, part), s2.substr(0, part));
            bool r1 = isScramble(s1.substr(part, n - part), s2.substr(part, n - part));
            bool l2 = isScramble(s1.substr(0, part), s2.substr(n - part, part));
            bool r2 = isScramble(s1.substr(part, n - part), s2.substr(0, n - part));
            if(l1 == true && r1 == true) return um[tmp] = true;
            if(l2 == true && r2 == true) return um[tmp] = true;
        }
        return um[tmp] = false;
    }
};


// Source https://leetcode.com/problems/merge-sorted-array/

You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be stored inside the array nums1. 
To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, 
and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

 

Example 1:

Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.
Example 2:

Input: nums1 = [1], m = 1, nums2 = [], n = 0
Output: [1]
Explanation: The arrays we are merging are [1] and [].
The result of the merge is [1].
Example 3:

Input: nums1 = [0], m = 0, nums2 = [1], n = 1
Output: [1]
Explanation: The arrays we are merging are [] and [1].
The result of the merge is [1].
Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.
 

Constraints:

nums1.length == m + n
nums2.length == n
0 <= m, n <= 200
1 <= m + n <= 200
-109 <= nums1[i], nums2[j] <= 109

class Solution
{
public:
    void merge(vector<int> &a, int n, vector<int> &b, int m)
    {
        int i = 0, j = 0;
        vector<int> v;
        v.reserve(n + m);
        while(i < n && j < m)
        {
            if(a[i] <= b[j]) v.push_back(a[i++]);
            else v.push_back(b[j++]);
        }
        for(; i < n; i++) v.push_back(a[i]);
        for(; j < m; j++) v.push_back(b[j]);
        a = v;
    }
};


// Source https://leetcode.com/problems/gray-code/

An n-bit gray code sequence is a sequence of 2^n integers where:

Every integer is in the inclusive range [0, 2^n - 1],
The first integer is 0,
An integer appears no more than once in the sequence,
The binary representation of every pair of adjacent integers differs by exactly one bit, and
The binary representation of the first and last integers differs by exactly one bit.
Given an integer n, return any valid n-bit gray code sequence.

 

Example 1:

Input: n = 2
Output: [0,1,3,2]
Explanation:
The binary representation of [0,1,3,2] is [00,01,11,10].
- 00 and 01 differ by one bit
- 01 and 11 differ by one bit
- 11 and 10 differ by one bit
- 10 and 00 differ by one bit
[0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01].
- 00 and 10 differ by one bit
- 10 and 11 differ by one bit
- 11 and 01 differ by one bit
- 01 and 00 differ by one bit
Example 2:

Input: n = 1
Output: [0,1]

i        ^ (i >> 1)
0000 ^ 0000 = 0000
0001 ^ 0000 = 0001
0010 ^ 0001 = 0011
0011 ^ 0001 = 0010
0100 ^ 0010 = 0110
0101 ^ 0010 = 0111
0110 ^ 0011 = 0101
0111 ^ 0011 = 0100
1000 ^ 0100 = 1100
1001 ^ 0100 = 1101
1010 ^ 0101 = 1111
1011 ^ 0101 = 1110
1100 ^ 0110 = 1010
1101 ^ 0110 = 1011
1110 ^ 0111 = 1001
1111 ^ 0111 = 1000

Constraints:

1 <= n <= 16

class Solution
{
public:
    vector<int> grayCode(int n)
    {
        int cnt = (1 << n);
        vector<int> v(cnt);

        for(int i = 0; i < cnt; i++)
        {
            v[i] = (i ^ (i >> 1));
        }

        return v;
    }
};


// Source https://leetcode.com/problems/subsets-ii/

Given an integer array nums that may contain duplicates, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,2]
Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]
Example 2:

Input: nums = [0]
Output: [[],[0]]
 

Constraints:

1 <= nums.length <= 10
-10 <= nums[i] <= 10


class Solution
{
public:

    void recur(vector<int> &nums, int n, vector<vector<int>>&ans, vector<int> &cur, int idx)
    {
        if(idx == n)
        {
            ans.push_back(cur);
            return;
        }
        int i = idx + 1;
        for (; i < n && nums[i] == nums[i - 1]; ++i);
        int cnt = i - idx;
        for (int k = 0; k < cnt; ++k)
        {
            cur.push_back(nums[idx]);
            recur(nums, n, ans, cur, i);
        }
        for (int k = 0; k < cnt; ++k) cur.pop_back();
        recur(nums, n, ans, cur, i);
    }

    vector<vector<int>> subsetsWithDup(vector<int> &nums)
    {
        vector<vector<int>> ans;
        vector<int> cur;
        sort(nums.begin(), nums.end());
        int n = nums.size();
        recur(nums, n, ans, cur, 0);
        return ans;
    }
};


// Source https://leetcode.com/problems/decode-ways/

A message containing letters from A-Z can be encoded into numbers using the following mapping:

'A' -> "1"
'B' -> "2"
...
'Z' -> "26"
To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). 
For example, "11106" can be mapped into:

"AAJF" with the grouping (1 1 10 6)
"KJF" with the grouping (11 10 6)
Note that the grouping (1 11 06) is invalid because "06" cannot be mapped into 'F' since "6" is different from "06".

Given a string s containing only digits, return the number of ways to decode it.

The test cases are generated so that the answer fits in a 32-bit integer.

 

Example 1:

Input: s = "12"
Output: 2
Explanation: "12" could be decoded as "AB" (1 2) or "L" (12).
Example 2:

Input: s = "226"
Output: 3
Explanation: "226" could be decoded as "BZ" (2 26), "VF" (22 6), or "BBF" (2 2 6).
Example 3:

Input: s = "06"
Output: 0
Explanation: "06" cannot be mapped to "F" because of the leading zero ("6" is different from "06").
 

Constraints:

1 <= s.length <= 100
s contains only digits and may contain leading zero(s).

class Solution
{
public:
    int dp[105];

    int recur(string &s, int n, int idx)
    {
        if (idx >= n) return 1;
        if (s[idx] == '0') return 0;
        if (dp[idx] != -1) return dp[idx];
        int ans = recur(s, n, idx + 1);
        if (idx + 1 < n && ((s[idx] - '0') * 10 + (s[idx + 1] - '0')) <= 26)
        {
            ans += recur(s, n, idx + 2);
        }
        return dp[idx] = ans;
    }
    int numDecodings(string s)
    {
        memset(dp, -1, sizeof(dp));
        int n = s.size();
        return recur(s, n, 0);
    }
};


// Source https://leetcode.com/problems/reverse-linked-list-ii/

Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.

 

Example 1:


Input: head = [1,2,3,4,5], left = 2, right = 4
Output: [1,4,3,2,5]
Example 2:

Input: head = [5], left = 1, right = 1
Output: [5]
 

Constraints:

The number of nodes in the list is n.
1 <= n <= 500
-500 <= Node.val <= 500
1 <= left <= right <= n

class Solution
{
public:
    ListNode *reverseBetween(ListNode *head, int left, int right)
    {
        if(head == NULL || head->next == NULL) return head;
        ListNode *dummy = new ListNode(0);
        dummy->next = head;
        ListNode *prev = dummy;
        ListNode *curr = head;
        int pos = 1;
        while (pos < left)
        {
            prev = curr;
            curr = curr->next;
            ++pos;
        }
        int cnt = 1;
        ListNode *start = curr;
        ListNode *end = curr;
        while (pos < right)
        {
            curr = curr->next;
            end = curr;
            ++cnt;
            ++pos;
        }
        ListNode *next = end->next;
        ListNode *ptrArr[cnt];
        ListNode *ptr = start;
        int idx = 0;
        while (ptr != next)
        {
            ptrArr[idx++] = ptr;
            ptr = ptr->next;
        }
        for (int i = cnt - 1; i > 0; --i)
        {
            ListNode *temp = ptrArr[i];
            temp->next = ptrArr[i - 1];
        }
        prev->next = ptrArr[cnt - 1];
        ptrArr[0]->next = next;
        return dummy->next;
    }
};


// Source https://leetcode.com/problems/restore-ip-addresses/

A valid IP address consists of exactly four integers separated by single dots. Each integer is between 0 and 255 (inclusive) and cannot have leading zeros.

For example, "0.1.2.201" and "192.168.1.1" are valid IP addresses, but "0.011.255.245", "192.168.1.312" and "192.168@1.1" are invalid IP addresses.
Given a string s containing only digits, return all possible valid IP addresses that can be formed by inserting dots into s. 
You are not allowed to reorder or remove any digits in s. You may return the valid IP addresses in any order.

 

Example 1:

Input: s = "25525511135"
Output: ["255.255.11.135","255.255.111.35"]
Example 2:

Input: s = "0000"
Output: ["0.0.0.0"]
Example 3:

Input: s = "101023"
Output: ["1.0.10.23","1.0.102.3","10.1.0.23","10.10.2.3","101.0.2.3"]
 

Constraints:

1 <= s.length <= 20
s consists of digits only.

class Solution
{
public:
    void recur(string &s, int n, vector<vector<string>> &ans, vector<string> &curr, int idx)
    {
        if (curr.size() == 4)
        {
            if (idx >= n) ans.push_back(curr);
            return ;
        }
        if (idx >= n) return ;
        string str = "";
        for (int i = 0; i < 3 && idx + i < n; ++i)
        {
            str += s[idx + i];
            if (str.size() > 1 && str[0] == '0') break;
            if (str.size() == 3 && ((str[0] - '0') * 100 + (str[1] - '0') * 10 + (str[2] - '0')) > 255) break;
            curr.push_back(str);
            recur(s, n, ans, curr, idx + i + 1);
            curr.pop_back();
        }
    }
    vector<string> restoreIpAddresses(string s)
    {
        int n = s.length();
        vector<vector<string>> ans;
        vector<string> curr;
        recur(s, n, ans, curr, 0);
        vector<string> res;
        for (auto &v : ans)
        {
            string temp = "";
            for (auto &str : v)
            {
                temp += (str + ".");
            }
            temp.pop_back();
            res.push_back(temp);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/binary-tree-inorder-traversal/

Given the root of a binary tree, return the inorder traversal of its nodes' values.

 

Example 1:


Input: root = [1,null,2,3]
Output: [1,3,2]
Example 2:

Input: root = []
Output: []
Example 3:

Input: root = [1]
Output: [1]
 

Constraints:

The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100

class Solution
{
public:
    vector<int> inorder;

    void recur(TreeNode *node)
    {
        if(node == nullptr) return ;
        recur(node->left);
        inorder.push_back(node->val);
        recur(node->right);
    }

    vector<int> inorderTraversal(TreeNode *root)
    {
        recur(root);
        return inorder;
    }
};

class Solution
{
public:
    vector<int> inorderTraversal(TreeNode *root)
    {
        vector<int> res;
        if (root == nullptr) return res;

        stack<TreeNode *> s;
        s.push(root);

        while(!s.empty())
        {
            TreeNode *curr = s.top();
            while(curr->left)
            {
                s.push(curr->left);
                curr = curr->left;
            }

            TreeNode *top = s.top();
            s.pop();
            res.push_back(top->val);

            while(!top->right && !s.empty())
            {
                top = s.top();
                s.pop();
                res.push_back(top->val);
            }

            if (top->right)
            {
                s.push(top->right);
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/unique-binary-search-trees-ii/

Given an integer n, return all the structurally unique BST's (binary search trees), which has exactly n nodes of unique values from 1 to n. 
Return the answer in any order.

 

Example 1:


Input: n = 3
Output: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]
Example 2:

Input: n = 1
Output: [[1]]
 

Constraints:

1 <= n <= 8

class Solution
{
public:
   vector<TreeNode *> dp[10][10];

    vector<TreeNode *> rec(int l, int r)
    {
        if (l > r) return {NULL};
        if (l == r) return {new TreeNode(l)};

        if (dp[l][r].size() > 0) return dp[l][r];

        vector<TreeNode *> ans;
        for (int root = l; root <= r; root++)
        {
            vector<TreeNode *> left = rec(l, root - 1);
            vector<TreeNode *> right = rec(root + 1, r);

            for (auto node_l : left)
            {
                for (auto node_r : right)
                {
                    TreeNode *rootNode = new TreeNode(root);
                    rootNode->left = node_l;
                    rootNode->right = node_r;
                    ans.push_back(rootNode);
                }
            }
        }

        return dp[l][r] = ans;
    }

    vector<TreeNode *> generateTrees(int n)
    {
        return rec(1, n);
    }
};


// Source https://leetcode.com/problems/unique-binary-search-trees/

Given an integer n, return the number of structurally unique BST's (binary search trees) which has exactly n nodes of unique values from 1 to n.

 

Example 1:


Input: n = 3
Output: 5
Example 2:

Input: n = 1
Output: 1
 

Constraints:

1 <= n <= 19

class Solution
{
public:
    int dp[30][30];

    int rec(int l, int r)
    {
        if (l > r) return 1;
        if (l == r) return 1;
        if (dp[l][r] != -1) return dp[l][r];
        int ans = 0;
        for (int i = l; i <= r; ++i)
        {
            int cntL = rec(l, i - 1);
            int cntR = rec(i + 1, r);
            ans += (cntL * cntR);
        }
        return dp[l][r] = ans;
    }

    int numTrees(int n)
    {
        memset(dp, -1, sizeof(dp));
        return rec(1, n);
    }
};


// Source https://leetcode.com/problems/interleaving-string/

Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.

An interleaving of two strings s and t is a configuration where they are divided into non-empty substrings such that:

s = s1 + s2 + ... + sn
t = t1 + t2 + ... + tm
|n - m| <= 1
The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...
Note: a + b is the concatenation of strings a and b.

 

Example 1:


Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbcbcac"
Output: true

aa		bc		c
	dbbc		a
Example 2:

Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbbaccc"
Output: false
aa		b
	dbb	
Example 3:

Input: s1 = "", s2 = "", s3 = ""
Output: true
 

Constraints:

0 <= s1.length, s2.length <= 100
0 <= s3.length <= 200
s1, s2, and s3 consist of lowercase English letters.

class Solution
{
public:
    int len1, len2, len3;
    int dp [2][105][105];
    bool res;

    void solve(string &str1, string &str2, string &str3, int i, int j, int k, int cnt1, int cnt2, int turn)
    {
        if (res) return ;
        if (i >= len1 && j >= len2)
        {
            if (k >= len3 && abs(cnt1 - cnt2) <= 1) res = true;
            return ;
        }
        if (i >= len1)
        {
            if ((len2 - j) != (len3 - k)) return;
            string s1 = str2.substr(j);
            string s2 = str3.substr(k);
            if (s1 == s2 && abs(cnt1 - cnt2 - 1) <= 1) res = true;
            return ;
        }
        if (j >= len2)
        {
            if ((len1 - i) != (len3 - k)) return;
            string s1 = str1.substr(i);
            string s2 = str3.substr(k);
            if (s1 == s2 && abs(cnt1 + 1 - cnt2) <= 1) res = true;
            return ;
        }
        if (dp[turn][i][j] != -1) return ;
        dp[turn][i][j] = 1;
        if (turn == 0)
        {
            while (i < len1 && k < len3 && str1[i] == str3[k])
            {
                ++i, ++k;
                solve(str1, str2, str3, i, j, k, cnt1 + 1, cnt2, 1);
            }
        }
        else
        {
            while (j < len2 && k < len3 && str2[j] == str3[k])
            {
                ++j, ++k;
                solve(str1, str2, str3, i, j, k, cnt1, cnt2 + 1, 0);
            }
        }
    }
    bool isInterleave(string s1, string s2, string s3)
    {
        len1 = s1.size();
        len2 = s2.size();
        len3 = s3.size();
        if(len1 + len2 != len3) return false;
        if(len3 == 0) return true;
        if(len1 == 0)
        {
            if (s2 == s3) return true;
            else return false;
        }
        if(len2 == 0)
        {
            if (s1 == s3) return true;
            else return false;
        }
        memset(dp, -1, sizeof(dp));
        res = false;
        solve(s1, s2, s3, 0, 0, 0, 0, 0, 0);
        solve(s1, s2, s3, 0, 0, 0, 0, 0, 1);
        return res;
    }
};


// Source https://leetcode.com/problems/validate-binary-search-tree/

Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
 

Example 1:


Input: root = [2,1,3]
Output: true
Example 2:


Input: root = [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
-231 <= Node.val <= 231 - 1

class Solution
{
public:

    bool helper(TreeNode *node, long long min, long long max)
    {
        if(node == NULL) return true;
        long long val = node->val;
        if(val < min || val > max) return false;
        return helper(node->left, min, val - 1) && helper(node->right, val + 1, max);
    }


    bool isValidBST(TreeNode *root)
    {
        return helper(root, INT_MIN, INT_MAX);
    }
};


// Source https://leetcode.com/problems/recover-binary-search-tree/

You are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.

 

Example 1:


Input: root = [1,3,null,null,2]
Output: [3,1,null,null,2]
Explanation: 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid.
Example 2:


Input: root = [3,1,4,null,null,2]
Output: [2,1,4,null,null,3]
Explanation: 2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid.
 

Constraints:

The number of nodes in the tree is in the range [2, 1000].
-231 <= Node.val <= 231 - 1

class Solution
{
public:
    void inorder(vector<int> &v, TreeNode *root)
    {
        if(root == NULL) return;
        inorder(v, root->left);
        v.push_back(root->val);
        inorder(v, root->right);
    }
    int index = 0;
    void correction(vector<int> &v, TreeNode *root )
    {
        if(root == NULL) return;
        correction(v, root->left );
        if(v[index] != root->val)
        {
            root->val = v[index];
        }
        index++;
        correction(v, root->right);
    }
    void recoverTree(TreeNode *root)
    {
        vector<int>sorted;
        inorder(sorted, root);
        sort(sorted.begin(), sorted.end());
        correction(sorted, root);
    }
};


// Source https://leetcode.com/problems/same-tree/

Given the roots of two binary trees p and q, write a function to check if they are the same or not.

Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.

 

Example 1:


Input: p = [1,2,3], q = [1,2,3]
Output: true
Example 2:


Input: p = [1,2], q = [1,null,2]
Output: false
Example 3:


Input: p = [1,2,1], q = [1,1,2]
Output: false
 

Constraints:

The number of nodes in both trees is in the range [0, 100].
-104 <= Node.val <= 104

class Solution
{
public:

    bool sameTree(TreeNode *p, TreeNode *q)
    {
        if(p == NULL && q == NULL)
            return true;
        if(p == NULL || q == NULL)
            return false;
        if(p->val != q->val)
            return false;
        return sameTree(p->left, q->left) && sameTree(p->right, q->right);
    }

    bool isSameTree(TreeNode *p, TreeNode *q)
    {
        return sameTree(p, q);
    }
};


// Source https://leetcode.com/problems/symmetric-tree/

Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).

 

Example 1:


Input: root = [1,2,2,3,4,4,3]
Output: true
Example 2:


Input: root = [1,2,2,null,3,null,3]
Output: false
 

Constraints:

The number of nodes in the tree is in the range [1, 1000].
-100 <= Node.val <= 100

class Solution
{
public:
    bool isSymmetric(TreeNode *root)
    {
        if (!root) return true;
        queue<TreeNode *> q1, q2;
        q1.push(root->left);
        q2.push(root->right);
        while (!q1.empty() && !q2.empty())
        {
            TreeNode *node1 = q1.front();
            q1.pop();
            TreeNode *node2 = q2.front();
            q2.pop();
            if (!node1 && !node2) continue;
            if((node1 && !node2) || (!node1 && node2)) return false;
            if (node1->val != node2->val) return false;
            q1.push(node1->left);
            q1.push(node1->right);
            q2.push(node2->right);
            q2.push(node2->left);
        }
        if (!q1.empty() || !q2.empty()) return false;
        return true;
    }
};


// Source https://leetcode.com/problems/binary-tree-level-order-traversal/

Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: [[3],[9,20],[15,7]]
Example 2:

Input: root = [1]
Output: [[1]]
Example 3:

Input: root = []
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 2000].
-1000 <= Node.val <= 1000

class Solution
{
public:
    vector<vector<int>> levelOrder(TreeNode *root)
    {
        vector<vector<int>> result;
        if (!root) return result;
        queue<TreeNode *> q;
        q.push(root);
        while (!q.empty())
        {
            int n = q.size();
            vector<int> res;
            while (n--)
            {
                TreeNode *curr = q.front();
                q.pop();
                res.push_back(curr->val);
                if (curr->left)
                {
                    q.push(curr->left);
                }
                if (curr->right)
                {
                    q.push(curr->right);
                }
            }
            result.push_back(res);
        }
        return result;
    }
};


// Source https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/

Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: [[3],[20,9],[15,7]]
Example 2:

Input: root = [1]
Output: [[1]]
Example 3:

Input: root = []
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 2000].
-100 <= Node.val <= 100

class Solution
{
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode *root)
    {
        vector<vector<int>>ans;
        if(!root) return ans;
        queue<TreeNode *>q;
        q.push(root);
        bool LtoR = true;
        while(!q.empty())
        {
            int sz = q.size();
            vector<int>level(sz);
            for(int i = 0; i < sz; i++)
            {
                TreeNode *node = q.front();
                q.pop();
                int idx = LtoR ? i : (sz - 1 - i);
                level[idx] = node->val;
                if(node->left) q.push(node->left);
                if(node->right) q.push(node->right);
            }
            LtoR = !LtoR;
            ans.push_back(level);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/maximum-depth-of-binary-tree/

Given the root of a binary tree, return its maximum depth.

A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: 3
Example 2:

Input: root = [1,null,2]
Output: 2
 

Constraints:

The number of nodes in the tree is in the range [0, 104].
-100 <= Node.val <= 100

class Solution
{
public:
    int maxDepth(TreeNode *root)
    {
        if(!root) return 0;
        int maxLeft = maxDepth(root->left);
        int maxRight = maxDepth(root->right);
        return max(maxLeft, maxRight) + 1;
    }
};

class Solution
{
public:
    int maxDepth(TreeNode *root)
    {
        if(root == NULL)
        {
            return 0;
        }
        queue<TreeNode *> q;
        q.push(root);
        int depth = 0;
        while(q.size())
        {
            int n = q.size();
            depth++;
            for(int i = 0; i < n; i++)
            {
                TreeNode *x = q.front();
                q.pop();
                if(x->left != NULL)
                {
                    q.push(x->left);
                }
                if(x->right != NULL)
                {
                    q.push(x->right);
                }
            }
        }
        return depth;
    }
};


// Source https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/

Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree 
and inorder is the inorder traversal of the same tree, construct and return the binary tree.

 

Example 1:


Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
Output: [3,9,20,null,null,15,7]
Example 2:

Input: preorder = [-1], inorder = [-1]
Output: [-1]
 

Constraints:

1 <= preorder.length <= 3000
inorder.length == preorder.length
-3000 <= preorder[i], inorder[i] <= 3000
preorder and inorder consist of unique values.
Each value of inorder also appears in preorder.
preorder is guaranteed to be the preorder traversal of the tree.
inorder is guaranteed to be the inorder traversal of the tree.

class Solution
{
public:
    unordered_map<int, int>mp;

    TreeNode *helper(vector<int> &preorder, int ps, int pe, vector<int> &inorder, int is, int ie)
    {
        if(ps > pe) return NULL;

        int i = mp[preorder[ps]] - is;

        TreeNode *root = new TreeNode(preorder[ps]);

        root->left = helper(preorder, ps + 1, ps + i, inorder, is, is + i - 1);
        root->right = helper(preorder, ps + i + 1, pe, inorder, is + i + 1, ie);

        return root;
    }
    TreeNode *buildTree(vector<int> &preorder, vector<int> &inorder)
    {
        for(int i = 0; i < inorder.size(); i++)
            mp[inorder[i]] = i;
        return helper(preorder, 0, preorder.size() - 1, inorder, 0, inorder.size() - 1);
    }
};


// Source https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/

Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree 
and postorder is the postorder traversal of the same tree, construct and return the binary tree.

 

Example 1:


Input: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]
Output: [3,9,20,null,null,15,7]
Example 2:

Input: inorder = [-1], postorder = [-1]
Output: [-1]
 

Constraints:

1 <= inorder.length <= 3000
postorder.length == inorder.length
-3000 <= inorder[i], postorder[i] <= 3000
inorder and postorder consist of unique values.
Each value of postorder also appears in inorder.
inorder is guaranteed to be the inorder traversal of the tree.
postorder is guaranteed to be the postorder traversal of the tree.

class Solution
{
public:
    unordered_map<int, int>mp;

    TreeNode *helper(vector<int> &postorder, int ps, int pe, vector<int> &inorder, int is, int ie)
    {
        if(ps > pe) return NULL;

        int i = mp[postorder[pe]] - is;

        TreeNode *root = new TreeNode(postorder[pe]);

        root->left = helper(postorder, ps, ps + i - 1, inorder, is, is + i - 1);
        root->right = helper(postorder, ps + i, pe - 1, inorder, is + i + 1, ie);

        return root;
    }

    TreeNode *buildTree(vector<int> &inorder, vector<int> &postorder)
    {
        for(int i = 0; i < inorder.size(); i++)
            mp[inorder[i]] = i;
        return helper(postorder, 0, postorder.size() - 1, inorder, 0, inorder.size() - 1);
    }
};


// Source https://leetcode.com/problems/binary-tree-level-order-traversal-ii/

Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: [[15,7],[9,20],[3]]
Example 2:

Input: root = [1]
Output: [[1]]
Example 3:

Input: root = []
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 2000].
-1000 <= Node.val <= 1000

class Solution
{
public:
    vector<vector<int>> levelOrderBottom(TreeNode *root)
    {
        vector<vector<int>>ans;
        if(root == NULL) return ans;
        queue<TreeNode *>q;
        q.push(root);
        while(!q.empty())
        {
            int currsize = q.size();
            vector<int>level;
            while(currsize--)
            {
                TreeNode *currNode = q.front();
                q.pop();
                level.push_back(currNode->val);
                if(currNode->left != NULL)
                    q.push(currNode->left);
                if(currNode->right != NULL)
                    q.push(currNode->right);
            }
            ans.push_back(level);
        }
        reverse(ans.begin(), ans.end());
        return ans;
    }
};


// Source https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/

Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.

A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.

 

Example 1:


Input: nums = [-10,-3,0,5,9]
Output: [0,-3,9,-10,null,5]
Explanation: [0,-10,5,null,-3,null,9] is also accepted:

Example 2:


Input: nums = [1,3]
Output: [3,1]
Explanation: [1,3] and [3,1] are both a height-balanced BSTs.
 

Constraints:

1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums is sorted in a strictly increasing order.

class Solution
{
public:
    TreeNode *sortedArrayToBST(vector<int> &nums)
    {
        return createBST(nums, 0, nums.size() - 1);
    }

    TreeNode *createBST(vector<int> &nums, int start, int end)
    {
        if(start > end)
            return NULL;

        int mid = (start + end) / 2;

        TreeNode *root = new TreeNode(nums[mid]);

        root->left = createBST(nums, start, mid - 1);
        root->right = createBST(nums, mid + 1, end);

        return root;
    }
};


// Source https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/

Given the head of a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

 

Example 1:


Input: head = [-10,-3,0,5,9]
Output: [0,-3,9,-10,null,5]
Explanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.
Example 2:

Input: head = []
Output: []
 

Constraints:

The number of nodes in head is in the range [0, 2 * 104].
-105 <= Node.val <= 105

class Solution
{
public:
    TreeNode *sortedListToBST(ListNode *head)
    {
        if(head == NULL)
            return NULL;
        if(head->next == NULL)
            return new TreeNode(head->val);
        ListNode *slow = head, *fast = head, *prev = NULL;
        while(fast && fast->next)
        {
            prev = slow;
            slow = slow->next;
            fast = fast->next->next;
        }
        if(prev)
            prev->next = NULL;
        TreeNode *root = new TreeNode(slow->val);
        root->left = sortedListToBST(head);
        root->right = sortedListToBST(slow->next);
        return root;
    }
};


// Source https://leetcode.com/problems/balanced-binary-tree/

Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as:

a binary tree in which the left and right subtrees of every node differ in height by no more than 1.

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: true
Example 2:


Input: root = [1,2,2,3,3,null,null,4,4]
Output: false
Example 3:

Input: root = []
Output: true
 

Constraints:

The number of nodes in the tree is in the range [0, 5000].
-104 <= Node.val <= 104

class Solution
{
public:
    pair<bool, int>isBalancedFast(TreeNode *root)
    {
        if(root == NULL)
        {
            pair<bool, int>p = make_pair(true, 0);
            return p;
        }

        pair<bool, int>left = isBalancedFast(root->left);
        pair<bool, int>right = isBalancedFast(root->right);

        bool leftAns = left.first;
        bool rightAns = right.first;

        bool diff = abs(left.second -  right.second) <= 1;

        pair<bool, int>ans;
        ans.second = max(left.second, right.second) + 1;

        if(leftAns && rightAns && diff)
        {
            ans.first = true;
        }
        else
        {
            ans.second = false;
        }
        return ans;
    }

    bool isBalanced(TreeNode *root)
    {
        return isBalancedFast(root).first;
    }
};


// Source https://leetcode.com/problems/minimum-depth-of-binary-tree/

Given a binary tree, find its minimum depth.

The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.

Note: A leaf is a node with no children.

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: 2
Example 2:

Input: root = [2,null,3,null,4,null,5,null,6]
Output: 5
 

Constraints:

The number of nodes in the tree is in the range [0, 105].
-1000 <= Node.val <= 1000

class Solution
{
public:
    int minDepth(TreeNode *root)
    {
        if(root == NULL)
        {
            return 0;
        }
        int rDepth = minDepth(root->right);
        int lDepth = minDepth(root->left);
        if(rDepth == 0 || lDepth == 0)
        {
            return 1 + max(rDepth, lDepth);
        }
        return 1 + min(rDepth, lDepth);
    }
};

class Solution
{
public:
    int minDepth(TreeNode *root)
    {
        if(root == NULL)
        {
            return 0;
        }
        queue<TreeNode *>q1;
        q1.push(root);

        int ans = 1;
        while(!q1.empty())
        {
            int size = q1.size();
            while(size--)
            {
                TreeNode *front = q1.front();
                q1.pop();
                if(front->left == NULL && front->right == NULL)
                {
                    return ans;
                }
                if(front->left != NULL)
                {
                    q1.push(front->left);
                }
                if(front->right != NULL)
                {
                    q1.push(front->right);
                }
            }
            ans++;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/path-sum/

Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.

A leaf is a node with no children.

 

Example 1:


Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22
Output: true
Explanation: The root-to-leaf path with the target sum is shown.
Example 2:


Input: root = [1,2,3], targetSum = 5
Output: false
Explanation: There two root-to-leaf paths in the tree:
(1 --> 2): The sum is 3.
(1 --> 3): The sum is 4.
There is no root-to-leaf path with sum = 5.
Example 3:

Input: root = [], targetSum = 0
Output: false
Explanation: Since the tree is empty, there are no root-to-leaf paths.
 

Constraints:

The number of nodes in the tree is in the range [0, 5000].
-1000 <= Node.val <= 1000
-1000 <= targetSum <= 1000

class Solution
{
public:
    bool hasPathSum(TreeNode *root, int targetSum)
    {
        if(root == NULL)
        {
            return false;
        }
        if(root->left == NULL && root->right == NULL)
        {
            if (targetSum == root->val) return true;
            else return false;
        }
        return hasPathSum(root->left, targetSum - root->val) || hasPathSum(root->right, targetSum - root->val);
    }
};


// Source https://leetcode.com/problems/path-sum-ii/

Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum. 
Each path should be returned as a list of the node values, not node references.

A root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.

 

Example 1:


Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22
Output: [[5,4,11,2],[5,8,4,5]]
Explanation: There are two paths whose sum equals targetSum:
5 + 4 + 11 + 2 = 22
5 + 8 + 4 + 5 = 22
Example 2:


Input: root = [1,2,3], targetSum = 5
Output: []
Example 3:

Input: root = [1,2], targetSum = 0
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 5000].
-1000 <= Node.val <= 1000
-1000 <= targetSum <= 1000

class Solution
{
public:
    unordered_map<int, vector<vector<int>>>subsets;
    vector<int>subset;

    void allSubsets(TreeNode *root, int sum)
    {
        if(!root) return;
        subset.push_back(root->val);
        sum += root->val;
        if(!root->left && !root->right)
        {
            subsets[sum].push_back(subset);
        }
        if(root->left)
        {
            allSubsets(root->left, sum);
        }
        if(root->right)
        {
            allSubsets(root->right, sum);
        }
        subset.pop_back();
    }

    vector<vector<int>> pathSum(TreeNode *root, int targetSum)
    {
        allSubsets(root, 0);
        return subsets[targetSum];
    }
};


// Source https://leetcode.com/problems/flatten-binary-tree-to-linked-list/

Given the root of a binary tree, flatten the tree into a "linked list":

The "linked list" should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null.
The "linked list" should be in the same order as a pre-order traversal of the binary tree.
 

Example 1:


Input: root = [1,2,5,3,4,null,6]
Output: [1,null,2,null,3,null,4,null,5,null,6]
Example 2:

Input: root = []
Output: []
Example 3:

Input: root = [0]
Output: [0]
 

Constraints:

The number of nodes in the tree is in the range [0, 2000].
-100 <= Node.val <= 100

class Solution
{
public:
   vector<TreeNode *> vec;

   void recur(TreeNode *node)
   {
       if (node == NULL) return;
       vec.push_back(node);
       recur(node->left);
       recur(node->right);
   }

    void flatten(TreeNode *root)
    {
        if(root == NULL || (root->left == NULL && root->right == NULL))
        {
            return ;
        }
        vec.reserve(2000);
        recur(root);
        int n = vec.size();
        for (int i = 0; i < n - 1; ++i)
        {
            TreeNode *temp = vec[i];
            temp->left = NULL;
            temp->right = vec[i + 1];
        }
        TreeNode *temp = vec[n - 1];
        temp->left = NULL;
        temp->right = NULL;
    }
};


// Source https://leetcode.com/problems/distinct-subsequences/

Given two strings s and t, return the number of distinct subsequences of s which equals t.

A string's subsequence is a new string formed from the original string by deleting some (can be none) of the characters without disturbing the remaining characters' relative positions. 
(i.e., "ACE" is a subsequence of "ABCDE" while "AEC" is not).

The test cases are generated so that the answer fits on a 32-bit signed integer.

 

Example 1:

Input: s = "rabbbit", t = "rabbit"
Output: 3
Explanation:
As shown below, there are 3 ways you can generate "rabbit" from S.
rabbbit
rabbbit
rabbbit
Example 2:

Input: s = "babgbag", t = "bag"
Output: 5
Explanation:
As shown below, there are 5 ways you can generate "bag" from S.
babgbag
babgbag
babgbag
babgbag
babgbag
 

Constraints:

1 <= s.length, t.length <= 1000
s and t consist of English letters.

class Solution
{
    int m, n;
    vector<vector<int>> dp;

    int recur(string &s, int i, string &t, int j)
    {
        if (j >= n) return 1;
        if (i >= m) return 0;
        if (dp[i][j] != -1) return dp[i][j];
        int ans = 0;
        for(int idx = i; idx <= min(m - 1, m - n + j); ++idx) // m - idx >= n - j 对应 m - n + j >= idx
        {
            if (s[idx] == t[j]) ans += recur(s, idx + 1, t, j + 1);
        }
        return dp[i][j] = ans;
    }
public:
    int numDistinct(string s, string t)
    {
        m = s.size();
        n = t.size();
        dp = vector<vector<int>>(m, vector<int>(n, -1));
        if (m < n) return 0;
        if (m == n) return s == t;
        return recur(s, 0, t, 0);
    }
};


// Source https://leetcode.com/problems/populating-next-right-pointers-in-each-node/

You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:

struct Node {
  int val;
  Node *left;
  Node *right;
  Node *next;
}
Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.

Initially, all next pointers are set to NULL.

 

Example 1:


Input: root = [1,2,3,4,5,6,7]
Output: [1,#,2,3,#,4,5,6,7,#]
Explanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.
Example 2:

Input: root = []
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 212 - 1].
-1000 <= Node.val <= 1000

class Solution
{
public:
    Node *connect(Node *root)
    {
        if(root == NULL) return NULL;
        queue<Node *> q;
        q.push(root);
        while(!q.empty())
        {
            int size = q.size();
            for(int i = 0 ; i < size ; i++)
            {
                Node *item = q.front();
                q.pop();
                if(size - 1 == i)
                    item -> next = NULL;
                if(size - 1 != i)
                    item->next = q.front();
                if(item->left != NULL)
                    q.push(item->left);
                if(item->right != NULL)
                    q.push(item->right);
            }
        }
        return root;
    }
};


// Source https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii/

Given a binary tree

struct Node {
  int val;
  Node *left;
  Node *right;
  Node *next;
}
Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.

Initially, all next pointers are set to NULL.

 

Example 1:


Input: root = [1,2,3,4,5,null,7]
Output: [1,#,2,3,#,4,5,7,#]
Explanation: Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.
Example 2:

Input: root = []
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 6000].
-100 <= Node.val <= 100

class Solution
{
public:
    Node *connect(Node *root)
    {
        if(root == NULL) return NULL;
        queue<Node *> q;
        q.push(root);
        while(!q.empty())
        {
            int size = q.size();
            for(int i = 0 ; i < size ; i++)
            {
                Node *item = q.front();
                q.pop();
                if(size - 1 == i)
                    item -> next = NULL;
                if(size - 1 != i)
                    item->next = q.front();
                if(item->left != NULL)
                    q.push(item->left);
                if(item->right != NULL)
                    q.push(item->right);
            }
        }
        return root;
    }
};


// Source https://leetcode.com/problems/pascals-triangle/

Given an integer numRows, return the first numRows of Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:


 

Example 1:

Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]
Example 2:

Input: numRows = 1
Output: [[1]]
 

Constraints:

1 <= numRows <= 30

class Solution
{
public:
    vector<vector<int>> generate(int numRows)
    {
        vector<vector<int>>pas_triangle;
        pas_triangle.push_back({1});
        if(numRows == 1)
            return pas_triangle;
        pas_triangle.push_back({1, 1});
        for(int i = 2; i < numRows; i++)
        {
            vector<int>t;
            t.push_back(1);
            for(int j = 0; j <= i - 2; j++)
            {
                t.push_back(pas_triangle[i - 1][j] + pas_triangle[i - 1][j + 1]);
            }
            t.push_back(1);
            pas_triangle.push_back(t);
        }
        return pas_triangle;
    }
};


// Source https://leetcode.com/problems/pascals-triangle-ii/

Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:


 

Example 1:

Input: rowIndex = 3
Output: [1,3,3,1]
Example 2:

Input: rowIndex = 0
Output: [1]
Example 3:

Input: rowIndex = 1
Output: [1,1]
 

Constraints:

0 <= rowIndex <= 33

class Solution
{
public:

    vector<int> getRow(int rowIndex)
    {
        if (rowIndex <= 0) return {1};
        vector<int> ans = {1, 1};
        if (rowIndex == 1) return ans;
        for(int i = 2; i <= rowIndex; i++)
        {
            vector<int>t;
            t.push_back(1);
            for(int j = 0; j <= i - 2; j++)
            {
                t.push_back(ans[j] + ans[j + 1]);
            }
            t.push_back(1);
            swap(ans, t);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/triangle/

Given a triangle array, return the minimum path sum from top to bottom.

For each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.

 

Example 1:

Input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]
Output: 11
Explanation: The triangle looks like:
   2
  3 4
 6 5 7
4 1 8 3
The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).
Example 2:

Input: triangle = [[-10]]
Output: -10
 

Constraints:

1 <= triangle.length <= 200
triangle[0].length == 1
triangle[i].length == triangle[i - 1].length + 1
-104 <= triangle[i][j] <= 104

class Solution
{
public:
    int n;
    int dp[201][201];

    int solve(vector<vector<int>> &triangle, int i, int j)
    {
        if(i == n - 1) return triangle[i][j];
        if(dp[i][j] != -1) return dp[i][j];

        int down = solve(triangle, i + 1, j);
        int diag = solve(triangle, i + 1, j + 1);

        return dp[i][j] = triangle[i][j] + min(down, diag);
    }

    int minimumTotal(vector<vector<int>> &triangle)
    {
        n = triangle.size();
        memset(dp, -1, sizeof(dp));
        return solve(triangle, 0, 0);
    }
};


// Source https://leetcode.com/problems/best-time-to-buy-and-sell-stock/

You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
Example 2:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.
 

Constraints:

1 <= prices.length <= 105
0 <= prices[i] <= 104

class Solution
{
public:
    int maxProfit(vector<int> &prices)
    {
        int n = prices.size();
        if (n == 1) return 0;
        vector<int> dp(n);
        dp[n - 1] = prices[n - 1];
        for (int i = n - 2; i >= 0; --i) dp[i] = max(prices[i], dp[i + 1]);
        int res = 0;
        for (int i = 0; i < n - 1; ++i) res = max(res, dp[i + 1] - prices[i]);
        return res;
    }
};


// Source https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/

You are given an integer array prices where prices[i] is the price of a given stock on the ith day.

On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.

Find and return the maximum profit you can achieve.

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 7
Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
Total profit is 4 + 3 = 7.
Example 2:

Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Total profit is 4.
Example 3:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.
 

Constraints:

1 <= prices.length <= 3 * 104
0 <= prices[i] <= 104

class Solution
{
public:
    int maxProfit(vector<int> &prices)
    {
        int profit = 0;

        for(int i = 1; i < prices.size(); i++)
        {
            profit += max(prices[i] - prices[i - 1], 0);
        }
        return profit;
    }
};


// Source https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/

You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete at most two transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: prices = [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.
Example 2:

Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.
Example 3:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.
 

Constraints:

1 <= prices.length <= 105
0 <= prices[i] <= 105

class Solution
{
public:
    int dp[4][100001];
    int helper(vector<int> &prices, int n, int day, int count)
    {
        if(day == n) return 0;
        if(count >= 4) return 0;
        if(dp[count][day] != -1) return dp[count][day];
        int notransaction = helper(prices, n, day + 1, count);
        int transaction = 0;
        bool buy = (count == 0 || count == 2);
        if(buy)
        {
            transaction = -prices[day] + helper(prices, n, day + 1, count + 1);
        }
        else
        {
            transaction = prices[day] + helper(prices, n, day + 1, count + 1);
        }
        return dp[count][day] = max(notransaction, transaction);
    }
    int maxProfit(vector<int> &prices)
    {
        int n = prices.size();
        memset(dp, -1, sizeof(dp));
        return helper(prices, n, 0, 0);
    }
};


// Source https://leetcode.com/problems/binary-tree-maximum-path-sum/

A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. 
A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.

The path sum of a path is the sum of the node's values in the path.

Given the root of a binary tree, return the maximum path sum of any non-empty path.

 

Example 1:


Input: root = [1,2,3]
Output: 6
Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.
Example 2:


Input: root = [-10,9,20,null,null,15,7]
Output: 42
Explanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.
 

Constraints:

The number of nodes in the tree is in the range [1, 3 * 104].
-1000 <= Node.val <= 1000

class Solution
{
public:

    int res = INT_MIN;
    int maxPathSum(TreeNode *root)
    {
        dfsHeight(root);
        return res;
    }

    int dfsHeight(TreeNode *root)
    {
        if(root == NULL) return 0;

        int lSum = max(0, dfsHeight(root->left));
        int rSum = max(0, dfsHeight(root->right));

        res = max(res, root->val + lSum + rSum);
        return root->val + max(lSum, rSum);
    }
};


// Source https://leetcode.com/problems/valid-palindrome/

A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. 
Alphanumeric characters include letters and numbers.

Given a string s, return true if it is a palindrome, or false otherwise.

 

Example 1:

Input: s = "A man, a plan, a canal: Panama"
Output: true
Explanation: "amanaplanacanalpanama" is a palindrome.
Example 2:

Input: s = "race a car"
Output: false
Explanation: "raceacar" is not a palindrome.
Example 3:

Input: s = " "
Output: true
Explanation: s is an empty string "" after removing non-alphanumeric characters.
Since an empty string reads the same forward and backward, it is a palindrome.
 

Constraints:

1 <= s.length <= 2 * 105
s consists only of printable ASCII characters.

class Solution
{
public:
    bool isPalindrome(string s)
    {
        string k;
        for(auto x : s)
        {
            if(isalpha(x) || isdigit(x))
            {
                k.push_back(tolower(x));
            }
        }
        int l = 0, hi = k.size() - 1;
        while(l < hi)
        {
            if(k[l] != k[hi])
            {
                return false;
            }
            l++;
            hi--;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/word-ladder-ii/

A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:

Every adjacent pair of words differs by a single letter.
Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
sk == endWord
Given two words, beginWord and endWord, and a dictionary wordList, return all the shortest transformation sequences from beginWord to endWord, or an empty list if no such sequence exists. 
Each sequence should be returned as a list of the words [beginWord, s1, s2, ..., sk].

 

Example 1:

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]
Output: [["hit","hot","dot","dog","cog"],["hit","hot","lot","log","cog"]]
Explanation: There are 2 shortest transformation sequences:
"hit" -> "hot" -> "dot" -> "dog" -> "cog"
"hit" -> "hot" -> "lot" -> "log" -> "cog"
Example 2:

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"]
Output: []
Explanation: The endWord "cog" is not in wordList, therefore there is no valid transformation sequence.
 

Constraints:

1 <= beginWord.length <= 5
endWord.length == beginWord.length
1 <= wordList.length <= 1000
wordList[i].length == beginWord.length
beginWord, endWord, and wordList[i] consist of lowercase English letters.
beginWord != endWord
All the words in wordList are unique.

class Solution
{
public:
    bool isAdj(string &a, string &b)
    {
        int diff = 0;
        for(int i = 0; i < a.size(); i++)
        {
            if(a[i] != b[i])
            {
                if(++diff == 2)
                {
                    return false;
                }
            }
        }
        return diff == 1;
    }
    void collectPaths(vector<string> &words, vector<vector<int>> &prevs,
                      vector<vector<string>> &result, int curr, vector<int> &currPath, int stop, int eindex)
    {
        if(stop == curr)
        {
            vector<string>temp;
            for(int i = currPath.size() - 1; i >= 0; i--)
            {
                temp.push_back(words[currPath[i]]);
            }
            temp.push_back(words[eindex]);
            result.push_back(temp);
            return;
        }
        for(int i = 0; i < prevs[curr].size(); i++)
        {
            currPath.push_back(prevs[curr][i]);
            collectPaths(words, prevs, result, prevs[curr][i], currPath, stop, eindex);
            currPath.pop_back();
        }
    }
    vector<vector<string>> findLadders(string beginWord, string endWord, vector<string> &wordList)
    {
        int eindex = -1;
        int root = -1;
        for(int i = 0; i < wordList.size(); i++)
        {
            if(wordList[i] == beginWord)
            {
                root = i;
            }
            else if(wordList[i] == endWord)
            {
                eindex = i;
            }
        }
        if(eindex == -1)
        {
            return {};
        }
        if(root == -1)
        {
            wordList.push_back(beginWord);
            root = wordList.size() - 1;
        }

        int n = wordList.size();
        vector<vector<int>>graph(n);
        for(int i = 0; i < n; i++)
        {
            for(int j = i + 1; j < n; j++)
            {
                if(isAdj(wordList[i], wordList[j]))
                {
                    graph[i].push_back(j);
                    graph[j].push_back(i);
                }
            }
        }

        vector<vector<int>>prevs(n);
        vector<int>steps(n, 0);
        queue<int>q;
        q.push(root);
        int level = 0;
        while(q.size())
        {
            int size = q.size();
            for(int i = 0; i < size; i++)
            {
                int curr = q.front();
                q.pop();

                for(auto adj : graph[curr])
                {
                    if(steps[adj])
                    {
                        if(steps[adj] == level + 1) // 如果steps[adj] < level + 1，则说明经过curr到达adj并不是到达adj的最短路径
                            prevs[adj].push_back(curr);
                        continue;
                    }
                    steps[adj] = level + 1;
                    prevs[adj].push_back(curr);
                    q.push(adj);
                }
            }
            level++;
        }

        vector<vector<string>>result;
        vector<int>currPath;
        collectPaths(wordList, prevs, result, eindex, currPath, root, eindex);
        return result;
    }
};


// Source https://leetcode.com/problems/word-ladder/

A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:

Every adjacent pair of words differs by a single letter.
Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
sk == endWord
Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, 
or 0 if no such sequence exists.

 

Example 1:

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]
Output: 5
Explanation: One shortest transformation sequence is "hit" -> "hot" -> "dot" -> "dog" -> cog", which is 5 words long.
Example 2:

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"]
Output: 0
Explanation: The endWord "cog" is not in wordList, therefore there is no valid transformation sequence.
 

Constraints:

1 <= beginWord.length <= 10
endWord.length == beginWord.length
1 <= wordList.length <= 5000
wordList[i].length == beginWord.length
beginWord, endWord, and wordList[i] consist of lowercase English letters.
beginWord != endWord
All the words in wordList are unique.

class Solution
{
public:
    bool isAdj(string &a, string &b)
    {
        int diff = 0;
        for(int i = 0; i < a.size(); i++)
        {
            if(a[i] != b[i])
            {
                if(++diff == 2)
                {
                    return false;
                }
            }
        }
        return diff == 1;
    }
    int ladderLength(string beginWord, string endWord, vector<string> &wordList)
    {
        int eindex = -1;
        int root = -1;
        for(int i = 0; i < wordList.size(); i++)
        {
            if(wordList[i] == beginWord)
            {
                root = i;
            }
            else if(wordList[i] == endWord)
            {
                eindex = i;
            }
        }
        if(eindex == -1)
        {
            return 0;
        }
        if(root == -1)
        {
            wordList.push_back(beginWord);
            root = wordList.size() - 1;
        }

        int n = wordList.size();
        vector<vector<int>>graph(n);
        for(int i = 0; i < n; i++)
        {
            for(int j = i + 1; j < n; j++)
            {
                if(isAdj(wordList[i], wordList[j]))
                {
                    graph[i].push_back(j);
                    graph[j].push_back(i);
                }
            }
        }

        vector<int>steps(n, 0);
        queue<int>q;
        q.push(root);
        int level = 0;
        while(q.size())
        {
            int size = q.size();
            for(int i = 0; i < size; i++)
            {
                int curr = q.front();
                q.pop();
                if (curr == eindex) return level + 1;
                for(auto adj : graph[curr])
                {
                    if(steps[adj]) continue;
                    steps[adj] = level + 1;
                    q.push(adj);
                }
            }
            level++;
        }
        return 0;
    }
};

// Source https://leetcode.com/problems/longest-consecutive-sequence/

Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.

You must write an algorithm that runs in O(n) time.

 

Example 1:

Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.
Example 2:

Input: nums = [0,3,7,2,5,8,4,6,0,1]
Output: 9
 

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109

class Solution
{
public:
    int longestConsecutive(vector<int> &nums)
    {
        int n = nums.size();
        if (n <= 1) return n;
        sort(nums.begin(), nums.end()) ;
        int candidate = nums[0] ;
        int count = 1, maxcount = 1 ;
        for (int i = 1 ; i < nums.size() ; i++)
        {
            if (nums[i] == candidate)
            {
                continue ;
            }
            if (nums[i] == candidate + 1)
            {
                count ++ ;
            }
            else
            {
                count = 1 ;
            }
            candidate = nums[i] ;
            maxcount = max(maxcount, count) ;
        }
        return maxcount ;
    }
};


// Source https://leetcode.com/problems/sum-root-to-leaf-numbers/

You are given the root of a binary tree containing digits from 0 to 9 only.

Each root-to-leaf path in the tree represents a number.

For example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123.
Return the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer.

A leaf node is a node with no children.

 

Example 1:


Input: root = [1,2,3]
Output: 25
Explanation:
The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.
Therefore, sum = 12 + 13 = 25.
Example 2:


Input: root = [4,9,0,5,1]
Output: 1026
Explanation:
The root-to-leaf path 4->9->5 represents the number 495.
The root-to-leaf path 4->9->1 represents the number 491.
The root-to-leaf path 4->0 represents the number 40.
Therefore, sum = 495 + 491 + 40 = 1026.
 

Constraints:

The number of nodes in the tree is in the range [1, 1000].
0 <= Node.val <= 9
The depth of the tree will not exceed 10.

class Solution
{
public:
    void rec(TreeNode *root, string &s, int &ans)
    {
        if(root == NULL)return ;
        s.push_back(root->val + '0');
        if(root->left == NULL && root->right == NULL)
        {
            ans += stoi(s);
            s.pop_back();
            return;
        }
        rec(root->left, s, ans);
        rec(root->right, s, ans);
        s.pop_back();
    }
    int sumNumbers(TreeNode *root)
    {
        int ans = 0;
        string s;
        s.reserve(256);
        s = "";
        rec(root, s, ans);
        return ans;
    }
};


// Source https://leetcode.com/problems/surrounded-regions/

Given an m x n matrix board containing 'X' and 'O', capture all regions that are 4-directionally surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.

 

Example 1:


Input: board = [["X","X","X","X"],["X","O","O","X"],["X","X","O","X"],["X","O","X","X"]]
Output: [["X","X","X","X"],["X","X","X","X"],["X","X","X","X"],["X","O","X","X"]]
Explanation: Surrounded regions should not be on the border, which means that any 'O' on the border of the board are not flipped to 'X'. Any 'O' that is not on the border and it is not connected to an 'O' on the border will be flipped to 'X'. Two cells are connected if they are adjacent cells connected horizontally or vertically.
Example 2:

Input: board = [["X"]]
Output: [["X"]]
 

Constraints:

m == board.length
n == board[i].length
1 <= m, n <= 200
board[i][j] is 'X' or 'O'.

class Solution
{
public:
    int m, n;

    void dfs(vector<vector<char>> &board, int x, int y)
    {
        if (x < 0 || x >= m || y < 0 || y >= n || board[x][y] == 'v' || board[x][y] == 'X') return ;
        board[x][y] = 'v';
        dfs(board, x + 1, y);
        dfs(board, x - 1, y);
        dfs(board, x, y + 1);
        dfs(board, x, y - 1);
    }

    void solve(vector<vector<char>> &board)
    {
        m = board.size();
        n = board[0].size();

        for (int i = 0; i < m; i++)
        {
            if (board[i][0] == 'O')
            {
                dfs(board, i, 0);
            }
            if (board[i][n - 1] == 'O')
            {
                dfs(board, i, n - 1);
            }
        }

        for (int j = 0; j < n; j++)
        {
            if (board[0][j] == 'O')
            {
                dfs(board, 0, j);
            }
            if (board[m - 1][j] == 'O')
            {
                dfs(board, m - 1, j);
            }
        }

        for (int i = 0; i < m; i++)
        {
            for (int j = 0; j < n; j++)
            {
                if (board[i][j] == 'v')
                {
                    board[i][j] = 'O';
                }
                else
                {
                    board[i][j] = 'X';
                }
            }
        }
    }
};


// Source https://leetcode.com/problems/palindrome-partitioning/

Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.

A palindrome string is a string that reads the same backward as forward.

 

Example 1:

Input: s = "aab"
Output: [["a","a","b"],["aa","b"]]
Example 2:

Input: s = "a"
Output: [["a"]]
 

Constraints:

1 <= s.length <= 16
s contains only lowercase English letters.

class Solution
{
public:
    int n;
    vector<vector<int>> isPali;

    void solve(string &s, int idx, vector<vector<string>> &ans, vector<string> &curr)
    {
        if(idx >= n)
        {
            ans.push_back(curr);
            return ;
        }
        for(int i = idx; i < n; i++)
        {
            if(isPali[idx][i])
            {
                curr.push_back(s.substr(idx, i - idx + 1));
                solve(s, i + 1, ans, curr);
                curr.pop_back();
            }
        }
    }

    vector<vector<string>> partition(string s)
    {
        n = s.size();
        isPali = vector<vector<int>>(n, vector<int>(n, 0));
        for(int i = 0; i < n; i++)
        {
            //pali for odd length
            int l = i, r = i;
            while(l >= 0 && r < n && s[l] == s[r])
            {
                isPali[l][r] = 1;
                l--, r++;
            }
            //pali for even length
            if(i + 1 < n)
            {
                l = i, r = i + 1;
                while(l >= 0 && r < n && s[l] == s[r])
                {
                    isPali[l][r] = 1;
                    l--, r++;
                }
            }
        }
        vector<vector<string>> ans;
        vector<string> curr;
        solve(s, 0, ans, curr);
        return ans;
    }
};


// Source https://leetcode.com/problems/palindrome-partitioning-ii/

Given a string s, partition s such that every substring of the partition is a palindrome.

Return the minimum cuts needed for a palindrome partitioning of s.

 

Example 1:

Input: s = "aab"
Output: 1
Explanation: The palindrome partitioning ["aa","b"] could be produced using 1 cut.
Example 2:

Input: s = "a"
Output: 0
Example 3:

Input: s = "ab"
Output: 1
 

Constraints:

1 <= s.length <= 2000
s consists of lowercase English letters only.

class Solution
{
public:
    int n;
    vector<vector<int>> isPali;
    vector<int> dp;

    int solve(string &s, int idx)
    {
        if(idx >= n) { return 0; }
        if(dp[idx] != -1) return dp[idx];
        int ans = 1e6;
        for(int i = n - 1; i >= idx; --i)
        {
            if(isPali[idx][i])
            {
                ans = min(ans, 1 + solve(s, i + 1));
            }
        }
        return dp[idx] = ans;
    }

    int minCut(string s)
    {
        n = s.size();
        isPali = vector<vector<int>>(n, vector<int>(n, 0));
        dp = vector<int>(n, -1);
        for(int i = 0; i < n; i++)
        {
            //pali for odd length
            int l = i, r = i;
            while(l >= 0 && r < n && s[l] == s[r])
            {
                isPali[l][r] = 1;
                l--, r++;
            }
            //pali for even length
            if(i + 1 < n)
            {
                l = i, r = i + 1;
                while(l >= 0 && r < n && s[l] == s[r])
                {
                    isPali[l][r] = 1;
                    l--, r++;
                }
            }
        }
        return solve(s, 0) - 1;
    }
};


// Source https://leetcode.com/problems/clone-graph/

Given a reference of a node in a connected undirected graph.

Return a deep copy (clone) of the graph.

Each node in the graph contains a value (int) and a list (List[Node]) of its neighbors.

class Node {
    public int val;
    public List<Node> neighbors;
}
 

Test case format:

For simplicity, each node's value is the same as the node's index (1-indexed). For example, the first node with val == 1, the second node with val == 2, and so on. 
The graph is represented in the test case using an adjacency list.

An adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.

The given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph.

 

Example 1:


Input: adjList = [[2,4],[1,3],[2,4],[1,3]]
Output: [[2,4],[1,3],[2,4],[1,3]]
Explanation: There are 4 nodes in the graph.
1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).
2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).
3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).
4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).
Example 2:


Input: adjList = [[]]
Output: [[]]
Explanation: Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.
Example 3:

Input: adjList = []
Output: []
Explanation: This an empty graph, it does not have any nodes.
 

Constraints:

The number of nodes in the graph is in the range [0, 100].
1 <= Node.val <= 100
Node.val is unique for each node.
There are no repeated edges and no self-loops in the graph.
The Graph is connected and all nodes can be visited starting from the given node.

class Solution
{
public:
    Node *nodeArr[101];
    Node *recur(Node *curr)
    {
        Node *temp = new Node(curr->val);
        nodeArr[curr->val] = temp;
        for(auto adj : curr->neighbors)
        {
            if(nodeArr[adj->val])
            {
                temp->neighbors.push_back(nodeArr[adj->val]);
            }
            else temp->neighbors.push_back(recur(adj));
        }
        return temp;
    }

    Node *cloneGraph(Node *node)
    {
        if(!node) return NULL;
        memset(nodeArr, NULL, sizeof(nodeArr));
        return recur(node);
    }
};


// Source https://leetcode.com/problems/gas-station/

There are n gas stations along a circular route, where the amount of gas at the ith station is gas[i].

You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. 
You begin the journey with an empty tank at one of the gas stations.

Given two integer arrays gas and cost, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1. 
If there exists a solution, it is guaranteed to be unique

 

Example 1:

Input: gas = [1,2,3,4,5], cost = [3,4,5,1,2]
Output: 3
Explanation:
Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
Travel to station 4. Your tank = 4 - 1 + 5 = 8
Travel to station 0. Your tank = 8 - 2 + 1 = 7
Travel to station 1. Your tank = 7 - 3 + 2 = 6
Travel to station 2. Your tank = 6 - 4 + 3 = 5
Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.
Therefore, return 3 as the starting index.
Example 2:

Input: gas = [2,3,4], cost = [3,4,3]
Output: -1
Explanation:
You can't start at station 0 or 1, as there is not enough gas to travel to the next station.
Let's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
Travel to station 0. Your tank = 4 - 3 + 2 = 3
Travel to station 1. Your tank = 3 - 3 + 3 = 3
You cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.
Therefore, you can't travel around the circuit once no matter where you start.
 

Constraints:

gas.length == n
cost.length == n
1 <= n <= 105
0 <= gas[i], cost[i] <= 104

gas[i] - cost[i] + gas[i + 1] - cost[i + 1] + ... + gas[n - 1] - cost[n - 1] + gas[0] - cost[0] + ... + gas[i - 1] - cost[i - 1]

sum(gas) - sum(cost) >= 0

class Solution
{
public:
    int canCompleteCircuit(vector<int> &gas, vector<int> &cost)
    {
        int n = gas.size();
        int gasSum = 0, costSum = 0, total = 0, idx = 0;
        for (int i = 0; i < n; ++i)
        {
            gasSum += gas[i];
            costSum += cost[i];
            total += (gas[i] - cost[i]);
            if (total < 0) { total = 0; idx = i + 1; }
        }
        if(gasSum < costSum)
            return -1;
        return idx;
    }
};


// Source https://leetcode.com/problems/candy/

There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.

You are giving candies to these children subjected to the following requirements:

Each child must have at least one candy.
Children with a higher rating get more candies than their neighbors.
Return the minimum number of candies you need to have to distribute the candies to the children.

 

Example 1:

Input: ratings = [1,0,2]
Output: 5
Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.
Example 2:

Input: ratings = [1,2,2]
Output: 4
Explanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.
The third child gets 1 candy because it satisfies the above two conditions.
 

Constraints:

n == ratings.length
1 <= n <= 2 * 104
0 <= ratings[i] <= 2 * 104

left[i] 记录ratings从i向左，单调递减的次数 k
ratings[i] > ratings[i - 1] > ratings[i - 2] > ... > ratings[i - k]
right[i] 记录ratings从i向右，单调递减的次数 k
ratings[i] < ratings[i + 1] < ratings[i + 2] < ... < ratings[i + k]

class Solution
{
public:
    int candy(vector<int> &ratings)
    {
        int n = ratings.size();
        vector<int>left(n, 0), right(n, 0);

        for(int i = 1; i < n; i++)
        {
            if(ratings[i] > ratings[i - 1])
                left[i] = 1 + left[i - 1];
        }

        for(int i = n - 2; i >= 0; --i)
        {
            if(ratings[i] > ratings[i + 1])
                right[i] = 1 + right[i + 1];
        }

        int ans = 0;
        for(int i = 0; i < n; i++)
        {
            ans += (1 + max(left[i], right[i]));
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/single-number/

Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.

 

Example 1:

Input: nums = [2,2,1]
Output: 1
Example 2:

Input: nums = [4,1,2,1,2]
Output: 4
Example 3:

Input: nums = [1]
Output: 1
 

Constraints:

1 <= nums.length <= 3 * 104
-3 * 104 <= nums[i] <= 3 * 104
Each element in the array appears twice except for one element which appears only once.

class Solution
{
public:
    int singleNumber(vector<int> &nums)
    {
        int ans = 0;
        for(auto x : nums)
            ans ^= x;
        return ans;
    }
};


// Source https://leetcode.com/problems/single-number-ii/

Given an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and return it.

You must implement a solution with a linear runtime complexity and use only constant extra space.

 

Example 1:

Input: nums = [2,2,3,2]
Output: 3
Example 2:

Input: nums = [0,1,0,1,0,1,99]
Output: 99
 

Constraints:

1 <= nums.length <= 3 * 104
-231 <= nums[i] <= 231 - 1
Each element in nums appears exactly three times except for one element which appears once.

class Solution
{
public:
    int singleNumber(vector<int> &nums)
    {
        vector<int> cnt(32, 0);
        for (auto val : nums)
        {
            for (int i = 0; i < 32; ++i)
            {
                if (val & (1 << i)) cnt[i]++;
            }
        }
        int res = 0;
        for (int i = 0; i < 32; ++i)
        {
            if (cnt[i] % 3) res |= (1 <<i);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/copy-list-with-random-pointer/

A linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null.

Construct a deep copy of the list. The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node. 
Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. 
None of the pointers in the new list should point to nodes in the original list.

For example, if there are two nodes X and Y in the original list, where X.random --> Y, then for the corresponding two nodes x and y in the copied list, x.random --> y.

Return the head of the copied linked list.

The linked list is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:

val: an integer representing Node.val
random_index: the index of the node (range from 0 to n-1) that the random pointer points to, or null if it does not point to any node.
Your code will only be given the head of the original linked list.

 

Example 1:


Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]
Output: [[7,null],[13,0],[11,4],[10,2],[1,0]]
Example 2:


Input: head = [[1,1],[2,1]]
Output: [[1,1],[2,1]]
Example 3:



Input: head = [[3,null],[3,0],[3,null]]
Output: [[3,null],[3,0],[3,null]]
 

Constraints:

0 <= n <= 1000
-104 <= Node.val <= 104
Node.random is null or is pointing to some node in the linked list.

class Solution
{
public:
    Node *copyRandomList(Node *head)
    {
        if(!head) return head;
 
       Node *curr = head;

        // STEP -> 1 : Create copy nodes of original nodes
        // by inserting copy node after original node
        while(curr != NULL)
        {
            Node *copy = new Node(curr->val);
            Node *next = curr->next;
            curr->next = copy;
            copy->next = next;
            curr = next;
        }

        //STEP -> 2 : Work for random pointers
        curr = head;
        while(curr)
        {
            Node *copy = curr->next;
            if(curr->random) copy->random = curr->random->next;
            curr = copy->next;
        }

        //Step -> 3 : DeLink orginal with copy
        curr = head;
        Node *ansHead = curr->next;
        while(curr)
        {
            Node *copy = curr->next;
            if(!copy->next)
            {
                curr->next = copy->next = NULL;
                break;
            }
            curr->next = copy->next;
            curr = curr->next;
            copy->next = curr->next;
            copy = copy->next;
        }

        return ansHead;
    }
};


// Source https://leetcode.com/problems/word-break/

Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.

Note that the same word in the dictionary may be reused multiple times in the segmentation.

 

Example 1:

Input: s = "leetcode", wordDict = ["leet","code"]
Output: true
Explanation: Return true because "leetcode" can be segmented as "leet code".
Example 2:

Input: s = "applepenapple", wordDict = ["apple","pen"]
Output: true
Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
Note that you are allowed to reuse a dictionary word.
Example 3:

Input: s = "catsandog", wordDict = ["cats","dog","sand","and","cat"]
Output: false
 

Constraints:

1 <= s.length <= 300
1 <= wordDict.length <= 1000
1 <= wordDict[i].length <= 20
s and wordDict[i] consist of only lowercase English letters.
All the strings of wordDict are unique.

class Solution
{
public:
    int n;
    int minL, maxL;
    unordered_set<string> strSet;
    vector<int> dp;

    int recur(string &s, int idx)
    {
        if(idx >= n) {return 1; }
        if(dp[idx] != -1) return dp[idx];
        int ans = 0;
        for (int len = minL; len <= maxL && len <= n - idx && !ans; ++len)
        {
            string str = s.substr(idx, len);
            if(strSet.find(str) != strSet.end())
            {
                ans = recur(s, idx + len);
            }
        }
        return dp[idx] = ans;
    }

    bool wordBreak(string &s, vector<string> &wordDict)
    {
        n = s.size();
        dp = vector<int>(n, -1);
        minL = 1000, maxL = 1;
        for(auto &w : wordDict)
        {
            strSet.insert(w);
            minL = min(minL, (int)w.size());
            maxL = max(maxL, (int)w.size());
        }
        return recur(s, 0);
    }
};


// Source https://leetcode.com/problems/word-break-ii/

Given a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in any order.

Note that the same word in the dictionary may be reused multiple times in the segmentation.

 

Example 1:

Input: s = "catsanddog", wordDict = ["cat","cats","and","sand","dog"]
Output: ["cats and dog","cat sand dog"]
Example 2:

Input: s = "pineapplepenapple", wordDict = ["apple","pen","applepen","pine","pineapple"]
Output: ["pine apple pen apple","pineapple pen apple","pine applepen apple"]
Explanation: Note that you are allowed to reuse a dictionary word.
Example 3:

Input: s = "catsandog", wordDict = ["cats","dog","sand","and","cat"]
Output: []
 

Constraints:

1 <= s.length <= 20
1 <= wordDict.length <= 1000
1 <= wordDict[i].length <= 10
s and wordDict[i] consist of only lowercase English letters.
All the strings of wordDict are unique.

class Solution
{
public:
    int n;
    int minL, maxL;
    unordered_set<string> strSet;
    unordered_map<int, vector<string>> dp;

    vector<string> recur(string &s, int idx)
    {
        if(idx >= n) return {}; 
        if(dp.count(idx)) return dp[idx];
        vector<string> ans;
        for (int len = minL; len <= maxL && len <= n - idx; ++len)
        {
            string str = s.substr(idx, len);
            if(strSet.find(str) != strSet.end())
            {
                if (len == n - idx) ans.push_back(str);
                else
                {
                    vector<string> retVec = recur(s, idx + len);
                    for(auto &retStr : retVec)
                        retStr = str + " " + retStr;
                    ans.insert(ans.end(), retVec.begin(), retVec.end());
                }
            }
        }
        return dp[idx] = ans;
    }

    vector<string> wordBreak(string s, vector<string> &wordDict)
    {
        n = s.size();
        minL = 1000, maxL = 1;
        for(auto &w : wordDict)
        {
            strSet.insert(w);
            minL = min(minL, (int)w.size());
            maxL = max(maxL, (int)w.size());
        }
        return recur(s, 0);
    }
};


// Source https://leetcode.com/problems/linked-list-cycle/

Given head, the head of a linked list, determine if the linked list has a cycle in it.

There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. 
Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.

Return true if there is a cycle in the linked list. Otherwise, return false.

 

Example 1:


Input: head = [3,2,0,-4], pos = 1
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).
Example 2:


Input: head = [1,2], pos = 0
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 0th node.
Example 3:


Input: head = [1], pos = -1
Output: false
Explanation: There is no cycle in the linked list.
 

Constraints:

The number of the nodes in the list is in the range [0, 104].
-105 <= Node.val <= 105
pos is -1 or a valid index in the linked-list.

class Solution
{
public:
    bool hasCycle(ListNode *head)
    {
        if(head == NULL || head->next == NULL)
        {
            return false;
        }
        ListNode *slow = head;
        ListNode *fast = head;
        do
        {
            slow = slow->next;
            fast = fast->next->next;
        }
        while(fast != slow && fast != NULL && fast->next != NULL);
        if(fast == slow) return true;
        return false;
    }
};


// Source https://leetcode.com/problems/linked-list-cycle-ii/

Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.

There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. 
Internally, pos is used to denote the index of the node that tail's next pointer is connected to (0-indexed). It is -1 if there is no cycle. Note that pos is not passed as a parameter.

Do not modify the linked list.

 

Example 1:


Input: head = [3,2,0,-4], pos = 1
Output: tail connects to node index 1
Explanation: There is a cycle in the linked list, where tail connects to the second node.
Example 2:


Input: head = [1,2], pos = 0
Output: tail connects to node index 0
Explanation: There is a cycle in the linked list, where tail connects to the first node.
Example 3:


Input: head = [1], pos = -1
Output: no cycle
Explanation: There is no cycle in the linked list.
 

Constraints:

The number of the nodes in the list is in the range [0, 104].
-105 <= Node.val <= 105
pos is -1 or a valid index in the linked-list.

fast每次走2步，slow每次走一步，当fast等于slow时，fast走过的步数为slow走过的步数的2倍
fast走过的步数为head到环的起始点的步数 + 环的起始点到相遇点的步数 + 相遇点的步数 到 相遇点的步数 （绕环m圈）
slow走过的步数为head到环的起始点的步数 + 环的起始点到相遇点的步数
head到环的起始点的步数 + 环的起始点到相遇点的步数 = 相遇点的步数 到 相遇点的步数 （绕环m圈）= 环的起始点到相遇点的步数 + 相遇点到环的起始点的步数 + 绕环m - 1圈
head到环的起始点的步数 = 相遇点到环的起始点的步数 + 绕环m - 1圈

class Solution
{
public:
    ListNode *detectCycle(ListNode *head)
    {
        if(head == NULL || head->next == NULL)
        {
            return NULL;
        }
        ListNode *slow = head;
        ListNode *fast = head;
        do
        {
            slow = slow->next;
            fast = fast->next->next;
        }
        while(fast != slow && fast != NULL && fast->next != NULL);
        if(fast == slow)
        {
            if(slow == head)
            {
                return head;
            }
            fast = head;
            while(fast !=slow)
                fast=fast->next, slow=slow->next;
            return fast;
        }
        return NULL;
    }
};


// Source https://leetcode.com/problems/reorder-list/

You are given the head of a singly linked-list. The list can be represented as:

L0 → L1 → … → Ln - 1 → Ln
Reorder the list to be on the following form:

L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …
You may not modify the values in the list's nodes. Only nodes themselves may be changed.

L0 L1 L2 L3 L4 L5 L6 L7 L8 
L0 L1 L2 L3 L4
    L8 L7 L6 L5
L0 L1 L2 L3 L4 L5 L6 L7 L8 L9
L0 L1 L2 L3 L4  L5
    L9 L8  L7 L6

Example 1:


Input: head = [1,2,3,4]
Output: [1,4,2,3]
Example 2:


Input: head = [1,2,3,4,5]
Output: [1,5,2,4,3]
 

Constraints:

The number of nodes in the list is in the range [1, 5 * 104].
1 <= Node.val <= 1000

class Solution
{
public:
    void reorderList(ListNode *head)
    {
        if (!head || !head->next || !head->next->next) return;
        ListNode *fast = head, *slow = head;
        while (fast != NULL && fast->next != NULL)
        {
            slow = slow->next;
            fast = fast->next->next;
        }
        ListNode *node = slow->next;
        slow->next = NULL;
        ListNode *curr = node, *prev = NULL;
        while (curr)
        {
            ListNode *next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }
        ListNode *node1 = prev;
        prev = head;
        while (prev && node1)
        {
            ListNode *next = prev->next;
            prev->next = node1;
            node1 = node1->next;
            prev->next->next = next;
            prev = next;
        }
    }
};


// Source https://leetcode.com/problems/binary-tree-preorder-traversal/

Given the root of a binary tree, return the preorder traversal of its nodes' values.

 

Example 1:


Input: root = [1,null,2,3]
Output: [1,2,3]
Example 2:

Input: root = []
Output: []
Example 3:

Input: root = [1]
Output: [1]
 

Constraints:

The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100

class Solution
{
public:
    vector<int>preOrderArr;
    void recur(TreeNode *node)
    {
        if(!node)return ;
        preOrderArr.push_back(node->val);
        recur(node->left);
        recur(node->right);
    }
    vector<int> preorderTraversal(TreeNode *root)
    {
        recur(root);
        return preOrderArr;
    }
};


// Source https://leetcode.com/problems/binary-tree-postorder-traversal/

Given the root of a binary tree, return the postorder traversal of its nodes' values.

 

Example 1:


Input: root = [1,null,2,3]
Output: [3,2,1]
Example 2:

Input: root = []
Output: []
Example 3:

Input: root = [1]
Output: [1]
 

Constraints:

The number of the nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100

class Solution
{
public:
    vector<int>postOrderArr;
    void recur(TreeNode *node)
    {
        if(!node)return ;
        recur(node->left);
        recur(node->right);
        postOrderArr.push_back(node->val);
    }
    vector<int> postorderTraversal(TreeNode *root)
    {
        recur(root);
        return postOrderArr;
    }
};


// Source https://leetcode.com/problems/lru-cache/

Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.

Implement the LRUCache class:

LRUCache(int capacity) Initialize the LRU cache with positive size capacity.
int get(int key) Return the value of the key if the key exists, otherwise return -1.
void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. 
If the number of keys exceeds the capacity from this operation, evict the least recently used key.
The functions get and put must each run in O(1) average time complexity.

 

Example 1:

Input
["LRUCache", "put", "put", "get", "put", "get", "put", "get", "get", "get"]
[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]
Output
[null, null, null, 1, null, -1, null, -1, 3, 4]

Explanation
LRUCache lRUCache = new LRUCache(2);
lRUCache.put(1, 1); // cache is {1=1}
lRUCache.put(2, 2); // cache is {1=1, 2=2}
lRUCache.get(1);    // return 1
lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}
lRUCache.get(2);    // returns -1 (not found)
lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}
lRUCache.get(1);    // return -1 (not found)
lRUCache.get(3);    // return 3
lRUCache.get(4);    // return 4
 

Constraints:

1 <= capacity <= 3000
0 <= key <= 104
0 <= value <= 105
At most 2 * 105 calls will be made to get and put.

struct Node
{
    Node *prev;
    Node *next;
    int val;
    int key;

    Node(int val, int key)
    {
        this->val = val;
        this->key = key;
        prev = NULL;
        next = NULL;
    }

};
class LRUCache
{
public:
    Node *dummyHead;
    Node *endPtr;
    unordered_map<int, Node *> mp;
    int capacity;

    LRUCache(int capacity)
    {
        this->capacity = capacity;
        dummyHead = new Node(0, -1);
        endPtr = dummyHead;
    }

    void remove(Node *node)
    {
        if(node->next)
        {
            Node *prev = node->prev;
            Node *next = node->next;
            prev->next = next;
            next->prev = prev;
        }
        else
        {
            endPtr = endPtr->prev;
            endPtr->next = NULL;
        }

        return;
    }

    void insert(Node *node)
    {
        node->prev = endPtr;
        node->next = NULL;
        endPtr->next = node;
        endPtr = endPtr->next;

        return;
    }

    int get(int key)
    {
        if(mp.find(key) == mp.end())
            return -1;
        Node *curr = mp[key];

        remove(curr);
        insert(curr);

        return curr->val;
    }

    void put(int key, int value)
    {
        if(mp.find(key) != mp.end())
        {
            Node *curr = mp[key];
            curr->val = value;
            remove(curr);
            insert(curr);
            return ;
        }
        if(mp.size() == capacity)
        {
            Node *node = dummyHead->next;
            remove(node);
            mp.erase(node->key);
        }

        Node *node = new Node(value, key);
        mp[key] = node;
        insert(node);
    }
};


// Source https://leetcode.com/problems/insertion-sort-list/

Given the head of a singly linked list, sort the list using insertion sort, and return the sorted list's head.

The steps of the insertion sort algorithm:

Insertion sort iterates, consuming one input element each repetition and growing a sorted output list.
At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list and inserts it there.
It repeats until no input elements remain.
The following is a graphical example of the insertion sort algorithm. The partially sorted list (black) initially contains only the first element in the list. One element (red) is removed from the input data and inserted in-place into the sorted list with each iteration.


 

Example 1:


Input: head = [4,2,1,3]
Output: [1,2,3,4]
Example 2:


Input: head = [-1,5,3,4,0]
Output: [-1,0,3,4,5]
 

Constraints:

The number of nodes in the list is in the range [1, 5000].
-5000 <= Node.val <= 5000

class Solution
{
public:
    ListNode *insertionSortList(ListNode *head)
    {
        if (head == NULL || head->next == NULL) return head;
        ListNode *dummy = new ListNode(0);
        ListNode *node = new ListNode(head->val);
        dummy->next = node;
        head = head->next;
        while (head)
        {
            ListNode *prev = dummy;
            node = dummy->next;
            int val = head->val;
            while (node)
            {
                if (node->val >= val)
                {
                    ListNode *temp = new ListNode(val);
                    prev->next = temp;
                    temp->next = node;
                    break;
                }
                prev = node;
                node = node->next;
            }
            if (node == nullptr)
            {
                ListNode *temp = new ListNode(val);
                prev->next = temp;
            }
            head = head->next;
        }
        return dummy->next;
    }
};


// Source https://leetcode.com/problems/sort-list/

Given the head of a linked list, return the list after sorting it in ascending order.

 

Example 1:


Input: head = [4,2,1,3]
Output: [1,2,3,4]
Example 2:


Input: head = [-1,5,3,4,0]
Output: [-1,0,3,4,5]
Example 3:

Input: head = []
Output: []
 

Constraints:

The number of nodes in the list is in the range [0, 5 * 104].
-105 <= Node.val <= 105

class Solution
{
public:
    ListNode *sortList(ListNode *head)
    {
        vector<int> v;
        ListNode *aux;
        aux = head;
        while(aux != nullptr)
        {
            v.emplace_back(aux->val);
            aux = aux->next;
        }
        sort(v.begin(), v.end());
        aux = head;
        int i = 0;
        while(aux != nullptr)
        {
            aux->val = v[i];
            ++i;
            aux = aux->next;
        }
        return head;
    }
};


// Source https://leetcode.com/problems/max-points-on-a-line/

Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.

 

Example 1:


Input: points = [[1,1],[2,2],[3,3]]
Output: 3
Example 2:


Input: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]
Output: 4
 

Constraints:

1 <= points.length <= 300
points[i].length == 2
-104 <= xi, yi <= 104
All the points are unique.

(y - y1) / (x - x1) = (y2 - y1) / (x2 - x1)
(y2 - y1) * (x - x1) = (x2 - x1) * (y - y1)

class Solution
{
public :

    int maxPoints(vector<vector<int>> &points)
    {
        if(points.size() <= 2) return points.size();
        int res = 0;
        int n = points.size();
        for(int i = 0; i < n; i++)
        {
            for(int j = i + 1; j < n; j++)
            {
                int x1 = points[i][0];
                int x2 = points[j][0];
                int y1 = points[i][1];
                int y2 = points[j][1];

                int total = 2;
                for(int k = 0; k < n && k != i && k != j; k++)
                {
                    int x = points[k][0];
                    int y = points[k][1];
                    if((y2 - y1) * (x - x1) == (x2 - x1) * (y - y1))
                        total++;
                }
                res = max(res, total);
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/evaluate-reverse-polish-notation/

Evaluate the value of an arithmetic expression in Reverse Polish Notation.

Valid operators are +, -, *, and /. Each operand may be an integer or another expression.

Note that division between two integers should truncate toward zero.

It is guaranteed that the given RPN expression is always valid. That means the expression would always evaluate to a result, and there will not be any division by zero operation.

 

Example 1:

Input: tokens = ["2","1","+","3","*"]
Output: 9
Explanation: ((2 + 1) * 3) = 9
Example 2:

Input: tokens = ["4","13","5","/","+"]
Output: 6
Explanation: (4 + (13 / 5)) = 6
Example 3:

Input: tokens = ["10","6","9","3","+","-11","*","/","*","17","+","5","+"]
Output: 22
Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22
 

Constraints:

1 <= tokens.length <= 104
tokens[i] is either an operator: "+", "-", "*", or "/", or an integer in the range [-200, 200].

class Solution
{
public:
    int evalRPN(vector<string> &tokens)
    {
        stack<int> s;
        int n = tokens.size();
        int n1, n2, res = 0;
        for (int i = 0; i < n; ++i)
        {
            if (tokens[i] == "+" || tokens[i] == "-" || tokens[i] == "*" || tokens[i] == "/")
            {
                n2 = s.top();
                s.pop();
                n1 = s.top();
                s.pop();
                if (tokens[i] == "+")
                {
                    res = n1 + n2;
                }
                else if (tokens[i] == "-")
                {
                    res = n1 - n2;
                }
                else if (tokens[i] == "*")
                {
                    res = n1 * n2;
                }
                else
                {
                    res = static_cast<int>(trunc((double)n1 / n2));
                }
                s.push(res);
            }
            else
            {
                s.push(stoi(tokens[i]));
            }
        }
        return s.top();
    }
};


// Source https://leetcode.com/problems/reverse-words-in-a-string/

Given an input string s, reverse the order of the words.

A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.

Return a string of the words in reverse order concatenated by a single space.

Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. 
Do not include any extra spaces.

 

Example 1:

Input: s = "the sky is blue"
Output: "blue is sky the"
Example 2:

Input: s = "  hello world  "
Output: "world hello"
Explanation: Your reversed string should not contain leading or trailing spaces.
Example 3:

Input: s = "a good   example"
Output: "example good a"
Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.
 

Constraints:

1 <= s.length <= 104
s contains English letters (upper-case and lower-case), digits, and spaces ' '.
There is at least one word in s.

class Solution
{
public:
    string reverseWords(string s)
    {
        stack<string> st ;
        int n = s.length();
        int i = 0 ;
        while (i < n)
        {
            while (i < n && s[i] == ' ')
            {
                i++ ;
            }
            string word = "" ;
            int j = i ;
            while (j < n && s[j] != ' ')
            {
                j++ ;
            }
            for (int k = i ; k < j ; k++)
            {
                word += s[k] ;
            }
            if (j > i) st.push(word) ;
            i = j ;
        }

        string res = "" ;
        while (!st.empty())
        {
            res += st.top() ;
            st.pop() ;
            res += " " ;
        }

        while (res.back() == ' ')
            res.pop_back() ;

        return res ;
    }
};


// Source https://leetcode.com/problems/maximum-product-subarray/

Given an integer array nums, find a contiguous non-empty subarray within the array that has the largest product, and return the product.

The test cases are generated so that the answer will fit in a 32-bit integer.

A subarray is a contiguous subsequence of the array.

 

Example 1:

Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.
Example 2:

Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.
 

Constraints:

1 <= nums.length <= 2 * 104
-10 <= nums[i] <= 10
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

class Solution
{
public:
    int maxProduct(vector<int> &nums)
    {
        int n = nums.size();
        vector<long> dpMax(n, INT_MIN);
        vector<long> dpMin(n, INT_MAX);
        dpMax[0] = nums[0];
        dpMin[0] = nums[0];
        long res = nums[0];
        for (int i = 1; i < n; ++i)
        {
            long val = nums[i];
            long temp1 = dpMax[i - 1] * val;
            long temp2 = dpMin[i - 1] * val;
            dpMax[i] = max(val, max(temp1, temp2));
            dpMin[i] = min(val, min(temp1, temp2));
            res = max(res, dpMax[i]);
        }
        return (int)res;
    }
};


// Source https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/

Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of unique elements, return the minimum element of this array.

You must write an algorithm that runs in O(log n) time.

 

Example 1:

Input: nums = [3,4,5,1,2]
Output: 1
Explanation: The original array was [1,2,3,4,5] rotated 3 times.
Example 2:

Input: nums = [4,5,6,7,0,1,2]
Output: 0
Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.
Example 3:

Input: nums = [11,13,15,17]
Output: 11
Explanation: The original array was [11,13,15,17] and it was rotated 4 times. 
 

Constraints:

n == nums.length
1 <= n <= 5000
-5000 <= nums[i] <= 5000
All the integers of nums are unique.
nums is sorted and rotated between 1 and n times.

class Solution
{
public:
    int findMin(vector<int> &nums)
    {
        int n = nums.size();
        if(n == 1) return nums[0];
        if(n == 2) return min(nums[0], nums[1]);
        int i = 1;
        for(; i < n && nums[i] == nums[i - 1]; ++i);
        if (i == n) return nums[0];
        if (nums[0] > nums[i])
        {
            return nums[i];
        }
        else if(nums[i] <= nums[n - 1])
        {
            return nums[0];
        }
        int low = i, high = n - 1;
        int idx = i;
        while (low <= high)
        {
            int mid = (low + high) / 2;
            if (nums[mid] > nums[0] && nums[mid] > nums[n - 1])
            {
                idx = mid;
                low = mid + 1;
            }
            else
            {
                high = mid - 1;
            }
        }
        return nums[idx + 1];
    }
};


// Source https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/

Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,4,4,5,6,7] might become:

[4,5,6,7,0,1,4] if it was rotated 4 times.
[0,1,4,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums that may contain duplicates, return the minimum element of this array.

You must decrease the overall operation steps as much as possible.

 

Example 1:

Input: nums = [1,3,5]
Output: 1
Example 2:

Input: nums = [2,2,2,0,1]
Output: 0
 

Constraints:

n == nums.length
1 <= n <= 5000
-5000 <= nums[i] <= 5000
nums is sorted and rotated between 1 and n times.

class Solution
{
public:
    int findMin(vector<int> &nums)
    {
        int n = nums.size();
        if(n == 1) return nums[0];
        if(n == 2) return min(nums[0], nums[1]);
        int i = 1;
        for(; i < n && nums[i] == nums[i - 1]; ++i);
        if (i == n) return nums[0];
        if (nums[0] > nums[i])
        {
            return nums[i];
        }
        else if(nums[i] <= nums[n - 1])
        {
            return nums[0];
        }
        int low = i, high = n - 1;
        int idx = i;
        while (low <= high)
        {
            int mid = (low + high) / 2;
            if (nums[mid] > nums[0] && nums[mid] > nums[n - 1])
            {
                idx = mid;
                low = mid + 1;
            }
            else
            {
                high = mid - 1;
            }
        }
        return nums[idx + 1];
    }
};


// Source https://leetcode.com/problems/min-stack/

Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

Implement the MinStack class:

MinStack() initializes the stack object.
void push(int val) pushes the element val onto the stack.
void pop() removes the element on the top of the stack.
int top() gets the top element of the stack.
int getMin() retrieves the minimum element in the stack.
 

Example 1:

Input
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

Output
[null,null,null,null,-3,null,0,-2]

Explanation
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2
 

Constraints:

-231 <= val <= 231 - 1
Methods pop, top and getMin operations will always be called on non-empty stacks.
At most 3 * 104 calls will be made to push, pop, top, and getMin.

class MinStack
{
private:
    stack<int> s1;
    stack<int> s2;   //从栈底到栈顶单调递减
public:
    void push(int val)
    {
        s1.push(val);
        if(s2.empty() || val <= s2.top())
            s2.push(val);
    }
    void pop()
    {
        if(s1.top() == s2.top())
            s2.pop();
        s1.pop();
    }
    int top()
    {
        return s1.top();
    }
    int getMin()
    {
        return s2.top();
    }
};


// Source https://leetcode.com/problems/intersection-of-two-linked-lists/

Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.

For example, the following two linked lists begin to intersect at node c1:


The test cases are generated such that there are no cycles anywhere in the entire linked structure.

Note that the linked lists must retain their original structure after the function returns.

Custom Judge:

The inputs to the judge are given as follows (your program is not given these inputs):

intersectVal - The value of the node where the intersection occurs. This is 0 if there is no intersected node.
listA - The first linked list.
listB - The second linked list.
skipA - The number of nodes to skip ahead in listA (starting from the head) to get to the intersected node.
skipB - The number of nodes to skip ahead in listB (starting from the head) to get to the intersected node.
The judge will then create the linked structure based on these inputs and pass the two heads, headA and headB to your program. 
If you correctly return the intersected node, then your solution will be accepted.

 

Example 1:


Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3
Output: Intersected at '8'
Explanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect).
From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.
Example 2:


Input: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1
Output: Intersected at '2'
Explanation: The intersected node's value is 2 (note that this must not be 0 if the two lists intersect).
From the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.
Example 3:


Input: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2
Output: No intersection
Explanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.
Explanation: The two lists do not intersect, so return null.
 

Constraints:

The number of nodes of listA is in the m.
The number of nodes of listB is in the n.
1 <= m, n <= 3 * 104
1 <= Node.val <= 105
0 <= skipA < m
0 <= skipB < n
intersectVal is 0 if listA and listB do not intersect.
intersectVal == listA[skipA] == listB[skipB] if listA and listB intersect.

class Solution
{
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB)
    {
        ListNode *temp = headA, *temp2 = headB;
        int cnt = 0, cnt2 = 0;
        while(temp)
        {
            cnt++;
            temp = temp->next;
        }
        while(temp2)
        {
            cnt2++;
            temp2 = temp2->next;
        }
        int diff = abs(cnt2 - cnt);
        if(cnt > cnt2)
        {
            temp = headA;
            temp2 = headB;
        }
        else
        {
            temp = headB;
            temp2 = headA;
        }
        while(temp && diff--)
        {
            temp = temp->next;
        }

        while(temp != NULL && temp2 != NULL)
        {
            if(temp == temp2)
            {
                return temp;
            }
            temp = temp->next;
            temp2 = temp2->next;
        }

        return NULL;
    }
};


// Source https://leetcode.com/problems/find-peak-element/

A peak element is an element that is strictly greater than its neighbors.

Given an integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.

You may imagine that nums[-1] = nums[n] = -∞.

You must write an algorithm that runs in O(log n) time.

 

Example 1:

Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.
Example 2:

Input: nums = [1,2,1,3,5,6,4]
Output: 5
Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.
 

Constraints:

1 <= nums.length <= 1000
-231 <= nums[i] <= 231 - 1
nums[i] != nums[i + 1] for all valid i.

class Solution
{
public:
    int findPeakElement(vector<int> &nums)
    {
        int n = nums.size();
        if(n == 1) return 0;
        vector<int>left(n, 0), right(n, 0);
        for(int i = 1; i < n; i++)
        {
            if(nums[i] > nums[i - 1])
                left[i] = 1 + left[i - 1];
        }

        for(int i = n - 2; i >= 0; --i)
        {
            if(nums[i] > nums[i + 1])
                right[i] = 1 + right[i + 1];
        }

        if (right[0] > 0) return 0;
        if (left[n - 1] > 0) return n - 1;
        for(int i = 1; i < n - 1; i++)
        {
            if (left[i] > 0 && right[i] > 0) return i;
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/maximum-gap/

Given an integer array nums, return the maximum difference between two successive elements in its sorted form. If the array contains less than two elements, return 0.

You must write an algorithm that runs in linear time and uses linear extra space.

 

Example 1:

Input: nums = [3,6,9,1]
Output: 3
Explanation: The sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3.
Example 2:

Input: nums = [10]
Output: 0
Explanation: The array contains less than 2 elements, therefore return 0.
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 109

class Solution
{
public:
    int maximumGap(vector<int> &nums)
    {
        int ans = INT_MIN;
        if(nums.size() < 2)
            return 0;
        sort(nums.begin(), nums.end());
        for (int i = 1; i < nums.size(); i++)
        {
            ans = max(ans, nums[i] - nums[i - 1]);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/compare-version-numbers/

Given two version numbers, version1 and version2, compare them.

Version numbers consist of one or more revisions joined by a dot '.'. Each revision consists of digits and may contain leading zeros. 
Every revision contains at least one character. Revisions are 0-indexed from left to right, with the leftmost revision being revision 0, the next revision being revision 1, and so on. 
For example 2.5.33 and 0.1 are valid version numbers.

To compare version numbers, compare their revisions in left-to-right order. Revisions are compared using their integer value ignoring any leading zeros. 
This means that revisions 1 and 001 are considered equal. If a version number does not specify a revision at an index, then treat the revision as 0. 
For example, version 1.0 is less than version 1.1 because their revision 0s are the same, but their revision 1s are 0 and 1 respectively, and 0 < 1.

Return the following:

If version1 < version2, return -1.
If version1 > version2, return 1.
Otherwise, return 0.
 

Example 1:

Input: version1 = "1.01", version2 = "1.001"
Output: 0
Explanation: Ignoring leading zeroes, both "01" and "001" represent the same integer "1".
Example 2:

Input: version1 = "1.0", version2 = "1.0.0"
Output: 0
Explanation: version1 does not specify revision 2, which means it is treated as "0".
Example 3:

Input: version1 = "0.1", version2 = "1.1"
Output: -1
Explanation: version1's revision 0 is "0", while version2's revision 0 is "1". 0 < 1, so version1 < version2.
 

Constraints:

1 <= version1.length, version2.length <= 500
version1 and version2 only contain digits and '.'.
version1 and version2 are valid version numbers.
All the given revisions in version1 and version2 can be stored in a 32-bit integer.

class Solution
{
public:
    int compareVersion(string version1, string version2)
    {
        int i = 0, j = 0;

        int n = version1.size();
        int m = version2.size();

        while(i < n || j < m)
        {
            int n1 = 0;
            int n2 = 0;

            while(i < n && version1[i] != '.')
            {
                n1 = n1 * 10 + version1[i] - '0';
                i++;
            }
            while(j < m && version2[j] != '.')
            {
                n2 = n2 * 10 + version2[j] - '0';
                j++;
            }

            if(n1 > n2)
            {
                return 1;
            }
            else if(n1 < n2)
            {
                return -1;
            }
            else
            {
                i++;
                j++;
            }
        }
        return 0;
    }
};


// Source https://leetcode.com/problems/fraction-to-recurring-decimal/

Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.

If the fractional part is repeating, enclose the repeating part in parentheses.

If multiple answers are possible, return any of them.

It is guaranteed that the length of the answer string is less than 104 for all the given inputs.

 

Example 1:

Input: numerator = 1, denominator = 2
Output: "0.5"
Example 2:

Input: numerator = 2, denominator = 1
Output: "2"
Example 3:

Input: numerator = 4, denominator = 333
Output: "0.(012)"
 

Constraints:

-231 <= numerator, denominator <= 231 - 1
denominator != 0

4 / 333
40 / 333
400 / 333 = 1，余数 67
670 / 333 = 2，余数 4
0.012012012 ...
0.(012)

class Solution
{
public:
    string fractionToDecimal(int numerator, int denominator)
    {
        unordered_map<long, int> mp;

        if(numerator == 0) return "0";
        string ans = (numerator < 0) ^ (denominator < 0) ? "-" : "";

        long n = abs(numerator);
        long d = abs(denominator);

        ans += to_string(n / d);
        n %= d;

        if(n)
        {
            ans += ".";
            while(n && mp.find(n) == mp.end())
            {
                mp[n] = ans.size();
                n = n * 10;
                ans += to_string(n / d);
                n %= d;
            }
            if(n)
            {
                ans = ans.substr(0, mp[n]) + "(" + ans.substr(mp[n]) + ")";
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/

Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. 
Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.

Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.

The tests are generated such that there is exactly one solution. You may not use the same element twice.

Your solution must use only constant extra space.

 

Example 1:

Input: numbers = [2,7,11,15], target = 9
Output: [1,2]
Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].
Example 2:

Input: numbers = [2,3,4], target = 6
Output: [1,3]
Explanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].
Example 3:

Input: numbers = [-1,0], target = -1
Output: [1,2]
Explanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2].
 

Constraints:

2 <= numbers.length <= 3 * 104
-1000 <= numbers[i] <= 1000
numbers is sorted in non-decreasing order.
-1000 <= target <= 1000
The tests are generated such that there is exactly one solution.

class Solution
{
public:
    vector<int> twoSum(vector<int> &numbers, int target)
    {
        int left = 0;
        int right = numbers.size() - 1;
        while(left < right)
        {
            if(numbers[left] + numbers[right] == target)
                return {left + 1, right + 1};
            else if(target < numbers[left] + numbers[right])
                right--;
            else
                left++;
        }
        return {left + 1, right + 1};
    }
};


// Source https://leetcode.com/problems/excel-sheet-column-title/

Given an integer columnNumber, return its corresponding column title as it appears in an Excel sheet.

For example:

A -> 1
B -> 2
C -> 3
...
Z -> 26
AA -> 27
AB -> 28 
...
AZ -> 52
BA -> 53

Example 1:

Input: columnNumber = 1
Output: "A"
Example 2:

Input: columnNumber = 28
Output: "AB"
Example 3:

Input: columnNumber = 701
Output: "ZY"
 

Constraints:

1 <= columnNumber <= 231 - 1

class Solution
{
public:
    string convertToTitle(int columnNumber)
    {
        string res;
        if (columnNumber <= 26)
        {
            res.push_back('A' + columnNumber - 1);
            return res;
        }
        vector<int> numVec;
        numVec.reserve(256);
        res.reserve(256);
        while(columnNumber > 26)
        {
            int val = columnNumber / 26;
            int mod = columnNumber % 26;
            if (mod == 0)
            {
                --val;
                mod = 26;
                columnNumber = val;
            }
            else
            {
                columnNumber = val;
            }
            numVec.push_back(mod);
        }
        numVec.push_back(columnNumber);
        reverse(numVec.begin(), numVec.end());
        int n = numVec.size();
        for (int i = 0; i < n; ++i)
        {
            res.push_back('A' + numVec[i] - 1);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/majority-element/

Given an array nums of size n, return the majority element.

The majority element is the element that appears more than n / 2 向下取整 times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2
 

Constraints:

n == nums.length
1 <= n <= 5 * 104
-231 <= nums[i] <= 231 - 1

class Solution
{
public:
    int majorityElement(vector<int> &nums)
    {
        int n = nums.size();
        int cnt = n / 2;
        unordered_map<int, int> count_map;
        for(auto val : nums)
        {
            if (++count_map[val] > cnt) return val;
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/excel-sheet-column-number/

Given a string columnTitle that represents the column title as appear in an Excel sheet, return its corresponding column number.

For example:

A -> 1
B -> 2
C -> 3
...
Z -> 26
AA -> 27
AB -> 28 
...
 

Example 1:

Input: columnTitle = "A"
Output: 1
Example 2:

Input: columnTitle = "AB"
Output: 28
Example 3:

Input: columnTitle = "ZY"
Output: 701
 

Constraints:

1 <= columnTitle.length <= 7
columnTitle consists only of uppercase English letters.
columnTitle is in the range ["A", "FXSHRXW"].

class Solution
{
public:
    int titleToNumber(string columnTitle)
    {
        int n = columnTitle.size(), i = 0;
        long long sum = 0;
        while(i < n)
        {
            sum = sum * 26;
            sum = sum + (columnTitle[i] - 'A' + 1);
            i++;
        }
        return sum;
    }
};


// Source https://leetcode.com/problems/factorial-trailing-zeroes/

Given an integer n, return the number of trailing zeroes in n!.

Note that n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1.

 

Example 1:

Input: n = 3
Output: 0
Explanation: 3! = 6, no trailing zero.
Example 2:

Input: n = 5
Output: 1
Explanation: 5! = 120, one trailing zero.
Example 3:

Input: n = 0
Output: 0
 

Constraints:

0 <= n <= 104

You will get zero when you multiply 5 with 2. We have a lots of 2's. So we count number of 5's
But some numbers like 25, 125, 625 will have multiple 5's in them. Hence count them as well.

n = 53
n / 5 = 10
5	10	15	20	25	30	35	40	45	50
n / 25 = 2
				25					50
总共12个5

class Solution
{
public:
    int trailingZeroes(int n)
    {
        int sum = 0;
        int power5 = 5;
        while(n / power5 != 0)
        {
            sum += n / power5;
            power5 = power5 * 5;
        }
        return sum;
    }
};


// Source https://leetcode.com/problems/binary-search-tree-iterator/

Implement the BSTIterator class that represents an iterator over the in-order traversal of a binary search tree (BST):

BSTIterator(TreeNode root) Initializes an object of the BSTIterator class. The root of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.
boolean hasNext() Returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false.
int next() Moves the pointer to the right, then returns the number at the pointer.
Notice that by initializing the pointer to a non-existent smallest number, the first call to next() will return the smallest element in the BST.

You may assume that next() calls will always be valid. That is, there will be at least a next number in the in-order traversal when next() is called.

 

Example 1:


Input
["BSTIterator", "next", "next", "hasNext", "next", "hasNext", "next", "hasNext", "next", "hasNext"]
[[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]
Output
[null, 3, 7, true, 9, true, 15, true, 20, false]

Explanation
BSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]);
bSTIterator.next();    // return 3
bSTIterator.next();    // return 7
bSTIterator.hasNext(); // return True
bSTIterator.next();    // return 9
bSTIterator.hasNext(); // return True
bSTIterator.next();    // return 15
bSTIterator.hasNext(); // return True
bSTIterator.next();    // return 20
bSTIterator.hasNext(); // return False
 

Constraints:

The number of nodes in the tree is in the range [1, 105].
0 <= Node.val <= 106
At most 105 calls will be made to hasNext, and next.

class BSTIterator
{
private:
    stack<TreeNode *>s;
    void PushAll(TreeNode *r)
    {
        while(r != NULL)
        {
            s.push(r);
            r = r->left;
        }
    }
public:
    BSTIterator(TreeNode *root)
    {
        PushAll(root);
    }

    int next()
    {
        auto it = s.top();
        s.pop();
        PushAll(it->right);
        return it->val;
    }

    bool hasNext()
    {
        return !s.empty();
    }
};

class BSTIterator
{
    vector<int> arr;
    int x = 0;

    void inorder(TreeNode *root)
    {
        if(root == nullptr)
        {
            return ;
        }
        inorder(root -> left);
        arr.push_back(root -> val);
        inorder(root -> right);
    }
public:
    BSTIterator(TreeNode *root)
    {
        inorder(root);
    }

    int next()
    {
        return arr[x++];
    }

    bool hasNext()
    {
        return x < arr.size();
    }
};


// Source https://leetcode.com/problems/dungeon-game/

The demons had captured the princess and imprisoned her in the bottom-right corner of a dungeon. The dungeon consists of m x n rooms laid out in a 2D grid. 
Our valiant knight was initially positioned in the top-left room and must fight his way through dungeon to rescue the princess.

The knight has an initial health point represented by a positive integer. If at any point his health point drops to 0 or below, he dies immediately.

Some of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; 
other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).

To reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.

Return the knight's minimum initial health so that he can rescue the princess.

Note that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.

 

Example 1:


Input: dungeon = [[-2,-3,3],[-5,-10,1],[10,30,-5]]
Output: 7
Explanation: The initial health of the knight must be at least 7 if he follows the optimal path: RIGHT-> RIGHT -> DOWN -> DOWN.
Example 2:

Input: dungeon = [[0]]
Output: 1
 

Constraints:

m == dungeon.length
n == dungeon[i].length
1 <= m, n <= 200
-1000 <= dungeon[i][j] <= 1000

class Solution
{
public:
    int n, m;
    int dp[201][201];
    int solve(vector<vector<int>> &dungeon, int row, int col)
    {
        if(row >= n || col >= m)
        {
            return INT_MAX;
        }
        if(row == n - 1 && col == m - 1)
        {
            if(dungeon[row][col] <= 0)
                return abs(dungeon[row][col]) + 1;
            return 1;
        }
        if(dp[row][col] != -1)
            return dp[row][col];
        int move_down = solve(dungeon, row + 1, col);
        int move_right = solve(dungeon, row, col + 1);
        int min_health = min(move_down, move_right) - dungeon[row][col];
        if(min_health <= 0) min_health = 1;
        return dp[row][col] = min_health;
    }
    int calculateMinimumHP(vector<vector<int>> &dungeon)
    {
        n = dungeon.size();
        m = dungeon[0].size();
        memset(dp, -1, sizeof(dp));
        return solve(dungeon, 0, 0);
    }
};


// Source https://leetcode.com/problems/largest-number/

Given a list of non-negative integers nums, arrange them such that they form the largest number and return it.

Since the result may be very large, so you need to return a string instead of an integer.

 

Example 1:

Input: nums = [10,2]
Output: "210"
Example 2:

Input: nums = [3,30,34,5,9]
Output: "9534330"
 

Constraints:

1 <= nums.length <= 100
0 <= nums[i] <= 109

class Solution
{
public:
    static bool compare(int a, int b)
    {
        string x = to_string(a), y = to_string(b);
        if((x + y) > (y + x))
            return true;
        else
            return false;
    }
    string largestNumber(vector<int> &nums)
    {
        string ans = "";
        sort(nums.begin(), nums.end(), compare);
        for(int i = 0; i < nums.size(); i++)
            ans += to_string(nums[i]);
        int i = 0;
        while(i < ans.length() && ans[i] == '0') i++;
        if(i == ans.length())
        {
            return "0";
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/repeated-dna-sequences/

The DNA sequence is composed of a series of nucleotides abbreviated as 'A', 'C', 'G', and 'T'.

For example, "ACGAATTCCG" is a DNA sequence.
When studying DNA, it is useful to identify repeated sequences within the DNA.

Given a string s that represents a DNA sequence, return all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in any order.

 

Example 1:

Input: s = "AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT"
Output: ["AAAAACCCCC","CCCCCAAAAA"]
Example 2:

Input: s = "AAAAAAAAAAAAA"
Output: ["AAAAAAAAAA"]
 

Constraints:

1 <= s.length <= 105
s[i] is either 'A', 'C', 'G', or 'T'.

class Solution
{
public:
    vector<string> findRepeatedDnaSequences(string s)
    {
        int i = 0;
        int n = s.size();
        unordered_set<string> uset;
        unordered_set<string> seen;
        while(i + 9 < n)
        {
            string candidateDna = s.substr(i, 10);
            if(uset.count(candidateDna))
            {
                seen.insert(candidateDna);
            }
            else
            {
                uset.insert(candidateDna);
            }
            i++;
        }
        return vector<string> (seen.begin(), seen.end());
    }
};


// Source https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/

You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.

Find the maximum profit you can achieve. You may complete at most k transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: k = 2, prices = [2,4,1]
Output: 2
Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.
Example 2:

Input: k = 2, prices = [3,2,6,5,0,3]
Output: 7
Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
 

Constraints:

0 <= k <= 100
0 <= prices.length <= 1000
0 <= prices[i] <= 1000


class Solution
{
public:
    int lim;
    int dp[205][1005];

    int helper(vector<int> &prices, int n, int day, int count)
    {
        if(day == n) return 0;
        if(count >= lim) return 0;
        if(dp[count][day] != -1) return dp[count][day];
        int notransaction = helper(prices, n, day + 1, count);
        int transaction = 0;
        bool buy = (count % 2 == 0);
        if(buy)
        {
            transaction = -prices[day] + helper(prices, n, day + 1, count + 1);
        }
        else
        {
            transaction = prices[day] + helper(prices, n, day + 1, count + 1);
        }
        return dp[count][day] = max(notransaction, transaction);
    }
    int maxProfit(int k, vector<int>& prices)
    {
        lim = 2 * k;
        int n = prices.size();
        memset(dp, -1, sizeof(dp));
        return helper(prices, n, 0, 0);
    }
};


// Source https://leetcode.com/problems/rotate-array/

Given an array, rotate the array to the right by k steps, where k is non-negative.

 

Example 1:

Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]
Example 2:

Input: nums = [-1,-100,3,99], k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]
 

Constraints:

1 <= nums.length <= 105
-231 <= nums[i] <= 231 - 1
0 <= k <= 105

class Solution
{
public:
    void rotate(vector<int> &nums, int k)
    {
        int n = k % nums.size();
        if (n == 0) return;
        reverse(nums.begin(), nums.end()); //reverse full array
        reverse(nums.begin(), nums.begin() + n); //reverse first k elements
        reverse(nums.begin() + n, nums.end());  // reverse remaining elements
    }
};


// Source https://leetcode.com/problems/reverse-bits/

Reverse bits of a given 32 bits unsigned integer.

Note:

Note that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. 
They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.
In Java, the compiler represents the signed integers using 2's complement notation. 
Therefore, in Example 2 above, the input represents the signed integer -3 and the output represents the signed integer -1073741825.
 

Example 1:

Input: n = 00000010100101000001111010011100
Output:    964176192 (00111001011110000010100101000000)
Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.
Example 2:

Input: n = 11111111111111111111111111111101
Output:   3221225471 (10111111111111111111111111111111)
Explanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111.
 

Constraints:

The input must be a binary string of length 32

class Solution
{
public:
    uint32_t reverseBits(uint32_t n)
    {
        uint32_t bit = 0;

        for (int i = 0; i < 32; i++)
        {
            bit = (bit << 1) | (n & 1);
            n >>= 1;
        }

        return bit;
    }
};


// Source https://leetcode.com/problems/number-of-1-bits/

Write a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).

Note:

Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.
In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 3, the input represents the signed integer. -3.
 

Example 1:

Input: n = 00000000000000000000000000001011
Output: 3
Explanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits.
Example 2:

Input: n = 00000000000000000000000010000000
Output: 1
Explanation: The input binary string 00000000000000000000000010000000 has a total of one '1' bit.
Example 3:

Input: n = 11111111111111111111111111111101
Output: 31
Explanation: The input binary string 11111111111111111111111111111101 has a total of thirty one '1' bits.
 

Constraints:

The input must be a binary string of length 32.

class Solution
{
public:
    int hammingWeight(uint32_t n)
    {
        return __builtin_popcount(n);
    }
};

class Solution
{
public:
    int hammingWeight(uint32_t n)
    {
        return bitset<32>{n}.count();
    }
};


// Source https://leetcode.com/problems/house-robber/

You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, 
the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected 
and it will automatically contact the police if two adjacent houses were broken into on the same night.

Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.

 

Example 1:

Input: nums = [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
Total amount you can rob = 1 + 3 = 4.
Example 2:

Input: nums = [2,7,9,3,1]
Output: 12
Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).
Total amount you can rob = 2 + 9 + 1 = 12.
 

Constraints:

1 <= nums.length <= 100
0 <= nums[i] <= 400

class Solution
{
public:
    int n;
    vector<int> dp;

    int solve(vector<int> &nums, int idx)
    {
        if (idx >= n) return 0;
        if(dp[idx] != -1)  return dp[idx];
        int ans = INT_MIN;
        ans = max(ans, solve(nums, idx + 1));
        ans = max(ans, nums[idx] + solve(nums, idx + 2));
        return dp[idx] = ans;
    }
    int rob(vector<int> &nums)
    {
        n = nums.size();
        dp = vector<int>(n, -1);
        return solve(nums, 0);
    }
};


// Source https://leetcode.com/problems/binary-tree-right-side-view/

Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

 

Example 1:


Input: root = [1,2,3,null,5,null,4]
Output: [1,3,4]
Example 2:

Input: root = [1,null,3]
Output: [1,3]
Example 3:

Input: root = []
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100

class Solution
{
public:
    vector<int> rightSideView(TreeNode *root)
    {
        vector<int> res;
        if(!root)return res;
        queue<TreeNode *> que;
        que.push(root);
        while(!que.empty())
        {
            int sz = que.size();
            for (int i = 0; i < sz; ++i)
            {
                TreeNode *node = que.front();
                que.pop();
                if(i == sz - 1) res.push_back(node->val);
                if(node->left)que.push(node->left);
                if(node->right)que.push(node->right);
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/number-of-islands/

Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

 

Example 1:

Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1
Example 2:

Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 300
grid[i][j] is '0' or '1'.

class Solution
{
public:
    int n, m;

    void dfs(vector<vector<char>> &grid, int r, int c)
    {
        if(r < 0 || r >= n || c < 0 || c >= m || grid[r][c] == '0') return;
        grid[r][c] = '0';
        dfs(grid, r - 1, c);
        dfs(grid, r + 1, c);
        dfs(grid, r, c - 1);
        dfs(grid, r, c + 1);
    }

    int numIslands(vector<vector<char>> &grid)
    {
        n = grid.size();
        m = grid[0].size();
        int res = 0;
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                if(grid[i][j] == '1')
                {
                    dfs(grid, i, j);
                    ++res;
                }
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/bitwise-and-of-numbers-range/

Given two integers left and right that represent the range [left, right], return the bitwise AND of all numbers in this range, inclusive.

 

Example 1:

Input: left = 5, right = 7
Output: 4

5 = 4 + 1
6 = 4 + 2
7 = 4 + 3

Example 2:

Input: left = 0, right = 0
Output: 0
Example 3:

Input: left = 1, right = 2147483647
Output: 0
 

Constraints:

0 <= left <= right <= 231 - 1

class Solution
{
public:
    int rangeBitwiseAnd(int left, int right)
    {
        int count = 0;
        while(left != right)
        {
            left = left >> 1;
            right = right >> 1;
            count++;
        }
        return (left << count);
    }
};


// Source https://leetcode.com/problems/happy-number/

Write an algorithm to determine if a number n is happy.

A happy number is a number defined by the following process:

Starting with any positive integer, replace the number by the sum of the squares of its digits.
Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
Those numbers for which this process ends in 1 are happy.
Return true if n is a happy number, and false if not.

 

Example 1:

Input: n = 19
Output: true
Explanation:
1^2 + 9^2 = 82
8^2 + 2^2 = 68
6^2 + 8^2 = 100
1^2 + 0^2 + 0^2 = 1
Example 2:

Input: n = 2
Output: false
 

Constraints:

1 <= n <= 231 - 1

class Solution
{
public:

    int func(int n)
    {
        int sum = 0;
        while(n)
        {
            int val = n % 10;
            n = n / 10;
            sum += val * val;
        }
        return sum;
    }

    bool isHappy(int n)
    {
        int check = n;
        unordered_map<int, int>hash;
        while(true)
        {
            check = func(check);
            if(check == 1)
            {
                return true;
            }
            else if(hash[check]) return false;
            else hash[check]++;
        }
        return false;
    }
};


// Source https://leetcode.com/problems/remove-linked-list-elements/

Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.

 

Example 1:


Input: head = [1,2,6,3,4,5,6], val = 6
Output: [1,2,3,4,5]
Example 2:

Input: head = [], val = 1
Output: []
Example 3:

Input: head = [7,7,7,7], val = 7
Output: []
 

Constraints:

The number of nodes in the list is in the range [0, 104].
1 <= Node.val <= 50
0 <= val <= 50

class Solution
{
public:
    ListNode *removeElements(ListNode *head, int val)
    {
        if(head == NULL) return head;
        ListNode *dummy = new ListNode(0);
        dummy->next = head;
        ListNode *prev = dummy;
        ListNode *curr = head;
        while(curr != NULL)
        {
            if(curr->val == val)
            {
                prev->next = curr->next;
                curr = curr->next;
            }
            else
            {
                prev = curr;
                curr = curr->next;
            }
        }
        return dummy->next;
    }
};


// Source https://leetcode.com/problems/count-primes/

Given an integer n, return the number of prime numbers that are strictly less than n.

 

Example 1:

Input: n = 10
Output: 4
Explanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.
Example 2:

Input: n = 0
Output: 0
Example 3:

Input: n = 1
Output: 0
 

Constraints:

0 <= n <= 5 * 106

class Solution
{
public:
    int countPrimes(int n)
    {
        if (n == 0) return 0;
        vector <bool> isPrime (n, true);
        isPrime[0] = false;
        isPrime[1] = false;

        for (int i = 2; i * i < n; ++i)
        {
            if (isPrime[i])
            {
                for (int j = i * i; j < n; j += i)
                {
                    isPrime[j] = false;
                }
            }
        }

        int count = 0;
        for (int i = 0; i < n; ++i)
        {
            if (isPrime[i])
            {
                ++count;
            }
        }
        return count;
    }
};


// Source https://leetcode.com/problems/isomorphic-strings/

Given two strings s and t, determine if they are isomorphic.

Two strings s and t are isomorphic if the characters in s can be replaced to get t.

All occurrences of a character must be replaced with another character while preserving the order of characters. 
No two characters may map to the same character, but a character may map to itself.

 

Example 1:

Input: s = "egg", t = "add"
Output: true
Example 2:

Input: s = "foo", t = "bar"
Output: false
Example 3:

Input: s = "paper", t = "title"
Output: true
 

Constraints:

1 <= s.length <= 5 * 104
t.length == s.length
s and t consist of any valid ascii character.

class Solution
{
public:
    bool isIsomorphic(string s, string t)
    {
        unordered_map<char, char> ums;
        unordered_map<char, char> umt;
        int n = s.length();
        for(int i = 0; i < n; ++i)
        {
            if(ums.find(s[i]) != ums.end() && ums[s[i]] != t[i])
                return false;
            if(umt.find(t[i]) != umt.end() && umt[t[i]] != s[i])
                return false;
            ums[s[i]] = t[i];
            umt[t[i]] = s[i];
        }
        return true;
    }
};


// Source https://leetcode.com/problems/reverse-linked-list/

Given the head of a singly linked list, reverse the list, and return the reversed list.

 

Example 1:


Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]
Example 2:


Input: head = [1,2]
Output: [2,1]
Example 3:

Input: head = []
Output: []
 

Constraints:

The number of nodes in the list is the range [0, 5000].
-5000 <= Node.val <= 5000

class Solution
{
public:
    ListNode *reverseList(ListNode *head)
    {
        ListNode *prev = NULL;
        ListNode *curr = head;
        while(curr)
        {
            ListNode *next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
};


// Source https://leetcode.com/problems/course-schedule/

There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. 
You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.

For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return true if you can finish all courses. Otherwise, return false.

 

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0. So it is possible.
Example 2:

Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.
 

Constraints:

1 <= numCourses <= 105
0 <= prerequisites.length <= 5000
prerequisites[i].length == 2
0 <= ai, bi < numCourses
All the pairs prerequisites[i] are unique.

class Solution
{
public:
    bool canFinish(int numC, vector<vector<int>> &pre)
    {
        vector<int> adj[numC];
        for(vector<int> &v : pre)
        {
            adj[v[1]].push_back(v[0]);
        }
        vector<int> degree(numC, 0);
        for(int i = 0; i < numC; i++)
        {
            for(int j = 0; j < adj[i].size(); j++)
                degree[adj[i][j]]++;
        }
        queue<int> q;
        for(int i = 0; i < numC; i++) if(degree[i] == 0) q.push(i);
        int v = 0;
        while(!q.empty())
        {
            int curNode = q.front();
            q.pop();
            v++;
            for(int i = 0; i < adj[curNode].size(); i++)
            {
                degree[adj[curNode][i]]--;
                if(!degree[adj[curNode][i]])
                {
                    q.push(adj[curNode][i]);
                }
            }
        }
        if(v == numC) return true;
        return false;
    }
};


// Source https://leetcode.com/problems/implement-trie-prefix-tree/

A trie (pronounced as "try") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. 
There are various applications of this data structure, such as autocomplete and spellchecker.

Implement the Trie class:

Trie() Initializes the trie object.
void insert(String word) Inserts the string word into the trie.
boolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise.
boolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.
 

Example 1:

Input
["Trie", "insert", "search", "search", "startsWith", "insert", "search"]
[[], ["apple"], ["apple"], ["app"], ["app"], ["app"], ["app"]]
Output
[null, null, true, false, true, null, true]

Explanation
Trie trie = new Trie();
trie.insert("apple");
trie.search("apple");   // return True
trie.search("app");     // return False
trie.startsWith("app"); // return True
trie.insert("app");
trie.search("app");     // return True
 

Constraints:

1 <= word.length, prefix.length <= 2000
word and prefix consist only of lowercase English letters.
At most 3 * 104 calls in total will be made to insert, search, and startsWith.

class Trie
{

private:
    struct TrieNode
    {
        struct TrieNode *child[26];
        bool isEnd;

        TrieNode()
        {
            isEnd = false;
            for(int i = 0; i < 26; i++) child[i] = NULL;
        }
    };
    TrieNode *root;

public:

    Trie()
    {
        root = new TrieNode();
    }

    void insert(string word)
    {
        TrieNode *curr = root;
        for(int i = 0; i < word.length(); i++)
        {
            int index = word[i] - 'a';
            if(curr->child[index] == NULL)
                curr->child[index] = new TrieNode();
            curr = curr->child[index];
        }
        curr->isEnd = true;
    }

    bool search(string word)
    {
        TrieNode *curr = root;
        for(int i = 0; i < word.length(); i++)
        {
            int index = word[i] - 'a';
            if(curr->child[index] == NULL) return false;
            curr = curr->child[index];
        }
        return curr->isEnd;
    }

    bool startsWith(string prefix)
    {
        TrieNode *curr = root;
        for(int i = 0; i < prefix.length(); i++)
        {
            int index = prefix[i] - 'a';
            if(curr->child[index] == NULL) return false;
            curr = curr->child[index];
        }
        return true;
    }
};


// Source https://leetcode.com/problems/minimum-size-subarray-sum/

Given an array of positive integers nums and a positive integer target, return the minimal length of a contiguous subarray [numsl, numsl+1, ..., numsr-1, numsr] of 
which the sum is greater than or equal to target. If there is no such subarray, return 0 instead.

 

Example 1:

Input: target = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: The subarray [4,3] has the minimal length under the problem constraint.
Example 2:

Input: target = 4, nums = [1,4,4]
Output: 1
Example 3:

Input: target = 11, nums = [1,1,1,1,1,1,1,1]
Output: 0
 

Constraints:

1 <= target <= 109
1 <= nums.length <= 105
1 <= nums[i] <= 105

class Solution
{
public:

    int minSubArrayLen(int target, vector<int> &nums)
    {
        int n = nums.size();
        int i = 0, j = 0, sum = 0, res = INT_MAX;
        while(j < n)
        {
            sum += nums[j];
            if(sum < target)
            {
                j++;
                continue;
            }
            while(sum >= target)
            {
                res = min(res, j - i + 1);
                sum -= nums[i];
                i++;
            }
            j++;
        }
        return res == INT_MAX ? 0 : res;
    }
};


// Source https://leetcode.com/problems/course-schedule-ii/

There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. 
You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.

For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.

 

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: [0,1]
Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].
Example 2:

Input: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]
Output: [0,2,1,3]
Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.
So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].
Example 3:

Input: numCourses = 1, prerequisites = []
Output: [0]
 

Constraints:

1 <= numCourses <= 2000
0 <= prerequisites.length <= numCourses * (numCourses - 1)
prerequisites[i].length == 2
0 <= ai, bi < numCourses
ai != bi
All the pairs [ai, bi] are distinct.

class Solution
{
public:
    vector<int> findOrder(int numCourses, vector<vector<int>> &prerequisites)
    {
        map<int, vector<int>>adj_list;
        vector<int>indegree(numCourses, 0);
        for(auto &prerequisite : prerequisites)
        {
            adj_list[prerequisite[1]].push_back(prerequisite[0]);
            indegree[prerequisite[0]]++;
        }
        queue<int>q;
        for(int i = 0; i < indegree.size(); i++)
        {
            if(!indegree[i])q.push(i);
        }
        if(q.empty()) return {};
        vector<int>answer;
        while(!q.empty())
        {
            auto front = q.front();
            q.pop();
            answer.push_back(front);
            if(adj_list.count(front))
            {
                for(auto neighbor : adj_list[front])
                {
                    indegree[neighbor]--;
                    if(!indegree[neighbor]) q.push(neighbor);
                }
            }
        }
        if(answer.size() != numCourses) return {};
        return answer;
    }
};


// Source https://leetcode.com/problems/design-add-and-search-words-data-structure/

Design a data structure that supports adding new words and finding if a string matches any previously added string.

Implement the WordDictionary class:

WordDictionary() Initializes the object.
void addWord(word) Adds word to the data structure, it can be matched later.
bool search(word) Returns true if there is any string in the data structure that matches word or false otherwise. word may contain dots '.' where dots can be matched with any letter.
 

Example:

Input
["WordDictionary","addWord","addWord","addWord","search","search","search","search"]
[[],["bad"],["dad"],["mad"],["pad"],["bad"],[".ad"],["b.."]]
Output
[null,null,null,null,false,true,true,true]

Explanation
WordDictionary wordDictionary = new WordDictionary();
wordDictionary.addWord("bad");
wordDictionary.addWord("dad");
wordDictionary.addWord("mad");
wordDictionary.search("pad"); // return False
wordDictionary.search("bad"); // return True
wordDictionary.search(".ad"); // return True
wordDictionary.search("b.."); // return True
 

Constraints:

1 <= word.length <= 25
word in addWord consists of lowercase English letters.
word in search consist of '.' or lowercase English letters.
There will be at most 3 dots in word for search queries.
At most 104 calls will be made to addWord and search.

class WordDictionary
{
public:
    class Node
    {
    public:
        Node *child[26];
        bool isEnd;

        Node()
        {
            isEnd = false;
            for(int i = 0; i < 26 ; i++)
            {
                child[i] = NULL;
            }
        }
    };
    class Trie
    {
    public:
        Node *root;
        Trie()
        {
            root = new Node();
        }
        void insert(string &s)
        {
            Node *curr = root;
            for(int i = 0; i < s.size(); i++)
            {
                int idx = s[i] - 'a';
                if(curr->child[idx] == NULL)
                {
                    curr->child[idx] = new Node();
                }
                curr = curr->child[idx];
            }
            curr->isEnd = true;
        }
        bool isFound(string &s, Node *node, int it = 0)
        {
            if(!node)return false;
            if(it == s.size())
            {
                return node->isEnd;
            }
            if(s[it] != '.')
            {
                return isFound(s, node->child[s[it] - 'a'], it + 1);
            }
            else
            {
                for(int i = 0; i < 26; i++)
                {
                    if(isFound(s, node->child[i], it + 1))
                    {
                        return true;
                    }
                }
                return false;
            }
        }
    };

    Trie dict;
    WordDictionary()
    {

    }

    void addWord(string word)
    {
        dict.insert(word);
    }

    bool search(string word)
    {
        return dict.isFound(word, dict.root);
    }
};


// Source https://leetcode.com/problems/word-search-ii/

Given an m x n board of characters and a list of strings words, return all words on the board.

Each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. 
The same letter cell may not be used more than once in a word.

 

Example 1:


Input: board = [["o","a","a","n"],["e","t","a","e"],["i","h","k","r"],["i","f","l","v"]], words = ["oath","pea","eat","rain"]
Output: ["eat","oath"]
Example 2:


Input: board = [["a","b"],["c","d"]], words = ["abcb"]
Output: []
 

Constraints:

m == board.length
n == board[i].length
1 <= m, n <= 12
board[i][j] is a lowercase English letter.
1 <= words.length <= 3 * 104
1 <= words[i].length <= 10
words[i] consists of lowercase English letters.
All the strings of words are unique.

class TrieNode
{
public:
    char val;
    TrieNode * children[26];
    bool isEnd;
    string word;

    TrieNode(char ch)
    {
        val = ch;
        for(int i = 0; i < 26 ; i++) children[i] = NULL;
        isEnd = false;
        word = "";
    }
};

class Solution
{
public:
    void insert(TrieNode *&root, string s)
    {
        TrieNode *temp = root;
        int n = s.length();
        for(int i = 0; i < n; i++)
        {
            int idx = s[i] - 'a';
            if(temp->children[idx] == NULL)
            {
                temp->children[idx] = new TrieNode(s[i]);
            }
            temp = temp->children[idx];
        }
        temp->isEnd = true;
        temp->word = std::move(s);
    }
    void dfs(vector<vector<char>> &board, int r, int c, int m, int n, TrieNode *&root, vector<string> &ans)
    {
        if(root->isEnd)
        {
            ans.push_back(root->word);
            root->isEnd = false;
        }

        char ch = board[r][c];
        board[r][c] = '!';
        if(r + 1 < m && board[r + 1][c] != '!' && root->children[board[r + 1][c] - 'a'] != NULL)
            dfs(board, r + 1, c, m, n, root->children[board[r + 1][c] - 'a'], ans);

        if(r - 1 >= 0 && board[r - 1][c] != '!' && root->children[board[r - 1][c] - 'a'] != NULL)
            dfs(board, r - 1, c, m, n, root->children[board[r - 1][c] - 'a'], ans);

        if(c + 1 < n && board[r][c + 1] != '!' && root->children[board[r][c + 1] - 'a'] != NULL)
            dfs(board, r, c + 1, m, n, root->children[board[r][c + 1] - 'a'], ans);

        if(c - 1 >= 0 && board[r][c - 1] != '!' && root->children[board[r][c - 1] - 'a'] != NULL)
            dfs(board, r, c - 1, m, n, root->children[board[r][c - 1] - 'a'], ans);

        board[r][c] = ch;
    }

    vector<string> findWords(vector<vector<char>> &board, vector<string> &words)
    {
        TrieNode *root = new TrieNode('*');
        for(string s : words)
        {
            insert(root, std::move(s));
        }
        vector<string> ans;
        int m = board.size(), n = board[0].size();
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(root->children[board[i][j] - 'a'] != NULL)
                {
                    dfs(board, i, j, m, n, root->children[board[i][j] - 'a'], ans);
                }
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/house-robber-ii/

You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. 
All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. 
Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.

Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.

 

Example 1:

Input: nums = [2,3,2]
Output: 3
Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.
Example 2:

Input: nums = [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
Total amount you can rob = 1 + 3 = 4.
Example 3:

Input: nums = [1,2,3]
Output: 3
 

Constraints:

1 <= nums.length <= 100
0 <= nums[i] <= 1000

class Solution
{
public:
    int n;
    int dp[105];

    int recur(vector<int> &arr, int idx)
    {
        if(idx >= n) return 0;
        if(dp[idx] != -1) return dp[idx];
        int ans = INT_MIN;
        ans = max(ans, recur(arr, idx + 1));
        ans = max(ans, arr[idx] + recur(arr, idx + 2));
        return dp[idx] = ans;
    }

    int rob(vector<int> &nums)
    {
        int ans1 = 0;
        int ans2 = 0;
        n = nums.size();
        if(n == 1) return nums[0];
        int temp = nums[0];
        nums[0] = 0;
        memset(dp, -1, sizeof(dp));
        ans1 = recur(nums, 0);

        nums[0] = temp;
        nums[n - 1] = 0;
        memset(dp, -1, sizeof(dp));
        ans2 = recur(nums, 0);

        return max(ans1, ans2);
    }
};


// Source https://leetcode.com/problems/shortest-palindrome/

You are given a string s. You can convert s to a palindrome by adding characters in front of it.

Return the shortest palindrome you can find by performing this transformation.

 

Example 1:

Input: s = "aacecaaa"
Output: "aaacecaaa"
Example 2:

Input: s = "abcd"
Output: "dcbabcd"
 

Constraints:

0 <= s.length <= 5 * 104
s consists of lowercase English letters only.

aacecaa a # a aacecaa

a bcd # dcb a

class Solution
{
public:

    int longestPrefixSuffixLength(string &s)
    {
        vector<int>lps(s.length());
        int i = 0, j = 1;
        while(j < s.length())
        {
            if(s[i] == s[j])
            {
                lps[j++] = (i++) + 1;
            }
            else
            {
                if(i > 0)
                {
                    i = lps[i - 1];
                }
                else
                {
                    j++;
                }
            }
        }
        return lps[s.length() - 1];
    }

    string shortestPalindrome(string s)
    {
        string rev = s;
        reverse(rev.begin(), rev.end());
        rev = s + "#" + rev;
        int startIndex = longestPrefixSuffixLength(rev);
        string extra = s.substr(startIndex);
        reverse(extra.begin(), extra.end());
        return extra + s;
    }
};


// Source https://leetcode.com/problems/kth-largest-element-in-an-array/

Given an integer array nums and an integer k, return the kth largest element in the array.

Note that it is the kth largest element in the sorted order, not the kth distinct element.

 

Example 1:

Input: nums = [3,2,1,5,6,4], k = 2
Output: 5
Example 2:

Input: nums = [3,2,3,1,2,4,5,5,6], k = 4
Output: 4
 

Constraints:

1 <= k <= nums.length <= 104
-104 <= nums[i] <= 104

class Solution
{
public:
    int findKthLargest(vector<int> &nums, int k)
    {
        priority_queue<int, vector<int>, greater<int>>pq;
        for(int i = 0; i < nums.size(); i++)
        {
            pq.push(nums[i]);
            if (pq.size() > k) pq.pop();
        }
        return pq.top();
    }
};


// Source https://leetcode.com/problems/combination-sum-iii/

Find all valid combinations of k numbers that sum up to n such that the following conditions are true:

Only numbers 1 through 9 are used.
Each number is used at most once.
Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.

 

Example 1:

Input: k = 3, n = 7
Output: [[1,2,4]]
Explanation:
1 + 2 + 4 = 7
There are no other valid combinations.
Example 2:

Input: k = 3, n = 9
Output: [[1,2,6],[1,3,5],[2,3,4]]
Explanation:
1 + 2 + 6 = 9
1 + 3 + 5 = 9
2 + 3 + 4 = 9
There are no other valid combinations.
Example 3:

Input: k = 4, n = 1
Output: []
Explanation: There are no valid combinations.
Using 4 different numbers in the range [1,9], the smallest sum we can get is 1+2+3+4 = 10 and since 10 > 1, there are no valid combination.
 

Constraints:

2 <= k <= 9
1 <= n <= 60

class Solution
{
public:
    int cnt, target;

    vector<vector<int>> combinationSum3(int k, int n)
    {
        cnt = k;
        target = n;
        vector<vector<int>> res;
        vector<int> curr;
        helper(1, res, curr, 0);
        return res;
    }
    void helper(int start, vector<vector<int>> &res, vector<int> &curr, int sum)
    {
        if(curr.size() == cnt)
        {
            if (sum == target) res.push_back(curr);
            return;
        }
        if(sum > target) return;
        for(int i = start; i <= 9; ++i)
        {
            if((sum + i) > target) break;
            curr.push_back(i);
            helper(i + 1, res, curr, sum + i);
            curr.pop_back();
        }
    }
};


// Source https://leetcode.com/problems/contains-duplicate/

Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

 

Example 1:

Input: nums = [1,2,3,1]
Output: true
Example 2:

Input: nums = [1,2,3,4]
Output: false
Example 3:

Input: nums = [1,1,1,3,3,4,3,2,4,2]
Output: true
 

Constraints:

1 <= nums.length <= 105
-109 <= nums[i] <= 109

class Solution
{
public:
    bool containsDuplicate(vector<int> &nums)
    {
        unordered_set<int> s(nums.begin(), nums.end());
        return s.size() != nums.size();
    }
};


// Source https://leetcode.com/problems/the-skyline-problem/

A city's skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. 
Given the locations and heights of all the buildings, return the skyline formed by these buildings collectively.

The geometric information of each building is given in the array buildings where buildings[i] = [lefti, righti, heighti]:

lefti is the x coordinate of the left edge of the ith building.
righti is the x coordinate of the right edge of the ith building.
heighti is the height of the ith building.
You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.

The skyline should be represented as a list of "key points" sorted by their x-coordinate in the form [[x1,y1],[x2,y2],...]. 
Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, 
which always has a y-coordinate 0 and is used to mark the skyline's termination where the rightmost building ends. 
Any ground between the leftmost and rightmost buildings should be part of the skyline's contour.

Note: There must be no consecutive horizontal lines of equal height in the output skyline. 
For instance, [...,[2 3],[4 5],[7 5],[11 5],[12 7],...] is not acceptable; the three lines of height 5 should be merged into one in the final output as such: [...,[2 3],[4 5],[12 7],...]

 

Example 1:


Input: buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]
Output: [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]
Explanation:
Figure A shows the buildings of the input.
Figure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list.
Example 2:

Input: buildings = [[0,2,3],[2,5,3]]
Output: [[0,3],[5,0]]
 

Constraints:

1 <= buildings.length <= 104
0 <= lefti < righti <= 231 - 1
1 <= heighti <= 231 - 1
buildings is sorted by lefti in non-decreasing order.

class Solution
{
public:
    vector<vector<int>> getSkyline(vector<vector<int>> &buildings)
    {
        priority_queue<pair<int, int> >q;
        set<int> boundary;
        int n = buildings.size();
        for(int i = 0; i < n; i++)
        {
            boundary.insert(buildings[i][0]);
            boundary.insert(buildings[i][1]);
        }
        vector<vector<int>> res;
        int ind = 0;
        for (auto pos : boundary)
        {
            while(ind < n && buildings[ind][0] <= pos)
            {
                q.push({buildings[ind][2], buildings[ind][1]});
                ind++;
            }
            while(!q.empty() && q.top().second <= pos)
                q.pop();
            int maxN = q.empty() ? 0 : q.top().first;
            if(res.size() == 0 || maxN != res.back()[1])
                res.push_back({pos, maxN});
        }
        return res;
    }
};


// Source https://leetcode.com/problems/contains-duplicate-ii/

Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k.

 

Example 1:

Input: nums = [1,2,3,1], k = 3
Output: true
Example 2:

Input: nums = [1,0,1,1], k = 1
Output: true
Example 3:

Input: nums = [1,2,3,1,2,3], k = 2
Output: false
 

Constraints:

1 <= nums.length <= 105
-109 <= nums[i] <= 109
0 <= k <= 105

class Solution
{
public:
    bool containsNearbyDuplicate(vector<int> &nums, int k)
    {
        if(nums.size() == 1)
        {
            return false;
        }

        int len = nums.size();
        unordered_map<long long, int> mp;
        for(int i = 0; i < len; i++)
        {
            if(i > k)
            {
                int val = nums[i - k - 1];
                if (mp[val]-- <= 1) mp.erase(val);
            }
            if(mp[nums[i]])
            {
                return true;
            }
            mp[nums[i]]++;
        }
        return false;
    }
};


// Source https://leetcode.com/problems/contains-duplicate-iii/

Given an integer array nums and two integers k and t, return true if there are two distinct indices i and j in the array such that abs(nums[i] - nums[j]) <= t and abs(i - j) <= k.

 

Example 1:

Input: nums = [1,2,3,1], k = 3, t = 0
Output: true
Example 2:

Input: nums = [1,0,1,1], k = 1, t = 2
Output: true
Example 3:

Input: nums = [1,5,9,1,5,9], k = 2, t = 3
Output: false
 

Constraints:

1 <= nums.length <= 2 * 104
-231 <= nums[i] <= 231 - 1
0 <= k <= 104
0 <= t <= 231 - 1

class Solution
{
public:
    bool containsNearbyAlmostDuplicate(vector<int> &nums, int k, int t)
    {
        if(nums.size() == 1)
        {
            return false;
        }

        int len = nums.size();
        map<long long, int> mp;
        for(int i = 0; i < len; i++)
        {
            if(i > k)
            {
                int val = nums[i - k - 1];
                if (mp[val]-- <= 1) mp.erase(val);
            }
            auto it1 = mp.lower_bound(nums[i] - (long long)t);
            if(it1 != mp.end() && (it1->first) <= (nums[i] + (long long)t))
            {
                return true;
            }
            mp[nums[i]]++;
        }
        return false;
    }
};


// Source https://leetcode.com/problems/maximal-square/

Given an m x n binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.

 

Example 1:


Input: matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
Output: 4
Example 2:


Input: matrix = [["0","1"],["1","0"]]
Output: 1
Example 3:

Input: matrix = [["0"]]
Output: 0
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 300
matrix[i][j] is '0' or '1'.

class Solution
{
public:
    int maximalSquare(vector<vector<char>> &matrix)
    {
        int m = matrix.size();
        int n = matrix[0].size();
        vector<int> heights(n);
        int ans = 0;

        for(int i = 0 ; i < m ; i++)
        {
            for(int j = 0 ; j  < n ; j++)
            {
                if(matrix[i][j] == '1')
                {
                    heights[j]++;
                }
                else
                {
                    heights[j] = 0;
                }
            }

            vector<int> left(n, 0);
            vector<int> right(n, 0);
            left[0] = -1;
            vector<pair<int, int>> vec;
            vec.reserve(128);
            vec.push_back({0, heights[0]});
            for(int i = 1; i < n; i++)
            {
                while(vec.size() > 0)
                {
                    if (vec.back().second < heights[i]) break;
                    vec.pop_back();
                }
                int idx = -1;
                if (vec.size() > 0) idx = vec.back().first;
                left[i] = idx;
                vec.push_back({i, heights[i]});
            }
            right[n - 1] = n;
            vec.clear();
            vec.push_back({n - 1, heights[n - 1]});
            for(int i = n - 2; i >= 0; i--)
            {
                while(vec.size() > 0)
                {
                    if (vec.back().second < heights[i]) break;
                    vec.pop_back();
                }
                int idx = n;
                if (vec.size() > 0) idx = vec.back().first;
                right[i] = idx;
                vec.push_back({i, heights[i]});
            }
            for(int i = 0; i < heights.size(); i++)
            {
                int val = (right[i] - left[i] - 1); // right[i] - i - 1 + i - left[i] -1 + 1 = right[i] - left[i] - 1
                val = min(val, heights[i]);
                ans = max(ans, val * val);
            }
        }

        return ans;
    }
};


// Source https://leetcode.com/problems/count-complete-tree-nodes/

Given the root of a complete binary tree, return the number of the nodes in the tree.

According to Wikipedia, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. 
It can have between 1 and 2^h nodes inclusive at the last level h.

Design an algorithm that runs in less than O(n) time complexity.

 

Example 1:


Input: root = [1,2,3,4,5,6]
Output: 6
Example 2:

Input: root = []
Output: 0
Example 3:

Input: root = [1]
Output: 1
 

Constraints:

The number of nodes in the tree is in the range [0, 5 * 104].
0 <= Node.val <= 5 * 104
The tree is guaranteed to be complete.

class Solution
{
public:
    int countNodes(TreeNode *root)
    {
        if(!root) return 0;
        return countNodes(root->left) + countNodes(root->right) + 1;
    }
};


// Source https://leetcode.com/problems/rectangle-area/

Given the coordinates of two rectilinear rectangles in a 2D plane, return the total area covered by the two rectangles.

The first rectangle is defined by its bottom-left corner (ax1, ay1) and its top-right corner (ax2, ay2).

The second rectangle is defined by its bottom-left corner (bx1, by1) and its top-right corner (bx2, by2).

 

Example 1:

Rectangle Area
Input: ax1 = -3, ay1 = 0, ax2 = 3, ay2 = 4, bx1 = 0, by1 = -1, bx2 = 9, by2 = 2
Output: 45
Example 2:

Input: ax1 = -2, ay1 = -2, ax2 = 2, ay2 = 2, bx1 = -2, by1 = -2, bx2 = 2, by2 = 2
Output: 16
 

Constraints:

-104 <= ax1, ay1, ax2, ay2, bx1, by1, bx2, by2 <= 104

class Solution
{
public:
    int computeArea(int ax1, int ay1, int ax2, int ay2, int bx1, int by1, int bx2, int by2)
    {

        int totalArea = (ax2 - ax1) * (ay2 - ay1) + (bx2 - bx1) * (by2 - by1);

        if (bx1 >= ax2 || bx2 <= ax1 || by1 >= ay2 || by2 <= ay1)
        {
            return totalArea;
        }
        else
        {
            return totalArea - (min(ax2, bx2) - max(ax1, bx1)) * (min(ay2, by2) - max(ay1, by1));
        }
    }
};


// Source https://leetcode.com/problems/basic-calculator/

Given a string s representing a valid expression, implement a basic calculator to evaluate it, and return the result of the evaluation.

Note: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().

 

Example 1:

Input: s = "1 + 1"
Output: 2
Example 2:

Input: s = " 2-1 + 2 "
Output: 3
Example 3:

Input: s = "(1+(4+5+2)-3)+(6+8)"
Output: 23
 

Constraints:

1 <= s.length <= 3 * 105
s consists of digits, '+', '-', '(', ')', and ' '.
s represents a valid expression.
'+' is not used as a unary operation (i.e., "+1" and "+(2 + 3)" is invalid).
'-' could be used as a unary operation (i.e., "-1" and "-(2 + 3)" is valid).
There will be no two consecutive operators in the input.
Every number and running calculation will fit in a signed 32-bit integer.

class Solution
{
public:
    long long recur(string &s, int startPos, int endPos)
    {
        long long sum = 0;
        long long sign = 1;
        long long holdNum= 0;
        int holdType = 0;
        for(int i = startPos; i < endPos; i++)
        {
            if(s[i] == ' ') continue;
            else if(isdigit(s[i]))
            {
                long long val = 0;
                while(i < endPos && isdigit(s[i]))
                {
                   val = (val * 10) + (s[i] - '0');
                   ++i;
                }
                i--;
                if (holdType < 3) { holdNum = val; }
                else if (holdType == 3) { holdNum *= val; }
                else { holdNum /= val; }
            }
            else if(s[i] == '(')
            {
                ++i;
                int pos = i;
                int cnt = 1;
                while(i < endPos)
                {
                    if (s[i] == '(') { ++cnt; }
                    if (s[i] == ')') { --cnt; }
                    if (cnt == 0) break;
                    ++i;
                }
                long long temp = recur(s, pos, i);
                if (holdType < 3) { holdNum = temp; }
                else if (holdType == 3) { holdNum *= temp; }
                else { holdNum /= temp; }
            }
            else
            {
                if (s[i] == '-') { sum += (holdNum * sign); holdNum = 0; sign = -1; holdType = 1; }
                if (s[i] == '+') {  sum += (holdNum * sign); holdNum = 0; sign = 1; holdType = 2; }
                if (s[i] == '*') { holdType = 3; }
                if (s[i] == '/') { holdType = 4; }
            }
        }
        sum += (holdNum * sign); holdNum = 0;
        return sum;
    }

    int calculate(string s)
    {
        int n = s.length();
        return recur(s, 0, n);
    }
};


// Source https://leetcode.com/problems/implement-stack-using-queues/

Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (push, top, pop, and empty).

Implement the MyStack class:

void push(int x) Pushes element x to the top of the stack.
int pop() Removes the element on the top of the stack and returns it.
int top() Returns the element on the top of the stack.
boolean empty() Returns true if the stack is empty, false otherwise.
Notes:

You must use only standard operations of a queue, which means that only push to back, peek/pop from front, size and is empty operations are valid.
Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations.
 

Example 1:

Input
["MyStack", "push", "push", "top", "pop", "empty"]
[[], [1], [2], [], [], []]
Output
[null, null, null, 2, 2, false]

Explanation
MyStack myStack = new MyStack();
myStack.push(1);
myStack.push(2);
myStack.top(); // return 2
myStack.pop(); // return 2
myStack.empty(); // return False
 

Constraints:

1 <= x <= 9
At most 100 calls will be made to push, pop, top, and empty.
All the calls to pop and top are valid.

class MyStack
{
public:
    queue<int>q1, q2;
    MyStack()
    {

    }

    void push(int x)
    {
        q1.push(x);
    }

    int pop()
    {
        int size = q1.size();
        while(size > 1)
        {
            q2.push(q1.front());
            q1.pop();
            size--;
        }
        int x = q1.front();
        q1.pop();
        while(!q2.empty())
        {
            q1.push(q2.front());
            q2.pop();
        }
        return x;
    }

    int top()
    {
        return q1.back();
    }

    bool empty()
    {
        return q1.empty();
    }
};


// Source https://leetcode.com/problems/invert-binary-tree/

Given the root of a binary tree, invert the tree, and return its root.

 

Example 1:


Input: root = [4,2,7,1,3,6,9]
Output: [4,7,2,9,6,3,1]
Example 2:


Input: root = [2,1,3]
Output: [2,3,1]
Example 3:

Input: root = []
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100

class Solution
{
public:
    TreeNode *invertTree(TreeNode *root)
    {
        if(!root)
            return nullptr;

        TreeNode *left = root->left, *right = root->right;
        root->left = invertTree(right);
        root->right = invertTree(left);

        return root;
    }
};


// Source https://leetcode.com/problems/basic-calculator-ii/

Given a string s which represents an expression, evaluate this expression and return its value. 

The integer division should truncate toward zero.

You may assume that the given expression is always valid. All intermediate results will be in the range of [-231, 231 - 1].

Note: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().

 

Example 1:

Input: s = "3+2*2"
Output: 7
Example 2:

Input: s = " 3/2 "
Output: 1
Example 3:

Input: s = " 3+5 / 2 "
Output: 5
 

Constraints:

1 <= s.length <= 3 * 105
s consists of integers and operators ('+', '-', '*', '/') separated by some number of spaces.
s represents a valid expression.
All the integers in the expression are non-negative integers in the range [0, 231 - 1].
The answer is guaranteed to fit in a 32-bit integer.

class Solution
{
public:
    long long recur(string &s, int startPos, int endPos)
    {
        long long sum = 0;
        long long sign = 1;
        long long holdNum= 0;
        int holdType = 0;
        for(int i = startPos; i < endPos; i++)
        {
            if(s[i] == ' ') continue;
            else if(isdigit(s[i]))
            {
                long long val = 0;
                while(i < endPos && isdigit(s[i]))
                {
                   val = (val * 10) + (s[i] - '0');
                   ++i;
                }
                i--;
                if (holdType < 3) { holdNum = val; }
                else if (holdType == 3) { holdNum *= val; }
                else { holdNum /= val; }
            }
            else if(s[i] == '(')
            {
                ++i;
                int pos = i;
                int cnt = 1;
                while(i < endPos)
                {
                    if (s[i] == '(') { ++cnt; }
                    if (s[i] == ')') { --cnt; }
                    if (cnt == 0) break;
                    ++i;
                }
                long long temp = recur(s, pos, i);
                if (holdType < 3) { holdNum = temp; }
                else if (holdType == 3) { holdNum *= temp; }
                else { holdNum /= temp; }
            }
            else
            {
                if (s[i] == '-') { sum += (holdNum * sign); holdNum = 0; sign = -1; holdType = 1; }
                if (s[i] == '+') {  sum += (holdNum * sign); holdNum = 0; sign = 1; holdType = 2; }
                if (s[i] == '*') { holdType = 3; }
                if (s[i] == '/') { holdType = 4; }
            }
        }
        sum += (holdNum * sign); holdNum = 0;
        return sum;
    }

    int calculate(string s)
    {
        int n = s.length();
        return recur(s, 0, n);
    }
};


// Source https://leetcode.com/problems/summary-ranges/

You are given a sorted unique integer array nums.

Return the smallest sorted list of ranges that cover all the numbers in the array exactly. That is, each element of nums is covered by exactly one of the ranges, 
and there is no integer x such that x is in one of the ranges but not in nums.

Each range [a,b] in the list should be output as:

"a->b" if a != b
"a" if a == b
 

Example 1:

Input: nums = [0,1,2,4,5,7]
Output: ["0->2","4->5","7"]
Explanation: The ranges are:
[0,2] --> "0->2"
[4,5] --> "4->5"
[7,7] --> "7"
Example 2:

Input: nums = [0,2,3,4,6,8,9]
Output: ["0","2->4","6","8->9"]
Explanation: The ranges are:
[0,0] --> "0"
[2,4] --> "2->4"
[6,6] --> "6"
[8,9] --> "8->9"
 

Constraints:

0 <= nums.length <= 20
-231 <= nums[i] <= 231 - 1
All the values of nums are unique.
nums is sorted in ascending order.

class Solution
{
public:
    vector<string> summaryRanges(vector<int> &nums)
    {
        int n = nums.size();
        vector<string> ans;
        if (n <= 0) return ans;
        if (n == 1) { ans.push_back(to_string(nums[0])); return ans; }
        int i = 0;
        while (i < n)
        {
            int pos = i;
            ++i;
            for (; i < n && nums[i] == (nums[i - 1] + 1); ++i);
            if ((i - pos) == 1) { ans.push_back(to_string(nums[pos])); }
            else { string temp = to_string(nums[pos]) + "->" + to_string(nums[i - 1]); ans.push_back(temp); }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/majority-element-ii/

Given an integer array of size n, find all elements that appear more than n/3 取整 times.

 

Example 1:

Input: nums = [3,2,3]
Output: [3]
Example 2:

Input: nums = [1]
Output: [1]
Example 3:

Input: nums = [1,2]
Output: [1,2]
 

Constraints:

1 <= nums.length <= 5 * 104
-109 <= nums[i] <= 109

class Solution
{
public:
    vector<int> majorityElement(vector<int> &nums)
    {
        int n = nums.size();
        int cnt = n / 3;
        unordered_map<int, int> mp;
        vector<int> ans;
        for(auto val : nums)
        {
            if (++mp[val] == (cnt + 1)) ans.push_back(val);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/kth-smallest-element-in-a-bst/

Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.

 

Example 1:


Input: root = [3,1,4,null,2], k = 1
Output: 1
Example 2:


Input: root = [5,3,6,2,4,null,null,1], k = 3
Output: 3
 

Constraints:

The number of nodes in the tree is n.
1 <= k <= n <= 104
0 <= Node.val <= 104

class Solution
{
public:
    int count(TreeNode *root)
    {
        if(root == NULL)return 0;
        int left = count(root->left);
        int right = count(root->right);
        return left + right + 1;
    }
    int kthSmallest(TreeNode *root, int k)
    {
        int left = count(root->left);
        if(left + 1 == k)
            return root->val;
        if(left >= k)
            return kthSmallest(root->left, k);
        else
            return kthSmallest(root->right, k - left - 1);
    }
};


// Source https://leetcode.com/problems/power-of-two/

Given an integer n, return true if it is a power of two. Otherwise, return false.

An integer n is a power of two, if there exists an integer x such that n == 2^x.

 

Example 1:

Input: n = 1
Output: true
Explanation: 20 = 1
Example 2:

Input: n = 16
Output: true
Explanation: 24 = 16
Example 3:

Input: n = 3
Output: false
 

Constraints:

-231 <= n <= 231 - 1

class Solution
{
public:
    bool isPowerOfTwo(int n)
    {
        if (n < 1) return false;
        uint32_t val = n;
        return bitset<32>{val}.count() == 1;
    }
};


// Source https://leetcode.com/problems/implement-queue-using-stacks/

Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty).

Implement the MyQueue class:

void push(int x) Pushes element x to the back of the queue.
int pop() Removes the element from the front of the queue and returns it.
int peek() Returns the element at the front of the queue.
boolean empty() Returns true if the queue is empty, false otherwise.
Notes:

You must use only standard operations of a stack, which means only push to top, peek/pop from top, size, and is empty operations are valid.
Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations.
 

Example 1:

Input
["MyQueue", "push", "push", "peek", "pop", "empty"]
[[], [1], [2], [], [], []]
Output
[null, null, null, 1, 1, false]

Explanation
MyQueue myQueue = new MyQueue();
myQueue.push(1); // queue is: [1]
myQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)
myQueue.peek(); // return 1
myQueue.pop(); // return 1, queue is [2]
myQueue.empty(); // return false
 

Constraints:

1 <= x <= 9
At most 100 calls will be made to push, pop, peek, and empty.
All the calls to pop and peek are valid.

class MyQueue
{
    stack<int> s1;
    stack<int> s2;
public:
    MyQueue()
    {

    }

    void push(int x)
    {
        s1.push(x);
    }

    int pop()
    {
        if(s2.empty())
        {
            while(!s1.empty())
            {
                s2.push(s1.top());
                s1.pop();
            }
        }
        int res = s2.top();
        s2.pop();
        return res;
    }

    int peek()
    {
        if(s2.empty())
        {
            while(!s1.empty())
            {
                s2.push(s1.top());
                s1.pop();
            }
        }
        return s2.top();
    }

    bool empty()
    {
        return (s1.empty() && s2.empty());
    }
};


// Source https://leetcode.com/problems/number-of-digit-one/

Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.

 

Example 1:

Input: n = 13
Output: 6
Example 2:

Input: n = 0
Output: 0
 

Constraints:

0 <= n <= 109

Lets take an example, say n= 1234.

(1234 / 10) * 1 + min(1234 % 10 - 1 + 1, 1) = 124
(1234 / 100) * 10 + min(1234 % 100 - 10 + 1, 10) = 130
(1234 / 1000) * 100 + min(1234 % 1000 - 100 + 1, 100) = 200
(1234 / 10000) * 1000 + min(1234 % 10000 - 1000 + 1, 1000) = 235
124 + 130 + 200 + 235 = 689

class Solution
{
public:
    int countDigitOne(int n)
    {
        if (n == 0) return 0;
        int cnt = 0;
        for (long long i = 1; i <= n; i *= 10)
        {
            long long divider = i * 10;
            cnt += (n / divider) * i + min(max(n % divider - i + 1, 0LL), i);
        }
        return cnt;
    }
};


// Source https://leetcode.com/problems/palindrome-linked-list/

Given the head of a singly linked list, return true if it is a palindrome.

 

Example 1:


Input: head = [1,2,2,1]
Output: true
Example 2:


Input: head = [1,2]
Output: false
 

Constraints:

The number of nodes in the list is in the range [1, 105].
0 <= Node.val <= 9

class Solution
{
public:
    bool isPalindrome(ListNode *head)
    {
        if (head->next == NULL) return true;

        stack<int> s;
        ListNode *slow = head;
        ListNode *fast = head;

        while(fast && fast->next)
        {
            s.push(slow->val);
            slow = slow->next;
            fast = fast->next->next;
        }

        ListNode *node =NULL;

        if (fast) node = slow->next;
        else node = slow;
        ListNode *curr = node;
        while(curr)
        {
            if (curr->val == s.top())
            {
                s.pop();
                curr = curr->next;
            }
            else return false;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/

Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T 
that has both p and q as descendants (where we allow a node to be a descendant of itself).”

 

Example 1:


Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8
Output: 6
Explanation: The LCA of nodes 2 and 8 is 6.
Example 2:


Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4
Output: 2
Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.
Example 3:

Input: root = [2,1], p = 2, q = 1
Output: 2
 

Constraints:

The number of nodes in the tree is in the range [2, 105].
-109 <= Node.val <= 109
All Node.val are unique.
p != q
p and q will exist in the BST.

class Solution
{
public:
    bool recur(TreeNode *node, string &path, TreeNode *target)
    {
        if (!node) return false;
        if (node == target) return true;
        if (node->left)
        {
            path.push_back('L');
            if (recur(node->left, path, target)) return true;
            path.pop_back();
        }
        if (node->right)
        {
            path.push_back('R');
            if (recur(node->right, path, target)) return true;
            path.pop_back();
        }
        return false;
    }

    TreeNode *lowestCommonAncestor(TreeNode *root, TreeNode *p, TreeNode *q)
    {
        string path = "";
        path.reserve(32);
        recur(root, path, p);
        string res1 = std::move(path);
        path = "";
        path.reserve(32);
        recur(root, path, q);
        string res2 = std::move(path);
        auto len = min(res1.size(), res2.size());
        TreeNode *curr = root;
        for (int i = 0; i < len; ++i)
        {
            if (res1[i] != res2[i]) break;
            curr = (res1[i] == 'L') ? curr->left : curr->right;
        }
        return curr;
    }
};


// Source https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/

Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T 
that has both p and q as descendants (where we allow a node to be a descendant of itself).”

 

Example 1:


Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.
Example 2:


Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.
Example 3:

Input: root = [1,2], p = 1, q = 2
Output: 1
 

Constraints:

The number of nodes in the tree is in the range [2, 105].
-109 <= Node.val <= 109
All Node.val are unique.
p != q
p and q will exist in the tree.

class Solution
{
public:
    bool recur(TreeNode *node, string &path, TreeNode *target)
    {
        if (!node) return false;
        if (node == target) return true;
        if (node->left)
        {
            path.push_back('L');
            if (recur(node->left, path, target)) return true;
            path.pop_back();
        }
        if (node->right)
        {
            path.push_back('R');
            if (recur(node->right, path, target)) return true;
            path.pop_back();
        }
        return false;
    }

    TreeNode *lowestCommonAncestor(TreeNode *root, TreeNode *p, TreeNode *q)
    {
        string path = "";
        path.reserve(32);
        recur(root, path, p);
        string res1 = std::move(path);
        path = "";
        path.reserve(32);
        recur(root, path, q);
        string res2 = std::move(path);
        auto len = min(res1.size(), res2.size());
        TreeNode *curr = root;
        for (int i = 0; i < len; ++i)
        {
            if (res1[i] != res2[i]) break;
            curr = (res1[i] == 'L') ? curr->left : curr->right;
        }
        return curr;
    }
};


// Source https://leetcode.com/problems/delete-node-in-a-linked-list/

Write a function to delete a node in a singly-linked list. You will not be given access to the head of the list, instead you will be given access to the node to be deleted directly.

It is guaranteed that the node to be deleted is not a tail node in the list.

 

Example 1:


Input: head = [4,5,1,9], node = 5
Output: [4,1,9]
Explanation: You are given the second node with value 5, the linked list should become 4 -> 1 -> 9 after calling your function.
Example 2:


Input: head = [4,5,1,9], node = 1
Output: [4,5,9]
Explanation: You are given the third node with value 1, the linked list should become 4 -> 5 -> 9 after calling your function.
 

Constraints:

The number of the nodes in the given list is in the range [2, 1000].
-1000 <= Node.val <= 1000
The value of each node in the list is unique.
The node to be deleted is in the list and is not a tail node

class Solution
{
public:
    void deleteNode(ListNode *node)
    {
        ListNode *next = node->next;
        node->val = next->val;
        node->next = next->next;
        delete next;
    }
};


// Source https://leetcode.com/problems/product-of-array-except-self/

Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]
 

Constraints:

2 <= nums.length <= 105
-30 <= nums[i] <= 30
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

class Solution
{
public:
    vector<int> productExceptSelf(vector<int> &nums)
    {
        int n = nums.size();
        vector<int> left(n);
        vector<int> right(n);
        left[0] = 1;
        for (int i = 1; i < n; ++i)
        {
            left[i] = nums[i - 1] * left[i - 1];
        }
        right[n - 1] = 1;
        for (int i = n - 2; i >= 0; --i)
        {
            right[i] = nums[i + 1] * right[i + 1];
        }
        vector<int> ans(n);
        for (int i = 0; i < n; ++i)
        {
            ans[i] = left[i] * right[i];
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/sliding-window-maximum/

You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. 
You can only see the k numbers in the window. Each time the sliding window moves right by one position.

Return the max sliding window.

 

Example 1:

Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
Explanation: 
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
Example 2:

Input: nums = [1], k = 1
Output: [1]
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104
1 <= k <= nums.length

class Solution
{
public:
    vector<int> maxSlidingWindow(vector<int> &nums, int k)
    {
        int n = nums.size();
        if (n < k) return {};
        vector<int> res;
        res.reserve(n - k + 1);
        map<int, int> mp;
        int i = 0;
        for (; i < k; ++i) mp[nums[i]]++;
        int val = mp.rbegin()->first;
        res.push_back(val);
        while (i < n)
        {
            int val = nums[i - k];
            if (mp[val]-- <= 1) mp.erase(val);
            mp[nums[i]]++;
            val = mp.rbegin()->first;
            res.push_back(val);
            ++i;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/search-a-2d-matrix-ii/

Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:

Integers in each row are sorted in ascending from left to right.
Integers in each column are sorted in ascending from top to bottom.
 

Example 1:


Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5
Output: true
Example 2:


Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20
Output: false
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= n, m <= 300
-109 <= matrix[i][j] <= 109
All the integers in each row are sorted in ascending order.
All the integers in each column are sorted in ascending order.
-109 <= target <= 109

class Solution
{
public:
    bool searchMatrix(vector<vector<int>> &matrix, int target)
    {
        int m = matrix.size();
        int n = matrix[0].size();
        int i = 0;
        for (; i < m && matrix[i][n - 1] < target; ++i);
        if (i == m) return false;
        int row = i, col = n - 1;
        while(row < m && col >= 0)
        {
            if(matrix[row][col] == target) return true;
            if(matrix[row][col] > target) col--;
            else row++;
        }
        return false;
    }
};


// Source https://leetcode.com/problems/different-ways-to-add-parentheses/

Given a string expression of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. 
You may return the answer in any order.

 

Example 1:

Input: expression = "2-1-1"
Output: [0,2]
Explanation:
((2-1)-1) = 0 
(2-(1-1)) = 2
Example 2:

Input: expression = "2*3-4*5"
Output: [-34,-14,-10,-10,10]
Explanation:
(2*(3-(4*5))) = -34 
((2*3)-(4*5)) = -14 
((2*(3-4))*5) = -10 
(2*((3-4)*5)) = -10 
(((2*3)-4)*5) = 10
 

Constraints:

1 <= expression.length <= 20
expression consists of digits and the operator '+', '-', and '*'.
All the integer values in the input expression are in the range [0, 99].

class Solution
{
public:
    unordered_map<int, vector<int>> dp;

    vector<int> recur(string &s, int startPos, int endPos)
    {
        if(startPos >= endPos) return {};
        int idx = startPos * 100 + endPos;
        if(dp.count(idx)) return dp[idx];
        vector<int> ans;
        ans.reserve(32);
        int flag = 0;
        for (int i = startPos; i < endPos; ++i)
        {
            if (isdigit(s[i])) continue;
            flag = 1;
            auto retVec1 = recur(s, startPos, i);
            auto retVec2 = recur(s, i + 1, endPos);
            for (auto x : retVec1)
            {
                for (auto y : retVec2)
                {
                    if (s[i] == '+') ans.push_back(x + y);
                    else if (s[i] == '-') ans.push_back(x - y);
                    else if (s[i] == '*') ans.push_back(x * y);
                }
            }
        }
        if (flag == 0)
        {
            int val = 0;
            for (int i = startPos; i < endPos; ++i)
            {
                val = (val * 10) + (s[i] - '0');
            }
            ans.push_back(val);
        }
        return dp[idx] = ans;
    }

    vector<int> diffWaysToCompute(string s)
    {
        int n = s.length();
        return recur(s, 0, n);
    }
};


// Source https://leetcode.com/problems/valid-anagram/

Given two strings s and t, return true if t is an anagram of s, and false otherwise.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

 

Example 1:

Input: s = "anagram", t = "nagaram"
Output: true
Example 2:

Input: s = "rat", t = "car"
Output: false
 

Constraints:

1 <= s.length, t.length <= 5 * 104
s and t consist of lowercase English letters.

class Solution
{
public:
    bool isAnagram(string s, string t)
    {
        vector<int> sCount(26, 0);
        vector<int> tCount(26, 0);

        for(int i = 0; i < s.size(); i++)
            sCount[s[i] - 'a']++;
        for(int i = 0; i < t.size(); i++)
            tCount[t[i] - 'a']++;

        for(int i = 0; i < 26; i++)
        {
            if(sCount[i] != tCount[i])
                return false;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/binary-tree-paths/

Given the root of a binary tree, return all root-to-leaf paths in any order.

A leaf is a node with no children.

 

Example 1:


Input: root = [1,2,3,null,5]
Output: ["1->2->5","1->3"]
Example 2:

Input: root = [1]
Output: ["1"]
 

Constraints:

The number of nodes in the tree is in the range [1, 100].
-100 <= Node.val <= 100

class Solution
{
public:
    vector<string>ans;
    void recur(TreeNode *node, string temp)
    {
        if (!node) return;
        if (node->left == NULL && node->right == NULL)
        {
            temp = temp + to_string(node->val);
            ans.emplace_back(std::move(temp));
            return;
        }
        temp = temp + to_string(node->val) + "->";
        if (node->left != NULL) recur(node->left, temp);
        if (node->right != NULL) recur(node->right, std::move(temp));
    }
    vector<string> binaryTreePaths(TreeNode *root)
    {
        if(!root) return {};
        recur(root, "");
        return ans;
    }
};


// Source https://leetcode.com/problems/add-digits/

Given an integer num, repeatedly add all its digits until the result has only one digit, and return it.

 

Example 1:

Input: num = 38
Output: 2
Explanation: The process is
38 --> 3 + 8 --> 11
11 --> 1 + 1 --> 2 
Since 2 has only one digit, return it.
Example 2:

Input: num = 0
Output: 0
 

Constraints:

0 <= num <= 231 - 1

class Solution
{
public:
    int helper(int num)
    {
        int sum = 0;
        while (num > 0)
        {
            sum += (num % 10);
            num /= 10;
        }
        return sum;
    }
    int addDigits(int num)
    {
        int check = num;
        while(true)
        {
            check = helper(check);
            if (check <= 9) break;
        }
        return check;
    }
};


// Source https://leetcode.com/problems/single-number-iii/

Given an integer array nums, in which exactly two elements appear only once and all the other elements appear exactly twice. 
Find the two elements that appear only once. You can return the answer in any order.

You must write an algorithm that runs in linear runtime complexity and uses only constant extra space.

 

Example 1:

Input: nums = [1,2,1,3,2,5]
Output: [3,5]
Explanation:  [5, 3] is also a valid answer.
Example 2:

Input: nums = [-1,0]
Output: [-1,0]
Example 3:

Input: nums = [0,1]
Output: [1,0]
 

Constraints:

2 <= nums.length <= 3 * 104
-231 <= nums[i] <= 231 - 1
Each integer in nums will appear twice, only two integers will appear once.

class Solution
{
public:
    vector<int> singleNumber(vector<int> &nums)
    {
        uint32_t all = 0;
        for (int x : nums) all ^= x;
        uint32_t split = all & (-all);
        uint32_t val = 0;
        for (int x : nums)
            if (x & split) val ^= x;

        return {int(val), int(val ^ all)};
    }
};


// Source https://leetcode.com/problems/ugly-number/

An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.

Given an integer n, return true if n is an ugly number.

 

Example 1:

Input: n = 6
Output: true
Explanation: 6 = 2 × 3
Example 2:

Input: n = 1
Output: true
Explanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.
Example 3:

Input: n = 14
Output: false
Explanation: 14 is not ugly since it includes the prime factor 7.
 

Constraints:

-231 <= n <= 231 - 1

class Solution
{
public:

    bool isUgly(int n)
    {
        if(n <= 0)
            return false;
        while(n % 2 == 0)
            n /= 2;
        while(n % 3 == 0)
            n /= 3;
        while(n % 5 == 0)
            n /= 5;
        return n == 1;
    }
};


// Source https://leetcode.com/problems/ugly-number-ii/

An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.

Given an integer n, return the nth ugly number.

 

Example 1:

Input: n = 10
Output: 12
Explanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers.
Example 2:

Input: n = 1
Output: 1
Explanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.
 

Constraints:

1 <= n <= 1690

class Solution
{
public:
    int nthUglyNumber(int n)
    {
        int dp[n + 1];

        dp[1] = 1;
        int p2 = 1;
        int p3 = 1;
        int p5 = 1;
        for(int i = 2; i <= n; i++)
        {
            int f2 = 2 * dp[p2];
            int f3 = 3 * dp[p3];
            int f5 = 5 * dp[p5];
            int val = min(f2, min(f3, f5));
            dp[i] = val;
            if(f2 == val)
            {
                p2++;
            }
            if(f3 == val)
            {
                p3++;
            }
            if(f5 == val)
            {
                p5++;
            }
        }
        return dp[n];
    }
};


// Source https://leetcode.com/problems/missing-number/

Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.

 

Example 1:

Input: nums = [3,0,1]
Output: 2
Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.
Example 2:

Input: nums = [0,1]
Output: 2
Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.
Example 3:

Input: nums = [9,6,4,2,3,5,7,0,1]
Output: 8
Explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.
 

Constraints:

n == nums.length
1 <= n <= 104
0 <= nums[i] <= n
All the numbers of nums are unique.

class Solution
{
public:
    int missingNumber(vector<int> &nums)
    {
        int n = nums.size(), sum = 0, temp = (n * (n + 1)) / 2;
        for(int i = 0; i < n; i++)
        {
            sum += nums[i];
        }
        return temp - sum;
    }
};


// Source https://leetcode.com/problems/integer-to-english-words/

Convert a non-negative integer num to its English words representation.

 

Example 1:

Input: num = 123
Output: "One Hundred Twenty Three"
Example 2:

Input: num = 12345
Output: "Twelve Thousand Three Hundred Forty Five"
Example 3:

Input: num = 1234567
Output: "One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven"
 

Constraints:

0 <= num <= 231 - 1

class Solution
{
public:
    string digits[20] = {"Zero", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine",
                         "Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen"
                        };

    string tens[10] = {"", "", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety"};

    string int2english(int num)
    {
        if(num >= 1000000000)
        {
            if (num % 1000000000 > 0) return int2english(num / 1000000000) + " Billion " + int2english(num % 1000000000);
            return int2english(num / 1000000000) + " Billion";
        }
        if(num >= 1000000)
        {
            if (num % 1000000 > 0) return int2english(num / 1000000) + " Million " + int2english(num % 1000000);
            else return int2english(num / 1000000) + " Million";
        }
        if(num >= 1000)
        {
            if (num % 1000 > 0) return int2english(num / 1000) + " Thousand " + int2english(num % 1000);
            else return int2english(num / 1000) + " Thousand";
        }
        if(num >= 100)
        {
            if (num % 100 > 0) return int2english(num / 100) + " Hundred " + int2english(num % 100);
            else return int2english(num / 100) + " Hundred";
        }
        if(num >= 20)
        {
            if (num % 10 > 0) return tens[num / 10] + " " + digits[num % 10];
            else return tens[num / 10];
        }
        return digits[num];
    }

    string numberToWords(int num)
    {
        return int2english(num);
    }
};


// Source https://leetcode.com/problems/h-index/

Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper, return compute the researcher's h-index.

According to the definition of h-index on Wikipedia: A scientist has an index h if h of their n papers have at least h citations each, and the other n − h papers have no more than h citations each.

If there are several possible values for h, the maximum one is taken as the h-index.

 

Example 1:

Input: citations = [3,0,6,1,5]
Output: 3
Explanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively.
Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.
Example 2:

Input: citations = [1,3,1]
Output: 1
 

Constraints:

n == citations.length
1 <= n <= 5000
0 <= citations[i] <= 1000

class Solution
{
public:
    int hIndex(vector<int> &citations)
    {
        map<int, int> mp;
        for(auto val : citations)
        {
            mp[val]++;
        }
        int cnt = 0;
        auto itr = mp.rbegin();
        while (itr != mp.rend())
        {
            if(cnt >= itr->first) return cnt;
            cnt += itr->second;
            if (cnt >= itr->first) return itr->first;
            ++itr;
        }
        return cnt;
    }
};



// Source https://leetcode.com/problems/h-index-ii/

Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper and citations is sorted in an ascending order, 
return compute the researcher's h-index.

According to the definition of h-index on Wikipedia: A scientist has an index h if h of their n papers have at least h citations each, and the other n − h papers have no more than h citations each.

If there are several possible values for h, the maximum one is taken as the h-index.

You must write an algorithm that runs in logarithmic time.

 

Example 1:

Input: citations = [0,1,3,5,6]
Output: 3
Explanation: [0,1,3,5,6] means the researcher has 5 papers in total and each of them had received 0, 1, 3, 5, 6 citations respectively.
Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.
Example 2:

Input: citations = [1,2,100]
Output: 2
 

Constraints:

n == citations.length
1 <= n <= 105
0 <= citations[i] <= 1000
citations is sorted in ascending order.

class Solution
{
public:
    int hIndex(vector<int> &citations)
    {
        int n = citations.size();
        int left = 0, right = citations[n - 1];
        int ans = 0;
        while (left <= right)
        {
            int mid = left + (right - left) / 2;
            auto itr = lower_bound(citations.begin(), citations.end(), mid);
            int cnt = citations.end() - itr;
            if (cnt >= mid) { ans = mid; left = mid + 1; }
            else { right = mid - 1; }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/first-bad-version/

You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. 
Since each version is developed based on the previous version, all the versions after a bad version are also bad.

Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad.

You are given an API bool isBadVersion(version) which returns whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.

 

Example 1:

Input: n = 5, bad = 4
Output: 4
Explanation:
call isBadVersion(3) -> false
call isBadVersion(5) -> true
call isBadVersion(4) -> true
Then 4 is the first bad version.
Example 2:

Input: n = 1, bad = 1
Output: 1
 

Constraints:

1 <= bad <= n <= 231 - 1

class Solution
{
public:
    int firstBadVersion(int n)
    {
        int lower = 1, upper = n;
        int ans = 1;
        while(lower <= upper)
        {
            int mid = lower + (upper - lower) / 2;
            if(!isBadVersion(mid)) { lower = mid + 1; }
            else { ans = mid; upper = mid - 1; }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/perfect-squares/

Given an integer n, return the least number of perfect square numbers that sum to n.

A perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, 1, 4, 9, and 16 are perfect squares while 3 and 11 are not.

 

Example 1:

Input: n = 12
Output: 3
Explanation: 12 = 4 + 4 + 4.
Example 2:

Input: n = 13
Output: 2
Explanation: 13 = 4 + 9.
 

Constraints:

1 <= n <= 104

Exery natural number can be represented in the form of = a^2 + b^2 + c^2 + d^2

Exery natural number can be represented in the form of = a^2 + b^2 + c^2
only if number if not int the form of 4^a(8^b + 7)
int that case number will be break into 4 squares.

class Solution
{
public:
   int lim;
    int dp[10005];

    int solve(int n)
    {
        if(n < 0) return 1e9;
        if(n == 0) return 0;
        if(dp[n] != -1) return dp[n];
        int ans = 1e9;
        for(int i = 1; i <= lim; i++)
        {
            if (n < (i * i)) break;
            ans = min(ans, 1 + solve(n - (i * i)));
        }
        return dp[n] = ans;
    }
    int numSquares(int n)
    {
        lim = sqrt(n);
        memset(dp, -1, sizeof(dp));
        return solve(n);
    }
};


// Source https://leetcode.com/problems/expression-add-operators/

Given a string num that contains only digits and an integer target, return all possibilities to insert the binary operators '+', '-', and/or '*' between the digits of num 
so that the resultant expression evaluates to the target value.

Note that operands in the returned expressions should not contain leading zeros.

 

Example 1:

Input: num = "123", target = 6
Output: ["1*2*3","1+2+3"]
Explanation: Both "1*2*3" and "1+2+3" evaluate to 6.
Example 2:

Input: num = "232", target = 8
Output: ["2*3+2","2+3*2"]
Explanation: Both "2*3+2" and "2+3*2" evaluate to 8.
Example 3:

Input: num = "3456237490", target = 9191
Output: []
Explanation: There are no expressions that can be created from "3456237490" to evaluate to 9191.
 

Constraints:

1 <= num.length <= 10
num consists of only digits.
-231 <= target <= 231 - 1

sum + a = sum + (1 * a)
sum - a = sum - (1 * a)

class Solution
{
public:
    int n;

    void recAddOperator(vector<string> &retV, string &path, int index, long existSum, long existProd, int prevSign, string &inputStr, long int target)
    {
        long num = 0;
        int existLen = path.length();
        int limit = index;
        if (inputStr[index] == '0')
        {
            limit = index + 1;
        }
        else
            limit = n;
        for(int i = index; i < limit; i++)
        {
            num = num * (long)10 + (long)(inputStr[i] - '0');
            path.push_back(inputStr[i]);

            if(i == n - 1)
            {
                long final_num = existSum + prevSign * existProd * num;
                if (final_num == target)
                    retV.push_back(path);
                break;
            }

            //choice 1.
            path.push_back('+');
            long oldexistSum = existSum;
            long oldexistProd = existProd;
            existSum = existSum + prevSign * existProd * (num);
            recAddOperator(retV, path, i + 1, existSum, 1, 1, inputStr, target);
            existSum = oldexistSum;
            existProd = oldexistProd;
            path.pop_back();

            //choice 2
            path.push_back('-');
            oldexistSum = existSum;
            oldexistProd = existProd;
            existSum = existSum + prevSign * existProd * (num);
            recAddOperator(retV, path, i + 1, existSum, 1, -1, inputStr, target);
            existSum = oldexistSum;
            existProd = oldexistProd;
            path.pop_back();

            //choice 3
            path.push_back('*');
            oldexistSum = existSum;
            oldexistProd = existProd;
            recAddOperator(retV, path, i + 1, existSum, existProd * num, prevSign, inputStr, target);
            existSum = oldexistSum;
            existProd = oldexistProd;
            path.pop_back();
        }
        path.erase(existLen, path.length() - existLen);
    }
    vector<string> addOperators(string num, int target)
    {
        n = num.length();
        if(n == 0) return {};
        vector<string> retV;
        string path;
        recAddOperator(retV, path, 0, 0, 1, 1, num, (long)target);
        return retV;
    }
};


// Source https://leetcode.com/problems/move-zeroes/

Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Note that you must do this in-place without making a copy of the array.

 

Example 1:

Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]
Example 2:

Input: nums = [0]
Output: [0]
 

Constraints:

1 <= nums.length <= 104
-231 <= nums[i] <= 231 - 1

class Solution
{
public:
    void moveZeroes(vector<int> &nums)
    {
        int n = nums.size();
        int i = 0, j = 0;
        for(; j < n; ++j)
        {
            if(nums[j] != 0)
            {
                swap(nums[i], nums[j]);
                ++i;
            }
        }
    }
};


// Source https://leetcode.com/problems/peeking-iterator/

Design an iterator that supports the peek operation on an existing iterator in addition to the hasNext and the next operations.

Implement the PeekingIterator class:

PeekingIterator(Iterator<int> nums) Initializes the object with the given integer iterator iterator.
int next() Returns the next element in the array and moves the pointer to the next element.
boolean hasNext() Returns true if there are still elements in the array.
int peek() Returns the next element in the array without moving the pointer.
Note: Each language may have a different implementation of the constructor and Iterator, but they all support the int next() and boolean hasNext() functions.

 

Example 1:

Input
["PeekingIterator", "next", "peek", "next", "next", "hasNext"]
[[[1, 2, 3]], [], [], [], [], []]
Output
[null, 1, 2, 2, 3, false]

Explanation
PeekingIterator peekingIterator = new PeekingIterator([1, 2, 3]); // [1,2,3]
peekingIterator.next();    // return 1, the pointer moves to the next element [1,2,3].
peekingIterator.peek();    // return 2, the pointer does not move [1,2,3].
peekingIterator.next();    // return 2, the pointer moves to the next element [1,2,3]
peekingIterator.next();    // return 3, the pointer moves to the next element [1,2,3]
peekingIterator.hasNext(); // return False
 

Constraints:

1 <= nums.length <= 1000
1 <= nums[i] <= 1000
All the calls to next and peek are valid.
At most 1000 calls will be made to next, hasNext, and peek.

class PeekingIterator : public Iterator
{
public:
    PeekingIterator(const vector<int> &nums) : Iterator(nums)
    {
        for(auto val : nums)
        {
            q.push(val);
        }
    }

    int peek()
    {
        return q.front();
    }

    int next()
    {
        int ele = q.front();
        q.pop();
        return ele;
    }

    bool hasNext() const
    {
        return !q.empty();
    }
private:
    queue<int> q;
};


// Source https://leetcode.com/problems/find-the-duplicate-number/

Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.

You must solve the problem without modifying the array nums and uses only constant extra space.

 

Example 1:

Input: nums = [1,3,4,2,2]
Output: 2

0 -> 1 -> 3 -> 2 -> 4 -> 2

Example 2:

Input: nums = [3,1,3,4,2]
Output: 3
 
0 -> 3 -> 4 -> 2 ->3

Constraints:

1 <= n <= 105
nums.length == n + 1
1 <= nums[i] <= n
All the integers in nums appear only once except for precisely one integer which appears two or more times.

fast每次走2步，slow每次走一步，当fast等于slow时，fast走过的步数为slow走过的步数的2倍
fast走过的步数为head到环的起始点的步数 + 环的起始点到相遇点的步数 + 相遇点的步数 到 相遇点的步数 （绕环m圈）
slow走过的步数为head到环的起始点的步数 + 环的起始点到相遇点的步数
head到环的起始点的步数 + 环的起始点到相遇点的步数 = 相遇点的步数 到 相遇点的步数 （绕环m圈）= 环的起始点到相遇点的步数 + 相遇点到环的起始点的步数 + 绕环m - 1圈
head到环的起始点的步数 = 相遇点到环的起始点的步数 + 绕环m - 1圈

class Solution
{
public:
    int findDuplicate(vector<int> &nums)
    {
        int slow = 0;
        int fast = 0;
        do
        {
            slow = nums[slow];
            fast = nums[nums[fast]];
        }
        while(slow != fast);
        fast = 0;
        while(fast != slow)
        {
            slow = nums[slow];
            fast = nums[fast];
        }
        return slow;
    }
};


// Source https://leetcode.com/problems/game-of-life/

According to Wikipedia's article: "The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970."

The board is made up of an m x n grid of cells, where each cell has an initial state: live (represented by a 1) or dead (represented by a 0). 
Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):

Any live cell with fewer than two live neighbors dies as if caused by under-population.
Any live cell with two or three live neighbors lives on to the next generation.
Any live cell with more than three live neighbors dies, as if by over-population.
Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.
The next state is created by applying the above rules simultaneously to every cell in the current state, where births and deaths occur simultaneously. 
Given the current state of the m x n grid board, return the next state.

 

Example 1:


Input: board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]
Output: [[0,0,0],[1,0,1],[0,1,1],[0,1,0]]
Example 2:


Input: board = [[1,1],[1,0]]
Output: [[1,1],[1,1]]
 

Constraints:

m == board.length
n == board[i].length
1 <= m, n <= 25
board[i][j] is 0 or 1.

class Solution
{
public:
    void gameOfLife(vector<vector<int>> &board)
    {
        int m = board.size(), n = board[0].size();
        vector<vector<int>> temp(m + 2, vector<int>(n + 2, 0));
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                temp[i + 1][j + 1] = board[i][j];
            }
        }
        for(int i = 1; i <= m; i++)
        {
            for(int j = 1; j <= n; j++)
            {
                int cnt = 0;
                for(int k = 0; k < 3; k++)
                {
                    for(int z = 0; z < 3; z++)
                    {
                        if (k == 1 && z == 1) continue;
                        if(temp[i - 1 + k][j - 1 + z]) cnt++;
                    }
                }
                if(temp[i][j])
                {
                    if(cnt < 2) board[i - 1][j - 1] = 0;
                    else if(cnt > 3) board[i - 1][j - 1] = 0;
                }
                else
                {
                    if(cnt == 3) board[i - 1][j - 1] = 1;
                }
            }
        }
    }
};


// Source https://leetcode.com/problems/word-pattern/

Given a pattern and a string s, find if s follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.

 

Example 1:

Input: pattern = "abba", s = "dog cat cat dog"
Output: true
Example 2:

Input: pattern = "abba", s = "dog cat cat fish"
Output: false
Example 3:

Input: pattern = "aaaa", s = "dog cat cat dog"
Output: false
 

Constraints:

1 <= pattern.length <= 300
pattern contains only lower-case English letters.
1 <= s.length <= 3000
s contains only lowercase English letters and spaces ' '.
s does not contain any leading or trailing spaces.
All the words in s are separated by a single space.

class Solution
{
public:
    bool wordPattern(string pattern, string s)
    {
        vector<string> v;

        stringstream iss(s);
        string word;

        while(iss >> word)
            v.push_back(word);

        if(pattern.size() != v.size())
            return false;

        unordered_map<char, string> c2s;
        unordered_map<string, char> s2c;

        for(int i = 0; i < pattern.size(); i++)
        {
            if(c2s.find(pattern[i]) != c2s.end() && c2s[pattern[i]] != v[i]) return false;
            if(s2c.find(v[i]) != s2c.end() && s2c[v[i]] != pattern[i]) return false;
            c2s[pattern[i]] = v[i];
            s2c[v[i]] = pattern[i];
        }
        return true;
    }
};


// Source https://leetcode.com/problems/nim-game/

You are playing the following Nim Game with your friend:

Initially, there is a heap of stones on the table.
You and your friend will alternate taking turns, and you go first.
On each turn, the person whose turn it is will remove 1 to 3 stones from the heap.
The one who removes the last stone is the winner.
Given n, the number of stones in the heap, return true if you can win the game assuming both you and your friend play optimally, otherwise return false.

 

Example 1:

Input: n = 4
Output: false
Explanation: These are the possible outcomes:
1. You remove 1 stone. Your friend removes 3 stones, including the last stone. Your friend wins.
2. You remove 2 stones. Your friend removes 2 stones, including the last stone. Your friend wins.
3. You remove 3 stones. Your friend removes the last stone. Your friend wins.
In all outcomes, your friend wins.
Example 2:

Input: n = 1
Output: true
Example 3:

Input: n = 2
Output: true
 

Constraints:

1 <= n <= 231 - 1

class Solution
{
public:
    bool canWinNim(int n)
    {
        if(n % 4 == 0)
            return false;
        else
            return true;
    }
};


// Source https://leetcode.com/problems/find-median-from-data-stream/

The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value and the median is the mean of the two middle values.

For example, for arr = [2,3,4], the median is 3.
For example, for arr = [2,3], the median is (2 + 3) / 2 = 2.5.
Implement the MedianFinder class:

MedianFinder() initializes the MedianFinder object.
void addNum(int num) adds the integer num from the data stream to the data structure.
double findMedian() returns the median of all elements so far. Answers within 10-5 of the actual answer will be accepted.
 

Example 1:

Input
["MedianFinder", "addNum", "addNum", "findMedian", "addNum", "findMedian"]
[[], [1], [2], [], [3], []]
Output
[null, null, null, 1.5, null, 2.0]

Explanation
MedianFinder medianFinder = new MedianFinder();
medianFinder.addNum(1);    // arr = [1]
medianFinder.addNum(2);    // arr = [1, 2]
medianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)
medianFinder.addNum(3);    // arr[1, 2, 3]
medianFinder.findMedian(); // return 2.0
 

Constraints:

-105 <= num <= 105
There will be at least one element in the data structure before calling findMedian.
At most 5 * 104 calls will be made to addNum and findMedian.

class MedianFinder
{
private:
    priority_queue<int> max_heap; // denote as the first half
    priority_queue<int, vector<int>, greater<int>> min_heap; // denote as the second half
    int size; // total size

public:
    MedianFinder()
    {
        size = 0;
    }

    void addNum(int num)
    {
        if(max_heap.empty() || max_heap.top() > num)
            max_heap.push(num);
        else
            min_heap.push(num);

        if(max_heap.size() > min_heap.size() + 1)  // first half is larger, shift right
        {
            min_heap.push(max_heap.top());
            max_heap.pop();
        }
        else if(min_heap.size() > max_heap.size() + 1)   // second half is larger, shift left
        {
            max_heap.push(min_heap.top());
            min_heap.pop();
        }
        size++;
    }

    double findMedian()
    {
        if(size % 2 == 0) // if size is even, return average of two tops as median
            return (max_heap.top() + min_heap.top()) / 2.0;
        else // otherwise, return the larger one
            return max_heap.size() > min_heap.size() ? max_heap.top() : min_heap.top();
    }
};


// Source https://leetcode.com/problems/serialize-and-deserialize-binary-tree/

Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, 
or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. 
You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

Clarification: The input/output format is the same as how LeetCode serializes a binary tree. 
You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.

 

Example 1:


Input: root = [1,2,3,null,null,4,5]
Output: [1,2,3,null,null,4,5]
Example 2:

Input: root = []
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 104].
-1000 <= Node.val <= 1000

class Codec
{
public:

    string serialize(TreeNode *root)
    {
        if(!root)
            return "#";
        string res = to_string(root->val);
        res += " " + serialize(root->left) + " " + serialize(root->right);
        return res;
    }
    int i = 0;
    TreeNode *build(vector<string> &v)
    {
        if(i >= v.size())
            return NULL;
        if(v[i] == "#")
        {
            i++;
            return NULL;
        }
        TreeNode *node = new TreeNode(stoi(v[i]));
        i++;
        node->left = build(v);
        node->right = build(v);
        return node;
    }
    TreeNode *deserialize(string data)
    {
        vector<string>v;
        istringstream ss(data);
        string temp;
        while(ss >> temp)
        {
            v.push_back(temp);
        }
        i = 0;
        return build(v);
    }
};


// Source https://leetcode.com/problems/bulls-and-cows/

You are playing the Bulls and Cows game with your friend.

You write down a secret number and ask your friend to guess what the number is. When your friend makes a guess, you provide a hint with the following info:

The number of "bulls", which are digits in the guess that are in the correct position.
The number of "cows", which are digits in the guess that are in your secret number but are located in the wrong position. 
Specifically, the non-bull digits in the guess that could be rearranged such that they become bulls.
Given the secret number secret and your friend's guess guess, return the hint for your friend's guess.

The hint should be formatted as "xAyB", where x is the number of bulls and y is the number of cows. Note that both secret and guess may contain duplicate digits.

 

Example 1:

Input: secret = "1807", guess = "7810"
Output: "1A3B"
Explanation: Bulls are connected with a '|' and cows are underlined:
"1807"
  |
"7810"
Example 2:

Input: secret = "1123", guess = "0111"
Output: "1A1B"
Explanation: Bulls are connected with a '|' and cows are underlined:
"1123"        "1123"
  |      or     |
"0111"        "0111"
Note that only one of the two unmatched 1s is counted as a cow since the non-bull digits can only be rearranged to allow one 1 to be a bull.
 

Constraints:

1 <= secret.length, guess.length <= 1000
secret.length == guess.length
secret and guess consist of digits only.

class Solution
{
public:
    string getHint(string secret, string guess)
    {
        int freqS[10] = {0};
        int freqG[10] = {0};
        int bulls = 0, cows = 0, bullsAndCows = 0;

        for(int i = 0; i < secret.size(); i++)
        {
            freqS[secret[i] - '0']++;
            freqG[guess[i] - '0']++;

            if(secret[i] == guess[i])
            {
                bulls++;
            }
        }

        for(int i = 0; i < 10; i++)
        {
            if(freqG[i] != 0)
            {
                bullsAndCows += min(freqG[i], freqS[i]);
            }
        }

        cows = bullsAndCows - bulls;

        return to_string(bulls) + 'A' + to_string(cows) + 'B';
    }
};


// Source https://leetcode.com/problems/longest-increasing-subsequence/

Given an integer array nums, return the length of the longest strictly increasing subsequence.

A subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. 
For example, [3,6,2,7] is a subsequence of the array [0,3,1,6,2,2,7].

 

Example 1:

Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.
Example 2:

Input: nums = [0,1,0,3,2,3]
Output: 4
Example 3:

Input: nums = [7,7,7,7,7,7,7]
Output: 1
 

Constraints:

1 <= nums.length <= 2500
-104 <= nums[i] <= 104

class Solution
{
public:
    int lengthOfLIS(vector<int> &nums)
    {
        vector<int> seq;
        seq.push_back(nums[0]);

        for(int i = 1; i < nums.size() ; i++)
        {
            auto itr = lower_bound(seq.begin(), seq.end(), nums[i]);
            if(itr == seq.end()) seq.push_back(nums[i]);
            else
            {
                *itr = nums[i];
            }
        }

        return seq.size();
    }
};


// Source https://leetcode.com/problems/remove-invalid-parentheses/

Given a string s that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid.

Return all the possible results. You may return the answer in any order.

 

Example 1:

Input: s = "()())()"
Output: ["(())()","()()()"]
Example 2:

Input: s = "(a)())()"
Output: ["(a())()","(a)()()"]
Example 3:

Input: s = ")("
Output: [""]
 

Constraints:

1 <= s.length <= 25
s consists of lowercase English letters and parentheses '(' and ')'.
There will be at most 20 parentheses in s.

class Solution
{
public:
    bool isBalanced(const string &s)
    {
        int parentheses = 0;

        for(int i = 0; i < s.length(); i++)
        {
            if(s[i] == '(')
            {
                parentheses++;
            }
            else if(s[i] == ')')
            {
                parentheses--;
            }
            if(parentheses < 0)
            {
                return false;
            }
        }

        return parentheses == 0;
    }
    vector<string> removeInvalidParentheses(string s)
    {
        vector<string> validParentheses;
        unordered_set<string> visited;

        bool stopAtLevel = false;

        queue<string> levels;
        levels.push(s);

        while(!levels.empty())
        {
            string current = levels.front();
            levels.pop();

            if(isBalanced(current))
            {
                validParentheses.push_back(current);
                stopAtLevel = true;
            }

            if(stopAtLevel)
            {
                continue;
            }

            for(int i = 0; i < current.length(); i++)
            {
                if(current[i] != '(' && current[i] != ')')
                    continue;

                string nextString = current.substr(0, i) + current.substr(i + 1);
                if(visited.find(nextString) == visited.end())
                {
                    levels.push(nextString);
                    visited.insert(nextString);
                }
            }
        }

        return validParentheses;
    }
};


// Source https://leetcode.com/problems/range-sum-query-immutable/

Given an integer array nums, handle multiple queries of the following type:

Calculate the sum of the elements of nums between indices left and right inclusive where left <= right.
Implement the NumArray class:

NumArray(int[] nums) Initializes the object with the integer array nums.
int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).
 

Example 1:

Input
["NumArray", "sumRange", "sumRange", "sumRange"]
[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]
Output
[null, 1, -1, -3]

Explanation
NumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);
numArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1
numArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1
numArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3
 

Constraints:

1 <= nums.length <= 104
-105 <= nums[i] <= 105
0 <= left <= right < nums.length
At most 104 calls will be made to sumRange.

class NumArray
{
public:
    vector<int> nums;
    NumArray(vector<int> &numbers)
    {
        nums = numbers;
        for(int i = 1; i < nums.size(); i++) nums[i]  += nums[i - 1];
    }

    int sumRange(int left, int right)
    {
        if(left > 0) return nums[right] - nums[left - 1];
        return nums[right];
    }
};


// Source https://leetcode.com/problems/range-sum-query-2d-immutable/

Given a 2D matrix matrix, handle multiple queries of the following type:

Calculate the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).
Implement the NumMatrix class:

NumMatrix(int[][] matrix) Initializes the object with the integer matrix matrix.
int sumRegion(int row1, int col1, int row2, int col2) Returns the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).
 

Example 1:


Input
["NumMatrix", "sumRegion", "sumRegion", "sumRegion"]
[[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [1, 1, 2, 2], [1, 2, 2, 4]]
Output
[null, 8, 11, 12]

Explanation
NumMatrix numMatrix = new NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]);
numMatrix.sumRegion(2, 1, 4, 3); // return 8 (i.e sum of the red rectangle)
numMatrix.sumRegion(1, 1, 2, 2); // return 11 (i.e sum of the green rectangle)
numMatrix.sumRegion(1, 2, 2, 4); // return 12 (i.e sum of the blue rectangle)
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 200
-105 <= matrix[i][j] <= 105
0 <= row1 <= row2 < m
0 <= col1 <= col2 < n
At most 104 calls will be made to sumRegion.

class NumMatrix
{
public:
    int n, m;
    vector<vector<int>> matrix;

    NumMatrix(vector<vector<int>> &mat)
    {
        matrix = mat;
        n = matrix.size();
        m = matrix[0].size();
        for (int j = 1; j < m; j++)
        {
            matrix[0][j] += matrix[0][j - 1];
        }
        for (int i = 1; i < n; i++)
        {
            matrix[i][0] += matrix[i - 1][0];
        }
        for (int i = 1; i < n; i++)
        {
            for (int j = 1; j < m; j++)
            {
                matrix[i][j] += matrix[i - 1][j] + matrix[i][j - 1] - matrix[i - 1][j - 1];
            }
        }
    }

    int sumRegion(int row1, int col1, int row2, int col2)
    {
        int fullSum = matrix[row2][col2];
        int upperSum = (row1 - 1 >= 0) ? matrix[row1 - 1][col2] : 0;
        int leftSum = (col1 - 1 >= 0) ? matrix[row2][col1 - 1] : 0;
        int upperLeftCornerSum = (row1 - 1 >= 0 && col1 - 1 >= 0) ? matrix[row1 - 1][col1 - 1] : 0;
        return fullSum - upperSum - leftSum + upperLeftCornerSum;
    }
};


// Source https://leetcode.com/problems/additive-number/

An additive number is a string whose digits can form an additive sequence.

A valid additive sequence should contain at least three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.

Given a string containing only digits, return true if it is an additive number or false otherwise.

Note: Numbers in the additive sequence cannot have leading zeros, so sequence 1, 2, 03 or 1, 02, 3 is invalid.

 

Example 1:

Input: "112358"
Output: true
Explanation: 
The digits can form an additive sequence: 1, 1, 2, 3, 5, 8. 
1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8
Example 2:

Input: "199100199"
Output: true
Explanation: 
The additive sequence is: 1, 99, 100, 199. 
1 + 99 = 100, 99 + 100 = 199
 

Constraints:

1 <= num.length <= 35
num consists only of digits.

class Solution
{
public:
    int n;
    bool ans;

    void recur(string &num, long long int idx, vector<long long int> &arr)
    {
        if (ans) return;
        if(idx >= n)
        {
            if(arr.size() > 2) ans = true;
            return;
        }
        for(int j = idx; j < n && !ans; j++)
        {
            int len = (j - idx + 1);
            if (len > 17) break;
            if (len >= 2 && num[idx] == '0') break;
            string s = num.substr(idx, len);
            long long int val = stoll(s);
            if(arr.size() < 2 || (arr.back() + arr[arr.size() - 2] == val))
            {
                arr.push_back(val);
                recur(num, j + 1, arr);
                arr.pop_back();
            }
        }
    }

    bool isAdditiveNumber(string num)
    {
        n = num.length();
        ans = false;
        vector<long long int> arr;
        recur(num, 0, arr);
        return ans;
    }
};


// Source https://leetcode.com/problems/range-sum-query-mutable/

Given an integer array nums, handle multiple queries of the following types:

Update the value of an element in nums.
Calculate the sum of the elements of nums between indices left and right inclusive where left <= right.
Implement the NumArray class:

NumArray(int[] nums) Initializes the object with the integer array nums.
void update(int index, int val) Updates the value of nums[index] to be val.
int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).
 

Example 1:

Input
["NumArray", "sumRange", "update", "sumRange"]
[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]
Output
[null, 9, null, 8]

Explanation
NumArray numArray = new NumArray([1, 3, 5]);
numArray.sumRange(0, 2); // return 1 + 3 + 5 = 9
numArray.update(1, 2);   // nums = [1, 2, 5]
numArray.sumRange(0, 2); // return 1 + 2 + 5 = 8
 

Constraints:

1 <= nums.length <= 3 * 104
-100 <= nums[i] <= 100
0 <= index < nums.length
-100 <= val <= 100
0 <= left <= right < nums.length
At most 3 * 104 calls will be made to update and sumRange.

class NumArray
{
    vector<int> BIT;
    void updateBIT(int idx, int val)
    {
        for (; idx < BIT.size(); idx += idx & (-idx))
        {
            BIT[idx] += val;
        }
    }
    int query(int idx)
    {
        int sum = 0;
        for (; idx > 0; idx -= idx & (-idx))
        {
            sum += BIT[idx];
        }
        return sum;
    }
public:
    NumArray(vector<int> &nums)
    {
        BIT = vector<int>(nums.size() + 1, 0);
        for (int i = 0; i < nums.size(); i++)
        {
            updateBIT(i + 1, nums[i]);
        }
    }

    void update(int index, int val)
    {
        updateBIT(index + 1, val - sumRange(index, index));
    }

    int sumRange(int left, int right)
    {
        return query(right + 1) - query(left);
    }
};


// Source https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/

You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:

After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).
Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: prices = [1,2,3,0,2]
Output: 3
Explanation: transactions = [buy, sell, cooldown, buy, sell]
Example 2:

Input: prices = [1]
Output: 0
 

Constraints:

1 <= prices.length <= 5000
0 <= prices[i] <= 1000

class Solution
{
public:
    int dp[5005][2];

    int helper(vector<int> &prices, int n, int day, int count)
    {
        if(day >= n) return 0;
        int type = count % 2;
        if(dp[day][type] != -1) return dp[day][type];
        int notransaction = helper(prices, n, day + 1, count);
        int transaction = 0;
        bool buy = (count % 2 == 0);
        if(buy)
        {
            transaction = -prices[day] + helper(prices, n, day + 1, count + 1);
        }
        else
        {
            transaction = prices[day] + helper(prices, n, day + 2, count + 1);
        }
        return dp[day][type] = max(notransaction, transaction);
    }
    int maxProfit(vector<int> &prices)
    {
        int n = prices.size();
        memset(dp, -1, sizeof(dp));
        return helper(prices, n, 0, 0);
    }
};


// Source https://leetcode.com/problems/minimum-height-trees/

A tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree.

Given a tree of n nodes labelled from 0 to n - 1, and an array of n - 1 edges where edges[i] = [ai, bi] indicates that there is an undirected edge between the two nodes ai and bi in the tree, 
you can choose any node of the tree as the root. When you select a node x as the root, the result tree has height h. 
Among all possible rooted trees, those with minimum height (i.e. min(h))  are called minimum height trees (MHTs).

Return a list of all MHTs' root labels. You can return the answer in any order.

The height of a rooted tree is the number of edges on the longest downward path between the root and a leaf.

 

Example 1:


Input: n = 4, edges = [[1,0],[1,2],[1,3]]
Output: [1]
Explanation: As shown, the height of the tree is 1 when the root is the node with label 1 which is the only MHT.
Example 2:


Input: n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]
Output: [3,4]
 

Constraints:

1 <= n <= 2 * 104
edges.length == n - 1
0 <= ai, bi < n
ai != bi
All the pairs (ai, bi) are distinct.
The given input is guaranteed to be a tree and there will be no repeated edges.

class Solution
{
public:
    vector<int> findMinHeightTrees(int n, vector<vector<int>> &edges)
    {
        if(n == 1) return {0};
        if(n == 2) return {0, 1};
        vector <vector<int>> adj(n);        //to store neighbors of each node
        vector <int> in(n, 0);              //to store degrees of each node
        for(auto &edge : edges)              //updating values in adj and in as we iterate through each edges
        {
            int u = edge[0], v = edge[1];
            adj[u].push_back(v);
            adj[v].push_back(u);
            in[u]++;
            in[v]++;
        }

        queue <int> q;
        for(int i = 0; i < n; i++)
            if(in[i] == 1)
                q.push(i);

        vector <int> res;                   //to store the final result
        while(!q.empty())
        {
            res.clear();            //clearing before we start traversing level by level.
            int size = q.size();
            while(size--)           //doing for each inserted nodes
            {
                int cur = q.front();
                q.pop();
                res.push_back(cur); //adding nodes to vector (it may or may not be the final solution)
                for(auto neigh : adj[cur])
                {
                    in[neigh]--;            //removing current leave nodes
                    if(in[neigh] == 1)      //adding current leave nodes
                        q.push(neigh);
                }
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/burst-balloons/

You are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array nums. You are asked to burst all the balloons.

If you burst the ith balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins. If i - 1 or i + 1 goes out of bounds of the array, then treat it as if there is a balloon with a 1 painted on it.

Return the maximum coins you can collect by bursting the balloons wisely.

 

Example 1:

Input: nums = [3,1,5,8]
Output: 167
Explanation:
nums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> []
coins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167
Example 2:

Input: nums = [1,5]
Output: 10
 

Constraints:

n == nums.length
1 <= n <= 300
0 <= nums[i] <= 100

class Solution
{
public:
    int dp[505][505];
    int solve(vector<int> &arr, int i, int j)
    {
        if(i >= j) return 0;
        if(dp[i][j] != -1) return dp[i][j];
        int ans = INT_MIN;
        for(int k = i; k < j; k++)
        {
            int temp_ans = solve(arr, i, k) + solve(arr, k + 1, j) + (arr[i - 1] * arr[k] * arr[j]);
            ans = max(ans, temp_ans);
        }
        return dp[i][j] = ans;
    }
    int maxCoins(vector<int> &nums)
    {
        nums.push_back(1); //if i+1 goes out of bound so to avoid this add 1
        nums.insert(nums.begin(), 1); //if i-1 goes out of bound so to avoid this add 1
        memset(dp, -1, sizeof(dp));
        return solve(nums, 1, nums.size() - 1);
    }
};


// Source https://leetcode.com/problems/super-ugly-number/

A super ugly number is a positive integer whose prime factors are in the array primes.

Given an integer n and an array of integers primes, return the nth super ugly number.

The nth super ugly number is guaranteed to fit in a 32-bit signed integer.

 

Example 1:

Input: n = 12, primes = [2,7,13,19]
Output: 32
Explanation: [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 super ugly numbers given primes = [2,7,13,19].
Example 2:

Input: n = 1, primes = [2,3,5]
Output: 1
Explanation: 1 has no prime factors, therefore all of its prime factors are in the array primes = [2,3,5].
 

Constraints:

1 <= n <= 106
1 <= primes.length <= 100
2 <= primes[i] <= 1000
primes[i] is guaranteed to be a prime number.
All the values of primes are unique and sorted in ascending order.

class Solution
{
public:
    int nthSuperUglyNumber(int n, vector<int> &primes)
    {
        vector<int>v(n, 0);
        v[0] = 1;
        int m = primes.size();
        vector<int>mult(m, 0);
        for(int i = 1; i < n; i++)
        {
            int cur_min = INT_MAX;
            for(int j = 0; j < m; j++)
            {
                cur_min = min(cur_min, v[mult[j]] * primes[j]);
            }
            for(int j = 0; j < m; j++)
            {
                if(cur_min == v[mult[j]]*primes[j])
                {
                    mult[j]++;
                }
            }
            v[i] = cur_min;
        }
        return v[n - 1];
    }
};


// Source https://leetcode.com/problems/count-of-smaller-numbers-after-self/

You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].

 

Example 1:

Input: nums = [5,2,6,1]
Output: [2,1,1,0]
Explanation:
To the right of 5 there are 2 smaller elements (2 and 1).
To the right of 2 there is only 1 smaller element (1).
To the right of 6 there is 1 smaller element (1).
To the right of 1 there is 0 smaller element.
Example 2:

Input: nums = [-1]
Output: [0]
Example 3:

Input: nums = [-1,-1]
Output: [0,0]
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104

class FenwickTree
{
public:
    int high, low, size;
    vector<int>tree;

    FenwickTree(int high, int low)
    {
        this->high = high;
        this->low = low;
        this->size = high - low + 1;
        this->tree = vector<int>(this->size + 1, 0);
    }
    void update(int value, int inc)
    {
        value = (value - low + 1);
        for(int i = value; i < this->tree.size(); i += i & (-i))
        {
            this->tree[i] += inc;
        }
    }
    int range(int value)
    {
        int ans = 0;
        value = (value - low + 1);
        for(int i = value; i > 0; i -= i & (-i))
        {
            ans += this->tree[i];
        }
        return ans;
    }
};

class Solution
{
public:
    vector<int> countSmaller(vector<int> &nums)
    {
        int high = *max_element(nums.begin(), nums.end());
        int low = *min_element(nums.begin(), nums.end());
        FenwickTree tree(high, low);
        vector<int>ans(nums.size(), 0);
        for(int i = nums.size() - 1; i >= 0; i--)
        {
            ans[i] = tree.range(nums[i] - 1);
            tree.update(nums[i], 1);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/remove-duplicate-letters/

Given a string s, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.

 

Example 1:

Input: s = "bcabc"
Output: "abc"
Example 2:

Input: s = "cbacdcbc"
Output: "acdb"
 

Constraints:

1 <= s.length <= 104
s consists of lowercase English letters.

class Solution
{
public:
    string removeDuplicateLetters(string s)
    {
        unordered_map<char, int> mp;
        for(int i = 0; i < s.length(); i++)
        {
            mp[s[i]] = i;
        }

        vector<bool> fulfilled(26, false);
        stack<char> st; // monotonically increasing stack
        for(int i = 0; i < s.length(); i++)
        {
            if(fulfilled[s[i] - 'a']) continue;

            if(st.empty() || st.top() < s[i])
            {
                fulfilled[s[i] - 'a'] = true;
                st.push(s[i]);
            }
            else
            {
                while(!st.empty() and st.top() >= s[i])
                {
                    char topchar = st.top();
                    if(mp[topchar] > i)
                    {
                        fulfilled[topchar - 'a'] = false;
                        st.pop();
                    }
                    else break;
                }

                fulfilled[s[i] - 'a'] = true;
                st.push(s[i]);
            }
        }

        string ans = "";
        while(!st.empty())
        {
            ans += st.top();
            st.pop();
        }

        reverse(ans.begin(), ans.end());
        return ans;
    }
};


// Source https://leetcode.com/problems/maximum-product-of-word-lengths/

Given a string array words, return the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. If no such two words exist, return 0.

 

Example 1:

Input: words = ["abcw","baz","foo","bar","xtfn","abcdef"]
Output: 16
Explanation: The two words can be "abcw", "xtfn".
Example 2:

Input: words = ["a","ab","abc","d","cd","bcd","abcd"]
Output: 4
Explanation: The two words can be "ab", "cd".
Example 3:

Input: words = ["a","aa","aaa","aaaa"]
Output: 0
Explanation: No such pair of words.
 

Constraints:

2 <= words.length <= 1000
1 <= words[i].length <= 1000
words[i] consists only of lowercase English letters.

class Solution
{
public:
    int maxProduct(vector<string> &words)
    {
        int n = words.size();
        vector<int> vec(n, 0);
        for(int i = 0; i < n; i++ )
        {
            int value = 0;
            for(int j = 0; j < words[i].size(); j++)
            {
                value |= 1 << (words[i][j] - 'a');
            }
            vec[i] = value;
        }
        int ans = 0;
        for(int i = 0; i < n; i++)
        {
            for(int j = i + 1; j < n; j++)
            {
                if((vec[i] & vec[j]) == 0)
                {
                    ans = max(ans, int(words[i].size() * words[j].size()));
                }
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/bulb-switcher/

There are n bulbs that are initially off. You first turn on all the bulbs, then you turn off every second bulb.

On the third round, you toggle every third bulb (turning on if it's off or turning off if it's on). For the ith round, you toggle every i bulb. For the nth round, you only toggle the last bulb.

Return the number of bulbs that are on after n rounds.

 

Example 1:


Input: n = 3
Output: 1
Explanation: At first, the three bulbs are [off, off, off].
After the first round, the three bulbs are [on, on, on].
After the second round, the three bulbs are [on, off, on].
After the third round, the three bulbs are [on, off, off]. 
So you should return 1 because there is only one bulb is on.
Example 2:

Input: n = 0
Output: 0
Example 3:

Input: n = 1
Output: 1
 

Constraints:

0 <= n <= 109

36 = 1 * 36 = 2 * 18 = 3 * 12 = 4 * 9 = 6 * 6 = 9 * 4 = 12 * 3 = 18 * 2 = 36 * 1

1 2 3 4 6 9 12 18 36 切换9次 最终 on
3 = 1 * 3 切换2次 最终off

class Solution
{
public:
    int bulbSwitch(int n)
    {
        int temp = sqrt(n);
        return temp;
    }
};


// Source https://leetcode.com/problems/create-maximum-number/

You are given two integer arrays nums1 and nums2 of lengths m and n respectively. nums1 and nums2 represent the digits of two numbers. You are also given an integer k.

Create the maximum number of length k <= m + n from digits of the two numbers. The relative order of the digits from the same array must be preserved.

Return an array of the k digits representing the answer.

 

Example 1:

Input: nums1 = [3,4,6,5], nums2 = [9,1,2,5,8,3], k = 5
Output: [9,8,6,5,3]
Example 2:

Input: nums1 = [6,7], nums2 = [6,0,4], k = 5
Output: [6,7,6,0,4]
Example 3:

Input: nums1 = [3,9], nums2 = [8,9], k = 3
Output: [9,8,9]
 

Constraints:

m == nums1.length
n == nums2.length
1 <= m, n <= 500
0 <= nums1[i], nums2[i] <= 9
1 <= k <= m + n

nums1.size() = n
vector<vector<int>> largest_num1 = largetsNum(nums1);
largest_num1[i] 表示从nums1中选择i个数字可以组成的最大数
largest_num1[n] = nums1
在largest_num1[i + 1]中找出满足条件idx对应的元素小于idx + 1对应的元素，第一个idx
把largest_num1[i + 1]中下标不等于idx的所有元素依次放入largest_num1[i]

class Solution
{
public:
    bool compare(vector<int> &nums1, vector<int> &nums2, int start_i, int start_j)
    {
        int loop_size = min(nums1.size() - start_i, nums2.size() - start_j);

        for (int i = 0; i < loop_size; i++)
        {
            if (nums1[i + start_i] < nums2[i + start_j])
                return true;
            else if (nums1[i + start_i] > nums2[i + start_j])
                return false;
        }
        return nums1.size() - start_i < nums2.size() - start_j;
    }

    vector<vector<int>> largetsNum(vector<int> &nums)
    {
        int n = nums.size();
        vector<vector<int>> res;
        res.resize(n + 1);
        res[n] = nums;

        for (int i = n - 1; i >= 0; i--)
        {
            int idx = 0;
            while (idx + 1 < res[i + 1].size())
            {
                if (res[i + 1][idx] < res[i + 1][idx + 1])
                    break;
                idx++;
            }

            for (int j = 0; j < res[i + 1].size(); j++)
            {
                if (idx != j)
                    res[i].push_back(res[i + 1][j]);
            }
        }
        return res;
    }

    vector<int> merge(vector<int> &nums1, vector<int> &nums2)
    {
        vector<int> res;
        int i = 0, j = 0;
        while (i < nums1.size() || j < nums2.size())
        {
            if (compare(nums1, nums2, i, j))
                res.push_back(nums2[j++]);
            else
                res.push_back(nums1[i++]);
        }
        return res;
    }

    vector<int> maxNumber(vector<int> &nums1, vector<int> &nums2, size_t k)
    {
        vector<vector<int>> largest_num1 = largetsNum(nums1);
        vector<vector<int>> largest_num2 = largetsNum(nums2);

        vector<int> res;
        int start = k > nums2.size() ? k - nums2.size() : 0;

        // 从nums1中选择i个数字，从nums2中选择k - i个数字
        for (int i = start; i < largest_num1.size() && i <= k; i++)
        {
            vector<int> tmp = merge(largest_num1[i], largest_num2[k - i]);
            if (res.empty() || compare(res, tmp, 0, 0)) res = tmp;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/coin-change/

You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.

Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.

You may assume that you have an infinite number of each kind of coin.

 

Example 1:

Input: coins = [1,2,5], amount = 11
Output: 3
Explanation: 11 = 5 + 5 + 1
Example 2:

Input: coins = [2], amount = 3
Output: -1
Example 3:

Input: coins = [1], amount = 0
Output: 0
 

Constraints:

1 <= coins.length <= 12
1 <= coins[i] <= 231 - 1
0 <= amount <= 104

class Solution
{
public:
    int coinChange(vector<int> &coins, int amount)
    {
        vector<int> dp(amount + 1, amount + 1);
        dp[0] = 0;
        for(auto x : coins)
        {
            for(int i = x; i <= amount; i++)
            {
                dp[i] = min(dp[i], dp[i - x] + 1);
            }
        }
        if(dp[amount] >= amount + 1)
        {
            return -1;
        }
        return dp[amount];
    }
};


// Source https://leetcode.com/problems/wiggle-sort-ii/

Given an integer array nums, reorder it such that nums[0] < nums[1] > nums[2] < nums[3]....

You may assume the input array always has a valid answer.

 

Example 1:

Input: nums = [1,5,1,1,6,4]
Output: [1,6,1,5,1,4]
Explanation: [1,4,1,5,1,6] is also accepted.
Example 2:

Input: nums = [1,3,2,2,3,1]
Output: [2,3,1,3,1,2]
 

Constraints:

1 <= nums.length <= 5 * 104
0 <= nums[i] <= 5000
It is guaranteed that there will be an answer for the given input nums.

class Solution
{
public:
    void wiggleSort(vector<int> &nums)
    {
        int n = nums.size();
        vector<int> temp = nums;
        sort(temp.begin(), temp.end());
        int mid = n / 2;
        if (n % 2)
        {
            int i = mid, j = n - 1;
            int idx = 0;
            while (i >= 1)
            {
                nums[idx] = temp[i--];
                nums[idx + 1] = temp[j--];
                idx += 2;
            }
            nums[idx] = temp[0];
        }
        else
        {
            int i = mid - 1, j = n - 1;
            int idx = 0;
            while (i >= 0)
            {
                nums[idx] = temp[i--];
                nums[idx + 1] = temp[j--];
                idx += 2;
            }
        }
    }
};


// Source https://leetcode.com/problems/power-of-three/

Given an integer n, return true if it is a power of three. Otherwise, return false.

An integer n is a power of three, if there exists an integer x such that n == 3x.

 

Example 1:

Input: n = 27
Output: true
Example 2:

Input: n = 0
Output: false
Example 3:

Input: n = 9
Output: true
 

Constraints:

-231 <= n <= 231 - 1

class Solution
{
public:
    bool isPowerOfThree(int n)
    {
        if(n < 1)
        {
            return false;
        }
        while(n % 3 == 0)
        {
            n = n / 3;
        }
        return n == 1;
    }
};


// Source https://leetcode.com/problems/count-of-range-sum/

Given an integer array nums and two integers lower and upper, return the number of range sums that lie in [lower, upper] inclusive.

Range sum S(i, j) is defined as the sum of the elements in nums between indices i and j inclusive, where i <= j.

 

Example 1:

Input: nums = [-2,5,-1], lower = -2, upper = 2
Output: 3
Explanation: The three ranges are: [0,0], [2,2], and [0,2] and their respective sums are: -2, -1, 2.
Example 2:

Input: nums = [0], lower = 0, upper = 0
Output: 1
 

Constraints:

1 <= nums.length <= 105
-231 <= nums[i] <= 231 - 1
-105 <= lower <= upper <= 105
The answer is guaranteed to fit in a 32-bit integer.

b >= low -> a - b <= a - low
b <= high -> a - b >= a  - high 

b in [low, high]
a-b in [a - high, a - low]

class FenwickTree
{
public:
    vector<int>tree;
    FenwickTree(int n)
    {
        tree.resize(n, 0);
    }

    void update(int i, int val)
    {
        while(i < tree.size())
        {
            tree[i] += val;
            i += i & -i;
        }
    }

    int get(int i)
    {
        int val = 0;
        while(i > 0)
        {
            val += tree[i];
            i -= i & -i;
        }

        return val;
    }
};

class Solution
{
public:
    int countRangeSum(vector<int> &nums, int lower, int upper)
    {
        int n = nums.size();

        // prefix  sum array
        vector<long long int>vnums(n);

        // rank map
        map<long long int, int>rank;

        // get prefix sum and add them to rank map
        vnums[0] = (long long int)nums[0];
        rank[vnums[0]] = 0;
        rank[0LL] = 0;  // add 0 value in the rank map
        for(int i = 1; i < n; i++)
        {
            vnums[i] = (long long int)nums[i];
            vnums[i] += vnums[i - 1];
            rank[vnums[i]] = 0;
        }

        // update rank value in the map
        int k = 1;
        for(auto &t : rank)
            t.second = k++;

        // create BIT and update freq for prefix sum 0
        FenwickTree tree(k);
        tree.update(rank[0LL], 1);

        // loop through prefix sum array and get rang freq count for prefix sum - higger to prefix sum - lower
        long long int l, h;
        int rl, rh;
        int res = 0;
        long long int low = (long long int)lower;
        long long int up = (long long int)upper;
        for(int i = 0; i < n; i++)
        {
            h = vnums[i] - low;
            l = vnums[i] - up;

            // get high value rank
            auto hptr = rank.upper_bound(h);
            rh = hptr == rank.end() ? k - 1 : hptr->second - 1;

            // get low value rank
            auto lptr = rank.lower_bound(l);
            rl = lptr == rank.end() ? k - 1 : lptr->second - 1;

            // get low to high value freq count and add to count
            res += (tree.get(rh) - tree.get(rl));

            // update freq of current prefix sum in BIT
            tree.update(rank[vnums[i]], 1);
        }

        return res;
    }
};


// Source https://leetcode.com/problems/odd-even-linked-list/

Given the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.

The first node is considered odd, and the second node is even, and so on.

Note that the relative order inside both the even and odd groups should remain as it was in the input.

You must solve the problem in O(1) extra space complexity and O(n) time complexity.

 

Example 1:


Input: head = [1,2,3,4,5]
Output: [1,3,5,2,4]
Example 2:


Input: head = [2,1,3,5,6,4,7]
Output: [2,3,6,7,1,5,4]
 

Constraints:

n == number of nodes in the linked list
0 <= n <= 104
-106 <= Node.val <= 106

class Solution
{
public:
    ListNode *oddEvenList(ListNode *head)
    {
        queue<int> eve, odd;
        ListNode *t = head;
        while(t)
        {
            odd.push(t->val);
            t = t->next;
            if(t) eve.push(t->val), t = t->next;
        }
        t = head;
        while(!odd.empty()) t->val = odd.front(), odd.pop(), t = t->next;
        while(!eve.empty()) t->val = eve.front(), eve.pop(), t = t->next;

        return head;
    }
};


// Source https://leetcode.com/problems/longest-increasing-path-in-a-matrix/

Given an m x n integers matrix, return the length of the longest increasing path in matrix.

From each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).

 

Example 1:


Input: matrix = [[9,9,4],[6,6,8],[2,1,1]]
Output: 4
Explanation: The longest increasing path is [1, 2, 6, 9].
Example 2:


Input: matrix = [[3,4,5],[3,2,6],[2,2,1]]
Output: 4
Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.
Example 3:

Input: matrix = [[1]]
Output: 1
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 200
0 <= matrix[i][j] <= 231 - 1

class Solution
{
public:

    int dfs(vector<vector<int>> &matrix, vector<vector<int>> &dp, int x, int y, int r, int c, int prevval)
    {
        if(x < 0 || x >= r || y< 0 || y >= c || matrix[x][y] <= prevval)
        {
            return 0;
        }

        if(dp[x][y] != -1) return dp[x][y];
        int res = 1;
        res = max(res, 1 + dfs(matrix, dp, x + 1, y, r, c, matrix[x][y]));
        res = max(res, 1 + dfs(matrix, dp, x - 1, y, r, c, matrix[x][y]));
        res = max(res, 1 + dfs(matrix, dp, x, y + 1, r, c, matrix[x][y]));
        res = max(res, 1 + dfs(matrix, dp, x, y - 1, r, c, matrix[x][y]));
        return dp[x][y] = res;
    }

    int longestIncreasingPath(vector<vector<int>> &matrix)
    {
        int row = matrix.size();
        int col = matrix[0].size();

        vector<vector<int>>dp(row, vector<int>(col, -1));

        for(int i = 0; i < row; i++)
        {
            for(int j = 0; j < col; j++)
            {
                if(dp[i][j] == -1)
                {
                    dfs(matrix, dp, i, j, row, col, -1);
                }
            }
        }

        int ans = 1;
        for(int i = 0; i < row; i++)
        {
            for(int j = 0; j < col; j++)
            {
                ans = max(ans, dp[i][j]);
            }
        }
        return ans ;
    }
};


// Source https://leetcode.com/problems/patching-array/

Given a sorted integer array nums and an integer n, add/patch elements to the array such that any number in the range [1, n] inclusive can be formed by the sum of some elements in the array.

Return the minimum number of patches required.

 

Example 1:

Input: nums = [1,3], n = 6
Output: 1
Explanation:
Combinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4.
Now if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3].
Possible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].
So we only need 1 patch.
Example 2:

Input: nums = [1,5,10], n = 20
Output: 2
Explanation: The two patches can be [2, 4].
Example 3:

Input: nums = [1,2,2], n = 5
Output: 0
 

Constraints:

1 <= nums.length <= 1000
1 <= nums[i] <= 104
nums is sorted in ascending order.
1 <= n <= 231 - 1

We try to keep track of maximum reach_end such that
all numbers in [1,2....reach_end] are reachable by adding some element of nums[0....i]

The key observation is that,
If we have covered range [1 -> reach_end], then adding reach_end + 1 can extend the range to [1..2*reach_end + 1].

class Solution
{
public:
    int minPatches(vector<int> &nums, int n)
    {
        int m = nums.size();
        int insertions = 0;
        int start = 1;
        if(nums[0] != 1)
        {
            insertions++; // insert 1
            start = 0;
        }

        long long reach_end = 1;
        for(int i = start; i < m && n > reach_end; i++)
        {
            if(nums[i] <= reach_end + 1)
            {
                reach_end = reach_end + nums[i] ;
            }
            else
            {
                // insert reach_end + 1
                insertions++;
                reach_end = 2LL * reach_end + 1LL ;
                i--;
            }
        }

        while(n > reach_end)
        {
            // insert reach_end + 1
            insertions++;
            reach_end = 2LL * reach_end + 1LL ;
        }

        return insertions;
    }
};


// Source https://leetcode.com/problems/verify-preorder-serialization-of-a-binary-tree/

One way to serialize a binary tree is to use preorder traversal. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as '#'.


For example, the above binary tree can be serialized to the string "9,3,4,#,#,1,#,#,2,#,6,#,#", where '#' represents a null node.

Given a string of comma-separated values preorder, return true if it is a correct preorder traversal serialization of a binary tree.

It is guaranteed that each comma-separated value in the string must be either an integer or a character '#' representing null pointer.

You may assume that the input format is always valid.

For example, it could never contain two consecutive commas, such as "1,,3".
Note: You are not allowed to reconstruct the tree.

 

Example 1:

Input: preorder = "9,3,4,#,#,1,#,#,2,#,6,#,#"
Output: true
Example 2:

Input: preorder = "1,#"
Output: false
Example 3:

Input: preorder = "9,#,#,1"
Output: false
 

Constraints:

1 <= preorder.length <= 104
preorder consist of integers in the range [0, 100] and '#' separated by commas ','.

class Solution
{
public:
    bool isValidSerialization(string &s)
    {
        vector<string> A;
        string temp = "";
        for(int i = 0; i < s.size(); i++)
        {
            if(s[i] == ',')
            {
                A.emplace_back(std::move(temp));
                temp = "";
            }
            else
                temp += s[i];
        }
        if(temp != "")
            A.emplace_back(std::move(temp));
        int i = 0;
        bool res = check(A, i);
        if (res && i >= A.size() - 1) return true;
        return false;
    }
    bool check(vector<string> &A, int &i)
    {
        if(i >= A.size())
            return false;
        if(A[i] == "#")
            return true;
        ++i;
        bool leftRes = check(A, i);
        ++i;
        bool rightRes = check(A, i);
        return leftRes && rightRes;
    }
};


// Source https://leetcode.com/problems/reconstruct-itinerary/

You are given a list of airline tickets where tickets[i] = [fromi, toi] represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it.

All of the tickets belong to a man who departs from "JFK", thus, the itinerary must begin with "JFK". 
If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string.

For example, the itinerary ["JFK", "LGA"] has a smaller lexical order than ["JFK", "LGB"].
You may assume all tickets form at least one valid itinerary. You must use all the tickets once and only once.

 

Example 1:


Input: tickets = [["MUC","LHR"],["JFK","MUC"],["SFO","SJC"],["LHR","SFO"]]
Output: ["JFK","MUC","LHR","SFO","SJC"]
Example 2:


Input: tickets = [["JFK","SFO"],["JFK","ATL"],["SFO","ATL"],["ATL","JFK"],["ATL","SFO"]]
Output: ["JFK","ATL","JFK","SFO","ATL","SFO"]
Explanation: Another possible reconstruction is ["JFK","SFO","ATL","JFK","ATL","SFO"] but it is larger in lexical order.
 

Constraints:

1 <= tickets.length <= 300
tickets[i].length == 2
fromi.length == 3
toi.length == 3
fromi and toi consist of uppercase English letters.
fromi != toi

class Solution
{
    //using multiset instead of set because values maybe repeated. Also set/ multiset is sorted so it gets sorted in lexical order itself
    unordered_map <string, multiset <string>> maptickets;
public:
    vector<string> findItinerary(vector<vector<string>> &tickets)
    {
        for (auto &v : tickets)
            maptickets[v[0]].insert(v[1]);

        vector <string> result;
        dfs (result, "JFK");
        reverse (result.begin(), result.end());
        return result;
    }

    void dfs (vector <string> &result, string source)
    {
        while (!maptickets[source].empty())
        {
            string dest = *maptickets[source].begin();     //declaring iterator for finding dest
            maptickets[source].erase (maptickets[source].begin());  //deleting after travelling
            dfs (result, dest);
        }
        result.push_back(source);                                   //pushing into result
    }
};


// Source https://leetcode.com/problems/increasing-triplet-subsequence/

Given an integer array nums, return true if there exists a triple of indices (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k]. If no such indices exists, return false.

 

Example 1:

Input: nums = [1,2,3,4,5]
Output: true
Explanation: Any triplet where i < j < k is valid.
Example 2:

Input: nums = [5,4,3,2,1]
Output: false
Explanation: No triplet exists.
Example 3:

Input: nums = [2,1,5,0,4,6]
Output: true
Explanation: The triplet (3, 4, 5) is valid because nums[3] == 0 < nums[4] == 4 < nums[5] == 6.
 

Constraints:

1 <= nums.length <= 5 * 105
-231 <= nums[i] <= 231 - 1

class Solution
{
public:
    bool increasingTriplet(vector<int> &nums)
    {
        vector<int> dp;

        for(auto val : nums)
        {
            auto pos = lower_bound(dp.begin(), dp.end(), val);
            if(pos == dp.end())
            {
                dp.push_back(val);
                if(dp.size() == 3) return true;
            }
            else
            {
                *pos = val;
            }
        }

        return false;
    }
};


// Source https://leetcode.com/problems/self-crossing/

You are given an array of integers distance.

You start at point (0,0) on an X-Y plane and you move distance[0] meters to the north, then distance[1] meters to the west, distance[2] meters to the south, distance[3] meters to the east, and so on. 
In other words, after each move, your direction changes counter-clockwise.

Return true if your path crosses itself, and false if it does not.

 

Example 1:


Input: distance = [2,1,1,2]
Output: true
Example 2:


Input: distance = [1,2,3,4]
Output: false
Example 3:


Input: distance = [1,1,1,1]
Output: true
 

Constraints:

1 <= distance.length <= 105
1 <= distance[i] <= 105

实际上相交的情况只有以下三种：

    	 x(1)
	┌───┐
x(2)	│      │x(0)
    	└───┼──>
    	x(3)   │
 
     	   x(1)
 	┌──────┐
    	│             │x(0)
x(2)	│            ^
    	│	   x(4)
    	└──────│
      	   x(3)

      	   x(1)
    	┌──────┐
    	│      	  │x(0)
x(2)	│     	  │────│
    	│       	       x(5)│x(4)
    	└───────────│
       	    x(3)

class Solution
{
public:
    bool isSelfCrossing(vector<int> &x)
    {
        for (int i = 3; i < x.size(); ++i)
        {
            if (x[i] >= x[i - 2] && x[i - 3] >= x[i - 1])
            {
                return true;
            }
            if (i >= 4 && x[i - 1] == x[i - 3] && x[i] >= x[i - 2] - x[i - 4])
            {
                return true;
            }
            if (i >= 5 && x[i - 2] >= x[i - 4] && x[i - 3] >= x[i - 1] && x[i - 1] >= x[i - 3] - x[i - 5] && x[i] >= x[i - 2] - x[i - 4])
            {
                return true;
            }
        }
        return false;
    }
};

// Source https://leetcode.com/problems/palindrome-pairs/

Given a list of unique words, return all the pairs of the distinct indices (i, j) in the given list, so that the concatenation of the two words words[i] + words[j] is a palindrome.

 

Example 1:

Input: words = ["abcd","dcba","lls","s","sssll"]
Output: [[0,1],[1,0],[3,2],[2,4]]
Explanation: The palindromes are ["dcbaabcd","abcddcba","slls","llssssll"]
Example 2:

Input: words = ["bat","tab","cat"]
Output: [[0,1],[1,0]]
Explanation: The palindromes are ["battab","tabbat"]
Example 3:

Input: words = ["a",""]
Output: [[0,1],[1,0]]
 

Constraints:

1 <= words.length <= 5000
0 <= words[i].length <= 300
words[i] consists of lower-case English letters.

words[i] + words[j] is a palindrome
abc + cba
if words[i].size() == words[j]， 则 words[i] = reverse(words[j])

abcll + cba
if words[i].size() > words[j]，则 reverse(words[j]) 是 words[i]的前缀

s + lls
lls + sssll

if words[i].size() < words[j]，则 words[i] 是 reverse(words[j])的前缀


struct TrieNode
{
    TrieNode *children[26];
    int index;
    TrieNode() : index(-1)
    {
        for(int i = 0; i < 26; i++)
        {
            children[i] = NULL;
        }
    }
};

void insert(TrieNode *root, string &s, int i)
{
    TrieNode *ptr = root;
    for(char c : s)
    {
        int index = c - 'a';
        if(!ptr->children[index])
        {
            ptr->children[index] = new TrieNode();
        }
        ptr = ptr->children[index];
    }
    ptr->index = i;
    return;
}

void find(TrieNode *root, vector<int> &palindromes, string s = "")
{
    // abc + cba
    // if words[i].size() == words[j]， 则 words[i] = reverse(words[j])
    // s + lls
    // lls + sssll
    // if words[i].size() < words[j]，则 words[i] 是 reverse(words[j])的前缀
    if(root->index != -1)
    {
        int i = 0, j = s.length() - 1;
        bool flag = true;
        while(i <= j)
        {
            if(s[i] != s[j])
            {
                flag = false;
                break;
            }
            i++;
            j--;
        }
        if(flag)
            palindromes.push_back(root->index);
    }
    for(int i = 0; i < 26; i++)
    {
        if(root->children[i])
        {
            char c = 'a' + i;
            s.push_back(c);
            find(root->children[i], palindromes, s);
            s.pop_back();
        }
    }
    return;
}

vector<int> search(TrieNode *root, string &s)
{
    vector<int> palindromes;
    TrieNode *ptr = root;
    for(int i = 0; i < s.length(); i++)
    {
        // abcll + cba
        // if words[i].size() > words[j]，则 reverse(words[j]) 是 words[i]的前缀
        if(ptr->index != -1)
        {
            int j = i, k = s.length() - 1;
            bool flag = true;
            while(j <= k)
            {
                if(s[j] != s[k])
                {
                    flag = false;
                    break;
                }
                j++;
                k--;
            }
            if(flag)
                palindromes.push_back(ptr->index);
        }
        int index =  s[i] - 'a';
        if(!ptr->children[index])
        {
            return palindromes;
        }
        ptr = ptr->children[index];
    }
    find(ptr, palindromes);
    return palindromes;
}

class Solution
{
public:
    vector<vector<int>> palindromePairs(vector<string> &words)
    {
        struct TrieNode *root = new TrieNode();
        int i = 0;
        for(string s : words)
        {
            reverse(s.begin(), s.end());
            insert(root, s, i++);
        }
        vector<vector<int>> result;
        i = 0;
        for(string s : words)
        {
            vector<int> palindromes = search(root, s);
            for(int x : palindromes)
            {
                if(i != x)
                    result.push_back({i, x});
            }
            i++;
        }
        return result;
    }
};


// Source https://leetcode.com/problems/house-robber-iii/

The thief has found himself a new place for his thievery again. There is only one entrance to this area, called root.

Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that all houses in this place form a binary tree. 
It will automatically contact the police if two directly-linked houses were broken into on the same night.

Given the root of the binary tree, return the maximum amount of money the thief can rob without alerting the police.

 

Example 1:


Input: root = [3,2,3,null,3,null,1]
Output: 7
Explanation: Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.
Example 2:


Input: root = [3,4,5,1,3,null,1]
Output: 9
Explanation: Maximum amount of money the thief can rob = 4 + 5 = 9.
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
0 <= Node.val <= 104

class Solution
{
public:
    int solve(TreeNode *root, unordered_map <TreeNode *, int> &dp)
    {
        if(!root) return 0;
        if(!root->left && !root->right)
        {
            return root->val;
        }

        if(dp[root] != 0) return dp[root];

        int choice1 = root->val;
        if(root->left) choice1 += solve(root->left->left, dp) + solve(root->left->right, dp);
        if(root->right) choice1 += solve(root->right->left, dp) + solve(root->right->right, dp);

        int choice2 = solve(root->left, dp) + solve(root->right, dp);

        return dp[root] = max(choice1, choice2);
    }
    int rob(TreeNode *root)
    {
        unordered_map <TreeNode *, int> dp;
        return solve(root, dp);
    }
};


// Source https://leetcode.com/problems/counting-bits/

Given an integer n, return an array ans of length n + 1 such that for each i (0 <= i <= n), ans[i] is the number of 1's in the binary representation of i.

 

Example 1:

Input: n = 2
Output: [0,1,1]
Explanation:
0 --> 0
1 --> 1
2 --> 10
Example 2:

Input: n = 5
Output: [0,1,1,2,1,2]
Explanation:
0 --> 0
1 --> 1
2 --> 10
3 --> 11
4 --> 100
5 --> 101
 

Constraints:

0 <= n <= 105

class Solution
{
public:
    vector<int> countBits(int n)
    {
        vector<int> count(n + 1, 0);
        for(int i = 1; i <= n; i++)
            count[i] = 1 + count[i & (i - 1)];
        return count;
    }
};


// Source https://leetcode.com/problems/flatten-nested-list-iterator/

You are given a nested list of integers nestedList. Each element is either an integer or a list whose elements may also be integers or other lists. Implement an iterator to flatten it.

Implement the NestedIterator class:

NestedIterator(List<NestedInteger> nestedList) Initializes the iterator with the nested list nestedList.
int next() Returns the next integer in the nested list.
boolean hasNext() Returns true if there are still some integers in the nested list and false otherwise.
Your code will be tested with the following pseudocode:

initialize iterator with nestedList
res = []
while iterator.hasNext()
    append iterator.next() to the end of res
return res
If res matches the expected flattened list, then your code will be judged as correct.

 

Example 1:

Input: nestedList = [[1,1],2,[1,1]]
Output: [1,1,2,1,1]
Explanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1].
Example 2:

Input: nestedList = [1,[4,[6]]]
Output: [1,4,6]
Explanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6].
 

Constraints:

1 <= nestedList.length <= 500
The values of the integers in the nested list is in the range [-106, 106].

class NestedIterator
{
private:
    queue<int> q;
public:
    NestedIterator(vector<NestedInteger> &nestedList)
    {
        addAllElements(nestedList);
    }

    int next()
    {
        int ele = q.front();
        q.pop();
        return ele;
    }

    bool hasNext()
    {
        return !q.empty();
    }
private:
    void addAllElements(vector<NestedInteger> &nestedList)
    {
        for(int i = 0; i < nestedList.size(); i++)
        {
            auto ele = nestedList[i];
            if(ele.isInteger())
            {
                q.push(ele.getInteger());
            }
            else
            {
                addAllElements(ele.getList());
            }
        }
    }
};


// Source https://leetcode.com/problems/power-of-four/

Given an integer n, return true if it is a power of four. Otherwise, return false.

An integer n is a power of four, if there exists an integer x such that n == 4x.

 

Example 1:

Input: n = 16
Output: true
Example 2:

Input: n = 5
Output: false
Example 3:

Input: n = 1
Output: true
 

Constraints:

-231 <= n <= 231 - 1

class Solution
{
public:
    bool isPowerOfFour(int n)
    {
        if(n < 1) return false;
        while (n % 4 == 0) n /= 4;
        return n == 1;
    }
};


// Source https://leetcode.com/problems/integer-break/

Given an integer n, break it into the sum of k positive integers, where k >= 2, and maximize the product of those integers.

Return the maximum product you can get.

 

Example 1:

Input: n = 2
Output: 1
Explanation: 2 = 1 + 1, 1 × 1 = 1.
Example 2:

Input: n = 10
Output: 36
Explanation: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36.
 

Constraints:

2 <= n <= 58

class Solution
{
public:
    vector<int> dp;

    int recur(int n)
    {
        if(n == 0) return 1;
        if(dp[n] != 0) return dp[n];
        int total = 0;
        for(int i = 1; i <= n; i++)
        {
            int tmp = recur(n - i) * i;
            total = max(total, tmp);
        }
        return dp[n] = total;
    }
    int integerBreak(int n)
    {
        if (n == 2) return 1;
        if (n == 3) return 2;
        dp.resize(n + 1, 0);
        return recur(n);
    }
};


// Source https://leetcode.com/problems/reverse-string/

Write a function that reverses a string. The input string is given as an array of characters s.

You must do this by modifying the input array in-place with O(1) extra memory.

 

Example 1:

Input: s = ["h","e","l","l","o"]
Output: ["o","l","l","e","h"]
Example 2:

Input: s = ["H","a","n","n","a","h"]
Output: ["h","a","n","n","a","H"]
 

Constraints:

1 <= s.length <= 105
s[i] is a printable ascii character.

class Solution
{
public:
    void reverseString(vector<char> &s)
    {
        int i = 0, j = s.size() - 1;
        while(i < j) swap(s[i++], s[j--]);
    }
};


// Source https://leetcode.com/problems/reverse-vowels-of-a-string/

Given a string s, reverse only all the vowels in the string and return it.

The vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in both cases.

 

Example 1:

Input: s = "hello"
Output: "holle"
Example 2:

Input: s = "leetcode"
Output: "leotcede"
 

Constraints:

1 <= s.length <= 3 * 105
s consist of printable ASCII characters.

class Solution
{
public:
    string reverseVowels(string s)
    {
        int i = 0, j = s.size() - 1;
        while(i < j)
        {
            if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u'
                    || s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')
            {
                if(s[j] == 'a' || s[j] == 'e' || s[j] == 'i' || s[j] == 'o' || s[j] == 'u' ||
                        s[j] == 'A' || s[j] == 'E' || s[j] == 'I' || s[j] == 'O' || s[j] == 'U')
                {
                    swap(s[i++], s[j--]);
                }
                else j--;
            }
            else i++;
        }
        return s;
    }
};


// Source https://leetcode.com/problems/top-k-frequent-elements/

Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.

 

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]
 

Constraints:

1 <= nums.length <= 105
k is in the range [1, the number of unique elements in the array].
It is guaranteed that the answer is unique.

class Solution
{
    unordered_map<int, int>m;
public:
    vector<int> topKFrequent(vector<int> &nums, int k)
    {
        priority_queue<pair<int, int>>q;
        for(int i = 0; i < nums.size(); i++)
            m[nums[i]]++;
        for(auto i : m)
            q.push({i.second, i.first});
        vector<int>ans;
        int it = 0;
        while(q.size())
        {
            ans.push_back(q.top().second);
            q.pop();
            it++;
            if(it == k) break;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/intersection-of-two-arrays/

Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.

 

Example 1:

Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2]
Example 2:

Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [9,4]
Explanation: [4,9] is also accepted.
 

Constraints:

1 <= nums1.length, nums2.length <= 1000
0 <= nums1[i], nums2[i] <= 1000

class Solution
{
public:
    vector<int> intersection(vector<int> &nums1, vector<int> &nums2)
    {
        set<int>st, res;
        for (auto val : nums1) st.insert(val);
        for (auto val : nums2)
        {
            if(st.find(val) != st.end())
            {
                res.insert(val);
            }
        }
        return vector<int>(res.begin(), res.end());
    }
};


// Source https://leetcode.com/problems/intersection-of-two-arrays-ii/

Given two integer arrays nums1 and nums2, return an array of their intersection. 
Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.

 

Example 1:

Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2,2]
Example 2:

Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [4,9]
Explanation: [9,4] is also accepted.
 

Constraints:

1 <= nums1.length, nums2.length <= 1000
0 <= nums1[i], nums2[i] <= 1000

class Solution
{
public:
    vector<int> intersect(vector<int> &nums1, vector<int> &nums2)
    {
        vector<int> ans;
        unordered_map<int, int> mp;
        for(auto val : nums1) mp[val]++;
        for(auto val : nums2)
        {
            if(mp.count(val))
            {
                ans.push_back(val);
                mp[val]--;
                if(mp[val] == 0) mp.erase(val);
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/data-stream-as-disjoint-intervals/

Given a data stream input of non-negative integers a1, a2, ..., an, summarize the numbers seen so far as a list of disjoint intervals.

Implement the SummaryRanges class:

SummaryRanges() Initializes the object with an empty stream.
void addNum(int val) Adds the integer val to the stream.
int[][] getIntervals() Returns a summary of the integers in the stream currently as a list of disjoint intervals [starti, endi].
 

Example 1:

Input
["SummaryRanges", "addNum", "getIntervals", "addNum", "getIntervals", "addNum", "getIntervals", "addNum", "getIntervals", "addNum", "getIntervals"]
[[], [1], [], [3], [], [7], [], [2], [], [6], []]
Output
[null, null, [[1, 1]], null, [[1, 1], [3, 3]], null, [[1, 1], [3, 3], [7, 7]], null, [[1, 3], [7, 7]], null, [[1, 3], [6, 7]]]

Explanation
SummaryRanges summaryRanges = new SummaryRanges();
summaryRanges.addNum(1);      // arr = [1]
summaryRanges.getIntervals(); // return [[1, 1]]
summaryRanges.addNum(3);      // arr = [1, 3]
summaryRanges.getIntervals(); // return [[1, 1], [3, 3]]
summaryRanges.addNum(7);      // arr = [1, 3, 7]
summaryRanges.getIntervals(); // return [[1, 1], [3, 3], [7, 7]]
summaryRanges.addNum(2);      // arr = [1, 2, 3, 7]
summaryRanges.getIntervals(); // return [[1, 3], [7, 7]]
summaryRanges.addNum(6);      // arr = [1, 2, 3, 6, 7]
summaryRanges.getIntervals(); // return [[1, 3], [6, 7]]
 

Constraints:

0 <= val <= 104
At most 3 * 104 calls will be made to addNum and getIntervals.

class SummaryRanges
{
public:
    int dp[10005];
    int max_val;

    SummaryRanges()
    {
        memset(dp, 0, sizeof(dp));
        max_val = INT_MIN;
    }

    void addNum(int val)
    {
        dp[val] = 1;
        if (val > max_val) max_val = val;
    }

    vector<vector<int>> getIntervals()
    {
        vector<vector<int>> res;
        int start = -1;
        int i = 0;
        while (i <= max_val)
        {
           for(; i <= max_val && dp[i] == 0; ++i);
           if (i > max_val) return res;
           start = i;
           ++i;
            for (; i <= max_val && dp[i] == 1; ++i);
            res.push_back({start, i - 1});
        }
        return res;
    }
};


// Source https://leetcode.com/problems/russian-doll-envelopes/

You are given a 2D array of integers envelopes where envelopes[i] = [wi, hi] represents the width and the height of an envelope.

One envelope can fit into another if and only if both the width and height of one envelope are greater than the other envelope's width and height.

Return the maximum number of envelopes you can Russian doll (i.e., put one inside the other).

Note: You cannot rotate an envelope.

 

Example 1:

Input: envelopes = [[5,4],[6,4],[6,7],[2,3]]
Output: 3
Explanation: The maximum number of envelopes you can Russian doll is 3 ([2,3] => [5,4] => [6,7]).
Example 2:

Input: envelopes = [[1,1],[1,1],[1,1]]
Output: 1
 

Constraints:

1 <= envelopes.length <= 105
envelopes[i].length == 2
1 <= wi, hi <= 105

class Solution
{
public:
    static bool cmp(vector<int> &a, vector<int> &b)
    {
        if(a[0] != b[0]) return a[0] < b[0];
        return a[1] > b[1];
    }
    int maxEnvelopes(vector<vector<int>> &e)
    {
        sort(e.begin(), e.end(), cmp);
        int n = e.size();
        vector<int> dp;
        for(int i = 0; i < n; i++)
        {
            auto it = lower_bound(dp.begin(), dp.end(), e[i][1]);
            if(it == dp.end()) dp.push_back(e[i][1]);
            else *it = e[i][1];
        }
        return dp.size();
    }
};


// Source https://leetcode.com/problems/design-twitter/

Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the 10 most recent tweets in the user's news feed.

Implement the Twitter class:

Twitter() Initializes your twitter object.
void postTweet(int userId, int tweetId) Composes a new tweet with ID tweetId by the user userId. Each call to this function will be made with a unique tweetId.
List<Integer> getNewsFeed(int userId) Retrieves the 10 most recent tweet IDs in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user themself. Tweets must be ordered from most recent to least recent.
void follow(int followerId, int followeeId) The user with ID followerId started following the user with ID followeeId.
void unfollow(int followerId, int followeeId) The user with ID followerId started unfollowing the user with ID followeeId.
 

Example 1:

Input
["Twitter", "postTweet", "getNewsFeed", "follow", "postTweet", "getNewsFeed", "unfollow", "getNewsFeed"]
[[], [1, 5], [1], [1, 2], [2, 6], [1], [1, 2], [1]]
Output
[null, null, [5], null, null, [6, 5], null, [5]]

Explanation
Twitter twitter = new Twitter();
twitter.postTweet(1, 5); // User 1 posts a new tweet (id = 5).
twitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5]. return [5]
twitter.follow(1, 2);    // User 1 follows user 2.
twitter.postTweet(2, 6); // User 2 posts a new tweet (id = 6).
twitter.getNewsFeed(1);  // User 1's news feed should return a list with 2 tweet ids -> [6, 5]. Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.
twitter.unfollow(1, 2);  // User 1 unfollows user 2.
twitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5], since user 1 is no longer following user 2.
 

Constraints:

1 <= userId, followerId, followeeId <= 500
0 <= tweetId <= 104
All the tweets have unique IDs.
At most 3 * 104 calls will be made to postTweet, getNewsFeed, follow, and unfollow.

class Twitter
{
    set<int> users;
    unordered_map<int, set<int>> followees;
    unordered_map<int, vector<pair<int, int>>> posts;
    int cur_time = 0;
public:
    Twitter()
    {

    }

    void postTweet(int userId, int tweetId)
    {
        users.insert(userId);
        posts[userId].push_back({tweetId, ++cur_time});
    }

    vector<int> getNewsFeed(int userId)
    {
        if(users.find(userId) == users.end())
            return {};
        auto res = posts[userId];
        for (auto followee : followees[userId])
        {
            auto toadd = posts[followee];
            res.insert(res.end(), toadd.begin(), toadd.end());
        }
        sort(res.begin(), res.end(), [](const pair<int, int> &a, const pair<int, int> &b)
        {
            return a.second > b.second;
        });

        vector<int> sorted_feeds{};
        int cnt = min((int)res.size(), 10);
        for(int i = 0; i < cnt; i++)
        {
            sorted_feeds.push_back(res[i].first);
        }
        return sorted_feeds;
    }

    void follow(int followerId, int followeeId)
    {
        users.insert(followerId);
        followees[followerId].insert(followeeId);
    }

    void unfollow(int followerId, int followeeId)
    {
        followees[followerId].erase(followeeId);
    }
};


// Source https://leetcode.com/problems/count-numbers-with-unique-digits/

Given an integer n, return the count of all numbers with unique digits, x, where 0 <= x < 10n.

 

Example 1:

Input: n = 2
Output: 91
Explanation: The answer should be the total numbers in the range of 0 ≤ x < 100, excluding 11,22,33,44,55,66,77,88,99
Example 2:

Input: n = 0
Output: 1
 

Constraints:

0 <= n <= 8

class Solution
{
public:
    int countNumbersWithUniqueDigits(int n)
    {
        // for 1 digit number C(10,1)*(1!)  //do not remove 0 itself here
        // for 2 digit number C(10,2)*(2!)-(two digit(unique) numbers starting with 0)
        // for 3 digit number C(10,3)*(3!)-(three digit(unique) numbers starting with 0)
        //     ...........
        // for n digit number C(10,n)*(n!)-(n digit numbers(unique) starting with 0)
        //sum of all the above counts

        //to calculate C(10,n) use factorials

        vector<long long> fact(11, 1);
        for(int i = 2; i <= 10; i++) fact[i] = fact[i - 1] * i;
        vector<long long> c10(n + 1), c9(n + 1);
        // C(10,r) and C(9,r)
        for(int i = 0; i <= n; i++)
        {
            c10[i] = fact[10] / (fact[i] * fact[10 - i]);
            c9[i] = fact[9] / (fact[i] * fact[9 - i]);
        }

        vector<long long> count(n + 1);
        count[0] = 1; //base case for '0'

        // count[i] 表示满足i位数且第1位不为0的数字个数
        for(int i = 1; i <= n; i++)
        {
            //count of i digits number with unique digits
            count[i] = (c10[i] * fact[i]) - (c9[i - 1] * fact[i - 1]);
        }

        int ans = 0;
        for(int i = 0; i <= n; i++) ans += count[i];
        return ans;
    }
};


// Source https://leetcode.com/problems/max-sum-of-rectangle-no-larger-than-k/

Given an m x n matrix matrix and an integer k, return the max sum of a rectangle in the matrix such that its sum is no larger than k.

It is guaranteed that there will be a rectangle with a sum no larger than k.

 

Example 1:


Input: matrix = [[1,0,1],[0,-2,3]], k = 2
Output: 2
Explanation: Because the sum of the blue rectangle [[0, 1], [-2, 3]] is 2, and 2 is the max number no larger than k (k = 2).
Example 2:

Input: matrix = [[2,2,-1]], k = 3
Output: 3
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 100
-100 <= matrix[i][j] <= 100
-105 <= k <= 105

class Solution
{
public:
    int maxSumSubmatrix(vector<vector<int>> &matrix, int k)
    {
        int m = matrix.size(), n = matrix[0].size();
        int res = INT_MIN;
        vector<int> row_sum(m, 0);
        // l 为矩形最左边的列，r为矩形最右边的列
       // row_sum[i] 对应 满足col >= l && col <= r, row 为i的数字之和
        for (int l = 0; l < n; ++l)
        {
            fill(row_sum.begin(), row_sum.end(), 0);
            for (int r = l; r < n; ++r)
            {
                int cur_sum = 0, best_sum = INT_MIN;
                for (int i = 0; i < m; ++i)
                {
                    row_sum[i] += matrix[i][r];
                    if (cur_sum < 0)
                        cur_sum = row_sum[i];
                    else
                        cur_sum += row_sum[i];
                    best_sum = max(best_sum, cur_sum);
                }
                if (best_sum == k)
                    return k;
                else if (best_sum < k)
                {
                    res = max(res, best_sum);
                    continue;
                }
                // Otherwise, try binary search of running sums
                cur_sum = 0;
                set<int> s{0};
                for (auto sum : row_sum)
                {
                    cur_sum += sum;
                    auto it = s.lower_bound(cur_sum - k);
                    if (it != s.end())
                        res = max(res, cur_sum - *it);
                    if (res == k)
                        return k;
                    s.insert(cur_sum);
                }
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/water-and-jug-problem/

You are given two jugs with capacities jug1Capacity and jug2Capacity liters. There is an infinite amount of water supply available. 
Determine whether it is possible to measure exactly targetCapacity liters using these two jugs.

If targetCapacity liters of water are measurable, you must have targetCapacity liters of water contained within one or both buckets by the end.

Operations allowed:

Fill any of the jugs with water.
Empty any of the jugs.
Pour water from one jug into another till the other jug is completely full, or the first jug itself is empty.
 

Example 1:

Input: jug1Capacity = 3, jug2Capacity = 5, targetCapacity = 4
Output: true
Explanation: The famous Die Hard example 
Example 2:

Input: jug1Capacity = 2, jug2Capacity = 6, targetCapacity = 5
Output: false
Example 3:

Input: jug1Capacity = 1, jug2Capacity = 2, targetCapacity = 3
Output: true
 

Constraints:

1 <= jug1Capacity, jug2Capacity, targetCapacity <= 106

Solution exists onlye for integer values of X, Y in aX + bY = c
where a =Jug1Cap, b = jug2Cap, c= target Capacity

4 = (-2) * 3 + 2 * 5
先装满容量为5的杯子，再把容量为5的杯子中的3倒到容量为3的杯子，再清空容量为3的杯子，
把容量为5的杯子中剩余的2倒到容量为3的杯子，再装满容量为5的杯子，再把容量为5的杯子中的1倒到容量为3的杯子，最后容量为5的杯子中剩余为4

根据裴蜀定理，ax + by = c 中的x和y有解，c必须为 gcd(x, y) 的倍数

class Solution
{
public:
    int gcd(int a, int b)
    {
        if(b == 0) return a;
        else return gcd(b, a % b);
    }
    bool canMeasureWater(int jug1Capacity, int jug2Capacity, int targetCapacity)
    {
        if(targetCapacity > jug1Capacity + jug2Capacity) return false;
        int a = gcd(jug1Capacity, jug2Capacity);
        return targetCapacity % a == 0;
    }
};


// Source https://leetcode.com/problems/valid-perfect-square/

Given a positive integer num, write a function which returns True if num is a perfect square else False.

Follow up: Do not use any built-in library function such as sqrt.

 

Example 1:

Input: num = 16
Output: true
Example 2:

Input: num = 14
Output: false
 

Constraints:

1 <= num <= 2^31 - 1

class Solution
{
public:
    bool isPerfectSquare(int num)
    {
        long int l = 0, h = num, mid;
        if(num == 1)return true;
        while(l <= h)
        {
            mid = l + (h - l) / 2;
            if(mid * mid == num)return true;
            else if(mid * mid < num) l = mid + 1;
            else h = mid - 1;
        }
        return false;
    }
};


// Source https://leetcode.com/problems/largest-divisible-subset/

Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:

answer[i] % answer[j] == 0, or
answer[j] % answer[i] == 0
If there are multiple solutions, return any of them.

 

Example 1:

Input: nums = [1,2,3]
Output: [1,2]
Explanation: [1,3] is also accepted.
Example 2:

Input: nums = [1,2,4,8]
Output: [1,2,4,8]
 

Constraints:

1 <= nums.length <= 1000
1 <= nums[i] <= 2 * 109
All the integers in nums are unique.

class Solution
{
public:
    vector<int> largestDivisibleSubset(vector<int> &nums)
    {
        sort(nums.begin(), nums.end());
        int n = nums.size();
        vector<int> parent(n, -1);//link to parent of it
        vector<int> cnt(n, 1);//for storing the count
        int maxCnt = 0, //number of elements in that subset
            maxCntStartPos = 0; //minimum index
        for(int i = n - 1; i >= 0; i--)
        {
            for(int j = i + 1; j < n; j++)
            {
                if(nums[j] % nums[i] == 0 && cnt[j] + 1 > cnt[i])
                {
                    cnt[i] = cnt[j] + 1;
                    parent[i] = j; //we are linking to the parent
                }
            }
            if(cnt[i] > maxCnt)
            {
                maxCnt = cnt[i];
                maxCntStartPos = i;
            }
        }
        vector<int> res;
        int idx = maxCntStartPos;
        for(int i = 0; i < maxCnt; ++i)
        {
            res.push_back(nums[idx]);
            idx = parent[idx];
        }
        return res;
    }
};


// Source https://leetcode.com/problems/sum-of-two-integers/

Given two integers a and b, return the sum of the two integers without using the operators + and -.

 

Example 1:

Input: a = 1, b = 2
Output: 3
Example 2:

Input: a = 2, b = 3
Output: 5
 

Constraints:

-1000 <= a, b <= 1000

759+674
1. 如果不考虑进位，可以得到 323
2. 如果只考虑进位，可以得到 1110
3. 323+1110=1433 就是最终结果了

在二进制下来看，不考虑进位的加，0+0=0，0+1=1, 1+0=1，1+1=0，这就是异或的运算规则，如果只考虑进位的加 0+0=0, 0+1=0, 1+0=0, 1+1=1，而这其实这就是'与'的运算，
而第三步在将两者相加时，再递归调用这个算法，终止条件是进位为0。

class Solution
{
public:
    int getSum(int a, int b)
    {
        while(b != 0)
        {
            unsigned carry = a & b;
            a ^= b;
            b = carry << 1;
        }
        return a;
    }
};


// Source https://leetcode.com/problems/super-pow/

Your task is to calculate a^b mod 1337 where a is a positive integer and b is an extremely large positive integer given in the form of an array.

 

Example 1:

Input: a = 2, b = [3]
Output: 8
Example 2:

Input: a = 2, b = [1,0]
Output: 1024
Example 3:

Input: a = 1, b = [4,3,3,8,5,2]
Output: 1
 

Constraints:

1 <= a <= 231 - 1
1 <= b.length <= 2000
0 <= b[i] <= 9
b does not contain leading zeros.

互质,若N个整数的最大公因数是1，则称这N个整数互质。
欧拉函数φ( n )是小于等于n 的正整数中与 n 互质的数的个数。
φ(n)=n*(1-1/p1)(1-1/p2)(1-1/p3)*(1-1/p4)……(1-1/pn)
其中p1, p2……pn为n的所有质因数，n是正整数。φ(1)=1（唯一和1互质的数就是1本身）。
φ(10)=10×(1-1/2)×(1-1/5)=4;
1 3 7 9
φ(30)=30×(1-1/2)×(1-1/3)×(1-1/5)=8;
1 7 11 13 17 19 23 29
φ(49)=49×(1-1/7)=42;
如果n为质数
φ(n) = n - 1

φ( 1337 ) = 1337 * (1 - 1/7) * (1 - 1/191) = 1337 - 7 - 191 + 1= 1338 - 198 = 1140

欧拉定理

对于任意互质的a和n，有a^ ( φ( n ) ) mod n = 1
进一步 a^ ( φ( n )的整数倍 ) mod n = 1
当对于互质的a, n计算a ^ k mod n 时，可以简化成 a ^ (k mod φ( n )) mod n
k = k mod φ( n ) + φ( n )的整数倍
如果n为质数，a ^ (n - 1) mod n = 1, a * a ^ (n - 2) mod n = 1，a ^ (n - 2) mod n为a的乘法逆元（mod n的情况下）

class Solution
{
public:
    long long binaryexp(long long a, long long b, long long m)
    {
        long long ans = 1;
        while(b > 0)
        {
            if(b & 1)
            {
                ans = (ans * a) % m;
            }
            a = (a * a) % m;
            b >>= 1;
        }
        return ans;
    }
    int superPow(int a, vector<int> &b)
    {
        long long num = 0;
        for(auto k : b)
        {
            num = ((num * 10) + k) % 1140; //1140 is the etf value of 1337
        }
        return binaryexp(a, num, 1337);
    }
};


// Source https://leetcode.com/problems/find-k-pairs-with-smallest-sums/

You are given two integer arrays nums1 and nums2 sorted in ascending order and an integer k.

Define a pair (u, v) which consists of one element from the first array and one element from the second array.

Return the k pairs (u1, v1), (u2, v2), ..., (uk, vk) with the smallest sums.

 

Example 1:

Input: nums1 = [1,7,11], nums2 = [2,4,6], k = 3
Output: [[1,2],[1,4],[1,6]]
Explanation: The first 3 pairs are returned from the sequence: [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]

[1,2] -> [7,2] [1,4]
[1,4] -> [1,6]
[1,6] -> 空
[7,2] -> [11, 2] [7, 4]
[7,4] -> [7, 6]
[7,6] -> 空
[11,2] -> [11, 4]
[11,4] -> [11,6]
[11,6] -> 空

Example 2:

Input: nums1 = [1,1,2], nums2 = [1,2,3], k = 2
Output: [[1,1],[1,1]]
Explanation: The first 2 pairs are returned from the sequence: [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]
Example 3:

Input: nums1 = [1,2], nums2 = [3], k = 3
Output: [[1,3],[2,3]]
Explanation: All possible pairs are returned from the sequence: [1,3],[2,3]
 

Constraints:

1 <= nums1.length, nums2.length <= 105
-109 <= nums1[i], nums2[i] <= 109
nums1 and nums2 both are sorted in ascending order.
1 <= k <= 104

class Solution
{
public:
    vector<vector<int>> kSmallestPairs(vector<int> &nums1, vector<int> &nums2, int k)
    {
        auto cmp = [&nums1, &nums2] (pair<int, int> a, pair<int, int> b)
        {
            return nums1[a.first] + nums2[a.second] > nums1[b.first] + nums2[b.second];
        };

        priority_queue<pair<int, int>, vector<pair<int, int>>, decltype(cmp)> pq(cmp);
        pq.push({0, 0});

        vector<vector<int>> res;
        for (int i = 0; i < k && !pq.empty(); i++)
        {
            auto [a, b] = pq.top();
            pq.pop();
            res.push_back({nums1[a], nums2[b]});
            if (a < nums1.size() - 1 && b == 0)
                pq.push({a + 1, b});
            if (b < nums2.size() - 1)
                pq.push({a, b + 1});
        }
        return res;
    }
};


// Source https://leetcode.com/problems/guess-number-higher-or-lower/

We are playing the Guess Game. The game is as follows:

I pick a number from 1 to n. You have to guess which number I picked.

Every time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.

You call a pre-defined API int guess(int num), which returns three possible results:

-1: Your guess is higher than the number I picked (i.e. num > pick).
1: Your guess is lower than the number I picked (i.e. num < pick).
0: your guess is equal to the number I picked (i.e. num == pick).
Return the number that I picked.

 

Example 1:

Input: n = 10, pick = 6
Output: 6
Example 2:

Input: n = 1, pick = 1
Output: 1
Example 3:

Input: n = 2, pick = 1
Output: 1
 

Constraints:

1 <= n <= 231 - 1
1 <= pick <= n

class Solution
{
public:
    int guessNumber(int n)
    {
        long l = 1; //low
        long h = n; //high
        long mid;
        while(l <= h)
        {
            mid = (l + h) / 2;
            if(guess(mid) == 1) // guess is lower than the number picked
            {
                l = mid + 1;
            }
            else if(guess(mid) == -1) // guess is higher than the number picked
            {
                h = mid - 1;
            }
            else
            {
                return mid;
            }
        }
        return l;
    }
};


// Source https://leetcode.com/problems/guess-number-higher-or-lower-ii/

We are playing the Guessing Game. The game will work as follows:

I pick a number between 1 and n.
You guess a number.
If you guess the right number, you win the game.
If you guess the wrong number, then I will tell you whether the number I picked is higher or lower, and you will continue guessing.
Every time you guess a wrong number x, you will pay x dollars. If you run out of money, you lose the game.
Given a particular n, return the minimum amount of money you need to guarantee a win regardless of what number I pick.

 

Example 1:


Input: n = 10
Output: 16
Explanation: The winning strategy is as follows:
- The range is [1,10]. Guess 7.
    - If this is my number, your total is $0. Otherwise, you pay $7.
    - If my number is higher, the range is [8,10]. Guess 9.
        - If this is my number, your total is $7. Otherwise, you pay $9.
        - If my number is higher, it must be 10. Guess 10. Your total is $7 + $9 = $16.
        - If my number is lower, it must be 8. Guess 8. Your total is $7 + $9 = $16.
    - If my number is lower, the range is [1,6]. Guess 3.
        - If this is my number, your total is $7. Otherwise, you pay $3.
        - If my number is higher, the range is [4,6]. Guess 5.
            - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $5.
            - If my number is higher, it must be 6. Guess 6. Your total is $7 + $3 + $5 = $15.
            - If my number is lower, it must be 4. Guess 4. Your total is $7 + $3 + $5 = $15.
        - If my number is lower, the range is [1,2]. Guess 1.
            - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $1.
            - If my number is higher, it must be 2. Guess 2. Your total is $7 + $3 + $1 = $11.
The worst case in all these scenarios is that you pay $16. Hence, you only need $16 to guarantee a win.
Example 2:

Input: n = 1
Output: 0
Explanation: There is only one possible number, so you can guess 1 and not have to pay anything.
Example 3:

Input: n = 2
Output: 1
Explanation: There are two possible numbers, 1 and 2.
- Guess 1.
    - If this is my number, your total is $0. Otherwise, you pay $1.
    - If my number is higher, it must be 2. Guess 2. Your total is $1.
The worst case is that you pay $1.
 

Constraints:

1 <= n <= 200

class Solution
{
public:
    int dp[205][205];
    int solve(int left, int right)
    {
        if(left >= right) return 0;
        if(dp[left][right] != -1) return dp[left][right];
        int res = INT_MAX;
        for(int i = left; i <= right; i++)
        {
            res = min(res, i + max(solve(i + 1, right), solve(left, i - 1)));
        }
        return dp[left][right] = res;
    }

    int getMoneyAmount(int n)
    {
        memset(dp, -1, sizeof(dp));
        return solve(1, n);
    }
};


// Source https://leetcode.com/problems/wiggle-subsequence/

A wiggle sequence is a sequence where the differences between successive numbers strictly alternate between positive and negative. 
The first difference (if one exists) may be either positive or negative. A sequence with one element and a sequence with two non-equal elements are trivially wiggle sequences.

For example, [1, 7, 4, 9, 2, 5] is a wiggle sequence because the differences (6, -3, 5, -7, 3) alternate between positive and negative.
In contrast, [1, 4, 7, 2, 5] and [1, 7, 4, 5, 5] are not wiggle sequences. The first is not because its first two differences are positive, and the second is not because its last difference is zero.
A subsequence is obtained by deleting some elements (possibly zero) from the original sequence, leaving the remaining elements in their original order.

Given an integer array nums, return the length of the longest wiggle subsequence of nums.

 

Example 1:

Input: nums = [1,7,4,9,2,5]
Output: 6
Explanation: The entire sequence is a wiggle sequence with differences (6, -3, 5, -7, 3).
Example 2:

Input: nums = [1,17,5,10,13,15,10,5,16,8]
Output: 7
Explanation: There are several subsequences that achieve this length.
One is [1, 17, 10, 13, 10, 16, 8] with differences (16, -7, 3, -3, 6, -8).
Example 3:

Input: nums = [1,2,3,4,5,6,7,8,9]
Output: 2
 

Constraints:

1 <= nums.length <= 1000
0 <= nums[i] <= 1000

class Solution
{
public:
    int n;
    int dp[2][1005];

    int solve(vector<int> &nums, int idx, int type)
    {
        if(idx >= n - 1) return 1;
        if(dp[type][idx] != -1) return dp[type][idx];
        int ans = 1;
        for(int i = idx + 1; i < n; i++)
        {
            int diff = nums[i] - nums[idx];
            if(type == 0 && diff > 0)
            {
                ans = max(ans, 1 + solve(nums, i, type ^ 1));
            }
            else if(type == 1 && diff < 0)
            {
                ans = max(ans, 1 + solve(nums, i, type ^ 1));
            }
        }
        return dp[type][idx] = ans;
    }

    int wiggleMaxLength(vector<int> &nums)
    {
        n = nums.size();
        memset(dp, -1, sizeof(dp));
        int res1 = solve(nums, 0, 0);
        int res2 = solve(nums, 0, 1);
        return max(res1, res2);
    }
};


// Source https://leetcode.com/problems/combination-sum-iv/

Given an array of distinct integers nums and a target integer target, return the number of possible combinations that add up to target.

The test cases are generated so that the answer can fit in a 32-bit integer.

 

Example 1:

Input: nums = [1,2,3], target = 4
Output: 7
Explanation:
The possible combination ways are:
(1, 1, 1, 1)
(1, 1, 2)
(1, 2, 1)
(1, 3)
(2, 1, 1)
(2, 2)
(3, 1)
Note that different sequences are counted as different combinations.
Example 2:

Input: nums = [9], target = 3
Output: 0
 

Constraints:

1 <= nums.length <= 200
1 <= nums[i] <= 1000
All the elements of nums are unique.
1 <= target <= 1000

class Solution
{
public:
    int n;
    int dp[1005];

    int helper(vector<int> &nums, int target, int sum)
    {
        if (sum > target) return 0;
        if (sum == target) return 1;
        if(dp[sum] != -1) return dp[sum];
        int ans = 0;
        for (int i = 0; i < n; ++i)
        {
            ans += helper(nums, target, sum + nums[i]);
        }
        return dp[sum] = ans;
    }
    int combinationSum4(vector<int> &nums, int target)
    {
        n = nums.size();
        memset(dp, -1, sizeof(dp));
        return helper(nums, target, 0);
    }
};


// Source https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/

Given an n x n matrix where each of the rows and columns is sorted in ascending order, return the kth smallest element in the matrix.

Note that it is the kth smallest element in the sorted order, not the kth distinct element.

You must find a solution with a memory complexity better than O(n2).

 

Example 1:

Input: matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8
Output: 13
Explanation: The elements in the matrix are [1,5,9,10,11,12,13,13,15], and the 8th smallest number is 13
Example 2:

Input: matrix = [[-5]], k = 1
Output: -5
 

Constraints:

n == matrix.length == matrix[i].length
1 <= n <= 300
-109 <= matrix[i][j] <= 109
All the rows and columns of matrix are guaranteed to be sorted in non-decreasing order.
1 <= k <= n2

class Solution
{
public:
    int find(int mid, vector<vector<int>> &matrix)
    {
        int count = 0;
        for(int i = 0; i < matrix.size(); i++)
        {
            if(matrix[i][0] > mid)break;
            auto it = upper_bound(matrix[i].begin(), matrix[i].end(), mid) - matrix[i].begin();
            count += it;
        }
        return count;
    }
    int kthSmallest(vector<vector<int>> &matrix, int k)
    {
        int n = matrix.size();
        int low = matrix[0][0];
        int high = matrix[n - 1][n - 1];
        int ans = 0;
        while(low <= high)
        {
            int mid = low + (high - low) / 2;
            if(find(mid, matrix) >= k)
            {
                ans = mid;
                high = mid - 1;
            }
            else low = mid + 1;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/insert-delete-getrandom-o1/

Implement the RandomizedSet class:

RandomizedSet() Initializes the RandomizedSet object.
bool insert(int val) Inserts an item val into the set if not present. Returns true if the item was not present, false otherwise.
bool remove(int val) Removes an item val from the set if present. Returns true if the item was present, false otherwise.
int getRandom() Returns a random element from the current set of elements (it's guaranteed that at least one element exists when this method is called). 
Each element must have the same probability of being returned.
You must implement the functions of the class such that each function works in average O(1) time complexity.

 

Example 1:

Input
["RandomizedSet", "insert", "remove", "insert", "getRandom", "remove", "insert", "getRandom"]
[[], [1], [2], [2], [], [1], [2], []]
Output
[null, true, false, true, 2, true, false, 2]

Explanation
RandomizedSet randomizedSet = new RandomizedSet();
randomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully.
randomizedSet.remove(2); // Returns false as 2 does not exist in the set.
randomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2].
randomizedSet.getRandom(); // getRandom() should return either 1 or 2 randomly.
randomizedSet.remove(1); // Removes 1 from the set, returns true. Set now contains [2].
randomizedSet.insert(2); // 2 was already in the set, so return false.
randomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2.
 

Constraints:

-231 <= val <= 231 - 1
At most 2 * 105 calls will be made to insert, remove, and getRandom.
There will be at least one element in the data structure when getRandom is called.

class RandomizedSet
{
private:
    unordered_map<int, int> mp;
    vector<int> nums;
public:
    RandomizedSet()
    {

    }

    bool insert(int val)
    {
        if(mp.find(val) != mp.end())
            return false;
        mp[val] = nums.size();               // insert value and its index (in vector) to map
        nums.push_back(val);                // insert value into vector
        return true;
    }

    bool remove(int val)
    {
        if(mp.find(val) == mp.end())
            return false;
        int lastElem = nums.back();                        // get the last element of vector
        mp[lastElem] = mp[val];                            // last element will be copied to index where "val" exist so update map
        nums[mp[val]] = lastElem;                          // copy last element at index of  "val"
        nums.pop_back();                                   // remove the last element of vector
        mp.erase(val);                                     // erase val from map
        return true;
    }

    int getRandom()
    {
        return nums[rand() % nums.size()];
    }
};


// Source https://leetcode.com/problems/insert-delete-getrandom-o1-duplicates-allowed/

RandomizedCollection is a data structure that contains a collection of numbers, possibly duplicates (i.e., a multiset). 
It should support inserting and removing specific elements and also removing a random element.

Implement the RandomizedCollection class:

RandomizedCollection() Initializes the empty RandomizedCollection object.
bool insert(int val) Inserts an item val into the multiset, even if the item is already present. Returns true if the item is not present, false otherwise.
bool remove(int val) Removes an item val from the multiset if present. Returns true if the item is present, false otherwise. Note that if val has multiple occurrences in the multiset, we only remove one of them.
int getRandom() Returns a random element from the current multiset of elements. The probability of each element being returned is linearly related to the number of same values the multiset contains.
You must implement the functions of the class such that each function works on average O(1) time complexity.

Note: The test cases are generated such that getRandom will only be called if there is at least one item in the RandomizedCollection.

 

Example 1:

Input
["RandomizedCollection", "insert", "insert", "insert", "getRandom", "remove", "getRandom"]
[[], [1], [1], [2], [], [1], []]
Output
[null, true, false, true, 2, true, 1]

Explanation
RandomizedCollection randomizedCollection = new RandomizedCollection();
randomizedCollection.insert(1);   // return true since the collection does not contain 1.
                                  // Inserts 1 into the collection.
randomizedCollection.insert(1);   // return false since the collection contains 1.
                                  // Inserts another 1 into the collection. Collection now contains [1,1].
randomizedCollection.insert(2);   // return true since the collection does not contain 2.
                                  // Inserts 2 into the collection. Collection now contains [1,1,2].
randomizedCollection.getRandom(); // getRandom should:
                                  // - return 1 with probability 2/3, or
                                  // - return 2 with probability 1/3.
randomizedCollection.remove(1);   // return true since the collection contains 1.
                                  // Removes 1 from the collection. Collection now contains [1,2].
randomizedCollection.getRandom(); // getRandom should return 1 or 2, both equally likely.
 

Constraints:

-231 <= val <= 231 - 1
At most 2 * 105 calls in total will be made to insert, remove, and getRandom.
There will be at least one element in the data structure when getRandom is called.

class RandomizedCollection
{
public:
    unordered_map<int, unordered_set<int>>mp;
    vector<int>v;

    RandomizedCollection()
    {
    }

    bool insert(int val)
    {
        bool flag = false;
        if(!mp[val].size())
            flag = true;

        mp[val].insert(v.size());
        v.push_back(val);

        return flag;
    }

    bool remove(int val)
    {
        if(!mp[val].size())
            return false;

        int k = *mp[val].begin();
        mp[val].erase(k);

        if(k != (v.size() - 1))
        {
            int l = v[v.size() - 1];
            mp[l].erase(v.size() - 1);
            mp[l].insert(k);
            swap(v[k], v[v.size() - 1]);
        }

        v.pop_back();
        return true;
    }

    int getRandom()
    {
        return v[rand() % v.size()];
    }
};


// Source https://leetcode.com/problems/linked-list-random-node/

Given a singly linked list, return a random node's value from the linked list. Each node must have the same probability of being chosen.

Implement the Solution class:

Solution(ListNode head) Initializes the object with the head of the singly-linked list head.
int getRandom() Chooses a node randomly from the list and returns its value. All the nodes of the list should be equally likely to be chosen.
 

Example 1:


Input
["Solution", "getRandom", "getRandom", "getRandom", "getRandom", "getRandom"]
[[[1, 2, 3]], [], [], [], [], []]
Output
[null, 1, 3, 2, 2, 3]

Explanation
Solution solution = new Solution([1, 2, 3]);
solution.getRandom(); // return 1
solution.getRandom(); // return 3
solution.getRandom(); // return 2
solution.getRandom(); // return 2
solution.getRandom(); // return 3
// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.
 

Constraints:

The number of nodes in the linked list will be in the range [1, 104].
-104 <= Node.val <= 104
At most 104 calls will be made to getRandom.

class Solution
{
public:
    Solution(ListNode *head)
    {
        list = head;
        ListNode *ptr = head;
        while (ptr)
        {
            len++;
            ptr = ptr->next;
        }
    }

    int getRandom()
    {
        int rand_index = rand() % len;
        ListNode *ptr = list;
        for (int i = 0; i < rand_index; i++)
        {
            ptr = ptr->next;
        }
        return ptr->val;
    }

private:
    int len = 0;
    ListNode *list;
};

如何从包含未知大小的数据流中随机选取k个数据，并且要保证每个数据被抽取到的概率相等
首先考虑简单的情况，当k=1时，如何制定策略：
遇到第1个数 n1 的时候，我们以 1/1 的概率保留它，那么
p(n1) = 1 / 1
遇到第2个数 n2 的时候，我们以 1/2 的概率保留它，那么
p(n1) = 1 * (1 - 1/2) = 1/2, p(n2) = 1 / 2
遇到第3个数 n3 的时候，我们以 1/3 的概率保留它，那么
p(n1) = 1/2 * (1 - 1/3) = 1/3, p(n2) = 1/2 * (1 - 1/3) = 1/3，p(n3) = 1/3
……
遇到第i个数 ni 的时候，我们以 1/i 的概率保留它，那么
p(n1) = p(n2) = p(n3) = 1/ (i -1) * (1 - 1/i) = 1/i
p(ni) = 1/i
这样就可以看出，对于k=1的情况，我们可以制定这样简单的抽样策略：对于第i个数，我们以 1/i 的概率保留第i个数 。
对于k>1的情况，我们可以采用类似的思考策略：
仍然假设数据流中含有N个数，那么要保证所有的数被抽到的概率相等，每个数被选取的概率必然为 k / N 。
对于前k个数 n1, n2, ... , nk，我们以 k / k 的概率保留它们，则 p(n1) = p(n2) = ... = p(nk) = k / k
对于第k+1个数 nr, r = k + 1，我们以 k / k + 1 的概率保留它，那么前k个数中的 nr，r>=1 && r <=k 被保留的概率可以这样表示：
p(nr) = 1 * (1 - k / k + 1) + 1 * (k / k + 1) * (k - 1 / k) = 1 / (k + 1) + (k - 1) / (k + 1) = k / (k + 1)，r>=1 && r <=k 
p(nr) = k / k + 1, r = k + 1
对于第k+2个数nr, r = k + 2，我们以 k / k + 2 的概率保留它，那么前k+1个数中的 nr，r>=1 && r <=k+1 被保留的概率可以这样表示：
p(nr) = k / (k + 1) * (1 - k / k + 2) + k / (k + 1) * k / (k + 2) * (k - 1 / k) = k / (k + 1) * (2 / (k + 2) + (k - 1) / (k + 2)) = k / (k + 1) * (k + 1) / (k + 2) = k / (k + 2)
p(nr) = k / k + 2, r = k + 2
我们可以制订策略：对于第i（i>k）个数，我们以 k / i 的概率保留第i个数。

class Solution
{
public:
    Solution(ListNode *head)
    {
        list = head;
    }
    int getRandom()
    {
        int res = list->val, i = 2;
        ListNode *cur = list->next;
        while (cur)
        {
            int j = rand() % i;
            if (j == 0) res = cur->val;
            ++i;
            cur = cur->next;
        }
        return res;
    }
private:
    ListNode *list;
};


// Source https://leetcode.com/problems/ransom-note/

Given two strings ransomNote and magazine, return true if ransomNote can be constructed from magazine and false otherwise.

Each letter in magazine can only be used once in ransomNote.

 

Example 1:

Input: ransomNote = "a", magazine = "b"
Output: false
Example 2:

Input: ransomNote = "aa", magazine = "ab"
Output: false
Example 3:

Input: ransomNote = "aa", magazine = "aab"
Output: true
 

Constraints:

1 <= ransomNote.length, magazine.length <= 105
ransomNote and magazine consist of lowercase English letters.

class Solution
{
public:
    bool canConstruct(string ransomNote, string magazine)
    {
        vector<int> f1(26, 0);
        for(char c : ransomNote) f1[c - 'a'] ++;

        vector<int> f2(26, 0);
        for(char c : magazine) f2[c - 'a'] ++;

        for(int i = 0; i < 26; i ++)
            if(f1[i] > f2[i]) return false;
        return true;
    }
};


// Source https://leetcode.com/problems/shuffle-an-array/

Given an integer array nums, design an algorithm to randomly shuffle the array. All permutations of the array should be equally likely as a result of the shuffling.

Implement the Solution class:

Solution(int[] nums) Initializes the object with the integer array nums.
int[] reset() Resets the array to its original configuration and returns it.
int[] shuffle() Returns a random shuffling of the array.
 

Example 1:

Input
["Solution", "shuffle", "reset", "shuffle"]
[[[1, 2, 3]], [], [], []]
Output
[null, [3, 1, 2], [1, 2, 3], [1, 3, 2]]

Explanation
Solution solution = new Solution([1, 2, 3]);
solution.shuffle();    // Shuffle the array [1,2,3] and return its result.
                       // Any permutation of [1,2,3] must be equally likely to be returned.
                       // Example: return [3, 1, 2]
solution.reset();      // Resets the array back to its original configuration [1,2,3]. Return [1, 2, 3]
solution.shuffle();    // Returns the random shuffling of array [1,2,3]. Example: return [1, 3, 2]

 

Constraints:

1 <= nums.length <= 200
-106 <= nums[i] <= 106
All the elements of nums are unique.
At most 5 * 104 calls in total will be made to reset and shuffle.

class Solution
{
public:
    vector<int> original;
    Solution(vector<int> &nums) : original(nums)
    {
    }

    vector<int> reset()
    {
        return original;
    }

    vector<int> shuffle()
    {
        vector<int> result(original);
        for (int i = 0; i < result.size(); ++i) {
            int pos = i + rand() % (result.size() - i);
            swap(result[i], result[pos]);
        }
        return result;
    }
};


// Source https://leetcode.com/problems/mini-parser/

Given a string s represents the serialization of a nested list, implement a parser to deserialize it and return the deserialized NestedInteger.

Each element is either an integer or a list whose elements may also be integers or other lists.

 

Example 1:

Input: s = "324"
Output: 324
Explanation: You should return a NestedInteger object which contains a single integer 324.
Example 2:

Input: s = "[123,[456,[789]]]"
Output: [123,[456,[789]]]
Explanation: Return a NestedInteger object containing a nested list with 2 elements:
1. An integer containing value 123.
2. A nested list containing two elements:
    i.  An integer containing value 456.
    ii. A nested list with one element:
         a. An integer containing value 789
 

Constraints:

1 <= s.length <= 5 * 104
s consists of digits, square brackets "[]", negative sign '-', and commas ','.
s is the serialization of valid NestedInteger.
All the values in the input are in the range [-106, 106].

class Solution
{
public:
    NestedInteger recur(string &s, int startPos, int endPos)
    {
        if(s[startPos] != '[')
        {
            return NestedInteger(stoi(s.substr(startPos, endPos - startPos)));
        }
        NestedInteger ret = NestedInteger();
        for (int i = startPos + 1; i < endPos - 1; ++i)
        {
            if (s[i] == ',') continue;
            if (s[i] == '[')
            {
                int left = 1;
                int j = i + 1;
                while (j < endPos - 1)
                {
                    if (s[j] == '[') ++left;
                    if (s[j] == ']') --left;
                    if (left == 0) break;
                    ++j;
                }
                ret.add(recur(s, i, j + 1));
                i = j;
            }
            else
            {
                int j = i + 1;
                while (j < endPos - 1)
                {
                    if (s[j] == ',') break;
                    ++j;
                }
                ret.add(NestedInteger(stoi(s.substr(i, j - i))));
                i = j;
            }
        }
        return ret;
    }

    NestedInteger deserialize(string s)
    {
        int n = s.length();
        return recur(s, 0, n);
    }
};


// Source https://leetcode.com/problems/lexicographical-numbers/

Given an integer n, return all the numbers in the range [1, n] sorted in lexicographical order.

You must write an algorithm that runs in O(n) time and uses O(1) extra space. 

 

Example 1:

Input: n = 13
Output: [1,10,11,12,13,2,3,4,5,6,7,8,9]
Example 2:

Input: n = 2
Output: [1,2]
 

Constraints:

1 <= n <= 5 * 104

class Solution
{
public:
    vector<int> lexicalOrder(int n)
    {
        vector<int> ans;
        for(int i = 1; i < 10; i++)
        {
            dfs(i, n, ans);
        }
        return ans;
    }
public:
    void dfs(int i, int n, vector<int> &ans)
    {
        if(i > n) return;
        ans.push_back(i);
        for(int j = 0; j < 10; j++)
        {
            dfs(i * 10 + j, n, ans);
        }
    }
};


// Source https://leetcode.com/problems/first-unique-character-in-a-string/

Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.

 

Example 1:

Input: s = "leetcode"
Output: 0
Example 2:

Input: s = "loveleetcode"
Output: 2
Example 3:

Input: s = "aabb"
Output: -1
 

Constraints:

1 <= s.length <= 105
s consists of only lowercase English letters.


class Solution
{
public:
    int firstUniqChar(string s)
    {
        int freq[26] = {0};
        for(char c : s)
            freq[c - 'a'] ++;

        for(int i = 0 ; i < s.size() ; i ++)
            if(freq[s[i] - 'a'] == 1)
                return i;

        return -1;
    }
};


// Source https://leetcode.com/problems/longest-absolute-file-path/

Suppose we have a file system that stores both files and directories. An example of one system is represented in the following picture:



Here, we have dir as the only directory in the root. dir contains two subdirectories, subdir1 and subdir2. subdir1 contains a file file1.ext and subdirectory subsubdir1. 
subdir2 contains a subdirectory subsubdir2, which contains a file file2.ext.

In text form, it looks like this (with ⟶ representing the tab character):

dir
⟶ subdir1
⟶ ⟶ file1.ext
⟶ ⟶ subsubdir1
⟶ subdir2
⟶ ⟶ subsubdir2
⟶ ⟶ ⟶ file2.ext
If we were to write this representation in code, it will look like this: "dir\n\tsubdir1\n\t\tfile1.ext\n\t\tsubsubdir1\n\tsubdir2\n\t\tsubsubdir2\n\t\t\tfile2.ext". 
Note that the '\n' and '\t' are the new-line and tab characters.

Every file and directory has a unique absolute path in the file system, which is the order of directories that must be opened to reach the file/directory itself, all concatenated by '/'s. 
Using the above example, the absolute path to file2.ext is "dir/subdir2/subsubdir2/file2.ext". Each directory name consists of letters, digits, and/or spaces. 
Each file name is of the form name.extension, where name and extension consist of letters, digits, and/or spaces.

Given a string input representing the file system in the explained format, return the length of the longest absolute path to a file in the abstracted file system. 
If there is no file in the system, return 0.

 

Example 1:


Input: input = "dir\n\tsubdir1\n\tsubdir2\n\t\tfile.ext"
Output: 20
Explanation: We have only one file, and the absolute path is "dir/subdir2/file.ext" of length 20.
Example 2:


Input: input = "dir\n\tsubdir1\n\t\tfile1.ext\n\t\tsubsubdir1\n\tsubdir2\n\t\tsubsubdir2\n\t\t\tfile2.ext"
Output: 32
Explanation: We have two files:
"dir/subdir1/file1.ext" of length 21
"dir/subdir2/subsubdir2/file2.ext" of length 32.
We return 32 since it is the longest absolute path to a file.
Example 3:

Input: input = "a"
Output: 0
Explanation: We do not have any files, just a single directory named "a".
 

Constraints:

1 <= input.length <= 104
input may contain lowercase or uppercase English letters, a new line character '\n', a tab character '\t', a dot '.', a space ' ', and digits.

class Solution
{
public:
    int lengthLongestPath(string input)
    {
        stack<int> st;
        int n = input.size();
        int tabs = 0;
        int curLen = 0;
        bool hasDot = false;
        int maxLen = 0;

        for(int i = 0; i < n; i++)
        {
            if(input[i] == '\t')
            {
                tabs++;
            }
            else if(input[i] == '\n')
            {
                int totalLen = curLen;

                if(!st.empty())
                {
                    totalLen += st.top();
                }

                if(hasDot)
                {
                    maxLen = max(maxLen, totalLen + (int)st.size());
                }

                st.push(totalLen);
                tabs = 0;
                curLen = 0;
                hasDot = false;
            }
            else
            {
                if(i >  0 && (input[i - 1] == '\t' || input[i - 1] == '\n'))
                {
                    while(st.size() > tabs)
                    {
                        st.pop();
                    }
                    tabs = 0;
                }

                curLen++;

                if(input[i] == '.')
                {
                    hasDot = true;
                }
            }
        }

        int totalLen = curLen;

        if(!st.empty())
        {
            totalLen += st.top();
        }

        if(hasDot)
        {
            maxLen = max(maxLen, totalLen + (int)st.size());
        }

        return maxLen;
    }
};


// Source https://leetcode.com/problems/find-the-difference/

You are given two strings s and t.

String t is generated by random shuffling string s and then add one more letter at a random position.

Return the letter that was added to t.

 

Example 1:

Input: s = "abcd", t = "abcde"
Output: "e"
Explanation: 'e' is the letter that was added.
Example 2:

Input: s = "", t = "y"
Output: "y"
 

Constraints:

0 <= s.length <= 1000
t.length == s.length + 1
s and t consist of lowercase English letters.

class Solution
{
public:
    char findTheDifference(string s, string t)
    {
        char res = 0;
        for (char c : s) res ^= c;
        for (char c : t) res ^= c;
        return res;
    }
};


// Source https://leetcode.com/problems/elimination-game/

You have a list arr of all integers in the range [1, n] sorted in a strictly increasing order. Apply the following algorithm on arr:

Starting from left to right, remove the first number and every other number afterward until you reach the end of the list.
Repeat the previous step again, but this time from right to left, remove the rightmost number and every other number from the remaining numbers.
Keep repeating the steps again, alternating left to right and right to left, until a single number remains.
Given the integer n, return the last number that remains in arr.

 

Example 1:

Input: n = 9
Output: 6
Explanation:
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]
arr = [2, 4, 6, 8]
arr = [2, 6]
arr = [6]

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
arr = [2, 4, 6, 8, 10]
arr = [4, 8]
arr = [8]

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
arr = [2, 4, 6, 8, 10]
arr = [4, 8]
arr = [8]

Example 2:

Input: n = 1
Output: 1
 

Constraints:

1 <= n <= 109

class Solution
{
public:
    int findOne(int start, int cnt, int dist, bool dir)
    {
        if(cnt == 1) return start;

        if(dir)
        {
            return findOne(start + dist, cnt / 2, 2 * dist, !dir);
        }

        if(cnt % 2 == 0)
        {
            return findOne(start, cnt / 2, 2 * dist, !dir);
        }

        return findOne(start + dist, cnt / 2, 2 * dist, !dir);
    }

    int lastRemaining(int n)
    {
        return findOne(1, n, 1, true);
    }
};


// Source https://leetcode.com/problems/perfect-rectangle/

Given an array rectangles where rectangles[i] = [xi, yi, ai, bi] represents an axis-aligned rectangle. The bottom-left point of the rectangle is (xi, yi) and the top-right point of it is (ai, bi).

Return true if all the rectangles together form an exact cover of a rectangular region.

 

Example 1:


Input: rectangles = [[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]]
Output: true
Explanation: All 5 rectangles together form an exact cover of a rectangular region.
Example 2:


Input: rectangles = [[1,1,2,3],[1,3,2,4],[3,1,4,2],[3,2,4,4]]
Output: false
Explanation: Because there is a gap between the two rectangular regions.
Example 3:


Input: rectangles = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[2,2,4,4]]
Output: false
Explanation: Because two of the rectangles overlap with each other.
 

Constraints:

1 <= rectangles.length <= 2 * 104
rectangles[i].length == 4
-105 <= xi, yi, ai, bi <= 105

class Solution
{
public:
    bool isRectangleCover(vector<vector<int>> &rectangles)
    {
        map<pair<int, int>, int> mark;
        for(vector<int> &v : rectangles)
        {
            mark[ {v[0], v[1]} ]++;
            mark[ {v[0], v[3]} ]--;
            mark[ {v[2], v[1]} ]--;
            mark[ {v[2], v[3]} ]++;
        }
        int n_mark = 0;
        for(auto ptr = mark.begin(); ptr != mark.end(); ptr++)
        {
            if(ptr->second != 0)
            {
                if(abs(ptr->second) != 1) return false;
                n_mark++;
            }
        }
        return n_mark == 4;
    }
};

// Source https://leetcode.com/problems/is-subsequence/

Given two strings s and t, return true if s is a subsequence of t, or false otherwise.

A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters 
without disturbing the relative positions of the remaining characters. (i.e., "ace" is a subsequence of "abcde" while "aec" is not).

 

Example 1:

Input: s = "abc", t = "ahbgdc"
Output: true
Example 2:

Input: s = "axc", t = "ahbgdc"
Output: false
 

Constraints:

0 <= s.length <= 100
0 <= t.length <= 104
s and t consist only of lowercase English letters.

class Solution
{
public:
    bool isSubsequence(string s, string t)
    {
        int n = s.length(), m = t.length();
        int i = 0;
        for (int j = 0; i < n && j < m; ++j)
        {
            if (s[i] == t[j]) ++i;
        }

        return i == n;
    }
};


// Source https://leetcode.com/problems/utf-8-validation/

Given an integer array data representing the data, return whether it is a valid UTF-8 encoding.

A character in UTF8 can be from 1 to 4 bytes long, subjected to the following rules:

For a 1-byte character, the first bit is a 0, followed by its Unicode code.
For an n-bytes character, the first n bits are all one's, the n + 1 bit is 0, followed by n - 1 bytes with the most significant 2 bits being 10.
This is how the UTF-8 encoding would work:

   Char. number range  |        UTF-8 octet sequence
      (hexadecimal)    |              (binary)
   --------------------+---------------------------------------------
   0000 0000-0000 007F | 0xxxxxxx
   0000 0080-0000 07FF | 110xxxxx 10xxxxxx
   0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx
   0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
Note: The input is an array of integers. Only the least significant 8 bits of each integer is used to store the data. This means each integer represents only 1 byte of data.

 

Example 1:

Input: data = [197,130,1]
Output: true
Explanation: data represents the octet sequence: 11000101 10000010 00000001.
It is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character.
Example 2:

Input: data = [235,140,4]
Output: false
Explanation: data represented the octet sequence: 11101011 10001100 00000100.
The first 3 bits are all one's and the 4th bit is 0 means it is a 3-bytes character.
The next byte is a continuation byte which starts with 10 and that's correct.
But the second continuation byte does not start with 10, so it is invalid.
 

Constraints:

1 <= data.length <= 2 * 104
0 <= data[i] <= 255

class Solution
{
public:

    bool solve(vector<int> &arr)
    {
        int i = 0;
        int n = arr.size();
        while (i < n)
        {
            uint32_t val = arr[i];
            uint32_t temp = 0;
            if((val >> 7) == 0b0)   // 1st byte of length char
            {
                ++i;
            }
            else if((val >> 5) == 0b110)   // 1st byte of 2 length char
            {
                if (i + 1 >= n) return false;
                temp = arr[i + 1];
                if((temp >> 6) != 0b10) return false;
                i += 2;
            }
            else if((val >> 4) == 0b1110)   // 1st byte of 3 length char
            {
                if (i + 2 >= n) return false;
                temp = arr[i + 1];
                if((temp >> 6) != 0b10) return false;
                temp = arr[i + 2];
                if((temp >> 6) != 0b10) return false;
                i += 3;
            }
            else if((val >> 3) == 0b11110)   // 1st byte of 4 length char
            {
                if (i + 3 >= n) return false;
                temp = arr[i + 1];
                if((temp >> 6) != 0b10) return false;
                temp = arr[i + 2];
                if((temp >> 6) != 0b10) return false;
                temp = arr[i + 3];
                if((temp >> 6) != 0b10) return false;
                i += 4;
            }
            else
            {
                return false;
            }
        }
        return true;
    }

    bool validUtf8(vector<int> &data)
    {
        return solve(data);
    }
};


// Source https://leetcode.com/problems/decode-string/

Given an encoded string, return its decoded string.

The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.

You may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc.

Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there will not be input like 3a or 2[4].

 

Example 1:

Input: s = "3[a]2[bc]"
Output: "aaabcbc"
Example 2:

Input: s = "3[a2[c]]"
Output: "accaccacc"
Example 3:

Input: s = "2[abc]3[cd]ef"
Output: "abcabccdcdcdef"
 

Constraints:

1 <= s.length <= 30
s consists of lowercase English letters, digits, and square brackets '[]'.
s is guaranteed to be a valid input.
All the integers in s are in the range [1, 300].

class Solution
{
public:
    string recur(string &s, int startPos, int endPos)
    {
        string ret;
        for (int i = startPos; i < endPos; ++i)
        {
            if (isdigit(s[i]))
            {
                int countNum = 0;
                while (isdigit(s[i]))
                {
                    countNum = (countNum * 10) + (s[i] - '0');
                    i++;
                }
                ++i;
                int left = 1;
                int pos = i;
                while (pos < endPos)
                {
                    if (s[pos] == '[') ++left;
                    if (s[pos] == ']') --left;
                    if (left == 0) break;
                    ++pos;
                }
                string temp = recur(s, i, pos);
                while (countNum -- > 0) ret.append(temp);
                i = pos;
            }
            else ret.push_back(s[i]);
        }
        return ret;
    }

    string decodeString(string s)
    {
        int n = s.length();
        return recur(s, 0, n);
    }
};


// Source https://leetcode.com/problems/longest-substring-with-at-least-k-repeating-characters/

Given a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is greater than or equal to k.

 

Example 1:

Input: s = "aaabb", k = 3
Output: 3
Explanation: The longest substring is "aaa", as 'a' is repeated 3 times.
Example 2:

Input: s = "ababbc", k = 2
Output: 5
Explanation: The longest substring is "ababb", as 'a' is repeated 2 times and 'b' is repeated 3 times.
 

Constraints:

1 <= s.length <= 104
s consists of only lowercase English letters.
1 <= k <= 105

class Solution
{
public:

    int recur(string &s, int startPos, int endPos, int k)
    {
        int len = endPos - startPos;
        if(len < k) return 0;
        int cntArr[26];
        memset(cntArr, 0, sizeof(cntArr));
        for (int i = startPos; i < endPos; ++i)
        {
            cntArr[s[i] - 'a']++;
        }
        int j = startPos;
        while(j < endPos && cntArr[s[j] - 'a'] >= k) j++;
        if(j >= endPos - 1) return j - startPos;
        int res1 = recur(s, startPos, j, k);
        while(j < endPos && cntArr[s[j] - 'a'] < k) j++;
        int res2 = recur(s, j, endPos, k);
        return max(res1, res2);
    }

    int longestSubstring(string s, int k)
    {
        int n = s.length();
        return recur(s, 0, n, k);
    }
};


// Source https://leetcode.com/problems/rotate-function/

You are given an integer array nums of length n.

Assume arrk to be an array obtained by rotating nums by k positions clock-wise. We define the rotation function F on nums as follow:

F(k) = 0 * arrk[0] + 1 * arrk[1] + ... + (n - 1) * arrk[n - 1].
Return the maximum value of F(0), F(1), ..., F(n-1).

The test cases are generated so that the answer fits in a 32-bit integer.

 

Example 1:

Input: nums = [4,3,2,6]
Output: 26
Explanation:
F(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25
F(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16
F(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23
F(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26

F(0) + sum - 4 * 6 = F(1)
F(1) + sum - 4 * 2 = F(2)
F(2) + sum - 4 * 3 = F(3)
F(3) + sum - 4 * 4 = F(0)

So the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26.
Example 2:

Input: nums = [100]
Output: 0
 

Constraints:

n == nums.length
1 <= n <= 105
-100 <= nums[i] <= 100

class Solution
{
public:
    int maxRotateFunction(vector<int> &nums)
    {
        int n = nums.size();
        int sum = 0, val = 0;
        for (int i = 0; i < n; i++)
        {
            sum += nums[i];
            val += (i * nums[i]);
        }
        int ans = val;
        for (int i = n - 1; i >= 0; --i)
        {
            val = (val + sum - n * nums[i]);
            ans = max(ans, val);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/integer-replacement/

Given a positive integer n, you can apply one of the following operations:

If n is even, replace n with n / 2.
If n is odd, replace n with either n + 1 or n - 1.
Return the minimum number of operations needed for n to become 1.

 

Example 1:

Input: n = 8
Output: 3
Explanation: 8 -> 4 -> 2 -> 1
Example 2:

Input: n = 7
Output: 4
Explanation: 7 -> 8 -> 4 -> 2 -> 1
or 7 -> 6 -> 3 -> 2 -> 1
Example 3:

Input: n = 4
Output: 2
 

Constraints:

1 <= n <= 231 - 1

Steps :

if n is even , Simply divide it by 2
if n is odd , we have to replace it by either n+1 or n-1 , which results in minimum number of operation. 
To decide this check which one of the following (n+1)/2 or (n-1)/2 results in even number , replace it by that operation.
Example :

3 -> 2 ->1 , ans = 2
4 -> 2 ->1 , ans = 2
10 -> 5 ->4 ->2->1 , ans = 4
11 -> 12 -> 6 ->3 ->2 ->1 , ans = 5
50 -> 25 ->24 ->12 -> 6->3 ->2->1 , ans = 7

class Solution
{
public:

    int integerReplacement(int num)
    {
        int op = 0;
        long long n = num;
        while(n > 1)
        {
            if(n == 3)
            {
                op = op + 2;
                break;
            }
            if(n % 2 == 0)
            {
                n = n >> 1;
            }
            else
            {
                if((n + 1) % 4 == 0)
                {
                    n = n + 1;
                }
                else
                {
                    n = n - 1;
                }
            }
            ++op;
        }

        return op;
    }
};


// Source https://leetcode.com/problems/random-pick-index/

Given an integer array nums with possible duplicates, randomly output the index of a given target number. You can assume that the given target number must exist in the array.

Implement the Solution class:

Solution(int[] nums) Initializes the object with the array nums.
int pick(int target) Picks a random index i from nums where nums[i] == target. If there are multiple valid i's, then each index should have an equal probability of returning.
 

Example 1:

Input
["Solution", "pick", "pick", "pick"]
[[[1, 2, 3, 3, 3]], [3], [1], [3]]
Output
[null, 4, 0, 2]

Explanation
Solution solution = new Solution([1, 2, 3, 3, 3]);
solution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.
solution.pick(1); // It should return 0. Since in the array only nums[0] is equal to 1.
solution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.
 

Constraints:

1 <= nums.length <= 2 * 104
-231 <= nums[i] <= 231 - 1
target is an integer from nums.
At most 104 calls will be made to pick.

class Solution
{
public:
    Solution(vector<int> &nums): v(nums) {}

    int pick(int target)
    {
        int cnt = 0, res = -1;
        for (int i = 0; i < v.size(); ++i)
        {
            if (v[i] != target) continue;
            ++cnt;
            if (rand() % cnt == 0) res = i;
        }
        return res;
    }
private:
    vector<int> v;
};


// Source https://leetcode.com/problems/evaluate-division/

You are given an array of variable pairs equations and an array of real numbers values, where equations[i] = [Ai, Bi] and values[i] represent the equation Ai / Bi = values[i]. 
Each Ai or Bi is a string that represents a single variable.

You are also given some queries, where queries[j] = [Cj, Dj] represents the jth query where you must find the answer for Cj / Dj = ?.

Return the answers to all queries. If a single answer cannot be determined, return -1.0.

Note: The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction.

 

Example 1:

Input: equations = [["a","b"],["b","c"]], values = [2.0,3.0], queries = [["a","c"],["b","a"],["a","e"],["a","a"],["x","x"]]
Output: [6.00000,0.50000,-1.00000,1.00000,-1.00000]
Explanation: 
Given: a / b = 2.0, b / c = 3.0
queries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ?
return: [6.0, 0.5, -1.0, 1.0, -1.0 ]
Example 2:

Input: equations = [["a","b"],["b","c"],["bc","cd"]], values = [1.5,2.5,5.0], queries = [["a","c"],["c","b"],["bc","cd"],["cd","bc"]]
Output: [3.75000,0.40000,5.00000,0.20000]
Example 3:

Input: equations = [["a","b"]], values = [0.5], queries = [["a","b"],["b","a"],["a","c"],["x","y"]]
Output: [0.50000,2.00000,-1.00000,-1.00000]
 

Constraints:

1 <= equations.length <= 20
equations[i].length == 2
1 <= Ai.length, Bi.length <= 5
values.length == equations.length
0.0 < values[i] <= 20.0
1 <= queries.length <= 20
queries[i].length == 2
1 <= Cj.length, Dj.length <= 5
Ai, Bi, Cj, Dj consist of lower case English letters and digits.

class Solution
{
public:
    string find(unordered_map<string, string> &parent, string &search)
    {
        if(parent[search] != search) parent[search] = find(parent, parent[search]);
        return parent[search];
    }
    void unionfind(unordered_map<string, string> &parent, string &first, string &second)
    {
        string root_first = find(parent, first);
        string root_second = find(parent, second);
        if (root_first == root_second) return;
        parent[root_first] = root_second;
    }
    bool PathExists(unordered_map<string, vector<pair<string, double>>> &graph, unordered_map<string, int> &visit, vector<double> &multiply, string &start, string &end)
    {
        if(start == end)
            return true;
        visit[start] = 1;
        for(auto &itr : graph[start])
        {
            if(visit[itr.first] == 0)
            {
                multiply.push_back(itr.second);
                if(PathExists(graph, visit, multiply, itr.first, end)) return true;
                multiply.pop_back();
            }
        }
        visit[start] = 0;
        return false;
    }
    vector<double> calcEquation(vector<vector<string>> &equations, vector<double> &values, vector<vector<string>> &queries)
    {
        unordered_map<string, string> parent;
        unordered_map<string, int> visit;
        unordered_map<string, vector<pair<string, double>>> graph;
        int k = 0;
        for(auto &itr : equations)
        {
            parent[itr[0]] = itr[0];
            parent[itr[1]] = itr[1];
            visit[itr[0]] = 0;
            visit[itr[1]] = 0;
            graph[itr[0]].push_back(make_pair(itr[1], values[k]));
            graph[itr[1]].push_back(make_pair(itr[0], 1 / values[k]));
            ++k;
        }
        for(auto &itr : equations)
        {
            unionfind(parent, itr[0], itr[1]);
        }
        vector<double> ans;
        for(auto &itr : queries)
        {
            if(parent.find(itr[0]) != parent.end() && parent.find(itr[1]) != parent.end() && find(parent, itr[0]) == find(parent, itr[1]))
            {
                vector<double> multiply;
                PathExists(graph, visit, multiply, itr[0], itr[1]);
                double step = 1.0;
                for(double val : multiply)
                    step *= val;
                ans.push_back(step);
            }
            else
            {
                ans.push_back(-1);
            }
            for(auto &p:visit)
                p.second = 0;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/nth-digit/

Given an integer n, return the nth digit of the infinite integer sequence [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...].

 

Example 1:

Input: n = 3
Output: 3
Example 2:

Input: n = 11
Output: 0
Explanation: The 11th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0, which is part of the number 10.
 

Constraints:

1 <= n <= 231 - 1

前九个数都是1位的，然后 10 到 99 总共 90 个数字都是两位的，100 到 999 这 900 个数都是三位的，
定义个变量 cnt，初始化为9，然后每次循环扩大10倍，再用一个变量 len 记录当前循环区间数字的位数，一个变量 start 记录当前循环区间的第一个数字

class Solution
{
public:
    int findNthDigit(int n)
    {
        long long len = 1, cnt = 9, start = 1;
        while (n > len * cnt)
        {
            n -= len * cnt;
            ++len;
            cnt *= 10;
            start *= 10;
        }
        start += (n - 1) / len;
        string t = to_string(start);
        return t[(n - 1) % len] - '0';
    }
};


// Source https://leetcode.com/problems/binary-watch/

A binary watch has 4 LEDs on the top which represent the hours (0-11), and the 6 LEDs on the bottom represent the minutes (0-59). 
Each LED represents a zero or one, with the least significant bit on the right.

For example, the below binary watch reads "4:51".

H   8	[4]	2	1			PM
M   [32]	[16]	8	4	[2]	[1]

Given an integer turnedOn which represents the number of LEDs that are currently on, return all possible times the watch could represent. You may return the answer in any order.

The hour must not contain a leading zero.

For example, "01:00" is not valid. It should be "1:00".
The minute must be consist of two digits and may contain a leading zero.

For example, "10:2" is not valid. It should be "10:02".
 

Example 1:

Input: turnedOn = 1
Output: ["0:01","0:02","0:04","0:08","0:16","0:32","1:00","2:00","4:00","8:00"]
Example 2:

Input: turnedOn = 9
Output: []
 

Constraints:

0 <= turnedOn <= 10

class Solution
{
public:
   vector <string> ans;

    vector <string> readBinaryWatch(int turnedOn)
    {
        vector<int> num = {8, 4, 2, 1, 32, 16, 8, 4, 2, 1};
        process(num, 0, 0, 0, turnedOn, 0);
        return ans;
    }

    void process(vector<int> &num, int index, int h, int m, int turnedOn, int cnt)
    {
        if (h >= 12 || m >= 60) return;
        if (cnt > turnedOn) return;
        if (cnt == turnedOn)
        {
            string tmp = to_string(h);
            tmp += ":";
            if (m < 10)
            {
                tmp += "0";
            }
            tmp += to_string(m);
            ans.push_back(tmp);
            return;
        }

        if (index >= 10)
        {
            return;
        }

        process(num, index + 1, h, m, turnedOn, cnt);
        int val = num[index];
        if (index <= 3)
        {
            process(num, index + 1, h + val, m, turnedOn, cnt + 1);
        }
        else if (index > 3)
        {
            process(num, index + 1, h, m + val, turnedOn, cnt + 1);
        }
    }
};


// Source https://leetcode.com/problems/remove-k-digits/

Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.

 

Example 1:

Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.
Example 2:

Input: num = "10200", k = 1
Output: "200"
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.
Example 3:

Input: num = "10", k = 2
Output: "0"
Explanation: Remove all the digits from the number and it is left with nothing which is 0.
 

Constraints:

1 <= k <= num.length <= 105
num consists of only digits.
num does not have any leading zeros except for the zero itself.

class Solution
{
public:

    string removeKdigits(string num, int k)
    {
        string stk;
        for(char c : num)
        {
            while(!stk.empty() && k > 0 && stk.back() > c)
            {
                stk.pop_back();
                k--;
            }
            stk.push_back(c);
        }
        while(k > 0)   //then stk is non-decreasing
        {
            stk.pop_back();
            k--;
        }
        int i = 0;
        while(i < stk.size() && stk[i] == '0') i++;
        if (i == stk.size()) return "0";
        return stk.substr(i);
    }
};


// Source https://leetcode.com/problems/frog-jump/

A frog is crossing a river. The river is divided into some number of units, and at each unit, there may or may not exist a stone. 
The frog can jump on a stone, but it must not jump into the water.

Given a list of stones' positions (in units) in sorted ascending order, determine if the frog can cross the river by landing on the last stone. 
Initially, the frog is on the first stone and assumes the first jump must be 1 unit.

If the frog's last jump was k units, its next jump must be either k - 1, k, or k + 1 units. The frog can only jump in the forward direction.

 

Example 1:

Input: stones = [0,1,3,5,6,8,12,17]
Output: true
Explanation: The frog can jump to the last stone by jumping 1 unit to the 2nd stone, then 2 units to the 3rd stone, then 2 units to the 4th stone, then 3 units to the 6th stone, 4 units to the 7th stone, and 5 units to the 8th stone.
Example 2:

Input: stones = [0,1,2,3,4,8,9,11]
Output: false
Explanation: There is no way to jump to the last stone as the gap between the 5th and 6th stone is too large.
 

Constraints:

2 <= stones.length <= 2000
0 <= stones[i] <= 231 - 1
stones[0] == 0
stones is sorted in a strictly increasing order.

class Solution
{
public:
    int n;
    map<int, int> m;
    vector<vector<int>> dp;

    bool recur(vector<int> &stones, int pos, int jump)
    {
        if (pos == n - 1) return true;
        if (jump <= 0) return false;
        if (dp[pos][jump] != -1) return dp[pos][jump];
        if (m.find(stones[pos] + jump) == m.end()) return false;
        bool res = false;
        int nextPos = m[stones[pos] + jump];
        for (int i = -1; i <= 1 && !res; ++i)
        {
            res = recur(stones, nextPos, jump + i);
        }
        return dp[pos][jump] = res;
    }

    bool canCross(vector<int> &stones)
    {
        n = stones.size();
        for(int i = 0; i < n; i++)
            m[stones[i]] = i;

        dp = vector<vector<int>>(n + 1, vector<int>(n + 1, -1));
        return recur(stones, 0, 1);
    }
};


// Source https://leetcode.com/problems/sum-of-left-leaves/

Given the root of a binary tree, return the sum of all left leaves.

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: 24
Explanation: There are two left leaves in the binary tree, with values 9 and 15 respectively.
Example 2:

Input: root = [1]
Output: 0
 

Constraints:

The number of nodes in the tree is in the range [1, 1000].
-1000 <= Node.val <= 1000

class Solution
{
private:
    int ans = 0;

    void dfs(TreeNode *root, bool isLeft)
    {
        if(root == nullptr) return;
        if(root->left == nullptr && root->right == nullptr && isLeft) ans += root->val;
        dfs(root->left, true);
        dfs(root->right, false);
    }
public:
    int sumOfLeftLeaves(TreeNode *root)
    {
        if(root == nullptr) return 0;
        dfs(root, false);
        return ans;
    }
};


// Source https://leetcode.com/problems/convert-a-number-to-hexadecimal/

Given an integer num, return a string representing its hexadecimal representation. 
For negative integers, two’s complement method is used.

All the letters in the answer string should be lowercase characters, and there should not be any leading zeros in the answer except for the zero itself.

Note: You are not allowed to use any built-in library method to directly solve this problem.

 

Example 1:

Input: num = 26
Output: "1a"
Example 2:

Input: num = -1
Output: "ffffffff"
 

Constraints:

-231 <= num <= 231 - 1

class Solution
{
public:
    string toHex(int num)
    {
        char arr[16] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
        string ans;
        for (int i = 28; i >= 0; i -= 4)
        {
            ans.push_back(arr[(num >> i) & 0xF]);
        }
        int len = ans.length();
        int i = 0;
        for (; i < len && ans[i] == '0'; ++i);
        if (i == len) return "0";
        return ans.substr(i);
    }
};


// Source https://leetcode.com/problems/queue-reconstruction-by-height/

You are given an array of people, people, which are the attributes of some people in a queue (not necessarily in order). 
Each people[i] = [hi, ki] represents the ith person of height hi with exactly ki other people in front who have a height greater than or equal to hi.

Reconstruct and return the queue that is represented by the input array people. 
The returned queue should be formatted as an array queue, where queue[j] = [hj, kj] is the attributes of the jth person in the queue (queue[0] is the person at the front of the queue).

 

Example 1:

Input: people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]
Output: [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]
Explanation:
Person 0 has height 5 with no other people taller or the same height in front.
Person 1 has height 7 with no other people taller or the same height in front.
Person 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1.
Person 3 has height 6 with one person taller or the same height in front, which is person 1.
Person 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3.
Person 5 has height 7 with one person taller or the same height in front, which is person 1.
Hence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue.
Example 2:

Input: people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]
Output: [[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]
 

Constraints:

1 <= people.length <= 2000
0 <= hi <= 106
0 <= ki < people.length
It is guaranteed that the queue can be reconstructed.

按照高度hi从高到低进行处理，相同高度hi的若干个people按照ki从小到大处理

class Solution
{
public:
    vector<vector<int>> reconstructQueue(vector<vector<int>> &people)
    {
        if(people.size() < 2) return people;
        vector<vector<int>> ans;
        map<int, vector<int>> heights;
        for(int i = 0; i < people.size(); i++)
            heights[people[i][0]].push_back(people[i][1]);

        for(auto rit = heights.rbegin(); rit != heights.rend(); ++rit)
        {
            sort(rit->second.begin(), rit->second.end());
            for(int i = 0; i < rit->second.size(); i++)
                ans.insert(ans.begin() + rit->second[i], {rit->first, rit->second[i]});
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/trapping-rain-water-ii/

Given an m x n integer matrix heightMap representing the height of each unit cell in a 2D elevation map, return the volume of water it can trap after raining.

 

Example 1:


Input: heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]
Output: 4
Explanation: After the rain, water is trapped between the blocks.
We have two small ponds 1 and 3 units trapped.
The total volume of water trapped is 4.
Example 2:


Input: heightMap = [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]
Output: 10
 

Constraints:

m == heightMap.length
n == heightMap[i].length
1 <= m, n <= 200
0 <= heightMap[i][j] <= 2 * 104

class Solution
{
public:
    int trapRainWater(vector<vector<int>> &heightMap)
    {
        typedef pair<int, int> cell;
        priority_queue <cell, vector<cell>, greater<cell>> pq; // min priority queue
        int n, m;
        n = heightMap.size();
        m = heightMap[0].size();
        int vis[n][m]; // to keep the status of vistited cells
        memset(vis, 0, sizeof(vis));
        // adding boundary cells to the queue
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                if(i == 0 || i == n - 1 || j == 0 || j == m - 1)
                {
                    pq.push({heightMap[i][j], i * m + j});
                    vis[i][j] = 1;
                }
            }
        }
        int dir[4][2] = {{0, -1}, {0, 1}, {1, 0}, {-1, 0}};
        int vol = 0; // stores the water volume sum
        int r, c, x, y;
        while(!pq.empty())
        {
            cell front = pq.top();
            pq.pop();
            r = front.second / m;
            c = front.second % m;
            for(int i = 0; i < 4; i++)
            {
                x = r + dir[i][0];
                y = c + dir[i][1];
                if(x < n && x >= 0 && y < m && y >= 0 && vis[x][y] == 0)
                {
                    vis[x][y] = 1;
                    vol += max(0, front.first - heightMap[x][y]);
                    pq.push({max(front.first, heightMap[x][y]), x * m + y});
                }
            }
        }
        return vol;
    }
};


// Source https://leetcode.com/problems/longest-palindrome/

Given a string s which consists of lowercase or uppercase letters, return the length of the longest palindrome that can be built with those letters.

Letters are case sensitive, for example, "Aa" is not considered a palindrome here.

 

Example 1:

Input: s = "abccccdd"
Output: 7
Explanation:
One longest palindrome that can be built is "dccaccd", whose length is 7.
Example 2:

Input: s = "a"
Output: 1
Example 3:

Input: s = "bb"
Output: 2
 

Constraints:

1 <= s.length <= 2000
s consists of lowercase and/or uppercase English letters only.

class Solution
{
public:
    int longestPalindrome(string s)
    {
        int res = 0, isodd = 0;
        map<char, int> mp;
        for(int i = 0; i < s.size(); i++)
            mp[s[i]]++;
        for(auto x : mp)
        {
            if(x.second > 1 && x.second % 2 == 0)
                res += x.second;
            else if(x.second > 1 && x.second % 2 != 0)
            {
                res += x.second - 1;
                isodd++;
            }
            else
                isodd++;
        };
        if(isodd > 0)
            res += 1;

        return res > 1 ? res : 1;
    }
};


// Source https://leetcode.com/problems/split-array-largest-sum/

Given an array nums which consists of non-negative integers and an integer m, you can split the array into m non-empty continuous subarrays.

Write an algorithm to minimize the largest sum among these m subarrays.

 

Example 1:

Input: nums = [7,2,5,10,8], m = 2
Output: 18
Explanation:
There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8],
where the largest sum among the two subarrays is only 18.
Example 2:

Input: nums = [1,2,3,4,5], m = 2
Output: 9
Example 3:

Input: nums = [1,4,4], m = 3
Output: 4
 

Constraints:

1 <= nums.length <= 1000
0 <= nums[i] <= 106
1 <= m <= min(50, nums.length)

class Solution
{
public:
    int splitArray(vector<int> &nums, int m)
    {
        long long l = 0, r = findMax(nums) * nums.size();
        while (l < r)
        {
            long long mid = (l + r) / 2;
            if (helper(nums, m - 1, mid))
            {
                r = mid;
            }
            else
            {
                l = mid + 1;
            }
        }
        return l;
    }

private:
    int findMax(vector<int> &nums)
    {
        int ans = INT_MIN;
        for (int num : nums)
        {
            ans = max(ans, num);
        }
        return ans;
    }

    bool helper(vector<int> &nums, int cut, int max_sum)
    {
        int local = 0;
        for (int num : nums)
        {
            if (num > max_sum)
                return false;
            local += num;

            if (local > max_sum)
            {
                cut--;
                local = num;
            }

            if (cut < 0)
                return false;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/fizz-buzz/

Given an integer n, return a string array answer (1-indexed) where:

answer[i] == "FizzBuzz" if i is divisible by 3 and 5.
answer[i] == "Fizz" if i is divisible by 3.
answer[i] == "Buzz" if i is divisible by 5.
answer[i] == i (as a string) if none of the above conditions are true.
 

Example 1:

Input: n = 3
Output: ["1","2","Fizz"]
Example 2:

Input: n = 5
Output: ["1","2","Fizz","4","Buzz"]
Example 3:

Input: n = 15
Output: ["1","2","Fizz","4","Buzz","Fizz","7","8","Fizz","Buzz","11","Fizz","13","14","FizzBuzz"]
 

Constraints:

1 <= n <= 104

class Solution
{
public:
    vector<string> fizzBuzz(int n)
    {
        vector<string> v;
        for(int i = 1; i <= n; i++)
        {
            if(i % 3 == 0 && i % 5 == 0)
            {
                v.push_back("FizzBuzz");
            }
            else if(i % 3 == 0)
            {
                v.push_back("Fizz");
            }
            else if(i % 5 == 0)
            {
                v.push_back("Buzz");
            }
            else
            {
                v.push_back(to_string(i));
            }
        }
        return v;
    }
};


// Source https://leetcode.com/problems/arithmetic-slices/

An integer array is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.

For example, [1,3,5,7,9], [7,7,7,7], and [3,-1,-5,-9] are arithmetic sequences.
Given an integer array nums, return the number of arithmetic subarrays of nums.

A subarray is a contiguous subsequence of the array.

 

Example 1:

Input: nums = [1,2,3,4]
Output: 3
Explanation: We have 3 arithmetic slices in nums: [1, 2, 3], [2, 3, 4] and [1,2,3,4] itself.
Example 2:

Input: nums = [1]
Output: 0
 

Constraints:

1 <= nums.length <= 5000
-1000 <= nums[i] <= 1000

class Solution
{
public:
    int numberOfArithmeticSlices(vector<int> &nums)
    {
        if(nums.size() < 3)
            return 0;

        int cnt = 0, diff;

        for(int i = 0; i < nums.size() - 2; ++i)
        {
            diff = nums[i + 1] - nums[i];

            for(int j = i + 2; j < nums.size(); ++j)
            {
                if(nums[j] - nums[j - 1] == diff)
                    ++cnt;
                else
                    break;
            }
        }
        return cnt;
    }
};


// Source https://leetcode.com/problems/third-maximum-number/

Given an integer array nums, return the third distinct maximum number in this array. If the third maximum does not exist, return the maximum number.

 

Example 1:

Input: nums = [3,2,1]
Output: 1
Explanation:
The first distinct maximum is 3.
The second distinct maximum is 2.
The third distinct maximum is 1.
Example 2:

Input: nums = [1,2]
Output: 2
Explanation:
The first distinct maximum is 2.
The second distinct maximum is 1.
The third distinct maximum does not exist, so the maximum (2) is returned instead.
Example 3:

Input: nums = [2,2,3,1]
Output: 1
Explanation:
The first distinct maximum is 3.
The second distinct maximum is 2 (both 2's are counted together since they have the same value).
The third distinct maximum is 1.
 

Constraints:

1 <= nums.length <= 104
-231 <= nums[i] <= 231 - 1

class Solution
{
public:
    int thirdMax(vector<int> &nums)
    {
        sort(nums.begin(), nums.end());
        int n = nums.size();
        int count = 0;
        for(int i = n - 1; i > 0; i--)
        {
            if(nums[i] > nums[i - 1])
            {
                count++;
            }
            if(count == 2)
            {
                return nums[i - 1];
            }
        }
        return nums[n - 1];
    }
};


// Source https://leetcode.com/problems/add-strings/

Given two non-negative integers, num1 and num2 represented as string, return the sum of num1 and num2 as a string.

You must solve the problem without using any built-in library for handling large integers (such as BigInteger). You must also not convert the inputs to integers directly.

 

Example 1:

Input: num1 = "11", num2 = "123"
Output: "134"
Example 2:

Input: num1 = "456", num2 = "77"
Output: "533"
Example 3:

Input: num1 = "0", num2 = "0"
Output: "0"
 

Constraints:

1 <= num1.length, num2.length <= 104
num1 and num2 consist of only digits.
num1 and num2 don't have any leading zeros except for the zero itself.

class Solution
{
public:
    string addStrings(string s1, string s2)
    {
        int l1 = s1.length() - 1, l2 = s2.length() - 1;
        int carry = 0;
        string res = "";
        while(l1 >= 0 || l2 >= 0)
        {
            int sum = 0;
            if(l1 >= 0 && l2 >= 0)
            {
                int x = s1[l1] - '0', y = s2[l2] - '0';
                sum = carry + x + y;
                l1--, l2--;
            }
            else if(l1 >= 0)
            {
                int x = s1[l1] - '0';
                sum = carry + x;
                l1--;
            }
            else if(l2 >= 0)
            {
                int x = s2[l2] - '0';
                sum = carry + x;
                l2--;
            }
            res += to_string(sum % 10);
            carry = sum / 10;
        }
        if(carry > 0)
            res += to_string(carry);

        reverse(res.begin(), res.end());
        return res;
    }
};


// Source https://leetcode.com/problems/partition-equal-subset-sum/

Given a non-empty array nums containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.

 

Example 1:

Input: nums = [1,5,11,5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].
Example 2:

Input: nums = [1,2,3,5]
Output: false
Explanation: The array cannot be partitioned into equal sum subsets.
 

Constraints:

1 <= nums.length <= 200
1 <= nums[i] <= 100

class Solution
{
public:
    int n;
    int dp[201][10001];

    bool recur(vector<int> &nums, int idx, int target, int sum)
    {
        if (sum > target) return false;
        if (sum == target) return true;
        if (idx >= n) return false;
        if(dp[idx][sum] != -1) return dp[idx][sum];
        bool res = false;
        res = recur(nums, idx + 1, target, sum + nums[idx]);
        if (!res) res = recur(nums, idx + 1, target, sum);
        return dp[idx][sum] = res;
    }

    bool canPartition(vector<int> &nums)
    {
        n = nums.size();
        int total = 0;
        for(auto x : nums) total += x;
        if(total & 1) return false;
        memset(dp, -1, sizeof(dp));
        int target = total / 2;
        return recur(nums, 0, target, 0);
    }
};


// Source https://leetcode.com/problems/pacific-atlantic-water-flow/

There is an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean. 
The Pacific Ocean touches the island's left and top edges, and the Atlantic Ocean touches the island's right and bottom edges.

The island is partitioned into a grid of square cells. You are given an m x n integer matrix heights where heights[r][c] represents the height above sea level of the cell at coordinate (r, c).

The island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell's height is less than or equal to the current cell's height. 
Water can flow from any cell adjacent to an ocean into the ocean.

Return a 2D list of grid coordinates result where result[i] = [ri, ci] denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.

 

Example 1:


Input: heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]
Output: [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]
Example 2:

Input: heights = [[2,1],[1,2]]
Output: [[0,0],[0,1],[1,0],[1,1]]
 

Constraints:

m == heights.length
n == heights[r].length
1 <= m, n <= 200
0 <= heights[r][c] <= 105

class Solution
{
public:
    int m;
    int n;

    void dfs(vector<vector<int>> &h, int i, int j, vector<vector<bool>> &vis)
    {
        if(i < 0 || j < 0 || i >= m || j >= n || vis[i][j] == true) return;
        vis[i][j] = true;
        if(i + 1 < m && h[i][j] <= h[i + 1][j])
            dfs(h, i + 1, j, vis);
        if(i - 1 >= 0 && h[i][j] <= h[i - 1][j])
            dfs(h, i - 1, j, vis);
        if(j + 1 < n && h[i][j] <= h[i][j + 1])
            dfs(h, i, j + 1, vis);
        if(j - 1 >= 0 && h[i][j] <= h[i][j - 1])
            dfs(h, i, j - 1, vis);
    }

    vector<vector<int>> pacificAtlantic(vector<vector<int>> &h)
    {
        m = h.size();
        n = h[0].size();

        vector<vector<bool>> pacific(m, vector<bool>(n, false));
        //top pacific ocean
        for(int j = 0; j < n; j++)
        {
            dfs(h, 0, j, pacific);
        }

        //left pacific ocean
        for(int i = 0; i < m; i++)
        {
            dfs(h, i, 0, pacific);
        }

        vector<vector<bool>> atlantic(m, vector<bool>(n, false));
        //right atlantic ocean;
        for(int i = 0; i < m; i++)
        {
            dfs(h, i, n - 1, atlantic);
        }

        //bottom atlantic ocean
        for(int j = 0; j < n; j++)
        {
            dfs(h, m - 1, j, atlantic);
        }

        vector<vector<int>> ans;
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(pacific[i][j] == true && atlantic[i][j] == true) ans.push_back({i, j});
            }
        }

        return ans;
    }
};


// Source https://leetcode.com/problems/battleships-in-a-board/

Given an m x n matrix board where each cell is a battleship 'X' or empty '.', return the number of the battleships on board.

Battleships can only be placed horizontally or vertically on board. In other words, they can only be made of the shape 1 x k (1 row, k columns) or k x 1 (k rows, 1 column), 
where k can be of any size. At least one horizontal or vertical cell separates between two battleships (i.e., there are no adjacent battleships).

 

Example 1:


Input: board = [["X",".",".","X"],[".",".",".","X"],[".",".",".","X"]]
Output: 2
Example 2:

Input: board = [["."]]
Output: 0
 

Constraints:

m == board.length
n == board[i].length
1 <= m, n <= 200
board[i][j] is either '.' or 'X'.

class Solution
{
public:
    int countBattleships(vector<vector<char>> &board)
    {
        int m = board.size(), n = board[0].size(), ans = 0;
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(board[i][j] == 'X' && (i - 1 < 0 || i - 1 >= 0 && board[i - 1][j] == '.') && (j - 1 < 0 || j - 1 >= 0 && board[i][j - 1] == '.'))
                    ans++;
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/strong-password-checker/

A password is considered strong if the below conditions are all met:

It has at least 6 characters and at most 20 characters.
It contains at least one lowercase letter, at least one uppercase letter, and at least one digit.
It does not contain three repeating characters in a row (i.e., "...aaa..." is weak, but "...aa...a..." is strong, assuming other conditions are met).
Given a string password, return the minimum number of steps required to make password strong. if password is already strong, return 0.

In one step, you can:

Insert one character to password,
Delete one character from password, or
Replace one character of password with another character.
 

Example 1:

Input: password = "a"
Output: 5
Example 2:

Input: password = "aA1"
Output: 3
Example 3:

Input: password = "1337C0d3"
Output: 0
 

Constraints:

1 <= password.length <= 50
password consists of letters, digits, dot '.' or exclamation mark '!'.

class Solution 
{
public:
    int strongPasswordChecker(string password) 
    {
        int start = 0, end = 0, n = password.size(), modify = 0, count[]{0, 0, 0}, c = 0, len = 0, need = 0, remove = 0, num = 1, lower = 1, upper = 1;
        while (end < n) 
        {
            c = password[end];
            if (c >= '0' and c <= '9') num = 0;
            if (c >= 'a' and c <= 'z') lower = 0;
            if (c >= 'A' and c <= 'Z') upper = 0;
            while (end < n && password[end] == c) ++end;
            len = end - start;
            if (len > 2) 
            {
                modify += len / 3; // 每3个重复字符替换最右边的重复字符为其他字符
                ++count[len % 3];
            }
            start = end;
        }
        need = num + lower + upper;
        // 只通过insert来满足要求
        // 0次或1次insert满足重复字符的相关要求
        // 6 - n次insert满足长度要求
        // need次insert满足大写、小写、数字要求
        if (n < 6) return max(6 - n, need);
        // 只通过replace来满足要求
        // modify次repalce满足重复字符的相关要求
        // need次repalce满足大写、小写、数字要求
        if (n <= 20) return max(modify, need);
        // 通过若干次delete和replace来满足要求
        // remove次delete
        // 若干次replace，注意可以delete若干重复字符来减少replace的次数
        remove = n - 20;
        n = remove;
        if (remove < count[0]) return max(modify - remove, need) + n;
        remove -= count[0];
        modify -= count[0];
        if (remove < (count[1] * 2)) return max(modify - (remove/2), need) + n;
        remove -= (count[1] * 2);
        modify -= count[1];
        if (remove < (modify * 3)) return max(modify - (remove / 3), need) + n;
        return need + n;
    }
};


// Source https://leetcode.com/problems/maximum-xor-of-two-numbers-in-an-array/

Given an integer array nums, return the maximum result of nums[i] XOR nums[j], where 0 <= i <= j < n.

 

Example 1:

Input: nums = [3,10,5,25,2,8]
Output: 28
Explanation: The maximum result is 5 XOR 25 = 28.
Example 2:

Input: nums = [14,70,53,83,49,91,36,80,92,51,66,70]
Output: 127
 

Constraints:

1 <= nums.length <= 2 * 105
0 <= nums[i] <= 231 - 1

class TrieNode
{
public:
    TrieNode *child[2];

    TrieNode()
    {
        this->child[0] = NULL;
        this->child[1] = NULL;
    }
};

class Solution
{
    TrieNode *rootNode;

    void insert(int x)
    {
        TrieNode *curr = rootNode;
        bitset<32> bs(x);

        for(int j = 31; j >= 0; j--)
        {
            if(!curr->child[bs[j]])
            {
                curr->child[bs[j]] = new TrieNode();
            }
            curr = curr->child[bs[j]];
        }
    }

public:
    int findMaximumXOR(vector<int> &nums)
    {
        rootNode = new TrieNode();
        int ans = 0; //Stores the maximum XOR possible so far
        for(auto n : nums)
        {
            insert(n);
            ans = max(ans, maxXOR(n));  //updates the ans as we traverse the array & compute max XORs at each element.
        }
        return ans;
    }

    int maxXOR(int n)
    {
        TrieNode *curr = rootNode;
        bitset<32> bs(n);
        int ans = 0;
        for(int j = 31; j >= 0; j--)
        {
            if(curr->child[!bs[j]]) { ans += (1 << j); curr = curr->child[!bs[j]]; }
            else curr = curr->child[bs[j]];
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/reconstruct-original-digits-from-english/

Given a string s containing an out-of-order English representation of digits 0-9, return the digits in ascending order.

zero   z 独有
one
two    w 独有
three
four   u 独有
five
six     x 独有
seven
eight   g 独有
nine

Example 1:

Input: s = "owoztneoer"
Output: "012"
Example 2:

Input: s = "fviefuro"
Output: "45"
 

Constraints:

1 <= s.length <= 105
s[i] is one of the characters ["e","g","f","i","h","o","n","s","r","u","t","w","v","x","z"].
s is guaranteed to be valid.

class Solution
{
public:
    string originalDigits(string s)
    {
        vector<int> freq(128, 0);
        for(char c : s)
        {
            freq[c]++;
        }

        vector<int> count(10, 0);
        count[0] = freq['z'];
        count[2] = freq['w'];
        count[4] = freq['u'];
        count[6] = freq['x'];
        count[8] = freq['g'];

        count[1] = freq['o'] - count[0] - count[2] - count[4];
        count[5] = freq['f'] - count[4];
        count[7] = freq['v'] - count[5];
        count[3] = freq['h'] - count[8];
        count[9] = freq['i'] - count[5] - count[6] - count[8];

        string output;
        for(int i = 0; i < 10; i++)
        {
            if (count[i] > 0)
            {
                output.append(count[i], i + '0');
            }
        }
        return output;
    }
};


// Source https://leetcode.com/problems/longest-repeating-character-replacement/

You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.

Return the length of the longest substring containing the same letter you can get after performing the above operations.

 

Example 1:

Input: s = "ABAB", k = 2
Output: 4
Explanation: Replace the two 'A's with two 'B's or vice versa.
Example 2:

Input: s = "AABABBA", k = 1
Output: 4
Explanation: Replace the one 'A' in the middle with 'B' and form "AABBBBA".
The substring "BBBB" has the longest repeating letters, which is 4.
 

Constraints:

1 <= s.length <= 105
s consists of only uppercase English letters.
0 <= k <= s.length

class Solution
{
public:

    int characterReplacement(string s, int k)
    {
        int n = s.size();
        unordered_map<char, int>m;
        int i = 0, j = 0, mxFreq = 0, res = 0;
        while(j < n)
        {
            m[s[j]]++;
            mxFreq = max(mxFreq, m[s[j]]);

            while(j - i + 1 - mxFreq > k)
            {
                m[s[i]]--;
                i++;
            }
            res = max(res, j - i + 1);
            j++;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/construct-quad-tree/

Given a n * n matrix grid of 0's and 1's only. We want to represent the grid with a Quad-Tree.

Return the root of the Quad-Tree representing the grid.

Notice that you can assign the value of a node to True or False when isLeaf is False, and both are accepted in the answer.

A Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:

val: True if the node represents a grid of 1's or False if the node represents a grid of 0's.
isLeaf: True if the node is leaf node on the tree or False if the node has the four children.
class Node {
    public boolean val;
    public boolean isLeaf;
    public Node topLeft;
    public Node topRight;
    public Node bottomLeft;
    public Node bottomRight;
}
We can construct a Quad-Tree from a two-dimensional area using the following steps:

If the current grid has the same value (i.e all 1's or all 0's) set isLeaf True and set val to the value of the grid and set the four children to Null and stop.
If the current grid has different values, set isLeaf to False and set val to any value and divide the current grid into four sub-grids as shown in the photo.
Recurse for each of the children with the proper sub-grid.

If you want to know more about the Quad-Tree, you can refer to the wiki.

Quad-Tree format:

The output represents the serialized format of a Quad-Tree using level order traversal, where null signifies a path terminator where no node exists below.

It is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list [isLeaf, val].

If the value of isLeaf or val is True we represent it as 1 in the list [isLeaf, val] and if the value of isLeaf or val is False we represent it as 0.

 

Example 1:


Input: grid = [[0,1],[1,0]]
Output: [[0,1],[1,0],[1,1],[1,1],[1,0]]
Explanation: The explanation of this example is shown below:
Notice that 0 represnts False and 1 represents True in the photo representing the Quad-Tree.

Example 2:



Input: grid = [[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0]]
Output: [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]
Explanation: All values in the grid are not the same. We divide the grid into four sub-grids.
The topLeft, bottomLeft and bottomRight each has the same value.
The topRight have different values so we divide it into 4 sub-grids where each has the same value.
Explanation is shown in the photo below:

 

Constraints:

n == grid.length == grid[i].length
n == 2^x where 0 <= x <= 6

class Solution
{
public:
    Node *recur(vector<vector<int>> &grid, int row_start, int row_end, int col_start, int col_end, int len)
    {
        int sum = 0;
        for(int i = row_start; i < row_end; i++)
        {
            for(int j = col_start; j < col_end; j++)
            {
                sum += grid[i][j];
            }
        }
        Node *ans;
        if(sum == 0)
            ans = new Node(false, true); // Node(bool _val, bool _isLeaf)
        else if(sum == (len * len))
            ans = new Node(true, true); // Node(bool _val, bool _isLeaf)
        else
        {
            ans = new Node(false, false);
            len = len / 2;
            ans->topLeft = recur(grid, row_start, row_start + len, col_start, col_start + len, len);
            ans->topRight = recur(grid, row_start, row_start + len, col_start + len, col_end, len);
            ans->bottomLeft = recur(grid, row_start + len, row_end, col_start, col_start + len, len);
            ans->bottomRight = recur(grid, row_start + len, row_end, col_start + len, col_end, len);
        }
        return ans;
    }
    Node *construct(vector<vector<int>> &grid)
    {
        int n = grid.size();
        return recur(grid, 0, n, 0, n, n);
    }
};


// Source https://leetcode.com/problems/n-ary-tree-level-order-traversal/

Given an n-ary tree, return the level order traversal of its nodes' values.

Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).

 

Example 1:



Input: root = [1,null,3,2,4,null,5,6]
Output: [[1],[3,2,4],[5,6]]
Example 2:



Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
Output: [[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]
 

Constraints:

The height of the n-ary tree is less than or equal to 1000
The total number of nodes is between [0, 104]

class Solution
{
public:
    vector<vector<int>> levelOrder(Node *root)
    {
        vector<vector<int>> ans;
        if(!root) return ans;
        queue<Node *> q;
        q.push(root);
        while(!q.empty())
        {
            int s = q.size();
            vector<int> level;
            for(int i = 0; i < s; i++)
            {
                Node *node = q.front();
                q.pop();
                level.push_back(node->val);
                for(auto x : node->children)
                    q.push(x);
            }
            ans.push_back(level);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/flatten-a-multilevel-doubly-linked-list/

You are given a doubly linked list, which contains nodes that have a next pointer, a previous pointer, and an additional child pointer. 
This child pointer may or may not point to a separate doubly linked list, also containing these special nodes. 
These child lists may have one or more children of their own, and so on, to produce a multilevel data structure as shown in the example below.

Given the head of the first level of the list, flatten the list so that all the nodes appear in a single-level, doubly linked list. 
Let curr be a node with a child list. The nodes in the child list should appear after curr and before curr.next in the flattened list.

Return the head of the flattened list. The nodes in the list must have all of their child pointers set to null.

 

Example 1:


Input: head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]
Output: [1,2,3,7,8,11,12,9,10,4,5,6]
Explanation: The multilevel linked list in the input is shown.
After flattening the multilevel linked list it becomes:

Example 2:


Input: head = [1,2,null,3]
Output: [1,3,2]
Explanation: The multilevel linked list in the input is shown.
After flattening the multilevel linked list it becomes:

Example 3:

Input: head = []
Output: []
Explanation: There could be empty list in the input.
 

Constraints:

The number of Nodes will not exceed 1000.
1 <= Node.val <= 105
 

How the multilevel linked list is represented in test cases:

We use the multilevel linked list from Example 1 above:

 1---2---3---4---5---6--NULL
         |
         7---8---9---10--NULL
             |
             11--12--NULL
The serialization of each level is as follows:

[1,2,3,4,5,6,null]
[7,8,9,10,null]
[11,12,null]
To serialize all levels together, we will add nulls in each level to signify no node connects to the upper node of the previous level. The serialization becomes:

[1,    2,    3, 4, 5, 6, null]
             |
[null, null, 7,    8, 9, 10, null]
                   |
[            null, 11, 12, null]
Merging the serialization of each level and removing trailing nulls we obtain:

[1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]

class Solution
{
public:
    Node *flatten(Node *head)
    {
        if(!head) return head;
        Node *curr = head;
        while(curr)
        {
            Node *next = curr->next;
            if(curr->child)
            {
                Node *flatChild = flatten(curr->child);
                Node *prev = NULL;
                Node *temp = flatChild;

                while(temp)
                {
                    prev = temp;
                    temp = temp->next;
                }

                flatChild->prev = curr;
                curr->next = flatChild;
                prev->next = next;
                if(next) next->prev = prev;
                curr->child = NULL;
            }
            curr = next;
        }
        return head;
    }
};


// Source https://leetcode.com/problems/all-oone-data-structure/

Design a data structure to store the strings' count with the ability to return the strings with minimum and maximum counts.

Implement the AllOne class:

AllOne() Initializes the object of the data structure.
inc(String key) Increments the count of the string key by 1. If key does not exist in the data structure, insert it with count 1.
dec(String key) Decrements the count of the string key by 1. If the count of key is 0 after the decrement, remove it from the data structure. 
It is guaranteed that key exists in the data structure before the decrement.
getMaxKey() Returns one of the keys with the maximal count. If no element exists, return an empty string "".
getMinKey() Returns one of the keys with the minimum count. If no element exists, return an empty string "".
 

Example 1:

Input
["AllOne", "inc", "inc", "getMaxKey", "getMinKey", "inc", "getMaxKey", "getMinKey"]
[[], ["hello"], ["hello"], [], [], ["leet"], [], []]
Output
[null, null, null, "hello", "hello", null, "hello", "leet"]

Explanation
AllOne allOne = new AllOne();
allOne.inc("hello");
allOne.inc("hello");
allOne.getMaxKey(); // return "hello"
allOne.getMinKey(); // return "hello"
allOne.inc("leet");
allOne.getMaxKey(); // return "hello"
allOne.getMinKey(); // return "leet"
 

Constraints:

1 <= key.length <= 10
key consists of lowercase English letters.
It is guaranteed that for each call to dec, key is existing in the data structure.
At most 5 * 104 calls will be made to inc, dec, getMaxKey, and getMinKey.

class AllOne
{
private:
    struct ListValue
    {
        string value;
        int count;
        ListValue(string &str, int cnt) : value(str), count(cnt) {}
    };
    list<ListValue> orderedList; // Descending order
    unordered_map<string, list<ListValue>::iterator> keyMap;
public:
    AllOne() { }

    void inc(string key)
    {
        auto itMapCurr = keyMap.find(key);

        if(itMapCurr == keyMap.end())
        {
            orderedList.push_back(ListValue(key, 1));
            auto itListEnd = orderedList.end();
            advance(itListEnd, -1);
            keyMap[key] = itListEnd;
        }
        else
        {
            list<ListValue>::iterator itListCurr = itMapCurr->second;
            ++itListCurr->count;

            if (itListCurr != orderedList.begin())
            {
                auto itListPrev = itListCurr;
                advance(itListPrev, -1);
                while((itListPrev != orderedList.begin()) && (itListPrev->count < itListCurr->count))
                {
                    advance(itListPrev, -1);
                }
                if(itListPrev == orderedList.begin() &&(itListPrev->count < itListCurr->count))
                {
                    // c.splice(pos,c2,c2pos)
                    // Moves the element at c2pos in c2 in front of pos of list c (c and c2 may be identical)
                    orderedList.splice(itListPrev, orderedList, itListCurr);
                }
                else
                {
                    advance(itListPrev, 1);
                    orderedList.splice(itListPrev, orderedList, itListCurr);
                }
            }
        }
    }

    void dec(string key)
    {
        auto itMapCurr = keyMap.find(key);
        auto itListCurr = itMapCurr->second;

        if(--itListCurr->count == 0)
        {
            orderedList.erase(itListCurr);
            keyMap.erase(itMapCurr);
        }
        else
        {
            auto itListNext =  itListCurr;
            advance(itListNext, 1);
            while((itListNext != orderedList.end()) && (itListCurr->count < itListNext->count))
            {
                advance(itListNext, 1);
            }
            orderedList.splice(itListNext, orderedList, itListCurr);
        }
    }

    string getMaxKey()
    {
        return orderedList.empty() ? string("") : orderedList.front().value;
    }

    string getMinKey()
    {
        return orderedList.empty() ? string("") : orderedList.back().value;
    }
};


// Source https://leetcode.com/problems/minimum-genetic-mutation/

A gene string can be represented by an 8-character long string, with choices from 'A', 'C', 'G', and 'T'.

Suppose we need to investigate a mutation from a gene string start to a gene string end where one mutation is defined as one single character changed in the gene string.

For example, "AACCGGTT" --> "AACCGGTA" is one mutation.
There is also a gene bank bank that records all the valid gene mutations. A gene must be in bank to make it a valid gene string.

Given the two gene strings start and end and the gene bank bank, return the minimum number of mutations needed to mutate from start to end. If there is no such a mutation, return -1.

Note that the starting point is assumed to be valid, so it might not be included in the bank.

 

Example 1:

Input: start = "AACCGGTT", end = "AACCGGTA", bank = ["AACCGGTA"]
Output: 1
Example 2:

Input: start = "AACCGGTT", end = "AAACGGTA", bank = ["AACCGGTA","AACCGCTA","AAACGGTA"]
Output: 2
Example 3:

Input: start = "AAAAACCC", end = "AACCCCCC", bank = ["AAAACCCC","AAACCCCC","AACCCCCC"]
Output: 3
 

Constraints:

start.length == 8
end.length == 8
0 <= bank.length <= 10
bank[i].length == 8
start, end, and bank[i] consist of only the characters ['A', 'C', 'G', 'T'].

class Solution
{
public:
    int minMutation(string start, string end, vector<string> &bank)
    {
        unordered_map<string, bool> visited;
        for(const auto &gene : bank)
            visited[gene] = false;
        queue<string> q;
        int mutations = 0;
        q.push(start);
        while(!q.empty())
        {
            for(int i = 0, sz = q.size(); i < sz; ++i)
            {
                auto gene = q.front();
                q.pop();
                if(gene == end)
                    return mutations;
                for(int j = 0; j < 8; ++j)
                {
                    char tmp = gene[j];
                    for(auto c : {'A', 'C', 'G', 'T'})
                    {
                        if(c != tmp)
                        {
                            gene[j] = c;
                            if(auto it = visited.find(gene); it != visited.end() && !it->second)
                            {
                                q.push(gene);
                                it->second = true;
                            }
                        }
                    }
                    gene[j] = tmp;
                }
            }
            ++mutations;
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/number-of-segments-in-a-string/

Given a string s, return the number of segments in the string.

A segment is defined to be a contiguous sequence of non-space characters.

 

Example 1:

Input: s = "Hello, my name is John"
Output: 5
Explanation: The five segments are ["Hello,", "my", "name", "is", "John"]
Example 2:

Input: s = "Hello"
Output: 1
 

Constraints:

0 <= s.length <= 300
s consists of lowercase and uppercase English letters, digits, or one of the following characters "!@#$%^&*()_+-=',.:".
The only space character in s is ' '.

class Solution
{
public:
    int countSegments(string s)
    {
        int n = s.length();
        if(n == 0) return 0;
        int res = 0;
        int i = 0;
        while(i < n)
        {
            for (; i < n && s[i] == ' '; ++i);
            if (i < n)
            {
                ++res;
                for(; i < n && s[i] != ' '; ++i);
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/non-overlapping-intervals/

Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.

 

Example 1:

Input: intervals = [[1,2],[2,3],[3,4],[1,3]]
Output: 1
Explanation: [1,3] can be removed and the rest of the intervals are non-overlapping.
Example 2:

Input: intervals = [[1,2],[1,2],[1,2]]
Output: 2
Explanation: You need to remove two [1,2] to make the rest of the intervals non-overlapping.
Example 3:

Input: intervals = [[1,2],[2,3]]
Output: 0
Explanation: You don't need to remove any of the intervals since they're already non-overlapping.
 

Constraints:

1 <= intervals.length <= 105
intervals[i].length == 2
-5 * 104 <= starti < endi <= 5 * 104

class Solution
{

public:
    int eraseOverlapIntervals(vector<vector<int>> &intervals)
    {
        sort(intervals.begin(), intervals.end());
        int n = intervals.size();
        int count = 0;
        int left = 0;
        int right = 1;
        while(right < n)
        {
            if(intervals[left][1] <= intervals[right][0])
            {
                left = right;
                ++right;
            }
            else if(intervals[left][1] <= intervals[right][1])
            {
                ++count;
                ++right;
            }
            else if(intervals[left][1] > intervals[right][1])
            {
                ++count;
                left = right;
                ++right;
            }
        }
        return count;
    }
};


// Source https://leetcode.com/problems/find-right-interval/

You are given an array of intervals, where intervals[i] = [starti, endi] and each starti is unique.

The right interval for an interval i is an interval j such that startj >= endi and startj is minimized.

Return an array of right interval indices for each interval i. If no right interval exists for interval i, then put -1 at index i.

 

Example 1:

Input: intervals = [[1,2]]
Output: [-1]
Explanation: There is only one interval in the collection, so it outputs -1.
Example 2:

Input: intervals = [[3,4],[2,3],[1,2]]
Output: [-1,0,1]
Explanation: There is no right interval for [3,4].
The right interval for [2,3] is [3,4] since start0 = 3 is the smallest start that is >= end1 = 3.
The right interval for [1,2] is [2,3] since start1 = 2 is the smallest start that is >= end2 = 2.
Example 3:

Input: intervals = [[1,4],[2,3],[3,4]]
Output: [-1,2,-1]
Explanation: There is no right interval for [1,4] and [3,4].
The right interval for [2,3] is [3,4] since start2 = 3 is the smallest start that is >= end1 = 3.
 

Constraints:

1 <= intervals.length <= 2 * 104
intervals[i].length == 2
-106 <= starti <= endi <= 106
The start point of each interval is unique.

class Solution
{
public:
    vector<int> findRightInterval(vector<vector<int>> &intervals)
    {
        int n = intervals.size();
        vector<int> v;
        v.reserve(n);
        unordered_map<int, int> mp;
        for(int i = 0; i < intervals.size(); i++)
        {
            v.push_back(intervals[i][0]);
            mp[intervals[i][0]] = i;
        }
        sort(v.begin(), v.end());
        vector<int> ans;
        ans.reserve(n);
        for(int i = 0; i < n; ++i)
        {
            auto itr = lower_bound(v.begin(), v.end(), intervals[i][1]);
            if(itr == v.end()) ans.push_back(-1);
            else ans.push_back(mp[*itr]);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/path-sum-iii/

Given the root of a binary tree and an integer targetSum, return the number of paths where the sum of the values along the path equals targetSum.

The path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).

 

Example 1:


Input: root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8
Output: 3
Explanation: The paths that sum to 8 are shown.
Example 2:

Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22
Output: 3
 

Constraints:

The number of nodes in the tree is in the range [0, 1000].
-109 <= Node.val <= 109
-1000 <= targetSum <= 1000

class Solution
{
public:
    int ans;
    int target;
    vector<TreeNode *> nodeVec;

    void postOrder(TreeNode *root)
    {
        if (root == nullptr) return;
        postOrder(root->left);
        postOrder(root->right);
        nodeVec.push_back(root);
    }
    void recur(TreeNode *root, int sum)
    {
        if (root == nullptr) return;
        sum += root->val;
        if (sum == target) ++ans;
        recur(root->left, sum);
        recur(root->right, sum);
    }
    
    int pathSum(TreeNode *root, int targetSum)
    {
        nodeVec.reserve(1000);
        postOrder(root);
        ans = 0;
        target = targetSum;
        int cnt = nodeVec.size();
        for (int i = 0; i < cnt; ++i)
        {
            recur(nodeVec[i], 0);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/find-all-anagrams-in-a-string/

Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

 

Example 1:

Input: s = "cbaebabacd", p = "abc"
Output: [0,6]
Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input: s = "abab", p = "ab"
Output: [0,1,2]
Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".
 

Constraints:

1 <= s.length, p.length <= 3 * 104
s and p consist of lowercase English letters.

class Solution
{
public:
    vector<int> findAnagrams(string s, string p)
    {
        int s_len = s.length();
        int p_len = p.length();

        if(s.size() < p.size()) return {};

        vector<int> freq_p(26, 0);
        vector<int> window(26, 0);

        for(int i = 0; i < p_len; i++)
        {
            freq_p[p[i] - 'a']++;
            window[s[i] - 'a']++;
        }

        vector<int> ans;
        if(freq_p == window) ans.push_back(0);

        for(int i = p_len; i < s_len; i++)
        {
            window[s[i - p_len] - 'a']--;
            window[s[i] - 'a']++;

            if(freq_p == window) ans.push_back(i - p_len + 1);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/k-th-smallest-in-lexicographical-order/

Given two integers n and k, return the kth lexicographically smallest integer in the range [1, n].

 

Example 1:

Input: n = 13, k = 2
Output: 10
Explanation: The lexicographical order is [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9], so the second smallest number is 10.
Example 2:

Input: n = 1, k = 1
Output: 1
 

Constraints:

1 <= k <= n <= 109

class Solution
{
public:
    int helper(long long start, long long n)
    {
        long long cnt = 0;
        long long first = start, last = start + 1;
        while (first <= n)
        {
            cnt +=  min(n + 1, last) - first;
            first *= 10;
            last *= 10;
        }
        return cnt;
    }
    int findKthNumber(int n, int k)
    {
        int start = 1;
        --k;
        while (k > 0)
        {
            int cnt = helper(start, n);
            if (cnt <= k)
            {
                ++start;
                k -= cnt;
            }
            else
            {
                start *= 10;
                --k;
            }
        }
        return start;
    }
};


// Source https://leetcode.com/problems/arranging-coins/

You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.

Given the integer n, return the number of complete rows of the staircase you will build.

 

Example 1:


Input: n = 5
Output: 2
Explanation: Because the 3rd row is incomplete, we return 2.
Example 2:


Input: n = 8
Output: 3
Explanation: Because the 4th row is incomplete, we return 3.
 

Constraints:

1 <= n <= 231 - 1

class Solution
{
public:
    int arrangeCoins(int n)
    {
        long start = 0, end = n;
        long ans;
        while(start <= end)
        {
            long mid = start + (end - start) / 2;
            long cnt = mid * (mid + 1) / 2;
            if(cnt == n) return (int)mid;
            if(cnt > n)
            {
                end = mid - 1;
            }
            else
            {
                ans = mid;
                start = mid + 1;
            }
        }
        return (int)ans;
    }
};


// Source https://leetcode.com/problems/find-all-duplicates-in-an-array/

Given an integer array nums of length n where all the integers of nums are in the range [1, n] and each integer appears once or twice, return an array of all the integers that appears twice.

You must write an algorithm that runs in O(n) time and uses only constant extra space.

 

Example 1:

Input: nums = [4,3,2,7,8,2,3,1]
Output: [2,3]
Example 2:

Input: nums = [1,1,2]
Output: [1]
Example 3:

Input: nums = [1]
Output: []
 

Constraints:

n == nums.length
1 <= n <= 105
1 <= nums[i] <= n
Each element in nums appears once or twice.

class Solution
{
public:
    vector<int> findDuplicates(vector<int> &nums)
    {
        int n = nums.size();
        if(n <= 1) return {};
        vector<int> ans;
        for(int i = 0; i < nums.size(); i++)
        {
            if(nums[abs(nums[i]) - 1] < 0) ans.push_back(abs(nums[i]));
            else nums[abs(nums[i]) - 1] *= -1;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/string-compression/

Given an array of characters chars, compress it using the following algorithm:

Begin with an empty string s. For each group of consecutive repeating characters in chars:

If the group's length is 1, append the character to s.
Otherwise, append the character followed by the group's length.
The compressed string s should not be returned separately, but instead, be stored in the input character array chars. 
Note that group lengths that are 10 or longer will be split into multiple characters in chars.

After you are done modifying the input array, return the new length of the array.

You must write an algorithm that uses only constant extra space.

 

Example 1:

Input: chars = ["a","a","b","b","c","c","c"]
Output: Return 6, and the first 6 characters of the input array should be: ["a","2","b","2","c","3"]
Explanation: The groups are "aa", "bb", and "ccc". This compresses to "a2b2c3".
Example 2:

Input: chars = ["a"]
Output: Return 1, and the first character of the input array should be: ["a"]
Explanation: The only group is "a", which remains uncompressed since it's a single character.
Example 3:

Input: chars = ["a","b","b","b","b","b","b","b","b","b","b","b","b"]
Output: Return 4, and the first 4 characters of the input array should be: ["a","b","1","2"].
Explanation: The groups are "a" and "bbbbbbbbbbbb". This compresses to "ab12".
 

Constraints:

1 <= chars.length <= 2000
chars[i] is a lowercase English letter, uppercase English letter, digit, or symbol.

class Solution
{
public:
    int compress(vector<char> &chars)
    {
        int n = chars.size();
        int pos = 0;
        int i = 0;
        while (i < n)
        {
            int start = i;
            ++i;
            for (; i < n && chars[i] == chars[start]; ++i);
            int count = i - start;
            int len = pow(10, int(log10(count)));
            chars[pos] = chars[start];
            ++pos;
            if(count > 1)
            {
                while(len >= 1)
                {
                    chars[pos] = ('0' + (count / len));
                    ++pos;
                    count = count % len;
                    len = len / 10;
                }
            }
        }
        return pos;
    }
};


// Source https://leetcode.com/problems/add-two-numbers-ii/

You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. 
Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:


Input: l1 = [7,2,4,3], l2 = [5,6,4]
Output: [7,8,0,7]
Example 2:

Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [8,0,7]
Example 3:

Input: l1 = [0], l2 = [0]
Output: [0]
 

Constraints:

The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.

class Solution
{
public:
    ListNode *addTwoNumbers(ListNode *l1, ListNode *l2)
    {
        l1 = reverse_list(l1);
        l2 = reverse_list(l2);
        ListNode *dummy = new ListNode(0), *curr = dummy;
        int carry = 0;
        while(l1 != nullptr || l2 != nullptr || carry != 0)
        {
            int l1_val = (l1 != nullptr) ? l1->val : 0;
            int l2_val = (l2 != nullptr) ? l2->val : 0;
            ListNode *l1_next = (l1 != nullptr) ? l1->next : nullptr;
            ListNode *l2_next = (l2 != nullptr) ? l2->next : nullptr;
            int sum = l1_val + l2_val + carry;
            curr->next = new ListNode(sum % 10);
            curr = curr->next;
            carry = sum / 10;
            l1 = l1_next;
            l2 = l2_next;
        }
        return reverse_list(dummy->next);
    }
    ListNode *reverse_list(ListNode *head)
    {
        if (!head) return head;
        ListNode *prev = nullptr;
        ListNode *curr = head;
        while(curr)
        {
            ListNode *next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
};


// Source https://leetcode.com/problems/arithmetic-slices-ii-subsequence/

Given an integer array nums, return the number of all the arithmetic subsequences of nums.

A sequence of numbers is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.

For example, [1, 3, 5, 7, 9], [7, 7, 7, 7], and [3, -1, -5, -9] are arithmetic sequences.
For example, [1, 1, 2, 5, 7] is not an arithmetic sequence.
A subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array.

For example, [2,5,10] is a subsequence of [1,2,1,2,4,1,5,10].
The test cases are generated so that the answer fits in 32-bit integer.

 

Example 1:

Input: nums = [2,4,6,8,10]
Output: 7
Explanation: All arithmetic subsequence slices are:
[2,4,6]
[4,6,8]
[6,8,10]
[2,4,6,8]
[4,6,8,10]
[2,4,6,8,10]
[2,6,10]
Example 2:

Input: nums = [7,7,7,7,7]
Output: 16
Explanation: Any subsequence of this array is arithmetic.
 

Constraints:

1  <= nums.length <= 1000
-231 <= nums[i] <= 231 - 1

class Solution
{
public:
    int numberOfArithmeticSlices(vector<int> &nums)
    {
        int n = nums.size();
        if (n <= 2) return 0;
        int ans = 0;
        vector<unordered_map<int, int>>mp(n);
        for(int i = 1 ; i < n ; i++)
        {
            int j = i - 1;
            while(j >= 0)
            {
                long diff = (long)nums[i] - (long)nums[j];
                if(diff <= INT_MIN || diff >= INT_MAX)
                {
                    j--;
                    continue;
                }
                if(mp[j].find(diff) != mp[j].end())
                {
                    int previousAPs = mp[j][diff];
                    ans += previousAPs;
                    mp[i][diff] += previousAPs;
                    mp[i][diff]++;
                }
                else
                {
                    mp[i][diff]++;
                }
                j--;
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/number-of-boomerangs/

You are given n points in the plane that are all distinct, where points[i] = [xi, yi]. 
A boomerang is a tuple of points (i, j, k) such that the distance between i and j equals the distance between i and k (the order of the tuple matters).

Return the number of boomerangs.

 

Example 1:

Input: points = [[0,0],[1,0],[2,0]]
Output: 2
Explanation: The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]].
Example 2:

Input: points = [[1,1],[2,2],[3,3]]
Output: 2
Example 3:

Input: points = [[1,1]]
Output: 0
 

Constraints:

n == points.length
1 <= n <= 500
points[i].length == 2
-104 <= xi, yi <= 104
All the points are unique.

class Solution
{
public:
    int numberOfBoomerangs(vector<vector<int>> &points)
    {
        int n = points.size(), ans = 0;
        for(int i = 0; i < n; i++)
        {
            unordered_map<int, int> dists;

            for(int j = 0; j < n; j++)
            {
                if(i != j)
                {
                    dists[calcDist(points, i, j)]++;
                }
            }

            for (auto p : dists)
            {
                ans += (p.second) * (p.second - 1);
            }
        }

        return ans;
    }

    int calcDist(vector<vector<int>> &points, int i, int j)
    {
        int dx = points[i][0] - points[j][0];
        int dy = points[i][1] - points[j][1];
        return dx * dx + dy * dy;
    }
};


// Source https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/

Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums.

 

Example 1:

Input: nums = [4,3,2,7,8,2,3,1]
Output: [5,6]
Example 2:

Input: nums = [1,1]
Output: [2]
 

Constraints:

n == nums.length
1 <= n <= 105
1 <= nums[i] <= n

class Solution
{
public:
    vector<int> findDisappearedNumbers(vector<int> &nums)
    {
        int n = nums.size();
        vector<int> ans;
        for(int i = 0; i < n; i++)
        {
            if(nums[abs(nums[i]) - 1] > 0) nums[abs(nums[i]) - 1] *= -1;
        }
        for(int i = 0; i < n; i++)
        {
            if(nums[i] > 0) ans.push_back(i + 1);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/serialize-and-deserialize-bst/

Serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, 
or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary search tree. There is no restriction on how your serialization/deserialization algorithm should work. 
You need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure.

The encoded string should be as compact as possible.

 

Example 1:

Input: root = [2,1,3]
Output: [2,1,3]
Example 2:

Input: root = []
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 104].
0 <= Node.val <= 104
The input tree is guaranteed to be a binary search tree.

example:
1 ( 2 (4) (5) ) (3 (6) ( 7 (8) (9) ) )
1 -> children 2 and 3
2 -> children 4 and 5
3 -> children 6 and 7
7 -> children 8 and 9

class Codec
{
public:

    string serialize(TreeNode *root)
    {
        if(!root)
            return "#";
        string res = to_string(root->val);
        res += " " + serialize(root->left) + " " + serialize(root->right);
        return res;
    }
    int i = 0;
    TreeNode *build(vector<string> &v)
    {
        if(i >= v.size())
            return NULL;
        if(v[i] == "#")
        {
            i++;
            return NULL;
        }
        TreeNode *node = new TreeNode(stoi(v[i]));
        i++;
        node->left = build(v);
        node->right = build(v);
        return node;
    }
    TreeNode *deserialize(string data)
    {
        vector<string>v;
        istringstream ss(data);
        string temp;
        while(ss >> temp)
        {
            v.push_back(temp);
        }
        i = 0;
        return build(v);
    }
};


// Source https://leetcode.com/problems/delete-node-in-a-bst/

Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.

Basically, the deletion can be divided into two stages:

Search for a node to remove.
If the node is found, delete the node.
 

Example 1:


Input: root = [5,3,6,2,4,null,7], key = 3
Output: [5,4,6,2,null,null,7]
Explanation: Given key to delete is 3. So we find the node with value 3 and delete it.
One valid answer is [5,4,6,2,null,null,7], shown in the above BST.
Please notice that another valid answer is [5,2,6,null,4,null,7] and it's also accepted.

Example 2:

Input: root = [5,3,6,2,4,null,7], key = 0
Output: [5,3,6,2,4,null,7]
Explanation: The tree does not contain a node with value = 0.
Example 3:

Input: root = [], key = 0
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 104].
-105 <= Node.val <= 105
Each node has a unique value.
root is a valid binary search tree.
-105 <= key <= 105

class Solution
{
public:
    TreeNode *deleteNode(TreeNode *root, int key)
    {
        if(root == nullptr) return root;

        if(root->val < key) root->right = deleteNode(root->right, key);
        else if(root->val > key) root->left = deleteNode(root->left, key);
        else
        {
            // Case 1: It's a leaf node
            if(root->right == nullptr and root->left == nullptr)
            {
                delete root;
                return nullptr;
            }

            // Case 2: It has only one child
            if(root->right == nullptr || root->left == nullptr)
            {
                TreeNode *child = root->left != nullptr ? root->left : root->right;
                delete root;
                return child;
            }

            // Case 3: It has two children, (and their children may have their children)
            // Replace root-val with its inorder predecessor
            TreeNode *prev = root->left;
            while(prev->right)
                prev = prev->right;

            root->val = prev->val;
            root->left = deleteNode(root->left, prev->val);
        }

        return root;
    }
};


// Source https://leetcode.com/problems/sort-characters-by-frequency/

Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string.

Return the sorted string. If there are multiple answers, return any of them.

 

Example 1:

Input: s = "tree"
Output: "eert"
Explanation: 'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
Example 2:

Input: s = "cccaaa"
Output: "aaaccc"
Explanation: Both 'c' and 'a' appear three times, so both "cccaaa" and "aaaccc" are valid answers.
Note that "cacaca" is incorrect, as the same characters must be together.
Example 3:

Input: s = "Aabb"
Output: "bbAa"
Explanation: "bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A' and 'a' are treated as two different characters.
 

Constraints:

1 <= s.length <= 5 * 105
s consists of uppercase and lowercase English letters and digits.

class Solution
{
public:
    string frequencySort(string s)
    {
        if(s.length() <= 2) return s;
        unordered_map<char, int> mp;
        priority_queue<pair<int, char>> q;
        for(char c : s)
            mp[c]++;
        for(auto itr : mp)
        {
            q.push({itr.second, itr.first});
        }
        s.clear();
        while(!q.empty())
        {
            auto p = q.top();
            q.pop();
            s.append(p.first, p.second);
        }
        return s;
    }
};


// Source https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/

There are some spherical balloons taped onto a flat wall that represents the XY-plane. 
The balloons are represented as a 2D integer array points where points[i] = [xstart, xend] denotes a balloon whose horizontal diameter stretches between xstart and xend. 
You do not know the exact y-coordinates of the balloons.

Arrows can be shot up directly vertically (in the positive y-direction) from different points along the x-axis. 
A balloon with xstart and xend is burst by an arrow shot at x if xstart <= x <= xend. There is no limit to the number of arrows that can be shot. 
A shot arrow keeps traveling up infinitely, bursting any balloons in its path.

Given the array points, return the minimum number of arrows that must be shot to burst all balloons.

 

Example 1:

Input: points = [[10,16],[2,8],[1,6],[7,12]]
Output: 2
Explanation: The balloons can be burst by 2 arrows:
- Shoot an arrow at x = 6, bursting the balloons [2,8] and [1,6].
- Shoot an arrow at x = 11, bursting the balloons [10,16] and [7,12].
Example 2:

Input: points = [[1,2],[3,4],[5,6],[7,8]]
Output: 4
Explanation: One arrow needs to be shot for each balloon for a total of 4 arrows.
Example 3:

Input: points = [[1,2],[2,3],[3,4],[4,5]]
Output: 2
Explanation: The balloons can be burst by 2 arrows:
- Shoot an arrow at x = 2, bursting the balloons [1,2] and [2,3].
- Shoot an arrow at x = 4, bursting the balloons [3,4] and [4,5].
 

Constraints:

1 <= points.length <= 105
points[i].length == 2
-231 <= xstart < xend <= 231 - 1

class Solution
{
public:
    int findMinArrowShots(vector<vector<int>> &points)
    {
        sort(points.begin(), points.end());
        int arrows = 1;

        for (int i = 1; i < points.size(); i++)
        {
            if (points[i - 1][1] >= points[i][0])
            {
                points[i][1] = min(points[i - 1][1], points[i][1]);
                continue;
            }
            arrows++;
        }
        return arrows;
    }
};


// Source https://leetcode.com/problems/minimum-moves-to-equal-array-elements/

Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal.

In one move, you can increment n - 1 elements of the array by 1.

 

Example 1:

Input: nums = [1,2,3]
Output: 3
Explanation: Only three moves are needed (remember each move increments two elements):
[1,2,3]  =>  [2,3,3]  =>  [3,4,3]  =>  [4,4,4]
Example 2:

Input: nums = [1,1,1]
Output: 0
 

Constraints:

n == nums.length
1 <= nums.length <= 105
-109 <= nums[i] <= 109
The answer is guaranteed to fit in a 32-bit integer.

class Solution
{
public:
    int minMoves(vector<int> &nums)
    {
        int minVal = INT_MAX;
        for(int val : nums) minVal = min(minVal, val);
        int ans = 0;
        for(int val : nums)
        {
            ans += (val - minVal);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/4sum-ii/

Given four integer arrays nums1, nums2, nums3, and nums4 all of length n, return the number of tuples (i, j, k, l) such that:

0 <= i, j, k, l < n
nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0
 

Example 1:

Input: nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]
Output: 2
Explanation:
The two tuples are:
1. (0, 0, 0, 1) -> nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0
2. (1, 1, 0, 0) -> nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0
Example 2:

Input: nums1 = [0], nums2 = [0], nums3 = [0], nums4 = [0]
Output: 1
 

Constraints:

n == nums1.length
n == nums2.length
n == nums3.length
n == nums4.length
1 <= n <= 200
-228 <= nums1[i], nums2[i], nums3[i], nums4[i] <= 228

class Solution
{
public:
    int fourSumCount(vector<int> &nums1, vector<int> &nums2, vector<int> &nums3, vector<int> &nums4)
    {
        int ans = 0;
        unordered_map<int, int> mp; // <val, freq>
        for(auto n3 : nums3)
        {
            for(auto n4 : nums4)
            {
                mp[n3 + n4]++;
            }
        }
        for(auto n1 : nums1)
        {
            for(auto n2 : nums2)
            {
                int toFind = -1 * (n1 + n2);
                if(mp.find(toFind) != mp.end())
                {
                    ans += mp[toFind];
                }
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/assign-cookies/

Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie.

Each child i has a greed factor g[i], which is the minimum size of a cookie that the child will be content with; and each cookie j has a size s[j]. If s[j] >= g[i], 
we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number.

 

Example 1:

Input: g = [1,2,3], s = [1,1]
Output: 1
Explanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. 
And even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.
You need to output 1.
Example 2:

Input: g = [1,2], s = [1,2,3]
Output: 2
Explanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. 
You have 3 cookies and their sizes are big enough to gratify all of the children, 
You need to output 2.
 

Constraints:

1 <= g.length <= 3 * 104
0 <= s.length <= 3 * 104
1 <= g[i], s[j] <= 231 - 1

class Solution
{
public:
    int findContentChildren(vector<int> &g, vector<int> &s)
    {
        int i = 0, j = 0;
        sort(g.begin(), g.end());
        sort(s.begin(), s.end());
        while(i < g.size() && j < s.size())
        {
            if(g[i] <= s[j])
            {
                i++;
                j++;
            }
            else
            {
                j++;
            }
        }
        return i;
    }
};


// Source https://leetcode.com/problems/132-pattern/

Given an array of n integers nums, a 132 pattern is a subsequence of three integers nums[i], nums[j] and nums[k] such that i < j < k and nums[i] < nums[k] < nums[j].

Return true if there is a 132 pattern in nums, otherwise, return false.

 

Example 1:

Input: nums = [1,2,3,4]
Output: false
Explanation: There is no 132 pattern in the sequence.
Example 2:

Input: nums = [3,1,4,2]
Output: true
Explanation: There is a 132 pattern in the sequence: [1, 4, 2].
Example 3:

Input: nums = [-1,3,2,0]
Output: true
Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].
 

Constraints:

n == nums.length
1 <= n <= 2 * 105
-109 <= nums[i] <= 109

class Solution
{
public:
    bool find132pattern(vector<int> &nums)
    {
        int n = nums.size();
        vector<int> prefix_min(n);
        prefix_min[0] = INT_MAX;
        for(int i = 1; i < n; i++)
        {
            prefix_min[i] = min(prefix_min[i - 1], nums[i - 1]);
        }
        stack<int> stk;
        stk.push(0);
        for(int i = 1; i < n; i++)
        {
            while(!stk.empty() && nums[stk.top()] <= nums[i])
            {
                stk.pop();
            }
            if(!stk.empty())
            {
                if(prefix_min[stk.top()] < nums[i])
                {
                    return true;
                }
            }
            stk.push(i);
        }
        return false;
    }
};


// Source https://leetcode.com/problems/circular-array-loop/

You are playing a game involving a circular array of non-zero integers nums. Each nums[i] denotes the number of indices forward/backward you must move if you are located at index i:

If nums[i] is positive, move nums[i] steps forward, and
If nums[i] is negative, move nums[i] steps backward.
Since the array is circular, you may assume that moving forward from the last element puts you on the first element, and moving backwards from the first element puts you on the last element.

A cycle in the array consists of a sequence of indices seq of length k where:

Following the movement rules above results in the repeating index sequence seq[0] -> seq[1] -> ... -> seq[k - 1] -> seq[0] -> ...
Every nums[seq[j]] is either all positive or all negative.
k > 1
Return true if there is a cycle in nums, or false otherwise.

 

Example 1:

Input: nums = [2,-1,1,2,2]
Output: true
Explanation:
There is a cycle from index 0 -> 2 -> 3 -> 0 -> ...
The cycle's length is 3.
Example 2:

Input: nums = [-1,2]
Output: false
Explanation:
The sequence from index 1 -> 1 -> 1 -> ... is not a cycle because the sequence's length is 1.
By definition the sequence's length must be strictly greater than 1 to be a cycle.
Example 3:

Input: nums = [-2,1,-1,-2,-2]
Output: false
Explanation:
The sequence from index 1 -> 2 -> 1 -> ... is not a cycle because nums[1] is positive, but nums[2] is negative.
Every nums[seq[j]] must be either all positive or all negative.
 

Constraints:

1 <= nums.length <= 5000
-1000 <= nums[i] <= 1000
nums[i] != 0

class Solution
{
public:
    bool checkCycle(int node, vector<vector<int>> &adj, vector<bool> &vis, vector<bool> &dfsVis, vector<int> &nums)
    {
        vis[node] = true;
        dfsVis[node] = true;
        for (auto next : adj[node])
        {
            if(((nums[node] < 0 && nums[next] < 0) || (nums[node] > 0 && nums[next] > 0)) && node != next)
            {
                if(!vis[next])
                {
                    if(checkCycle(next, adj, vis, dfsVis, nums))
                        return true;
                }
                else if(dfsVis[next])
                    return true;
            }
        }
        dfsVis[node] = false;
        return false;
    }
    bool circularArrayLoop(vector<int> &nums)
    {
        int n = nums.size();
        vector<vector<int>>adj(n);
        int i, k;
        for(i = 0; i < n; i++)
        {
            if(nums[i] < 0)
                k = (i - (abs(nums[i]) % n) + n) % n;
            else
                k = (i + (nums[i] % n) + n) % n;
            adj[i].push_back(k);
        }
        vector<bool>vis(n, false);
        vector<bool>dfsVis(n, false);
        for(i = 0; i < n; i++)
        {
            if(!vis[i])
            {
                if(checkCycle(i, adj, vis, dfsVis, nums))
                    return true;
            }
        }
        return false;
    }
};


// Source https://leetcode.com/problems/poor-pigs/

There are buckets buckets of liquid, where exactly one of the buckets is poisonous. To figure out which one is poisonous, 
you feed some number of (poor) pigs the liquid to see whether they will die or not. 
Unfortunately, you only have minutesToTest minutes to determine which bucket is poisonous.

You can feed the pigs according to these steps:

Choose some live pigs to feed.
For each pig, choose which buckets to feed it. The pig will consume all the chosen buckets simultaneously and will take no time.
Wait for minutesToDie minutes. You may not feed any other pigs during this time.
After minutesToDie minutes have passed, any pigs that have been fed the poisonous bucket will die, and all others will survive.
Repeat this process until you run out of time.
Given buckets, minutesToDie, and minutesToTest, return the minimum number of pigs needed to figure out which bucket is poisonous within the allotted time.

 

Example 1:

Input: buckets = 1000, minutesToDie = 15, minutesToTest = 60
Output: 5
Example 2:

Input: buckets = 4, minutesToDie = 15, minutesToTest = 15
Output: 2
Example 3:

Input: buckets = 4, minutesToDie = 15, minutesToTest = 30
Output: 2
 

Constraints:

1 <= buckets <= 1000
1 <= minutesToDie <= minutesToTest <= 100

一只猪测一次可以测试2个桶
两只猪测一次可以测试4个桶
3只猪测一次可以测试8个桶
测第1次后死亡，测第1次后活着

两只猪测两次可以测9个桶
测第1次后死亡，测第2次后死亡，测第2次后活着

class Solution
{
public:
    int poorPigs(int buckets, int minutesToDie, int minutesToTest)
    {
        int state = minutesToTest / minutesToDie + 1;
        return ceil(log(buckets) / log(state));
    }
};


// Source https://leetcode.com/problems/repeated-substring-pattern/

Given a string s, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.

 

Example 1:

Input: s = "abab"
Output: true
Explanation: It is the substring "ab" twice.
Example 2:

Input: s = "aba"
Output: false
Example 3:

Input: s = "abcabcabcabc"
Output: true
Explanation: It is the substring "abc" four times or the substring "abcabc" twice.
 

Constraints:

1 <= s.length <= 104
s consists of lowercase English letters.

class Solution
{
public:
    int n;
    bool repeatedSubstringPattern(string s)
    {
        n = s.length();
        vector<int> next(n);
        getNext(next, s);
        return n > 1 && next[n - 1] != 0 && n % (n - next[n - 1]) == 0;
    }
    void getNext(vector<int> &next, string &s)
    {
        int j = 0;
        next[0] = 0;
        for(int i = 1; i < n; ++i)
        {
            while(j > 0 && s[i] != s[j]) j = next[j - 1];
            if(s[i] == s[j]) ++j;
            next[i] = j;
        }
    }
};


// Source https://leetcode.com/problems/lfu-cache/

Design and implement a data structure for a Least Frequently Used (LFU) cache.

Implement the LFUCache class:

LFUCache(int capacity) Initializes the object with the capacity of the data structure.
int get(int key) Gets the value of the key if the key exists in the cache. Otherwise, returns -1.
void put(int key, int value) Update the value of the key if present, or inserts the key if not already present. 
When the cache reaches its capacity, it should invalidate and remove the least frequently used key before inserting a new item. 
For this problem, when there is a tie (i.e., two or more keys with the same frequency), the least recently used key would be invalidated.
To determine the least frequently used key, a use counter is maintained for each key in the cache. The key with the smallest use counter is the least frequently used key.

When a key is first inserted into the cache, its use counter is set to 1 (due to the put operation). The use counter for a key in the cache is incremented either a get or put operation is called on it.

The functions get and put must each run in O(1) average time complexity.

 

Example 1:

Input
["LFUCache", "put", "put", "get", "put", "get", "get", "put", "get", "get", "get"]
[[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [4]]
Output
[null, null, null, 1, null, -1, 3, null, -1, 3, 4]

Explanation
// cnt(x) = the use counter for key x
// cache=[] will show the last used order for tiebreakers (leftmost element is  most recent)
LFUCache lfu = new LFUCache(2);
lfu.put(1, 1);   // cache=[1,_], cnt(1)=1
lfu.put(2, 2);   // cache=[2,1], cnt(2)=1, cnt(1)=1
lfu.get(1);      // return 1
                 // cache=[1,2], cnt(2)=1, cnt(1)=2
lfu.put(3, 3);   // 2 is the LFU key because cnt(2)=1 is the smallest, invalidate 2.
                 // cache=[3,1], cnt(3)=1, cnt(1)=2
lfu.get(2);      // return -1 (not found)
lfu.get(3);      // return 3
                 // cache=[3,1], cnt(3)=2, cnt(1)=2
lfu.put(4, 4);   // Both 1 and 3 have the same cnt, but 1 is LRU, invalidate 1.
                 // cache=[4,3], cnt(4)=1, cnt(3)=2
lfu.get(1);      // return -1 (not found)
lfu.get(3);      // return 3
                 // cache=[3,4], cnt(4)=1, cnt(3)=3
lfu.get(4);      // return 4
                 // cache=[4,3], cnt(4)=2, cnt(3)=3
 

Constraints:

0 <= capacity <= 104
0 <= key <= 105
0 <= value <= 109
At most 2 * 105 calls will be made to get and put.

class LFUCache
{
    // capacity of cache
    int capacity;

    // lowest frequency of all keys in cache
    int lowestFreq;

    // keyMap[key] = tuple{freq, value, iterator}
    unordered_map<int, tuple<int, int, list<int>::iterator>> keyMap;

    // freqToList[f] = list of keys at freq f
    vector<list<int>> freqToList;

    pair<int, int> _erase(int key)
    {
        auto [freq, value, oldItr] = keyMap[key];
        keyMap.erase(key);
        freqToList[freq].erase(oldItr);
        return {freq, value};
    }

    void _insert(int key, int freq, int value)
    {
        if (freqToList.size() <= freq)
            freqToList.resize(freq + 1);
        freqToList[freq].push_back(key);
        list<int>::iterator newItr = --freqToList[freq].end();
        keyMap[key] = make_tuple(freq, value, newItr);
    }

    void _evict()
    {
        if (lowestFreq <= 0)
        {
            return;
        }
        int key = freqToList[lowestFreq].front();
        // can use evict on key, but this is more efficient.
        keyMap.erase(key);
        freqToList[lowestFreq].pop_front();
    }

    void _updateLowestFreq()
    {
        if (freqToList[lowestFreq].empty())
            lowestFreq++;
    }
public:
    LFUCache(int capacity): capacity(capacity), lowestFreq(0)
    {
    }

    int get(int key)
    {
        if (!capacity)
            return -1;

        if (!keyMap.count(key))
        {
            return -1;
        }

        // erase from old list
        pair<int, int> freqValue = _erase(key);

        // insert to new list
        int freq = ++freqValue.first, value = freqValue.second;
        _insert(key, freq, value);
        _updateLowestFreq();
        return value;
    }

    void put(int key, int value)
    {
        if (!keyMap.count(key))
        {
            if (keyMap.size() >= capacity)
            {
                _evict();
            }
            _insert(key, 1, value);
            lowestFreq = 1;
        }
        else
        {
            pair<int, int> oldFreqValue = _erase(key);
            _insert(key, oldFreqValue.first + 1, value);
            _updateLowestFreq();
        }
    }
};


// Source https://leetcode.com/problems/hamming-distance/

The Hamming distance between two integers is the number of positions at which the corresponding bits are different.

Given two integers x and y, return the Hamming distance between them.

 

Example 1:

Input: x = 1, y = 4
Output: 2
Explanation:
1   (0 0 0 1)
4   (0 1 0 0)
       ↑   ↑
The above arrows point to positions where the corresponding bits are different.
Example 2:

Input: x = 3, y = 1
Output: 1
 

Constraints:

0 <= x, y <= 231 - 1

class Solution
{
public:
    int hammingDistance(int x, int y)
    {
        return bitset<64>(x ^ y).count();
    }
};


// Source https://leetcode.com/problems/minimum-moves-to-equal-array-elements-ii/

Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal.

In one move, you can increment or decrement an element of the array by 1.

Test cases are designed so that the answer will fit in a 32-bit integer.

 

Example 1:

Input: nums = [1,2,3]
Output: 2
Explanation:
Only two moves are needed (remember each move increments or decrements one element):
[1,2,3]  =>  [2,2,3]  =>  [2,2,2]
Example 2:

Input: nums = [1,10,2,9]
Output: 16
 

Constraints:

n == nums.length
1 <= nums.length <= 105
-109 <= nums[i] <= 109

class Solution
{
public:
    int minMoves2(vector<int> &nums)
    {
        sort(nums.begin(), nums.end());
        int mid = nums[nums.size() / 2];
        int moves = 0;
        for(int i = 0; i < nums.size(); i++)
        {
            moves += abs(nums[i] - mid);
        }

        return moves;
    }
};


// Source https://leetcode.com/problems/island-perimeter/

You are given row x col grid representing a map where grid[i][j] = 1 represents land and grid[i][j] = 0 represents water.

Grid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells).

The island doesn't have "lakes", meaning the water inside isn't connected to the water around the island. One cell is a square with side length 1. 
The grid is rectangular, width and height don't exceed 100. Determine the perimeter of the island.

 

Example 1:


Input: grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]
Output: 16
Explanation: The perimeter is the 16 yellow stripes in the image above.
Example 2:

Input: grid = [[1]]
Output: 4
Example 3:

Input: grid = [[1,0]]
Output: 4
 

Constraints:

row == grid.length
col == grid[i].length
1 <= row, col <= 100
grid[i][j] is 0 or 1.
There is exactly one island in grid.

class Solution
{
public:
    int islandPerimeter(vector<vector<int>> &grid)
    {
        int r = grid.size();
        int c = grid[0].size();
        int perimeter = 0;
        for(int i = 0; i < r; i++)
        {
            for(int j = 0; j < c; j++)
            {
                if(grid[i][j] == 1)
                {
                    perimeter += 4;

                    if(j > 0 && grid[i][j - 1] == 1)
                    {
                        perimeter -= 2;
                    }
                    if(i > 0 && grid[i - 1][j] == 1)
                    {
                        perimeter -= 2;
                    }
                }
            }
        }
        return perimeter;
    }
};


// Source https://leetcode.com/problems/can-i-win/

In the "100 game" two players take turns adding, to a running total, any integer from 1 to 10. The player who first causes the running total to reach or exceed 100 wins.

What if we change the game so that players cannot re-use integers?

For example, two players might take turns drawing from a common pool of numbers from 1 to 15 without replacement until they reach a total >= 100.

Given two integers maxChoosableInteger and desiredTotal, return true if the first player to move can force a win, otherwise, return false. Assume both players play optimally.

 

Example 1:

Input: maxChoosableInteger = 10, desiredTotal = 11
Output: false
Explanation:
No matter which integer the first player choose, the first player will lose.
The first player can choose an integer from 1 up to 10.
If the first player choose 1, the second player can only choose integers from 2 up to 10.
The second player will win by choosing 10 and get a total = 11, which is >= desiredTotal.
Same with other integers chosen by the first player, the second player will always win.
Example 2:

Input: maxChoosableInteger = 10, desiredTotal = 0
Output: true
Example 3:

Input: maxChoosableInteger = 10, desiredTotal = 1
Output: true
 

Constraints:

1 <= maxChoosableInteger <= 20
0 <= desiredTotal <= 300

class Solution
{
private:
    vector<vector<int>>dp;
    bool backtrack(int curr, int maxInt, int desire, int mask, int player)
    {
        if(dp[player][mask] != -1)
        {
            return dp[player][mask];
        }
        for(int i = 1; i <= maxInt; i++)
        {
            int nmask = (1 << (i - 1));
            if((mask & nmask) == 0)
            {
                if(curr + i >= desire || !backtrack(curr + i, maxInt, desire, mask + nmask, (player + 1) % 2))
                {
                    return dp[player][mask] = true;
                }
            }
        }
        return dp[player][mask] = false;
    }

public:
    bool canIWin(int maxChoosableInteger, int desiredTotal)
    {
        dp = vector<vector<int>>(2, vector<int>(1 << maxChoosableInteger, -1));
        if(maxChoosableInteger * (maxChoosableInteger + 1) / 2 < desiredTotal)
        {
            return false;
        }
        int curr = 0, mask = 0;
        return backtrack(curr, maxChoosableInteger, desiredTotal, mask, 0);
    }
};


// Source https://leetcode.com/problems/count-the-repetitions/

We define str = [s, n] as the string str which consists of the string s concatenated n times.

For example, str == ["abc", 3] =="abcabcabc".
We define that string s1 can be obtained from string s2 if we can remove some characters from s2 such that it becomes s1.

For example, s1 = "abc" can be obtained from s2 = "abdbec" based on our definition by removing the bolded underlined characters.
You are given two strings s1 and s2 and two integers n1 and n2. You have the two strings str1 = [s1, n1] and str2 = [s2, n2].

Return the maximum integer m such that str = [str2, m] can be obtained from str1.

 

Example 1:

Input: s1 = "acb", n1 = 4, s2 = "ab", n2 = 2
Output: 2

acbacbacbacb abab

Example 2:

Input: s1 = "acb", n1 = 1, s2 = "acb", n2 = 1
Output: 1
 

Constraints:

1 <= s1.length, s2.length <= 100
s1 and s2 consist of lowercase English letters.
1 <= n1, n2 <= 106

class Solution
{
public:
    int getMaxRepetitions(string s1, int n1, string s2, int n2)
    {
        int cnt = 0;
        int mark_s1 = -1, mark_n1 = -1, mark_cnt = -1, bLastPeriod = false;
        int i, j, k = 0;
        for(i = 0; i < n1; i++)
        {
            for(j = 0; j < s1.length(); j++)
            {
                if(s1[j] != s2[k]) continue;
                if(++k >= s2.length())
                {
                    k = 0;
                    cnt++;
                    if(mark_s1 == -1)
                    {
                        mark_s1 = j;
                        mark_n1 = i;
                        mark_cnt = cnt;
                    }
                    else
                    {
                        if(!bLastPeriod && mark_s1 == j) // found period
                        {
                            //i-mark_n1 is period
                            int more_periods = (n1 - 1 - i) / (i - mark_n1);
                            i += (more_periods * (i - mark_n1));
                            cnt += (more_periods * (cnt - mark_cnt));
                            bLastPeriod = true;
                        }
                    }
                }
            }
        }
        return cnt / n2; // cnt is repetitions of s2. needs to divide by n2
    }
};


// Source https://leetcode.com/problems/unique-substrings-in-wraparound-string/

We define the string s to be the infinite wraparound string of "abcdefghijklmnopqrstuvwxyz", so s will look like this:

"...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....".
Given a string p, return the number of unique non-empty substrings of p are present in s.

 

Example 1:

Input: p = "a"
Output: 1
Explanation: Only the substring "a" of p is in s.
Example 2:

Input: p = "cac"
Output: 2
Explanation: There are two substrings ("a", "c") of p in s.
Example 3:

Input: p = "zab"
Output: 6
Explanation: There are six substrings ("z", "a", "b", "za", "ab", and "zab") of p in s.
 

Constraints:

1 <= p.length <= 105
p consists of lowercase English letters.

class Solution
{
public:
    int findSubstringInWraproundString(string p)
    {
        vector<int> dp(26, 0);
        int i, count;
        for(i = 0; i < p.size(); i++)
        {
            if(i > 0 && (p[i - 1] - p[i] == 25 || p[i] - p[i - 1] == 1))
            {
                count++;
            }
            else
            {
                count = 1;
            }

            dp[p[i] - 'a'] = max(count, dp[p[i] - 'a']);
        }

        int ans = 0;
        for(int it : dp)
        {
            ans += it;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/validate-ip-address/

Given a string queryIP, return "IPv4" if IP is a valid IPv4 address, "IPv6" if IP is a valid IPv6 address or "Neither" if IP is not a correct IP of any type.

A valid IPv4 address is an IP in the form "x1.x2.x3.x4" where 0 <= xi <= 255 and xi cannot contain leading zeros. 
For example, "192.168.1.1" and "192.168.1.0" are valid IPv4 addresses but "192.168.01.1", while "192.168.1.00" and "192.168@1.1" are invalid IPv4 addresses.

A valid IPv6 address is an IP in the form "x1:x2:x3:x4:x5:x6:x7:x8" where:

1 <= xi.length <= 4
xi is a hexadecimal string which may contain digits, lower-case English letter ('a' to 'f') and upper-case English letters ('A' to 'F').
Leading zeros are allowed in xi.
For example, "2001:0db8:85a3:0000:0000:8a2e:0370:7334" and "2001:db8:85a3:0:0:8A2E:0370:7334" are valid IPv6 addresses, 
while "2001:0db8:85a3::8A2E:037j:7334" and "02001:0db8:85a3:0000:0000:8a2e:0370:7334" are invalid IPv6 addresses.

 

Example 1:

Input: queryIP = "172.16.254.1"
Output: "IPv4"
Explanation: This is a valid IPv4 address, return "IPv4".
Example 2:

Input: queryIP = "2001:0db8:85a3:0:0:8A2E:0370:7334"
Output: "IPv6"
Explanation: This is a valid IPv6 address, return "IPv6".
Example 3:

Input: queryIP = "256.256.256.256"
Output: "Neither"
Explanation: This is neither a IPv4 address nor a IPv6 address.
 

Constraints:

queryIP consists only of English letters, digits and the characters '.' and ':'.

class Solution
{
public:
    bool isip4(string &s)
    {
        int i = 0, dots = 0, n = s.length();
        while(i < n)
        {
            int j = i;
            while(j < n && s[j] != '.')
            {
                if(s[j] < '0' || s[j] > '9') return false;
                j++;
            }
            if(j == n - 1) return false;
            if (j == i) return false;
            if(j < n) dots++;
            if(dots > 3) return false;
            string t = s.substr(i, j - i);
            int tnum = stoi(t);
            int digits = 0;
            if(tnum >= 0 and tnum < 10) digits = 1;
            else if(tnum >= 10 and tnum < 100) digits = 2;
            else if(tnum >= 100 and tnum < 256) digits = 3;
            else return false;

            if(digits != t.length()) return false;
            i = j + 1;
        }

        if(dots != 3) return false;
        return true;
    }

    bool isip6(string &s)
    {
        int i = 0, colons = 0, n = s.length();
        while(i < n)
        {
            int j = i;
            while(j < n and s[j] != ':')
            {
                if( !((s[j] >= '0' and s[j] <= '9') || (s[j] >= 'a' and s[j] <= 'f') || (s[j] >= 'A' and s[j] <= 'F')) ) return false;
                j++;
            }
            if(j == n - 1) return false;
            if (j == i) return false;
            if(j < n) colons++;
            if(colons > 7) return false;
            if ((j - i) > 4) return false;
            i = j + 1;
        }

        if(colons != 7) return false;
        return true;
    }

    string validIPAddress(string s)
    {
        if(s.length() > 39) return "Neither";

        if(isip4(s)) return "IPv4";
        else if(isip6(s)) return "IPv6";
        return "Neither";
    }
};


// Source https://leetcode.com/problems/implement-rand10-using-rand7/

Given the API rand7() that generates a uniform random integer in the range [1, 7], write a function rand10() that generates a uniform random integer in the range [1, 10]. 
You can only call the API rand7(), and you shouldn't call any other API. Please do not use a language's built-in random API.

Each test case will have one internal argument n, the number of times that your implemented function rand10() will be called while testing. Note that this is not an argument passed to rand10().

 

Example 1:

Input: n = 1
Output: [2]
Example 2:

Input: n = 2
Output: [2,8]
Example 3:

Input: n = 3
Output: [3,8,10]
 

Constraints:

1 <= n <= 105

（rand2() - 1） * 2 + rand()2  =   ?
     1                  1         1	概率 1/2 * 1/2 = 1/4
     1                  2         2	概率 1/2 * 1/2 = 1/4
     2                  1         3	概率 1/2 * 1/2 = 1/4
     2                  2         4	概率 1/2 * 1/2 = 1/4

rand4() % 2 + 1 =  ?
   1               2		概率 1/4
   2               1		概率 1/4
   3               2		概率 1/4
   4               1		概率 1/4

rand6() % 2 + 1 =  ?
   1               2		概率 1/6
   2               1		概率 1/6
   3               2		概率 1/6
   4               1		概率 1/6
   5               2		概率 1/6
   6               1		概率 1/6
 (rand7() - 1) * 7 + rand7()
1		1	1	概率 1/7 * 1/7 = 1/49
1		2	2
1		3	3
1		4	4
1		5	5
1		6	6
1		7	7
...
7		1	43
7		2	44
7		3	45
7		4	46
7		5	47
7		6	48
7		7	49

出现1, 2, 3, ... ,49的概率都是1/49，如果只取1到40，则出现1, 2, 3, ... , 40的概率调整为1/40
rand40() % 10 + 1 =  ?
   1               2		概率 1/40
   2               3		概率 1/40
   3               4		概率 1/40
   4               5		概率 1/40
   5               6		概率 1/40
   6               7		概率 1/40
   7               8		概率 1/40
   8               9		概率 1/40
   9               10		概率 1/40
   10               1		概率 1/40

出现1, 2, 3, ... , 10的概率都是4/40 = 1/10


class Solution
{
public:
    int rand10()
    {
        while (true)
        {
            int num = (rand7() - 1) * 7 + rand7();
            if (num <= 40) return num % 10 + 1;
        }
    }
};


// Source https://leetcode.com/problems/concatenated-words/

Given an array of strings words (without duplicates), return all the concatenated words in the given list of words.

A concatenated word is defined as a string that is comprised entirely of at least two shorter words in the given array.

 

Example 1:

Input: words = ["cat","cats","catsdogcats","dog","dogcatsdog","hippopotamuses","rat","ratcatdogcat"]
Output: ["catsdogcats","dogcatsdog","ratcatdogcat"]
Explanation: "catsdogcats" can be concatenated by "cats", "dog" and "cats"; 
"dogcatsdog" can be concatenated by "dog", "cats" and "dog"; 
"ratcatdogcat" can be concatenated by "rat", "cat", "dog" and "cat".
Example 2:

Input: words = ["cat","dog","catdog"]
Output: ["catdog"]
 

Constraints:

1 <= words.length <= 104
0 <= words[i].length <= 30
words[i] consists of only lowercase English letters.
0 <= sum(words[i].length) <= 105

class Solution
{
public:
    class Trie
    {
    public:

        class Node
        {
        public:
            Node *child[26];
            bool isEnd;
            string str;

            Node()
            {
                str = "";
                isEnd = false;
                for(int i = 0; i < 26 ; i++)
                {
                    child[i] = NULL;
                }
            }
        };
        Node *root;
        vector<string> ans;

        Trie()
        {
            root = new Node();
        }

        void insert(string word)
        {
            Node *node = root;
            for(int i = 0; i < word.length(); ++i)
            {
                if(!(node->child[word[i] - 'a']))
                {
                    node->child[word[i] - 'a'] = new Node();
                }
                node = node->child[word[i] - 'a'];
            }
            node->isEnd = true;
            node->str = std::move(word);
        }

        void search(Node *curr, Node *nword)
        {
            if (nword->str == "")
            {
                for(int i = 0; i < 26; ++i)
                {
                    if(curr->child[i] != NULL && nword->child[i] != NULL)
                    {
                        search(curr->child[i], nword->child[i]);
                    }
                }
                return ;
            }
            if(curr->str != "" && curr->isEnd)
            {
                ans.push_back(curr->str);
                curr->isEnd = false;
            }

            search(curr, root);
            for(int i = 0; i < 26; ++i)
            {
                if(curr->child[i] != NULL && nword->child[i] != NULL)
                {
                    search(curr->child[i], nword->child[i]);
                }
            }
        }

        void recur(Node *curr, vector<Node *> &nodeVec)
        {
            if(curr->str != "")
            {
                nodeVec.push_back(curr);
            }
            for(int i = 0; i < 26; ++i)
            {
                if(curr->child[i] != NULL)
                {
                    recur(curr->child[i], nodeVec);
                }
            }
        }

        void searchPointer()
        {
            vector<Node *> nodeVec;
            nodeVec.reserve(3000);
            recur(root, nodeVec);
            int n = nodeVec.size();
            for (int i = 0; i < n; ++i)
            {
                search(nodeVec[i], root);
            }
        }

    };

    vector<string> findAllConcatenatedWordsInADict(vector<string> &words)
    {
        Trie obj;
        for(auto word : words)
        {
            obj.insert(std::move(word));
        }
        obj.searchPointer();
        return obj.ans;
    }
};


// Source https://leetcode.com/problems/matchsticks-to-square/

You are given an integer array matchsticks where matchsticks[i] is the length of the ith matchstick. 
You want to use all the matchsticks to make one square. You should not break any stick, but you can link them up, and each matchstick must be used exactly one time.

Return true if you can make this square and false otherwise.

 

Example 1:


Input: matchsticks = [1,1,2,2,2]
Output: true
Explanation: You can form a square with length 2, one side of the square came two sticks with length 1.
Example 2:

Input: matchsticks = [3,3,3,3,4]
Output: false
Explanation: You cannot find a way to form a square with all the matchsticks.
 

Constraints:

1 <= matchsticks.length <= 15
1 <= matchsticks[i] <= 108

class Solution
{
public:
    int n;
    vector<int> dp;

    bool helper(int cur, int target, int cnt, int k, int mask, vector<int> &s)
    {
        if (cnt == k)
            return true;
        if (dp[mask] != -1) return dp[mask];
        bool res = false;
        for (int i = 0; i < n && !res; i++)
        {
            if (mask & (1 << i)) continue;
            if (cur + s[i] > target) break;
            if (cur + s[i] == target)
            {
                res = helper(0, target, cnt + 1, k, mask + (1 << i), s);
            }
            else
            {
                res = helper(cur + s[i], target, cnt, k, mask + (1 << i), s);
            }
        }
        return dp[mask] = res;
    }

    bool makesquare(vector<int> &s)
    {
        int sum = 0;
        for (int val : s) sum += val;
        if (sum % 4 != 0) return false;
        int target = sum / 4;
        sort(s.begin(), s.end());
        n = s.size();
        dp = vector<int>(1 << n, -1);
        return helper(0, target, 0, 4, 0, s);
    }
};


// Source https://leetcode.com/problems/ones-and-zeroes/

You are given an array of binary strings strs and two integers m and n.

Return the size of the largest subset of strs such that there are at most m 0's and n 1's in the subset.

A set x is a subset of a set y if all elements of x are also elements of y.

 

Example 1:

Input: strs = ["10","0001","111001","1","0"], m = 5, n = 3
Output: 4
Explanation: The largest subset with at most 5 0's and 3 1's is {"10", "0001", "1", "0"}, so the answer is 4.
Other valid but smaller subsets include {"0001", "1"} and {"10", "1", "0"}.
{"111001"} is an invalid subset because it contains 4 1's, greater than the maximum of 3.
Example 2:

Input: strs = ["10","0","1"], m = 1, n = 1
Output: 2
Explanation: The largest subset is {"0", "1"}, so the answer is 2.
 

Constraints:

1 <= strs.length <= 600
1 <= strs[i].length <= 100
strs[i] consists only of digits '0' and '1'.
1 <= m, n <= 100

class Solution
{
public:
    int cntZero, cntOne;
    int dp[601][101][101];

    int recur(vector<string> &s, int idx, int cntZ, int cntO)
    {
        if(idx >= s.size())
        {
            return 0;
        }
        if(cntZ >= cntZero && cntO >= cntOne)
        {
            return 0;
        }
        if(dp[idx][cntZ][cntO] != -1) return dp[idx][cntZ][cntO];
        int cnt0 = 0;
        for(auto ch : s[idx])
        {
            if(ch == '0')
            {
                cnt0++;
            }
        }
        int cnt1 = s[idx].size() - cnt0;
        int resPick = 0;
        if((cntZ + cnt0 <= cntZero) && (cntO + cnt1 <= cntOne))
        {
            resPick = 1 + recur(s, idx + 1, cntZ + cnt0, cntO + cnt1);
        }
        int resNoPick = recur(s, idx + 1, cntZ, cntO);
        return dp[idx][cntZ][cntO] = max(resNoPick, resPick);
    }

    int findMaxForm(vector<string> &strs, int m, int n)
    {
        cntZero = m;
        cntOne = n;
        memset(dp, -1, sizeof(dp));
        return recur(strs, 0, 0, 0);
    }
};


// Source https://leetcode.com/problems/heaters/

Winter is coming! During the contest, your first job is to design a standard heater with a fixed warm radius to warm all the houses.

Every house can be warmed, as long as the house is within the heater's warm radius range. 

Given the positions of houses and heaters on a horizontal line, return the minimum radius standard of heaters so that those heaters could cover all houses.

Notice that all the heaters follow your radius standard, and the warm radius will the same.

 

Example 1:

Input: houses = [1,2,3], heaters = [2]
Output: 1
Explanation: The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.
Example 2:

Input: houses = [1,2,3,4], heaters = [1,4]
Output: 1
Explanation: The two heater was placed in the position 1 and 4. We need to use radius 1 standard, then all the houses can be warmed.
Example 3:

Input: houses = [1,5], heaters = [2]
Output: 3
 

Constraints:

1 <= houses.length, heaters.length <= 3 * 104
1 <= houses[i], heaters[i] <= 109

class Solution
{
public:
    int findRadius(vector<int> &houses, vector<int> &heaters)
    {
        int n = heaters.size(), j = 0, res = 0;
        sort(houses.begin(), houses.end());
        sort(heaters.begin(), heaters.end());
        for (int i = 0; i < houses.size(); ++i)
        {
            int cur = houses[i];
            while (j < n - 1 && abs(heaters[j + 1] - cur) <= abs(heaters[j] - cur))
            {
                ++j;
            }
            res = max(res, abs(heaters[j] - cur));
        }
        return res;
    }
};


// Source https://leetcode.com/problems/number-complement/

The complement of an integer is the integer you get when you flip all the 0's to 1's and all the 1's to 0's in its binary representation.

For example, The integer 5 is "101" in binary and its complement is "010" which is the integer 2.
Given an integer num, return its complement.

 

Example 1:

Input: num = 5
Output: 2
Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.
Example 2:

Input: num = 1
Output: 0
Explanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.
 

Constraints:

1 <= num < 231

class Solution
{
public:

    int findComplement(int num)
    {
        vector<int> v;
        // convert from decimal to binary
        while(num > 0)
        {
            v.push_back(num % 2);
            num = num / 2;
        }
        // Compliment
        for(int i = 0; i < v.size(); i++)
        {
            if(v[i] == 0)
            {
                v[i] = 1;
            }
            else if(v[i] == 1)
            {
                v[i] = 0;
            }
        }
        int ans = 0;
        // binary to decimal again
        for(int i = 0 ; i < v.size(); i++)
        {
            ans += (v[i] * pow(2, i));
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/total-hamming-distance/

The Hamming distance between two integers is the number of positions at which the corresponding bits are different.

Given an integer array nums, return the sum of Hamming distances between all the pairs of the integers in nums.

 

Example 1:

Input: nums = [4,14,2]
Output: 6
Explanation: In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just
showing the four bits relevant in this case).
The answer will be:
HammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.

Example 2:

Input: nums = [4,14,4]
Output: 4
 

Constraints:

1 <= nums.length <= 104
0 <= nums[i] <= 109
The answer for the given input will fit in a 32-bit integer.

class Solution
{
public:
    int totalHammingDistance(vector<int> &nums)
    {
        int res = 0, n = nums.size();
        for (int i = 0; i < 32; ++i)
        {
            int cnt = 0;
            for (int num : nums)
            {
                if (num & (1 << i)) ++cnt;
            }
            res += cnt * (n - cnt);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/generate-random-point-in-a-circle/

Given the radius and the position of the center of a circle, implement the function randPoint which generates a uniform random point inside the circle.

Implement the Solution class:

Solution(double radius, double x_center, double y_center) initializes the object with the radius of the circle radius and the position of the center (x_center, y_center).
randPoint() returns a random point inside the circle. A point on the circumference of the circle is considered to be in the circle. The answer is returned as an array [x, y].
 

Example 1:

Input
["Solution", "randPoint", "randPoint", "randPoint"]
[[1.0, 0.0, 0.0], [], [], []]
Output
[null, [-0.02493, -0.38077], [0.82314, 0.38945], [0.36572, 0.17248]]

Explanation
Solution solution = new Solution(1.0, 0.0, 0.0);
solution.randPoint(); // return [-0.02493, -0.38077]
solution.randPoint(); // return [0.82314, 0.38945]
solution.randPoint(); // return [0.36572, 0.17248]
 

Constraints:

0 < radius <= 108
-107 <= x_center, y_center <= 107
At most 3 * 104 calls will be made to randPoint.

class Solution
{
public:
    double x;
    double y;
    double r;
    Solution(double radius, double x_center, double y_center)
    {
        x = x_center;
        y = y_center;
        r = radius;
    }
    vector<double> randPoint()
    {
        double theta = 2 * M_PI * ((double)rand() / RAND_MAX);
        double len = sqrt((double)rand() / RAND_MAX) * r;
        return {x + len * cos(theta), y + len * sin(theta)};
    }
};


// Source https://leetcode.com/problems/largest-palindrome-product/

Given an integer n, return the largest palindromic integer that can be represented as the product of two n-digits integers. Since the answer can be very large, return it modulo 1337.

 

Example 1:

Input: n = 2
Output: 987
Explanation: 99 x 91 = 9009, 9009 % 1337 = 987
Example 2:

Input: n = 1
Output: 9
 

Constraints:

1 <= n <= 8

9
9009, 99, 91
906609, 993, 913
99000099, 9999, 9901
9966006699, 99979, 99681
999000000999, 999999, 999001
99956644665999, 9998017, 9997647
9999000000009999, 99999999, 99990001


class Solution
{
public:
    int largestPalindrome(int n)
    {
        int upper = pow(10, n) - 1, lower = upper / 10;
        for (int i = upper; i > lower; --i)
        {
            string t = to_string(i);
            long p = stol(t + string(t.rbegin(), t.rend()));
            for (long j = upper; j * j > p; --j)
            {
                if (p % j == 0) return p % 1337;
            }
        }
        return 9;
    }
};


// Source https://leetcode.com/problems/sliding-window-median/

The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle values.

For examples, if arr = [2,3,4], the median is 3.
For examples, if arr = [1,2,3,4], the median is (2 + 3) / 2 = 2.5.
You are given an integer array nums and an integer k. There is a sliding window of size k which is moving from the very left of the array to the very right. 
You can only see the k numbers in the window. Each time the sliding window moves right by one position.

Return the median array for each window in the original array. Answers within 10-5 of the actual value will be accepted.

 

Example 1:

Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [1.00000,-1.00000,-1.00000,3.00000,5.00000,6.00000]
Explanation: 
Window position                Median
---------------                -----
[1  3  -1] -3  5  3  6  7        1
 1 [3  -1  -3] 5  3  6  7       -1
 1  3 [-1  -3  5] 3  6  7       -1
 1  3  -1 [-3  5  3] 6  7        3
 1  3  -1  -3 [5  3  6] 7        5
 1  3  -1  -3  5 [3  6  7]       6
Example 2:

Input: nums = [1,2,3,4,2,3,1,4,2], k = 3
Output: [2.00000,3.00000,3.00000,3.00000,2.00000,3.00000,2.00000]
 

Constraints:

1 <= k <= nums.length <= 105
-231 <= nums[i] <= 231 - 1


class Solution
{
public:
    vector<double> medianSlidingWindow(vector<int> &nums, int k)
    {
        vector<double> res;
        multiset<int> small, large;
        for (int i = 0; i < nums.size(); ++i)
        {
            if (i >= k)
            {
                if (small.count(nums[i - k])) small.erase(small.find(nums[i - k]));
                else if (large.count(nums[i - k])) large.erase(large.find(nums[i - k]));
            }
            if (small.size() <= large.size())
            {
                if (large.empty() || nums[i] <= *large.begin()) small.insert(nums[i]);
                else
                {
                    small.insert(*large.begin());
                    large.erase(large.begin());
                    large.insert(nums[i]);
                }
            }
            else
            {
                if (nums[i] >= *small.rbegin()) large.insert(nums[i]);
                else
                {
                    large.insert(*small.rbegin());
                    small.erase(--small.end());
                    small.insert(nums[i]);
                }
            }
            if (i >= (k - 1))
            {
                if (k % 2) res.push_back(*small.rbegin());
                else res.push_back(((double)*small.rbegin() + *large.begin()) / 2);
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/magical-string/

A magical string s consists of only '1' and '2' and obeys the following rules:

The string s is magical because concatenating the number of contiguous occurrences of characters '1' and '2' generates the string s itself.
The first few elements of s is s = "1221121221221121122……". If we group the consecutive 1's and 2's in s, it will be "1 22 11 2 1 22 1 22 11 2 11 22 ......" 
and the occurrences of 1's or 2's in each group are "1 2 2 1 1 2 1 2 2 1 2 2 ......". You can see that the occurrence sequence is s itself.

Given an integer n, return the number of 1's in the first n number in the magical string s.

根据第三个数字2开始往后生成数字，此时生成两个1，然后根据第四个数字1，生成一个2，再根据第五个数字1，生成一个1，以此类推，生成的数字1或2可能通过异或3来交替生成，
在生成的过程中同时统计1的个数即可

Example 1:

Input: n = 6
Output: 3
Explanation: The first 6 elements of magical string s is "122112" and it contains three 1's, so return 3.
Example 2:

Input: n = 1
Output: 1
 

Constraints:

1 <= n <= 105

class Solution
{
public:
    int magicalString(int n)
    {
        string s = "122";
        int k = 2, res = 0, one, two;
        while(s.length() < n)
        {
            one = s[k++] - '0';
            while(one--) s += '1';
            two = s[k++] - '0';
            while(two--) s += '2';
        }
        for(int i = 0; i < n; i++) if(s[i] == '1') res++;
        return res;
    }
};


// Source https://leetcode.com/problems/license-key-formatting/

You are given a license key represented as a string s that consists of only alphanumeric characters and dashes. 
The string is separated into n + 1 groups by n dashes. You are also given an integer k.

We want to reformat the string s such that each group contains exactly k characters, except for the first group, which could be shorter than k but still must contain at least one character. 
Furthermore, there must be a dash inserted between two groups, and you should convert all lowercase letters to uppercase.

Return the reformatted license key.

 

Example 1:

Input: s = "5F3Z-2e-9-w", k = 4
Output: "5F3Z-2E9W"
Explanation: The string s has been split into two parts, each part has 4 characters.
Note that the two extra dashes are not needed and can be removed.
Example 2:

Input: s = "2-5g-3-J", k = 2
Output: "2-5G-3J"
Explanation: The string s has been split into three parts, each part has 2 characters except the first part as it could be shorter as mentioned above.
 

Constraints:

1 <= s.length <= 105
s consists of English letters, digits, and dashes '-'.
1 <= k <= 104

class Solution
{
public:
    string licenseKeyFormatting(string s, int k)
    {
        string ss = ""; //string without '-'
        for(auto c : s)
        {
            if(c == '-') {}
            else
            {
                if(c > 96) c -= 32; //transform to upper (ASCII ->'a'=97,'A'=65)
                ss += c;
            }
        }
        s = "";
        reverse(ss.begin(), ss.end());
        int cnt = 0;
        for(auto c : ss)
        {
            if(cnt == k)
            {
                s.push_back('-');    // add '-'
                cnt = 0;
            }
            s.push_back(c);
            cnt++;
        }
        reverse(s.begin(), s.end()); //reverse the result.
        return s;
    }
};


// Source https://leetcode.com/problems/smallest-good-base/

Given an integer n represented as a string, return the smallest good base of n.

We call k >= 2 a good base of n, if all digits of n base k are 1's.

 

Example 1:

Input: n = "13"
Output: "3"
Explanation: 13 base 3 is 111.
Example 2:

Input: n = "4681"
Output: "8"
Explanation: 4681 base 8 is 11111.
Example 3:

Input: n = "1000000000000000000"
Output: "999999999999999999"
Explanation: 1000000000000000000 base 999999999999999999 is 11.
 

Constraints:

n is an integer in the range [3, 10^18].
n does not contain any leading zeros.

如果我们用k表示基数，m表示转为全1数字的位数，那么数字n就可以拆分为：

n = 1 + k + k^2 + k^3 + ... + k^(m-1)，k >= 2
等比数列求和公式
sm = a1 * (1 - k^m) / (1 - k), k != 1
1 + 3 + 9 + 27 = 40 = （3 ^ 4 - 1) / (3 - 1) = 80 / 2 = 40
1 + 2 + 4 + 8 = 15 = (2 ^ 4 - 1) / (2 - 1) = 15

在n恒定的情况，k越小则m越大

k >= 2 && k <= n - 1
当k = n - 1时 n = 1 + k，m = 2
当k = 2时，n = (2 ^ m - 1)，m = log2(n + 1)
n > k ^(m - 1)
n ^ (1 / m - 1) > k

class Solution
{
public:
    string smallestGoodBase(string n)
    {
        long long num = stol(n);
        for (int m = log2(num + 1); m >= 2; --m)
        {
            long long left = 2, right = pow(num, 1.0 / (m - 1)) + 1;
            while (left < right)
            {
                long long mid = left + (right - left) / 2, sum = 0;
                for (int j = 0; j < m; ++j)
                {
                    sum = sum * mid + 1;
                }
                if (sum == num) return to_string(mid);
                if (sum < num) left = mid + 1;
                else right = mid;
            }
        }
        return to_string(num - 1);
    }
};


// Source https://leetcode.com/problems/max-consecutive-ones/

Given a binary array nums, return the maximum number of consecutive 1's in the array.

 

Example 1:

Input: nums = [1,1,0,1,1,1]
Output: 3
Explanation: The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3.
Example 2:

Input: nums = [1,0,1,1,0,1]
Output: 2
 

Constraints:

1 <= nums.length <= 105
nums[i] is either 0 or 1.

class Solution
{
public:
    int findMaxConsecutiveOnes(vector<int> &nums)
    {
        int count = 0;
        int res = 0;
        int n = nums.size();
        for(int i = 0; i < n; i++)
        {
            if(nums[i] == 1)
            {
                count++;
            }
            else
            {
                count = 0;
            }
            res = max(res, count);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/predict-the-winner/

You are given an integer array nums. Two players are playing a game with this array: player 1 and player 2.

Player 1 and player 2 take turns, with player 1 starting first. Both players start the game with a score of 0. 
At each turn, the player takes one of the numbers from either end of the array (i.e., nums[0] or nums[nums.length - 1]) which reduces the size of the array by 1. 
The player adds the chosen number to their score. The game ends when there are no more elements in the array.

Return true if Player 1 can win the game. If the scores of both players are equal, then player 1 is still the winner, and you should also return true. 
You may assume that both players are playing optimally.

 

Example 1:

Input: nums = [1,5,2]
Output: false
Explanation: Initially, player 1 can choose between 1 and 2. 
If he chooses 2 (or 1), then player 2 can choose from 1 (or 2) and 5. If player 2 chooses 5, then player 1 will be left with 1 (or 2). 
So, final score of player 1 is 1 + 2 = 3, and player 2 is 5. 
Hence, player 1 will never be the winner and you need to return false.
Example 2:

Input: nums = [1,5,233,7]
Output: true
Explanation: Player 1 first chooses 1. Then player 2 has to choose between 5 and 7. No matter which number player 2 choose, player 1 can choose 233.
Finally, player 1 has more score (234) than player 2 (12), so you need to return True representing player1 can win.
 

Constraints:

1 <= nums.length <= 20
0 <= nums[i] <= 107

class Solution
{
public:
    int dp[25][25];
    bool PredictTheWinner(vector<int> &nums)
    {
        int n = nums.size();
        memset(dp, -1, sizeof(dp));
        int val = recur(nums, 0, n - 1);
        return val >= 0;
    }

    int recur(vector<int> &v, int start, int end)
    {
        if(start == end) return v[start] ;
        if(dp[start][end] != -1) return dp[start][end];
        int x = v[start] - recur(v, start + 1, end);
        int y = v[end] - recur(v, start, end - 1);
        return dp[start][end] = max(x, y);
    }
};


// Source https://leetcode.com/problems/zuma-game/

You are playing a variation of the game Zuma.

In this variation of Zuma, there is a single row of colored balls on a board, where each ball can be colored red 'R', yellow 'Y', blue 'B', green 'G', or white 'W'. 
You also have several colored balls in your hand.

Your goal is to clear all of the balls from the board. On each turn:

Pick any ball from your hand and insert it in between two balls in the row or on either end of the row.
If there is a group of three or more consecutive balls of the same color, remove the group of balls from the board.
If this removal causes more groups of three or more of the same color to form, then continue removing each group until there are none left.
If there are no more balls on the board, then you win the game.
Repeat this process until you either win or do not have any more balls in your hand.
Given a string board, representing the row of balls on the board, and a string hand, representing the balls in your hand, 
return the minimum number of balls you have to insert to clear all the balls from the board. 
If you cannot clear all the balls from the board using the balls in your hand, return -1.

 

Example 1:

Input: board = "WRRBBW", hand = "RB"
Output: -1
Explanation: It is impossible to clear all the balls. The best you can do is:
- Insert 'R' so the board becomes WRRRBBW. WRRRBBW -> WBBW.
- Insert 'B' so the board becomes WBBBW. WBBBW -> WW.
There are still balls remaining on the board, and you are out of balls to insert.
Example 2:

Input: board = "WWRRBBWW", hand = "WRBRW"
Output: 2
Explanation: To make the board empty:
- Insert 'R' so the board becomes WWRRRBBWW. WWRRRBBWW -> WWBBWW.
- Insert 'B' so the board becomes WWBBBWW. WWBBBWW -> WWWW -> empty.
2 balls from your hand were needed to clear the board.
Example 3:

Input: board = "G", hand = "GGGGG"
Output: 2
Explanation: To make the board empty:
- Insert 'G' so the board becomes GG.
- Insert 'G' so the board becomes GGG. GGG -> empty.
2 balls from your hand were needed to clear the board.
 

Constraints:

1 <= board.length <= 16
1 <= hand.length <= 5
board and hand consist of the characters 'R', 'Y', 'B', 'G', and 'W'.
The initial row of balls on the board will not have any groups of three or more consecutive balls of the same color.

class Solution
{
public:
    int findMinStep(string board, string hand)
    {
        sort(hand.begin(), hand.end()); // sort the hand so balls of same colour come together
        queue<string> bq; // queue for board
        queue<string> hq; // queue for hand
        queue<int> stepq; // queue for steps
        unordered_set<string> visited; // visited set for caching
        visited.insert(board + "#" + hand);
        bq.push(board);
        hq.push(hand);
        stepq.push(0); // start at step 0
        while(!hq.empty())
        {
            string curBoard = bq.front();
            bq.pop();
            string curHand = hq.front();
            hq.pop();
            int curStep = stepq.front();
            stepq.pop();

            for(int i = 0; i < curBoard.length(); i++)
            {
                for(int j = 0; j < curHand.length(); j++)
                {
                    if(j > 0 && curHand[j] == curHand[j - 1]) continue;
                    // 假如curHand[j] = a，curBoard[i - 1] = a，curBoard[i] = a
                    // 则i - 1 + j + i = a a a，与 j i - 1 i = a a a 重复
                    // 假如curHand[j] = b，curBoard[i - 1] = b，curBoard[i] = a
                    // 则i - 1 + j + a = b b a，与j i -1 i = b b a 重复
                    if(i > 0 && curBoard[i - 1] == curHand[j]) continue; 

                    bool worthTrying = false;

                    if(curBoard[i] == curHand[j]) worthTrying = true;
                    // "RRWWRRBBRR"
                    // "WB"
                    // RBRWWRRBBRR
                    // W
                    // RBRWWWRRBBRR
                    // RBRRRBBRR
                    // RBBBRR
                    // RRR
                    // 空
                    else if(i > 0 && curBoard[i] == curBoard[i - 1] && curBoard[i] != curHand[j]) worthTrying = true;

                    if(worthTrying)
                    {
                        string newBoard = updateBoard(curBoard.substr(0, i)
                                                      + curHand[j]
                                                      + curBoard.substr(i), i);
                        if(newBoard == "") return curStep + 1;
                        string newHand = curHand.substr(0, j) + curHand.substr(j + 1);
                        if(visited.find(newBoard + "#" + newHand) == visited.end())
                        {
                            bq.push(newBoard);
                            hq.push(newHand);
                            stepq.push(curStep + 1);
                            visited.insert(newBoard + "#" + newHand);
                        }
                    }
                }
            }
        }
        return -1;
    }
    string updateBoard(string board, int idx)
    {
        if(idx < 0) return board;
        int left = idx, right = idx;
        while(left > 0 && board[left] == board[left - 1]) left--;
        while(right < board.length() - 1 && board[right] == board[right + 1]) right++;

        int sameClrLen = right - left + 1;
        if(sameClrLen >= 3)
            return updateBoard(board.substr(0, left) + board.substr(right + 1), left - 1);
        else
            return board;
    }
};


// Source https://leetcode.com/problems/increasing-subsequences/

Given an integer array nums, return all the different possible increasing subsequences of the given array with at least two elements. You may return the answer in any order.

The given array may contain duplicates, and two equal integers should also be considered a special case of increasing sequence.

 

Example 1:

Input: nums = [4,6,7,7]
Output: [[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]
Example 2:

Input: nums = [4,4,3,2,1]
Output: [[4,4]]
 
4,6,7,7
4,6,7,不选 这种不要
4,6,不选,7 这种要
4,6,不选,不选 这种要

4,6,7,7,7,7,7
4,6,7,7,7,7,不选 这种不要
4,6,7,7,7,不选  这种不要
4,6,7,7,不选  这种不要
4,6,7,不选  这种不要
4,6,不选,7,7,7,7
4,6,不选,不选,7,7,7
4,6,不选,不选,不选,7,7
4,6,不选,不选,不选,不选,7
4,6,不选,不选,不选,不选,不选

Constraints:

1 <= nums.length <= 15
-100 <= nums[i] <= 100

class Solution
{
public:
    void solving(vector<int> &nums, vector<vector<int>> &output, vector<int> &temp, int index)
    {
        if(index >= nums.size())
        {
            if(temp.size() > 1)
                output.push_back(temp);
            return;
        }
        if(temp.size() == 0 || nums[index] >= temp[temp.size() - 1])
        {
            temp.push_back(nums[index]);
            solving(nums, output, temp, index + 1);
            temp.pop_back();
        }
        if(temp.size() == 0 || temp[temp.size() - 1] != nums[index])
        {
            solving(nums, output, temp, index + 1);
        }
    }

    vector<vector<int>> findSubsequences(vector<int> &nums)
    {
        vector<vector<int>> output;
        vector<int> temp;
        solving(nums, output, temp, 0);
        return output;
    }
};


// Source https://leetcode.com/problems/construct-the-rectangle/

A web developer needs to know how to design a web page's size. So, given a specific rectangular web page’s area, your job by now is to design a rectangular web page, 
whose length L and width W satisfy the following requirements:

The area of the rectangular web page you designed must equal to the given target area.
The width W should not be larger than the length L, which means L >= W.
The difference between length L and width W should be as small as possible.
Return an array [L, W] where L and W are the length and width of the web page you designed in sequence.

 

Example 1:

Input: area = 4
Output: [2,2]
Explanation: The target area is 4, and all the possible ways to construct it are [1,4], [2,2], [4,1]. 
But according to requirement 2, [1,4] is illegal; according to requirement 3,  [4,1] is not optimal compared to [2,2]. So the length L is 2, and the width W is 2.
Example 2:

Input: area = 37
Output: [37,1]
Example 3:

Input: area = 122122
Output: [427,286]
 

Constraints:

1 <= area <= 107

class Solution
{
public:
    vector<int> constructRectangle(int area)
    {
        int m = sqrt(area);
        while (area % m != 0)
        {
            m--;
        }
        return {area / m, m};
    }
};


// Source https://leetcode.com/problems/reverse-pairs/

Given an integer array nums, return the number of reverse pairs in the array.

A reverse pair is a pair (i, j) where 0 <= i < j < nums.length and nums[i] > 2 * nums[j].

 

Example 1:

Input: nums = [1,3,2,3,1]
Output: 2
Example 2:

Input: nums = [2,4,3,5,1]
Output: 3
 

Constraints:

1 <= nums.length <= 5 * 104
-231 <= nums[i] <= 231 - 1


class Solution
{
public:
    int reversePairs(vector<int> &nums)
    {
        int res = 0, n = nums.size();
        vector<int> v = nums, bit(n + 1);
        sort(v.begin(), v.end());
        unordered_map<int, int> m;
        for (int i = 0; i < n; ++i) m[v[i]] = i + 1;
        for (int i = n - 1; i >= 0; --i)
        {
            auto idx = lower_bound(v.begin(), v.end(), nums[i] / 2.0) - v.begin();
            res += getSum(idx, bit);
            update(m[nums[i]], bit);
        }
        return res;
    }
    int getSum(int i, vector<int> &bit)
    {
        int sum = 0;
        while (i > 0)
        {
            sum += bit[i];
            i -= (i & -i);
        }
        return sum;
    }
    void update(int i, vector<int> &bit)
    {
        while (i < bit.size())
        {
            bit[i] += 1;
            i += (i & -i);
        }
    }
};


// Source https://leetcode.com/problems/target-sum/

You are given an integer array nums and an integer target.

You want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.

For example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression "+2-1".
Return the number of different expressions that you can build, which evaluates to target.

 

Example 1:

Input: nums = [1,1,1,1,1], target = 3
Output: 5
Explanation: There are 5 ways to assign symbols to make the sum of nums be target 3.
-1 + 1 + 1 + 1 + 1 = 3
+1 - 1 + 1 + 1 + 1 = 3
+1 + 1 - 1 + 1 + 1 = 3
+1 + 1 + 1 - 1 + 1 = 3
+1 + 1 + 1 + 1 - 1 = 3
Example 2:

Input: nums = [1], target = 1
Output: 1
 

Constraints:

1 <= nums.length <= 20
0 <= nums[i] <= 1000
0 <= sum(nums[i]) <= 1000
-1000 <= target <= 1000

class Solution
{
public:
    int n;
    vector<vector<int>>dp;

    int recur(vector<int> &nums, int index, int sumTotal, int sumCurr)
    {
        if (sumCurr > sumTotal) return 0;
        if (sumCurr == sumTotal)
        {
            int cnt = 0;
            for (int i = index; i < n; ++i)
            {
                if (nums[i] == 0) ++cnt;
            }
            return (1 << cnt);
        }
        if (index >= n) return 0;
        if(dp[index][sumCurr] != -1) return dp[index][sumCurr];
        int cntNoPick = recur(nums, index + 1, sumTotal, sumCurr);
        int cntPick = recur(nums, index + 1, sumTotal, sumCurr + nums[index]);
        return dp[index][sumCurr] = (cntNoPick + cntPick);
    }

    int findTargetSumWays(vector<int> &nums, int target)
    {
        int total = 0;
        for (auto val : nums) total += val;
        int diff = total - target;
        if(target > total || diff % 2 != 0) return 0;
        n = nums.size();
        dp = vector<vector<int>>(n + 1, vector<int>(diff / 2 + 1, -1));
        return recur(nums, 0, diff / 2, 0);
    }
};


// Source https://leetcode.com/problems/teemo-attacking/

Our hero Teemo is attacking an enemy Ashe with poison attacks! When Teemo attacks Ashe, Ashe gets poisoned for a exactly duration seconds. 
More formally, an attack at second t will mean Ashe is poisoned during the inclusive time interval [t, t + duration - 1]. 
If Teemo attacks again before the poison effect ends, the timer for it is reset, and the poison effect will end duration seconds after the new attack.

You are given a non-decreasing integer array timeSeries, where timeSeries[i] denotes that Teemo attacks Ashe at second timeSeries[i], and an integer duration.

Return the total number of seconds that Ashe is poisoned.

 

Example 1:

Input: timeSeries = [1,4], duration = 2
Output: 4
Explanation: Teemo's attacks on Ashe go as follows:
- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.
- At second 4, Teemo attacks, and Ashe is poisoned for seconds 4 and 5.
Ashe is poisoned for seconds 1, 2, 4, and 5, which is 4 seconds in total.
Example 2:

Input: timeSeries = [1,2], duration = 2
Output: 3
Explanation: Teemo's attacks on Ashe go as follows:
- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.
- At second 2 however, Teemo attacks again and resets the poison timer. Ashe is poisoned for seconds 2 and 3.
Ashe is poisoned for seconds 1, 2, and 3, which is 3 seconds in total.
 

Constraints:

1 <= timeSeries.length <= 104
0 <= timeSeries[i], duration <= 107
timeSeries is sorted in non-decreasing order.

class Solution
{
public:
    int findPoisonedDuration(vector<int> &timeSeries, int duration)
    {
        int n = timeSeries.size();
        if(n == 1) return duration;

        int ans = 0;
        for(int i = 0; i < n - 1; i++)
        {
            if(timeSeries[i + 1] - timeSeries[i] < duration)
                ans += timeSeries[i + 1] - timeSeries[i];
            else
                ans += duration;
        }
        ans += duration;
        return ans;
    }
};


// Source https://leetcode.com/problems/next-greater-element-i/

The next greater element of some element x in an array is the first greater element that is to the right of x in the same array.

You are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.

For each 0 <= i < nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2. 
If there is no next greater element, then the answer for this query is -1.

Return an array ans of length nums1.length such that ans[i] is the next greater element as described above.

 

Example 1:

Input: nums1 = [4,1,2], nums2 = [1,3,4,2]
Output: [-1,3,-1]
Explanation: The next greater element for each value of nums1 is as follows:
- 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.
- 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3.
- 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.
Example 2:

Input: nums1 = [2,4], nums2 = [1,2,3,4]
Output: [3,-1]
Explanation: The next greater element for each value of nums1 is as follows:
- 2 is underlined in nums2 = [1,2,3,4]. The next greater element is 3.
- 4 is underlined in nums2 = [1,2,3,4]. There is no next greater element, so the answer is -1.
 

Constraints:

1 <= nums1.length <= nums2.length <= 1000
0 <= nums1[i], nums2[i] <= 104
All integers in nums1 and nums2 are unique.
All the integers of nums1 also appear in nums2.

class Solution
{
public:
    vector<int> nextGreaterElement(vector<int> &nums1, vector<int> &nums2)
    {
        int len1 = nums1.size();
        unordered_map<int, int> mp;
        for(int i = 0; i < len1; i++) mp[nums1[i]] = i + 1;
        vector<int> ans(len1, -1);
        stack<int> st;
        int len2 = nums2.size();
        for(int i = len2 - 1; i >= 0; i--)
        {
            int idx = mp[nums2[i]];
            if(idx)
            {
                if(st.size() == 0)
                {
                    ans[idx - 1] = -1;
                }
                else
                {
                    int temp = -1;
                    while(!st.empty())
                    {
                        int top = st.top();
                        if (top > nums2[i])
                        {
                            temp = top;
                            break;
                        }
                        else
                        {
                            st.pop();
                        }
                    }
                    ans[idx - 1] = temp;
                }
            }

            st.push(nums2[i]);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/random-point-in-non-overlapping-rectangles/

You are given an array of non-overlapping axis-aligned rectangles rects 
where rects[i] = [ai, bi, xi, yi] indicates that (ai, bi) is the bottom-left corner point of the ith rectangle and (xi, yi) is the top-right corner point of the ith rectangle. 
Design an algorithm to pick a random integer point inside the space covered by one of the given rectangles. 
A point on the perimeter of a rectangle is included in the space covered by the rectangle.

Any integer point inside the space covered by one of the given rectangles should be equally likely to be returned.

Note that an integer point is a point that has integer coordinates.

Implement the Solution class:

Solution(int[][] rects) Initializes the object with the given rectangles rects.
int[] pick() Returns a random integer point [u, v] inside the space covered by one of the given rectangles.
 

Example 1:


Input
["Solution", "pick", "pick", "pick", "pick", "pick"]
[[[[-2, -2, 1, 1], [2, 2, 4, 6]]], [], [], [], [], []]
Output
[null, [1, -2], [1, -1], [-1, -2], [-2, -2], [0, 0]]

Explanation
Solution solution = new Solution([[-2, -2, 1, 1], [2, 2, 4, 6]]);
solution.pick(); // return [1, -2]
solution.pick(); // return [1, -1]
solution.pick(); // return [-1, -2]
solution.pick(); // return [-2, -2]
solution.pick(); // return [0, 0]
 

Constraints:

1 <= rects.length <= 100
rects[i].length == 4
-109 <= ai < xi <= 109
-109 <= bi < yi <= 109
xi - ai <= 2000
yi - bi <= 2000
All the rectangles do not overlap.
At most 104 calls will be made to pick.

class Solution
{
public:
    vector<vector<int>> rects;
    vector<int> weights;
    int area_total;

    Solution(vector<vector<int>> &rects)
    {
        this->rects = rects;
        area_total = 0;
        int area;
        for (auto &rect : rects)
        {
            area = (rect[2] - rect[0] + 1) * (rect[3] - rect[1] + 1);
            area_total += area;
            weights.push_back(area_total);
        }
    }

    vector<int> pick()
    {
        int w = rand() % area_total;
        auto idx = upper_bound(weights.begin(), weights.end(), w) - weights.begin();
        int diff = 0;
        if (idx == 0) diff = w;
        else diff = (w - weights[idx - 1]);
        return pickRandomPoint(rects[idx], diff);
    }

    vector<int> pickRandomPoint(vector<int> &rect, int diff)
    {
        int x = diff / (rect[3] - rect[1] + 1);
        int y = diff % (rect[3] - rect[1] + 1);
        return {rect[0] + x, rect[1] + y};
    }
};


// Source https://leetcode.com/problems/diagonal-traverse/

Given an m x n matrix mat, return an array of all the elements of the array in a diagonal order.

 

Example 1:


Input: mat = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,4,7,5,3,6,8,9]
Example 2:

Input: mat = [[1,2],[3,4]]
Output: [1,2,3,4]
 

Constraints:

m == mat.length
n == mat[i].length
1 <= m, n <= 104
1 <= m * n <= 104
-105 <= mat[i][j] <= 105

class Solution
{
public:
    int rows, cols;
    vector<int> output;

    vector<int> findDiagonalOrder(vector<vector<int>> &mat)
    {
        rows = mat.size();
        cols = mat[0].size();
        int i = 0, j = 0;
        output.push_back(mat[i][j]);
        while((i < rows - 1) || (j < cols - 1))
        {
            if(j < cols - 1) j++; //if right exists go right else go down
            else i++;
            diagonalDown(mat, i, j);
            if(i < rows - 1) i++; //if down exists go down else go right
            else j++;
            diagonalUp(mat, i, j);
        }
        return output;
    }

    void diagonalDown(vector<vector<int>> &mat, int &i, int &j)
    {
        while(j >= 0 && i <= rows - 1) output.push_back(mat[i++][j--]);
        i--;
        j++;
    }

    void diagonalUp(vector<vector<int>> &mat, int &i, int &j)
    {
        while(i >= 0 && j <= cols - 1) output.push_back(mat[i--][j++]);
        i++;
        j--;
    }
};


// Source https://leetcode.com/problems/keyboard-row/

Given an array of strings words, return the words that can be typed using letters of the alphabet on only one row of American keyboard like the image below.

In the American keyboard:

the first row consists of the characters "qwertyuiop",
the second row consists of the characters "asdfghjkl", and
the third row consists of the characters "zxcvbnm".

 

Example 1:

Input: words = ["Hello","Alaska","Dad","Peace"]
Output: ["Alaska","Dad"]
Example 2:

Input: words = ["omk"]
Output: []
Example 3:

Input: words = ["adsdf","sfd"]
Output: ["adsdf","sfd"]
 

Constraints:

1 <= words.length <= 20
1 <= words[i].length <= 100
words[i] consists of English letters (both lowercase and uppercase). 

class Solution
{
public:
    vector<string> findWords(vector<string> &words)
    {
        vector<string> res;
        unordered_set<char> row1{'q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'};
        unordered_set<char> row2{'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l'};
        unordered_set<char> row3{'z', 'x', 'c', 'v', 'b', 'n', 'm'};
        for (string &word : words)
        {
            int one = 0, two = 0, three = 0;
            for (char c : word)
            {
                if (c < 'a') c += 32;
                if (row1.count(c)) one = 1;
                if (row2.count(c)) two = 1;
                if (row3.count(c)) three = 1;
                if (one + two + three > 1) break;
            }
            if (one + two + three == 1) res.push_back(word);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/find-mode-in-binary-search-tree/

Given the root of a binary search tree (BST) with duplicates, return all the mode(s) (i.e., the most frequently occurred element) in it.

If the tree has more than one mode, return them in any order.

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than or equal to the node's key.
The right subtree of a node contains only nodes with keys greater than or equal to the node's key.
Both the left and right subtrees must also be binary search trees.
 

Example 1:


Input: root = [1,null,2,2]
Output: [2]
Example 2:

Input: root = [0]
Output: [0]
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
-105 <= Node.val <= 105

class Solution
{
public:
    vector<int> findMode(TreeNode *root)
    {
        set<int> res;
        int mx = 0, cnt = 1;
        TreeNode *pre = NULL;
        inorder(root, pre, cnt, mx, res);
        return vector<int>(res.begin(), res.end());
    }
    void inorder(TreeNode *node, TreeNode *&pre, int &cnt, int &mx, set<int> &res)
    {
        if (!node) return;
        inorder(node->left, pre, cnt, mx, res);
        if (pre)
        {
            cnt = (node->val == pre->val) ? cnt + 1 : 1;
        }
        if (cnt >= mx)
        {
            if (cnt > mx) res.clear();
            res.insert(node->val);
            mx = cnt;
        }
        pre = node;
        inorder(node->right, pre, cnt, mx, res);
    }
};


// Source https://leetcode.com/problems/ipo/

Suppose LeetCode will start its IPO soon. In order to sell a good price of its shares to Venture Capital, 
LeetCode would like to work on some projects to increase its capital before the IPO. 
Since it has limited resources, it can only finish at most k distinct projects before the IPO. 
Help LeetCode design the best way to maximize its total capital after finishing at most k distinct projects.

You are given n projects where the ith project has a pure profit profits[i] and a minimum capital of capital[i] is needed to start it.

Initially, you have w capital. When you finish a project, you will obtain its pure profit and the profit will be added to your total capital.

Pick a list of at most k distinct projects from given projects to maximize your final capital, and return the final maximized capital.

The answer is guaranteed to fit in a 32-bit signed integer.

 

Example 1:

Input: k = 2, w = 0, profits = [1,2,3], capital = [0,1,1]
Output: 4
Explanation: Since your initial capital is 0, you can only start the project indexed 0.
After finishing it you will obtain profit 1 and your capital becomes 1.
With capital 1, you can either start the project indexed 1 or the project indexed 2.
Since you can choose at most 2 projects, you need to finish the project indexed 2 to get the maximum capital.
Therefore, output the final maximized capital, which is 0 + 1 + 3 = 4.
Example 2:

Input: k = 3, w = 0, profits = [1,2,3], capital = [0,1,2]
Output: 6
 

Constraints:

1 <= k <= 105
0 <= w <= 109
n == profits.length
n == capital.length
1 <= n <= 105
0 <= profits[i] <= 104
0 <= capital[i] <= 109

class Solution
{
public:
    int findMaximizedCapital(int k, int w, vector<int> &profits, vector<int> &capital)
    {
        int n = profits.size();
        vector<pair<int, int>> aug;
        for (int i = 0; i < n; ++i) aug.emplace_back(capital[i], profits[i]);

        sort(aug.begin(), aug.end());

        priority_queue<int> pq;
        for (int i = 0; k; --k)
        {
            for (; i < n && aug[i].first <= w; ++i) pq.push(aug[i].second);
            if (pq.size())
            {
                w += pq.top();
                pq.pop();
            }
        }
        return w;
    }
};


// Source https://leetcode.com/problems/next-greater-element-ii/

Given a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next greater number for every element in nums.

The next greater number of a number x is the first greater number to its traversing-order next in the array, 
which means you could search circularly to find its next greater number. If it doesn't exist, return -1 for this number.

 

Example 1:

Input: nums = [1,2,1]
Output: [2,-1,2]
Explanation: The first 1's next greater number is 2; 
The number 2 can't find next greater number. 
The second 1's next greater number needs to search circularly, which is also 2.
Example 2:

Input: nums = [1,2,3,4,3]
Output: [2,3,4,-1,4]
 

Constraints:

1 <= nums.length <= 104
-109 <= nums[i] <= 109

class Solution
{
public:
    vector<int> nextGreaterElements(vector<int> &nums)
    {
        int n = nums.size();
        vector<int> ans(n, -1);
        stack<int> st;
        // 下标n - 1的右边是下标0 1 2 ... n - 2
        for(int i = n - 2; i >= 0; i--)
        {
            while(st.size() > 0 && st.top() <= nums[i])
            {
                st.pop();
            }
            st.push(nums[i]);
        }
        for(int i = n - 1; i >= 0; i--)
        {
            while(st.size() > 0 && st.top() <= nums[i])
            {
                st.pop();
            }
            // if stack is empty then no greater element then add -1 else stack top
            ans[i] = st.size() == 0 ? -1 : st.top();
            st.push(nums[i]);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/base-7/

Given an integer num, return a string of its base 7 representation.

 

Example 1:

Input: num = 100
Output: "202"
Example 2:

Input: num = -7
Output: "-10"
 

Constraints:

-107 <= num <= 107

class Solution
{
public:
    string convertToBase7(int num)
    {
        if (num == 0) return "0";
        string res = "";
        bool positive = num > 0;
        num = abs(num);
        while (num > 0)
        {
            res.push_back((num % 7) + '0');
            num /= 7;
        }
        reverse(res.begin(), res.end());
        return positive ? res : "-" + res;
    }
};


// Source https://leetcode.com/problems/relative-ranks/

You are given an integer array score of size n, where score[i] is the score of the ith athlete in a competition. All the scores are guaranteed to be unique.

The athletes are placed based on their scores, where the 1st place athlete has the highest score, the 2nd place athlete has the 2nd highest score, and so on. 
The placement of each athlete determines their rank:

The 1st place athlete's rank is "Gold Medal".
The 2nd place athlete's rank is "Silver Medal".
The 3rd place athlete's rank is "Bronze Medal".
For the 4th place to the nth place athlete, their rank is their placement number (i.e., the xth place athlete's rank is "x").
Return an array answer of size n where answer[i] is the rank of the ith athlete.

 

Example 1:

Input: score = [5,4,3,2,1]
Output: ["Gold Medal","Silver Medal","Bronze Medal","4","5"]
Explanation: The placements are [1st, 2nd, 3rd, 4th, 5th].
Example 2:

Input: score = [10,3,8,9,4]
Output: ["Gold Medal","5","Bronze Medal","Silver Medal","4"]
Explanation: The placements are [1st, 5th, 3rd, 2nd, 4th].

 

Constraints:

n == score.length
1 <= n <= 104
0 <= score[i] <= 106
All the values in score are unique.

class Solution
{
public:
    vector<string> findRelativeRanks(vector<int> &score)
    {
        int n = score.size();
        vector<string> result(n);
        priority_queue<pair<int, int>> pq;
        for(int i = 0; i < n; i++)
        {
            pq.push({score[i], i});
        }
        int count = 0;
        while(!pq.empty())
        {
            auto [scr, idx] = pq.top();
            pq.pop();
            count++;
            if(count == 1) result[idx] = "Gold Medal";
            else if(count == 2) result[idx] = "Silver Medal";
            else if(count == 3) result[idx] = "Bronze Medal";
            else result[idx] =  to_string(count);
        }
        return result;
    }
};


// Source https://leetcode.com/problems/perfect-number/

A perfect number is a positive integer that is equal to the sum of its positive divisors, excluding the number itself. A divisor of an integer x is an integer that can divide x evenly.

Given an integer n, return true if n is a perfect number, otherwise return false.

 

Example 1:

Input: num = 28
Output: true
Explanation: 28 = 1 + 2 + 4 + 7 + 14
1, 2, 4, 7, and 14 are all divisors of 28.
Example 2:

Input: num = 7
Output: false
 

Constraints:

1 <= num <= 108

class Solution
{
public:
    bool checkPerfectNumber(int num)
    {
        int sum = 1;
        for (int i = 2; i * i <= num; ++i)
        {
            if (num % i == 0)
            {
                sum += i + (num / i == i ? 0 : num / i);
            }
        }
        return num != 1 && sum == num;
    }
};


// Source https://leetcode.com/problems/most-frequent-subtree-sum/

Given the root of a binary tree, return the most frequent subtree sum. If there is a tie, return all the values with the highest frequency in any order.

The subtree sum of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself).

 

Example 1:


Input: root = [5,2,-3]
Output: [2,-3,4]
Example 2:


Input: root = [5,2,-5]
Output: [2]
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
-105 <= Node.val <= 105

class Solution
{
public:
    int maxFreq;
    unordered_map<int, int>mp;

    int recur(TreeNode *root)
    {
        if(root == NULL) return 0;
        int leftSum = recur(root->left);
        int rightSum = recur(root->right);
        int rootSum = root->val + leftSum + rightSum;
        maxFreq = max(maxFreq, ++mp[rootSum]);
        return rootSum;
    }

    vector<int> findFrequentTreeSum(TreeNode *root)
    {
        maxFreq = 0;
        recur(root);
        vector<int> res;
        for(auto p : mp)
        {
            if(p.second == maxFreq)
                res.push_back(p.first);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/fibonacci-number/

The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,

F(0) = 0, F(1) = 1
F(n) = F(n - 1) + F(n - 2), for n > 1.
Given n, calculate F(n).

 

Example 1:

Input: n = 2
Output: 1
Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.
Example 2:

Input: n = 3
Output: 2
Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2.
Example 3:

Input: n = 4
Output: 3
Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3.
 

Constraints:

0 <= n <= 30

class Solution
{
public:
    int fib(int N)
    {
        if (N <= 1) return N;
        int a = 0, b = 1;
        for (int i = 2; i <= N; ++i)
        {
            int sum = a + b;
            a = b;
            b = sum;
        }
        return b;
    }
};


// Source https://leetcode.com/problems/find-bottom-left-tree-value/

Given the root of a binary tree, return the leftmost value in the last row of the tree.

 

Example 1:


Input: root = [2,1,3]
Output: 1
Example 2:


Input: root = [1,2,3,4,null,5,6,null,null,7]
Output: 7
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
-231 <= Node.val <= 231 - 1

class Solution
{
public:
    int findBottomLeftValue(TreeNode *root)
    {
        vector<vector<int>> v;
        queue<TreeNode *> q;
        q.push(root);
        while(!q.empty())
        {
            int sz = q.size();
            vector<int>level;
            for(int i = 0; i < sz; i++)
            {
                TreeNode *node = q.front();
                q.pop();
                level.push_back(node->val);
                if(node->left != NULL)
                    q.push(node->left);
                if(node->right != NULL)
                    q.push(node->right);
            }
            v.push_back(level);
        }
        return v[v.size() - 1][0];
    }
};


// Source https://leetcode.com/problems/freedom-trail/

In the video game Fallout 4, the quest "Road to Freedom" requires players to reach a metal dial called the "Freedom Trail Ring" and use the dial to spell a specific keyword to open the door.

Given a string ring that represents the code engraved on the outer ring and another string key that represents the keyword that needs to be spelled, 
return the minimum number of steps to spell all the characters in the keyword.

Initially, the first character of the ring is aligned at the "12:00" direction. 
You should spell all the characters in key one by one by rotating ring clockwise or anticlockwise to make each character of the string key aligned at the "12:00" direction 
and then by pressing the center button.

At the stage of rotating the ring to spell the key character key[i]:

You can rotate the ring clockwise or anticlockwise by one place, which counts as one step. 
The final purpose of the rotation is to align one of ring's characters at the "12:00" direction, where this character must equal key[i].
If the character key[i] has been aligned at the "12:00" direction, press the center button to spell, which also counts as one step. 
After the pressing, you could begin to spell the next character in the key (next stage). Otherwise, you have finished all the spelling.
 

Example 1:


Input: ring = "godding", key = "gd"
Output: 4
Explanation:
For the first key character 'g', since it is already in place, we just need 1 step to spell this character. 
For the second key character 'd', we need to rotate the ring "godding" anticlockwise by two steps to make it become "ddinggo".
Also, we need 1 more step for spelling.
So the final output is 4.
Example 2:

Input: ring = "godding", key = "godding"
Output: 13
 

Constraints:

1 <= ring.length, key.length <= 100
ring and key consist of only lower case English letters.
It is guaranteed that key could always be spelled by rotating ring.

class Solution
{
public:
    int m, n;
    int dp[105][105];

    int solve(string &ring, int ptr, string &key, int index)
    {
        if(index >= n) return 0;
        if(dp[index][ptr] != -1) return dp[index][ptr];
        int steps = 1e9;
        for(int i = 0; i < m; i++)
        {
            if(ring[i] == key[index])
            {
                steps = min(steps, min(abs(i - ptr), m - abs(i - ptr)) + 1 + solve(ring, i, key, index + 1));
            }
        }
        return dp[index][ptr] = steps;
    }

    int findRotateSteps(string ring, string key)
    {
        m = ring.size();
        n = key.size();
        memset(dp, -1, sizeof(dp));
        return solve(ring, 0, key, 0);
    }
};


// Source https://leetcode.com/problems/find-largest-value-in-each-tree-row/

Given the root of a binary tree, return an array of the largest value in each row of the tree (0-indexed).

 

Example 1:


Input: root = [1,3,2,5,3,null,9]
Output: [1,3,9]
Example 2:

Input: root = [1,2,3]
Output: [1,3]
 

Constraints:

The number of nodes in the tree will be in the range [0, 104].
-231 <= Node.val <= 231 - 1

class Solution
{
public:
    vector<int> largestValues(TreeNode *root)
    {
        vector<int> ans;
        if(!root) return ans;
        queue<TreeNode *> q;
        q.push(root);
        while(!q.empty())
        {
            int sz = q.size();
            int maxVal = INT_MIN;
            for(int i = 0; i < sz; i++)
            {
                TreeNode *node = q.front();
                q.pop();
                maxVal= max(maxVal, node->val);
                if(node->left) q.push(node->left);
                if(node->right) q.push(node->right);
            }
            ans.push_back(maxVal);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/longest-palindromic-subsequence/

Given a string s, find the longest palindromic subsequence's length in s.

A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:

Input: s = "bbbab"
Output: 4
Explanation: One possible longest palindromic subsequence is "bbbb".
Example 2:

Input: s = "cbbd"
Output: 2
Explanation: One possible longest palindromic subsequence is "bb".
 

Constraints:

1 <= s.length <= 1000
s consists only of lowercase English letters.

class Solution
{
public:
    int n;
    vector<vector<int>> dp;

    int recur(string &s, int i, int j)
    {
        if (i > j) return 0;
        if (i == j) return 1;
        if (dp[i][j] != -1) return dp[i][j];
        int ans = 0;
        if (s[i] == s[j])
        {
            ans = recur(s, i + 1, j - 1) + 2;
        }
        else
        {
            ans = max(recur(s, i + 1, j), recur(s, i, j - 1));
        }
        return dp[i][j] = ans;
    }

    int longestPalindromeSubseq(string s)
    {
        n = s.length();
        dp = vector<vector<int>>(n, vector<int>(n, -1));
        return recur(s, 0, n - 1);
    }
};


// Source https://leetcode.com/problems/super-washing-machines/

You have n super washing machines on a line. Initially, each washing machine has some dresses or is empty.

For each move, you could choose any m (1 <= m <= n) washing machines, and pass one dress of each washing machine to one of its adjacent washing machines at the same time.

Given an integer array machines representing the number of dresses in each washing machine from left to right on the line, 
return the minimum number of moves to make all the washing machines have the same number of dresses. If it is not possible to do it, return -1.

 

Example 1:

Input: machines = [1,0,5]
Output: 3
Explanation:
1st move:    1     0 <-- 5    =>    1     1     4
2nd move:    1 <-- 1 <-- 4    =>    2     1     3
3rd move:    2     1 <-- 3    =>    2     2     2
Example 2:

Input: machines = [0,3,0]
Output: 2
Explanation:
1st move:    0 <-- 3     0    =>    1     2     0
2nd move:    1     2 --> 0    =>    1     1     1
Example 3:

Input: machines = [0,2,0]
Output: -1
Explanation:
It's impossible to make all three washing machines have the same number of dresses.
 

Constraints:

n == machines.length
1 <= n <= 104
0 <= machines[i] <= 105

class Solution
{
public:
    int findMinMoves(vector<int> &machines)
    {
        int total = accumulate(machines.begin(), machines.end(), 0);
        if (total % machines.size()) return -1;
        int avg = total / machines.size(), ans = 0, prefix = 0, temp = 0;
        for (auto x : machines)
        {
            temp = (prefix + x - avg);
            ans = max(ans, abs(prefix));
            if (prefix < 0 && temp > 0) ans = max(ans, x - avg);
            prefix = temp;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/coin-change-2/

You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.

Return the number of combinations that make up that amount. If that amount of money cannot be made up by any combination of the coins, return 0.

You may assume that you have an infinite number of each kind of coin.

The answer is guaranteed to fit into a signed 32-bit integer.

 

Example 1:

Input: amount = 5, coins = [1,2,5]
Output: 4
Explanation: there are four ways to make up the amount:
5=5
5=2+2+1
5=2+1+1+1
5=1+1+1+1+1
Example 2:

Input: amount = 3, coins = [2]
Output: 0
Explanation: the amount of 3 cannot be made up just with coins of 2.
Example 3:

Input: amount = 10, coins = [10]
Output: 1
 

Constraints:

1 <= coins.length <= 300
1 <= coins[i] <= 5000
All the values of coins are unique.
0 <= amount <= 5000

class Solution
{
public:
    int change(int amount, vector<int> &coins)
    {
        vector<int> dp(amount + 1);
        dp[0] = 1;
        for(int x : coins)
        {
            for(int i = x; i <= amount; ++i)
                dp[i] += dp[i - x];
        }
        return dp[amount];
    }
};


// Source https://leetcode.com/problems/random-flip-matrix/

There is an m x n binary grid matrix with all the values set 0 initially. 
Design an algorithm to randomly pick an index (i, j) where matrix[i][j] == 0 and flips it to 1. 
All the indices (i, j) where matrix[i][j] == 0 should be equally likely to be returned.

Optimize your algorithm to minimize the number of calls made to the built-in random function of your language and optimize the time and space complexity.

Implement the Solution class:

Solution(int m, int n) Initializes the object with the size of the binary matrix m and n.
int[] flip() Returns a random index [i, j] of the matrix where matrix[i][j] == 0 and flips it to 1.
void reset() Resets all the values of the matrix to be 0.
 

Example 1:

Input
["Solution", "flip", "flip", "flip", "reset", "flip"]
[[3, 1], [], [], [], [], []]
Output
[null, [1, 0], [2, 0], [0, 0], null, [2, 0]]

Explanation
Solution solution = new Solution(3, 1);
solution.flip();  // return [1, 0], [0,0], [1,0], and [2,0] should be equally likely to be returned.
solution.flip();  // return [2, 0], Since [1,0] was returned, [2,0] and [0,0]
solution.flip();  // return [0, 0], Based on the previously returned indices, only [0,0] can be returned.
solution.reset(); // All the values are reset to 0 and can be returned.
solution.flip();  // return [2, 0], [0,0], [1,0], and [2,0] should be equally likely to be returned.
 

Constraints:

1 <= m, n <= 104
There will be at least one free cell for each call to flip.
At most 1000 calls will be made to flip and reset.

class Solution
{
public:
    unordered_set<int> v;
    int total;
    int cols;
    Solution(int m, int n)
    {
        cols = n;
        total = m * n;
    }

    vector<int> flip()
    {
        int random = rand() % total;
        while(v.count(random))
        {
            random++;
            random %= total;
        }
        v.insert(random);
        return {random / cols, random % cols};
    }

    void reset()
    {
        v.clear();
    }
};


// Source https://leetcode.com/problems/detect-capital/

We define the usage of capitals in a word to be right when one of the following cases holds:

All letters in this word are capitals, like "USA".
All letters in this word are not capitals, like "leetcode".
Only the first letter in this word is capital, like "Google".
Given a string word, return true if the usage of capitals in it is right.

 

Example 1:

Input: word = "USA"
Output: true
Example 2:

Input: word = "FlaG"
Output: false
 

Constraints:

1 <= word.length <= 100
word consists of lowercase and uppercase English letters.

class Solution
{
public:
    bool detectCapitalUse(string word)
    {
        int cnt = 0, n = word.size();
        for (int i = 0; i < n; ++i)
        {
            if (word[i] <= 'Z') ++cnt;
        }
        return cnt == 0 || cnt == n || (cnt == 1 && word[0] <= 'Z');
    }
};


// Source https://leetcode.com/problems/longest-uncommon-subsequence-i/

Given two strings a and b, return the length of the longest uncommon subsequence between a and b. If the longest uncommon subsequence does not exist, return -1.

An uncommon subsequence between two strings is a string that is a subsequence of one but not the other.

A subsequence of a string s is a string that can be obtained after deleting any number of characters from s.

For example, "abc" is a subsequence of "aebdc" because you can delete the underlined characters in "aebdc" to get "abc". 
Other subsequences of "aebdc" include "aebdc", "aeb", and "" (empty string).
 

Example 1:

Input: a = "aba", b = "cdc"
Output: 3
Explanation: One longest uncommon subsequence is "aba" because "aba" is a subsequence of "aba" but not "cdc".
Note that "cdc" is also a longest uncommon subsequence.
Example 2:

Input: a = "aaa", b = "bbb"
Output: 3
Explanation: The longest uncommon subsequences are "aaa" and "bbb".
Example 3:

Input: a = "aaa", b = "aaa"
Output: -1
Explanation: Every subsequence of string a is also a subsequence of string b. Similarly, every subsequence of string b is also a subsequence of string a.
 

Constraints:

1 <= a.length, b.length <= 100
a and b consist of lower-case English letters.

class Solution
{
public:
    int findLUSlength(string a, string b)
    {
        return a == b ? -1 : max(a.size(), b.size());
    }
};


// Source https://leetcode.com/problems/longest-uncommon-subsequence-ii/

Given an array of strings strs, return the length of the longest uncommon subsequence between them. If the longest uncommon subsequence does not exist, return -1.

An uncommon subsequence between an array of strings is a string that is a subsequence of one string but not the others.

A subsequence of a string s is a string that can be obtained after deleting any number of characters from s.

For example, "abc" is a subsequence of "aebdc" because you can delete the underlined characters in "aebdc" to get "abc". 
Other subsequences of "aebdc" include "aebdc", "aeb", and "" (empty string).
 

Example 1:

Input: strs = ["aba","cdc","eae"]
Output: 3
Example 2:

Input: strs = ["aaa","aaa","aa"]
Output: -1
 

Constraints:

2 <= strs.length <= 50
1 <= strs[i].length <= 10
strs[i] consists of lowercase English letters.

class Solution
{
public:
    int findLUSlength(vector<string> &strs)
    {
        int res = 0;
        for(int i = 0; i < strs.size(); i ++)
        {
            int j = 0;
            for(; j < strs.size(); j ++)
            {
                if(i == j) continue;
                if(is_subseq(strs[i], strs[j]))
                    break;
            }
            if(j == strs.size())
                res = max(res, (int)strs[i].size());
        }
        return res == 0 ? - 1 : res;
    }

private:
    // see if a is b's sub seq
    bool is_subseq(const string &a, const string &b)
    {
        if(a.size() > b.size()) return false;

        int i = 0;
        for(int j = 0; i < a.size() && j < b.size(); j++)
        {
            if(a[i] == b[j]) i++;
        }
        return i == a.size();
    }
};


// Source https://leetcode.com/problems/continuous-subarray-sum/

Given an integer array nums and an integer k, return true if nums has a continuous subarray of size at least two whose elements sum up to a multiple of k, or false otherwise.

An integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k.

 

Example 1:

Input: nums = [23,2,4,6,7], k = 6
Output: true
Explanation: [2, 4] is a continuous subarray of size 2 whose elements sum up to 6.
Example 2:

Input: nums = [23,2,6,4,7], k = 6
Output: true
Explanation: [23, 2, 6, 4, 7] is an continuous subarray of size 5 whose elements sum up to 42.
42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer.
Example 3:

Input: nums = [23,2,6,4,7], k = 13
Output: false
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 109
0 <= sum(nums[i]) <= 231 - 1
1 <= k <= 231 - 1

class Solution
{
public:
    bool checkSubarraySum(vector<int> &nums, int k)
    {
        unordered_map<int, int> mp;
        int pre_sum = 0;
        mp[0] = -1;
        for(int i = 0; i < nums.size(); i++)
        {
            pre_sum += nums[i];
            if(mp.find(pre_sum % k) != mp.end())
            {
                if (i - mp[pre_sum % k] >= 2) return true;
            }
            else mp[pre_sum % k] = i;
        }
        return false;
    }
};


// Source https://leetcode.com/problems/longest-word-in-dictionary-through-deleting/

Given a string s and a string array dictionary, return the longest string in the dictionary that can be formed by deleting some of the given string characters. 
If there is more than one possible result, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.

 

Example 1:

Input: s = "abpcplea", dictionary = ["ale","apple","monkey","plea"]
Output: "apple"
Example 2:

Input: s = "abpcplea", dictionary = ["a","b","c"]
Output: "a"
 

Constraints:

1 <= s.length <= 1000
1 <= dictionary.length <= 1000
1 <= dictionary[i].length <= 1000
s and dictionary[i] consist of lowercase English letters.

class Solution
{
public:
    string findLongestWord(string s, vector<string> &d)
    {
        string res = "";
        for (auto &str : d)
        {
            int i = 0;
            int j = 0;
            for (; i < str.size() && j < s.size(); ++j)
            {
                if (str[i] == s[j]) ++i;
            }
            if (i == str.size() && str.size() >= res.size())
            {
                if (str.size() > res.size() || str < res)
                {
                    res = str;
                }
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/contiguous-array/

Given a binary array nums, return the maximum length of a contiguous subarray with an equal number of 0 and 1.

 

Example 1:

Input: nums = [0,1]
Output: 2
Explanation: [0, 1] is the longest contiguous subarray with an equal number of 0 and 1.
Example 2:

Input: nums = [0,1,0]
Output: 2
Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.
 

Constraints:

1 <= nums.length <= 105
nums[i] is either 0 or 1.

遇到1就加1，遇到0就减1，这样如果某个子数组和为0，就说明0和1的个数相等

class Solution
{
public:
    int findMaxLength(vector<int> &nums)
    {
        int res = 0, n = nums.size(), sum = 0;
        unordered_map<int, int> mp;
        mp[0] = -1;
        for (int i = 0; i < n; ++i)
        {
            sum += (nums[i] << 1) - 1;
            if (mp.count(sum))
            {
                res = max(res, i - mp[sum]);
            }
            else
            {
                mp[sum] = i;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/beautiful-arrangement/

Suppose you have n integers labeled 1 through n. A permutation of those n integers perm (1-indexed) is considered a beautiful arrangement 
if for every i (1 <= i <= n), either of the following is true:

perm[i] is divisible by i.
i is divisible by perm[i].
Given an integer n, return the number of the beautiful arrangements that you can construct.

 

Example 1:

Input: n = 2
Output: 2
Explanation: 
The first beautiful arrangement is [1,2]:
    - perm[1] = 1 is divisible by i = 1
    - perm[2] = 2 is divisible by i = 2
The second beautiful arrangement is [2,1]:
    - perm[1] = 2 is divisible by i = 1
    - i = 2 is divisible by perm[2] = 1
Example 2:

Input: n = 1
Output: 1
 

Constraints:

1 <= n <= 15

class Solution
{
public:
    int ans;

    void backtrack(int seen, int n, int k)
    {
        if(k > n)
        {
            ans++;
            return;
        }
        else
        {
            for(int i = 1; i <= n; i++)
            {
                if(!(seen & (1 << i)) && (k % i == 0 || i % k == 0))
                {
                    seen = seen + (1 << i);
                    backtrack(seen, n, k + 1);
                    seen = seen - (1 << i);
                }
            }
        }
    }

    int countArrangement(int n)
    {
        ans = 0;
        backtrack(0, n, 1);
        return ans;
    }
};


// Source https://leetcode.com/problems/random-pick-with-weight/

You are given a 0-indexed array of positive integers w where w[i] describes the weight of the ith index.

You need to implement the function pickIndex(), which randomly picks an index in the range [0, w.length - 1] (inclusive) and returns it. The probability of picking an index i is w[i] / sum(w).

For example, if w = [1, 3], the probability of picking index 0 is 1 / (1 + 3) = 0.25 (i.e., 25%), and the probability of picking index 1 is 3 / (1 + 3) = 0.75 (i.e., 75%).
 

Example 1:

Input
["Solution","pickIndex"]
[[[1]],[]]
Output
[null,0]

Explanation
Solution solution = new Solution([1]);
solution.pickIndex(); // return 0. The only option is to return 0 since there is only one element in w.
Example 2:

Input
["Solution","pickIndex","pickIndex","pickIndex","pickIndex","pickIndex"]
[[[1,3]],[],[],[],[],[]]
Output
[null,1,1,1,1,0]

Explanation
Solution solution = new Solution([1, 3]);
solution.pickIndex(); // return 1. It is returning the second element (index = 1) that has a probability of 3/4.
solution.pickIndex(); // return 1
solution.pickIndex(); // return 1
solution.pickIndex(); // return 1
solution.pickIndex(); // return 0. It is returning the first element (index = 0) that has a probability of 1/4.

Since this is a randomization problem, multiple answers are allowed.
All of the following outputs can be considered correct:
[null,1,1,1,1,0]
[null,1,1,1,1,1]
[null,1,1,1,0,0]
[null,1,1,1,0,1]
[null,1,0,1,0,0]
......
and so on.
 

Constraints:

1 <= w.length <= 104
1 <= w[i] <= 105
pickIndex will be called at most 104 times.

class Solution
{
public:
    vector<int> sum;

    Solution(vector<int> &w)
    {
        sum = w;
        for (int i = 1; i < w.size(); ++i)
        {
            sum[i] = sum[i - 1] + w[i];
        }
    }

    int pickIndex()
    {
        int x = rand() % sum.back();
        return upper_bound(sum.begin(), sum.end(), x) - sum.begin();
    }
};


// Source https://leetcode.com/problems/minesweeper/

Let's play the minesweeper game (Wikipedia, online game)!

You are given an m x n char matrix board representing the game board where:

'M' represents an unrevealed mine,
'E' represents an unrevealed empty square,
'B' represents a revealed blank square that has no adjacent mines (i.e., above, below, left, right, and all 4 diagonals),
digit ('1' to '8') represents how many mines are adjacent to this revealed square, and
'X' represents a revealed mine.
You are also given an integer array click where click = [clickr, clickc] represents the next click position among all the unrevealed squares ('M' or 'E').

Return the board after revealing this position according to the following rules:

If a mine 'M' is revealed, then the game is over. You should change it to 'X'.
If an empty square 'E' with no adjacent mines is revealed, then change it to a revealed blank 'B' and all of its adjacent unrevealed squares should be revealed recursively.
If an empty square 'E' with at least one adjacent mine is revealed, then change it to a digit ('1' to '8') representing the number of adjacent mines.
Return the board when no more squares will be revealed.
 

Example 1:


Input: board = [["E","E","E","E","E"],["E","E","M","E","E"],["E","E","E","E","E"],["E","E","E","E","E"]], click = [3,0]
Output: [["B","1","E","1","B"],["B","1","M","1","B"],["B","1","1","1","B"],["B","B","B","B","B"]]
Example 2:


Input: board = [["B","1","E","1","B"],["B","1","M","1","B"],["B","1","1","1","B"],["B","B","B","B","B"]], click = [1,2]
Output: [["B","1","E","1","B"],["B","1","X","1","B"],["B","1","1","1","B"],["B","B","B","B","B"]]
 

Constraints:

m == board.length
n == board[i].length
1 <= m, n <= 50
board[i][j] is either 'M', 'E', 'B', or a digit from '1' to '8'.
click.length == 2
0 <= clickr < m
0 <= clickc < n
board[clickr][clickc] is either 'M' or 'E'.

class Solution
{
public:

    bool inboard(const vector<vector<char>> &board, int x, int y)
    {
        return ( x >= 0 && x < board.size() && y >= 0 && y < board[0].size() );
    }

    void dfs(vector<vector<char>> &board, int x, int y)
    {
        if(!inboard(board, x, y)) return;
        if(board[x][y] != 'E') return;
        int count = 0;
        if(inboard(board, x - 1, y - 1) && board[x - 1][y - 1] == 'M') count++;
        if(inboard(board, x - 1, y  ) && board[x - 1][y  ] == 'M') count++;
        if(inboard(board, x - 1, y + 1) && board[x - 1][y + 1] == 'M') count++;
        if(inboard(board, x, y - 1) && board[x  ][y - 1] == 'M') count++;
        if(inboard(board, x, y + 1) && board[x  ][y + 1] == 'M') count++;
        if(inboard(board, x + 1, y - 1) && board[x + 1][y - 1] == 'M') count++;
        if(inboard(board, x + 1, y  ) && board[x + 1][y  ] == 'M') count++;
        if(inboard(board, x + 1, y + 1) && board[x + 1][y + 1] == 'M') count++;

        // set board with different values either 'count' or 'B'
        if(count > 0)
            board[x][y] = '0' + count;
        else
        {
            board[x][y] = 'B';
            // search recursively in 8 directions
            dfs(board, x - 1, y - 1);
            dfs(board, x - 1, y  );
            dfs(board, x - 1, y + 1);
            dfs(board, x, y - 1);
            dfs(board, x, y + 1);
            dfs(board, x + 1, y - 1);
            dfs(board, x + 1, y  );
            dfs(board, x + 1, y + 1);
        }
    }

    vector<vector<char>> updateBoard(vector<vector<char>> &board, vector<int> &click)
    {
        int r = click[0];
        int c = click[1];
        if(board[r][c] == 'M')
        {
            board[r][c] = 'X';
            return board;
        }

        dfs(board, r, c);
        return board;
    }
};


// Source https://leetcode.com/problems/minimum-absolute-difference-in-bst/

Given the root of a Binary Search Tree (BST), return the minimum absolute difference between the values of any two different nodes in the tree.

 

Example 1:


Input: root = [4,2,6,1,3]
Output: 1
Example 2:


Input: root = [1,0,48,null,null,12,49]
Output: 1
 

Constraints:

The number of nodes in the tree is in the range [2, 104].
0 <= Node.val <= 105

class Solution
{
public:
    int minimum_difference = INT_MAX;
    
    void recur(TreeNode *root, TreeNode *&prev)
    {
        if (!root) return;
        recur(root->left, prev);
        if (prev) minimum_difference = min(minimum_difference, root->val - prev->val);
        prev = root;
        recur(root->right, prev);
    }
    int getMinimumDifference(TreeNode *root)
    {
        TreeNode *prev = NULL;
        recur(root, prev);
        return minimum_difference;
    }
};


// Source https://leetcode.com/problems/k-diff-pairs-in-an-array/

Given an array of integers nums and an integer k, return the number of unique k-diff pairs in the array.

A k-diff pair is an integer pair (nums[i], nums[j]), where the following are true:

0 <= i, j < nums.length
i != j
nums[i] - nums[j] == k
Notice that |val| denotes the absolute value of val.

 

Example 1:

Input: nums = [3,1,4,1,5], k = 2
Output: 2
Explanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).
Although we have two 1s in the input, we should only return the number of unique pairs.
Example 2:

Input: nums = [1,2,3,4,5], k = 1
Output: 4
Explanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).
Example 3:

Input: nums = [1,3,1,5,4], k = 0
Output: 1
Explanation: There is one 0-diff pair in the array, (1, 1).
 

Constraints:

1 <= nums.length <= 104
-107 <= nums[i] <= 107
0 <= k <= 107

class Solution
{
public:
    int findPairs(vector<int> &nums, int k)
    {
        int res = 0, n = nums.size();
        unordered_map<int, int> mp;
        for (int num : nums) ++mp[num];
        for (auto p : mp)
        {
            if (k == 0 && p.second > 1) ++res;
            if (k > 0 && mp.count(p.first + k)) ++res;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/encode-and-decode-tinyurl/

Note: This is a companion problem to the System Design problem: Design TinyURL.
TinyURL is a URL shortening service where you enter a URL such as https://leetcode.com/problems/design-tinyurl and it returns a short URL such as http://tinyurl.com/4e9iAk. 
Design a class to encode a URL and decode a tiny URL.

There is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.

Implement the Solution class:

Solution() Initializes the object of the system.
String encode(String longUrl) Returns a tiny URL for the given longUrl.
String decode(String shortUrl) Returns the original long URL for the given shortUrl. It is guaranteed that the given shortUrl was encoded by the same object.
 

Example 1:

Input: url = "https://leetcode.com/problems/design-tinyurl"
Output: "https://leetcode.com/problems/design-tinyurl"

Explanation:
Solution obj = new Solution();
string tiny = obj.encode(url); // returns the encoded tiny url.
string ans = obj.decode(tiny); // returns the original url after deconding it.
 

Constraints:

1 <= url.length <= 104
url is guranteed to be a valid URL.

class Solution
{
public:

    // Encodes a URL to a shortened URL.
    string encode(string longUrl)
    {
        url.push_back(longUrl);
        return "http://tinyurl.com/" + to_string(url.size() - 1);
    }

    // Decodes a shortened URL to its original URL.
    string decode(string shortUrl)
    {
        auto pos = shortUrl.find_last_of("/");
        return url[stoi(shortUrl.substr(pos + 1))];
    }

private:
    vector<string> url;
};


// Source https://leetcode.com/problems/complex-number-multiplication/

A complex number can be represented as a string on the form "real+imaginaryi" where:

real is the real part and is an integer in the range [-100, 100].
imaginary is the imaginary part and is an integer in the range [-100, 100].
i2 == -1.
Given two complex numbers num1 and num2 as strings, return a string of the complex number that represents their multiplications.

 

Example 1:

Input: num1 = "1+1i", num2 = "1+1i"
Output: "0+2i"
Explanation: (1 + i) * (1 + i) = 1 + i2 + 2 * i = 2i, and you need convert it to the form of 0+2i.
Example 2:

Input: num1 = "1+-1i", num2 = "1+-1i"
Output: "0+-2i"
Explanation: (1 - i) * (1 - i) = 1 + i2 - 2 * i = -2i, and you need convert it to the form of 0+-2i.
 

Constraints:

num1 and num2 are valid complex numbers.

class Solution
{
public:
    string complexNumberMultiply(string a, string b)
    {
        int n1 = a.size(), n2 = b.size();
        auto p1 = a.find_last_of("+"), p2 = b.find_last_of("+");
        int a1 = stoi(a.substr(0, p1)), b1 = stoi(b.substr(0, p2));
        int a2 = stoi(a.substr(p1 + 1, n1 - p1 - 2));
        int b2 = stoi(b.substr(p2 + 1, n2 - p2 - 2));
        int r1 = a1 * b1 - a2 * b2, r2 = a1 * b2 + a2 * b1;
        return to_string(r1) + "+" + to_string(r2) + "i";
    }
};


// Source https://leetcode.com/problems/convert-bst-to-greater-tree/

Given the root of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST.

As a reminder, a binary search tree is a tree that satisfies these constraints:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
 

Example 1:


Input: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]
Output: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]
Example 2:

Input: root = [0,null,1]
Output: [1,null,1]
 

Constraints:

The number of nodes in the tree is in the range [0, 104].
-104 <= Node.val <= 104
All the values in the tree are unique.
root is guaranteed to be a valid binary search tree.

class Solution
{
public:
    TreeNode *convertBST(TreeNode *root)
    {
        int sum = 0;
        helper(root, sum);
        return root;
    }
    void helper(TreeNode *node, int &sum)
    {
        if (!node) return;
        helper(node->right, sum);
        node->val += sum;
        sum = node->val;
        helper(node->left, sum);
    }
};


// Source https://leetcode.com/problems/minimum-time-difference/

Given a list of 24-hour clock time points in "HH:MM" format, return the minimum minutes difference between any two time-points in the list.
 

Example 1:

Input: timePoints = ["23:59","00:00"]
Output: 1
Example 2:

Input: timePoints = ["00:00","23:59","00:00"]
Output: 0
 

Constraints:

2 <= timePoints.length <= 2 * 104
timePoints[i] is in the format "HH:MM".

class Solution
{
public:
    int findMinDifference(vector<string> &timePoints)
    {
        int res = INT_MAX, pre = 0, first = INT_MAX, last = INT_MIN;
        vector<int> mask(1440, 0);
        for (auto &str : timePoints)
        {
            int h = stoi(str.substr(0, 2)), m = stoi(str.substr(3));
            if (mask[h * 60 + m] == 1) return 0;
            mask[h * 60 + m] = 1;
        }
        for (int i = 0; i < 1440; ++i)
        {
            if (mask[i] == 1)
            {
                if (first != INT_MAX)
                {
                    res = min(res, i - pre);
                }
                first = min(first, i);
                last = max(last, i);
                pre = i;
            }
        }
        return min(res, 1440 + first - last);
    }
};


// Source https://leetcode.com/problems/single-element-in-a-sorted-array/

You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.

Return the single element that appears only once.

Your solution must run in O(log n) time and O(1) space.

 

Example 1:

Input: nums = [1,1,2,3,3,4,4,8,8]
Output: 2
Example 2:

Input: nums = [3,3,7,7,10,11,11]
Output: 10
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 105

1,1,2,3,3,4,4,8,8
在2的左边满足nums[mid] == nums[mid ^ 1]，比如nums[1] == nums[0]，nums[0] == nums[1]

3,3,7,7,10,11,11
在10的左边满足nums[mid] == nums[mid ^ 1]，比如nums[1] == nums[0]，nums[0] == nums[1]，nums[2] == nums[3]，nums[3] == nums[2]

class Solution
{
public:
    int singleNonDuplicate(vector<int> &nums)
    {
        int n = nums.size();
        if (n == 1) return nums[0];
        if (nums[n - 1] != nums[n - 2]) return nums[n - 1];
        int left = 0, right = n - 1;
        while (left < right)
        {
            int mid = left + (right - left) / 2;
            if (nums[mid] == nums[mid ^ 1]) left = mid + 1;
            else right = mid;
        }
        return nums[left];
    }
};


// Source https://leetcode.com/problems/reverse-string-ii/

Given a string s and an integer k, reverse the first k characters for every 2k characters counting from the start of the string.

If there are fewer than k characters left, reverse all of them. If there are less than 2k but greater than or equal to k characters, then reverse the first k characters and leave the other as original.

 

Example 1:

Input: s = "abcdefg", k = 2
Output: "bacdfeg"
Example 2:

Input: s = "abcd", k = 2
Output: "bacd"
 

Constraints:

1 <= s.length <= 104
s consists of only lowercase English letters.
1 <= k <= 104

class Solution
{
public:
    string reverseStr(string s, int k)
    {
        int n = s.size();
        int start = 0;
        while (start < n)
        {
            int end = min(start+k, n);
            reverse(s.begin() + start, s.begin() + end);
            start += (2 * k);
        }
        return s;
    }
};


// Source https://leetcode.com/problems/01-matrix/

Given an m x n binary matrix mat, return the distance of the nearest 0 for each cell.

The distance between two adjacent cells is 1.


Example 1:


Input: mat = [[0,0,0],[0,1,0],[0,0,0]]
Output: [[0,0,0],[0,1,0],[0,0,0]]
Example 2:


Input: mat = [[0,0,0],[0,1,0],[1,1,1]]
Output: [[0,0,0],[0,1,0],[1,2,1]]
 

Constraints:

m == mat.length
n == mat[i].length
1 <= m, n <= 104
1 <= m * n <= 104
mat[i][j] is either 0 or 1.
There is at least one 0 in mat.

class Solution
{

public:
    vector<vector<int>> updateMatrix(vector<vector<int>> &matrix)
    {
        int m = matrix.size();
        int n = matrix[0].size();
        vector<vector<int> > dis(m, vector<int>(n, -1));
        queue<pair<int, int> > q;

        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(matrix[i][j] == 0)
                {
                    q.push({i, j});
                    dis[i][j] = 0;
                }
            }
        }

        int x[4] = {-1, 0, 1, 0};
        int y[4] = {0, 1, 0, -1};

        while(!q.empty())
        {
            pair<int, int> p = q.front();
            q.pop();
            for(int i = 0; i < 4; i++)
            {
                int xd = p.first + x[i];
                int yd = p.second + y[i];

                if(xd >= 0 && yd >= 0 && xd < m && yd < n  && dis[xd][yd] == -1)
                {
                    dis[xd][yd] = dis[p.first][p.second] + 1;
                    q.push({xd, yd});
                }
            }
        }

        return dis;
    }
};


// Source https://leetcode.com/problems/diameter-of-binary-tree/

Given the root of a binary tree, return the length of the diameter of the tree.

The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.

The length of a path between two nodes is represented by the number of edges between them.

 

Example 1:


Input: root = [1,2,3,4,5]
Output: 3
Explanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].
Example 2:

Input: root = [1,2]
Output: 1
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
-100 <= Node.val <= 100

class Solution
{
public:
    int ans;
    int recur(TreeNode *node)
    {
        if (!node) return 0;
        int leftDepth = recur(node->left);
        int rightDepth = recur(node->right);
        ans = max(ans, leftDepth + rightDepth);
        return max(leftDepth, rightDepth) + 1;
    }

    int diameterOfBinaryTree(TreeNode *root)
    {
        ans = 0;
        recur(root);
        return ans;
    }
};


// Source https://leetcode.com/problems/remove-boxes/

You are given several boxes with different colors represented by different positive numbers.

You may experience several rounds to remove boxes until there is no box left. 
Each time you can choose some continuous boxes with the same color (i.e., composed of k boxes, k >= 1), remove them and get k * k points.

Return the maximum points you can get.

 

Example 1:

Input: boxes = [1,3,2,2,2,3,4,3,1]
Output: 23
Explanation:
[1, 3, 2, 2, 2, 3, 4, 3, 1] 
----> [1, 3, 3, 4, 3, 1] (3*3=9 points) 
----> [1, 3, 3, 3, 1] (1*1=1 points) 
----> [1, 1] (3*3=9 points) 
----> [] (2*2=4 points)
Example 2:

Input: boxes = [1,1,1]
Output: 9
Example 3:

Input: boxes = [1]
Output: 1
 

Constraints:

1 <= boxes.length <= 100
1 <= boxes[i] <= 100

class Solution
{
public:
    int dp[101][101][101];

    int helper(vector<int> &boxes, int i, int j, int k)
    {
        if (i > j) return 0;
        if (dp[i][j][k] > 0) return dp[i][j][k];
        int res = (k * k) + helper(boxes, i + 1, j, 1);
        for (int m = i + 1; m <= j; ++m)
        {
            if (boxes[m] == boxes[i])
            {
                res = max(res, helper(boxes, i + 1, m - 1, 1) + helper(boxes, m, j, k + 1));
            }
        }
        return dp[i][j][k] = res;
    }

    int removeBoxes(vector<int> &boxes)
    {
        int n = boxes.size();
        memset(dp, 0, sizeof(dp));
        return helper(boxes, 0, n - 1, 1);
    }
};


// Source https://leetcode.com/problems/number-of-provinces/

There are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, 
then city a is connected indirectly with city c.

A province is a group of directly or indirectly connected cities and no other cities outside of the group.

You are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise.

Return the total number of provinces.

 

Example 1:


Input: isConnected = [[1,1,0],[1,1,0],[0,0,1]]
Output: 2
Example 2:


Input: isConnected = [[1,0,0],[0,1,0],[0,0,1]]
Output: 3
 

Constraints:

1 <= n <= 200
n == isConnected.length
n == isConnected[i].length
isConnected[i][j] is 1 or 0.
isConnected[i][i] == 1
isConnected[i][j] == isConnected[j][i]

class Solution
{
public:
    int findCircleNum(vector<vector<int>> &isConnected)
    {
        int n = isConnected.size(), res = n;
        vector<int> root(n);
        for (int i = 0; i < n; ++i) root[i] = i;
        for (int i = 0; i < n; ++i)
        {
            for (int j = i + 1; j < n; ++j)
            {
                if (isConnected[i][j] == 1)
                {
                    int p1 = getRoot(root, i);
                    int p2 = getRoot(root, j);
                    if (p1 != p2)
                    {
                        --res;
                        root[p2] = p1;
                    }
                }
            }
        }
        return res;
    }
    int getRoot(vector<int> &root, int i)
    {
        if (i != root[i]) root[i] = getRoot(root, root[i]);
        return root[i];
    }
};


// Source https://leetcode.com/problems/student-attendance-record-i/

You are given a string s representing an attendance record for a student where each character signifies whether the student was absent, late, or present on that day. 
The record only contains the following three characters:

'A': Absent.
'L': Late.
'P': Present.
The student is eligible for an attendance award if they meet both of the following criteria:

The student was absent ('A') for strictly fewer than 2 days total.
The student was never late ('L') for 3 or more consecutive days.
Return true if the student is eligible for an attendance award, or false otherwise.

 

Example 1:

Input: s = "PPALLP"
Output: true
Explanation: The student has fewer than 2 absences and was never late 3 or more consecutive days.
Example 2:

Input: s = "PPALLL"
Output: false
Explanation: The student was late 3 consecutive days in the last 3 days, so is not eligible for the award.
 

Constraints:

1 <= s.length <= 1000
s[i] is either 'A', 'L', or 'P'.

class Solution
{
public:
    bool checkRecord(string s)
    {
        int cntA = 0, cntL = 0;
        for (char c : s)
        {
            if (c == 'A')
            {
                if (++cntA > 1) return false;
                cntL = 0;
            }
            else if (c == 'L')
            {
                if (++cntL > 2) return false;
            }
            else
            {
                cntL = 0;
            }
        }
        return true;
    }
};


// Source https://leetcode.com/problems/student-attendance-record-ii/

An attendance record for a student can be represented as a string where each character signifies whether the student was absent, late, or present on that day. 
The record only contains the following three characters:

'A': Absent.
'L': Late.
'P': Present.
Any student is eligible for an attendance award if they meet both of the following criteria:

The student was absent ('A') for strictly fewer than 2 days total.
The student was never late ('L') for 3 or more consecutive days.
Given an integer n, return the number of possible attendance records of length n that make a student eligible for an attendance award. 
The answer may be very large, so return it modulo 109 + 7.

 

Example 1:

Input: n = 2
Output: 8
Explanation: There are 8 records with length 2 that are eligible for an award:
"PP", "AP", "PA", "LP", "PL", "AL", "LA", "LL"
Only "AA" is not eligible because there are 2 absences (there need to be fewer than 2).
Example 2:

Input: n = 1
Output: 3
Example 3:

Input: n = 10101
Output: 183236316
 

Constraints:

1 <= n <= 105

class Solution
{
public:
    const int mod = 1000000007;

    int checkRecord(int n)
    {
        if (n == 1)
            return 3;
        if (n == 2)
            return 8;
        vector<int> A(n + 1, 0);
        vector<int> L(n + 1, 0);
        vector<int> P(n + 1, 0);
        A[1] = 1;
        L[1] = 1;
        P[1] = 1;
        A[2] = 2;
        L[2] = 3;
        P[2] = 3;
        A[3] = 4;
        L[3] = 7;
        P[3] = 8;
        for (int i = 4; i <= n; i++)
        {
            P[i] = ((A[i - 1] + L[i - 1]) % mod + P[i - 1]) % mod;
            L[i] = ((A[i - 1] + P[i - 1]) % mod + (A[i - 2] + P[i - 2]) % mod) % mod;
            // P1 表示以P结尾的不包含A的所有排列方式，L1 表示以L结尾的不包含A的所有排列方式
            // A[i] = P1[i-1] + L1[i-1]
            // P1[i-1] = P1[i-2] + L1[i-2]            
            // A[i] = P1[i]
            // L1[i-1] = P1[i-2] + P1[i-3]
            // A[i] = A[i-1] + A[i-2] + A[i-3]
            A[i] = ((A[i - 1] + A[i - 2]) % mod + A[i - 3]) % mod;
        }
        return (((A[n] % mod + L[n] % mod) % mod + P[n] % mod) % mod);
    }
};


// Source https://leetcode.com/problems/optimal-division/

You are given an integer array nums. The adjacent integers in nums will perform the float division.

For example, for nums = [2,3,4], we will evaluate the expression "2/3/4".
However, you can add any number of parenthesis at any position to change the priority of operations. 
You want to add these parentheses such the value of the expression after the evaluation is maximum.

Return the corresponding expression that has the maximum value in string format.

Note: your expression should not contain redundant parenthesis.

 

Example 1:

Input: nums = [1000,100,10,2]
Output: "1000/(100/10/2)"
Explanation:
1000/(100/10/2) = 1000/((100/10)/2) = 200
However, the bold parenthesis in "1000/((100/10)/2)" are redundant, since they don't influence the operation priority. So you should return "1000/(100/10/2)".
Other cases:
1000/(100/10)/2 = 50
1000/(100/(10/2)) = 50
1000/100/10/2 = 0.5
1000/100/(10/2) = 2
Example 2:

Input: nums = [2,3,4]
Output: "2/(3/4)"
Example 3:

Input: nums = [2]
Output: "2"
 

Constraints:

1 <= nums.length <= 10
2 <= nums[i] <= 1000
There is only one optimal division for the given iput.

class Solution
{
public:
    string optimalDivision(vector<int> &nums)
    {
        if (nums.empty()) return "";
        string res = to_string(nums[0]);
        if (nums.size() == 1) return res;
        if (nums.size() == 2) return res + "/" + to_string(nums[1]);
        res += "/(" + to_string(nums[1]);
        for (int i = 2; i < nums.size(); ++i)
        {
            res += "/" + to_string(nums[i]);
        }
        return res + ")";
    }
};


// Source https://leetcode.com/problems/brick-wall/

There is a rectangular brick wall in front of you with n rows of bricks. The ith row has some number of bricks each of the same height (i.e., one unit) but they can be of different widths. 
The total width of each row is the same.

Draw a vertical line from the top to the bottom and cross the least bricks. If your line goes through the edge of a brick, then the brick is not considered as crossed. 
You cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks.

Given the 2D array wall that contains the information about the wall, return the minimum number of crossed bricks after drawing such a vertical line.

 

Example 1:


Input: wall = [[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]]
Output: 2

Example 2:

Input: wall = [[1],[1],[1]]
Output: 3
 

Constraints:

n == wall.length
1 <= n <= 104
1 <= wall[i].length <= 104
1 <= sum(wall[i].length) <= 2 * 104
sum(wall[i]) is the same for each row i.
1 <= wall[i][j] <= 231 - 1

class Solution
{
public:
    int leastBricks(vector<vector<int>> &wall)
    {
        int maxFreq = 0, n = wall.size();
        unordered_map<int, int> mp;
        for (auto &row : wall)
        {
            int sum = 0, cnt = row.size();
            for (int i = 0; i < cnt - 1; ++i)
            {
                sum += row[i];
                maxFreq = max(maxFreq, ++mp[sum]);
            }
        }
        return n - maxFreq;
    }
};


// Source https://leetcode.com/problems/next-greater-element-iii/

Given a positive integer n, find the smallest integer which has exactly the same digits existing in the integer n and is greater in value than n. If no such positive integer exists, return -1.

Note that the returned integer should fit in 32-bit integer, if there is a valid answer but it does not fit in 32-bit integer, return -1.

 

Example 1:

Input: n = 12
Output: 21
Example 2:

Input: n = 21
Output: -1
 

Constraints:

1 <= n <= 231 - 1

class Solution
{
public:
    int nextGreaterElement(int n)
    {
        string str = to_string(n);
        int len = str.size(), i = len - 1;
        for (; i > 0; --i)
        {
            if (str[i] > str[i - 1]) break;
        }
        if (i == 0) return -1;
        for (int j = len - 1; j >= i; --j)
        {
            if (str[j] > str[i - 1])
            {
                swap(str[j], str[i - 1]);
                break;
            }
        }
        sort(str.begin() + i, str.end());
        long long res = stoll(str);
        return res > INT_MAX ? -1 : res;
    }
};

class Solution
{
public:
    int nextGreaterElement(int n)
    {
        string str = to_string(n);
        bool result = next_permutation(str.begin(), str.end());
        if (!result) return -1;
        long ans = stoll(str);
        return ans > INT_MAX ? -1 : ans;
    }
};

// Source https://leetcode.com/problems/reverse-words-in-a-string-iii/

Given a string s, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.

 

Example 1:

Input: s = "Let's take LeetCode contest"
Output: "s'teL ekat edoCteeL tsetnoc"
Example 2:

Input: s = "God Ding"
Output: "doG gniD"
 

Constraints:

1 <= s.length <= 5 * 104
s contains printable ASCII characters.
s does not contain any leading or trailing spaces.
There is at least one word in s.
All the words in s are separated by a single space.

class Solution
{
public:
    string reverseWords(string s)
    {
        string res = "", t = "";
        istringstream is(s);
        while (is >> t)
        {
            reverse(t.begin(), t.end());
            res += t + " ";
        }
        res.pop_back();
        return res;
    }
};


// Source https://leetcode.com/problems/logical-or-of-two-binary-grids-represented-as-quad-trees/

A Binary Matrix is a matrix in which all the elements are either 0 or 1.

Given quadTree1 and quadTree2. quadTree1 represents a n * n binary matrix and quadTree2 represents another n * n binary matrix.

Return a Quad-Tree representing the n * n binary matrix which is the result of logical bitwise OR of the two binary matrixes represented by quadTree1 and quadTree2.

Notice that you can assign the value of a node to True or False when isLeaf is False, and both are accepted in the answer.

A Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:

val: True if the node represents a grid of 1's or False if the node represents a grid of 0's.
isLeaf: True if the node is leaf node on the tree or False if the node has the four children.
class Node {
    public boolean val;
    public boolean isLeaf;
    public Node topLeft;
    public Node topRight;
    public Node bottomLeft;
    public Node bottomRight;
}
We can construct a Quad-Tree from a two-dimensional area using the following steps:

If the current grid has the same value (i.e all 1's or all 0's) set isLeaf True and set val to the value of the grid and set the four children to Null and stop.
If the current grid has different values, set isLeaf to False and set val to any value and divide the current grid into four sub-grids as shown in the photo.
Recurse for each of the children with the proper sub-grid.

If you want to know more about the Quad-Tree, you can refer to the wiki.

Quad-Tree format:

The input/output represents the serialized format of a Quad-Tree using level order traversal, where null signifies a path terminator where no node exists below.

It is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list [isLeaf, val].

If the value of isLeaf or val is True we represent it as 1 in the list [isLeaf, val] and if the value of isLeaf or val is False we represent it as 0.

 

Example 1:

 
Input: quadTree1 = [[0,1],[1,1],[1,1],[1,0],[1,0]]
, quadTree2 = [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]
Output: [[0,0],[1,1],[1,1],[1,1],[1,0]]
Explanation: quadTree1 and quadTree2 are shown above. You can see the binary matrix which is represented by each Quad-Tree.
If we apply logical bitwise OR on the two binary matrices we get the binary matrix below which is represented by the result Quad-Tree.
Notice that the binary matrices shown are only for illustration, you don't have to construct the binary matrix to get the result tree.

Example 2:

Input: quadTree1 = [[1,0]], quadTree2 = [[1,0]]
Output: [[1,0]]
Explanation: Each tree represents a binary matrix of size 1*1. Each matrix contains only zero.
The resulting matrix is of size 1*1 with also zero.
 

Constraints:

quadTree1 and quadTree2 are both valid Quad-Trees each representing a n * n grid.
n == 2x where 0 <= x <= 9.

class Solution
{
public:
    Node *intersect(Node *quadTree1, Node *quadTree2)
    {
        if (quadTree1->isLeaf) return quadTree1->val ? quadTree1 : quadTree2;
        if (quadTree2->isLeaf) return quadTree2->val ? quadTree2 : quadTree1;
        Node *tl = intersect(quadTree1->topLeft, quadTree2->topLeft);
        Node *tr = intersect(quadTree1->topRight, quadTree2->topRight);
        Node *bl = intersect(quadTree1->bottomLeft, quadTree2->bottomLeft);
        Node *br = intersect(quadTree1->bottomRight, quadTree2->bottomRight);
        if (tl->isLeaf && tr->isLeaf && bl->isLeaf && br->isLeaf && tl->val == tr->val && tl->val == bl->val && tl->val == br->val)
        {
            return new Node(tl->val, true, NULL, NULL, NULL, NULL); // Node(bool _val, bool _isLeaf)
        }
        else
        {
            return new Node(false, false, tl, tr, bl, br); // Node(bool _val, bool _isLeaf)
        }
    }
};


// Source https://leetcode.com/problems/maximum-depth-of-n-ary-tree/

Given a n-ary tree, find its maximum depth.

The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).

 

Example 1:



Input: root = [1,null,3,2,4,null,5,6]
Output: 3
Example 2:



Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
Output: 5
 

Constraints:

The total number of nodes is in the range [0, 104].
The depth of the n-ary tree is less than or equal to 1000.


class Solution
{
public:
    int maxDepth(Node *root)
    {
        int res = 0;
        helper(root, 1, res);
        return res;
    }
    void helper(Node *node, int cur, int &res)
    {
        if (!node) return;
        if (node->children.empty()) res = max(res, cur);
        for (Node *child : node->children)
        {
            helper(child, cur + 1, res);
        }
    }
};


// Source https://leetcode.com/problems/subarray-sum-equals-k/

Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.

 

Example 1:

Input: nums = [1,1,1], k = 2
Output: 2
Example 2:

Input: nums = [1,2,3], k = 3
Output: 2
 

Constraints:

1 <= nums.length <= 2 * 104
-1000 <= nums[i] <= 1000
-107 <= k <= 107

class Solution
{
public:
    int subarraySum(vector<int> &nums, int k)
    {
        unordered_map<int, int> mp;
        int sum = 0;
        mp[0]++;
        int ans = 0;
        for(int i = 0; i < nums.size(); i++)
        {
            sum += nums[i];
            if(mp.count(sum - k))
                ans += mp[sum - k];
            mp[sum]++;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/array-partition-i/

Given an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2), ..., (an, bn) such that the sum of min(ai, bi) for all i is maximized. Return the maximized sum.

 

Example 1:

Input: nums = [1,4,3,2]
Output: 4
Explanation: All possible pairings (ignoring the ordering of elements) are:
1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 3
2. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 3
3. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4
So the maximum possible sum is 4.
Example 2:

Input: nums = [6,2,6,5,1,2]
Output: 9
Explanation: The optimal pairing is (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9.
 

Constraints:

1 <= n <= 104
nums.length == 2 * n
-104 <= nums[i] <= 104

class Solution
{
public:
    int arrayPairSum(vector<int> &nums)
    {
        int res = 0, n = nums.size();
        sort(nums.begin(), nums.end());
        for (int i = 0; i < n; i += 2)
        {
            res += nums[i];
        }
        return res;
    }
};


// Source https://leetcode.com/problems/binary-tree-tilt/

Given the root of a binary tree, return the sum of every tree node's tilt.

The tilt of a tree node is the absolute difference between the sum of all left subtree node values and all right subtree node values. If a node does not have a left child, then the sum of the left subtree node values is treated as 0. The rule is similar if the node does not have a right child.

 

Example 1:


Input: root = [1,2,3]
Output: 1
Explanation: 
Tilt of node 2 : |0-0| = 0 (no children)
Tilt of node 3 : |0-0| = 0 (no children)
Tilt of node 1 : |2-3| = 1 (left subtree is just left child, so sum is 2; right subtree is just right child, so sum is 3)
Sum of every tilt : 0 + 0 + 1 = 1
Example 2:


Input: root = [4,2,9,3,5,null,7]
Output: 15
Explanation: 
Tilt of node 3 : |0-0| = 0 (no children)
Tilt of node 5 : |0-0| = 0 (no children)
Tilt of node 7 : |0-0| = 0 (no children)
Tilt of node 2 : |3-5| = 2 (left subtree is just left child, so sum is 3; right subtree is just right child, so sum is 5)
Tilt of node 9 : |0-7| = 7 (no left child, so sum is 0; right subtree is just right child, so sum is 7)
Tilt of node 4 : |(3+5+2)-(9+7)| = |10-16| = 6 (left subtree values are 3, 5, and 2, which sums to 10; right subtree values are 9 and 7, which sums to 16)
Sum of every tilt : 0 + 0 + 0 + 2 + 7 + 6 = 15
Example 3:


Input: root = [21,7,14,1,1,2,2,3,3]
Output: 9
 

Constraints:

The number of nodes in the tree is in the range [0, 104].
-1000 <= Node.val <= 1000

class Solution
{
public:
    int findTilt(TreeNode *root)
    {
        int res = 0;
        postorder(root, res);
        return res;
    }
    int postorder(TreeNode *node, int &res)
    {
        if (!node) return 0;
        int leftSum = postorder(node->left, res);
        int rightSum = postorder(node->right, res);
        res += abs(leftSum - rightSum);
        return leftSum + rightSum + node->val;
    }
};


// Source https://leetcode.com/problems/find-the-closest-palindrome/

Given a string n representing an integer, return the closest integer (not including itself), which is a palindrome. If there is a tie, return the smaller one.

The closest is defined as the absolute difference minimized between two integers.

 

Example 1:

Input: n = "123"
Output: "121"
Example 2:

Input: n = "1"
Output: "0"
Explanation: 0 and 2 are the closest palindromes but we return the smallest which is 0.
 

Constraints:

1 <= n.length <= 18
n consists of only digits.
n does not have leading zeros.
n is representing an integer in the range [1, 1018 - 1].

class Solution
{
public:
    string nearestPalindromic(string n)
    {
        long len = n.size(), num = stol(n), res, minDiff = LONG_MAX;
        unordered_set<long> s;
        s.insert(pow(10, len) + 1);
        s.insert(pow(10, len - 1) - 1);
        long prefix = stol(n.substr(0, (len + 1) / 2));
        for (long i = -1; i <= 1; ++i)
        {
            string pre = to_string(prefix + i);
            string str = pre + string(pre.rbegin() + (len & 1), pre.rend());
            s.insert(stol(str));
        }
        s.erase(num);
        for (auto a : s)
        {
            long diff = abs(a - num);
            if (diff < minDiff)
            {
                minDiff = diff;
                res = a;
            }
            else if (diff == minDiff)
            {
                res = min(res, a);
            }
        }
        return to_string(res);
    }
};


// Source https://leetcode.com/problems/array-nesting/

You are given an integer array nums of length n where nums is a permutation of the numbers in the range [0, n - 1].

You should build a set s[k] = {nums[k], nums[nums[k]], nums[nums[nums[k]]], ... } subjected to the following rule:

The first element in s[k] starts with the selection of the element nums[k] of index = k.
The next element in s[k] should be nums[nums[k]], and then nums[nums[nums[k]]], and so on.
We stop adding right before a duplicate element occurs in s[k].
Return the longest length of a set s[k].

 

Example 1:

Input: nums = [5,4,0,3,1,6,2]
Output: 4
Explanation: 
nums[0] = 5, nums[1] = 4, nums[2] = 0, nums[3] = 3, nums[4] = 1, nums[5] = 6, nums[6] = 2.
One of the longest sets s[k]:
s[0] = {nums[0], nums[5], nums[6], nums[2]} = {5, 6, 2, 0}
Example 2:

Input: nums = [0,1,2]
Output: 1
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] < nums.length
All the values of nums are unique.

class Solution
{
public:
    int arrayNesting(vector<int> &nums)
    {
        int n = nums.size(), res = INT_MIN;
        vector<bool> visited(n, false);
        for (int i = 0; i < n; ++i)
        {
            if (visited[nums[i]]) continue;
            res = max(res, helper(nums, i, visited));
        }
        return res;
    }
    int helper(vector<int> &nums, int start, vector<bool> &visited)
    {
        int i = start, cnt = 0;
        while (cnt == 0 || i != start)
        {
            visited[i] = true;
            i = nums[i];
            ++cnt;
        }
        return cnt;
    }
};


// Source https://leetcode.com/problems/reshape-the-matrix/

In MATLAB, there is a handy function called reshape which can reshape an m x n matrix into a new one with a different size r x c keeping its original data.

You are given an m x n matrix mat and two integers r and c representing the number of rows and the number of columns of the wanted reshaped matrix.

The reshaped matrix should be filled with all the elements of the original matrix in the same row-traversing order as they were.

If the reshape operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.

 

Example 1:


Input: mat = [[1,2],[3,4]], r = 1, c = 4
Output: [[1,2,3,4]]
Example 2:


Input: mat = [[1,2],[3,4]], r = 2, c = 4
Output: [[1,2],[3,4]]
 

Constraints:

m == mat.length
n == mat[i].length
1 <= m, n <= 100
-1000 <= mat[i][j] <= 1000
1 <= r, c <= 300

class Solution
{
public:
    vector<vector<int>> matrixReshape(vector<vector<int>> &nums, int r, int c)
    {
        int m = nums.size(), n = nums[0].size();
        if (m * n != r * c) return nums;
        vector<vector<int>> res(r, vector<int>(c));
        for (int i = 0; i < r; ++i)
        {
            for (int j = 0; j < c; ++j)
            {
                int k = i * c + j;
                res[i][j] = nums[k / n][k % n];
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/permutation-in-string/

Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.

 

Example 1:

Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input: s1 = "ab", s2 = "eidboaoo"
Output: false
 

Constraints:

1 <= s1.length, s2.length <= 104
s1 and s2 consist of lowercase English letters.

class Solution
{
public:
    bool checkInclusion(string s1, string s2)
    {
        int n1 = s1.size(), n2 = s2.size();
        vector<int> freq(26);
        for (char ch : s1) ++freq[ch - 'a'];
        int left = 0, right = 0, cnt = n1;
        while (right < n2)
        {
            if (freq[s2[right] - 'a']-- > 0) --cnt;
            while (cnt == 0)
            {
                if (right - left + 1 == n1) return true;
                if (++freq[s2[left++] - 'a'] > 0) ++cnt;
            }
            ++right;
        }
        return false;
    }
};


// Source https://leetcode.com/problems/subtree-of-another-tree/

Given the roots of two binary trees root and subRoot, return true if there is a subtree of root with the same structure and node values of subRoot and false otherwise.

A subtree of a binary tree tree is a tree that consists of a node in tree and all of this node's descendants. The tree tree could also be considered as a subtree of itself.

 

Example 1:


Input: root = [3,4,5,1,2], subRoot = [4,1,2]
Output: true
Example 2:


Input: root = [3,4,5,1,2,null,null,null,null,0], subRoot = [4,1,2]
Output: false
 

Constraints:

The number of nodes in the root tree is in the range [1, 2000].
The number of nodes in the subRoot tree is in the range [1, 1000].
-104 <= root.val <= 104
-104 <= subRoot.val <= 104

class Solution
{
public:
    bool isSubtree(TreeNode *root, TreeNode *subRoot)
    {
        if (!root) return false;
        if (isSame(root, subRoot)) return true;
        return isSubtree(root->left, subRoot) || isSubtree(root->right, subRoot);
    }
    bool isSame(TreeNode *root, TreeNode *subRoot)
    {
        if (!root && !subRoot) return true;
        if (!root || !subRoot) return false;
        if (root->val != subRoot->val) return false;
        return isSame(root->left, subRoot->left) && isSame(root->right, subRoot->right);
    }
};


// Source https://leetcode.com/problems/distribute-candies/

Alice has n candies, where the ith candy is of type candyType[i]. Alice noticed that she started to gain weight, so she visited a doctor.

The doctor advised Alice to only eat n / 2 of the candies she has (n is always even). Alice likes her candies very much, 
and she wants to eat the maximum number of different types of candies while still following the doctor's advice.

Given the integer array candyType of length n, return the maximum number of different types of candies she can eat if she only eats n / 2 of them.

 

Example 1:

Input: candyType = [1,1,2,2,3,3]
Output: 3
Explanation: Alice can only eat 6 / 2 = 3 candies. Since there are only 3 types, she can eat one of each type.
Example 2:

Input: candyType = [1,1,2,3]
Output: 2
Explanation: Alice can only eat 4 / 2 = 2 candies. Whether she eats types [1,2], [1,3], or [2,3], she still can only eat 2 different types.
Example 3:

Input: candyType = [6,6,6,6]
Output: 1
Explanation: Alice can only eat 4 / 2 = 2 candies. Even though she can eat 2 candies, she only has 1 type.
 

Constraints:

n == candyType.length
2 <= n <= 104
n is even.
-105 <= candyType[i] <= 105

class Solution
{
public:
    int distributeCandies(vector<int> &candies)
    {
        unordered_set<int> s;
        for (int candy : candies) s.insert(candy);
        return min(s.size(), candies.size() / 2);
    }
};


// Source https://leetcode.com/problems/out-of-boundary-paths/

There is an m x n grid with a ball. The ball is initially at the position [startRow, startColumn]. 
You are allowed to move the ball to one of the four adjacent cells in the grid (possibly out of the grid crossing the grid boundary). You can apply at most maxMove moves to the ball.

Given the five integers m, n, maxMove, startRow, startColumn, return the number of paths to move the ball out of the grid boundary. 
Since the answer can be very large, return it modulo 109 + 7.

 

Example 1:


Input: m = 2, n = 2, maxMove = 2, startRow = 0, startColumn = 0
Output: 6
Example 2:


Input: m = 1, n = 3, maxMove = 3, startRow = 0, startColumn = 1
Output: 12
 

Constraints:

1 <= m, n <= 50
0 <= maxMove <= 50
0 <= startRow < m
0 <= startColumn < n

class Solution
{
public:
    int m, n;
    vector<vector<vector<int>>> dp;
    const long long N = 1e9 + 7;

    int findPath(int maxMove, int startRow, int startColumn)
    {
        if(startRow >= m || startRow < 0 || startColumn >= n || startColumn < 0) return 1;
        if(maxMove == 0) return 0;
        if(dp[maxMove][startRow][startColumn] != -1) return dp[maxMove][startRow][startColumn];
        int up = (findPath(maxMove - 1, startRow - 1, startColumn)) % N;
        int down = (findPath(maxMove - 1, startRow + 1, startColumn)) % N;
        int left = (findPath(maxMove - 1, startRow, startColumn - 1)) % N;
        int right = (findPath(maxMove - 1, startRow, startColumn + 1)) % N;
        return dp[maxMove][startRow][startColumn] = ((((up + down) % N + left) % N ) + right) % N;
    }

    int findPaths(int m, int n, int maxMove, int startRow, int startColumn)
    {
        this->m = m;
        this->n = n;
        dp = vector<vector<vector<int>>>(maxMove + 1, vector<vector<int>>(m + 5, vector<int> (n + 5, -1)));
        return findPath(maxMove, startRow, startColumn);
    }
};


// Source https://leetcode.com/problems/shortest-unsorted-continuous-subarray/

Given an integer array nums, you need to find one continuous subarray that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order.

Return the shortest such subarray and output its length.

 

Example 1:

Input: nums = [2,6,4,8,10,9,15]
Output: 5
Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.
Example 2:

Input: nums = [1,2,3,4]
Output: 0
Example 3:

Input: nums = [1]
Output: 0
 

Constraints:

1 <= nums.length <= 104
-105 <= nums[i] <= 105

class Solution
{
public:
    int findUnsortedSubarray(vector<int> &nums)
    {
        vector<int> v = nums;
        int start = 0;
        int end = 0;
        sort(nums.begin(), nums.end());
        for(int i = 0; i < nums.size(); i++)
        {
            if(nums[i] != v[i])
            {
                start = i;
                break;
            }
        }
        for(int j = nums.size() - 1; j >= 0; j--)
        {
            if(nums[j] != v[j])
            {
                end = j;
                break;
            }
        }
        if(end == start)return 0;
        return end - start + 1;
    }
};


// Source https://leetcode.com/problems/delete-operation-for-two-strings/

Given two strings word1 and word2, return the minimum number of steps required to make word1 and word2 the same.

In one step, you can delete exactly one character in either string.

 

Example 1:

Input: word1 = "sea", word2 = "eat"
Output: 2
Explanation: You need one step to make "sea" to "ea" and another step to make "eat" to "ea".
Example 2:

Input: word1 = "leetcode", word2 = "etco"
Output: 4
 

Constraints:

1 <= word1.length, word2.length <= 500
word1 and word2 consist of only lowercase English letters.

class Solution
{
public:
    int minDistance(string word1, string word2)
    {
        int n1 = word1.size(), n2 = word2.size();
        vector<vector<int>> dp(n1 + 1, vector<int>(n2 + 1, 0));
        for (int i = 1; i <= n1; ++i)
        {
            for (int j = 1; j <= n2; ++j)
            {
                if (word1[i - 1] == word2[j - 1])
                {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                }
                else
                {
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }
        return n1 + n2 - 2 * dp[n1][n2];
    }
};


// Source https://leetcode.com/problems/erect-the-fence/

You are given an array trees where trees[i] = [xi, yi] represents the location of a tree in the garden.

You are asked to fence the entire garden using the minimum length of rope as it is expensive. The garden is well fenced only if all the trees are enclosed.

Return the coordinates of trees that are exactly located on the fence perimeter.

 

Example 1:


Input: points = [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]
Output: [[1,1],[2,0],[3,3],[2,4],[4,2]]
Example 2:


Input: points = [[1,2],[2,2],[4,2]]
Output: [[4,2],[2,2],[1,2]]
 

Constraints:

1 <= points.length <= 3000
points[i].length == 2
0 <= xi, yi <= 100
All the given points are unique.

class Solution
{
public:
    vector<vector<int>> outerTrees(vector<vector<int>> &trees)
    {
        sort(trees.begin(), trees.end(), [](auto & a, auto & b)
        {
            if (a[0] == b[0])
            {
                return a[1] > b[1];
            }
            else
            {
                return a[0] < b[0];
            }
        });

        vector<vector<int>> points1; // 记录沿着下边界从最左边的点到最右边的点经过的点
        int n = trees.size();
        for (int i = 0; i < n; ++i)
        {
            while (points1.size() >= 2
                    && orientation(points1[points1.size() - 2], points1[points1.size() - 1], trees[i]) > 0)
            {
                points1.pop_back();
            }

            points1.push_back(trees[i]);
        }

        vector<vector<int>> points2; // 记录沿着上边界从最右边的点到最左边的点经过的点
        for (int i = n - 1; i >= 0; --i)
        {
            while (points2.size() >= 2
                    && orientation(points2[points2.size() - 2], points2[points2.size() - 1], trees[i]) > 0)
            {
                points2.pop_back();
            }

            points2.push_back(trees[i]);
        }
        points1.insert(points1.end(), points2.begin(), points2.end());
        sort(points1.begin(), points1.end());
        vector<vector<int>> ans;
        for (auto &p : points1)
        {
            if (ans.size() > 0 && p == ans.back())
            {
                continue;
            }

            ans.push_back(p);
        }

        return ans;
    }

    int orientation(vector<int> &p, vector<int> &q, vector<int> &r)
    {
        // int result = (q[1] - p[1]) * (r[0] - p[0]) - (r[1] - p[1]) * (q[0] - p[0]);
        // cout << "( " << p[0] << ", " << p[1] << " )" << ", " << "( " << q[0] << ", " << q[1] << " )" << ", " << "( " << r[0] << ", " << r[1] << " )" << endl;
        // cout << result << endl;
        return (q[1] - p[1]) * (r[0] - p[0]) - (r[1] - p[1]) * (q[0] - p[0]);
    }
};

(q[1] - p[1]) * (r[0] - p[0]) > (r[1] - p[1]) * (q[0] - p[0]);
(q[1] - p[1]) / (q[0] - p[0]) > (r[1] - p[1]) / (r[0] - p[0])


// Source https://leetcode.com/problems/n-ary-tree-preorder-traversal/

Given the root of an n-ary tree, return the preorder traversal of its nodes' values.

Nary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)

 

Example 1:



Input: root = [1,null,3,2,4,null,5,6]
Output: [1,3,5,6,2,4]
Example 2:



Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
Output: [1,2,3,6,7,11,14,4,8,12,5,9,13,10]
 

Constraints:

The number of nodes in the tree is in the range [0, 104].
0 <= Node.val <= 104
The height of the n-ary tree is less than or equal to 1000.

class Solution
{
public:
    vector<int> preorder(Node *root)
    {
        vector<int> res;
        helper(root, res);
        return res;
    }
    void helper(Node *node, vector<int> &res)
    {
        if (!node) return;
        res.push_back(node->val);
        for (Node *child : node->children)
        {
            helper(child, res);
        }
    }
};


// Source https://leetcode.com/problems/n-ary-tree-postorder-traversal/

Given the root of an n-ary tree, return the postorder traversal of its nodes' values.

Nary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)

 

Example 1:


Input: root = [1,null,3,2,4,null,5,6]
Output: [5,6,3,2,4,1]
Example 2:


Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
Output: [2,6,14,11,7,3,12,8,4,13,9,10,5,1]
 

Constraints:

The number of nodes in the tree is in the range [0, 104].
0 <= Node.val <= 104
The height of the n-ary tree is less than or equal to 1000.

class Solution
{
public:
    vector<int> postorder(Node *root)
    {
        vector<int> res;
        helper(root, res);
        return res;
    }
    void helper(Node *node, vector<int> &res)
    {
        if (!node) return;
        for (Node *child : node->children)
        {
            helper(child, res);
        }
        res.push_back(node->val);
    }
};


// Source https://leetcode.com/problems/tag-validator/

Given a string representing a code snippet, implement a tag validator to parse the code and return whether it is valid.

A code snippet is valid if all the following rules hold:

The code must be wrapped in a valid closed tag. Otherwise, the code is invalid.
A closed tag (not necessarily valid) has exactly the following format : <TAG_NAME>TAG_CONTENT</TAG_NAME>. 
Among them, <TAG_NAME> is the start tag, and </TAG_NAME> is the end tag. The TAG_NAME in start and end tags should be the same. 
A closed tag is valid if and only if the TAG_NAME and TAG_CONTENT are valid.
A valid TAG_NAME only contain upper-case letters, and has length in range [1,9]. Otherwise, the TAG_NAME is invalid.
A valid TAG_CONTENT may contain other valid closed tags, cdata and any characters (see note1) EXCEPT unmatched <, unmatched start and end tag, and unmatched or closed tags with invalid TAG_NAME. 
Otherwise, the TAG_CONTENT is invalid.
A start tag is unmatched if no end tag exists with the same TAG_NAME, and vice versa. However, you also need to consider the issue of unbalanced when tags are nested.
A < is unmatched if you cannot find a subsequent >. And when you find a < or </, all the subsequent characters until the next > should be parsed as TAG_NAME (not necessarily valid).
The cdata has the following format : <![CDATA[CDATA_CONTENT]]>. The range of CDATA_CONTENT is defined as the characters between <![CDATA[ and the first subsequent ]]>.
CDATA_CONTENT may contain any characters. The function of cdata is to forbid the validator to parse CDATA_CONTENT, 
so even it has some characters that can be parsed as tag (no matter valid or invalid), you should treat it as regular characters.
 

Example 1:

Input: code = "<DIV>This is the first line <![CDATA[<div>]]></DIV>"
Output: true
Explanation: 
The code is wrapped in a closed tag : <DIV> and </DIV>. 
The TAG_NAME is valid, the TAG_CONTENT consists of some characters and cdata. 
Although CDATA_CONTENT has an unmatched start tag with invalid TAG_NAME, it should be considered as plain text, not parsed as a tag.
So TAG_CONTENT is valid, and then the code is valid. Thus return true.
Example 2:

Input: code = "<DIV>>>  ![cdata[]] <![CDATA[<div>]>]]>]]>>]</DIV>"
Output: true
Explanation:
We first separate the code into : start_tag|tag_content|end_tag.
start_tag -> "<DIV>"
end_tag -> "</DIV>"
tag_content could also be separated into : text1|cdata|text2.
text1 -> ">>  ![cdata[]] "
cdata -> "<![CDATA[<div>]>]]>", where the CDATA_CONTENT is "<div>]>"
text2 -> "]]>>]"
The reason why start_tag is NOT "<DIV>>>" is because of the rule 6.
The reason why cdata is NOT "<![CDATA[<div>]>]]>]]>" is because of the rule 7.
Example 3:

Input: code = "<A>  <B> </A>   </B>"
Output: false
Explanation: Unbalanced. If "<A>" is closed, then "<B>" must be unmatched, and vice versa.
 

Constraints:

1 <= code.length <= 500
code consists of English letters, digits, '<', '>', '/', '!', '[', ']', '.', and ' '.

class Solution
{
public:
    bool isValid(string code)
    {
        stack<string> st;
        for (int i = 0; i < code.size(); ++i)
        {
            if (i > 0 && st.empty()) return false;
            if (code.substr(i, 9) == "<![CDATA[")
            {
                int j = i + 9;
                i = code.find("]]>", j);
                if (i < 0) return false;
                i += 2;
            }
            else if (code.substr(i, 2) == "</")
            {
                int j = i + 2;
                i = code.find(">", j);
                if (i < 0) return false;
                string tag = code.substr(j, i - j);
                if (st.empty() || st.top() != tag) return false;
                st.pop();
            }
            else if (code.substr(i, 1) == "<")
            {
                int j = i + 1;
                i = code.find(">", j);
                if (i < 0 || i == j || i - j > 9) return false;
                for (int k = j; k < i; ++k)
                {
                    if (code[k] < 'A' || code[k] > 'Z') return false;
                }
                string tag = code.substr(j, i - j);
                st.push(tag);
            }
        }
        return st.empty();
    }
};


// Source https://leetcode.com/problems/fraction-addition-and-subtraction/

Given a string expression representing an expression of fraction addition and subtraction, return the calculation result in string format.

The final result should be an irreducible fraction. If your final result is an integer, change it to the format of a fraction that has a denominator 1. So in this case, 2 should be converted to 2/1.

 

Example 1:

Input: expression = "-1/2+1/2"
Output: "0/1"
Example 2:

Input: expression = "-1/2+1/2+1/3"
Output: "1/3"
Example 3:

Input: expression = "1/3-1/2"
Output: "-1/6"
 

Constraints:

The input string only contains '0' to '9', '/', '+' and '-'. So does the output.
Each fraction (input and output) has the format ±numerator/denominator. If the first input fraction or the output is positive, then '+' will be omitted.
The input only contains valid irreducible fractions, where the numerator and denominator of each fraction will always be in the range [1, 10]. If the denominator is 1, it means this fraction is actually an integer in a fraction format defined above.
The number of given fractions will be in the range [1, 10].
The numerator and denominator of the final result are guaranteed to be valid and in the range of 32-bit int.

(A / B) + (C / D) = (A * D) + (C * B) / (B * D)

class Solution
{
public:
    string fractionAddition(string expression)
    {
        istringstream is(expression);
        int num = 0, dem = 0, A = 0, B = 1;
        char c;
        while (is >> num >> c >> dem)
        {
            A = A * dem + num * B;
            B *= dem;
            int g = abs(gcd(A, B));
            A /= g;
            B /= g;
        }
        return to_string(A) + "/" + to_string(B);
    }
    int gcd(int a, int b)
    {
        return (b == 0) ? a : gcd(b, a % b);
    }
};


// Source https://leetcode.com/problems/valid-square/

Given the coordinates of four points in 2D space p1, p2, p3 and p4, return true if the four points construct a square.

The coordinate of a point pi is represented as [xi, yi]. The input is not given in any order.

A valid square has four equal sides with positive length and four equal angles (90-degree angles).

 

Example 1:

Input: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]
Output: true
Example 2:

Input: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,12]
Output: false
Example 3:

Input: p1 = [1,0], p2 = [-1,0], p3 = [0,1], p4 = [0,-1]
Output: true
 

Constraints:

p1.length == p2.length == p3.length == p4.length == 2
-104 <= xi, yi <= 104

class Solution
{
public:
    bool validSquare(vector<int> &p1, vector<int> &p2, vector<int> &p3, vector<int> &p4)
    {
        unordered_map<int, int> mp;
        vector<vector<int>> v{p1, p2, p3, p4};
        for (int i = 0; i < 4; ++i)
        {
            for (int j = i + 1; j < 4; ++j)
            {
                int x1 = v[i][0], y1 = v[i][1], x2 = v[j][0], y2 = v[j][1];
                int dist = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);
                if (dist == 0) return false;
                ++mp[dist];
            }
        }
        return mp.size() == 2;
    }
};


// Source https://leetcode.com/problems/longest-harmonious-subsequence/

We define a harmonious array as an array where the difference between its maximum value and its minimum value is exactly 1.

Given an integer array nums, return the length of its longest harmonious subsequence among all its possible subsequences.

A subsequence of array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:

Input: nums = [1,3,2,2,5,2,3,7]
Output: 5
Explanation: The longest harmonious subsequence is [3,2,2,2,3].
Example 2:

Input: nums = [1,2,3,4]
Output: 2
Example 3:

Input: nums = [1,1,1,1]
Output: 0
 

Constraints:

1 <= nums.length <= 2 * 104
-109 <= nums[i] <= 109

class Solution
{
public:
    int findLHS(vector<int> &nums)
    {
        if (nums.empty()) return 0;
        int res = 0;
        map<int, int> mp;
        for (int num : nums) ++mp[num];
        for (auto it = next(mp.begin()); it != mp.end(); ++it)
        {
            auto pre = prev(it);
            if (it->first == pre->first + 1)
            {
                res = max(res, it->second + pre->second);
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/range-addition-ii/

You are given an m x n matrix M initialized with all 0's and an array of operations ops, where ops[i] = [ai, bi] means M[x][y] should be incremented by one for all 0 <= x < ai and 0 <= y < bi.

Count and return the number of maximum integers in the matrix after performing all the operations.

 

Example 1:


Input: m = 3, n = 3, ops = [[2,2],[3,3]]
Output: 4
Explanation: The maximum integer in M is 2, and there are four of it in M. So return 4.
Example 2:

Input: m = 3, n = 3, ops = [[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3]]
Output: 4
Example 3:

Input: m = 3, n = 3, ops = []
Output: 9
 

Constraints:

1 <= m, n <= 4 * 104
0 <= ops.length <= 104
ops[i].length == 2
1 <= ai <= m
1 <= bi <= n

class Solution
{
public:
    int maxCount(int m, int n, vector<vector<int>> &ops)
    {
        if (ops.empty()) return m * n;
        priority_queue<int, vector<int>, greater<int>> r, c;
        for (auto &op : ops)
        {
            r.push(op[0]);
            c.push(op[1]);
        }
        return r.top() * c.top();
    }
};


// Source https://leetcode.com/problems/minimum-index-sum-of-two-lists/

Suppose Andy and Doris want to choose a restaurant for dinner, and they both have a list of favorite restaurants represented by strings.

You need to help them find out their common interest with the least list index sum. If there is a choice tie between answers, output all of them with no order requirement. 
You could assume there always exists an answer.

 

Example 1:

Input: list1 = ["Shogun","Tapioca Express","Burger King","KFC"], list2 = ["Piatti","The Grill at Torrey Pines","Hungry Hunter Steakhouse","Shogun"]
Output: ["Shogun"]
Explanation: The only restaurant they both like is "Shogun".
Example 2:

Input: list1 = ["Shogun","Tapioca Express","Burger King","KFC"], list2 = ["KFC","Shogun","Burger King"]
Output: ["Shogun"]
Explanation: The restaurant they both like and have the least index sum is "Shogun" with index sum 1 (0+1).
 

Constraints:

1 <= list1.length, list2.length <= 1000
1 <= list1[i].length, list2[i].length <= 30
list1[i] and list2[i] consist of spaces ' ' and English letters.
All the stings of list1 are unique.
All the stings of list2 are unique.

class Solution
{
public:
    vector<string> findRestaurant(vector<string> &list1, vector<string> &list2)
    {
        vector<string> res;
        unordered_map<string, int> mp;
        int mn = INT_MAX, n1 = list1.size(), n2 = list2.size();
        for (int i = 0; i < n1; ++i) mp[list1[i]] = i;
        for (int i = 0; i < n2; ++i)
        {
            if (mp.count(list2[i]))
            {
                int sum = i + mp[list2[i]];
                if (sum == mn) res.push_back(list2[i]);
                else if (sum < mn)
                {
                    res.clear();
                    res.push_back(list2[i]);
                    mn = sum;
                }
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/non-negative-integers-without-consecutive-ones/

Given a positive integer n, return the number of the integers in the range [0, n] whose binary representations do not contain consecutive ones.

 

Example 1:

Input: n = 5
Output: 5
Explanation:
Here are the non-negative integers <= 5 with their corresponding binary representations:
0 : 0
1 : 1
2 : 10
3 : 11
4 : 100
5 : 101
Among them, only integer 3 disobeys the rule (two consecutive ones) and the other 5 satisfy the rule. 
Example 2:

Input: n = 1
Output: 2
Example 3:

Input: n = 2
Output: 3
 

Constraints:

1 <= n <= 109

0
1

00
01
10

000
001
010
100
101

0000
0001
0010
0100
0101
1000
1001
1010

class Solution
{
public:
    int findIntegers(int num)
    {
        int cnt = 0, n = num;
        string t = "";
        while (n > 0)
        {
            ++cnt;
            t += (n & 1) ? "1" : "0";
            n >>= 1;
        }
        reverse(t.begin(), t.end());
        vector<int> zero(cnt + 1), one(cnt + 1);
        zero[1] = 1;
        one[1] = 1;
        for (int i = 2; i <= cnt; ++i)
        {
            zero[i] = zero[i - 1] + one[i - 1];
            one[i] = zero[i - 1];
        }
        int res = 0;
        int i = 0;
        for (; i < cnt; ++i)
        {
            if (t[i] == '1')
            {
                res += zero[cnt-i];
                if (i > 0 && t[i-1] == '1') break;
            }
        }
        if (i == cnt) res += 1;
        return res;
    }
};


// Source https://leetcode.com/problems/can-place-flowers/

You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in adjacent plots.

Given an integer array flowerbed containing 0's and 1's, where 0 means empty and 1 means not empty, and an integer n, 
return if n new flowers can be planted in the flowerbed without violating the no-adjacent-flowers rule.

 

Example 1:

Input: flowerbed = [1,0,0,0,1], n = 1
Output: true
Example 2:

Input: flowerbed = [1,0,0,0,1], n = 2
Output: false
 

Constraints:

1 <= flowerbed.length <= 2 * 104
flowerbed[i] is 0 or 1.
There are no two adjacent flowers in flowerbed.
0 <= n <= flowerbed.length

class Solution
{
public:
    bool canPlaceFlowers(vector<int> &flowerbed, int n)
    {
        int total = 0;
        for(int i = 0; i < flowerbed.size() && total < n ; i++)
        {
            if(flowerbed[i] == 0)
            {
                int next = (i == flowerbed.size() - 1) ? 0 : flowerbed[i + 1];
                int prev = (i == 0) ? 0 : flowerbed[i - 1];

                if(next == 0 && prev == 0)
                {
                    total++;
                    flowerbed[i] = 1;
                }
            }
        }

        return total == n;
    }
};


// Source https://leetcode.com/problems/construct-string-from-binary-tree/

Given the root of a binary tree, construct a string consisting of parenthesis and integers from a binary tree with the preorder traversal way, and return it.

Omit all the empty parenthesis pairs that do not affect the one-to-one mapping relationship between the string and the original binary tree.

 

Example 1:


Input: root = [1,2,3,4]
Output: "1(2(4))(3)"
Explanation: Originally, it needs to be "1(2(4)())(3()())", but you need to omit all the unnecessary empty parenthesis pairs. And it will be "1(2(4))(3)"
Example 2:


Input: root = [1,2,3,null,4]
Output: "1(2()(4))(3)"
Explanation: Almost the same as the first example, except we cannot omit the first parenthesis pair to break the one-to-one mapping relationship between the input and the output.
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
-1000 <= Node.val <= 1000

class Solution
{
public:
    string tree2str(TreeNode *t)
    {
        if (!t) return "";
        string res = "";
        helper(t, res);
        int len = res.length();
        return res.substr(1, len - 2);
    }
    void helper(TreeNode *t, string &res)
    {
        if (!t) return;
        res += "(" + to_string(t->val);
        if (!t->left && t->right)
        {
            res += "()";
            helper(t->right, res);
        }
        else
        {
            helper(t->left, res);
            helper(t->right, res);
        }
        res += ")";
    }
};


// Source https://leetcode.com/problems/find-duplicate-file-in-system/

Given a list paths of directory info, including the directory path, and all the files with contents in this directory, return all the duplicate files in the file system in terms of their paths. 
You may return the answer in any order.

A group of duplicate files consists of at least two files that have the same content.

A single directory info string in the input list has the following format:

"root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content)"
It means there are n files (f1.txt, f2.txt ... fn.txt) with content (f1_content, f2_content ... fn_content) respectively in the directory "root/d1/d2/.../dm". 
Note that n >= 1 and m >= 0. If m = 0, it means the directory is just the root directory.

The output is a list of groups of duplicate file paths. For each group, it contains all the file paths of the files that have the same content. A file path is a string that has the following format:

"directory_path/file_name.txt"
 

Example 1:

Input: paths = ["root/a 1.txt(abcd) 2.txt(efgh)","root/c 3.txt(abcd)","root/c/d 4.txt(efgh)","root 4.txt(efgh)"]
Output: [["root/a/2.txt","root/c/d/4.txt","root/4.txt"],["root/a/1.txt","root/c/3.txt"]]
Example 2:

Input: paths = ["root/a 1.txt(abcd) 2.txt(efgh)","root/c 3.txt(abcd)","root/c/d 4.txt(efgh)"]
Output: [["root/a/2.txt","root/c/d/4.txt"],["root/a/1.txt","root/c/3.txt"]]
 

Constraints:

1 <= paths.length <= 2 * 104
1 <= paths[i].length <= 3000
1 <= sum(paths[i].length) <= 5 * 105
paths[i] consist of English letters, digits, '/', '.', '(', ')', and ' '.
You may assume no files or directories share the same name in the same directory.
You may assume each given directory info represents a unique directory. A single blank space separates the directory path and file info.

class Solution
{
public:
    vector<vector<string>> findDuplicate(vector<string> &paths)
    {
        vector<vector<string>> res;
        unordered_map<string, vector<string>> m;
        for (string &path : paths)
        {
            istringstream is(path);
            string dirname = "", t = "";
            is >> dirname;
            while (is >> t)
            {
                int idx = t.find_last_of('(');
                string filename = dirname + "/" + t.substr(0, idx);
                string content = t.substr(idx + 1, t.size() - idx - 2);
                m[content].push_back(filename);
            }
        }
        for (const auto &a : m)
        {
            if (a.second.size() > 1)res.push_back(a.second);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/valid-triangle-number/

Given an integer array nums, return the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle.

 

Example 1:

Input: nums = [2,2,3,4]
Output: 3
Explanation: Valid combinations are: 
2,3,4 (using the first 2)
2,3,4 (using the second 2)
2,2,3
Example 2:

Input: nums = [4,2,3,4]
Output: 4
 

Constraints:

1 <= nums.length <= 1000
0 <= nums[i] <= 1000

class Solution
{
public:
    int triangleNumber(vector<int> &nums)
    {
        int res = 0, n = nums.size();
        sort(nums.begin(), nums.end());
        for (int i = n - 1; i >= 2; --i)
        {
            int left = 0, right = i - 1;
            while (left < right)
            {
                if (nums[left] + nums[right] > nums[i])
                {
                    res += right - left;
                    --right;
                }
                else
                {
                    ++left;
                }
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/merge-two-binary-trees/

You are given two binary trees root1 and root2.

Imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge the two trees into a new binary tree. 
The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of the new tree.

Return the merged tree.

Note: The merging process must start from the root nodes of both trees.

 

Example 1:


Input: root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]
Output: [3,4,5,5,4,null,7]
Example 2:

Input: root1 = [1], root2 = [1,2]
Output: [2,2]
 

Constraints:

The number of nodes in both trees is in the range [0, 2000].
-104 <= Node.val <= 104

class Solution
{
public:
    TreeNode *mergeTrees(TreeNode *t1, TreeNode *t2)
    {
        return helper(t1, t2);
    }
    TreeNode *helper(TreeNode *t1, TreeNode *t2)
    {
        if (!t1 && !t2) return nullptr;
        else if (t1 && !t2)
        {
            return t1;
        }
        else if (!t1 && t2)
        {
            return t2;
        }
        else
        {
            TreeNode *res = new TreeNode(t1->val + t2->val);
            res->left = helper(t1->left, t2->left);
            res->right = helper(t1->right, t2->right);
            return res;
        }
    }
};


// Source https://leetcode.com/problems/task-scheduler/

Given a characters array tasks, representing the tasks a CPU needs to do, where each letter represents a different task. Tasks could be done in any order. 
Each task is done in one unit of time. For each unit of time, the CPU could complete either one task or just be idle.

However, there is a non-negative integer n that represents the cooldown period between two same tasks (the same letter in the array), 
that is that there must be at least n units of time between any two same tasks.

Return the least number of units of times that the CPU will take to finish all the given tasks.

 

Example 1:

Input: tasks = ["A","A","A","B","B","B"], n = 2
Output: 8
Explanation: 
A -> B -> idle -> A -> B -> idle -> A -> B
There is at least 2 units of time between any two same tasks.
Example 2:

Input: tasks = ["A","A","A","B","B","B"], n = 0
Output: 6
Explanation: On this case any permutation of size 6 would work since n = 0.
["A","A","A","B","B","B"]
["A","B","A","B","A","B"]
["B","B","B","A","A","A"]
...
And so on.
Example 3:

Input: tasks = ["A","A","A","A","A","A","B","C","D","E","F","G"], n = 2
Output: 16
Explanation: 
One possible solution is
A -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A


AAABBBCCCDDDEEEFFGGH, n = 1
ABCDEFGH ABCDEFG ABCDE

AAABBBCCCDDDEEEFFGGH, n = 5
ABCDEFGH ABCDEFG ABCDE

AAABBBCCCDDDEEEFFGGH, n = 6
ABCDEFGH ABCDEFG ABCDE

AAABBBCCCDDDEEEFFGGH, n = 7
ABCDEFGH ABCDEFG空 ABCDE

Constraints:

1 <= task.length <= 104
tasks[i] is upper-case English letter.
The integer n is in the range [0, 100].

class Solution
{
public:
    int leastInterval(vector<char> &tasks, int n)
    {
        vector<int> cnt(26, 0);
        for (char task : tasks)
        {
            ++cnt[task - 'A'];
        }
        sort(cnt.begin(), cnt.end());
        int i = 25, mx = cnt[25], len = tasks.size();
        while (i >= 0 && cnt[i] == mx) --i;
        int num = (25 - i);
        if (num >= (n + 1)) return len;
        return max(len, ((mx - 1) * (n + 1)) + num);
    }
};


// Source https://leetcode.com/problems/design-circular-queue/

Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle 
and the last position is connected back to the first position to make a circle. It is also called "Ring Buffer".

One of the benefits of the circular queue is that we can make use of the spaces in front of the queue. 
In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. 
But using the circular queue, we can use the space to store new values.

Implementation the MyCircularQueue class:

MyCircularQueue(k) Initializes the object with the size of the queue to be k.
int Front() Gets the front item from the queue. If the queue is empty, return -1.
int Rear() Gets the last item from the queue. If the queue is empty, return -1.
boolean enQueue(int value) Inserts an element into the circular queue. Return true if the operation is successful.
boolean deQueue() Deletes an element from the circular queue. Return true if the operation is successful.
boolean isEmpty() Checks whether the circular queue is empty or not.
boolean isFull() Checks whether the circular queue is full or not.
You must solve the problem without using the built-in queue data structure in your programming language. 

 

Example 1:

Input
["MyCircularQueue", "enQueue", "enQueue", "enQueue", "enQueue", "Rear", "isFull", "deQueue", "enQueue", "Rear"]
[[3], [1], [2], [3], [4], [], [], [], [4], []]
Output
[null, true, true, true, false, 3, true, true, true, 4]

Explanation
MyCircularQueue myCircularQueue = new MyCircularQueue(3);
myCircularQueue.enQueue(1); // return True
myCircularQueue.enQueue(2); // return True
myCircularQueue.enQueue(3); // return True
myCircularQueue.enQueue(4); // return False
myCircularQueue.Rear();     // return 3
myCircularQueue.isFull();   // return True
myCircularQueue.deQueue();  // return True
myCircularQueue.enQueue(4); // return True
myCircularQueue.Rear();     // return 4
 

Constraints:

1 <= k <= 1000
0 <= value <= 1000
At most 3000 calls will be made to enQueue, deQueue, Front, Rear, isEmpty, and isFull.

class MyCircularQueue
{
public:
    vector<int> data;
    int head;
    int tail;
    int size;

    MyCircularQueue(int k) : data(k + 1, -1), head(0), tail(0), size(k + 1)
    {

    }

    bool enQueue(int value)
    {
        if (isFull()) return false;
        data[tail] = value;
        tail = (tail + 1) % size;
        data[tail] = -1;
        return true;
    }

    bool deQueue()
    {
        if (isEmpty()) return false;
        data[head] = -1;
        head = (head + 1) % size;
        return true;
    }

    int Front()
    {
        return data[head];
    }

    int Rear()
    {
        return data[tail == 0 ? size - 1 : tail - 1];
    }

    bool isEmpty()
    {
        return head == tail;
    }

    bool isFull()
    {
        return (tail + 1) % size == head;
    }
};


// Source https://leetcode.com/problems/add-one-row-to-tree/

Given the root of a binary tree and two integers val and depth, add a row of nodes with value val at the given depth depth.

Note that the root node is at depth 1.

The adding rule is:

Given the integer depth, for each not null tree node cur at the depth depth - 1, create two tree nodes with value val as cur's left subtree root and right subtree root.
cur's original left subtree should be the left subtree of the new left subtree root.
cur's original right subtree should be the right subtree of the new right subtree root.
If depth == 1 that means there is no depth depth - 1 at all, then create a tree node with value val as the new root of the whole original tree, and the original tree is the new root's left subtree.
 

Example 1:


Input: root = [4,2,6,3,1,5], val = 1, depth = 2
Output: [4,1,1,2,null,null,6,3,1,5]
Example 2:


Input: root = [4,2,null,3,1], val = 1, depth = 3
Output: [4,2,null,1,1,3,null,null,1]
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
The depth of the tree is in the range [1, 104].
-100 <= Node.val <= 100
-105 <= val <= 105
1 <= depth <= the depth of tree + 1

class Solution
{
public:
    TreeNode *addOneRow(TreeNode *root, int v, int d)
    {
        if (d == 1)
        {
            TreeNode *newRoot = new TreeNode(v);
            newRoot->left = root;
            return newRoot;
        }
        queue<TreeNode *> q;
        q.push(root);
        int depth = 1;
        while (!q.empty() && depth < d)
        {
            int n = q.size();
            for (int i = 0; i < n; ++i)
            {
                auto node = q.front();
                q.pop();
                if (depth == (d - 1))
                {
                    TreeNode *left = node->left;
                    TreeNode *right = node->right;
                    node->left = new TreeNode(v);
                    node->right = new TreeNode(v);
                    node->left->left = left;
                    node->right->right = right;
                }
                else
                {
                    if (node->left) q.push(node->left);
                    if (node->right) q.push(node->right);
                }
            }
            ++depth;
        }
        return root;
    }
};


// Source https://leetcode.com/problems/maximum-product-of-three-numbers/

Given an integer array nums, find three numbers whose product is maximum and return the maximum product.

 

Example 1:

Input: nums = [1,2,3]
Output: 6
Example 2:

Input: nums = [1,2,3,4]
Output: 24
Example 3:

Input: nums = [-1,-2,-3]
Output: -6
 

Constraints:

3 <= nums.length <= 104
-1000 <= nums[i] <= 1000

class Solution
{
public:
    int maximumProduct(vector<int> &nums)
    {
        sort(nums.begin(), nums.end());
        int n = nums.size();
        // 全部大于等于0   有1个小于0，其他都大于等于0   全部小于0
        if (nums[0] >= 0 || nums[1] >= 0 || nums[n - 1] < 0) return nums[n - 1] * nums[n - 2] * nums[n - 3];
        // 有1个大于等于0，其他都小于0
        if (nums[n - 2] < 0) return nums[0] * nums[1] * nums[n - 1];
        // 至少2个小于0，至少2个大于等于0
        int ans1 = nums[n - 1] * nums[n - 2] * nums[n - 3];
        int ans2 = nums[0] * nums[1] * nums[n - 1];
        return max(ans1, ans2);
    }
};


// Source https://leetcode.com/problems/k-inverse-pairs-array/

For an integer array nums, an inverse pair is a pair of integers [i, j] where 0 <= i < j < nums.length and nums[i] > nums[j].

Given two integers n and k, return the number of different arrays consist of numbers from 1 to n such that there are exactly k inverse pairs. 
Since the answer can be huge, return it modulo 109 + 7.

 

Example 1:

Input: n = 3, k = 0
Output: 1
Explanation: Only the array [1,2,3] which consists of numbers from 1 to 3 has exactly 0 inverse pairs.
Example 2:

Input: n = 3, k = 1
Output: 2
Explanation: The array [1,3,2] and [2,1,3] have exactly 1 inverse pair.
 

Constraints:

1 <= n <= 1000
0 <= k <= 1000

dp[i][j]表示1到i的数字中有j个翻转对的排列总数

在1到n的数字中的某个位置加上n+1这个数，为了简单起见，我们先让n=4，那么实际上相当于要在某个位置加上5，那么加5的位置就有如下几种情况：
xxxx5
xxx5x
xx5xx
x5xxx
5xxxx
这里xxxx表示1到4的任意排列，那么第一种情况xxxx5不会增加任何新的翻转对，因为xxxx中没有比5大的数字，而 xxx5x会新增加1个翻转对，xx5xx，x5xxx，5xxxx分别会增加2，3，4个翻转对。
那么xxxx5就相当于dp[n][k]，即dp[4][k]，那么依次往前类推，就是dp[n][k-1], dp[n][k-2]...dp[n][k-n]，这样我们就可以得出dp[n+1][k]的求法了:

dp[n+1][k] = dp[n][k] + dp[n][k-1] + ... + dp[n][k - n]

那么dp[n][k]的求法也就一目了然了:

如果k >= n - 1
dp[n][k] = dp[n - 1][k] + dp[n - 1][k-1] + ... + dp[n - 1][k - n + 1]
如果k < n - 1
dp[n][k] = dp[n - 1][k] + dp[n - 1][k-1] + ... + dp[n - 1][0]

我们可以用k+1代替k，得到：

如果k >= n - 2
dp[n][k+1] = dp[n - 1][k+1] + dp[n - 1][k] + ... + dp[n - 1][k + 1 - n + 1]
如果k < n - 2
dp[n][k+1] = dp[n - 1][k+1] + dp[n - 1][k] + ... + dp[n - 1][0]

用第二个等式减去第一个等式可以得到：

如果k >= n - 1
dp[n][k] = dp[n - 1][k] + dp[n - 1][k-1] + ... + dp[n - 1][k - n + 1]
dp[n][k+1] = dp[n - 1][k+1] + dp[n - 1][k] + ... + dp[n - 1][k + 1 - n + 1]
dp[n][k+1] = dp[n][k] - dp[n - 1][k - n + 1] + dp[n - 1][k+1]
如果k = n - 2
dp[n][k] = dp[n - 1][k] + dp[n - 1][k-1] + ... + dp[n - 1][0]
dp[n][k+1] = dp[n - 1][k+1] + dp[n - 1][k] + ... + dp[n - 1][0]
dp[n][k+1] = dp[n][k] + dp[n - 1][k+1]
如果k < n - 2
dp[n][k] = dp[n - 1][k] + dp[n - 1][k-1] + ... + dp[n - 1][0]
dp[n][k+1] = dp[n - 1][k+1] + dp[n - 1][k] + ... + dp[n - 1][0]
dp[n][k+1] = dp[n][k] + dp[n - 1][k+1]

class Solution
{
public:
    int kInversePairs(int n, int k)
    {
        if (k == 0) return 1;
        if (n < 2) return 0;
        int M = 1000000007;
        long long int dp[n + 1][k + 1];
        memset(dp, 0, sizeof(dp));
        dp[0][0] = 1;
        dp[1][0] = 1;
        for (int i = 2; i <= n; ++i)
        {
            dp[i][0] = 1;
            for (int j = 0; j < k; ++j)
            {
                if (j < (i - 1)) dp[i][j + 1] = (dp[i][j] + dp[i - 1][j + 1]) % M;
                else dp[i][j + 1] = (dp[i][j] - dp[i - 1][j + 1 - i] + dp[i - 1][j + 1] + M) % M;
            }
        }
        return dp[n][k];
    }
};


// Source https://leetcode.com/problems/course-schedule-iii/

There are n different online courses numbered from 1 to n. You are given an array courses 
where courses[i] = [durationi, lastDayi] indicate that the ith course should be taken continuously for durationi days and must be finished before or on lastDayi.

You will start on the 1st day and you cannot take two or more courses simultaneously.

Return the maximum number of courses that you can take.

 

Example 1:

Input: courses = [[100,200],[200,1300],[1000,1250],[2000,3200]]
Output: 3
Explanation: 
There are totally 4 courses, but you can take 3 courses at most:
First, take the 1st course, it costs 100 days so you will finish it on the 100th day, and ready to take the next course on the 101st day.
Second, take the 3rd course, it costs 1000 days so you will finish it on the 1100th day, and ready to take the next course on the 1101st day. 
Third, take the 2nd course, it costs 200 days so you will finish it on the 1300th day. 
The 4th course cannot be taken now, since you will finish it on the 3300th day, which exceeds the closed date.
Example 2:

Input: courses = [[1,2]]
Output: 1
Example 3:

Input: courses = [[3,2],[4,3]]
Output: 0
 

Constraints:

1 <= courses.length <= 104
1 <= durationi, lastDayi <= 104

class Solution
{
public:
    int scheduleCourse(vector<vector<int>> &courses)
    {
        sort(courses.begin(), courses.end(), [](vector<int> &v1, vector<int> &v2)
        {
            return v1[1] < v2[1];
        });

        priority_queue<int> q;
        int total = 0;
        for (auto &course : courses)
        {
            int duration = course[0], lastday = course[1];
            if (total + duration <= lastday)
            {
                total += duration;
                q.push(duration);
            }
            else if (!q.empty() && q.top() > duration)
            {
                total = total - q.top();
                q.pop();
                total = total + duration;
                q.push(duration);
            }
        }
        return q.size();
    }
};


// Source https://leetcode.com/problems/smallest-range-covering-elements-from-k-lists/

You have k lists of sorted integers in non-decreasing order. Find the smallest range that includes at least one number from each of the k lists.

We define the range [a, b] is smaller than range [c, d] if b - a < d - c or a < c if b - a == d - c.

 

Example 1:

Input: nums = [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]
Output: [20,24]
Explanation: 
List 1: [4, 10, 15, 24,26], 24 is in range [20,24].
List 2: [0, 9, 12, 20], 20 is in range [20,24].
List 3: [5, 18, 22, 30], 22 is in range [20,24].
Example 2:

Input: nums = [[1,2,3],[1,2,3],[1,2,3]]
Output: [1,1]
 

Constraints:

nums.length == k
1 <= k <= 3500
1 <= nums[i].length <= 50
-105 <= nums[i][j] <= 105
nums[i] is sorted in non-decreasing order.

class Solution
{
public:
    vector<int> smallestRange(vector<vector<int>> &nums)
    {
        vector<int> res;
        vector<pair<int, int>> v;
        unordered_map<int, int> m;
        for (int i = 0; i < nums.size(); ++i)
        {
            for (int num : nums[i])
            {
                v.push_back({num, i});
            }
        }
        sort(v.begin(), v.end());
        int left = 0, right = 0, n = v.size(), k = nums.size(), cnt = 0, diff = INT_MAX;
        while (right < n)
        {
            if (m[v[right].second]++ == 0) ++cnt;
            while (cnt == k && left <= right)
            {
                if (diff > v[right].first - v[left].first)
                {
                    diff = v[right].first - v[left].first;
                    res = {v[left].first, v[right].first};
                }
                if (--m[v[left].second] == 0) --cnt;
                ++left;
            }
            ++right;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/sum-of-square-numbers/

Given a non-negative integer c, decide whether there're two integers a and b such that a2 + b2 = c.

 

Example 1:

Input: c = 5
Output: true
Explanation: 1 * 1 + 2 * 2 = 5
Example 2:

Input: c = 3
Output: false
 

Constraints:

0 <= c <= 231 - 1

class Solution
{
public:
    bool judgeSquareSum(int c)
    {
        for (int i = sqrt(c); i >= 0; --i)
        {
            if (i * i == c) return true;
            int d = c - i * i, t = sqrt(d);
            if (t * t == d) return true;
        }
        return false;
    }
};


// Source https://leetcode.com/problems/exclusive-time-of-functions/

On a single-threaded CPU, we execute a program containing n functions. Each function has a unique ID between 0 and n-1.

Function calls are stored in a call stack: when a function call starts, its ID is pushed onto the stack, and when a function call ends, its ID is popped off the stack. 
The function whose ID is at the top of the stack is the current function being executed. 
Each time a function starts or ends, we write a log with the ID, whether it started or ended, and the timestamp.

You are given a list logs, where logs[i] represents the ith log message formatted as a string "{function_id}:{"start" | "end"}:{timestamp}". 
For example, "0:start:3" means a function call with function ID 0 started at the beginning of timestamp 3, and "1:end:2" means a function call with function ID 1 ended at the end of timestamp 2. 
Note that a function can be called multiple times, possibly recursively.

A function's exclusive time is the sum of execution times for all function calls in the program. 
For example, if a function is called twice, one call executing for 2 time units and another call executing for 1 time unit, the exclusive time is 2 + 1 = 3.

Return the exclusive time of each function in an array, where the value at the ith index represents the exclusive time for the function with ID i.

 

Example 1:


Input: n = 2, logs = ["0:start:0","1:start:2","1:end:5","0:end:6"]
Output: [3,4]
Explanation:
Function 0 starts at the beginning of time 0, then it executes 2 for units of time and reaches the end of time 1.
Function 1 starts at the beginning of time 2, executes for 4 units of time, and ends at the end of time 5.
Function 0 resumes execution at the beginning of time 6 and executes for 1 unit of time.
So function 0 spends 2 + 1 = 3 units of total time executing, and function 1 spends 4 units of total time executing.
Example 2:

Input: n = 1, logs = ["0:start:0","0:start:2","0:end:5","0:start:6","0:end:6","0:end:7"]
Output: [8]
Explanation:
Function 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself.
Function 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time.
Function 0 (initial call) resumes execution then immediately calls itself again.
Function 0 (2nd recursive call) starts at the beginning of time 6 and executes for 1 unit of time.
Function 0 (initial call) resumes execution at the beginning of time 7 and executes for 1 unit of time.
So function 0 spends 2 + 4 + 1 + 1 = 8 units of total time executing.
Example 3:

Input: n = 2, logs = ["0:start:0","0:start:2","0:end:5","1:start:6","1:end:6","0:end:7"]
Output: [7,1]
Explanation:
Function 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself.
Function 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time.
Function 0 (initial call) resumes execution then immediately calls function 1.
Function 1 starts at the beginning of time 6, executes 1 unit of time, and ends at the end of time 6.
Function 0 resumes execution at the beginning of time 6 and executes for 2 units of time.
So function 0 spends 2 + 4 + 1 = 7 units of total time executing, and function 1 spends 1 unit of total time executing.
 

Constraints:

1 <= n <= 100
1 <= logs.length <= 500
0 <= function_id < n
0 <= timestamp <= 109
No two start events will happen at the same timestamp.
No two end events will happen at the same timestamp.
Each function has an "end" log for each "start" log.

class Solution
{
public:
    vector<int> exclusiveTime(int n, vector<string> &logs)
    {
        vector<int> res(n, 0);
        stack<int> st;
        int preTime = 0;
        for (string &log : logs)
        {
            int found1 = log.find(":");
            int found2 = log.find_last_of(":");
            int idx = stoi(log.substr(0, found1));
            string type = log.substr(found1 + 1, found2 - found1 - 1);
            int time = stoi(log.substr(found2 + 1));
            if (type == "start")
            {
                if (!st.empty()) res[st.top()] += (time - preTime);
                st.push(idx);
                preTime = time;
            }
            else
            {
                res[st.top()] += (time + 1 - preTime);
                st.pop();
                preTime = time + 1;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/average-of-levels-in-binary-tree/

Given the root of a binary tree, return the average value of the nodes on each level in the form of an array. Answers within 10-5 of the actual answer will be accepted.
 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: [3.00000,14.50000,11.00000]
Explanation: The average value of nodes on level 0 is 3, on level 1 is 14.5, and on level 2 is 11.
Hence return [3, 14.5, 11].
Example 2:


Input: root = [3,9,20,15,7]
Output: [3.00000,14.50000,11.00000]
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
-231 <= Node.val <= 231 - 1

class Solution
{
public:
    vector<double> averageOfLevels(TreeNode *root)
    {
        vector<double> res;
        if (!root) return res;
        queue<TreeNode *> q;
        q.push(root);
        while (!q.empty())
        {
            int n = q.size();
            double sum = 0;
            for (int i = 0; i < n; ++i)
            {
                TreeNode *t = q.front();
                q.pop();
                sum += t->val;
                if (t->left) q.push(t->left);
                if (t->right) q.push(t->right);
            }
            res.push_back(sum / n);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/shopping-offers/

In LeetCode Store, there are n items to sell. Each item has a price. However, there are some special offers, and a special offer consists of one or more different kinds of items with a sale price.

You are given an integer array price where price[i] is the price of the ith item, and an integer array needs where needs[i] is the number of pieces of the ith item you want to buy.

You are also given an array special where special[i] is of size n + 1 where special[i][j] is the number of pieces of the jth item in the ith offer 
and special[i][n] (i.e., the last integer in the array) is the price of the ith offer.

Return the lowest price you have to pay for exactly certain items as given, where you could make optimal use of the special offers. 
You are not allowed to buy more items than you want, even if that would lower the overall price. You could use any of the special offers as many times as you want.

 

Example 1:

Input: price = [2,5], special = [[3,0,5],[1,2,10]], needs = [3,2]
Output: 14
Explanation: There are two kinds of items, A and B. Their prices are $2 and $5 respectively. 
In special offer 1, you can pay $5 for 3A and 0B
In special offer 2, you can pay $10 for 1A and 2B. 
You need to buy 3A and 2B, so you may pay $10 for 1A and 2B (special offer #2), and $4 for 2A.
Example 2:

Input: price = [2,3,4], special = [[1,1,0,4],[2,2,1,9]], needs = [1,2,1]
Output: 11
Explanation: The price of A is $2, and $3 for B, $4 for C. 
You may pay $4 for 1A and 1B, and $9 for 2A ,2B and 1C. 
You need to buy 1A ,2B and 1C, so you may pay $4 for 1A and 1B (special offer #1), and $3 for 1B, $4 for 1C. 
You cannot add more items, though only $9 for 2A ,2B and 1C.
 

Constraints:

n == price.length
n == needs.length
1 <= n <= 6
0 <= price[i] <= 10
0 <= needs[i] <= 10
1 <= special.length <= 100
special[i].length == n + 1
0 <= special[i][j] <= 50

class Solution
{
public:
    int shoppingOffers(vector<int> &price, vector<vector<int>> &special, vector<int> &needs)
    {
        int res = 0, n = price.size();
        for (int i = 0; i < n; ++i)
        {
            res += price[i] * needs[i];
        }
        for (const auto &offer : special)
        {
            bool isValid = true;
            for (int j = 0; j < n; ++j)
            {
                if (needs[j] - offer[j] < 0) isValid = false;
                needs[j] -= offer[j];
            }
            if (isValid)
            {
                res = min(res, shoppingOffers(price, special, needs) + offer.back());
            }
            for (int j = 0; j < n; ++j)
            {
                needs[j] += offer[j];
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/decode-ways-ii/

A message containing letters from A-Z can be encoded into numbers using the following mapping:

'A' -> "1"
'B' -> "2"
...
'Z' -> "26"
To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). 
For example, "11106" can be mapped into:

"AAJF" with the grouping (1 1 10 6)
"KJF" with the grouping (11 10 6)
Note that the grouping (1 11 06) is invalid because "06" cannot be mapped into 'F' since "6" is different from "06".

In addition to the mapping above, an encoded message may contain the '*' character, which can represent any digit from '1' to '9' ('0' is excluded). 
For example, the encoded message "1*" may represent any of the encoded messages "11", "12", "13", "14", "15", "16", "17", "18", or "19". 
Decoding "1*" is equivalent to decoding any of the encoded messages it can represent.

Given a string s consisting of digits and '*' characters, return the number of ways to decode it.

Since the answer may be very large, return it modulo 109 + 7.

 

Example 1:

Input: s = "*"
Output: 9
Explanation: The encoded message can represent any of the encoded messages "1", "2", "3", "4", "5", "6", "7", "8", or "9".
Each of these can be decoded to the strings "A", "B", "C", "D", "E", "F", "G", "H", and "I" respectively.
Hence, there are a total of 9 ways to decode "*".
Example 2:

Input: s = "1*"
Output: 18
Explanation: The encoded message can represent any of the encoded messages "11", "12", "13", "14", "15", "16", "17", "18", or "19".
Each of these encoded messages have 2 ways to be decoded (e.g. "11" can be decoded to "AA" or "K").
Hence, there are a total of 9 * 2 = 18 ways to decode "1*".
Example 3:

Input: s = "2*"
Output: 15
Explanation: The encoded message can represent any of the encoded messages "21", "22", "23", "24", "25", "26", "27", "28", or "29".
"21", "22", "23", "24", "25", and "26" have 2 ways of being decoded, but "27", "28", and "29" only have 1 way.
Hence, there are a total of (6 * 2) + (3 * 1) = 12 + 3 = 15 ways to decode "2*".
 

Constraints:

1 <= s.length <= 105
s[i] is a digit or '*'.

the '*' character, which can represent any digit from '1' to '9' ('0' is excluded). 

class Solution
{
public:
    int n;
    int mod = 1e9 + 7;
    int dp[100001];

    long long recur(string &s, int curr)
    {
        if(curr > n) return 0;
        if(curr == n) return 1;
        if(s[curr] == '0') return 0;
        if(dp[curr] != -1) return dp[curr];
        if(curr + 1 < n && s[curr] != '*' && s[curr + 1] != '*')
        {
            if(s[curr] == '1' || (s[curr] == '2' && s[curr + 1] <= '6'))
                return dp[curr] = (recur(s, curr + 1) % mod + recur(s, curr + 2) % mod) % mod;
            return dp[curr] = recur(s, curr + 1) % mod;
        }
        else if(curr + 1 < n && s[curr] == '*' && s[curr + 1] == '*')
        {
            return dp[curr] = ((9 * recur(s, curr + 1)) % mod + (15 * recur(s, curr + 2)) % mod) % mod;
        }
        else if(curr + 1 < n && s[curr] == '*' && s[curr + 1] != '*')
        {
            if(s[curr + 1] <= '6')
            {
                return dp[curr] = ((9 * recur(s, curr + 1)) % mod + (2 * recur(s, curr + 2)) % mod) % mod;
            }
            return dp[curr] = ((9 * recur(s, curr + 1)) % mod + (recur(s, curr + 2)) % mod) % mod;
        }
        else if(curr + 1 < n && s[curr] != '*' && s[curr + 1] == '*')
        {
            if(s[curr] == '1')
            {
                return dp[curr] = ((recur(s, curr + 1)) % mod + (9 * recur(s, curr + 2)) % mod) % mod;
            }
            else if(s[curr] == '2')
                return dp[curr] = ((recur(s, curr + 1)) % mod + (6 * recur(s, curr + 2)) % mod) % mod;
            else
                return dp[curr] = recur(s, curr + 1) % mod;
        }
        else if(curr + 1 == n && s[curr] == '*')
        {
            return dp[curr] = 9;
        }
        else if(curr + 1 == n && s[curr] != '*')
            return dp[curr] = 1;

        return dp[curr] = 0;
    }

    int numDecodings(string s)
    {
        n = s.length();
        memset(dp, -1, sizeof(dp));
        return recur(s, 0);
    }
};


// Source https://leetcode.com/problems/solve-the-equation/

Solve a given equation and return the value of 'x' in the form of a string "x=#value". The equation contains only '+', '-' operation, the variable 'x' and its coefficient. 
You should return "No solution" if there is no solution for the equation, or "Infinite solutions" if there are infinite solutions for the equation.

If there is exactly one solution for the equation, we ensure that the value of 'x' is an integer.

 

Example 1:

Input: equation = "x+5-3+x=6+x-2"
Output: "x=2"
Example 2:

Input: equation = "x=x"
Output: "Infinite solutions"
Example 3:

Input: equation = "2x=x"
Output: "x=0"
 

Constraints:

3 <= equation.length <= 1000
equation has exactly one '='.
equation consists of integers with an absolute value in the range [0, 100] without any leading zeros, and the variable 'x'.

class Solution
{
public:
    string solveEquation(string equation)
    {
        int a = 0, b = 0, c = 0, d = 0;
        auto found = equation.find("=");
        helper(equation.substr(0, found), a, b);
        helper(equation.substr(found + 1), c, d);
        // a * x + b = c * x + d
        // (a - c) * x = d - b
        int num1 = a - c;
        int num2 = d - b;
        if (num1 == 0 && num2 == 0) return "Infinite solutions";
        if (num1 == 0 && num2 != 0) return "No solution";
        return "x=" + to_string(num2 / num1);
    }
    void helper(string e, int &a, int &b)
    {
        e += "+";
        int sign = 1, num = -1, n = e.length();
        for (int i = 0; i < n; ++i)
        {
            if (e[i] == '-' || e[i] == '+')
            {
                num = (num == -1) ? 0 : (num * sign);
                b += num;
                num = -1;
                sign = (e[i] == '+') ? 1 : -1;
            }
            else if (e[i] >= '0' && e[i] <= '9')
            {
                if (num == -1) num = 0;
                num = num * 10 + e[i] - '0';
            }
            else if (e[i] == 'x')
            {
                num = (num == -1) ? sign : (num * sign);
                a += num;
                num = -1;
            }
        }
    }
};


// Source https://leetcode.com/problems/design-circular-deque/

Design your implementation of the circular double-ended queue (deque).

Implement the MyCircularDeque class:

MyCircularDeque(int k) Initializes the deque with a maximum size of k.
boolean insertFront() Adds an item at the front of Deque. Returns true if the operation is successful, or false otherwise.
boolean insertLast() Adds an item at the rear of Deque. Returns true if the operation is successful, or false otherwise.
boolean deleteFront() Deletes an item from the front of Deque. Returns true if the operation is successful, or false otherwise.
boolean deleteLast() Deletes an item from the rear of Deque. Returns true if the operation is successful, or false otherwise.
int getFront() Returns the front item from the Deque. Returns -1 if the deque is empty.
int getRear() Returns the last item from Deque. Returns -1 if the deque is empty.
boolean isEmpty() Returns true if the deque is empty, or false otherwise.
boolean isFull() Returns true if the deque is full, or false otherwise.
 

Example 1:

Input
["MyCircularDeque", "insertLast", "insertLast", "insertFront", "insertFront", "getRear", "isFull", "deleteLast", "insertFront", "getFront"]
[[3], [1], [2], [3], [4], [], [], [], [4], []]
Output
[null, true, true, true, false, 2, true, true, true, 4]

Explanation
MyCircularDeque myCircularDeque = new MyCircularDeque(3);
myCircularDeque.insertLast(1);  // return True
myCircularDeque.insertLast(2);  // return True
myCircularDeque.insertFront(3); // return True
myCircularDeque.insertFront(4); // return False, the queue is full.
myCircularDeque.getRear();      // return 2
myCircularDeque.isFull();       // return True
myCircularDeque.deleteLast();   // return True
myCircularDeque.insertFront(4); // return True
myCircularDeque.getFront();     // return 4
 

Constraints:

1 <= k <= 1000
0 <= value <= 1000
At most 2000 calls will be made to insertFront, insertLast, deleteFront, deleteLast, getFront, getRear, isEmpty, isFull.

class MyCircularDeque
{
public:
    vector<int> data;
    int head;
    int tail;
    int size;

    MyCircularDeque(int k) : data(k + 1, -1), head(0), tail(0), size(k + 1)
    {

    }

    bool insertFront(int value)
    {
        if (isFull()) return false;
        if (isEmpty())
        {
            return insertLast(value);
        }
        else
        {
            head = (head - 1 + size) % size;
            data[head] = value;
        }
        return true;
    }

    bool insertLast(int value)
    {
        if (isFull()) return false;
        data[tail] = value;
        tail = (tail + 1) % size;
        data[tail] = -1;
        return true;
    }

    bool deleteFront()
    {
        if (isEmpty()) return false;
        data[head] = -1;
        head = (head + 1) % size;
        return true;
    }

    bool deleteLast()
    {
        if (isEmpty()) return false;
        tail = (tail - 1 + size) % size;
        data[tail] = -1;
        return true;
    }

    int getFront()
    {
        return data[head];
    }

    int getRear()
    {
        return data[tail == 0 ? size - 1 : tail - 1];
    }

    bool isEmpty()
    {
        return head == tail;
    }

    bool isFull()
    {
        return (tail + 1) % size == head;
    }
};


// Source https://leetcode.com/problems/maximum-average-subarray-i/

You are given an integer array nums consisting of n elements, and an integer k.

Find a contiguous subarray whose length is equal to k that has the maximum average value and return this value. Any answer with a calculation error less than 10-5 will be accepted.

 

Example 1:

Input: nums = [1,12,-5,-6,50,3], k = 4
Output: 12.75000
Explanation: Maximum average is (12 - 5 - 6 + 50) / 4 = 51 / 4 = 12.75
Example 2:

Input: nums = [5], k = 1
Output: 5.00000
 

Constraints:

n == nums.length
1 <= k <= n <= 105
-104 <= nums[i] <= 104

class Solution
{
public:
    double findMaxAverage(vector<int> &nums, int k)
    {
        int n = nums.size();
        vector<int> sums = nums;
        for (int i = 1; i < n; ++i)
        {
            sums[i] = sums[i - 1] + nums[i];
        }
        double mx = sums[k - 1];
        for (int i = k; i < n; ++i)
        {
            mx = max(mx, (double)sums[i] - sums[i - k]);
        }
        return mx / k;
    }
};


// Source https://leetcode.com/problems/set-mismatch/

You have a set of integers s, which originally contains all the numbers from 1 to n. Unfortunately, due to some error, 
one of the numbers in s got duplicated to another number in the set, which results in repetition of one number and loss of another number.

You are given an integer array nums representing the data status of this set after the error.

Find the number that occurs twice and the number that is missing and return them in the form of an array.

 

Example 1:

Input: nums = [1,2,2,4]
Output: [2,3]
Example 2:

Input: nums = [1,1]
Output: [1,2]
 

Constraints:

2 <= nums.length <= 104
1 <= nums[i] <= 104

class Solution
{
public:
    vector<int> findErrorNums(vector<int> &nums)
    {
        int n = nums.size();
        vector<int> res(2, 0), cnt(n + 1, 0);
        for (int num : nums) ++cnt[num];
        for (int i = 1; i <= n; ++i)
        {
            if (res[0] != 0 && res[1] != 0) return res;
            if (cnt[i] == 2) res[0] = i;
            else if (cnt[i] == 0) res[1] = i;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/maximum-length-of-pair-chain/

You are given an array of n pairs pairs where pairs[i] = [lefti, righti] and lefti < righti.

A pair p2 = [c, d] follows a pair p1 = [a, b] if b < c. A chain of pairs can be formed in this fashion.

Return the length longest chain which can be formed.

You do not need to use up all the given intervals. You can select pairs in any order.

 

Example 1:

Input: pairs = [[1,2],[2,3],[3,4]]
Output: 2
Explanation: The longest chain is [1,2] -> [3,4].
Example 2:

Input: pairs = [[1,2],[7,8],[4,5]]
Output: 3
Explanation: The longest chain is [1,2] -> [4,5] -> [7,8].
 

Constraints:

n == pairs.length
1 <= n <= 1000
-1000 <= lefti < righti <= 1000

class Solution
{
public:
    int findLongestChain(vector<vector<int>> &pairs)
    {
        stack<vector<int>> st;
        sort(pairs.begin(), pairs.end(), [](vector<int> &a, vector<int> &b)
        {
            return a[1] < b[1];
        });
        for (const auto &pair : pairs)
        {
            if (st.empty()) st.push(pair);
            else
            {
                const auto &t = st.top();
                if (pair[0] > t[1]) st.push(pair);
            }
        }
        return st.size();
    }
};


// Source https://leetcode.com/problems/palindromic-substrings/

Given a string s, return the number of palindromic substrings in it.

A string is a palindrome when it reads the same backward as forward.

A substring is a contiguous sequence of characters within the string.

 

Example 1:

Input: s = "abc"
Output: 3
Explanation: Three palindromic strings: "a", "b", "c".
Example 2:

Input: s = "aaa"
Output: 6
Explanation: Six palindromic strings: "a", "a", "a", "aa", "aa", "aaa".
 

Constraints:

1 <= s.length <= 1000
s consists of lowercase English letters.

class Solution
{
public:
    int countSubstrings(string s)
    {
        if (s.empty()) return 0;
        int n = s.size(), res = 0;
        for (int i = 0; i < n; ++i)
        {
            helper(s, i, i, res);
            helper(s, i, i + 1, res);
        }
        return res;
    }
    void helper(string &s, int i, int j, int &res)
    {
        while (i >= 0 && j < s.size() && s[i] == s[j])
        {
            ++res;
            --i;
            ++j;
        }
    }
};


// Source https://leetcode.com/problems/replace-words/

In English, we have a concept called root, which can be followed by some other word to form another longer word - let's call this word successor. 
For example, when the root "an" is followed by the successor word "other", we can form a new word "another".

Given a dictionary consisting of many roots and a sentence consisting of words separated by spaces, replace all the successors in the sentence with the root forming it. 
If a successor can be replaced by more than one root, replace it with the root that has the shortest length.

Return the sentence after the replacement.

 

Example 1:

Input: dictionary = ["cat","bat","rat"], sentence = "the cattle was rattled by the battery"
Output: "the cat was rat by the bat"
Example 2:

Input: dictionary = ["a","b","c"], sentence = "aadsfasf absbs bbab cadsfafs"
Output: "a a b c"
 

Constraints:

1 <= dictionary.length <= 1000
1 <= dictionary[i].length <= 100
dictionary[i] consists of only lower-case letters.
1 <= sentence.length <= 106
sentence consists of only lower-case letters and spaces.
The number of words in sentence is in the range [1, 1000]
The length of each word in sentence is in the range [1, 1000]
Every two consecutive words in sentence will be separated by exactly one space.
sentence does not have leading or trailing spaces.

class Solution
{
public:
    string replaceWords(vector<string> &dict, string sentence)
    {
        vector<vector<string>> v(26);
        sort(dict.begin(), dict.end(), [](string & a, string & b)
        {
            return a.size() < b.size();
        });
        for (const string &word : dict)
        {
            v[word[0] - 'a'].push_back(word);
        }
        string res = "", t = "";
        istringstream is(sentence);
        while (is >> t)
        {
            for (const string &word : v[t[0] - 'a'])
            {
                if (word.size() > t.size()) break;
                if (t.substr(0, word.size()) == word)
                {
                    t = word;
                    break;
                }
            }
            res += t + " ";
        }
        res.pop_back();
        return res;
    }
};


// Source https://leetcode.com/problems/dota2-senate/

In the world of Dota2, there are two parties: the Radiant and the Dire.

The Dota2 senate consists of senators coming from two parties. Now the Senate wants to decide on a change in the Dota2 game. 
The voting for this change is a round-based procedure. In each round, each senator can exercise one of the two rights:

Ban one senator's right: A senator can make another senator lose all his rights in this and all the following rounds.
Announce the victory: If this senator found the senators who still have rights to vote are all from the same party, he can announce the victory and decide on the change in the game.
Given a string senate representing each senator's party belonging. The character 'R' and 'D' represent the Radiant party and the Dire party. 
Then if there are n senators, the size of the given string will be n.

The round-based procedure starts from the first senator to the last senator in the given order. This procedure will last until the end of voting. 
All the senators who have lost their rights will be skipped during the procedure.

Suppose every senator is smart enough and will play the best strategy for his own party. Predict which party will finally announce the victory and change the Dota2 game. 
The output should be "Radiant" or "Dire".

 

Example 1:

Input: senate = "RD"
Output: "Radiant"
Explanation: 
The first senator comes from Radiant and he can just ban the next senator's right in round 1. 
And the second senator can't exercise any rights anymore since his right has been banned. 
And in round 2, the first senator can just announce the victory since he is the only guy in the senate who can vote.
Example 2:

Input: senate = "RDD"
Output: "Dire"
Explanation: 
The first senator comes from Radiant and he can just ban the next senator's right in round 1. 
And the second senator can't exercise any rights anymore since his right has been banned. 
And the third senator comes from Dire and he can ban the first senator's right in round 1. 
And in round 2, the third senator can just announce the victory since he is the only guy in the senate who can vote.
 

Constraints:

n == senate.length
1 <= n <= 104
senate[i] is either 'R' or 'D'.

class Solution
{
public:
    string predictPartyVictory(string senate)
    {
        int n = senate.size();
        queue<int> q1, q2;
        for (int i = 0; i < n; ++i)
        {
            (senate[i] == 'R') ? q1.push(i) : q2.push(i);
        }
        while (!q1.empty() && !q2.empty())
        {
            int i = q1.front();
            q1.pop();
            int j = q2.front();
            q2.pop();
            (i < j) ? q1.push(i + n) : q2.push(j + n);
        }
        return !q1.empty() ? "Radiant" : "Dire";
    }
};


// Source https://leetcode.com/problems/2-keys-keyboard/

There is only one character 'A' on the screen of a notepad. You can perform two operations on this notepad for each step:

Copy All: You can copy all the characters present on the screen (a partial copy is not allowed).
Paste: You can paste the characters which are copied last time.
Given an integer n, return the minimum number of operations to get the character 'A' exactly n times on the screen.

 

Example 1:

Input: n = 3
Output: 3
Explanation: Intitally, we have one character 'A'.
In step 1, we use Copy All operation.
In step 2, we use Paste operation to get 'AA'.
In step 3, we use Paste operation to get 'AAA'.
Example 2:

Input: n = 1
Output: 0
 

Constraints:

1 <= n <= 1000

当n = 1时，已经有一个A了，不需要其他操作，返回0

当n = 2时，需要复制一次，粘贴一次，返回2

当n = 3时，需要复制一次，粘贴两次，返回3

当n = 4时，这就有两种做法，一种是需要复制一次，粘贴三次，共4步，另一种是先复制一次，粘贴一次，得到 AA，然后再复制一次，粘贴一次，得到 AAAA，两种方法都是返回4

当n = 5时，需要复制一次，粘贴四次，返回5

当n = 6时，需要复制一次，粘贴两次，得到 AAA，再复制一次，粘贴一次，得到 AAAAAA，共5步，返回5

对于任意一个n(除了1以外)，最差的情况就是用n步，不会再多于n步，但是有可能是会小于n步的，比如 n=6 时，就只用了5步，仔细分析一下，发现时先拼成了 AAA，再复制粘贴成了 AAAAAA。
那么什么情况下可以利用这种方法来减少步骤呢，分析发现，小模块的长度必须要能整除n，这样才能拆分。
对于 n=6，我们其实还可先拼出 AA，然后再复制一次，粘贴两次，得到的还是5。分析到这里，解题的思路应该比较清晰了，
找出n的所有因子，然后这个因子可以当作模块的个数，再算出模块的长度 n/i，调用递归，加上模块的个数i来更新结果 res 即可

class Solution
{
public:
    int minSteps(int n)
    {
        if (n == 1) return 0;
        int res = n;
        for (int i = 2; i < n; ++i)
        {
            if (n % i == 0)
            {
                int cnt = n / i; // 1次copy，cnt - 1次paste
                res = min(res, minSteps(i) + cnt);
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/find-duplicate-subtrees/

Given the root of a binary tree, return all duplicate subtrees.

For each kind of duplicate subtrees, you only need to return the root node of any one of them.

Two trees are duplicate if they have the same structure with the same node values.

 

Example 1:


Input: root = [1,2,3,4,null,2,4,null,null,4]
Output: [[2,4],[4]]
Example 2:


Input: root = [2,1,1]
Output: [[1]]
Example 3:


Input: root = [2,2,2,3,null,3,null]
Output: [[2,3],[3]]
 

Constraints:

The number of the nodes in the tree will be in the range [1, 10^4]
-200 <= Node.val <= 200

class Solution
{
public:
    vector<TreeNode *> findDuplicateSubtrees(TreeNode *root)
    {
        vector<TreeNode *> res;
        unordered_map<string, int> m;
        helper(root, m, res);
        return res;
    }
    string helper(TreeNode *node, unordered_map<string, int> &m, vector<TreeNode *> &res)
    {
        if (!node) return "#";
        string str = to_string(node->val) + "," + helper(node->left, m, res) + "," + helper(node->right, m, res);
        if (m[str] == 1) res.push_back(node);
        ++m[str];
        return str;
    }
};


// Source https://leetcode.com/problems/two-sum-iv-input-is-a-bst/

Given the root of a Binary Search Tree and a target number k, return true if there exist two elements in the BST such that their sum is equal to the given target.

 

Example 1:


Input: root = [5,3,6,2,4,null,7], k = 9
Output: true
Example 2:


Input: root = [5,3,6,2,4,null,7], k = 28
Output: false
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
-104 <= Node.val <= 104
root is guaranteed to be a valid binary search tree.
-105 <= k <= 105

class Solution
{
public:

    void inorder(TreeNode *p, vector<int> &a)
    {
        if (!p) return;
        inorder(p->left, a);
        a.push_back(p->val);
        inorder(p->right, a);
    }

    bool findTarget(TreeNode *root, int k)
    {
        vector<int> a;
        inorder(root, a);
        int i = 0;
        int j = a.size() - 1;
        while(i < j)
        {
            if(a[i] + a[j] == k)
                return true;
            if(a[i] + a[j] > k)
                j--;
            else
                i++;
        }

        return false;
    }
};


// Source https://leetcode.com/problems/maximum-binary-tree/

You are given an integer array nums with no duplicates. A maximum binary tree can be built recursively from nums using the following algorithm:

Create a root node whose value is the maximum value in nums.
Recursively build the left subtree on the subarray prefix to the left of the maximum value.
Recursively build the right subtree on the subarray suffix to the right of the maximum value.
Return the maximum binary tree built from nums.

 

Example 1:


Input: nums = [3,2,1,6,0,5]
Output: [6,3,5,null,2,0,null,null,1]
Explanation: The recursive calls are as follow:
- The largest value in [3,2,1,6,0,5] is 6. Left prefix is [3,2,1] and right suffix is [0,5].
    - The largest value in [3,2,1] is 3. Left prefix is [] and right suffix is [2,1].
        - Empty array, so no child.
        - The largest value in [2,1] is 2. Left prefix is [] and right suffix is [1].
            - Empty array, so no child.
            - Only one element, so child is a node with value 1.
    - The largest value in [0,5] is 5. Left prefix is [0] and right suffix is [].
        - Only one element, so child is a node with value 0.
        - Empty array, so no child.
Example 2:


Input: nums = [3,2,1]
Output: [3,null,2,null,1]
 

Constraints:

1 <= nums.length <= 1000
0 <= nums[i] <= 1000
All integers in nums are unique.

class Solution
{
public:
    TreeNode *constructMaximumBinaryTree(vector<int> &nums)
    {
        if (nums.empty()) return NULL;
        return helper(nums, 0, nums.size() - 1);
    }
    TreeNode *helper(vector<int> &nums, int left, int right)
    {
        if (left > right) return NULL;
        int idx = left;
        for (int i = left + 1; i <= right; ++i)
        {
            if (nums[i] > nums[idx])
            {
                idx = i;
            }
        }
        TreeNode *node = new TreeNode(nums[idx]);
        node->left = helper(nums, left, idx - 1);
        node->right = helper(nums, idx + 1, right);
        return node;
    }
};


// Source https://leetcode.com/problems/print-binary-tree/

Given the root of a binary tree, construct a 0-indexed m x n string matrix res that represents a formatted layout of the tree. 
The formatted layout matrix should be constructed using the following rules:

The height of the tree is height and the number of rows m should be equal to height + 1.
The number of columns n should be equal to 2^(height+1) - 1.
Place the root node in the middle of the top row (more formally, at location res[0][(n-1)/2]).
For each node that has been placed in the matrix at position res[r][c], place its left child at res[r+1][c-2^(height-r-1)] and its right child at res[r+1][c+2^(height-r-1)].
Continue this process until all the nodes in the tree have been placed.
Any empty cells should contain the empty string "".
Return the constructed matrix res.

 

Example 1:


Input: root = [1,2]
Output: 
[["","1",""],
 ["2","",""]]
Example 2:


Input: root = [1,2,3,null,4]
Output: 
[["","","","1","","",""],
 ["","2","","","","3",""],
 ["","","4","","","",""]]
 

Constraints:

The number of nodes in the tree is in the range [1, 210].
-99 <= Node.val <= 99
The depth of the tree will be in the range [1, 10].

class Solution
{
public:
    int h, w;
    vector<vector<string>> printTree(TreeNode *root)
    {
        h = getHeight(root);
        w = pow(2, h) - 1;
        vector<vector<string>> res(h, vector<string>(w, ""));
        helper(root, 0, (w - 1) / 2, res);
        return res;
    }
    void helper(TreeNode *node, int i, int j, vector<vector<string>> &res)
    {
        if (!node) return;
        res[i][j] = to_string(node->val);
        if (i >= h - 1) return;
        helper(node->left, i + 1, j - (1 << (h - 2 - i)), res);
        helper(node->right, i + 1, j + (1 << (h - 2 -i)), res);
    }
    int getHeight(TreeNode *node)
    {
        if (!node) return 0;
        return 1 + max(getHeight(node->left), getHeight(node->right));
    }
};


// Source https://leetcode.com/problems/robot-return-to-origin/

There is a robot starting at the position (0, 0), the origin, on a 2D plane. Given a sequence of its moves, judge if this robot ends up at (0, 0) after it completes its moves.

You are given a string moves that represents the move sequence of the robot where moves[i] represents its ith move. Valid moves are 'R' (right), 'L' (left), 'U' (up), and 'D' (down).

Return true if the robot returns to the origin after it finishes all of its moves, or false otherwise.

Note: The way that the robot is "facing" is irrelevant. 'R' will always make the robot move to the right once, 'L' will always make it move left, etc. 
Also, assume that the magnitude of the robot's movement is the same for each move.

 

Example 1:

Input: moves = "UD"
Output: true
Explanation: The robot moves up once, and then down once. All moves have the same magnitude, so it ended up at the origin where it started. Therefore, we return true.
Example 2:

Input: moves = "LL"
Output: false
Explanation: The robot moves left twice. It ends up two "moves" to the left of the origin. We return false because it is not at the origin at the end of its moves.
 

Constraints:

1 <= moves.length <= 2 * 104
moves only contains the characters 'U', 'D', 'L' and 'R'.

class Solution
{
public:
    bool judgeCircle(string moves)
    {
        unordered_map<char, int> m;
        for (char c : moves) ++m[c];
        return m['L'] == m['R'] && m['U'] == m['D'];
    }
};


// Source https://leetcode.com/problems/find-k-closest-elements/

Given a sorted integer array arr, two integers k and x, return the k closest integers to x in the array. The result should also be sorted in ascending order.

An integer a is closer to x than an integer b if:

|a - x| < |b - x|, or
|a - x| == |b - x| and a < b
 

Example 1:

Input: arr = [1,2,3,4,5], k = 4, x = 3
Output: [1,2,3,4]
Example 2:

Input: arr = [1,2,3,4,5], k = 4, x = -1
Output: [1,2,3,4]
 

Constraints:

1 <= k <= arr.length
1 <= arr.length <= 104
arr is sorted in ascending order.
-104 <= arr[i], x <= 104

class Solution
{
public:
    vector<int> findClosestElements(vector<int> &arr, int k, int x)
    {
        auto itr = lower_bound(arr.begin(), arr.end(), x);
        if (itr == arr.end()) return vector<int>(arr.end() - k, arr.end());
        if (itr == arr.begin()) return vector<int>(arr.begin(), arr.begin() + k);
        deque<int> res(arr.begin(), arr.end());
        while (res.size() > k)
        {
            if (x - res.front() <= res.back() - x)
            {
                res.pop_back();
            }
            else
            {
                res.pop_front();
            }
        }
        return vector<int>(res.begin(), res.end());
    }
};


// Source https://leetcode.com/problems/split-array-into-consecutive-subsequences/

You are given an integer array nums that is sorted in non-decreasing order.

Determine if it is possible to split nums into one or more subsequences such that both of the following conditions are true:

Each subsequence is a consecutive increasing sequence (i.e. each integer is exactly one more than the previous integer).
All subsequences have a length of 3 or more.
Return true if you can split nums according to the above conditions, or false otherwise.

A subsequence of an array is a new array that is formed from the original array by deleting some (can be none) of the elements without disturbing the relative positions of the remaining elements. (i.e., [1,3,5] is a subsequence of [1,2,3,4,5] while [1,3,2] is not).

 

Example 1:

Input: nums = [1,2,3,3,4,5]
Output: true
Explanation: nums can be split into the following subsequences:
[1,2,3,3,4,5] --> 1, 2, 3
[1,2,3,3,4,5] --> 3, 4, 5
Example 2:

Input: nums = [1,2,3,3,4,4,5,5]
Output: true
Explanation: nums can be split into the following subsequences:
[1,2,3,3,4,4,5,5] --> 1, 2, 3, 4, 5
[1,2,3,3,4,4,5,5] --> 3, 4, 5
Example 3:

Input: nums = [1,2,3,4,4,5]
Output: false
Explanation: It is impossible to split nums into consecutive increasing subsequences of length 3 or more.
 
1,2,3,3,3,4,4,4,5,5,5,6,7

1 2 3 4 5 6 7
3 4 5
3 4 5


Constraints:

1 <= nums.length <= 104
-1000 <= nums[i] <= 1000
nums is sorted in non-decreasing order.

每个num要么加入已有的consecutive increasing sequence，要么以它为起始点，新增一条consecutive increasing sequence

class Solution
{
public:
    bool isPossible(vector<int> &nums)
    {
        unordered_map<int, int> freq, need;
        for (int num : nums) ++freq[num];
        for (int num : nums)
        {
            if (freq[num] == 0) continue;
            if (need[num] > 0)
            {
                --freq[num];
                --need[num];
                ++need[num + 1];
            }
            else if (freq[num + 1] > 0 && freq[num + 2] > 0)
            {
                --freq[num];
                --freq[num + 1];
                --freq[num + 2];
                ++need[num + 3];
            }
            else return false;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/image-smoother/

An image smoother is a filter of the size 3 x 3 that can be applied to each cell of an image by rounding down the average of the cell and the eight surrounding cells 
(i.e., the average of the nine cells in the blue smoother). If one or more of the surrounding cells of a cell is not present, we do not consider it in the average 
(i.e., the average of the four cells in the red smoother).


Given an m x n integer matrix img representing the grayscale of an image, return the image after applying the smoother on each cell of it.

 

Example 1:


Input: img = [[1,1,1],[1,0,1],[1,1,1]]
Output: [[0,0,0],[0,0,0],[0,0,0]]
Explanation:
For the points (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0
For the points (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0
For the point (1,1): floor(8/9) = floor(0.88888889) = 0
Example 2:


Input: img = [[100,200,100],[200,50,200],[100,200,100]]
Output: [[137,141,137],[141,138,141],[137,141,137]]
Explanation:
For the points (0,0), (0,2), (2,0), (2,2): floor((100+200+200+50)/4) = floor(137.5) = 137
For the points (0,1), (1,0), (1,2), (2,1): floor((200+200+50+200+100+100)/6) = floor(141.666667) = 141
For the point (1,1): floor((50+200+200+200+200+100+100+100+100)/9) = floor(138.888889) = 138
 

Constraints:

m == img.length
n == img[i].length
1 <= m, n <= 200
0 <= img[i][j] <= 255

class Solution
{
public:
    vector<vector<int>> imageSmoother(vector<vector<int>> &M)
    {
        int m = M.size(), n = M[0].size();
        vector<vector<int>> res = M, dirs{{-1, -1}, {-1, 0}, {-1, 1}, {0, -1}, {0, 1}, {1, -1}, {1, 0}, {1, 1}};
        for (int i = 0; i < m; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                int total = M[i][j], all = 1;
                for (const auto &dir : dirs)
                {
                    int x = i + dir[0], y = j + dir[1];
                    if (x < 0 || x >= m || y < 0 || y >= n) continue;
                    total += M[x][y];
                    ++all;
                }
                res[i][j] = total / all;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/maximum-width-of-binary-tree/

Given the root of a binary tree, return the maximum width of the given tree.

The maximum width of a tree is the maximum width among all levels.

The width of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), 
where the null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation.

It is guaranteed that the answer will in the range of a 32-bit signed integer.

 

Example 1:


Input: root = [1,3,2,5,3,null,9]
Output: 4
Explanation: The maximum width exists in the third level with length 4 (5,3,null,9).
Example 2:


Input: root = [1,3,2,5,null,null,9,6,null,7]
Output: 7
Explanation: The maximum width exists in the fourth level with length 7 (6,null,null,null,null,null,7).
Example 3:


Input: root = [1,3,2,5]
Output: 2
Explanation: The maximum width exists in the second level with length 2 (3,2).
 

Constraints:

The number of nodes in the tree is in the range [1, 3000].
-100 <= Node.val <= 100

class Solution
{
public:

    int widthOfBinaryTree(TreeNode *root)
    {
        if(!root) return 0;
        queue<pair<TreeNode *, uint64_t>> q;
        q.push({root, 0});
        uint64_t width = 0;
        while(!q.empty())
        {
            uint64_t l = q.front().second;
            uint64_t r = 0;
            int n = q.size();
            for(int i = 0; i < n; ++i)
            {
                auto temp = q.front();
                q.pop();
                r = temp.second;
                if(temp.first->left)
                {
                    q.push({temp.first->left, (2 * temp.second) + 1});
                }
                if(temp.first->right)
                {
                    q.push({temp.first->right, (2 * temp.second) + 2});
                }
            }
            width = max(width, (r - l + 1));
        }
        return width;
    }
};


// Source https://leetcode.com/problems/strange-printer/

There is a strange printer with the following two special properties:

The printer can only print a sequence of the same character each time.
At each turn, the printer can print new characters starting from and ending at any place and will cover the original existing characters.
Given a string s, return the minimum number of turns the printer needed to print it.

 

Example 1:

Input: s = "aaabbb"
Output: 2
Explanation: Print "aaa" first and then print "bbb".
Example 2:

Input: s = "aba"
Output: 2
Explanation: Print "aaa" first and then print "b" from the second place of the string, which will cover the existing character 'a'.
 

Constraints:

1 <= s.length <= 100
s consists of lowercase English letters.

class Solution
{
public:
    int n;
    int dp[101][101];

    int recur(string &s, int i, int j)
    {
        if (i > j) return 0;
        if (i == j) return 1;
        if(dp[i][j] != -1) return dp[i][j];
        int x = i;
        while(x + 1 <= j && s[x] == s[x + 1]) x++;
        int ans = 1 + recur(s, x + 1, j);
        for(int k = x + 1; k <= j; k++)
        {
            if(s[k] == s[i])
            {
                ans = min(ans, recur(s, k, j) + recur(s, x + 1, k - 1));
            }
        }
        return dp[i][j] = ans;
    }

    int strangePrinter(string s)
    {
        n = s.length();
        memset(dp, -1, sizeof(dp));
        return recur(s, 0, n - 1);
    }
};


// Source https://leetcode.com/problems/non-decreasing-array/

Given an array nums with n integers, your task is to check if it could become non-decreasing by modifying at most one element.

We define an array is non-decreasing if nums[i] <= nums[i + 1] holds for every i (0-based) such that (0 <= i <= n - 2).

 

Example 1:

Input: nums = [4,2,3]
Output: true
Explanation: You could modify the first 4 to 1 to get a non-decreasing array.
Example 2:

Input: nums = [4,2,1]
Output: false
Explanation: You can't get a non-decreasing array by modify at most one element.
 

Constraints:

n == nums.length
1 <= n <= 104
-105 <= nums[i] <= 105

class Solution
{
public:
    bool checkPossibility(vector<int> &nums)
    {
        int cnt = 1, n = nums.size();
        for (int i = 1; i < n; ++i)
        {
            if (nums[i] < nums[i - 1])
            {
                if (cnt == 0) return false;
                if (i == 1 || nums[i] >= nums[i - 2]) nums[i - 1] = nums[i];
                else nums[i] = nums[i - 1];
                --cnt;
            }
        }
        return true;
    }
};


// Source https://leetcode.com/problems/beautiful-arrangement-ii/

Given two integers n and k, construct a list answer that contains n different positive integers ranging from 1 to n and obeys the following requirement:

Suppose this list is answer = [a1, a2, a3, ... , an], then the list [|a1 - a2|, |a2 - a3|, |a3 - a4|, ... , |an-1 - an|] has exactly k distinct integers.
Return the list answer. If there multiple valid answers, return any of them.

 

Example 1:

Input: n = 3, k = 1
Output: [1,2,3]
Explanation: The [1,2,3] has three different positive integers ranging from 1 to 3, and the [1,1] has exactly 1 distinct integer: 1
Example 2:

Input: n = 3, k = 2
Output: [1,3,2]
Explanation: The [1,3,2] has three different positive integers ranging from 1 to 3, and the [2,1] has exactly 2 distinct integers: 1 and 2.
 

Constraints:

1 <= k < n <= 104

当n = 8
k = 1
1 2 3 4 5 6 7 8
k = 3
1 2 3 4 5 8 6 7
k = 5
1 2 3 8 4 7 5 6

class Solution
{
public:
    vector<int> constructArray(int n, int k)
    {
        vector<int>res(n, 0);
        int left = 1, right = n, i = 0;
        while(i < n - k) res[i++] = left++;
        while(i < n)
        {
            res[i++] = right--;
            if(i == n)break;
            res[i++] = left++;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/kth-smallest-number-in-multiplication-table/

Nearly everyone has used the Multiplication Table. The multiplication table of size m x n is an integer matrix mat where mat[i][j] == i * j (1-indexed).

Given three integers m, n, and k, return the kth smallest element in the m x n multiplication table.

 

Example 1:


Input: m = 3, n = 3, k = 5
Output: 3
Explanation: The 5th smallest number is 3.
Example 2:


Input: m = 2, n = 3, k = 6
Output: 6
Explanation: The 6th smallest number is 6.
 

Constraints:

1 <= m, n <= 3 * 104
1 <= k <= m * n

class Solution
{
public:
    int findKthNumber(int m, int n, int k)
    {
        int left = 1, right = m * n;
        while (left < right)
        {
            int mid = left + (right - left) / 2, cnt = 0, i = m, j = 1;
            while (i >= 1 && j <= n)
            {
                if (i * j <= mid)
                {
                    cnt += i;
                    ++j;
                }
                else
                {
                    --i;
                }
            }
            if (cnt < k) left = mid + 1;
            else right = mid;
        }
        return right;
    }
};


// Source https://leetcode.com/problems/trim-a-binary-search-tree/

Given the root of a binary search tree and the lowest and highest boundaries as low and high, trim the tree so that all its elements lies in [low, high]. 
Trimming the tree should not change the relative structure of the elements that will remain in the tree (i.e., any node's descendant should remain a descendant). 
It can be proven that there is a unique answer.

Return the root of the trimmed binary search tree. Note that the root may change depending on the given bounds.

 

Example 1:


Input: root = [1,0,2], low = 1, high = 2
Output: [1,null,2]
Example 2:


Input: root = [3,0,4,null,2,null,null,1], low = 1, high = 3
Output: [3,2,null,1]
 

Constraints:

The number of nodes in the tree in the range [1, 104].
0 <= Node.val <= 104
The value of each node in the tree is unique.
root is guaranteed to be a valid binary search tree.
0 <= low <= high <= 104

class Solution
{
public:
    TreeNode *trimBST(TreeNode *root, int L, int R)
    {
        if (!root) return NULL;
        if (root->val < L) return trimBST(root->right, L, R);
        if (root->val > R) return trimBST(root->left, L, R);
        root->left = trimBST(root->left, L, R);
        root->right = trimBST(root->right, L, R);
        return root;
    }
};


// Source https://leetcode.com/problems/maximum-swap/

You are given an integer num. You can swap two digits at most once to get the maximum valued number.

Return the maximum valued number you can get.

 

Example 1:

Input: num = 2736
Output: 7236
Explanation: Swap the number 2 and the number 7.
Example 2:

Input: num = 9973
Output: 9973
Explanation: No swap.
 

Constraints:

0 <= num <= 108

class Solution
{
public:
    int maximumSwap(int num)
    {
        string str = to_string(num);
        int res = num, n = str.size();
        for (int i = 0; i < n; ++i)
        {
            for (int j = i + 1; j < n; ++j)
            {
                swap(str[i], str[j]);
                res = max(res, stoi(str));
                swap(str[i], str[j]);
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/second-minimum-node-in-a-binary-tree/

Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly two or zero sub-node. 
If the node has two sub-nodes, then this node's value is the smaller value among its two sub-nodes. More formally, the property root.val = min(root.left.val, root.right.val) always holds.

Given such a binary tree, you need to output the second minimum value in the set made of all the nodes' value in the whole tree.

If no such second minimum value exists, output -1 instead.

 

 

Example 1:


Input: root = [2,2,5,null,null,5,7]
Output: 5
Explanation: The smallest value is 2, the second smallest value is 5.
Example 2:


Input: root = [2,2,2]
Output: -1
Explanation: The smallest value is 2, but there isn't any second smallest value.
 

Constraints:

The number of nodes in the tree is in the range [1, 25].
1 <= Node.val <= 231 - 1
root.val == min(root.left.val, root.right.val) for each internal node of the tree.

class Solution
{
public:
    void recur(TreeNode *node, int minVal, vector<int> &res)
    {
        if (!node) return;
        if (node->val != minVal) { res.push_back(node->val); return; }
        recur(node->left, minVal, res);
        recur(node->right, minVal, res);
    }
    int findSecondMinimumValue(TreeNode *root)
    {
        if (!root) return -1;
        int minVal = root->val;
        vector<int> res;
        recur(root, minVal, res);
        if (res.size() == 0) return -1;
        int secondMinVal = INT_MAX;
        for (auto val : res) secondMinVal = min(secondMinVal, val);
        return secondMinVal;
    }
};


// Source https://leetcode.com/problems/bulb-switcher-ii/

There is a room with n bulbs labeled from 1 to n that all are turned on initially, and four buttons on the wall. Each of the four buttons has a different functionality where:

Button 1: Flips the status of all the bulbs.
Button 2: Flips the status of all the bulbs with even labels (i.e., 2, 4, ...).
Button 3: Flips the status of all the bulbs with odd labels (i.e., 1, 3, ...).
Button 4: Flips the status of all the bulbs with a label j = 3k + 1 where k = 0, 1, 2, ... (i.e., 1, 4, 7, 10, ...).
You must make exactly presses button presses in total. For each press, you may pick any of the four buttons to press.

Given the two integers n and presses, return the number of different possible statuses after performing all presses button presses.

n1 + n2 + n3 + n4 = p
label 1经过n1 + n3 + n4
label 2经过n1 + n2
label 3经过n1 + n3
label 4经过n1 + n2 + n4
label 5经过n1 + n3
label 6经过n1 + n2
label 7经过n1 + n3 + n4
label 8经过n1 + n2
label 9经过n1 + n3
label 10经过n1 + n2 + n4
label 11经过n1 + n3
label 12经过n1 + n2
label 13经过n1 + n3 + n4

label 1 7 13 ...
label 2 8 14 ...
label 3 9 15 ...
label 4 10 16 ...
label 5 11 17 ...
label 6 12 18 ...

周期为6

n bulbs labeled from 1 to n that all are turned on initially

label 1 2 3 最终状态都是on，则n1 + n3 + n4 偶数，n1 + n2 偶数，n1 + n3 偶数，因此n4为偶数，n1 + n2 + n4也为偶数
如果知道n1 + n3，n1 + n2，n1 + n3 + n4的奇偶性，就可以知道n1 + n2 + n4的奇偶性，这样所有label的最终状态就都知道了
所以，前3个label的最终状态决定了其他label的最终状态，最多8种（2^3 = 8)

Example 1:

Input: n = 1, presses = 1
Output: 2
Explanation: Status can be:
- [off] by pressing button 1
- [on] by pressing button 2
Example 2:

Input: n = 2, presses = 1
Output: 3
Explanation: Status can be:
- [off, off] by pressing button 1
- [on, off] by pressing button 2
- [off, on] by pressing button 3
Example 3:

Input: n = 3, presses = 1
Output: 4
Explanation: Status can be:
- [off, off, off] by pressing button 1
- [off, on, off] by pressing button 2
- [on, off, on] by pressing button 3
- [off, on, on] by pressing button 4
 

Constraints:

1 <= n <= 1000
0 <= presses <= 1000

111 -> 000 011 010 101
100 -> 011 000 001 110
101 -> 010 001 000 111
110 -> 001 010 011 100
010 -> 101 110 111 000
001 -> 110 101 100 011
000 -> 111 100 101 010
011 -> 100 111 110 001

111 -> 000 011 010 101
101 -> 010 001 000 111
000 -> 111 100 101 010
011 -> 100 111 110 001
010 -> 101 110 111 000

11 -> 00 01 01 10
00 -> 11 10 10 01
01 -> 10 11 11 00
10 -> 01 00 00 11

class Solution
{
public:
    int flipLights(int n, int p)
    {
        if (n >= 3)
        {
            if (p >= 3) return 8;
            else if (p == 2) return 7;
            else if (p == 1) return 4;
            else return 1;
        }
        if (n == 2)
        {
            if (p >= 2) return 4;
            else if (p == 1) return 3;
            else return 1;
        }
        if (p == 0) return 1;
        return 2;
    }
};


// Source https://leetcode.com/problems/number-of-longest-increasing-subsequence/

Given an integer array nums, return the number of longest increasing subsequences.

Notice that the sequence has to be strictly increasing.

 

Example 1:

Input: nums = [1,3,5,4,7]
Output: 2
Explanation: The two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7].
Example 2:

Input: nums = [2,2,2,2,2]
Output: 5
Explanation: The length of longest continuous increasing subsequence is 1, and there are 5 subsequences' length is 1, so output 5.

 

Constraints:

1 <= nums.length <= 2000
-106 <= nums[i] <= 106

class Solution
{
public:
    int findNumberOfLIS(vector<int> &nums)
    {
        int n = nums.size();
        vector<int> dp(n, 1);
        vector<int> count(n, 1);
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < i; j++)
            {
                if(nums[i] > nums[j])
                {
                    if(dp[i] == (1 + dp[j]))
                    {
                        count[i] += count[j];
                    }
                    else if(dp[i] < (1 + dp[j]))
                    {
                        dp[i] = 1 + dp[j];
                        count[i] = count[j];
                    }
                }
            }
        }

        int maxLen = *max_element(dp.begin(), dp.end());
        int ans = 0;
        for(int i = 0; i < n; i++)
        {
            if(dp[i] == maxLen)
            {
                ans += count[i];
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/longest-continuous-increasing-subsequence/

Given an unsorted array of integers nums, return the length of the longest continuous increasing subsequence (i.e. subarray). The subsequence must be strictly increasing.

A continuous increasing subsequence is defined by two indices l and r (l < r) such that it is [nums[l], nums[l + 1], ..., nums[r - 1], nums[r]] and for each l <= i < r, nums[i] < nums[i + 1].

 

Example 1:

Input: nums = [1,3,5,4,7]
Output: 3
Explanation: The longest continuous increasing subsequence is [1,3,5] with length 3.
Even though [1,3,5,7] is an increasing subsequence, it is not continuous as elements 5 and 7 are separated by element
4.
Example 2:

Input: nums = [2,2,2,2,2]
Output: 1
Explanation: The longest continuous increasing subsequence is [2] with length 1. Note that it must be strictly
increasing.
 

Constraints:

1 <= nums.length <= 104
-109 <= nums[i] <= 109

class Solution
{
public:
    int findLengthOfLCIS(vector<int> &nums)
    {
        int n = nums.size();
        int res = 1, cnt = 1, prev = nums[0];
        for (int i = 1; i < n; ++i)
        {
            int curr = nums[i];
            if (curr > prev) ++cnt;
            else cnt = 1;
            res = max(res, cnt);
            prev = curr;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/cut-off-trees-for-golf-event/

You are asked to cut off all the trees in a forest for a golf event. The forest is represented as an m x n matrix. In this matrix:

0 means the cell cannot be walked through.
1 represents an empty cell that can be walked through.
A number greater than 1 represents a tree in a cell that can be walked through, and this number is the tree's height.
In one step, you can walk in any of the four directions: north, east, south, and west. If you are standing in a cell with a tree, you can choose whether to cut it off.

You must cut off the trees in order from shortest to tallest. When you cut off a tree, the value at its cell becomes 1 (an empty cell).

Starting from the point (0, 0), return the minimum steps you need to walk to cut off all the trees. If you cannot cut off all the trees, return -1.

You are guaranteed that no two trees have the same height, and there is at least one tree needs to be cut off.

 

Example 1:


Input: forest = [[1,2,3],[0,0,4],[7,6,5]]
Output: 6
Explanation: Following the path above allows you to cut off the trees from shortest to tallest in 6 steps.
Example 2:


Input: forest = [[1,2,3],[0,0,0],[7,6,5]]
Output: -1
Explanation: The trees in the bottom row cannot be accessed as the middle row is blocked.
Example 3:

Input: forest = [[2,3,4],[0,0,5],[8,7,6]]
Output: 6
Explanation: You can follow the same path as Example 1 to cut off all the trees.
Note that you can cut off the first tree at (0, 0) before making any steps.
 

Constraints:

m == forest.length
n == forest[i].length
1 <= m, n <= 50
0 <= forest[i][j] <= 109

class Solution
{
public:
    int n, m;
    int dir[4][2] = {{-1, 0}, {0, -1}, {1, 0}, {0, 1}};

    int BFS(vector<vector<int>> &forest, int sr, int sc, int er, int ec)
    {
        vector< vector<bool>> vis(n, vector<bool> (m, false));
        queue<pair<int, int>> q;
        q.push({sr, sc});
        vis[sr][sc] = true;
        int shortestDistance = 0;
        while(!q.empty())
        {
            int size = q.size();
            while(size-- > 0)
            {
                auto top = q.front();
                q.pop();

                if(top.first == er && top.second == ec)
                {
                    forest[er][ec] = 1;
                    return shortestDistance;
                }

                for(int i = 0; i < 4; i++)
                {
                    int newr = top.first + dir[i][0];
                    int newc = top.second + dir[i][1];
                    if(newr >= 0 && newr < n && newc >= 0 && newc < m && forest[newr][newc] >= 1 && !vis[newr][newc])
                    {
                        q.push({newr, newc});
                        vis[newr][newc] = true;
                    }
                }
            }
            shortestDistance++;
        }

        return -1;
    }

    int cutOffTree(vector<vector<int>> &forest)
    {
        n = forest.size();
        m = forest[0].size();
        vector<pair<int, pair<int, int>>> trees;
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                if(forest[i][j] > 1)
                {
                    trees.push_back({forest[i][j], {i, j}});
                }
            }
        }

        sort(trees.begin(), trees.end(), [](auto &a, auto &b)
        {
            return a.first < b.first;
        });

        int startX = 0;
        int startY = 0;
        int totalDistance = 0;
        for(auto tree : trees)
        {
            int CorX = tree.second.first;
            int CorY = tree.second.second;

            int dist = BFS(forest, startX, startY, CorX, CorY);
            if(dist == -1)
            {
                return -1;
            }
            totalDistance += dist;

            startX = CorX;
            startY = CorY;
        }

        return totalDistance;
    }
};


// Source https://leetcode.com/problems/implement-magic-dictionary/

Design a data structure that is initialized with a list of different words. Provided a string, you should determine if you can change exactly one character in this string to match any word in the data structure.

Implement the MagicDictionary class:

MagicDictionary() Initializes the object.
void buildDict(String[] dictionary) Sets the data structure with an array of distinct strings dictionary.
bool search(String searchWord) Returns true if you can change exactly one character in searchWord to match any string in the data structure, otherwise returns false.
 

Example 1:

Input
["MagicDictionary", "buildDict", "search", "search", "search", "search"]
[[], [["hello", "leetcode"]], ["hello"], ["hhllo"], ["hell"], ["leetcoded"]]
Output
[null, null, false, true, false, false]

Explanation
MagicDictionary magicDictionary = new MagicDictionary();
magicDictionary.buildDict(["hello", "leetcode"]);
magicDictionary.search("hello"); // return False
magicDictionary.search("hhllo"); // We can change the second 'h' to 'e' to match "hello" so we return True
magicDictionary.search("hell"); // return False
magicDictionary.search("leetcoded"); // return False
 

Constraints:

1 <= dictionary.length <= 100
1 <= dictionary[i].length <= 100
dictionary[i] consists of only lower-case English letters.
All the strings in dictionary are distinct.
1 <= searchWord.length <= 100
searchWord consists of only lower-case English letters.
buildDict will be called only once before search.
At most 100 calls will be made to search.

class MagicDictionary
{
public:
    struct TrieNode
    {
        TrieNode *children[26];
        bool wordEndFlag;
        TrieNode()
        {
            for (int i = 0; i < 26; ++i)
            {
                children[i] = NULL;
            }
            wordEndFlag = false;
        }
    };

    TrieNode *root;

    MagicDictionary()
    {
        root = new TrieNode();
    }

    void buildDict(vector<string> dictionary)
    {
        for (int i = 0; i < dictionary.size(); ++i)
        {
            TrieNode *p = root;
            for (int j = 0; j < dictionary[i].size(); ++j)
            {
                char ch = dictionary[i][j];
                if (p->children[ch - 'a'] == NULL)
                {
                    p->children[ch - 'a'] = new TrieNode();
                }
                p = p->children[ch - 'a'];
            }
            p->wordEndFlag = true;
        }
    }

    bool solve(TrieNode *root, string &s, int curPos, int len, int changed)
    {
        if (changed == 2)
        {
            return false;
        }
        if (root == NULL)
        {
            return false;
        }
        if (curPos == len)
        {
            if (root->wordEndFlag && changed == 1)
            {
                return true;
            }
            return false;
        }
        for (int i = 0; i < 26; ++i)
        {
            if (i != s[curPos] - 'a')
            {
                if (solve(root->children[i], s, curPos + 1, len, changed + 1))
                {
                    return true;
                }
            }
            else
            {
                if (solve(root->children[i], s, curPos + 1, len, changed))
                {
                    return true;
                }
            }
        }
        return false;
    }

    bool search(string searchWord)
    {
        int len = searchWord.size();
        return solve(root, searchWord, 0, len, 0);
    }
};


// Source https://leetcode.com/problems/map-sum-pairs/

Design a map that allows you to do the following:

Maps a string key to a given value.
Returns the sum of the values that have a key with a prefix equal to a given string.
Implement the MapSum class:

MapSum() Initializes the MapSum object.
void insert(String key, int val) Inserts the key-val pair into the map. If the key already existed, the original key-value pair will be overridden to the new one.
int sum(string prefix) Returns the sum of all the pairs' value whose key starts with the prefix.
 

Example 1:

Input
["MapSum", "insert", "sum", "insert", "sum"]
[[], ["apple", 3], ["ap"], ["app", 2], ["ap"]]
Output
[null, null, 3, null, 5]

Explanation
MapSum mapSum = new MapSum();
mapSum.insert("apple", 3);  
mapSum.sum("ap");           // return 3 (apple = 3)
mapSum.insert("app", 2);    
mapSum.sum("ap");           // return 5 (apple + app = 3 + 2 = 5)
 

Constraints:

1 <= key.length, prefix.length <= 50
key and prefix consist of only lowercase English letters.
1 <= val <= 1000
At most 50 calls will be made to insert and sum.

class MapSum
{
public:
    /** Initialize your data structure here. */
    MapSum() {}

    void insert(string key, int val)
    {
        m[key] = val;
    }

    int sum(string prefix)
    {
        int res = 0, n = prefix.size();
        for (auto it = m.lower_bound(prefix); it != m.end(); ++it)
        {
            if (it->first.substr(0, n) != prefix) break;
            res += it->second;
        }
        return res;
    }

private:
    map<string, int> m;
};


// Source https://leetcode.com/problems/valid-parenthesis-string/

Given a string s containing only three types of characters: '(', ')' and '*', return true if s is valid.

The following rules define a valid string:

Any left parenthesis '(' must have a corresponding right parenthesis ')'.
Any right parenthesis ')' must have a corresponding left parenthesis '('.
Left parenthesis '(' must go before the corresponding right parenthesis ')'.
'*' could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string "".
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "(*)"
Output: true
Example 3:

Input: s = "(*))"
Output: true
 

Constraints:

1 <= s.length <= 100
s[i] is '(', ')' or '*'.

class Solution
{
public:
    bool checkValidString(string s)
    {
        int left = 0, right = 0, n = s.size();
        for (int i = 0; i < n; ++i)
        {
            if (s[i] == '(' || s[i] == '*') ++left;
            else --left;
            if (left < 0) return false;
        }
        if (left == 0) return true;
        for (int i = n - 1; i >= 0; --i)
        {
            if (s[i] == ')' || s[i] == '*') ++right;
            else --right;
            if (right < 0) return false;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/24-game/

You are given an integer array cards of length 4. You have four cards, each containing a number in the range [1, 9]. 
You should arrange the numbers on these cards in a mathematical expression using the operators ['+', '-', '*', '/'] and the parentheses '(' and ')' to get the value 24.

You are restricted with the following rules:

The division operator '/' represents real division, not integer division.
For example, 4 / (1 - 2 / 3) = 4 / (1 / 3) = 12.
Every operation done is between two numbers. In particular, we cannot use '-' as a unary operator.
For example, if cards = [1, 1, 1, 1], the expression "-1 - 1 - 1 - 1" is not allowed.
You cannot concatenate numbers together
For example, if cards = [1, 2, 1, 2], the expression "12 + 12" is not valid.
Return true if you can get such expression that evaluates to 24, and false otherwise.

 

Example 1:

Input: cards = [4,1,8,7]
Output: true
Explanation: (8-4) * (7-1) = 24
Example 2:

Input: cards = [1,2,1,2]
Output: false
 

Constraints:

cards.length == 4
1 <= cards[i] <= 9

class Solution
{
public:
    bool judgePoint24(vector<int> &nums)
    {
        bool res = false;
        double eps = 0.001;
        vector<double> arr(nums.begin(), nums.end());
        helper(arr, eps, res);
        return res;
    }
    void helper(vector<double> &nums, double eps, bool &res)
    {
        if (res) return;
        if (nums.size() == 1)
        {
            if (abs(nums[0] - 24) < eps) res = true;
            return;
        }
        for (int i = 0; i < nums.size(); ++i)
        {
            for (int j = 0; j < i; ++j)
            {
                double p = nums[i], q = nums[j];
                vector<double> t{p + q, p - q, q - p, p * q};
                if (p > eps) t.push_back(q / p);
                if (q > eps) t.push_back(p / q);
                nums.erase(nums.begin() + i);
                nums.erase(nums.begin() + j);
                for (double d : t)
                {
                    nums.push_back(d);
                    helper(nums, eps, res);
                    nums.pop_back();
                }
                nums.insert(nums.begin() + j, q);
                nums.insert(nums.begin() + i, p);
                if (res) return;
            }
        }
    }
};


// Source https://leetcode.com/problems/valid-palindrome-ii/

Given a string s, return true if the s can be palindrome after deleting at most one character from it.

 

Example 1:

Input: s = "aba"
Output: true
Example 2:

Input: s = "abca"
Output: true
Explanation: You could delete the character 'c'.
Example 3:

Input: s = "abc"
Output: false
 

Constraints:

1 <= s.length <= 105
s consists of lowercase English letters.

class Solution
{
public:
    bool validPalindrome(string s)
    {
        int left = 0, right = s.size() - 1;
        while (left < right)
        {
            if (s[left] != s[right]) return isValid(s, left, right - 1) || isValid(s, left + 1, right);
            ++left;
            --right;
        }
        return true;
    }
    bool isValid(string s, int left, int right)
    {
        while (left < right)
        {
            if (s[left] != s[right]) return false;
            ++left;
            --right;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/baseball-game/

You are keeping score for a baseball game with strange rules. The game consists of several rounds, where the scores of past rounds may affect future rounds' scores.

At the beginning of the game, you start with an empty record. You are given a list of strings ops, where ops[i] is the ith operation you must apply to the record and is one of the following:

An integer x - Record a new score of x.
"+" - Record a new score that is the sum of the previous two scores. It is guaranteed there will always be two previous scores.
"D" - Record a new score that is double the previous score. It is guaranteed there will always be a previous score.
"C" - Invalidate the previous score, removing it from the record. It is guaranteed there will always be a previous score.
Return the sum of all the scores on the record.

 

Example 1:

Input: ops = ["5","2","C","D","+"]
Output: 30
Explanation:
"5" - Add 5 to the record, record is now [5].
"2" - Add 2 to the record, record is now [5, 2].
"C" - Invalidate and remove the previous score, record is now [5].
"D" - Add 2 * 5 = 10 to the record, record is now [5, 10].
"+" - Add 5 + 10 = 15 to the record, record is now [5, 10, 15].
The total sum is 5 + 10 + 15 = 30.
Example 2:

Input: ops = ["5","-2","4","C","D","9","+","+"]
Output: 27
Explanation:
"5" - Add 5 to the record, record is now [5].
"-2" - Add -2 to the record, record is now [5, -2].
"4" - Add 4 to the record, record is now [5, -2, 4].
"C" - Invalidate and remove the previous score, record is now [5, -2].
"D" - Add 2 * -2 = -4 to the record, record is now [5, -2, -4].
"9" - Add 9 to the record, record is now [5, -2, -4, 9].
"+" - Add -4 + 9 = 5 to the record, record is now [5, -2, -4, 9, 5].
"+" - Add 9 + 5 = 14 to the record, record is now [5, -2, -4, 9, 5, 14].
The total sum is 5 + -2 + -4 + 9 + 5 + 14 = 27.
Example 3:

Input: ops = ["1"]
Output: 1
 

Constraints:

1 <= ops.length <= 1000
ops[i] is "C", "D", "+", or a string representing an integer in the range [-3 * 104, 3 * 104].
For operation "+", there will always be at least two previous scores on the record.
For operations "C" and "D", there will always be at least one previous score on the record.

class Solution
{
public:
    int calPoints(vector<string> &ops)
    {
        vector<int> v;
        for (string &op : ops)
        {
            if (op == "+")
            {
                v.push_back(v.back() + v[v.size() - 2]);
            }
            else if (op == "D")
            {
                v.push_back(2 * v.back());
            }
            else if (op == "C")
            {
                v.pop_back();
            }
            else
            {
                v.push_back(stoi(op));
            }
        }
        return accumulate(v.begin(), v.end(), 0);
    }
};


// Source https://leetcode.com/problems/redundant-connection/

In this problem, a tree is an undirected graph that is connected and has no cycles.

You are given a graph that started as a tree with n nodes labeled from 1 to n, with one additional edge added. 
The added edge has two different vertices chosen from 1 to n, and was not an edge that already existed. 
The graph is represented as an array edges of length n where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the graph.

Return an edge that can be removed so that the resulting graph is a tree of n nodes. If there are multiple answers, return the answer that occurs last in the input.

 

Example 1:


Input: edges = [[1,2],[1,3],[2,3]]
Output: [2,3]
Example 2:


Input: edges = [[1,2],[2,3],[3,4],[1,4],[1,5]]
Output: [1,4]
 

Constraints:

n == edges.length
3 <= n <= 1000
edges[i].length == 2
1 <= ai < bi <= edges.length
ai != bi
There are no repeated edges.
The given graph is connected.

class UnionFind
{
public:
    vector<int> ancestors;
    vector<int> sizes;

    UnionFind(int n)
    {
        ancestors = vector<int>(n, -1);
        sizes = vector<int>(n, 1);
        for(int i = 0; i < n; ++i) ancestors[i] = i;
    }
    int QuickFind(int node)
    {
        if(ancestors[node] == node) return node;
        return ancestors[node] = QuickFind(ancestors[node]);
    }
    bool QuickUnion(int node1, int node2)
    {
        int root1 = QuickFind(node1), root2 = QuickFind(node2);
        if (root1 == root2) return false;
        if (sizes[root1] < sizes[root2])
        {
            ancestors[root1] = root2;
            sizes[root2] += sizes[root1];
        }
        else
        {
            ancestors[root2] = root1;
            sizes[root1] += sizes[root2];
        }
        return true;
    }
};

class Solution
{
public:

    vector<int> findRedundantConnection(vector<vector<int>> &e)
    {
        int n = e.size();
        UnionFind dsu(n + 1);
        for(int i = 0; i < n; i++)
        {
            int u = e[i][0], v = e[i][1];
            if(!dsu.QuickUnion(u, v))
                return e[i];
        }
        return {};
    }
};


// Source https://leetcode.com/problems/redundant-connection-ii/

In this problem, a rooted tree is a directed graph such that, there is exactly one node (the root) for which all other nodes are descendants of this node, 
plus every node has exactly one parent, except for the root node which has no parents.

The given input is a directed graph that started as a rooted tree with n nodes (with distinct values from 1 to n), with one additional directed edge added. 
The added edge has two different vertices chosen from 1 to n, and was not an edge that already existed.

The resulting graph is given as a 2D-array of edges. Each element of edges is a pair [ui, vi] that represents a directed edge connecting nodes ui and vi, where ui is a parent of child vi.

Return an edge that can be removed so that the resulting graph is a rooted tree of n nodes. If there are multiple answers, return the answer that occurs last in the given 2D-array.

 

Example 1:


Input: edges = [[1,2],[1,3],[2,3]]
Output: [2,3]
Example 2:


Input: edges = [[1,2],[2,3],[3,4],[4,1],[1,5]]
Output: [4,1]
 

Constraints:

n == edges.length
3 <= n <= 1000
edges[i].length == 2
1 <= ui, vi <= n
ui != vi

第一种：无环，但是有结点入度为2的结点（结点3）

[[1,2], [1,3], [2,3]]

  1
 / \
v   v
2-->3
 

第二种：有环，没有入度为2的结点

[[1,2], [2,3], [3,4], [4,1], [1,5]]

5 <- 1 -> 2
     ^    |
     |    v
     4 <- 3
 

第三种：有环，且有入度为2的结点（结点1）

[[1,2], [2,3], [3,1], [4,1]]

     4
    /
   v
   1
 /  ^
v    \
2 -->3

对于第一种情况，返回的是产生入度为2的后加入的那条边 [2, 3]，而对于第二种情况，返回的是刚好组成环的最后加入的那条边 [4, 1]，最后对于第三种情况返回的是组成环，且组成入度为2的那条边 [3, 1]。

目标是有向图没有环和入度为2的点
first、second分别保存入度为2的点对应的一条边（先出现），另一条边（后出现）
判断是否有环的时候跳过second
如果最终无环，则要remove的就是second
如果有环且存在first，则要remove的就是first
如果有环且不存在first，则要remove的就是edge

class Solution
{
public:
    vector<int> findRedundantDirectedConnection(vector<vector<int>> &edges)
    {
        int n = edges.size();
        vector<int> root(n + 1), first, second;
        for (auto &edge : edges)
        {
            if (root[edge[1]] == 0)
            {
                root[edge[1]] = edge[0];
            }
            else
            {
                first = {root[edge[1]], edge[1]};
                second = edge;
                edge[1] = 0;
            }
        }
        for (int i = 0; i <= n; ++i) root[i] = i;
        for (auto &edge : edges)
        {
            if (edge[1] == 0) continue;
            int x = getRoot(root, edge[0]), y = getRoot(root, edge[1]);
            if (x == y) return first.empty() ? edge : first;
            root[x] = y;
        }
        return second;
    }
    int getRoot(vector<int> &root, int i)
    {
        if(root[i] == i) return i;
        return root[i] = getRoot(root, root[i]);
    }
};


// Source https://leetcode.com/problems/repeated-string-match/

Given two strings a and b, return the minimum number of times you should repeat string a so that string b is a substring of it. 
If it is impossible for b​​​​​​ to be a substring of a after repeating it, return -1.

Notice: string "abc" repeated 0 times is "", repeated 1 time is "abc" and repeated 2 times is "abcabc".

 

Example 1:

Input: a = "abcd", b = "cdabcdab"
Output: 3
Explanation: We return 3 because by repeating a three times "abcdabcdabcd", b is a substring of it.
Example 2:

Input: a = "a", b = "aa"
Output: 2
 

Constraints:

1 <= a.length, b.length <= 104
a and b consist of lowercase English letters.

class Solution
{
public:
    int repeatedStringMatch(string A, string B)
    {
        int n1 = A.size(), n2 = B.size(), cnt = 1;
        string t = A;
        while (t.size() < n2)
        {
            t += A;
            ++cnt;
        }
        if (t.find(B) != string::npos) return cnt;
        t += A;
        return (t.find(B) != string::npos) ? cnt + 1 : -1;
    }
};


// Source https://leetcode.com/problems/longest-univalue-path/

Given the root of a binary tree, return the length of the longest path, where each node in the path has the same value. This path may or may not pass through the root.

The length of the path between two nodes is represented by the number of edges between them.

 

Example 1:


Input: root = [5,4,5,1,1,5]
Output: 2
Example 2:


Input: root = [1,4,5,4,4,5]
Output: 2
 

Constraints:

The number of nodes in the tree is in the range [0, 104].
-1000 <= Node.val <= 1000
The depth of the tree will not exceed 1000.

class Solution
{
public:
    int longestUnivaluePath(TreeNode *root)
    {
        int res = 0;
        helper(root, res);
        return res;
    }
    int helper(TreeNode *node, int &res)
    {
        if (node == nullptr) return 0;
        if (node->left == nullptr && node->right == nullptr) return 0;
        int left = helper(node->left, res);
        int right = helper(node->right, res);
        left = (node->left && node->val == node->left->val) ? left + 1 : 0;
        right = (node->right && node->val == node->right->val) ? right + 1 : 0;
        res = max(res, left + right);
        return max(left, right);
    }
};


// Source https://leetcode.com/problems/knight-probability-in-chessboard/

On an n x n chessboard, a knight starts at the cell (row, column) and attempts to make exactly k moves. 
The rows and columns are 0-indexed, so the top-left cell is (0, 0), and the bottom-right cell is (n - 1, n - 1).

A chess knight has eight possible moves it can make, as illustrated below. Each move is two cells in a cardinal direction, then one cell in an orthogonal direction.


Each time the knight is to move, it chooses one of eight possible moves uniformly at random (even if the piece would go off the chessboard) and moves there.

The knight continues moving until it has made exactly k moves or has moved off the chessboard.

Return the probability that the knight remains on the board after it has stopped moving.

 

Example 1:

Input: n = 3, k = 2, row = 0, column = 0
Output: 0.06250
Explanation: There are two moves (to (1,2), (2,1)) that will keep the knight on the board.
From each of those positions, there are also two moves that will keep the knight on the board.
The total probability the knight stays on the board is 0.0625.
Example 2:

Input: n = 1, k = 0, row = 0, column = 0
Output: 1.00000
 

Constraints:

1 <= n <= 25
0 <= k <= 100
0 <= row, column <= n

class Solution
{
public:
    int n;
    vector<vector<vector<double>>> dp;
    vector<vector<int>> dirs{{-1, -2}, {-2, -1}, {-2, 1}, {-1, 2}, {1, 2}, {2, 1}, {2, -1}, {1, -2}};

    double knightProbability(int N, int K, int r, int c)
    {
        n = N;
        dp = vector<vector<vector<double>>>(K + 1, vector<vector<double>>(N, vector<double>(N, 0.0)));
        return helper(K, r, c) / pow(8, K);
    }
    double helper(int k, int r, int c)
    {
        if (k == 0) return 1.0;
        if (dp[k][r][c] != 0.0) return dp[k][r][c];
        for (const auto &dir : dirs)
        {
            int x = r + dir[0], y = c + dir[1];
            if (x < 0 || x >= n || y < 0 || y >= n) continue;
            dp[k][r][c] += helper(k - 1, x, y);
        }
        return dp[k][r][c];
    }
};


// Source https://leetcode.com/problems/maximum-sum-of-3-non-overlapping-subarrays/

Given an integer array nums and an integer k, find three non-overlapping subarrays of length k with maximum sum and return them.

Return the result as a list of indices representing the starting position of each interval (0-indexed). If there are multiple answers, return the lexicographically smallest one.

 

Example 1:

Input: nums = [1,2,1,2,6,7,5,1], k = 2
Output: [0,3,5]
Explanation: Subarrays [1, 2], [2, 6], [7, 5] correspond to the starting indices [0, 3, 5].
We could have also taken [2, 1], but an answer of [1, 3, 5] would be lexicographically larger.
Example 2:

Input: nums = [1,2,1,2,1,2,1,2,1], k = 2
Output: [0,2,4]
 

Constraints:

1 <= nums.length <= 2 * 104
1 <= nums[i] < 216
1 <= k <= floor(nums.length / 3)

class Solution
{
public:
    vector<int> maxSumOfThreeSubarrays(vector<int> &nums, int k)
    {
        int n = nums.size();
        vector<int> sums;
        sums.reserve(n + 1);
        sums.push_back(0);
        for (int num : nums) sums.push_back(sums.back() + num);
        vector<int> left(n, -1);
        left[k - 1] = 0;
        int total = sums[k] - sums[0];
        for (int i = k; i < n; ++i)
        {
            if (sums[i + 1] - sums[i + 1 - k] > total)
            {
                left[i] = i + 1 - k;
                total = sums[i + 1] - sums[i + 1 - k];
            }
            else
            {
                left[i] = left[i - 1];
            }
        }
        vector<int> right(n, n);
        right[n - k] = n - k;
        total = sums[n] - sums[n - k];
        for (int i = n - 1 - k; i >= 0; --i)
        {
            if (sums[i + k] - sums[i] >= total)
            {
                right[i] = i;
                total = sums[i + k] - sums[i];
            }
            else
            {
                right[i] = right[i + 1];
            }
        }
        vector<int> res;
        int mx = INT_MIN;
        for (int i = k; i <= n - 2 * k; ++i)
        {
            int l = left[i - 1], r = right[i + k];
            int temp = (sums[i + k] - sums[i]) + (sums[l + k] - sums[l]) + (sums[r + k] - sums[r]);
            if (mx < temp)
            {
                mx = temp;
                res = {l, i, r};
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/employee-importance/

You have a data structure of employee information, including the employee's unique ID, importance value, and direct subordinates' IDs.

You are given an array of employees employees where:

employees[i].id is the ID of the ith employee.
employees[i].importance is the importance value of the ith employee.
employees[i].subordinates is a list of the IDs of the direct subordinates of the ith employee.
Given an integer id that represents an employee's ID, return the total importance value of this employee and all their direct and indirect subordinates.

 

Example 1:


Input: employees = [[1,5,[2,3]],[2,3,[]],[3,3,[]]], id = 1
Output: 11
Explanation: Employee 1 has an importance value of 5 and has two direct subordinates: employee 2 and employee 3.
They both have an importance value of 3.
Thus, the total importance value of employee 1 is 5 + 3 + 3 = 11.
Example 2:


Input: employees = [[1,2,[5]],[5,-3,[]]], id = 5
Output: -3
Explanation: Employee 5 has an importance value of -3 and has no direct subordinates.
Thus, the total importance value of employee 5 is -3.
 

Constraints:

1 <= employees.length <= 2000
1 <= employees[i].id <= 2000
All employees[i].id are unique.
-100 <= employees[i].importance <= 100
One employee has at most one direct leader and may have several subordinates.
The IDs in employees[i].subordinates are valid IDs.

class Solution
{
public:
    int getImportance(vector<Employee *> employees, int id)
    {
        unordered_map<int, Employee *> m;
        for (auto e : employees) m[e->id] = e;
        return helper(id, m);
    }
    int helper(int id, unordered_map<int, Employee *> &m)
    {
        int res = m[id]->importance;
        for (int subId : m[id]->subordinates)
        {
            res += helper(subId, m);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/stickers-to-spell-word/

We are given n different types of stickers. Each sticker has a lowercase English word on it.

You would like to spell out the given string target by cutting individual letters from your collection of stickers and rearranging them. 
You can use each sticker more than once if you want, and you have infinite quantities of each sticker.

Return the minimum number of stickers that you need to spell out target. If the task is impossible, return -1.

Note: In all test cases, all words were chosen randomly from the 1000 most common US English words, and target was chosen as a concatenation of two random words.

 

Example 1:

Input: stickers = ["with","example","science"], target = "thehat"
Output: 3
Explanation:
We can use 2 "with" stickers, and 1 "example" sticker.
After cutting and rearrange the letters of those stickers, we can form the target "thehat".
Also, this is the minimum number of stickers necessary to form the target string.
Example 2:

Input: stickers = ["notice","possible"], target = "basicbasic"
Output: -1
Explanation:
We cannot form the target "basicbasic" from cutting letters from the given stickers.
 

Constraints:

n == stickers.length
1 <= n <= 50
1 <= stickers[i].length <= 10
1 <= target.length <= 15
stickers[i] and target consist of lowercase English letters.

class Solution
{
public:
    int n;
    vector<vector<int>> dp;
    int arr[60][26];

    int recur(string &s, vector<string> &st, int mask, int i)
    {
        if(!mask)
            return 0;
        if(i == n)
            return 1e9;
        if(dp[mask][i] != -1)
            return dp[mask][i];
        int mp[26] = {0};
        memcpy(mp, arr[i], sizeof(mp));
        int newmask = 0;
        for(int j = 0; j < s.length(); j++)
        {
            int ith_bit = 1 << j;
            if(mask & ith_bit)
            {
                if(mp[s[j] - 'a'])
                {
                    mp[s[j] - 'a'] -= 1;
                }
                else
                    newmask += ith_bit;
            }
        }
        if(mask == newmask)
        {
            return dp[mask][i] = recur(s, st, mask, i + 1);
        }
        int b = recur(s, st, mask, i + 1);
        int a = recur(s, st, newmask, i) + 1;
        return dp[mask][i] = min(a, b);
    }

    int minStickers(vector<string> &stickers, string target)
    {
        n = stickers.size();
        int len = target.length();
        int cnt = (1 << len);
        dp = vector<vector<int>>(cnt, vector<int> (n + 1, -1));
        memset(arr, 0, sizeof(arr));
        for (int i = 0; i < n; ++i)
        {
            for (int j = 0; j < stickers[i].size(); ++j) arr[i][stickers[i][j] - 'a']++;
        }
        int mask = cnt - 1;
        int x = recur(target, stickers, mask, 0);
        return x == 1e9 ? -1 : x;
    }
};


// Source https://leetcode.com/problems/top-k-frequent-words/

Given an array of strings words and an integer k, return the k most frequent strings.

Return the answer sorted by the frequency from highest to lowest. Sort the words with the same frequency by their lexicographical order.

 

Example 1:

Input: words = ["i","love","leetcode","i","love","coding"], k = 2
Output: ["i","love"]
Explanation: "i" and "love" are the two most frequent words.
Note that "i" comes before "love" due to a lower alphabetical order.
Example 2:

Input: words = ["the","day","is","sunny","the","the","the","sunny","is","is"], k = 4
Output: ["the","is","sunny","day"]
Explanation: "the", "is", "sunny" and "day" are the four most frequent words, with the number of occurrence being 4, 3, 2 and 1 respectively.
 

Constraints:

1 <= words.length <= 500
1 <= words[i] <= 10
words[i] consists of lowercase English letters.
k is in the range [1, The number of unique words[i]]

class Solution
{
public:
    vector<string> topKFrequent(vector<string> &words, int k)
    {
        vector<string> res(k);
        unordered_map<string, int> freq;
        for (const auto &word : words) ++freq[word];
        auto cmp = [](pair<string, int> &a, pair<string, int> &b)
        {
            return a.second > b.second || (a.second == b.second && a.first < b.first);
        };
        priority_queue<pair<string, int>, vector<pair<string, int>>, decltype(cmp) > q(cmp);
        for (const auto &f : freq)
        {
            q.push(f);
            if (q.size() > k) q.pop();
        }
        for (int i = res.size() - 1; i >= 0; --i)
        {
            res[i] = q.top().first;
            q.pop();
        }
        return res;
    }
};


// Source https://leetcode.com/problems/binary-number-with-alternating-bits/

Given a positive integer, check whether it has alternating bits: namely, if two adjacent bits will always have different values.

 

Example 1:

Input: n = 5
Output: true
Explanation: The binary representation of 5 is: 101
Example 2:

Input: n = 7
Output: false
Explanation: The binary representation of 7 is: 111.
Example 3:

Input: n = 11
Output: false
Explanation: The binary representation of 11 is: 1011.
 

Constraints:

1 <= n <= 231 - 1

class Solution
{
public:
    bool hasAlternatingBits(int n)
    {
        int arr[32] = {0};
        int i = 0;
        while (n > 0)
        {
            if (n & 1 == 1)
            {
                arr[i] = 1;
                if (i > 0 && arr[i] == arr[i - 1]) return false;
                ++i;
            }
            else
            {
                arr[i] = 0;
                if (i > 0 && arr[i] == arr[i - 1]) return false;
                ++i;
            }
            n >>= 1;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/max-area-of-island/

You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) 
You may assume all four edges of the grid are surrounded by water.

The area of an island is the number of cells with a value 1 in the island.

Return the maximum area of an island in grid. If there is no island, return 0.

 

Example 1:


Input: grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]
Output: 6
Explanation: The answer is not 11, because the island must be connected 4-directionally.
Example 2:

Input: grid = [[0,0,0,0,0,0,0,0]]
Output: 0
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 50
grid[i][j] is either 0 or 1.

class Solution
{
public:
    int m, n;

    int maxAreaOfIsland(vector<vector<int>> &grid)
    {
        m = grid.size();
        n = grid[0].size();
        int res = 0;
        for (int i = 0; i < m; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                if (grid[i][j] != 1) continue;
                int cnt = 0;
                recur(grid, i, j, cnt);
                res = max(res, cnt);
            }
        }
        return res;
    }
    void recur(vector<vector<int>> &grid, int i, int j, int &cnt)
    {
        if (i < 0 || i >= m || j < 0 || j >= n || grid[i][j] <= 0) return;
        ++cnt;
        grid[i][j] *= -1;
        recur(grid, i + 1, j, cnt);
        recur(grid, i - 1, j, cnt);
        recur(grid, i, j + 1, cnt);
        recur(grid, i, j - 1, cnt);
    }
};


// Source https://leetcode.com/problems/count-binary-substrings/

Give a binary string s, return the number of non-empty substrings that have the same number of 0's and 1's, and all the 0's and all the 1's in these substrings are grouped consecutively.

Substrings that occur multiple times are counted the number of times they occur.

 

Example 1:

Input: s = "00110011"
Output: 6
Explanation: There are 6 substrings that have equal number of consecutive 1's and 0's: "0011", "01", "1100", "10", "0011", and "01".
Notice that some of these substrings repeat and are counted the number of times they occur.
Also, "00110011" is not a valid substring because all the 0's (and 1's) are not grouped together.
Example 2:

Input: s = "10101"
Output: 4
Explanation: There are 4 substrings: "10", "01", "10", "01" that have equal number of consecutive 1's and 0's.
 

Constraints:

1 <= s.length <= 105
s[i] is either '0' or '1'.

class Solution
{
public:
    int countBinarySubstrings(string s)
    {
        int res = 0;
        vector<int> vec;
        vec.reserve(512);
        int n = s.length();
        int i = 0;
        while (i < n)
        {
            int j = i + 1;
            for (; j < n && s[j] == s[i]; ++j);
            vec.push_back(j - i);
            i = j;
        }
        int cnt = vec.size();
        for (int k = 1; k < cnt; ++k)
        {
            res += min(vec[k-1], vec[k]);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/degree-of-an-array/

Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.

Your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.

 

Example 1:

Input: nums = [1,2,2,3,1]
Output: 2
Explanation: 
The input array has a degree of 2 because both elements 1 and 2 appear twice.
Of the subarrays that have the same degree:
[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]
The shortest length is 2. So return 2.
Example 2:

Input: nums = [1,2,2,3,1,4,2]
Output: 6
Explanation: 
The degree is 3 because the element 2 is repeated 3 times.
So [2,2,3,1,4,2] is the shortest subarray, therefore returning 6.
 

Constraints:

nums.length will be between 1 and 50,000.
nums[i] will be an integer between 0 and 49,999.

class Solution
{
public:
    int findShortestSubArray(vector<int> &nums)
    {
        int n = nums.size(), res = INT_MAX, degree = 0;
        unordered_map<int, int> m;
        unordered_map<int, pair<int, int>> pos;
        for (int i = 0; i < nums.size(); ++i)
        {
            if (++m[nums[i]] == 1)
            {
                pos[nums[i]] = {i, i};
            }
            else
            {
                pos[nums[i]].second = i;
            }
            degree = max(degree, m[nums[i]]);
        }
        for (auto a : m)
        {
            if (degree == a.second)
            {
                res = min(res, pos[a.first].second - pos[a.first].first + 1);
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/partition-to-k-equal-sum-subsets/

Given an integer array nums and an integer k, return true if it is possible to divide this array into k non-empty subsets whose sums are all equal.

 

Example 1:

Input: nums = [4,3,2,3,5,2,1], k = 4
Output: true
Explanation: It is possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.
Example 2:

Input: nums = [1,2,3,4], k = 3
Output: false
 

Constraints:

1 <= k <= nums.length <= 16
1 <= nums[i] <= 104
The frequency of each element is in the range [1, 4].

class Solution
{
public:
    int n;
    vector<int> dp;

    bool helper(int cur, int target, int cnt, int k, int mask, vector<int> &nums)
    {
        if (cnt == k)
            return true;
        if (dp[mask] != -1) return dp[mask];
        bool res = false;
        for (int i = 0; i < n && !res; i++)
        {
            if (mask & (1 << i)) continue;
            if (cur + nums[i] > target) break;
            if (cur + nums[i] == target)
            {
                res = helper(0, target, cnt + 1, k, mask + (1 << i), nums);
            }
            else
            {
                res = helper(cur + nums[i], target, cnt, k, mask + (1 << i), nums);
            }
        }
        return dp[mask] = res;
    }

    bool canPartitionKSubsets(vector<int> &nums, int k)
    {
        int sum = 0;
        for (int val : nums) sum += val;
        if (sum % k != 0) return false;
        int target = sum / k;
        sort(nums.begin(), nums.end());
        n = nums.size();
        dp = vector<int>(1 << n, -1);
        return helper(0, target, 0, k, 0, nums);
    }
};


// Source https://leetcode.com/problems/falling-squares/

There are several squares being dropped onto the X-axis of a 2D plane.

You are given a 2D integer array positions where positions[i] = [lefti, sideLengthi] represents the ith square with a side length of sideLengthi that is dropped with its left edge aligned with X-coordinate lefti.

Each square is dropped one at a time from a height above any landed squares. It then falls downward (negative Y direction) until it either lands on the top side of another square or on the X-axis. 
A square brushing the left/right side of another square does not count as landing on it. Once it lands, it freezes in place and cannot be moved.

After each square is dropped, you must record the height of the current tallest stack of squares.

Return an integer array ans where ans[i] represents the height described above after dropping the ith square.

 

Example 1:


Input: positions = [[1,2],[2,3],[6,1]]
Output: [2,5,5]
Explanation:
After the first drop, the tallest stack is square 1 with a height of 2.
After the second drop, the tallest stack is squares 1 and 2 with a height of 5.
After the third drop, the tallest stack is still squares 1 and 2 with a height of 5.
Thus, we return an answer of [2, 5, 5].
Example 2:

Input: positions = [[100,100],[200,100]]
Output: [100,100]
Explanation:
After the first drop, the tallest stack is square 1 with a height of 100.
After the second drop, the tallest stack is either square 1 or square 2, both with heights of 100.
Thus, we return an answer of [100, 100].
Note that square 2 only brushes the right side of square 1, which does not count as landing on it.
 

Constraints:

1 <= positions.length <= 1000
1 <= lefti <= 108
1 <= sideLengthi <= 106

class Solution
{
public:
    vector<int> fallingSquares(vector<vector<int>> &positions)
    {
        int n = positions.size();
        vector<int> heights(n);
        for (int i = 0; i < n; ++i)
        {
            int len = positions[i][1], left = positions[i][0], right = left + len;
            heights[i] += len;
            for (int j = i + 1; j < n; ++j)
            {
                int l = positions[j][0], r = l + positions[j][1];
                if (l < right && r > left)
                {
                    heights[j] = max(heights[j], heights[i]);
                }
            }
        }
        vector<int> res;
        res.reserve(n);
        int cur = 0;
        for (int h : heights)
        {
            cur = max(cur, h);
            res.push_back(cur);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/search-in-a-binary-search-tree/

You are given the root of a binary search tree (BST) and an integer val.

Find the node in the BST that the node's value equals val and return the subtree rooted with that node. If such a node does not exist, return null.

 

Example 1:


Input: root = [4,2,7,1,3], val = 2
Output: [2,1,3]
Example 2:


Input: root = [4,2,7,1,3], val = 5
Output: []
 

Constraints:

The number of nodes in the tree is in the range [1, 5000].
1 <= Node.val <= 107
root is a binary search tree.
1 <= val <= 107

class Solution
{
public:
    TreeNode *searchBST(TreeNode *root, int val)
    {
        if (!root) return NULL;
        if (root->val == val) return root;
        return (root->val > val) ? searchBST(root->left, val) : searchBST(root->right, val);
    }
};


// Source https://leetcode.com/problems/insert-into-a-binary-search-tree/

You are given the root node of a binary search tree (BST) and a value to insert into the tree. Return the root node of the BST after the insertion. 
It is guaranteed that the new value does not exist in the original BST.

Notice that there may exist multiple valid ways for the insertion, as long as the tree remains a BST after insertion. You can return any of them.

 

Example 1:


Input: root = [4,2,7,1,3], val = 5
Output: [4,2,7,1,3,5]
Explanation: Another accepted tree is:

Example 2:

Input: root = [40,20,60,10,30,50,70], val = 25
Output: [40,20,60,10,30,50,70,null,null,25]
Example 3:

Input: root = [4,2,7,1,3,null,null,null,null,null,null], val = 5
Output: [4,2,7,1,3,5]
 

Constraints:

The number of nodes in the tree will be in the range [0, 104].
-108 <= Node.val <= 108
All the values Node.val are unique.
-108 <= val <= 108
It's guaranteed that val does not exist in the original BST.

class Solution
{
public:
    TreeNode *insertIntoBST(TreeNode *root, int val)
    {
        if (!root) return new TreeNode(val);
        if (root->val > val) root->left = insertIntoBST(root->left, val);
        else root->right = insertIntoBST(root->right, val);
        return root;
    }
};


// Source https://leetcode.com/problems/kth-largest-element-in-a-stream/

Design a class to find the kth largest element in a stream. Note that it is the kth largest element in the sorted order, not the kth distinct element.

Implement KthLargest class:

KthLargest(int k, int[] nums) Initializes the object with the integer k and the stream of integers nums.
int add(int val) Appends the integer val to the stream and returns the element representing the kth largest element in the stream.
 

Example 1:

Input
["KthLargest", "add", "add", "add", "add", "add"]
[[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]
Output
[null, 4, 5, 5, 8, 8]

Explanation
KthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);
kthLargest.add(3);   // return 4
kthLargest.add(5);   // return 5
kthLargest.add(10);  // return 5
kthLargest.add(9);   // return 8
kthLargest.add(4);   // return 8
 

Constraints:

1 <= k <= 104
0 <= nums.length <= 104
-104 <= nums[i] <= 104
-104 <= val <= 104
At most 104 calls will be made to add.
It is guaranteed that there will be at least k elements in the array when you search for the kth element.

class KthLargest
{
public:
    KthLargest(int k, vector<int> &nums)
    {
        for (int num : nums)
        {
            q.push(num);
            if (q.size() > k) q.pop();
        }
        K = k;
    }

    int add(int val)
    {
        q.push(val);
        if (q.size() > K) q.pop();
        return q.top();
    }

private:
    priority_queue<int, vector<int>, greater<int>> q;
    int K;
};


// Source https://leetcode.com/problems/binary-search/

Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [-1,0,3,5,9,12], target = 9
Output: 4
Explanation: 9 exists in nums and its index is 4
Example 2:

Input: nums = [-1,0,3,5,9,12], target = 2
Output: -1
Explanation: 2 does not exist in nums so return -1
 

Constraints:

1 <= nums.length <= 104
-104 < nums[i], target < 104
All the integers in nums are unique.
nums is sorted in ascending order.

class Solution
{
public:
    int search(vector<int> &nums, int target)
    {
        int left = 0, right = nums.size() - 1;
        while (left <= right)
        {
            int mid = left + (right - left) / 2;
            if (nums[mid] == target) return mid;
            else if (nums[mid] < target) left = mid + 1;
            else right = mid - 1;
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/design-hashset/

Design a HashSet without using any built-in hash table libraries.

Implement MyHashSet class:

void add(key) Inserts the value key into the HashSet.
bool contains(key) Returns whether the value key exists in the HashSet or not.
void remove(key) Removes the value key in the HashSet. If key does not exist in the HashSet, do nothing.
 

Example 1:

Input
["MyHashSet", "add", "add", "contains", "contains", "add", "contains", "remove", "contains"]
[[], [1], [2], [1], [3], [2], [2], [2], [2]]
Output
[null, null, null, true, false, null, true, null, false]

Explanation
MyHashSet myHashSet = new MyHashSet();
myHashSet.add(1);      // set = [1]
myHashSet.add(2);      // set = [1, 2]
myHashSet.contains(1); // return True
myHashSet.contains(3); // return False, (not found)
myHashSet.add(2);      // set = [1, 2]
myHashSet.contains(2); // return True
myHashSet.remove(2);   // set = [1]
myHashSet.contains(2); // return False, (already removed)
 

Constraints:

0 <= key <= 106
At most 104 calls will be made to add, remove, and contains.


class MyHashSet
{
public:
    vector<bool>vec;
    int size;

    MyHashSet()
    {
        size = 0;
    }

    void add(int key)
    {
        if (key >= size)
        {
            size = key + 1;
            vec.resize(size, false);
        }
        vec[key] = true;
    }

    void remove(int key)
    {
        if (key >= size) return;
        vec[key] = false;
    }

    bool contains(int key)
    {
        if (key >= size) return false;
        return vec[key];
    }
};


// Source https://leetcode.com/problems/design-hashmap/

Design a HashMap without using any built-in hash table libraries.

Implement the MyHashMap class:

MyHashMap() initializes the object with an empty map.
void put(int key, int value) inserts a (key, value) pair into the HashMap. If the key already exists in the map, update the corresponding value.
int get(int key) returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key.
void remove(key) removes the key and its corresponding value if the map contains the mapping for the key.
 

Example 1:

Input
["MyHashMap", "put", "put", "get", "get", "put", "get", "remove", "get"]
[[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]
Output
[null, null, null, 1, -1, null, 1, null, -1]

Explanation
MyHashMap myHashMap = new MyHashMap();
myHashMap.put(1, 1); // The map is now [[1,1]]
myHashMap.put(2, 2); // The map is now [[1,1], [2,2]]
myHashMap.get(1);    // return 1, The map is now [[1,1], [2,2]]
myHashMap.get(3);    // return -1 (i.e., not found), The map is now [[1,1], [2,2]]
myHashMap.put(2, 1); // The map is now [[1,1], [2,1]] (i.e., update the existing value)
myHashMap.get(2);    // return 1, The map is now [[1,1], [2,1]]
myHashMap.remove(2); // remove the mapping for 2, The map is now [[1,1]]
myHashMap.get(2);    // return -1 (i.e., not found), The map is now [[1,1]]
 

Constraints:

0 <= key, value <= 106
At most 104 calls will be made to put, get, and remove.

class MyHashMap
{
public:
    vector<int> map;
    int size;

    MyHashMap()
    {
        size = 0;
    }

    void put(int key, int value)
    {
        if (key >= size)
        {
            size = key + 1;
            map.resize(size, -1);
        }
        map[key] = value;
    }

    int get(int key)
    {
        if (key >= size) return -1;
        else return map[key];
    }

    void remove(int key)
    {
        if (key >= size) return;
        map[key] = -1;
    }
};


// Source https://leetcode.com/problems/design-linked-list/

Design your implementation of the linked list. You can choose to use a singly or doubly linked list.
A node in a singly linked list should have two attributes: val and next. val is the value of the current node, and next is a pointer/reference to the next node.
If you want to use the doubly linked list, you will need one more attribute prev to indicate the previous node in the linked list. Assume all nodes in the linked list are 0-indexed.

Implement the MyLinkedList class:

MyLinkedList() Initializes the MyLinkedList object.
int get(int index) Get the value of the indexth node in the linked list. If the index is invalid, return -1.
void addAtHead(int val) Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.
void addAtTail(int val) Append a node of value val as the last element of the linked list.
void addAtIndex(int index, int val) Add a node of value val before the indexth node in the linked list. If index equals the length of the linked list, the node will be appended to the end of the linked list. If index is greater than the length, the node will not be inserted.
void deleteAtIndex(int index) Delete the indexth node in the linked list, if the index is valid.
 

Example 1:

Input
["MyLinkedList", "addAtHead", "addAtTail", "addAtIndex", "get", "deleteAtIndex", "get"]
[[], [1], [3], [1, 2], [1], [1], [1]]
Output
[null, null, null, null, 2, null, 3]

Explanation
MyLinkedList myLinkedList = new MyLinkedList();
myLinkedList.addAtHead(1);
myLinkedList.addAtTail(3);
myLinkedList.addAtIndex(1, 2);    // linked list becomes 1->2->3
myLinkedList.get(1);              // return 2
myLinkedList.deleteAtIndex(1);    // now the linked list is 1->3
myLinkedList.get(1);              // return 3
 

Constraints:

0 <= index, val <= 1000
Please do not use the built-in LinkedList library.
At most 2000 calls will be made to get, addAtHead, addAtTail, addAtIndex and deleteAtIndex.

struct Node
{
    int val = 0;
    Node *prev, *next;
    Node(int val, Node *prev = nullptr, Node *next = nullptr)
    {
        this->val = val;
        this->prev = prev;
        this->next = next;
    }
};

class MyLinkedList
{
    int size = 0;
    Node *head = nullptr, *tail = nullptr;

    Node *_moveTo(int index)
    {
        Node *node = nullptr;
        if (0 <= index && index <= size)
        {
            if (index <= size / 2)
            {
                node = head->next;
                for (int i = 0; i < index; ++i) node = node->next;
            }
            else
            {
                node = tail;
                for (int i = 0; i < size - index; ++i) node = node->prev;
            }
        }
        return node;
    }

public:
    MyLinkedList()
    {
        head = new Node(-1);
        tail = new Node(-1);
        head->next = tail;
        tail->prev = head;
    }

    ~MyLinkedList()
    {
        delete head;
        delete tail;
    }

    int get(int index)
    {
        Node *node = _moveTo(index);
        return node ? node->val : -1;
    }

    void addAtHead(int val)
    {
        addAtIndex(0, val);
    }

    void addAtTail(int val)
    {
        addAtIndex(size, val);
    }

    void addAtIndex(int index, int val)
    {
        Node *node = _moveTo(index);
        if (node)
        {
            ++size;
            Node *temp = new Node(val, node->prev, node);
            node->prev = node->prev->next = temp;
        }
    }

    void deleteAtIndex(int index)
    {
        Node *node = _moveTo(index);
        if (node && node != tail)
        {
            --size;
            node->next->prev = node->prev;
            node->prev->next = node->next;
            delete node;
        }
    }
};


// Source https://leetcode.com/problems/to-lower-case/

Given a string s, return the string after replacing every uppercase letter with the same lowercase letter.

 

Example 1:

Input: s = "Hello"
Output: "hello"
Example 2:

Input: s = "here"
Output: "here"
Example 3:

Input: s = "LOVELY"
Output: "lovely"
 

Constraints:

1 <= s.length <= 100
s consists of printable ASCII characters.

class Solution
{
public:
    string toLowerCase(string str)
    {
        for (char &c : str)
        {
            if (c >= 'A' && c <= 'Z') c += 32;
        }
        return str;
    }
};


// Source https://leetcode.com/problems/random-pick-with-blacklist/

You are given an integer n and an array of unique integers blacklist. Design an algorithm to pick a random integer in the range [0, n - 1] that is not in blacklist. 
Any integer that is in the mentioned range and not in blacklist should be equally likely to be returned.

Optimize your algorithm such that it minimizes the number of calls to the built-in random function of your language.

Implement the Solution class:

Solution(int n, int[] blacklist) Initializes the object with the integer n and the blacklisted integers blacklist.
int pick() Returns a random integer in the range [0, n - 1] and not in blacklist.
 

Example 1:

Input
["Solution", "pick", "pick", "pick", "pick", "pick", "pick", "pick"]
[[7, [2, 3, 5]], [], [], [], [], [], [], []]
Output
[null, 0, 4, 1, 6, 1, 0, 4]

Explanation
Solution solution = new Solution(7, [2, 3, 5]);
solution.pick(); // return 0, any integer from [0,1,4,6] should be ok. Note that for every call of pick,
                 // 0, 1, 4, and 6 must be equally likely to be returned (i.e., with probability 1/4).
solution.pick(); // return 4
solution.pick(); // return 1
solution.pick(); // return 6
solution.pick(); // return 1
solution.pick(); // return 0
solution.pick(); // return 4
 

Constraints:

1 <= n <= 109
0 <= blacklist.length <- min(105, n - 1)
0 <= blacklist[i] < n
All the values of blacklist are unique.
At most 2 * 104 calls will be made to pick.

class Solution
{
public:
    Solution(int N, vector<int> &blacklist)
    {
        unordered_set<int> st;
        len = N - blacklist.size();
        for (int i = len; i < N; ++i) st.insert(i);
        for (int num : blacklist) st.erase(num);
        auto it = st.begin();
        for (int num : blacklist)
        {
            if (num < len) m[num] = *it++;
        }
    }

    int pick()
    {
        int k = rand() % len;
        return m.count(k) ? m[k] : k;
    }

private:
    unordered_map<int, int> m;
    int len;
};


// Source https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/

Given two strings s1 and s2, return the lowest ASCII sum of deleted characters to make two strings equal.

 

Example 1:

Input: s1 = "sea", s2 = "eat"
Output: 231
Explanation: Deleting "s" from "sea" adds the ASCII value of "s" (115) to the sum.
Deleting "t" from "eat" adds 116 to the sum.
At the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this.
Example 2:

Input: s1 = "delete", s2 = "leet"
Output: 403
Explanation: Deleting "dee" from "delete" to turn the string into "let",
adds 100[d] + 101[e] + 101[e] to the sum.
Deleting "e" from "leet" adds 101[e] to the sum.
At the end, both strings are equal to "let", and the answer is 100+101+101+101 = 403.
If instead we turned both strings into "lee" or "eet", we would get answers of 433 or 417, which are higher.
 

Constraints:

1 <= s1.length, s2.length <= 1000
s1 and s2 consist of lowercase English letters.

class Solution
{
public:
    int minimumDeleteSum(string s1, string s2)
    {
        int n = s1.size();
        int m = s2.size();
        int sum1 = 0, sum2 = 0;
        for(auto x : s1)
            sum1 += x;
        for(auto x : s2)
            sum2 += x;
        int dp[n + 1][m + 1];
        for(int i = 0; i <= n; i++)
        {
            for(int j = 0; j <= m; j++)
            {
                if(i == 0 || j == 0)
                    dp[i][j] = 0 ;
                else if(s1[i - 1] == s2[j - 1])
                    dp[i][j] = dp[i - 1][j - 1] + s1[i - 1];
                else
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
            }
        }
        return sum1 + sum2 - 2 * dp[n][m];
    }
};


// Source https://leetcode.com/problems/subarray-product-less-than-k/

Given an array of integers nums and an integer k, return the number of contiguous subarrays where the product of all the elements in the subarray is strictly less than k.

 

Example 1:

Input: nums = [10,5,2,6], k = 100
Output: 8
Explanation: The 8 subarrays that have product less than 100 are:
[10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6]
Note that [10, 5, 2] is not included as the product of 100 is not strictly less than k.
Example 2:

Input: nums = [1,2,3], k = 0
Output: 0
 

Constraints:

1 <= nums.length <= 3 * 104
1 <= nums[i] <= 1000
0 <= k <= 106

class Solution
{
public:
    int numSubarrayProductLessThanK(vector<int> &nums, int k)
    {
        if (k <= 1) return 0;
        int n = nums.size();
        int res = 0, prod = 1, left = 0, right = 0;
        while (right < n)
        {
            prod *= nums[right];
            while (prod >= k && left <= right)
            {
                prod /= nums[left++];
            }
            res += (right - left + 1);
            ++right;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/

You are given an array prices where prices[i] is the price of a given stock on the ith day, and an integer fee representing a transaction fee.

Find the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: prices = [1,3,2,8,4,9], fee = 2
Output: 8
Explanation: The maximum profit can be achieved by:
- Buying at prices[0] = 1
- Selling at prices[3] = 8
- Buying at prices[4] = 4
- Selling at prices[5] = 9
The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.
Example 2:

Input: prices = [1,3,7,5,10,3], fee = 3
Output: 6
 

Constraints:

1 <= prices.length <= 5 * 104
1 <= prices[i] < 5 * 104
0 <= fee < 5 * 104

class Solution
{
public:
    int F;
    int dp[50005][2];

    int helper(vector<int> &prices, int n, int day, int count)
    {
        if(day >= n) return 0;
        int type = count % 2;
        if(dp[day][type] != -1) return dp[day][type];
        int notransaction = helper(prices, n, day + 1, count);
        int transaction = 0;
        bool buy = (count % 2 == 0);
        if(buy)
        {
            transaction = -prices[day] + helper(prices, n, day + 1, count + 1);
        }
        else
        {
            transaction = prices[day] - F + helper(prices, n, day + 1, count + 1);
        }
        return dp[day][type] = max(notransaction, transaction);
    }
    int maxProfit(vector<int> &prices, int fee)
    {
        int n = prices.size();
        F = fee;
        memset(dp, -1, sizeof(dp));
        return helper(prices, n, 0, 0);
    }
};


// Source https://leetcode.com/problems/range-module/

A Range Module is a module that tracks ranges of numbers. Design a data structure to track the ranges represented as half-open intervals and query about them.

A half-open interval [left, right) denotes all the real numbers x where left <= x < right.

Implement the RangeModule class:

RangeModule() Initializes the object of the data structure.
void addRange(int left, int right) Adds the half-open interval [left, right), tracking every real number in that interval. 
Adding an interval that partially overlaps with currently tracked numbers should add any numbers in the interval [left, right) that are not already tracked.
boolean queryRange(int left, int right) Returns true if every real number in the interval [left, right) is currently being tracked, and false otherwise.
void removeRange(int left, int right) Stops tracking every real number currently being tracked in the half-open interval [left, right).
 

Example 1:

Input
["RangeModule", "addRange", "removeRange", "queryRange", "queryRange", "queryRange"]
[[], [10, 20], [14, 16], [10, 14], [13, 15], [16, 17]]
Output
[null, null, null, true, false, true]

Explanation
RangeModule rangeModule = new RangeModule();
rangeModule.addRange(10, 20);
rangeModule.removeRange(14, 16);
rangeModule.queryRange(10, 14); // return True,(Every number in [10, 14) is being tracked)
rangeModule.queryRange(13, 15); // return False,(Numbers like 14, 14.03, 14.17 in [13, 15) are not being tracked)
rangeModule.queryRange(16, 17); // return True, (The number 16 in [16, 17) is still being tracked, despite the remove operation)
 

Constraints:

1 <= left < right <= 109
At most 104 calls will be made to addRange, queryRange, and removeRange.

class RangeModule
{
public:
    map<int, int> m; // m[left] = right 记录range左边界left和右边界right

    pair<int, int> find(int left, int right)
    {
        auto l = m.upper_bound(left), r = m.upper_bound(right);
        if (l != m.begin() && (--l)->second < left) ++l;
        if (l == r) return {left, right};
        int i = min(left, l->first), j = max(right, (--r)->second);
        m.erase(l, ++r);
        return {i, j};
    }

    RangeModule() {}

    void addRange(int left, int right)
    {
        auto x = find(left, right);
        m[x.first] = x.second;
    }

    bool queryRange(int left, int right)
    {
        auto it = m.upper_bound(left);
        return it != m.begin() && (--it)->second >= right;
    }

    void removeRange(int left, int right)
    {
        auto x = find(left, right);
        if (left > x.first) m[x.first] = left;
        if (x.second > right) m[right] = x.second;
    }
};


// Source https://leetcode.com/problems/1-bit-and-2-bit-characters/

We have two special characters:

The first character can be represented by one bit 0.
The second character can be represented by two bits (10 or 11).
Given a binary array bits that ends with 0, return true if the last character must be a one-bit character.

 

Example 1:

Input: bits = [1,0,0]
Output: true
Explanation: The only way to decode it is two-bit character and one-bit character.
So the last character is one-bit character.
Example 2:

Input: bits = [1,1,1,0]
Output: false
Explanation: The only way to decode it is two-bit character and two-bit character.
So the last character is not one-bit character.
 

Constraints:

1 <= bits.length <= 1000
bits[i] is either 0 or 1.

class Solution
{
public:
    bool isOneBitCharacter(vector<int> &bits)
    {
        int n = bits.size(), i = 0;
        while (i < n - 1)
        {
            if (bits[i] == 0) ++i;
            else i += 2;
        }
        return i == n - 1;
    }
};


// Source https://leetcode.com/problems/maximum-length-of-repeated-subarray/

Given two integer arrays nums1 and nums2, return the maximum length of a subarray that appears in both arrays.

 

Example 1:

Input: nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7]
Output: 3
Explanation: The repeated subarray with maximum length is [3,2,1].
Example 2:

Input: nums1 = [0,0,0,0,0], nums2 = [0,0,0,0,0]
Output: 5
 

Constraints:

1 <= nums1.length, nums2.length <= 1000
0 <= nums1[i], nums2[i] <= 100

class Solution
{
public:
    int findLength(vector<int> &nums1, vector<int> &nums2)
    {
        int n = nums1.size(), m = nums2.size();
        int maxLength = 0;
        vector<vector<int>> dp(n + 1, vector<int>(m + 1, 0));
        for(int i = 1; i <= n; ++i)
        {
            for(int j = 1; j <= m; ++j)
            {
                if(nums1[i - 1] == nums2[j - 1])
                {
                    dp[i][j] = 1 + dp[i - 1][j - 1];
                }
                else
                {
                    dp[i][j] = 0;
                }
                maxLength = max(maxLength, dp[i][j]);
            }
        }
        return maxLength;
    }
};


// Source https://leetcode.com/problems/find-k-th-smallest-pair-distance/

The distance of a pair of integers a and b is defined as the absolute difference between a and b.

Given an integer array nums and an integer k, return the kth smallest distance among all the pairs nums[i] and nums[j] where 0 <= i < j < nums.length.

 

Example 1:

Input: nums = [1,3,1], k = 1
Output: 0
Explanation: Here are all the pairs:
(1,3) -> 2
(1,1) -> 0
(3,1) -> 2
Then the 1st smallest distance pair is (1,1), and its distance is 0.
Example 2:

Input: nums = [1,1,1], k = 2
Output: 0
Example 3:

Input: nums = [1,6,1], k = 3
Output: 5
 

Constraints:

n == nums.length
2 <= n <= 104
0 <= nums[i] <= 106
1 <= k <= n * (n - 1) / 2

class Solution
{
public:

    int recur(vector<int> &nums, int x)
    {
        int n = nums.size();
        int left = 0, right = 0;
        int ans = 0;
        while (right < n)
        {
            while (left < right && nums[right] - nums[left] > x)
            {
                ++left;
            }
            ans += (right - left);
            ++right;
        }
        return ans;
    }

    int smallestDistancePair(vector<int> &nums, int k)
    {
        sort(nums.begin(), nums.end());
        int lo = 0, hi = nums.back() - nums.front();
        while (lo < hi)
        {
            int mid = lo + (hi - lo) / 2;
            int cnt = recur(nums, mid);
            if (cnt < k) lo = mid + 1;
            else hi = mid;
        }
        return lo;
    }
};


// Source https://leetcode.com/problems/longest-word-in-dictionary/

Given an array of strings words representing an English Dictionary, return the longest word in words that can be built one character at a time by other words in words.

If there is more than one possible answer, return the longest word with the smallest lexicographical order. If there is no answer, return the empty string.

 

Example 1:

Input: words = ["w","wo","wor","worl","world"]
Output: "world"
Explanation: The word "world" can be built one character at a time by "w", "wo", "wor", and "worl".
Example 2:

Input: words = ["a","banana","app","appl","ap","apply","apple"]
Output: "apple"
Explanation: Both "apply" and "apple" can be built from other words in the dictionary. However, "apple" is lexicographically smaller than "apply".
 

Constraints:

1 <= words.length <= 1000
1 <= words[i].length <= 30
words[i] consists of lowercase English letters.

class Solution
{
public:
    string longestWord(vector<string> &words)
    {
        sort(words.begin(), words.end(), [] (const string & lhs, const string & rhs)
        {
            return lhs.size() > rhs.size() || lhs.size() == rhs.size() && lhs < rhs;
        });
        unordered_set<string> word_set(words.begin(), words.end());
        for (const string &word : words)
        {
            string temp = word;
            while (word_set.find(temp) != word_set.end())
            {
                word_set.erase(temp);
                temp.pop_back();
            }
            if (temp.empty()) return word;
        }
        return "";
    }
};


// Source https://leetcode.com/problems/accounts-merge/

Given a list of accounts where each element accounts[i] is a list of strings, where the first element accounts[i][0] is a name, 
and the rest of the elements are emails representing emails of the account.

Now, we would like to merge these accounts. Two accounts definitely belong to the same person if there is some common email to both accounts. 
Note that even if two accounts have the same name, they may belong to different people as people could have the same name. 
A person can have any number of accounts initially, but all of their accounts definitely have the same name.

After merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails in sorted order. 
The accounts themselves can be returned in any order.

 

Example 1:

Input: accounts = [["John","johnsmith@mail.com","john_newyork@mail.com"],["John","johnsmith@mail.com","john00@mail.com"],["Mary","mary@mail.com"],["John","johnnybravo@mail.com"]]
Output: [["John","john00@mail.com","john_newyork@mail.com","johnsmith@mail.com"],["Mary","mary@mail.com"],["John","johnnybravo@mail.com"]]
Explanation:
The first and second John's are the same person as they have the common email "johnsmith@mail.com".
The third John and Mary are different people as none of their email addresses are used by other accounts.
We could return these lists in any order, for example the answer [['Mary', 'mary@mail.com'], ['John', 'johnnybravo@mail.com'], 
['John', 'john00@mail.com', 'john_newyork@mail.com', 'johnsmith@mail.com']] would still be accepted.
Example 2:

Input: accounts = [["Gabe","Gabe0@m.co","Gabe3@m.co","Gabe1@m.co"],["Kevin","Kevin3@m.co","Kevin5@m.co","Kevin0@m.co"],["Ethan","Ethan5@m.co","Ethan4@m.co","Ethan0@m.co"],["Hanzo","Hanzo3@m.co","Hanzo1@m.co","Hanzo0@m.co"],["Fern","Fern5@m.co","Fern1@m.co","Fern0@m.co"]]
Output: [["Ethan","Ethan0@m.co","Ethan4@m.co","Ethan5@m.co"],["Gabe","Gabe0@m.co","Gabe1@m.co","Gabe3@m.co"],["Hanzo","Hanzo0@m.co","Hanzo1@m.co","Hanzo3@m.co"],["Kevin","Kevin0@m.co","Kevin3@m.co","Kevin5@m.co"],["Fern","Fern0@m.co","Fern1@m.co","Fern5@m.co"]]
 

Constraints:

1 <= accounts.length <= 1000
2 <= accounts[i].length <= 10
1 <= accounts[i][j] <= 30
accounts[i][0] consists of English letters.
accounts[i][j] (for j > 0) is a valid email.

class UnionFind
{
public:
    vector<int> ancestors;
    vector<int> sizes;

    UnionFind(int n)
    {
        ancestors = vector<int>(n, -1);
        sizes = vector<int>(n, 1);
        for(int i = 0; i < n; ++i) ancestors[i] = i;
    }
    int QuickFind(int node)
    {
        if(ancestors[node] == node) return node;
        return ancestors[node] = QuickFind(ancestors[node]);
    }
    bool QuickUnion(int node1, int node2)
    {
        int root1 = QuickFind(node1), root2 = QuickFind(node2);
        if (root1 == root2) return false;
        if (sizes[root1] < sizes[root2])
        {
            ancestors[root1] = root2;
            sizes[root2] += sizes[root1];
        }
        else
        {
            ancestors[root2] = root1;
            sizes[root1] += sizes[root2];
        }
        return true;
    }
};

class Solution
{
public:

    vector<vector<string>> accountsMerge(vector<vector<string>> &accounts)
    {
        unordered_map<string, int> emailToParent;
        UnionFind dsu(1001);
        for(int i = 0; i < accounts.size(); i++)
        {
            for(int j = 1; j < accounts[i].size(); j++)
            {
                if(emailToParent.find(accounts[i][j]) != emailToParent.end())
                {
                    dsu.QuickUnion(i, emailToParent[accounts[i][j]]);
                }
                else
                {
                    emailToParent[accounts[i][j]] = i;
                }
            }
        }

        unordered_map<int, vector<string>> normalisedMmap;
        for(auto &it : emailToParent)
        {
            int uniq_id = dsu.QuickFind(it.second);
            normalisedMmap[uniq_id].push_back(it.first);
        }

        vector<vector<string>> ans;
        for(auto &it : normalisedMmap)
        {
            vector<string> email = it.second;
            sort(email.begin(), email.end());
            email.insert(email.begin(), accounts[it.first][0]);
            ans.push_back(email);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/remove-comments/

Given a C++ program, remove comments from it. The program source is an array of strings source where source[i] is the ith line of the source code. 
This represents the result of splitting the original source code string by the newline character '\n'.

In C++, there are two types of comments, line comments, and block comments.

The string "//" denotes a line comment, which represents that it and the rest of the characters to the right of it in the same line should be ignored.
The string "/*" denotes a block comment, which represents that all characters until the next (non-overlapping) occurrence of "*/" should be ignored. 
(Here, occurrences happen in reading order: line by line from left to right.) To be clear, the string "/*/" does not yet end the block comment, as the ending would be overlapping the beginning.
The first effective comment takes precedence over others.

For example, if the string "//" occurs in a block comment, it is ignored.
Similarly, if the string "/*" occurs in a line or block comment, it is also ignored.
If a certain line of code is empty after removing comments, you must not output that line: each string in the answer list will be non-empty.

There will be no control characters, single quote, or double quote characters.

For example, source = "string s = "/* Not a comment. */";" will not be a test case.
Also, nothing else such as defines or macros will interfere with the comments.

It is guaranteed that every open block comment will eventually be closed, so "/*" outside of a line or block comment always starts a new comment.

Finally, implicit newline characters can be deleted by block comments. Please see the examples below for details.

After removing the comments from the source code, return the source code in the same format.

 

Example 1:

Input: source = ["/*Test program */", "int main()", "{ ", "  // variable declaration ", "int a, b, c;", "/* This is a test", "   multiline  ", "   comment for ", "   testing */", "a = b + c;", "}"]
Output: ["int main()","{ ","  ","int a, b, c;","a = b + c;","}"]
Explanation: The line by line code is visualized as below:
/*Test program */
int main()
{ 
  // variable declaration 
int a, b, c;
/* This is a test
   multiline  
   comment for 
   testing */
a = b + c;
}
The string /* denotes a block comment, including line 1 and lines 6-9. The string // denotes line 4 as comments.
The line by line output code is visualized as below:
int main()
{ 
  
int a, b, c;
a = b + c;
}
Example 2:

Input: source = ["a/*comment", "line", "more_comment*/b"]
Output: ["ab"]
Explanation: The original source string is "a/*comment\nline\nmore_comment*/b", where we have bolded the newline characters.  After deletion, the implicit newline characters are deleted, leaving the string "ab", which when delimited by newline characters becomes ["ab"].
 

Constraints:

1 <= source.length <= 100
0 <= source[i].length <= 80
source[i] consists of printable ASCII characters.
Every open block comment is eventually closed.
There are no single-quote or double-quote in the input.

class Solution
{
public:
    vector<string> removeComments(vector<string> &source)
    {
        vector<string> res;
        bool blocked = false;
        string out = "";
        for (string &line : source)
        {
            for (int i = 0; i < line.size(); ++i)
            {
                if (!blocked)
                {
                    if (i == line.size() - 1) out += line[i];
                    else
                    {
                        string t = line.substr(i, 2);
                        if (t == "/*") blocked = true, ++i;
                        else if (t == "//") break;
                        else out += line[i];
                    }
                }
                else
                {
                    if (i < line.size() - 1)
                    {
                        string t = line.substr(i, 2);
                        if (t == "*/") blocked = false, ++i;
                    }
                }
            }
            if (!out.empty() && !blocked)
            {
                res.push_back(out);
                out = "";
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/find-pivot-index/

Given an array of integers nums, calculate the pivot index of this array.

The pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right.

If the index is on the left edge of the array, then the left sum is 0 because there are no elements to the left. This also applies to the right edge of the array.

Return the leftmost pivot index. If no such index exists, return -1.

 

Example 1:

Input: nums = [1,7,3,6,5,6]
Output: 3
Explanation:
The pivot index is 3.
Left sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11
Right sum = nums[4] + nums[5] = 5 + 6 = 11
Example 2:

Input: nums = [1,2,3]
Output: -1
Explanation:
There is no index that satisfies the conditions in the problem statement.
Example 3:

Input: nums = [2,1,-1]
Output: 0
Explanation:
The pivot index is 0.
Left sum = 0 (no elements to the left of index 0)
Right sum = nums[1] + nums[2] = 1 + -1 = 0
 

Constraints:

1 <= nums.length <= 104
-1000 <= nums[i] <= 1000

class Solution
{
public:
    int pivotIndex(vector<int> &nums)
    {
        int sum = accumulate(nums.begin(), nums.end(), 0);
        int curSum = 0, n = nums.size();
        for (int i = 0; i < n; ++i)
        {
            if (sum - nums[i] == 2 * curSum) return i;
            curSum += nums[i];
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/split-linked-list-in-parts/

Given the head of a singly linked list and an integer k, split the linked list into k consecutive linked list parts.

The length of each part should be as equal as possible: no two parts should have a size differing by more than one. This may lead to some parts being null.

The parts should be in the order of occurrence in the input list, and parts occurring earlier should always have a size greater than or equal to parts occurring later.

Return an array of the k parts.

 

Example 1:


Input: head = [1,2,3], k = 5
Output: [[1],[2],[3],[],[]]
Explanation:
The first element output[0] has output[0].val = 1, output[0].next = null.
The last element output[4] is null, but its string representation as a ListNode is [].
Example 2:


Input: head = [1,2,3,4,5,6,7,8,9,10], k = 3
Output: [[1,2,3,4],[5,6,7],[8,9,10]]
Explanation:
The input has been split into consecutive parts with size difference at most 1, and earlier parts are a larger size than the later parts.
 

Constraints:

The number of nodes in the list is in the range [0, 1000].
0 <= Node.val <= 1000
1 <= k <= 50

class Solution
{
public:
    vector<ListNode *> splitListToParts(ListNode *root, int k)
    {
        vector<ListNode *> res(k, nullptr);
        int len = 0;
        for (ListNode *t = root; t; t = t->next) ++len;
        int avg = len / k, ext = len % k;
        for (int i = 0; i < k && root; ++i)
        {
            res[i] = root;
            for (int j = 1; j < avg + (i < ext); ++j)
            {
                root = root->next;
            }
            ListNode *t = root->next;
            root->next = NULL;
            root = t;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/number-of-atoms/

Given a string formula representing a chemical formula, return the count of each atom.

The atomic element always starts with an uppercase character, then zero or more lowercase letters, representing the name.

One or more digits representing that element's count may follow if the count is greater than 1. If the count is 1, no digits will follow.

For example, "H2O" and "H2O2" are possible, but "H1O2" is impossible.
Two formulas are concatenated together to produce another formula.

For example, "H2O2He3Mg4" is also a formula.
A formula placed in parentheses, and a count (optionally added) is also a formula.

For example, "(H2O2)" and "(H2O2)3" are formulas.
Return the count of all elements as a string in the following form: the first name (in sorted order), followed by its count (if that count is more than 1), 
followed by the second name (in sorted order), followed by its count (if that count is more than 1), and so on.

The test cases are generated so that all the values in the output fit in a 32-bit integer.

 

Example 1:

Input: formula = "H2O"
Output: "H2O"
Explanation: The count of elements are {'H': 2, 'O': 1}.
Example 2:

Input: formula = "Mg(OH)2"
Output: "H2MgO2"
Explanation: The count of elements are {'H': 2, 'Mg': 1, 'O': 2}.
Example 3:

Input: formula = "K4(ON(SO3)2)2"
Output: "K4N2O14S4"
Explanation: The count of elements are {'K': 4, 'N': 2, 'O': 14, 'S': 4}.
 

Constraints:

1 <= formula.length <= 1000
formula consists of English letters, digits, '(', and ')'.
formula is always valid.

class Solution
{
public:
    string countOfAtoms(string formula)
    {
        string res = "";
        int pos = 0;
        map<string, int> m = parse(formula, pos);
        for (const auto &a : m)
        {
            res += a.first + (a.second == 1 ? "" : to_string(a.second));
        }
        return res;
    }
    map<string, int> parse(string &str, int &pos)
    {
        map<string, int> res;
        while (pos < str.size())
        {
            if (str[pos] == '(')
            {
                ++pos;
                for (const auto &a : parse(str, pos)) res[a.first] += a.second;
            }
            else if (str[pos] == ')')
            {
                ++pos;
                int i = pos;
                while (pos < str.size() && isdigit(str[pos])) ++pos;
                string multipleStr = str.substr(i, pos - i);
                int multiple = multipleStr.empty() ? 1 : stoi(multipleStr);
                for (const auto &a : res) res[a.first] *= multiple;
                return res;
            }
            else
            {
                int i = pos;
                ++pos;
                while (pos < str.size() && islower(str[pos])) ++pos;
                string elem = str.substr(i, pos - i);
                i = pos;
                while (pos < str.size() && isdigit(str[pos])) ++pos;
                string cnt = str.substr(i, pos - i);
                res[elem] += cnt.empty() ? 1 : stoi(cnt);
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/self-dividing-numbers/

A self-dividing number is a number that is divisible by every digit it contains.

For example, 128 is a self-dividing number because 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0.
A self-dividing number is not allowed to contain the digit zero.

Given two integers left and right, return a list of all the self-dividing numbers in the range [left, right].

 

Example 1:

Input: left = 1, right = 22
Output: [1,2,3,4,5,6,7,8,9,11,12,15,22]
Example 2:

Input: left = 47, right = 85
Output: [48,55,66,77]
 

Constraints:

1 <= left <= right <= 104

class Solution
{
public:
    vector<int> selfDividingNumbers(int left, int right)
    {
        vector<int> ans;
        for(int i = left; i <= right; i++)
        {
            if(selfDividing(i))
            {
                ans.push_back(i);
            }
        }
        return ans;
    }
    bool selfDividing(int n)
    {
        int temp = n;
        while(n > 0)
        {
            int digit = n % 10;
            if(digit == 0)
            {
                return false;
            }
            if(temp % digit != 0)
            {
                return false;
            }
            n = n / 10;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/my-calendar-i/

You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a double booking.

A double booking happens when two events have some non-empty intersection (i.e., some moment is common to both events.).

The event can be represented as a pair of integers start and end that represents a booking on the half-open interval [start, end), the range of real numbers x such that start <= x < end.

Implement the MyCalendar class:

MyCalendar() Initializes the calendar object.
boolean book(int start, int end) Returns true if the event can be added to the calendar successfully without causing a double booking. Otherwise, return false and do not add the event to the calendar.
 

Example 1:

Input
["MyCalendar", "book", "book", "book"]
[[], [10, 20], [15, 25], [20, 30]]
Output
[null, true, false, true]

Explanation
MyCalendar myCalendar = new MyCalendar();
myCalendar.book(10, 20); // return True
myCalendar.book(15, 25); // return False, It can not be booked because time 15 is already booked by another event.
myCalendar.book(20, 30); // return True, The event can be booked, as the first event takes every time less than 20, but not including 20.
 

Constraints:

0 <= start < end <= 109
At most 1000 calls will be made to book.

class MyCalendar
{
public:
    MyCalendar() {}

    bool book(int start, int end)
    {
        for (auto a : cal)
        {
            if (a.first <= start && a.second > start) return false;
            if (a.first >= start && a.first < end) return false;
        }
        cal.push_back({start, end});
        return true;
    }

private:
    vector<pair<int, int>> cal;
};


// Source https://leetcode.com/problems/count-different-palindromic-subsequences/

Given a string s, return the number of different non-empty palindromic subsequences in s. Since the answer may be very large, return it modulo 109 + 7.

A subsequence of a string is obtained by deleting zero or more characters from the string.

A sequence is palindromic if it is equal to the sequence reversed.

Two sequences a1, a2, ... and b1, b2, ... are different if there is some i for which ai != bi.

 

Example 1:

Input: s = "bccb"
Output: 6
Explanation: The 6 different non-empty palindromic subsequences are 'b', 'c', 'bb', 'cc', 'bcb', 'bccb'.
Note that 'bcb' is counted only once, even though it occurs twice.
Example 2:

Input: s = "abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba"
Output: 104860361
Explanation: There are 3104860382 different non-empty palindromic subsequences, which is 104860361 modulo 109 + 7.
 

Constraints:

1 <= s.length <= 1000
s[i] is either 'a', 'b', 'c', or 'd'.

dp[i][j] 表示子字符串 [i, j] 中的不同回文子序列的个数，初始化 dp[i][i] 为1，因为任意一个单个字符就是一个回文子序列，其余均为0。
当 S[i] 不等于 S[j] 的时候，dp[i][j] = dp[i][j - 1] + dp[i + 1][j] - dp[i + 1][j - 1]
当 S[i] 等于 S[j] 的时候，情况就比较复杂了，需要分情况讨论，因为不知道中间还有几个和 S[i] 相等的值
举个简单的例子，比如 "aba" 和 "aaa"，当 i = 0, j = 2 的时候，两个字符串均有 S[i] == S[j]，此时二者都新增两个子序列 "a" 和 "aa"，
但是 "aba" 中间的 "b" 就可以加到结果 res 中，而 "aaa" 中的 "a" 就不能加了，因为和外层的单独 "a" 重复了。
我们的目标就要找到中间重复的 "a"。所以让 left = i + 1, right = j - 1，然后对 left 进行 while 循环，如果 left <= right, 且 S[left] != S[i] 的时候，left 向右移动一个；
同理，对 right 进行 while 循环，如果 left <= right, 且 S[right] != S[i] 的时候，left 向左移动一个。这样最终 left 和 right 值就有三种情况：

当 left > righ 时，说明中间没有和 S[i] 相同的字母了，就是 "aba" 这种情况，那么就有 dp[i][j] = dp[i + 1][j - 1] * 2 + 2，
其中 dp[i + 1][j - 1] 是中间部分的回文子序列个数，为啥要乘2呢，因为中间的所有子序列可以单独存在，也可以再外面包裹上字母a，所以是成对出现的，要乘2。加2的原因是外层的 "a" 和 "aa" 也要统计上。

当 left = right 时，说明中间只有一个和 S[i] 相同的字母，就是 "aaa" 这种情况，那么有 dp[i][j] = dp[i + 1][j - 1] * 2 + 1，
其中乘2的部分跟上面的原因相同，加1的原因是单个字母 "a" 的情况已经在中间部分算过了，外层就只能再加上个 "aa" 了。

当 left < right 时，说明中间至少有两个和 S[i] 相同的字母，就是 "aabaa" 这种情况，那么有 dp[i][j] = dp[i + 1][j - 1] * 2 - dp[left + 1][right - 1]，
其中乘2的部分跟上面的原因相同，要减去 left 和 right 中间部分的子序列个数的原因是其被计算了两遍，要将多余的减掉。
比如说对于  "aabaa"，当检测到 S[0] == S[4] 时，是要根据中间的 "aba" 的回文序列个数来计算，共有四种，分别是 "a", "b", "aa", "aba"，
将其分别在左右两边加上a的话，可以得到 "aaa", "aba", "aaaa", "aabaa"，我们发现 "aba" 出现了两次了，这就是要将 dp[2][2] (left = 1, right = 3) 减去的原因。

class Solution
{
public:
    int countPalindromicSubsequences(string S)
    {
        int n = S.size(), M = 1e9 + 7;
        vector<vector<long>> dp(n, vector<long>(n, 0));
        for (int i = 0; i < n; ++i) dp[i][i] = 1;
        for (int len = 2; len <= n; ++len)
        {
            for (int i = 0; i <= n - len; ++i)
            {
                int j = i + len - 1;
                if (S[i] == S[j])
                {
                    int left = i + 1, right = j - 1;
                    while (left <= right && S[left] != S[i]) ++left;
                    while (left <= right && S[right] != S[i]) --right;
                    if (left > right)
                    {
                        dp[i][j] = dp[i + 1][j - 1] * 2 + 2;
                    }
                    else if (left == right)
                    {
                        dp[i][j] = dp[i + 1][j - 1] * 2 + 1;
                    }
                    else
                    {
                        dp[i][j] = dp[i + 1][j - 1] * 2 - dp[left + 1][right - 1];
                    }
                }
                else
                {
                    dp[i][j] = dp[i][j - 1] + dp[i + 1][j] - dp[i + 1][j - 1];
                }
                dp[i][j] = (dp[i][j] + M) % M;
            }
        }
        return dp[0][n - 1];
    }
};


// Source https://leetcode.com/problems/my-calendar-ii/

You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a triple booking.

A triple booking happens when three events have some non-empty intersection (i.e., some moment is common to all the three events.).

The event can be represented as a pair of integers start and end that represents a booking on the half-open interval [start, end), the range of real numbers x such that start <= x < end.

Implement the MyCalendarTwo class:

MyCalendarTwo() Initializes the calendar object.
boolean book(int start, int end) Returns true if the event can be added to the calendar successfully without causing a triple booking. 
Otherwise, return false and do not add the event to the calendar.
 

Example 1:

Input
["MyCalendarTwo", "book", "book", "book", "book", "book", "book"]
[[], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55]]
Output
[null, true, true, true, false, true, true]

Explanation
MyCalendarTwo myCalendarTwo = new MyCalendarTwo();
myCalendarTwo.book(10, 20); // return True, The event can be booked. 
myCalendarTwo.book(50, 60); // return True, The event can be booked. 
myCalendarTwo.book(10, 40); // return True, The event can be double booked. 
myCalendarTwo.book(5, 15);  // return False, The event cannot be booked, because it would result in a triple booking.
myCalendarTwo.book(5, 10); // return True, The event can be booked, as it does not use time 10 which is already double booked.
myCalendarTwo.book(25, 55); // return True, The event can be booked, as the time in [25, 40) will be double booked with the third event, the time [40, 50) will be single booked, and the time [50, 55) will be double booked with the second event.
 

Constraints:

0 <= start < end <= 109
At most 1000 calls will be made to book.

class MyCalendarTwo
{
public:
    MyCalendarTwo() {}

    bool book(int start, int end)
    {
        ++freq[start];
        --freq[end];
        int cnt = 0;
        for (auto f : freq)
        {
            cnt += f.second;
            if (cnt == 3)
            {
                --freq[start];
                ++freq[end];
                return false;
            }
        }
        return true;
    }

private:
    map<int, int> freq;
};


// Source https://leetcode.com/problems/my-calendar-iii/

A k-booking happens when k events have some non-empty intersection (i.e., there is some time that is common to all k events.)

You are given some events [start, end), after each given event, return an integer k representing the maximum k-booking between all the previous events.

Implement the MyCalendarThree class:

MyCalendarThree() Initializes the object.
int book(int start, int end) Returns an integer k representing the largest integer such that there exists a k-booking in the calendar.
 

Example 1:

Input
["MyCalendarThree", "book", "book", "book", "book", "book", "book"]
[[], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55]]
Output
[null, 1, 1, 2, 3, 3, 3]

Explanation
MyCalendarThree myCalendarThree = new MyCalendarThree();
myCalendarThree.book(10, 20); // return 1, The first event can be booked and is disjoint, so the maximum k-booking is a 1-booking.
myCalendarThree.book(50, 60); // return 1, The second event can be booked and is disjoint, so the maximum k-booking is a 1-booking.
myCalendarThree.book(10, 40); // return 2, The third event [10, 40) intersects the first event, and the maximum k-booking is a 2-booking.
myCalendarThree.book(5, 15); // return 3, The remaining events cause the maximum K-booking to be only a 3-booking.
myCalendarThree.book(5, 10); // return 3
myCalendarThree.book(25, 55); // return 3
 

Constraints:

0 <= start < end <= 109
At most 400 calls will be made to book.

class MyCalendarThree
{
public:
    MyCalendarThree() {}

    int book(int start, int end)
    {
        ++freq[start];
        --freq[end];
        int cnt = 0, mx = 0;
        for (auto f : freq)
        {
            cnt += f.second;
            mx = max(mx, cnt);
        }
        return mx;
    }

private:
    map<int, int> freq;
};


// Source https://leetcode.com/problems/flood-fill/

An image is represented by an m x n integer grid image where image[i][j] represents the pixel value of the image.

You are also given three integers sr, sc, and newColor. You should perform a flood fill on the image starting from the pixel image[sr][sc].

To perform a flood fill, consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, 
plus any pixels connected 4-directionally to those pixels (also with the same color), and so on. Replace the color of all of the aforementioned pixels with newColor.

Return the modified image after performing the flood fill.

 

Example 1:


Input: image = [[1,1,1],[1,1,0],[1,0,1]], sr = 1, sc = 1, newColor = 2
Output: [[2,2,2],[2,2,0],[2,0,1]]
Explanation: From the center of the image with position (sr, sc) = (1, 1) (i.e., the red pixel), all pixels connected by a path of the same color as the starting pixel (i.e., the blue pixels) are colored with the new color.
Note the bottom corner is not colored 2, because it is not 4-directionally connected to the starting pixel.
Example 2:

Input: image = [[0,0,0],[0,0,0]], sr = 0, sc = 0, newColor = 2
Output: [[2,2,2],[2,2,2]]
 

Constraints:

m == image.length
n == image[i].length
1 <= m, n <= 50
0 <= image[i][j], newColor < 216
0 <= sr < m
0 <= sc < n

class Solution
{
public:
    int m, n;
    vector<vector<int>> floodFill(vector<vector<int>> &image, int sr, int sc, int newColor)
    {
        m = image.size();
        n = image[0].size();
        if (image[sr][sc] == newColor) return image;
        helper(image, sr, sc, image[sr][sc], newColor);
        return image;
    }
    void helper(vector<vector<int>> &image, int i, int j, int color, int newColor)
    {
        if (i < 0 || i >= m || j < 0 || j >= n || image[i][j] != color) return;
        image[i][j] = newColor;
        helper(image, i + 1, j, color, newColor);
        helper(image, i - 1, j, color, newColor);
        helper(image, i, j + 1, color, newColor);
        helper(image, i, j - 1, color, newColor);
    }
};


// Source https://leetcode.com/problems/asteroid-collision/

We are given an array asteroids of integers representing asteroids in a row.

For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.

Find out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. 
Two asteroids moving in the same direction will never meet.

 

Example 1:

Input: asteroids = [5,10,-5]
Output: [5,10]
Explanation: The 10 and -5 collide resulting in 10. The 5 and 10 never collide.
Example 2:

Input: asteroids = [8,-8]
Output: []
Explanation: The 8 and -8 collide exploding each other.
Example 3:

Input: asteroids = [10,2,-5]
Output: [10]
Explanation: The 2 and -5 collide resulting in -5. The 10 and -5 collide resulting in 10.
 

Constraints:

2 <= asteroids.length <= 104
-1000 <= asteroids[i] <= 1000
asteroids[i] != 0

class Solution
{
public:
    vector<int> asteroidCollision(vector<int> &asteroids)
    {
        int n = asteroids.size();
        vector<int> res;
        res.push_back(asteroids[0]);
        for (int i = 1; i < n; ++i)
        {
            if (res.empty() || (res.back() < 0 && asteroids[i] < 0) 
                                  || (res.back() > 0 && asteroids[i] > 0)
                                  || (res.back() < 0 && asteroids[i] > 0) )
            {
                res.push_back(asteroids[i]);
                continue;
            }
            int temp = abs(asteroids[i]);
            if (res.back() <= temp)
            {
                if (res.back() < temp) --i;
                res.pop_back();
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/parse-lisp-expression/

You are given a string expression representing a Lisp-like expression to return the integer value of.

The syntax for these expressions is given as follows.

An expression is either an integer, let expression, add expression, mult expression, or an assigned variable. Expressions always evaluate to a single integer.
(An integer could be positive or negative.)
A let expression takes the form "(let v1 e1 v2 e2 ... vn en expr)", where let is always the string "let", then there are one or more pairs of alternating variables and expressions, 
meaning that the first variable v1 is assigned the value of the expression e1, the second variable v2 is assigned the value of the expression e2, and so on sequentially; 
and then the value of this let expression is the value of the expression expr.
An add expression takes the form "(add e1 e2)" where add is always the string "add", there are always two expressions e1, e2 and the result is the addition of the evaluation of e1 and the evaluation of e2.
A mult expression takes the form "(mult e1 e2)" where mult is always the string "mult", there are always two expressions e1, e2 and the result is the multiplication of the evaluation of e1 and the evaluation of e2.
For this question, we will use a smaller subset of variable names. A variable starts with a lowercase letter, then zero or more lowercase letters or digits. 
Additionally, for your convenience, the names "add", "let", and "mult" are protected and will never be used as variable names.
Finally, there is the concept of scope. When an expression of a variable name is evaluated, within the context of that evaluation, 
the innermost scope (in terms of parentheses) is checked first for the value of that variable, and then outer scopes are checked sequentially. 
It is guaranteed that every expression is legal. Please see the examples for more details on the scope.
 

Example 1:

Input: expression = "(let x 2 (mult x (let x 3 y 4 (add x y))))"
Output: 14
Explanation: In the expression (add x y), when checking for the value of the variable x,
we check from the innermost scope to the outermost in the context of the variable we are trying to evaluate.
Since x = 3 is found first, the value of x is 3.
Example 2:

Input: expression = "(let x 3 x 2 x)"
Output: 2
Explanation: Assignment in let statements is processed sequentially.
Example 3:

Input: expression = "(let x 1 y 2 x (add x y) (add x y))"
Output: 5
Explanation: The first (add x y) evaluates as 3, and is assigned to x.
The second (add x y) evaluates as 3+2 = 5.
 

Constraints:

1 <= expression.length <= 2000
There are no leading or trailing spaces in expression.
All tokens are separated by a single space in expression.
The answer and all intermediate calculations of that answer are guaranteed to fit in a 32-bit integer.
The expression is guaranteed to be legal and evaluate to an integer.

class Solution
{
public:
    bool isNumber(string &s)
    {
        if (s == "" || s == " ") return false;
        if ((s[0] < '0' || s[0] > '9') && s[0] != '-') return false;
        int cur = 0, n = s.length();
        if (s[0] == '-') cur++;
        while (cur < n)
        {
            if (s[cur] < '0' || s[0] > '9') return false;
            cur++;
        }
        return true;
    }

    // collect everything within a () as 1 token
    vector<string> tokenize(string &exp)
    {
        if (exp == "" || exp == " ") return vector<string>(); // empty string
        if (isNumber(exp)) return vector<string>{exp}; // digits
        int startPos = 0, endPos = exp.length();
        if (exp[0] == '(' && exp[exp.length() - 1] == ')')
        {
            startPos = 1;
            endPos = exp.length() - 1;
        }
        int unfinishedParen = 0;
        string builder;
        vector<string> tokens;
        for (int currPos = startPos; currPos < endPos; ++currPos)
        {
            auto c = exp[currPos];
            if (c == '(') unfinishedParen++;
            else if (c == ')') unfinishedParen--;

            if (unfinishedParen == 0 && c == ' ')
            {
                tokens.push_back(builder);
                builder = "";
            }
            else builder += c;
        }
        if (builder.length() > 0) tokens.push_back(builder);
        return tokens;
    }

    int eval(string &exp, unordered_map<string, int> &parentScope)
    {
        if (exp == "" || exp == " ") return 0;
        vector<string> tokens = tokenize(exp);
        int n = tokens.size();
        if (n == 0) return 0;
        else if (n == 1)   // this is a digit or var name
        {
            if (isNumber(tokens[0])) return stoi(tokens[0]);
            else return parentScope[tokens[0]];
        }
        else
        {
            if (tokens[0] == "add")
            {
                return eval(tokens[1], parentScope) + eval(tokens[2], parentScope);
            }
            else if (tokens[0] == "mult")
            {
                return eval(tokens[1], parentScope) * eval(tokens[2], parentScope);
            }
            else if (tokens[0] == "let")
            {
                unordered_map<string, int> childScope(parentScope);
                for (int i = 1; i < n - 2; i += 2)
                {
                    string var = tokens[i];
                    int varExp = eval(tokens[i + 1], childScope);
                    childScope[var] = varExp;
                }
                return eval(tokens[n - 1], childScope);
            }
            else
            {
                throw "unknown operation\n";
            }
        }
    }

    int evaluate(string expression)
    {
        unordered_map<string, int> scope;
        return eval(expression, scope);
    }
};


// Source https://leetcode.com/problems/monotone-increasing-digits/

An integer has monotone increasing digits if and only if each pair of adjacent digits x and y satisfy x <= y.

Given an integer n, return the largest number that is less than or equal to n with monotone increasing digits.

 

Example 1:

Input: n = 10
Output: 9
Example 2:

Input: n = 1234
Output: 1234
Example 3:

Input: n = 332
Output: 299
 

Constraints:

0 <= n <= 109

class Solution
{
public:
    int monotoneIncreasingDigits(int N)
    {
        string str = to_string(N);
        int n = str.size(), j = n;
        for (int i = n - 1; i > 0; --i)
        {
            if (str[i] >= str[i - 1]) continue;
            --str[i - 1];
            j = i;
        }
        for (int i = j; i < n; ++i)
        {
            str[i] = '9';
        }
        return stoi(str);
    }
};


// Source https://leetcode.com/problems/daily-temperatures/

Given an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature. 
If there is no future day for which this is possible, keep answer[i] == 0 instead.

 

Example 1:

Input: temperatures = [73,74,75,71,69,72,76,73]
Output: [1,1,4,2,1,1,0,0]
Example 2:

Input: temperatures = [30,40,50,60]
Output: [1,1,1,0]
Example 3:

Input: temperatures = [30,60,90]
Output: [1,1,0]
 

Constraints:

1 <= temperatures.length <= 105
30 <= temperatures[i] <= 100

class Solution
{
public:
    vector<int> dailyTemperatures(vector<int> &temperatures)
    {
        int n = temperatures.size();
        vector<int> res(n, 0);
        stack<int> st;
        for (int i = 0; i < temperatures.size(); ++i)
        {
            while (!st.empty() && temperatures[i] > temperatures[st.top()])
            {
                auto t = st.top();
                st.pop();
                res[t] = i - t;
            }
            st.push(i);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/delete-and-earn/

You are given an integer array nums. You want to maximize the number of points you get by performing the following operation any number of times:

Pick any nums[i] and delete it to earn nums[i] points. Afterwards, you must delete every element equal to nums[i] - 1 and every element equal to nums[i] + 1.
Return the maximum number of points you can earn by applying the above operation some number of times.

 

Example 1:

Input: nums = [3,4,2]
Output: 6
Explanation: You can perform the following operations:
- Delete 4 to earn 4 points. Consequently, 3 is also deleted. nums = [2].
- Delete 2 to earn 2 points. nums = [].
You earn a total of 6 points.
Example 2:

Input: nums = [2,2,3,3,3,4]
Output: 9
Explanation: You can perform the following operations:
- Delete a 3 to earn 3 points. All 2's and 4's are also deleted. nums = [3,3].
- Delete a 3 again to earn 3 points. nums = [3].
- Delete a 3 once more to earn 3 points. nums = [].
You earn a total of 9 points.
 

Constraints:

1 <= nums.length <= 2 * 104
1 <= nums[i] <= 104

class Solution
{
public:
    int dp[10005];
    int total[10005];

    int recur(int n)
    {
        if(n == 0)
            return total[n];
        if(n < 0)
            return 0;
        if(dp[n] != -1)
            return dp[n];
        int pick = total[n] + recur(n - 2);
        int notpick = 0 + recur(n - 1);
        return dp[n] = max(pick, notpick);
    }
    int deleteAndEarn(vector<int> &nums)
    {
        memset(dp, -1, sizeof(dp));
        memset(total, 0, sizeof(total));
        for(auto val : nums) total[val] += val;
        return recur(10000);
    }
};


// Source https://leetcode.com/problems/cherry-pickup/

You are given an n x n grid representing a field of cherries, each cell is one of three possible integers.

0 means the cell is empty, so you can pass through,
1 means the cell contains a cherry that you can pick up and pass through, or
-1 means the cell contains a thorn that blocks your way.
Return the maximum number of cherries you can collect by following the rules below:

Starting at the position (0, 0) and reaching (n - 1, n - 1) by moving right or down through valid path cells (cells with value 0 or 1).
After reaching (n - 1, n - 1), returning to (0, 0) by moving left or up through valid path cells.
When passing through a path cell containing a cherry, you pick it up, and the cell becomes an empty cell 0.
If there is no valid path between (0, 0) and (n - 1, n - 1), then no cherries can be collected.
 

Example 1:


Input: grid = [[0,1,-1],[1,0,-1],[1,1,1]]
Output: 5
Explanation: The player started at (0, 0) and went down, down, right right to reach (2, 2).
4 cherries were picked up during this single trip, and the matrix becomes [[0,1,-1],[0,0,-1],[0,0,0]].
Then, the player went left, up, up, left to return home, picking up one more cherry.
The total number of cherries picked up is 5, and this is the maximum possible.
Example 2:

Input: grid = [[1,1,-1],[1,-1,1],[-1,1,1]]
Output: 0
 

Constraints:

n == grid.length
n == grid[i].length
1 <= n <= 50
grid[i][j] is -1, 0, or 1.
grid[0][0] != -1
grid[n - 1][n - 1] != -1

4种情况：

Case 1: (0, 0) ==> (i-1, j) ==> (i, j); (p, q) ==> (p-1, q) ==> (0, 0)
Case 2: (0, 0) ==> (i-1, j) ==> (i, j); (p, q) ==> (p, q-1) ==> (0, 0)
Case 3: (0, 0) ==> (i, j-1) ==> (i, j); (p, q) ==> (p-1, q) ==> (0, 0)
Case 4: (0, 0) ==> (i, j-1) ==> (i, j); (p, q) ==> (p, q-1) ==> (0, 0)
根据定义，我们有：

Case 1 is equivalent to T(i-1, j, p-1, q) + grid[i][j] + grid[p][q];
Case 2 is equivalent to T(i-1, j, p, q-1) + grid[i][j] + grid[p][q];
Case 3 is equivalent to T(i, j-1, p-1, q) + grid[i][j] + grid[p][q];
Case 4 is equivalent to T(i, j-1, p, q-1) + grid[i][j] + grid[p][q];

因此，我们的重现关系可以写作：

T(i, j, p, q) = grid[i][j] + grid[p][q] + max{T(i-1, j, p-1, q), T(i-1, j, p, q-1), T(i, j-1, p-1, q), T(i, j-1, p, q-1)}
为了避免重复计算，我们希望 grid[i][j] 和 grid[p][q] 不出现在T(i-1, j, p-1, q), T(i-1, j, p, q-1), T(i, j-1, p-1, q) 和 T(i, j-1, p, q-1)中的任意一个上。
显而易见的是(i, j)不会出现在(0, 0) ==> (i-1, j) 或 (0, 0) ==> (i, j-1) 的路径上，同理，(p, q) 也不会出现在 (p-1, q) ==> (0, 0) 或 (p, q-1) ==> (0, 0) 的路径上。
因此，我们需要保证(i, j) 不会出现在 (p-1, q) ==> (0, 0) 或 (p, q-1) ==> (0, 0) 的路径上，同时 (p, q)不会出现在(0, 0) ==> (i-1, j) 或 (0, 0) ==> (i, j-1) 的路径上，怎么做呢？

我们观察到(0, 0) ==> (i-1, j) 和 (0, 0) ==> (i, j-1) 的所有点都在矩形 [0, 0, i, j] 中（除了右下角点(i, j)点），所以只要 (p, q) 不在矩形 [0, 0, i, j] 中就行了，
注意(p, q) 和 (i, j) 有可能重合，这种情况特殊处理一下就行了。同理， (i, j) 也不能在矩形 [0, 0, p, q] 中，那么以下三个条件中需要满足一个：

i < p && j > q
i == p && j == q
i > p && j < q
为了满足上述条件，我们希望当 i 或 p 增加的时候，j 或 q 减小，那么我们可以有这个等式:

k = i + j = p + q，此时(i, j)和(p, q)的位置关系就像对角线 / 上的两个点，随着k变大，对角线越接近(n - 1, n - 1)
其中k为从起点开始走的步数，所以我们可以用 T(k, i, p)  来代替 T(i, j, p, q)，那么我们的重现关系式就变成了：

T(k, i, p) = grid[i][k-i] + grid[p][k-p] + max{T(k-1, i-1, p-1), T(k-1, i-1, p), T(k-1, i, p-1), T(k-1, i, p)}.
当 i == p 时，grid[i][k-i] 和 grid[p][k-p] 就相等了，此时只能加一个。我们注意到 i, j, p, q 的范围是 [0, n)， 意味着k只能在范围 [0, 2n - 1) 中， 初始化时 T(0, 0, 0) = grid[0][0]。
我们这里的重现关系T虽然是三维的，但是我们可以用二维dp数组来实现，因为第k步的值只依赖于第k-1步的情况

class Solution
{
public:
    int cherryPickup(vector<vector<int>> &grid)
    {
        int n = grid.size(), mx = 2 * n - 1;
        vector<vector<int>> dp(n, vector<int>(n, -1));
        dp[0][0] = grid[0][0];
        for (int k = 1; k < mx; ++k)
        {
            vector<vector<int>> temp(n, vector<int>(n, -1));
            for (int i = n - 1; i >= 0; --i)
            {
                for (int p = n - 1; p >= 0; --p)
                {
                    int j = k - i, q = k - p;
                    if (j < 0 || j >= n || q < 0 || q >= n || grid[i][j] < 0 || grid[p][q] < 0)
                    {
                        continue;
                    }
                    int val = -1;
                    val = max(val, dp[i][p]);
                    if (i > 0) val = max(val, dp[i - 1][p]);
                    if (p > 0) val = max(val, dp[i][p - 1]);
                    if (i > 0 && p > 0) val = max(val, dp[i - 1][p - 1]);
                    if (val >= 0) temp[i][p] = val + grid[i][j] + (i != p ? grid[p][q] : 0);
                }
            }
            swap(dp, temp);
        }
        return max(dp[n - 1][n - 1], 0);
    }
};


// Source https://leetcode.com/problems/network-delay-time/

You are given a network of n nodes, labeled from 1 to n. You are also given times, a list of travel times as directed edges times[i] = (ui, vi, wi), 
where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target.

We will send a signal from a given node k. Return the time it takes for all the n nodes to receive the signal. If it is impossible for all the n nodes to receive the signal, return -1.

 

Example 1:


Input: times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2
Output: 2
Example 2:

Input: times = [[1,2,1]], n = 2, k = 1
Output: 1
Example 3:

Input: times = [[1,2,1]], n = 2, k = 2
Output: -1
 

Constraints:

1 <= k <= n <= 100
1 <= times.length <= 6000
times[i].length == 3
1 <= ui, vi <= n
ui != vi
0 <= wi <= 100
All the pairs (ui, vi) are unique. (i.e., no multiple edges.)

class Solution
{
public:
    int networkDelayTime(vector<vector<int>> &times, int n, int k)
    {
        vector<vector<pair<int, int>>> adjList(n + 1);
        for(auto &x : times)
        {
            adjList[x[0]].push_back({x[1], x[2]});
        }

        vector<bool> visited(n + 1, false);
        vector<int> dist(n + 1, INT_MAX);
        dist[k] = 0;
        int distance, ind, newInd, additionalDistance;
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> minHeap;
        minHeap.push({0, k});
        while(!minHeap.empty())
        {
            distance = minHeap.top().first;
            ind = minHeap.top().second;
            minHeap.pop();
            if(visited[ind]) continue;
            visited[ind] = true;
            for(auto x : adjList[ind])
            {
                newInd = x.first;
                additionalDistance = x.second;
                if(dist[newInd] > distance + additionalDistance)
                {
                    dist[newInd] = distance + additionalDistance;
                    minHeap.push({dist[newInd], newInd});
                }
            }
        }

        int maxTime = 0;
        for(int i = 1; i <= n; i++)
        {
            maxTime = max(maxTime, dist[i]);
        }

        if(maxTime == INT_MAX) return -1;
        return maxTime;
    }
};


// Source https://leetcode.com/problems/find-smallest-letter-greater-than-target/

Given a characters array letters that is sorted in non-decreasing order and a character target, return the smallest character in the array that is larger than target.

Note that the letters wrap around.

For example, if target == 'z' and letters == ['a', 'b'], the answer is 'a'.
 

Example 1:

Input: letters = ["c","f","j"], target = "a"
Output: "c"
Example 2:

Input: letters = ["c","f","j"], target = "c"
Output: "f"
Example 3:

Input: letters = ["c","f","j"], target = "d"
Output: "f"
 

Constraints:

2 <= letters.length <= 104
letters[i] is a lowercase English letter.
letters is sorted in non-decreasing order.
letters contains at least two different characters.
target is a lowercase English letter.

class Solution
{
public:
    char nextGreatestLetter(vector<char> &letters, char target)
    {
        if (target >= letters.back()) return letters[0];
        auto itr = upper_bound(letters.begin(), letters.end(), target);
        return *itr;
    }
};


// Source https://leetcode.com/problems/prefix-and-suffix-search/

Design a special dictionary with some words that searchs the words in it by a prefix and a suffix.

Implement the WordFilter class:

WordFilter(string[] words) Initializes the object with the words in the dictionary.
f(string prefix, string suffix) Returns the index of the word in the dictionary, which has the prefix prefix and the suffix suffix. 
If there is more than one valid index, return the largest of them. If there is no such word in the dictionary, return -1.
 

Example 1:

Input
["WordFilter", "f"]
[[["apple"]], ["a", "e"]]
Output
[null, 0]

Explanation
WordFilter wordFilter = new WordFilter(["apple"]);
wordFilter.f("a", "e"); // return 0, because the word at index 0 has prefix = "a" and suffix = 'e".
 

Constraints:

1 <= words.length <= 15000
1 <= words[i].length <= 10
1 <= prefix.length, suffix.length <= 10
words[i], prefix and suffix consist of lower-case English letters only.
At most 15000 calls will be made to the function f.

'{'的ASCII码比'z'的ASCII码大1

class WordFilter
{
public:

    struct TrieNode
    {
        TrieNode *children[27];
        int index;

        TrieNode()
        {
            for (int i = 0; i < 27; ++i)
            {
                children[i] = NULL;
            }
            index = -1;
        }
    };

    TrieNode *root;

    void insertTrie(const string &word, int pos)
    {
        int n = word.length();
        TrieNode *obj  = root;
        for (int i = 0; i < n; ++i)
        {
            int index  = word[i] - 'a';
            if(obj->children[index] == NULL)
            {
                obj->children[index] = new TrieNode();
            }
            obj = obj->children[index];
            obj->index = pos;
        }
    }

    int searchTrie(const string &word)
    {
        int n = word.length();
        TrieNode *obj  = root;
        for (int i = 0; i < n; ++i)
        {
            int index  = word[i] - 'a';
            if(obj->children[index] == NULL) return -1;
            obj = obj->children[index];
        }
        return obj->index;
    }

    WordFilter(vector<string> &words)
    {
        int n = words.size();
        root = new TrieNode();

        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < words[i].length(); j++)
            {
                string str = words[i].substr(j) + "{" + words[i];
                insertTrie(str, i);
            }
        }
    }

    int f(string prefix, string suffix)
    {
        return searchTrie(suffix + "{" + prefix);
    }
};


// Source https://leetcode.com/problems/min-cost-climbing-stairs/

You are given an integer array cost where cost[i] is the cost of ith step on a staircase. Once you pay the cost, you can either climb one or two steps.

You can either start from the step with index 0, or the step with index 1.

Return the minimum cost to reach the top of the floor.

 

Example 1:

Input: cost = [10,15,20]
Output: 15
Explanation: You will start at index 1.
- Pay 15 and climb two steps to reach the top.
The total cost is 15.
Example 2:

Input: cost = [1,100,1,1,1,100,1,1,100,1]
Output: 6
Explanation: You will start at index 0.
- Pay 1 and climb two steps to reach index 2.
- Pay 1 and climb two steps to reach index 4.
- Pay 1 and climb two steps to reach index 6.
- Pay 1 and climb one step to reach index 7.
- Pay 1 and climb two steps to reach index 9.
- Pay 1 and climb one step to reach the top.
The total cost is 6.
 

Constraints:

2 <= cost.length <= 1000
0 <= cost[i] <= 999

class Solution
{
public:
    int minCostClimbingStairs(vector<int> &cost)
    {
        int n = cost.size();
        vector<int> dp(n + 1);
        for (int i = 2; i <= n; ++i)
        {
            dp[i] = min(dp[i - 2] + cost[i - 2], dp[i - 1] + cost[i - 1]);
        }
        return dp[n];
    }
};


// Source https://leetcode.com/problems/largest-number-at-least-twice-of-others/

You are given an integer array nums where the largest integer is unique.

Determine whether the largest element in the array is at least twice as much as every other number in the array. If it is, return the index of the largest element, or return -1 otherwise.

 

Example 1:

Input: nums = [3,6,1,0]
Output: 1
Explanation: 6 is the largest integer.
For every other number in the array x, 6 is at least twice as big as x.
The index of value 6 is 1, so we return 1.
Example 2:

Input: nums = [1,2,3,4]
Output: -1
Explanation: 4 is less than twice the value of 3, so we return -1.
Example 3:

Input: nums = [1]
Output: 0
Explanation: 1 is trivially at least twice the value as any other number because there are no other numbers.
 

Constraints:

1 <= nums.length <= 50
0 <= nums[i] <= 100
The largest element in nums is unique.

class Solution
{
public:
    int dominantIndex(vector<int> &nums)
    {
        int n = nums.size();
        if (n == 1) return 0;
        auto it = max_element(nums.begin(), nums.end());
        int x = *it;
        for(int i = 0; i < nums.size(); i++)
        {
            if(nums[i] != x && 2 * nums[i] > x) return -1;
        }
        return it - nums.begin();
    }
};


// Source https://leetcode.com/problems/shortest-completing-word/

Given a string licensePlate and an array of strings words, find the shortest completing word in words.

A completing word is a word that contains all the letters in licensePlate. Ignore numbers and spaces in licensePlate, and treat letters as case insensitive. 
If a letter appears more than once in licensePlate, then it must appear in the word the same number of times or more.

For example, if licensePlate = "aBc 12c", then it contains letters 'a', 'b' (ignoring case), and 'c' twice. Possible completing words are "abccdef", "caaacab", and "cbca".

Return the shortest completing word in words. It is guaranteed an answer exists. If there are multiple shortest completing words, return the first one that occurs in words.

 

Example 1:

Input: licensePlate = "1s3 PSt", words = ["step","steps","stripe","stepple"]
Output: "steps"
Explanation: licensePlate contains letters 's', 'p', 's' (ignoring case), and 't'.
"step" contains 't' and 'p', but only contains 1 's'.
"steps" contains 't', 'p', and both 's' characters.
"stripe" is missing an 's'.
"stepple" is missing an 's'.
Since "steps" is the only word containing all the letters, that is the answer.
Example 2:

Input: licensePlate = "1s3 456", words = ["looks","pest","stew","show"]
Output: "pest"
Explanation: licensePlate only contains the letter 's'. All the words contain 's', but among these "pest", "stew", and "show" are shortest. The answer is "pest" because it is the word that appears earliest of the 3.
 

Constraints:

1 <= licensePlate.length <= 7
licensePlate contains digits, letters (uppercase or lowercase), or space ' '.
1 <= words.length <= 1000
1 <= words[i].length <= 15
words[i] consists of lower case English letters.

class Solution
{
public:
    string shortestCompletingWord(string licensePlate, vector<string> &words)
    {
        int freq[26] = {0};
        for(auto c : licensePlate)
        {
            if(c >= 'A' && c <= 'Z') freq[c - 'A']++;
            else if(c >= 'a' && c <= 'z') freq[c - 'a']++;
        }

        int minSize = 20;
        string res = "";
        for (auto &s : words)
        {
            int arr[26] = {0};
            for(auto c : s)
            {
                if(c >= 'A' && c <= 'Z') arr[c - 'A']++;
                else if(c >= 'a' && c <= 'z') arr[c - 'a']++;
            }
            bool check = true;
            for (int i = 0; i < 26; ++i)
            {
                if (arr[i] < freq[i])
                {
                    check = false;
                    break;
                }
            }
            if(check == true && s.size() < minSize)
            {
                minSize = s.size();
                res = s;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/contain-virus/

A virus is spreading rapidly, and your task is to quarantine the infected area by installing walls.

The world is modeled as an m x n binary grid isInfected, where isInfected[i][j] == 0 represents uninfected cells, and isInfected[i][j] == 1 represents cells contaminated with the virus. 
A wall (and only one wall) can be installed between any two 4-directionally adjacent cells, on the shared boundary.

Every night, the virus spreads to all neighboring cells in all four directions unless blocked by a wall. Resources are limited. 
Each day, you can install walls around only one region (i.e., the affected area (continuous block of infected cells) that threatens the most uninfected cells the following night). 
There will never be a tie.

Return the number of walls used to quarantine all the infected regions. If the world will become fully infected, return the number of walls used.

 

Example 1:


Input: isInfected = [[0,1,0,0,0,0,0,1],[0,1,0,0,0,0,0,1],[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0]]
Output: 10
Explanation: There are 2 contaminated regions.
On the first day, add 5 walls to quarantine the viral region on the left. The board after the virus spreads is:

On the second day, add 5 walls to quarantine the viral region on the right. The virus is fully contained.

Example 2:


Input: isInfected = [[1,1,1],[1,0,1],[1,1,1]]
Output: 4
Explanation: Even though there is only one cell saved, there are 4 walls built.
Notice that walls are only built on the shared boundary of two different cells.
Example 3:

Input: isInfected = [[1,1,1,0,0,0,0,0,0],[1,0,1,0,1,1,1,1,1],[1,1,1,0,0,0,0,0,0]]
Output: 13
Explanation: The region on the left only builds two new walls.
 

Constraints:

m == isInfected.length
n == isInfected[i].length
1 <= m, n <= 50
isInfected[i][j] is either 0 or 1.
There is always a contiguous viral region throughout the described process that will infect strictly more uncontaminated squares in the next round.

class Solution
{
public:
    int containVirus(vector<vector<int>> &grid)
    {
        int res = 0, m = grid.size(), n = grid[0].size();
        vector<vector<int>> dirs{{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
        while (true)
        {
            unordered_set<int> visited;
            vector<vector<vector<int>>> all;
            for (int i = 0; i < m; ++i)
            {
                for (int j = 0; j < n; ++j)
                {
                    if (grid[i][j] == 1 && !visited.count(i * n + j))
                    {
                        queue<int> q;
                        vector<int> virus;
                        vector<int> walls;
                        q.push(i * n + j);
                        virus.push_back(i * n + j);
                        visited.insert(i * n + j);
                        while (!q.empty())
                        {
                            auto t = q.front();
                            q.pop();
                            for (const auto &dir : dirs)
                            {
                                int x = (t / n) + dir[0], y = (t % n) + dir[1];
                                if (x < 0 || x >= m || y < 0 || y >= n || visited.count(x * n + y)) continue;
                                if (grid[x][y] == -1) continue;
                                else if (grid[x][y] == 0) walls.push_back(x * n + y);
                                else if (grid[x][y] == 1)
                                {
                                    q.push(x * n + y);
                                    virus.push_back(x * n + y);
                                    visited.insert(x * n + y);
                                }
                            }
                        }
                        unordered_set<int> s(walls.begin(), walls.end());
                        vector<int> cells{(int)s.size()};
                        all.push_back({cells, walls, virus});
                    }
                }
            }
            if (all.empty()) break;
            sort(all.begin(), all.end(), [](vector<vector<int>> &a, vector<vector<int>> &b)
            {
                return a[0][0] > b[0][0];
            });
            for (int i = 0; i < all.size(); ++i)
            {
                if (i == 0)
                {
                    vector<int> &virus = all[0][2];
                    for (int idx : virus) grid[idx / n][idx % n] = -1;
                    res += all[0][1].size();
                }
                else
                {
                    vector<int> &wall = all[i][1];
                    for (int idx : wall) grid[idx / n][idx % n] = 1;
                }
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/open-the-lock/

You have a lock in front of you with 4 circular wheels. Each wheel has 10 slots: '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'. The wheels can rotate freely and wrap around: 
for example we can turn '9' to be '0', or '0' to be '9'. Each move consists of turning one wheel one slot.

The lock initially starts at '0000', a string representing the state of the 4 wheels.

You are given a list of deadends dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it.

Given a target representing the value of the wheels that will unlock the lock, return the minimum total number of turns required to open the lock, or -1 if it is impossible.

 

Example 1:

Input: deadends = ["0201","0101","0102","1212","2002"], target = "0202"
Output: 6
Explanation: 
A sequence of valid moves would be "0000" -> "1000" -> "1100" -> "1200" -> "1201" -> "1202" -> "0202".
Note that a sequence like "0000" -> "0001" -> "0002" -> "0102" -> "0202" would be invalid,
because the wheels of the lock become stuck after the display becomes the dead end "0102".
Example 2:

Input: deadends = ["8888"], target = "0009"
Output: 1
Explanation: We can turn the last wheel in reverse to move from "0000" -> "0009".
Example 3:

Input: deadends = ["8887","8889","8878","8898","8788","8988","7888","9888"], target = "8888"
Output: -1
Explanation: We cannot reach the target without getting stuck.
 

Constraints:

1 <= deadends.length <= 500
deadends[i].length == 4
target.length == 4
target will not be in the list deadends.
target and deadends[i] consist of digits only.

class Solution
{
public:
    int openLock(vector<string> &deadends, string target)
    {
        if (target == "0000") return 0;
        unordered_set<string> deadlock(deadends.begin(), deadends.end());
        if (deadlock.count("0000")) return -1;
        unordered_set<string> visited;
        queue<string> q;
        q.push("0000");
        visited.insert("0000");
        int res = 1;
        while (!q.empty())
        {
            int sz = q.size();
            for (int k = 0; k < sz; ++k)
            {
                auto t = q.front();
                q.pop();
                for (int i = 0; i < t.size(); ++i)
                {
                    for (int j = -1; j <= 1; ++j)
                    {
                        if (j == 0) continue;
                        string str = t;
                        str[i] = ((str[i] - '0') + j + 10) % 10 + '0';
                        if (str == target) return res;
                        if (visited.count(str)) continue;
                        if (!deadlock.count(str)) q.push(str);
                        visited.insert(str);
                    }
                }
            }
            ++res;
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/cracking-the-safe/

There is a safe protected by a password. The password is a sequence of n digits where each digit can be in the range [0, k - 1].

The safe has a peculiar way of checking the password. When you enter in a sequence, it checks the most recent n digits that were entered each time you type a digit.

For example, the correct password is "345" and you enter in "012345":
After typing 0, the most recent 3 digits is "0", which is incorrect.
After typing 1, the most recent 3 digits is "01", which is incorrect.
After typing 2, the most recent 3 digits is "012", which is incorrect.
After typing 3, the most recent 3 digits is "123", which is incorrect.
After typing 4, the most recent 3 digits is "234", which is incorrect.
After typing 5, the most recent 3 digits is "345", which is correct and the safe unlocks.
Return any string of minimum length that will unlock the safe at some point of entering it.

 

Example 1:

Input: n = 1, k = 2
Output: "10"
Explanation: The password is a single digit, so enter each digit. "01" would also unlock the safe.
Example 2:

Input: n = 2, k = 2
Output: "01100"
Explanation: For each possible password:
- "00" is typed in starting from the 4th digit.
- "01" is typed in starting from the 1st digit.
- "10" is typed in starting from the 3rd digit.
- "11" is typed in starting from the 2nd digit.
Thus "01100" will unlock the safe. "01100", "10011", and "11001" would also unlock the safe.
 
00110

Constraints:

1 <= n <= 4
1 <= k <= 10
1 <= k^n <= 4096

class Solution
{
public:
    string crackSafe(int n, int k)
    {
        string res = string(n, '0');
        unordered_set<string> visited;
       visited.insert(res);
        for (int i = 0; i < pow(k, n); ++i)
        {
            string pre = res.substr(res.size() - n + 1, n - 1);
            for (int j = k - 1; j >= 0; --j)
            {
                string cur = pre + to_string(j);
                if (!visited.count(cur))
                {
                    visited.insert(cur);
                    res += to_string(j);
                    break;
                }
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/reach-a-number/

You are standing at position 0 on an infinite number line. There is a destination at position target.

You can make some number of moves numMoves so that:

On each move, you can either go left or right.
During the ith move (starting from i == 1 to i == numMoves), you take i steps in the chosen direction.
Given the integer target, return the minimum number of moves required (i.e., the minimum numMoves) to reach the destination.

 

Example 1:

Input: target = 2
Output: 3
Explanation:
On the 1st move, we step from 0 to 1 (1 step).
On the 2nd move, we step from 1 to -1 (2 steps).
On the 3rd move, we step from -1 to 2 (3 steps).
Example 2:

Input: target = 3
Output: 2
Explanation:
On the 1st move, we step from 0 to 1 (1 step).
On the 2nd move, we step from 1 to 3 (2 steps).
 

Constraints:

-109 <= target <= 109
target != 0

到达 target 和 -target 的步数相同，因为数轴是对称的，只要将到达 target 的每步的方向都取反，就能到达 -target
比如说目标值是4，那么如果一直累加步数，直到其正好大于等于target时，有：

0 + 1 = 1
1 + 2 = 3
3 + 3 = 6

第三步加上3，得到了6，超过了目标值4，超过了的距离为2，是偶数，那么实际上只要将加上距离为1的时候，不加1，而是加 -1，那么此时累加和就损失了2，那么正好能到目标值4，如下：

0 - 1 = -1
-1 + 2 = 1
1 + 3 = 4

当超过目标值的差值d为偶数时，只要将第 d/2 步的距离取反，就能得到目标值，此时的步数即为到达目标值的步数。
如果d为奇数时，且当前为第n步，那么看下一步 n+1 的奇偶，
如果 n+1 为奇数，则加上 n+1 再做差，得到的差值就为偶数了，问题解决，
如果 n+1 为偶数，则还得加上 n+2 这个奇数，才能让差值为偶数，这样就多加了两步。

先对 target 取绝对值，因为正负不影响最小步数。然后求出第n步，使得从1累加到n刚好大于等于 target，那么利用求和公式就有：

target = n * (n + 1) / 2

变成一元二次方程方程即为：

n^2 + n - 2*target = 0

用初中的一元二次方程的求和公式，就有：

n = (-1 + sqrt(1 + 8*target)) / 2

当然算出来可能不是整数，所以要取整，这里使用 ceil 来取整。如果此时 sum 和 target 正好相等，perfect！直接返回n，
否则就是计算差值，如果差值时偶数，那么也直接返回n，如果是奇数，判断此时n的奇偶，如果n是奇数，则返回 n+2，若n是偶数，返回 n+1

class Solution
{
public:
    int reachNumber(int target)
    {
        target = abs(target);
        long n = ceil((-1.0 + sqrt(1 + 8.0 * target)) / 2);
        long sum = n * (n + 1) / 2;
        if (sum == target) return n;
        long res = sum - target;
        if ((res & 1) == 0) return n;
        return n + ((n & 1) ? 2 : 1);
    }
};


// Source https://leetcode.com/problems/pyramid-transition-matrix/

You are stacking blocks to form a pyramid. Each block has a color, which is represented by a single letter. 
Each row of blocks contains one less block than the row beneath it and is centered on top.

To make the pyramid aesthetically pleasing, there are only specific triangular patterns that are allowed. A triangular pattern consists of a single block stacked on top of two blocks. 
The patterns are given as a list of three-letter strings allowed, where the first two characters of a pattern represent the left and right bottom blocks respectively, 
and the third character is the top block.

For example, "ABC" represents a triangular pattern with a 'C' block stacked on top of an 'A' (left) and 'B' (right) block. 
Note that this is different from "BAC" where 'B' is on the left bottom and 'A' is on the right bottom.
You start with a bottom row of blocks bottom, given as a single string, that you must use as the base of the pyramid.

Given bottom and allowed, return true if you can build the pyramid all the way to the top such that every triangular pattern in the pyramid is in allowed, or false otherwise.

 

Example 1:


Input: bottom = "BCD", allowed = ["BCC","CDE","CEA","FFF"]
Output: true
Explanation: The allowed triangular patterns are shown on the right.
Starting from the bottom (level 3), we can build "CE" on level 2 and then build "E" on level 1.
There are three triangular patterns in the pyramid, which are "BCC", "CDE", and "CEA". All are allowed.
Example 2:


Input: bottom = "AAAA", allowed = ["AAB","AAC","BCD","BBE","DEF"]
Output: false
Explanation: The allowed triangular patterns are shown on the right.
Starting from the bottom (level 4), there are multiple ways to build level 3, but trying all the possibilites, you will get always stuck before building level 1.
 

Constraints:

2 <= bottom.length <= 6
0 <= allowed.length <= 216
allowed[i].length == 3
The letters in all input strings are from the set {'A', 'B', 'C', 'D', 'E', 'F'}.
All the values of allowed are unique.

class Solution
{
public:
    unordered_map<string, bool> dp;
    unordered_map<string, vector<char>> mapping;

    bool dfs(string bottom, string top)
    {
        if (bottom.size() == 2 && top.size() == 1)
        {
            return true;
        }

        if (dp.count(bottom))
            return dp[bottom];

        if (bottom.size() - top.size() == 1)
        {
            bool result = dfs(top, "");
            dp[top] = result;
            return result;
        }

        string sub = bottom.substr(top.size(), 2);
        if (mapping.count(sub) == 0) return dp[bottom] = false;

        for (char c : mapping[sub])
        {
            bool result = dfs(bottom, top + c);
            if (result)
            {
                return true;
            }
        }

        return false;
    }
    
    bool pyramidTransition(string bottom, vector<string> &allowed)
    {
        for (const string &s : allowed)
        {
            mapping[s.substr(0, 2)].push_back(s[2]);
        }

        return dfs(bottom, "");
    }
};


// Source https://leetcode.com/problems/set-intersection-size-at-least-two/

An integer interval [a, b] (for integers a < b) is a set of all consecutive integers from a to b, including a and b.

Find the minimum size of a set S such that for every integer interval A in intervals, the intersection of S with A has a size of at least two.

 

Example 1:

Input: intervals = [[1,3],[1,4],[2,5],[3,5]]
Output: 3
Explanation: Consider the set S = {2, 3, 4}.  For each interval, there are at least 2 elements from S in the interval.
Also, there isn't a smaller size set that fulfills the above condition.
Thus, we output the size of this set, which is 3.
Example 2:

Input: intervals = [[1,2],[2,3],[2,4],[4,5]]
Output: 5
Explanation: An example of a minimum sized set is {1, 2, 3, 4, 5}.
 

Constraints:

1 <= intervals.length <= 3000
intervals[i].length == 2
0 <= ai < bi <= 108

处理区间的时候从小区间开始，如果区间b完全覆盖了区间a，那么和区间a有两个相同数字的集合，一定和区间b也有两个相同数字
按结束位置从小往大排，当两个结束位置相同时，起始位置大的排前面先处理

那么遍历区间的时候，当前区间就和我们维护的集合S有三种情况：

1. 二者完全没有交集，这时候我们就需要从当前区间中取出两个数字加入集合S，取哪两个数呢？为了尽可能少使用数字，我们取当前区间中的最大两个数字，
因为我们区间位置不断变大，所以取大的数字有更高的概率能和后面的区间有交集。

2. 二者有一个数字的交集，那么这个交集数字一定是区间的起始位置，那么我们需要从当前区间中再取一个数字加入集合S，根据上面的分析，我们取最大的那个数，即区间的结束位置。

3. 二者有两个及两个以上数字的交集，那么不用做任何处理。

class Solution
{
public:
    int intersectionSizeTwo(vector<vector<int>> &intervals)
    {
        vector<int> v;
        sort(intervals.begin(), intervals.end(), [](vector<int> &a, vector<int> &b)
        {
            return a[1] < b[1] || (a[1] == b[1] && a[0] > b[0]);
        });
        v.push_back(intervals[0][1] - 1);
        v.push_back(intervals[0][1]);
        int n = intervals.size();
        for (int i = 1; i < n; ++i)
        {
            int len = v.size();
            if (intervals[i][0] > v.back())
            {
                v.push_back(intervals[i][1] - 1);
                v.push_back(intervals[i][1]);
            }
            else if (intervals[i][0] > v[len - 2])
            {
                v.push_back(intervals[i][1]);
            }
        }
        return v.size();
    }
};


// Source https://leetcode.com/problems/special-binary-string/

Special binary strings are binary strings with the following two properties:

The number of 0's is equal to the number of 1's.
Every prefix of the binary string has at least as many 1's as 0's.
You are given a special binary string s.

A move consists of choosing two consecutive, non-empty, special substrings of s, and swapping them. 
Two strings are consecutive if the last character of the first string is exactly one index before the first character of the second string.

Return the lexicographically largest resulting string possible after applying the mentioned operations on the string.

需要满足两个要求，一是0和1的个数要相等，二是任何一个前缀中的1的个数都要大于等于0的个数。
其实就是一个括号字符串，1表示左括号，0表示右括号，那么题目中的两个限制条件其实就是限定这个括号字符串必须合法，即左右括号的个数必须相同，且左括号的个数随时都要大于等于右括号的个数

通过交换子字符串，生成字母顺序最大的特殊字符串，注意这里交换的子字符串也必须是特殊字符串，换作括号来说就是交换的子括号字符串也必须是合法的。
那么我们来想什么样的字符串是字母顺序最大的呢，根据题目中的例子可以分析得出，应该是1靠前的越多越好，换作括号来说就是括号嵌套多的应该放在前面。

Example 1:

Input: s = "11011000"
Output: "11100100"
Explanation: The strings "10" [occuring at s[1]] and "1100" [at s[3]] are swapped.
This is the lexicographically largest string possible after some number of swaps.
Example 2:

Input: s = "10"
Output: "10"
 

Constraints:

1 <= s.length <= 50
s[i] is either '0' or '1'.
s is a special binary string.

class Solution
{
public:
    string makeLargestSpecial(string S)
    {
        int n = S.length();
        if (n <= 2) return S;
        vector<string> v;
        int cnt = 0;
        int i = 0;
        for (int j = 0; j < n; ++j)
        {
            cnt += (S[j] == '1') ? 1 : -1;
            if (cnt == 0)
            {
                v.push_back('1' + makeLargestSpecial(S.substr(i + 1, j - i - 1)) + '0');
                i = j + 1;
            }
        }
        if (v.size() == 1) return v[0];
        sort(v.begin(), v.end(), greater<string>());
        string res = "";
        for (int k = 0; k < v.size(); ++k) res += v[k];
        return res;
    }
};


// Source https://leetcode.com/problems/prime-number-of-set-bits-in-binary-representation/

Given two integers left and right, return the count of numbers in the inclusive range [left, right] having a prime number of set bits in their binary representation.

Recall that the number of set bits an integer has is the number of 1's present when written in binary.

For example, 21 written in binary is 10101, which has 3 set bits.
 

Example 1:

Input: left = 6, right = 10
Output: 4
Explanation:
6  -> 110 (2 set bits, 2 is prime)
7  -> 111 (3 set bits, 3 is prime)
8  -> 1000 (1 set bit, 1 is not prime)
9  -> 1001 (2 set bits, 2 is prime)
10 -> 1010 (2 set bits, 2 is prime)
4 numbers have a prime number of set bits.
Example 2:

Input: left = 10, right = 15
Output: 5
Explanation:
10 -> 1010 (2 set bits, 2 is prime)
11 -> 1011 (3 set bits, 3 is prime)
12 -> 1100 (2 set bits, 2 is prime)
13 -> 1101 (3 set bits, 3 is prime)
14 -> 1110 (3 set bits, 3 is prime)
15 -> 1111 (4 set bits, 4 is not prime)
5 numbers have a prime number of set bits.
 

Constraints:

1 <= left <= right <= 106
0 <= right - left <= 104

class Solution
{
public:
    bool isPrime(int n)
    {
        if (n < 2) return false;
        if (n < 4) return true;
        for (int j = 2; j * j <= n; ++j)
        {
            if (n % j == 0)
            {
                return false;
            }
        }
        return true;
    }

    int countPrimeSetBits(int L, int R)
    {
        int res = 0;
        for (int i = L; i <= R; ++i)
        {
            int cnt = __builtin_popcount(i);
            if (isPrime(cnt)) ++res;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/partition-labels/

You are given a string s. We want to partition the string into as many parts as possible so that each letter appears in at most one part.

Note that the partition is done so that after concatenating all the parts in order, the resultant string should be s.

Return a list of integers representing the size of these parts.

 

Example 1:

Input: s = "ababcbacadefegdehijhklij"
Output: [9,7,8]
Explanation:
The partition is "ababcbaca", "defegde", "hijhklij".
This is a partition so that each letter appears in at most one part.
A partition like "ababcbacadefegde", "hijhklij" is incorrect, because it splits s into less parts.
Example 2:

Input: s = "eccbbbbdec"
Output: [10]
 

Constraints:

1 <= s.length <= 500
s consists of lowercase English letters.

class Solution
{
public:
    vector<int> partitionLabels(string S)
    {
        int n = S.length();
        unordered_map<char, int> m;
        for (int i = 0; i < n; ++i) m[S[i]] = i;
        vector<int> res;
        int start = 0, last = 0;
        for (int i = 0; i < n; ++i)
        {
            last = max(last, m[S[i]]);
            if (i == last)
            {
                res.push_back(i - start + 1);
                start = i + 1;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/largest-plus-sign/

You are given an integer n. You have an n x n binary grid grid with all values initially 1's except for some indices given in the array mines. 
The ith element of the array mines is defined as mines[i] = [xi, yi] where grid[xi][yi] == 0.

Return the order of the largest axis-aligned plus sign of 1's contained in grid. If there is none, return 0.

An axis-aligned plus sign of 1's of order k has some center grid[r][c] == 1 along with four arms of length k - 1 going up, down, left, and right, and made of 1's. 
Note that there could be 0's or 1's beyond the arms of the plus sign, only the relevant area of the plus sign is checked for 1's.

 

Example 1:


Input: n = 5, mines = [[4,2]]
Output: 2
Explanation: In the above grid, the largest plus sign can only be of order 2. One of them is shown.
Example 2:


Input: n = 1, mines = [[0,0]]
Output: 0
Explanation: There is no plus sign, so return 0.
 

Constraints:

1 <= n <= 500
1 <= mines.length <= 5000
0 <= xi, yi < n
All the pairs (xi, yi) are unique.

class Solution
{
public:
    int orderOfLargestPlusSign(int N, vector<vector<int>> &mines)
    {
        int res = 0;
        vector<vector<int>> dp(N, vector<int>(N, N));
        vector<vector<int>> grid(N, vector<int>(N, 1));
        for (auto &mine : mines) { grid[mine[0]][mine[1]] = 0; dp[mine[0]][mine[1]] = 0; }
        for (int i = 0; i < N; ++i)
        {
            int l = 0, r = 0, u = 0, d = 0;
            for (int j = 0, k = N - 1; j < N; ++j, --k)
            {
                l = (grid[i][j] ? l + 1 : 0);
                r = (grid[i][k] ? r + 1 : 0);
                u = (grid[j][i] ? u + 1 : 0);
                d = (grid[k][i] ? d + 1 : 0);
                dp[i][j] = min(dp[i][j], l);
                dp[i][k] = min(dp[i][k], r);
                dp[j][i] = min(dp[j][i], u);
                dp[k][i] = min(dp[k][i], d);
            }
        }
        for (int k = 0; k < N * N; ++k) res = max(res, dp[k / N][k % N]);
        return res;
    }
};


// Source https://leetcode.com/problems/couples-holding-hands/

There are n couples sitting in 2n seats arranged in a row and want to hold hands.

The people and seats are represented by an integer array row where row[i] is the ID of the person sitting in the ith seat. 
The couples are numbered in order, the first couple being (0, 1), the second couple being (2, 3), and so on with the last couple being (2n - 2, 2n - 1).

Return the minimum number of swaps so that every couple is sitting side by side. A swap consists of choosing any two people, then they stand up and switch seats.

 

Example 1:

Input: row = [0,2,1,3]
Output: 1
Explanation: We only need to swap the second (row[1]) and third (row[2]) person.
Example 2:

Input: row = [3,2,0,1]
Output: 0
Explanation: All couples are already seated side by side.
 

Constraints:

2n == row.length
2 <= n <= 30
n is even.
0 <= row[i] < 2n
All the elements of row are unique.

class Solution
{
public:
    int minSwapsCouples(vector<int> &row)
    {
        int res = 0, n = row.size();
        for (int i = 0; i < n; i += 2)
        {
            if (row[i + 1] == (row[i] ^ 1)) continue;
            ++res;
            for (int j = i + 1; j < n; ++j)
            {
                if (row[j] == (row[i] ^ 1))
                {
                    swap(row[j], row[i + 1]);
                    break;
                }
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/toeplitz-matrix/

Given an m x n matrix, return true if the matrix is Toeplitz. Otherwise, return false.

A matrix is Toeplitz if every diagonal from top-left to bottom-right has the same elements.

 

Example 1:


Input: matrix = [[1,2,3,4],[5,1,2,3],[9,5,1,2]]
Output: true
Explanation:
In the above grid, the diagonals are:
"[9]", "[5, 5]", "[1, 1, 1]", "[2, 2, 2]", "[3, 3]", "[4]".
In each diagonal all elements are the same, so the answer is True.
Example 2:


Input: matrix = [[1,2],[2,2]]
Output: false
Explanation:
The diagonal "[1, 2]" has different elements.
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 20
0 <= matrix[i][j] <= 99

class Solution
{
public:
    bool isToeplitzMatrix(vector<vector<int>> &matrix)
    {
        int n = matrix.size();
        int m = matrix[0].size();
        for (int i = 0; i < n - 1; ++i)
        {
            for (int j = 0; j < m - 1; ++j)
            {
                if (matrix[i][j] != matrix[i + 1][j + 1]) return false;
            }
        }
        return true;
    }
};


// Source https://leetcode.com/problems/reorganize-string/

Given a string s, rearrange the characters of s so that any two adjacent characters are not the same.

Return any possible rearrangement of s or return "" if not possible.

 

Example 1:

Input: s = "aab"
Output: "aba"
Example 2:

Input: s = "aaab"
Output: ""
 

Constraints:

1 <= s.length <= 500
s consists of lowercase English letters.

class Solution
{
public:
    string reorganizeString(string S)
    {
        int n = S.length();
        unordered_map<char, int> m;
        int maxFreq = 0;
        for (char c : S) maxFreq = max(maxFreq, ++m[c]);
        if (maxFreq > (n - maxFreq + 1)) return "";
        priority_queue<pair<int, char>> q;
        for (auto a : m)
        {
            q.push({a.second, a.first});
        }
        string res = "";
        while (q.size() >= 2)
        {
            auto t1 = q.top();
            q.pop();
            auto t2 = q.top();
            q.pop();
            res.push_back(t1.second);
            res.push_back(t2.second);
            if (--t1.first > 0) q.push(t1);
            if (--t2.first > 0) q.push(t2);
        }
        if (q.size() > 0) res.push_back(q.top().second);
        return res;
    }
};


// Source https://leetcode.com/problems/max-chunks-to-make-sorted-ii/

You are given an integer array arr.

We split arr into some number of chunks (i.e., partitions), and individually sort each chunk. After concatenating them, the result should equal the sorted array.

Return the largest number of chunks we can make to sort the array.

 

Example 1:

Input: arr = [5,4,3,2,1]
Output: 1
Explanation:
Splitting into two or more chunks will not return the required result.
For example, splitting into [5, 4], [3, 2, 1] will result in [4, 5, 1, 2, 3], which isn't sorted.
Example 2:

Input: arr = [2,1,3,4,4]
Output: 4
Explanation:
We can split into two chunks, such as [2, 1], [3, 4, 4].
However, splitting into [2, 1], [3], [4], [4] is the highest number of chunks possible.
 

Constraints:

1 <= arr.length <= 2000
0 <= arr[i] <= 108

class Solution
{
public:
    int maxChunksToSorted(vector<int> &arr)
    {
        long res = 0, sum1 = 0, sum2 = 0;
        vector<int> expect = arr;
        sort(expect.begin(), expect.end());
        for (int i = 0; i < arr.size(); ++i)
        {
            sum1 += arr[i];
            sum2 += expect[i];
            if (sum1 == sum2) ++res;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/max-chunks-to-make-sorted/

You are given an integer array arr of length n that represents a permutation of the integers in the range [0, n - 1].

We split arr into some number of chunks (i.e., partitions), and individually sort each chunk. After concatenating them, the result should equal the sorted array.

Return the largest number of chunks we can make to sort the array.

 

Example 1:

Input: arr = [4,3,2,1,0]
Output: 1
Explanation:
Splitting into two or more chunks will not return the required result.
For example, splitting into [4, 3], [2, 1, 0] will result in [3, 4, 0, 1, 2], which isn't sorted.
Example 2:

Input: arr = [1,0,2,3,4]
Output: 4
Explanation:
We can split into two chunks, such as [1, 0], [2, 3, 4].
However, splitting into [1, 0], [2], [3], [4] is the highest number of chunks possible.
 

Constraints:

n == arr.length
1 <= n <= 10
0 <= arr[i] < n
All the elements of arr are unique.

class Solution
{
public:
    int maxChunksToSorted(vector<int> &arr)
    {
        long res = 0, sum1 = 0, sum2 = 0;
        vector<int> expect = arr;
        sort(expect.begin(), expect.end());
        for (int i = 0; i < arr.size(); ++i)
        {
            sum1 += arr[i];
            sum2 += expect[i];
            if (sum1 == sum2) ++res;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/basic-calculator-iv/

Given an expression such as expression = "e + 8 - a + 5" and an evaluation map such as {"e": 1} (given in terms of evalvars = ["e"] and evalints = [1]), 
return a list of tokens representing the simplified expression, such as ["-1*a","14"]

An expression alternates chunks and symbols, with a space separating each chunk and symbol.
A chunk is either an expression in parentheses, a variable, or a non-negative integer.
A variable is a string of lowercase letters (not including digits.) Note that variables can be multiple letters, and note that variables never have a leading coefficient or unary operator like "2x" or "-x".
Expressions are evaluated in the usual order: brackets first, then multiplication, then addition and subtraction.

For example, expression = "1 + 2 * 3" has an answer of ["7"].
The format of the output is as follows:

For each term of free variables with a non-zero coefficient, we write the free variables within a term in sorted order lexicographically.
For example, we would never write a term like "b*a*c", only "a*b*c".
Terms have degrees equal to the number of free variables being multiplied, counting multiplicity. 
We write the largest degree terms of our answer first, breaking ties by lexicographic order ignoring the leading coefficient of the term.
For example, "a*a*b*c" has degree 4.
The leading coefficient of the term is placed directly to the left with an asterisk separating it from the variables (if they exist.) A leading coefficient of 1 is still printed.
An example of a well-formatted answer is ["-2*a*a*a", "3*a*a*b", "3*b*b", "4*a", "5*c", "-6"].
Terms (including constant terms) with coefficient 0 are not included.
For example, an expression of "0" has an output of [].
 

Example 1:

Input: expression = "e + 8 - a + 5", evalvars = ["e"], evalints = [1]
Output: ["-1*a","14"]
Example 2:

Input: expression = "e - 8 + temperature - pressure", evalvars = ["e", "temperature"], evalints = [1, 12]
Output: ["-1*pressure","5"]
Example 3:

Input: expression = "(e + 8) * (e - 8)", evalvars = [], evalints = []
Output: ["1*e*e","-64"]
 

Constraints:

1 <= expression.length <= 250
expression consists of lowercase English letters, digits, '+', '-', '*', '(', ')', ' '.
expression does not contain any leading or trailing spaces.
All the tokens in expression are separated by a single space.
0 <= evalvars.length <= 100
1 <= evalvars[i].length <= 20
evalvars[i] consists of lowercase English letters.
evalints.length == evalvars.length
-100 <= evalints[i] <= 100

class Solution
{
public:
    struct cmp
    {
        bool operator() (const vector<string> &a, const vector<string> &b) const
        {
            if (a.size() == b.size()) return a < b;
            return a.size() > b.size();
        }
    };

    map<vector<string>, int, cmp> helper(string expr, unordered_map<string, int> &evalMap)
    {
        vector<string> empty;
        map<vector<string>, int, cmp> local = {{empty, 1}}, res;
        string sub;
        int n = expr.length();
        for (int i = 0, sign = 1; i <= n; ++i)
        {
            if (i < n && expr[i] == ' ') continue;
            if (i < n && isalnum(expr[i])) sub += expr[i];
            else if (i < n && expr[i] == '(')
            {
                ++i;
                int cnt = 1;
                for (; i < n; ++i)
                {
                    if (expr[i] == '(') ++cnt;
                    else if (expr[i] == ')') --cnt;
                    if (cnt == 0) break;
                    sub += expr[i];
                }
            }
            else     // '+', '-', '*' or i == n
            {
                if (sub.size() == n)
                {
                    if (evalMap.count(sub)) return {{empty, evalMap[sub]}};
                    if (isdigit(sub[0])) return {{empty, stoi(sub)}};
                    return {{{sub}, 1}};
                }
                map<vector<string>, int, cmp> mult, t = helper(sub, evalMap);
                for (auto &a : local)
                {
                    for (auto &b : t)
                    {
                        auto k = a.first;
                        k.insert(k.end(), b.first.begin(), b.first.end());
                        sort(k.begin(), k.end());
                        mult[k] += a.second * b.second;
                    }
                }
                local = std::move(mult);
                if (i == n || expr[i] != '*')   // '+' or '-' or i == n
                {
                    for (auto &a : local)
                    {
                        res[a.first] += sign * a.second;
                    }
                    sign = (i < n && expr[i] == '-') ? -1 : 1;
                    local = {{empty, 1}};
                }
                sub = "";
            }
        }
        return res;
    }

    vector<string> basicCalculatorIV(string expression, vector<string> &evalvars, vector<int> &evalints)
    {
        vector<string> res;
        unordered_map<string, int> evalMap;
        for (int i = 0; i < evalvars.size(); ++i)
        {
            evalMap[evalvars[i]] = evalints[i];
        }
        auto t = helper(expression, evalMap);
        for (auto &a : t)
        {
            if (a.second == 0) continue;
            res.push_back(to_string(a.second));
            for (auto &p : a.first) res.back() += "*" + p;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/jewels-and-stones/

You're given strings jewels representing the types of stones that are jewels, and stones representing the stones you have. 
Each character in stones is a type of stone you have. You want to know how many of the stones you have are also jewels.

Letters are case sensitive, so "a" is considered a different type of stone from "A".

 

Example 1:

Input: jewels = "aA", stones = "aAAbbbb"
Output: 3
Example 2:

Input: jewels = "z", stones = "ZZ"
Output: 0
 

Constraints:

1 <= jewels.length, stones.length <= 50
jewels and stones consist of only English letters.
All the characters of jewels are unique.

class Solution
{
public:
    int numJewelsInStones(string J, string S)
    {
        int res = 0;
        for (char s : S)
        {
            for (char j : J)
            {
                if (s == j)
                {
                    ++res;
                    break;
                }
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/sliding-puzzle/

On an 2 x 3 board, there are five tiles labeled from 1 to 5, and an empty square represented by 0. A move consists of choosing 0 and a 4-directionally adjacent number and swapping it.

The state of the board is solved if and only if the board is [[1,2,3],[4,5,0]].

Given the puzzle board board, return the least number of moves required so that the state of the board is solved. If it is impossible for the state of the board to be solved, return -1.

 

Example 1:


Input: board = [[1,2,3],[4,0,5]]
Output: 1
Explanation: Swap the 0 and the 5 in one move.
Example 2:


Input: board = [[1,2,3],[5,4,0]]
Output: -1
Explanation: No number of moves will make the board solved.
Example 3:


Input: board = [[4,1,2],[5,0,3]]
Output: 5
Explanation: 5 is the smallest number of moves that solves the board.
An example path:
After move 0: [[4,1,2],[5,0,3]]
After move 1: [[4,1,2],[0,5,3]]
After move 2: [[0,1,2],[4,5,3]]
After move 3: [[1,0,2],[4,5,3]]
After move 4: [[1,2,0],[4,5,3]]
After move 5: [[1,2,3],[4,5,0]]
 

Constraints:

board.length == 2
board[i].length == 3
0 <= board[i][j] <= 5
Each value board[i][j] is unique.

class Solution
{
public:
    int slidingPuzzle(vector<vector<int>> &board)
    {
        int res = 0, m = board.size(), n = board[0].size();
        string target = "123450", start = "";
        vector<vector<int>> dirs{{1, 3}, {0, 2, 4}, {1, 5}, {0, 4}, {1, 3, 5}, {2, 4}};
        for (int i = 0; i < m; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                start += to_string(board[i][j]);
            }
        }
        unordered_set<string> visited;
        queue<string> q;
        q.push(start);
        visited.insert(start);
        while (!q.empty())
        {
            int sz = q.size();
            for (int i = 0; i < sz; ++i)
            {
                string cur = q.front();
                q.pop();
                if (cur == target) return res;
                int zero_idx = cur.find("0");
                for (int next_idx : dirs[zero_idx])
                {
                    string cand = cur;
                    swap(cand[next_idx], cand[zero_idx]);
                    if (visited.count(cand)) continue;
                    q.push(cand);
                    visited.insert(cand);
                }
            }
            ++res;
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/global-and-local-inversions/

You are given an integer array nums of length n which represents a permutation of all the integers in the range [0, n - 1].

The number of global inversions is the number of the different pairs (i, j) where:

0 <= i < j < n
nums[i] > nums[j]
The number of local inversions is the number of indices i where:

0 <= i < n - 1
nums[i] > nums[i + 1]
Return true if the number of global inversions is equal to the number of local inversions.

 

Example 1:

Input: nums = [1,0,2]
Output: true
Explanation: There is 1 global inversion and 1 local inversion.
Example 2:

Input: nums = [1,2,0]
Output: false
Explanation: There are 2 global inversions and 1 local inversion.
 

Constraints:

n == nums.length
1 <= n <= 105
0 <= nums[i] < n
All the integers of nums are unique.
nums is a permutation of all the numbers in the range [0, n - 1].

class Solution
{
public:
    bool isIdealPermutation(vector<int> &A)
    {
        int n = A.size(), mn = INT_MAX;
        for (int i = n - 1; i >= 2; --i)
        {
            mn = min(mn, A[i]);
            if (A[i - 2] > mn) return false;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/swap-adjacent-in-lr-string/

In a string composed of 'L', 'R', and 'X' characters, like "RXXLRXRXL", a move consists of either replacing one occurrence of "XL" with "LX", or replacing one occurrence of "RX" with "XR". 
Given the starting string start and the ending string end, return True if and only if there exists a sequence of moves to transform one string to the other.

 

Example 1:

Input: start = "RXXLRXRXL", end = "XRLXXRRLX"
Output: true
Explanation: We can transform start to end following these steps:
RXXLRXRXL ->
XRXLRXRXL ->
XRLXRXRXL ->
XRLXXRRXL ->
XRLXXRRLX
Example 2:

Input: start = "X", end = "L"
Output: false
 

Constraints:

1 <= start.length <= 104
start.length == end.length
Both start and end will only consist of characters in 'L', 'R', and 'X'.

class Solution
{
public:
    bool canTransform(string start, string end)
    {
        int n = start.size(), i = 0, j = 0;
        while (i < n && j < n)
        {
            while (i < n && start[i] == 'X') ++i;
            while (j < n && end[j] == 'X') ++j;
            if (i == n && j == n) return true;
            if (i == n || j == n) return false;
            if (start[i] != end[j]) return false;
            if ((start[i] == 'L' && i < j) || (start[i] == 'R' && i > j)) return false;
            ++i;
            ++j;
        }
        while (i < n)
        {
            if (start[i] != 'X') return false;
            ++i;
        }
        while (j < n)
        {
            if (end[j] != 'X') return false;
            ++j;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/swim-in-rising-water/

You are given an n x n integer matrix grid where each value grid[i][j] represents the elevation at that point (i, j).

The rain starts to fall. At time t, the depth of the water everywhere is t. You can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are at most t. 
You can swim infinite distances in zero time. Of course, you must stay within the boundaries of the grid during your swim.

Return the least time until you can reach the bottom right square (n - 1, n - 1) if you start at the top left square (0, 0).

 

Example 1:


Input: grid = [[0,2],[1,3]]
Output: 3
Explanation:
At time 0, you are in grid location (0, 0).
You cannot go anywhere else because 4-directionally adjacent neighbors have a higher elevation than t = 0.
You cannot reach point (1, 1) until time 3.
When the depth of water is 3, we can swim anywhere inside the grid.
Example 2:


Input: grid = [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]
Output: 16
Explanation: The final route is shown.
We need to wait until time 16 so that (0, 0) and (4, 4) are connected.
 

Constraints:

n == grid.length
n == grid[i].length
1 <= n <= 50
0 <= grid[i][j] < n2
Each value grid[i][j] is unique.

class Solution
{
public:
    int swimInWater(vector<vector<int>> &grid)
    {
        int res = 0, n = grid.size();
        vector<vector<int>> dirs{{0, -1}, {-1, 0}, {0, 1}, {1, 0}};
        auto cmp = [](pair<int, int> &a, pair<int, int> &b)
        {
            return a.first > b.first;
        };
        unordered_set<int> visited;
        priority_queue<pair<int, int>, vector<pair<int, int>>, decltype(cmp) > q(cmp);
        q.push({grid[0][0], 0});
        visited.insert(0);
        while (!q.empty())
        {
            auto p = q.top();
            q.pop();
            int row = p.second / n, col = p.second % n;
            res = max(res, grid[row][col]);
            if (row == n - 1 && col == n - 1) return res;
            for (auto &dir : dirs)
            {
                int x = row + dir[0], y = col + dir[1];
                if (x < 0 || x >= n || y < 0 || y >= n || visited.count(x * n + y)) continue;
                q.push({grid[x][y], x * n + y});
                visited.insert(x * n + y);
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/k-th-symbol-in-grammar/

We build a table of n rows (1-indexed). We start by writing 0 in the 1st row. Now in every subsequent row, we look at the previous row and replace each occurrence of 0 with 01, 
and each occurrence of 1 with 10.

For example, for n = 3, the 1st row is 0, the 2nd row is 01, and the 3rd row is 0110.
Given two integer n and k, return the kth (1-indexed) symbol in the nth row of a table of n rows.

 

Example 1:

Input: n = 1, k = 1
Output: 0
Explanation: row 1: 0
Example 2:

Input: n = 2, k = 1
Output: 0
Explanation: 
row 1: 0
row 2: 01
Example 3:

Input: n = 2, k = 2
Output: 1
Explanation: 
row 1: 0
row 2: 01
 

Constraints:

1 <= n <= 30
1 <= k <= 2n - 1

              0
       /             \
      0               1
   /     \         /     \
  0       1       1       0
 / \     / \     / \     / \
0   1   1   0   1   0   0   1

class Solution
{
public:
    int kthGrammar(int N, int K)
    {
        if (N == 1) return 0;
        if (K % 2 == 0) return (kthGrammar(N - 1, K / 2) == 0) ? 1 : 0;
        else return (kthGrammar(N - 1, (K + 1) / 2) == 0) ? 0 : 1;
    }
};


// Source https://leetcode.com/problems/reaching-points/

Given four integers sx, sy, tx, and ty, return true if it is possible to convert the point (sx, sy) to the point (tx, ty) through some operations, or false otherwise.

The allowed operation on some point (x, y) is to convert it to either (x, x + y) or (x + y, y).

x, y -> x, x+y -> x, 2x + y -> 3x + y, 2x + y -> 5x + 2y, 2x + y -> 5x + 2y, 7x + 3y -> 5x + 2y, 12x + 5y -> 17x + 7y, 12x + 5y -> 29x + 12y, 12x + 5y
x, y -> x + y, y -> x + 2y, y -> x + 2y, x + 3y -> x + 2y, 2x + 5y ->3x + 7y, 2x + 5y ->5x + 12y, 2x + 5y -> 5x + 12y, 7x + 17y -> 5x + 12y, 12x + 29y

Example 1:

Input: sx = 1, sy = 1, tx = 3, ty = 5
Output: true
Explanation:
One series of moves that transforms the starting point to the target is:
(1, 1) -> (1, 2)
(1, 2) -> (3, 2)
(3, 2) -> (3, 5)
Example 2:

Input: sx = 1, sy = 1, tx = 2, ty = 2
Output: false
Example 3:

Input: sx = 1, sy = 1, tx = 1, ty = 1
Output: true
 

Constraints:

1 <= sx, sy, tx, ty <= 109

class Solution
{
public:
    bool reachingPoints(int sx, int sy, int tx, int ty)
    {
        if (sx == tx && sy == ty) return true;
        if (tx == ty) return false;
        while (tx >= sx && ty >= sy)
        {
            if (tx > ty)
            {
                if (ty == sy) return (tx - sx) % ty == 0;
                tx %= ty;
            }
            else
            {
                if (tx == sx) return (ty - sy) % tx == 0;
                else ty %= tx;
            }
        }
        return false;
    }
};


// Source https://leetcode.com/problems/rabbits-in-forest/

There is a forest with an unknown number of rabbits. We asked n rabbits "How many rabbits have the same color as you?" 
and collected the answers in an integer array answers where answers[i] is the answer of the ith rabbit.

Given the array answers, return the minimum number of rabbits that could be in the forest.

 

Example 1:

Input: answers = [1,1,2]
Output: 5
Explanation:
The two rabbits that answered "1" could both be the same color, say red.
The rabbit that answered "2" can't be red or the answers would be inconsistent.
Say the rabbit that answered "2" was blue.
Then there should be 2 other blue rabbits in the forest that didn't answer into the array.
The smallest possible number of rabbits in the forest is therefore 5: 3 that answered plus 2 that didn't.
Example 2:

Input: answers = [10,10,10]
Output: 11
 

Constraints:

1 <= answers.length <= 1000
0 <= answers[i] < 1000

class Solution
{
public:
    int numRabbits(vector<int> &answers)
    {
        int res = 0;
        unordered_map<int, int> m;
        for (int ans : answers)
        {
            if (!m.count(ans + 1) || m[ans + 1] == 0)
            {
                res += ans + 1;
                m[ans + 1] = ans;
            }
            else
            {
                --m[ans + 1];
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/transform-to-chessboard/

You are given an n x n binary grid board. In each move, you can swap any two rows with each other, or any two columns with each other.

Return the minimum number of moves to transform the board into a chessboard board. If the task is impossible, return -1.

A chessboard board is a board where no 0's and no 1's are 4-directionally adjacent.

 

Example 1:


Input: board = [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]
Output: 2
Explanation: One potential sequence of moves is shown.
The first move swaps the first and second column.
The second move swaps the second and third row.
Example 2:


Input: board = [[0,1],[1,0]]
Output: 0
Explanation: Also note that the board with 0 in the top left corner, is also a valid chessboard.
Example 3:


Input: board = [[1,0],[1,0]]
Output: -1
Explanation: No matter what sequence of moves you make, you cannot end with a valid chessboard.
 

Constraints:

n == board.length
n == board[i].length
2 <= n <= 30
board[i][j] is either 0 or 1.

我们先来看长度为4的棋盘：

1 0 1 0
0 1 0 1
1 0 1 0
0 1 0 1

或者：

0 1 0 1
1 0 1 0
0 1 0 1
1 0 1 0

我们发现对于长度为偶数的棋盘，每一行0和1的个数都是相等的，不管我们如何交换行和列，0和1的个数都是不会变化的，再看看长度为奇数的棋盘，比如3:

1 0 1
0 1 0
1 0 1

或者：

0 1 0
1 0 1
0 1 0

我们发现对于长度为奇数的棋盘，各行的0和1个数不同，但是还是有规律的，每行的1的个数要么为 n/2，要么为 (n+1)/2，这个规律一定要保证，不然无法形成棋盘。

0 1 1 0
0 1 1 0
1 0 0 1
1 0 0 1

还有一个很重要的规律，我们观察题目给的第一个例子，如果我们只看行，我们发现只有两种情况 0110 和 1001，如果只看列，只有 0011 和 1100，
我们发现不管棋盘有多长，都只有两种情况，而这两种情况上各位上是相反的，只有这样的矩阵才有可能转换为棋盘。
那么这个规律可以衍生出一个规律，就是任意一个矩形的四个顶点只有三种情况，要么四个0，要么四个1，要么两个0两个1，不会有其他的情况。
那么四个顶点异或在一起一定是0，所以我们判断只要异或出了1，一定是不对的，直接返回-1。
之后我们来统计首行和首列中的1个数，因为我们要让其满足之前提到的规律。统计完了首行首列1的个数，我们判断如果其小于 n/2 或者大于 (n+1) / 2，那么一定无法转为棋盘。
我们还需要算下首行和首列跟棋盘位置的错位的个数，虽然 01010 和 10101 都可以是正确的棋盘，我们先默认跟 10101 比较好了，之后再做优化处理。

最后的难点就是计算最小的交换步数了，这里要分n的奇偶来讨论。如果n是奇数，我们必须得到偶数个，为啥呢，因为我们之前统计的是跟棋盘位置的错位的个数，而每次交换行或者列，会修改两个错位，
所以如果是奇数就无法还原为棋盘。举个例子，比如首行是 10001，如果我们跟棋盘 10101 比较，只有一个错位，但是我们是无法通过交换得到 10101的，所以我们必须要交换得到 01010，此时的错位是4个，
而我们通过 n - firstRowDiff 正好也能得到4，这就是为啥我们需要偶数个错位。如果n是偶数，那么就不会出现这种问题，但是会出现另一个问题，
比如我们是 0101，这本身就是正确的棋盘排列了，但是由于我们默认是跟 1010 比较，那么我们会得到4个错位，所以我们应该跟 n - firstRowDiff 比较取较小值。
列的处理跟行的处理完全一样。最终我们把行错位个数跟列错位个数相加，再除以2，就可以得到最小的交换次数了，之前说过了每交换一次，可以修复两个错位

class Solution
{
public:
    int movesToChessboard(vector<vector<int>> &board)
    {
        int n = board.size();
        int firstRowSum = 0, firstColSum = 0, firstRowDiff = 0, firstColDiff = 0;
        for (int i = 0; i < n; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                if (board[0][0] ^ board[i][0] ^ board[0][j] ^ board[i][j]) return -1;
            }
        }
        for (int i = 0; i < n; ++i)
        {
            firstRowSum += board[0][i];
            firstColSum += board[i][0];
            firstRowDiff += (board[0][i] == i % 2);
            firstColDiff += (board[i][0] == i % 2);
        }
        if (n / 2 > firstRowSum || firstRowSum > (n + 1) / 2) return -1;
        if (n / 2 > firstColSum || firstColSum > (n + 1) / 2) return -1;
        if (n % 2)
        {
            if (firstColDiff % 2) firstColDiff = n - firstColDiff;
            if (firstRowDiff % 2) firstRowDiff = n - firstRowDiff;
        }
        else
        {
            firstColDiff = min(n - firstColDiff, firstColDiff);
            firstRowDiff = min(n - firstRowDiff, firstRowDiff);
        }
        return (firstColDiff + firstRowDiff) / 2;
    }
};


// Source https://leetcode.com/problems/minimum-distance-between-bst-nodes/

Given the root of a Binary Search Tree (BST), return the minimum difference between the values of any two different nodes in the tree.

 

Example 1:


Input: root = [4,2,6,1,3]
Output: 1
Example 2:


Input: root = [1,0,48,null,null,12,49]
Output: 1
 

Constraints:

The number of nodes in the tree is in the range [2, 100].
0 <= Node.val <= 105

class Solution
{
public:
    void inorder(TreeNode *node, vector<int> &vals)
    {
        if (!node) return;
        inorder(node->left, vals);
        vals.push_back(node->val);
        inorder(node->right, vals);
    }

    int minDiffInBST(TreeNode *root)
    {
        int res = INT_MAX;
        vector<int> v;
        inorder(root, v);
        for (int i = 1; i < v.size(); ++i)
        {
            res = min(res, v[i] - v[i - 1]);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/letter-case-permutation/

Given a string s, you can transform every letter individually to be lowercase or uppercase to create another string.

Return a list of all possible strings we could create. Return the output in any order.

 

Example 1:

Input: s = "a1b2"
Output: ["a1b2","a1B2","A1b2","A1B2"]
Example 2:

Input: s = "3z4"
Output: ["3z4","3Z4"]
 

Constraints:

1 <= s.length <= 12
s consists of lowercase English letters, uppercase English letters, and digits.

class Solution
{
public:
    vector<string> letterCasePermutation(string S)
    {
        vector<string> res{""};
        for (char c : S)
        {
            if (c >= '0' && c <= '9')
            {
                for (string &str : res) str.push_back(c);
            }
            else
            {
                int cnt = res.size();
                for (int i = 0; i < cnt; ++i)
                {
                    res.push_back(res[i]);
                    res[i].push_back(tolower(c));
                    res[i + cnt].push_back(toupper(c));
                }
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/is-graph-bipartite/

There is an undirected graph with n nodes, where each node is numbered between 0 and n - 1. You are given a 2D array graph, where graph[u] is an array of nodes that node u is adjacent to. 
More formally, for each v in graph[u], there is an undirected edge between node u and node v. The graph has the following properties:

There are no self-edges (graph[u] does not contain u).
There are no parallel edges (graph[u] does not contain duplicate values).
If v is in graph[u], then u is in graph[v] (the graph is undirected).
The graph may not be connected, meaning there may be two nodes u and v such that there is no path between them.
A graph is bipartite if the nodes can be partitioned into two independent sets A and B such that every edge in the graph connects a node in set A and a node in set B.

Return true if and only if it is bipartite.

 

Example 1:


Input: graph = [[1,2,3],[0,2],[0,1,3],[0,2]]
Output: false
Explanation: There is no way to partition the nodes into two independent sets such that every edge connects a node in one and a node in the other.
Example 2:


Input: graph = [[1,3],[0,2],[1,3],[0,2]]
Output: true
Explanation: We can partition the nodes into two sets: {0, 2} and {1, 3}.
 

Constraints:

graph.length == n
1 <= n <= 100
0 <= graph[u].length < n
0 <= graph[u][i] <= n - 1
graph[u] does not contain u.
All the values of graph[u] are unique.
If graph[u] contains v, then graph[v] contains u.

class Solution
{
public:
    bool isBipartite(vector<vector<int>> &graph)
    {
        int n = graph.size();
        vector<int> colors(n);
        for (int i = 0; i < n; ++i)
        {
            if (colors[i] == 0 && !valid(graph, 1, i, colors))
            {
                return false;
            }
        }
        return true;
    }
    bool valid(vector<vector<int>> &graph, int color, int cur, vector<int> &colors)
    {
        if (colors[cur] != 0) return colors[cur] == color;
        colors[cur] = color;
        for (int i : graph[cur])
        {
            if (!valid(graph, -1 * color, i, colors))
            {
                return false;
            }
        }
        return true;
    }
};


// Source https://leetcode.com/problems/k-th-smallest-prime-fraction/

You are given a sorted integer array arr containing 1 and prime numbers, where all the integers of arr are unique. You are also given an integer k.

For every i and j where 0 <= i < j < arr.length, we consider the fraction arr[i] / arr[j].

Return the kth smallest fraction considered. Return your answer as an array of integers of size 2, where answer[0] == arr[i] and answer[1] == arr[j].

 

Example 1:

Input: arr = [1,2,3,5], k = 3
Output: [2,5]
Explanation: The fractions to be considered in sorted order are:
1/5, 1/3, 2/5, 1/2, 3/5, and 2/3.
The third fraction is 2/5.
Example 2:

Input: arr = [1,7], k = 1
Output: [1,7]
 

Constraints:

2 <= arr.length <= 1000
1 <= arr[i] <= 3 * 104
arr[0] == 1
arr[i] is a prime number for i > 0.
All the numbers of arr are unique and sorted in strictly increasing order.
1 <= k <= arr.length * (arr.length - 1) / 2

由于数组是有序的，所以最小的分数肯定是由第一个数字和最后一个数字组成的，而接下来第二小的分数就不确定是由第二个数字和最后一个数字组成的，还是由第一个数字跟倒数第二个数字组成的。
这里用一个最小堆来存分数，那么每次取的时候就可以将最小的分数取出来，由于前面说了，不能遍历所有的分数都存入最小堆，那么该怎么办呢，可以先存n个，哪n个呢？
其实就是数组中的每个数字都和最后一个数字组成的分数。由于需要取出第K小的分数，那么在最小堆中取K个分数就可以了，
第一个取出的分数就是那个由第一个数字和最后一个数字组成的最小的分数，然后就是精髓所在了，此时将分母所在的位置前移一位，还是和当前的分子组成新的分数，
这里即为第一个数字和倒数第二个数字组成的分数，存入最小堆中，那么由于之前已经将第二个数字和倒数第一个数字组成的分数存入了最小堆，所以不用担心第二小的分数不在堆中，
这样每取出一个分数，都新加一个稍稍比取出的大一点的分数，这样取出了第K个分数即为所求

class Solution
{
public:
    vector<int> kthSmallestPrimeFraction(vector<int> &A, int K)
    {
        priority_queue<pair<double, pair<int, int>>, vector<pair<double, pair<int, int>>>, greater<>> q;
        for (int i = 0; i < A.size(); ++i)
        {
            q.push({double(A[i]) / A.back(), {i, A.size() - 1}});
        }
        int idx = 1;
        while (idx < K)
        {
            auto t = q.top().second;
            q.pop();
            --t.second;
            q.push({double(A[t.first]) / A[t.second], {t.first, t.second}});
            ++idx;
        }
        auto t = q.top().second;
        return {A[t.first], A[t.second]};
    }
};


// Source https://leetcode.com/problems/cheapest-flights-within-k-stops/

There are n cities connected by some number of flights. You are given an array flights where flights[i] = [fromi, toi, pricei] indicates that there is a flight from city fromi to city toi with cost pricei.

You are also given three integers src, dst, and k, return the cheapest price from src to dst with at most k stops. If there is no such route, return -1.

 

Example 1:


Input: n = 4, flights = [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]], src = 0, dst = 3, k = 1
Output: 700
Explanation:
The graph is shown above.
The optimal path with at most 1 stop from city 0 to 3 is marked in red and has cost 100 + 600 = 700.
Note that the path through cities [0,1,2,3] is cheaper but is invalid because it uses 2 stops.
Example 2:


Input: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 1
Output: 200
Explanation:
The graph is shown above.
The optimal path with at most 1 stop from city 0 to 2 is marked in red and has cost 100 + 100 = 200.
Example 3:


Input: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 0
Output: 500
Explanation:
The graph is shown above.
The optimal path with no stops from city 0 to 2 is marked in red and has cost 500.
 

Constraints:

1 <= n <= 100
0 <= flights.length <= (n * (n - 1) / 2)
flights[i].length == 3
0 <= fromi, toi < n
fromi != toi
1 <= pricei <= 104
There will not be any multiple flights between two cities.
0 <= src, dst, k < n
src != dst

class Solution
{
public:
    int findCheapestPrice(int n, vector<vector<int>> &flights, int src, int dst, int k)
    {
        vector<vector<pair<int, int>>> adj(n);
        for(auto & flight : flights)
        {
            adj[flight[0]].push_back({flight[1], flight[2]});
        }
        vector<int> dist(n, 1e9);
        queue<pair<int, pair<int, int>> > q;
        q.push({0, {src, 0}});
        dist[src] = 0;
        while(!q.empty())
        {
            auto p = q.front();
            q.pop();
            int totalCost = p.first;
            int city = p.second.first;
            int level = p.second.second;
            if (level == k + 1) continue;
            for(auto p : adj[city])
            {
                int v = p.first;
                int cost = p.second;
                int newCost = totalCost + cost;
                if(dist[v] > newCost)
                {
                    dist[v] = newCost;
                    q.push({newCost, {v, level + 1}});
                }
            }
        }
        if(dist[dst] == 1e9) return -1;
        return dist[dst];
    }
};


// Source https://leetcode.com/problems/rotated-digits/

An integer x is a good if after rotating each digit individually by 180 degrees, we get a valid number that is different from x. Each digit must be rotated - we cannot choose to leave it alone.

A number is valid if each digit remains a digit after rotation. For example:

0, 1, and 8 rotate to themselves,
2 and 5 rotate to each other (in this case they are rotated in a different direction, in other words, 2 or 5 gets mirrored),
6 and 9 rotate to each other, and
the rest of the numbers do not rotate to any other number and become invalid.
Given an integer n, return the number of good integers in the range [1, n].

 

Example 1:

Input: n = 10
Output: 4
Explanation: There are four good numbers in the range [1, 10] : 2, 5, 6, 9.
Note that 1 and 10 are not good numbers, since they remain unchanged after rotating.
Example 2:

Input: n = 1
Output: 0
Example 3:

Input: n = 2
Output: 1
 

Constraints:

1 <= n <= 104

class Solution
{
public:
    int rotatedDigits(int N)
    {
        int res = 0;
        for (int i = 1; i <= N; ++i)
        {
            if (check(i)) ++res;
        }
        return res;
    }
    bool check(int k)
    {
        string str = to_string(k);
        bool flag = false;
        for (char c : str)
        {
            if (c == '3' || c == '4' || c == '7') return false;
            if (c == '2' || c == '5' || c == '6' || c == '9') flag = true;;
        }
        return flag;
    }
};


// Source https://leetcode.com/problems/escape-the-ghosts/

You are playing a simplified PAC-MAN game on an infinite 2-D grid. You start at the point [0, 0], and you are given a destination point target = [xtarget, ytarget] that you are trying to get to. 
There are several ghosts on the map with their starting positions given as a 2D array ghosts, where ghosts[i] = [xi, yi] represents the starting position of the ith ghost. 
All inputs are integral coordinates.

Each turn, you and all the ghosts may independently choose to either move 1 unit in any of the four cardinal directions: north, east, south, or west, or stay still. 
All actions happen simultaneously.

You escape if and only if you can reach the target before any ghost reaches you. If you reach any square (including the target) at the same time as a ghost, it does not count as an escape.

Return true if it is possible to escape regardless of how the ghosts move, otherwise return false.

 

Example 1:

Input: ghosts = [[1,0],[0,3]], target = [0,1]
Output: true
Explanation: You can reach the destination (0, 1) after 1 turn, while the ghosts located at (1, 0) and (0, 3) cannot catch up with you.
Example 2:

Input: ghosts = [[1,0]], target = [2,0]
Output: false
Explanation: You need to reach the destination (2, 0), but the ghost at (1, 0) lies between you and the destination.
Example 3:

Input: ghosts = [[2,0]], target = [1,0]
Output: false
Explanation: The ghost can reach the target at the same time as you.
 

Constraints:

1 <= ghosts.length <= 100
ghosts[i].length == 2
-104 <= xi, yi <= 104
There can be multiple ghosts in the same location.
target.length == 2
-104 <= xtarget, ytarget <= 104

class Solution
{
public:
    bool escapeGhosts(vector<vector<int>> &ghosts, vector<int> &target)
    {
        int dist = abs(target[0]) + abs(target[1]), mn = INT_MAX;
        for (auto &ghost : ghosts)
        {
            int t = abs(ghost[0] - target[0]) + abs(ghost[1] - target[1]);
            mn = min(mn, t);
        }
        return dist < mn;
    }
};


// Source https://leetcode.com/problems/domino-and-tromino-tiling/

You have two types of tiles: a 2 x 1 domino shape and a tromino shape. You may rotate these shapes.


Given an integer n, return the number of ways to tile an 2 x n board. Since the answer may be very large, return it modulo 109 + 7.

In a tiling, every square must be covered by a tile. Two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.

 

Example 1:


Input: n = 3
Output: 5
Explanation: The five different ways are show above.
Example 2:

Input: n = 1
Output: 1
 

Constraints:

1 <= n <= 1000

dp[i][0] 表示填满前i列(2行i列)的不同填法总数
dp[i][1] 表示填满前i-1列(2行i-1列)和第i列的上面那行的不同填法总数
dp[i][2] 表示填满前i-1列(2行i-1列)和第i列的下面那行的不同填法总数

dp[0][0] = 1
dp[1][0] = 1

dp[i][0] = dp[i-1][0] // 前i - 1列 + X
                                                  X
+
               dp[i-2][0] // 前i - 2列 + X X
                                                  Y  Y
+
               dp[i-1][1] // 前i - 2列 + X Y
                                                  Y Y
+
               dp[i-1][2] // 前i - 2列 + Y Y
                                                  X Y

dp[i][1] = dp[i-2][0] // 前i - 2列 + X X
                                                  X
+
               dp[i-1][2] //  前i - 2列 + Y Y
                                                   X

dp[i][2] = dp[i-2][0] // 前i - 2列 + X 
                                                  X X
+
               dp[i-1][1] //  前i - 2列 + X
                                                   Y Y

dp[i][1] = dp[i][2]，因为通过上下翻转，二者可以相互转换

dp[i][0] = dp[i-1][0] + dp[i-2][0] + 2 * dp[i-1][1]
dp[i][1] = dp[i-2][0] + dp[i-1][1]

class Solution
{
public:
    int numTilings(int n)
    {
        if(n == 1) return 1;
        if(n == 2) return 2;
        long dp[1005][5];
        memset(dp, 0, sizeof(dp));
        dp[0][0] = 1;
        dp[1][0] = 1;
        dp[2][0] = 2;
        dp[2][1] = 1;
        int mod = 1000000007;
        for (int i = 3; i <= n; ++i)
        {
            dp[i][0] = (dp[i-1][0] + dp[i-2][0] + (2 * dp[i-1][1])) % mod;
            dp[i][1] = (dp[i-2][0] + dp[i-1][1]) % mod;
        }
        return dp[n][0];
    }
};


// Source https://leetcode.com/problems/custom-sort-string/

You are given two strings order and s. All the words of order are unique and were sorted in some custom order previously.

Permute the characters of s so that they match the order that order was sorted. 
More specifically, if a character x occurs before a character y in order, then x should occur before y in the permuted string.

Return any permutation of s that satisfies this property.

 

Example 1:

Input: order = "cba", s = "abcd"
Output: "cbad"
Explanation: 
"a", "b", "c" appear in order, so the order of "a", "b", "c" should be "c", "b", and "a". 
Since "d" does not appear in order, it can be at any position in the returned string. "dcba", "cdba", "cbda" are also valid outputs.
Example 2:

Input: order = "cbafg", s = "abcd"
Output: "cbad"
 

Constraints:

1 <= order.length <= 26
1 <= s.length <= 200
order and s consist of lowercase English letters.
All the characters of order are unique.

class Solution
{
public:
    string customSortString(string order, string s)
    {
        string res = "";
        unordered_map<char, int> m;
        for (char c : s) ++m[c];
        for (char c : order)
        {
            res += string(m[c], c);
            m[c] = 0;
        }
        for (auto a : m)
        {
            res += string(a.second, a.first);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/number-of-matching-subsequences/

Given a string s and an array of strings words, return the number of words[i] that is a subsequence of s.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
 

Example 1:

Input: s = "abcde", words = ["a","bb","acd","ace"]
Output: 3
Explanation: There are three strings in words that are a subsequence of s: "a", "acd", "ace".
Example 2:

Input: s = "dsahjpjauf", words = ["ahjpjau","ja","ahbwzgqnuk","tnmlanowax"]
Output: 2
 

Constraints:

1 <= s.length <= 5 * 104
1 <= words.length <= 5000
1 <= words[i].length <= 50
s and words[i] consist of only lowercase English letters.

class Solution
{
public:
    int numMatchingSubseq(string S, vector<string> &words)
    {
        int res = 0, n = S.size();
        unordered_set<string> pass, out;
        for (string &word : words)
        {
            if (pass.count(word) || out.count(word))
            {
                if (pass.count(word)) ++res;
                continue;
            }
            int i = 0, j = 0, m = word.size();
            while (i < n && j < m)
            {
                if (word[j] == S[i]) ++j;
                ++i;
            }
            if (j == m)
            {
                ++res;
                pass.insert(word);
            }
            else out.insert(word);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/preimage-size-of-factorial-zeroes-function/

Let f(x) be the number of zeroes at the end of x!. Recall that x! = 1 * 2 * 3 * ... * x and by convention, 0! = 1.

For example, f(3) = 0 because 3! = 6 has no zeroes at the end, while f(11) = 2 because 11! = 39916800 has two zeroes at the end.
Given an integer k, return the number of non-negative integers x have the property that f(x) = k.

 

Example 1:

Input: k = 0
Output: 5
Explanation: 0!, 1!, 2!, 3!, and 4! end with k = 0 zeroes.
Example 2:

Input: k = 5
Output: 0
Explanation: There is no x such that x! ends in k = 5 zeroes.
Example 3:

Input: k = 3
Output: 5
 

Constraints:

0 <= k <= 109

末尾0其实是由2和5相乘为 10 得到的，而阶乘中2的数量远多于5的个数，所以 10 的个数就只取决于5的个数。需要注意的一点就是，像 25，125，这样的不只含有一个5的数字需要考虑进去。
比如，24 的阶乘末尾有4个0，分别是 5，10，15，20 中的四个5组成的，而 25 的阶乘末尾就有6个0，分别是 5，10，15，20 中的各一个5，还有 25 中的两个5，所以共有六个5，
那么就不存在其阶乘数末尾有5个0的数。还有一个很重要的规律需要发现，对于 20，21，22，23，24，这五个数的阶乘数末尾零的个数其实是相同的，都是有4个，因为它们包含的5的个数相同。
而 19，18，17，16，15，这五个数末尾零个数相同，均为3。那么我们其实可以发现，每五个数，必会至少多出1个5，有可能更多。
所以阶乘末尾零个数均为K个的x值，只有两种情况，要么是5，要么是0。
只要找到了一个这样的数，其阶乘末尾零的个数等于K的话，那么就说明总共有5个这样的数，返回5，反之，如果找不到这样的数字，就返回0。
一个数字的阶乘末尾零个数为K，那么这个数字能有多大，就拿前面举的例子来说吧，末尾有4个0的最大数字是 24，有六个0的最大是 29，可以发现它们都不会超过 5*(K+1) 这个范围

class Solution
{
public:
    int preimageSizeFZF(int K)
    {
        long left = 0, right = 5L * (K + 1);
        while (left < right)
        {
            long mid = left + (right - left) / 2;
            long cnt = numOfTrailingZeros(mid);
            if (cnt == K) return 5;
            else if (cnt < K) left = mid + 1;
            else right = mid;
        }
        return 0;
    }
    long numOfTrailingZeros(long x)
    {
        long res = 0;
        long num = 5;
        while (x >= num)
        {
            res += x / num;
            num *= 5;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/valid-tic-tac-toe-state/

Given a Tic-Tac-Toe board as a string array board, return true if and only if it is possible to reach this board position during the course of a valid tic-tac-toe game.

The board is a 3 x 3 array that consists of characters ' ', 'X', and 'O'. The ' ' character represents an empty square.

Here are the rules of Tic-Tac-Toe:

Players take turns placing characters into empty squares ' '.
The first player always places 'X' characters, while the second player always places 'O' characters.
'X' and 'O' characters are always placed into empty squares, never filled ones.
The game ends when there are three of the same (non-empty) character filling any row, column, or diagonal.
The game also ends if all squares are non-empty.
No more moves can be played if the game is over.
 

Example 1:


Input: board = ["O  ","   ","   "]
Output: false
Explanation: The first player always plays "X".
Example 2:


Input: board = ["XOX"," X ","   "]
Output: false
Explanation: Players take turns making moves.
Example 3:


Input: board = ["XOX","O O","XOX"]
Output: true
 

Constraints:

board.length == 3
board[i].length == 3
board[i][j] is either 'X', 'O', or ' '.

class Solution
{
public:
    bool validTicTacToe(vector<string> &board)
    {
        bool xwin = false, owin = false;
        vector<int> row(3), col(3);
        int diag = 0, antidiag = 0, turns = 0;
        for (int i = 0; i < 3; ++i)
        {
            for (int j = 0; j < 3; ++j)
            {
                if (board[i][j] == 'X')
                {
                    ++row[i];
                    ++col[j];
                    ++turns;
                    if (i == j) ++diag;
                    if (i + j == 2) ++antidiag;
                }
                else if (board[i][j] == 'O')
                {
                    --row[i];
                    --col[j];
                    --turns;
                    if (i == j) --diag;
                    if (i + j == 2) --antidiag;
                }
            }
        }
        xwin = row[0] == 3 || row[1] == 3 || row[2] == 3 ||
               col[0] == 3 || col[1] == 3 || col[2] == 3 ||
               diag == 3 || antidiag == 3;
        owin = row[0] == -3 || row[1] == -3 || row[2] == -3 ||
               col[0] == -3 || col[1] == -3 || col[2] == -3 ||
               diag == -3 || antidiag == -3;
        if ((xwin && turns == 0) || (owin && turns == 1)) return false;
        return (turns == 0 || turns == 1) && (!xwin || !owin);
    }
};


// Source https://leetcode.com/problems/number-of-subarrays-with-bounded-maximum/

Given an integer array nums and two integers left and right, return the number of contiguous non-empty subarrays 
such that the value of the maximum array element in that subarray is in the range [left, right].

The test cases are generated so that the answer will fit in a 32-bit integer.

 

Example 1:

Input: nums = [2,1,4,3], left = 2, right = 3
Output: 3
Explanation: There are three subarrays that meet the requirements: [2], [2, 1], [3].
Example 2:

Input: nums = [2,9,2,5,6], left = 2, right = 8
Output: 7
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 109
0 <= left <= right <= 109

假设left = 2, right = 3，nums={5,1,1,2,1,1,3,2,1,9}

pcount计算1,1,2和1,1,2,1,1,3和1,1,2,1,1,3,2的长度为3，6，7
3 + 3 + 3 + 6 + 7 + 7 = 29

1,1,2
1,2
2
1,1,2,1
1,2,1
2,1
1,1,2,1,1
1,2,1,1
2,1,1

class Solution
{
public:
    int numSubarrayBoundedMax(vector<int> &nums, int left, int right)
    {
        int res = 0;
        int n = nums.size();
        int st = 0, pcount = 0;
        for(int i = 0; i < n; i++)
        {
            if (nums[i] > right)
            {
                st = i + 1;
                pcount = 0;
            }
            else if(nums[i] >= left && nums[i] <= right)
            {
                pcount = i - st + 1;
                res += pcount;
            }
            else
            {
                res += pcount;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/rotate-string/

Given two strings s and goal, return true if and only if s can become goal after some number of shifts on s.

A shift on s consists of moving the leftmost character of s to the rightmost position.

For example, if s = "abcde", then it will be "bcdea" after one shift.
 

Example 1:

Input: s = "abcde", goal = "cdeab"
Output: true
Example 2:

Input: s = "abcde", goal = "abced"
Output: false
 

Constraints:

1 <= s.length, goal.length <= 100
s and goal consist of lowercase English letters.

class Solution
{
public:
    bool rotateString(string A, string B)
    {
        if (A.size() != B.size()) return false;
        for (int i = 0; i < A.size(); ++i)
        {
            if (A.substr(i, A.size() - i) + A.substr(0, i) == B) return true;
        }
        return false;
    }
};


// Source https://leetcode.com/problems/all-paths-from-source-to-target/

Given a directed acyclic graph (DAG) of n nodes labeled from 0 to n - 1, find all possible paths from node 0 to node n - 1 and return them in any order.

The graph is given as follows: graph[i] is a list of all nodes you can visit from node i (i.e., there is a directed edge from node i to node graph[i][j]).

 

Example 1:


Input: graph = [[1,2],[3],[3],[]]
Output: [[0,1,3],[0,2,3]]
Explanation: There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.
Example 2:


Input: graph = [[4,3,1],[3,2,4],[3],[4],[]]
Output: [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]
 

Constraints:

n == graph.length
2 <= n <= 15
0 <= graph[i][j] < n
graph[i][j] != i (i.e., there will be no self-loops).
All the elements of graph[i] are unique.
The input graph is guaranteed to be a DAG.

class Solution
{
public:
    vector<vector<int>> res;

    void paths(vector<vector<int>> &graph, vector<int> &tmp, int target, int curr)
    {
        if (curr == target)
        {
            res.push_back(tmp);
            return;
        }
        for (auto next : graph[curr])
        {
            tmp.push_back(next);
            paths(graph, tmp, target, next);
            tmp.pop_back();
        }
        return;
    }

    vector<vector<int>> allPathsSourceTarget(vector<vector<int>> &graph)
    {
        int n = graph.size();
        vector<int> tmp;
        tmp.push_back(0);
        paths(graph, tmp, n - 1, 0);
        return res;
    }
};


// Source https://leetcode.com/problems/smallest-rotation-with-highest-score/

You are given an array nums. You can rotate it by a non-negative integer k so that the array becomes [nums[k], nums[k + 1], ... nums[nums.length - 1], nums[0], nums[1], ..., nums[k-1]]. 
Afterward, any entries that are less than or equal to their index are worth one point.

For example, if we have nums = [2,4,1,3,0], and we rotate by k = 2, it becomes [1,3,0,2,4]. This is worth 3 points because 1 > 0 [no points], 3 > 1 [no points], 0 <= 2 [one point], 2 <= 3 [one point], 4 <= 4 [one point].
Return the rotation index k that corresponds to the highest score we can achieve if we rotated nums by it. If there are multiple answers, return the smallest such index k.

 

Example 1:

Input: nums = [2,3,1,4,0]
Output: 3
Explanation: Scores for each k are listed below: 
k = 0,  nums = [2,3,1,4,0],    score 2
k = 1,  nums = [3,1,4,0,2],    score 3
k = 2,  nums = [1,4,0,2,3],    score 3
k = 3,  nums = [4,0,2,3,1],    score 4
k = 4,  nums = [0,2,3,1,4],    score 3
So we should choose k = 3, which has the highest score.
Example 2:

Input: nums = [1,3,0,2,4]
Output: 0
Explanation: nums will always have 3 points no matter how it shifts.
So we will choose the smallest k, which is 0.
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] < nums.length

class Solution
{
public:
    int bestRotation(vector<int> &A)
    {
        int n = A.size();
        deque<int> count(n);
        int cnt = 0;
        for (int i = 0; i < n; ++i)
        {
            if (A[i] <= i)
            {
                ++cnt;
                ++count[i - A[i]];
            }
        }
        int res = 0, mx = cnt;
        for (int i = 1; i < n; ++i)
        {
            cnt -= count[0]; // 每次左移一位以后，所有i - A[i]为0的数就不再符合要求，要减去
            count.pop_front(); // 移除i - A[i]为0这一项
            count.push_back(0); // 添加i - A[i]为n - 1这一项
            if (A[i - 1] <= n - 1)   // 将数组头部的数放到尾部以后，更新i - A[i]的个数及计数器cnt
            {
                ++count[n - 1 - A[i - 1]];
                ++cnt;
            }
            if (cnt > mx)   // 更新全局mx及结果res
            {
                mx = cnt;
                res = i;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/champagne-tower/

We stack glasses in a pyramid, where the first row has 1 glass, the second row has 2 glasses, and so on until the 100th row.  Each glass holds one cup of champagne.

Then, some champagne is poured into the first glass at the top.  When the topmost glass is full, any excess liquid poured will fall equally to the glass immediately to the left and right of it.  
When those glasses become full, any excess champagne will fall equally to the left and right of those glasses, and so on.  (A glass at the bottom row has its excess champagne fall on the floor.)

For example, after one cup of champagne is poured, the top most glass is full.  After two cups of champagne are poured, the two glasses on the second row are half full.  
After three cups of champagne are poured, those two cups become full - there are 3 full glasses total now.  
After four cups of champagne are poured, the third row has the middle glass half full, and the two outside glasses are a quarter full, as pictured below.



Now after pouring some non-negative integer cups of champagne, return how full the jth glass in the ith row is (both i and j are 0-indexed.)

 

Example 1:

Input: poured = 1, query_row = 1, query_glass = 1
Output: 0.00000
Explanation: We poured 1 cup of champange to the top glass of the tower (which is indexed as (0, 0)). There will be no excess liquid so all the glasses under the top glass will remain empty.
Example 2:

Input: poured = 2, query_row = 1, query_glass = 1
Output: 0.50000
Explanation: We poured 2 cups of champange to the top glass of the tower (which is indexed as (0, 0)). There is one cup of excess liquid. The glass indexed as (1, 0) and the glass indexed as (1, 1) will share the excess liquid equally, and each will get half cup of champange.
Example 3:

Input: poured = 100000009, query_row = 33, query_glass = 17
Output: 1.00000
 

Constraints:

0 <= poured <= 109
0 <= query_glass <= query_row < 100

class Solution
{
public:
    double dp[101][101];

    double champagneTower(int poured, int query_row, int query_glass)
    {
        // 使用0x00按字节初始化得到的double类型值为0
        // 使用0x70按字节初始化得到的double类型值为4.08355e+233
        // 使用0xf0按字节初始化得到的double类型值为-1.07731e+236
        memset(dp, 0x00, sizeof(dp));
        dp[0][0] = poured;
        for (int i = 0; i < query_row; ++i)
        {
            for (int j = 0; j <= i; ++j)
            {
                if (dp[i][j] >= 1)
                {
                    dp[i + 1][j] += (dp[i][j] - 1) / 2.0;
                    dp[i + 1][j + 1] += (dp[i][j] - 1) / 2.0;
                }
            }
        }
        return min(1.0, dp[query_row][query_glass]);
    }
};


// Source https://leetcode.com/problems/minimum-swaps-to-make-sequences-increasing/

You are given two integer arrays of the same length nums1 and nums2. In one operation, you are allowed to swap nums1[i] with nums2[i].

For example, if nums1 = [1,2,3,8], and nums2 = [5,6,7,4], you can swap the element at i = 3 to obtain nums1 = [1,2,3,4] and nums2 = [5,6,7,8].
Return the minimum number of needed operations to make nums1 and nums2 strictly increasing. The test cases are generated so that the given input always makes it possible.

An array arr is strictly increasing if and only if arr[0] < arr[1] < arr[2] < ... < arr[arr.length - 1].

 

Example 1:

Input: nums1 = [1,3,5,4], nums2 = [1,2,3,7]
Output: 1
Explanation: 
Swap nums1[3] and nums2[3]. Then the sequences are:
nums1 = [1, 3, 5, 7] and nums2 = [1, 2, 3, 4]
which are both strictly increasing.
Example 2:

Input: nums1 = [0,3,5,8,9], nums2 = [2,1,4,6,9]
Output: 1
 

Constraints:

2 <= nums1.length <= 105
nums2.length == nums1.length
0 <= nums1[i], nums2[i] <= 2 * 105

class Solution
{
public:
    int n;
    int dp[100005][2];

    int recur(vector<int> &A, vector<int> &B, int prevA, int prevB, int swap, int idx)
    {
        if(idx == n) return 0;
        if(dp[idx][swap] != -1) return dp[idx][swap];
        int res = INT_MAX;
        if(A[idx] > prevA && B[idx] > prevB)
        {
            res = recur(A, B, A[idx], B[idx], 0, idx + 1);
        }
        if(B[idx] > prevA && A[idx] > prevB)
        {
            res = min(res, recur(A, B, B[idx], A[idx], 1, idx + 1) + 1);
        }
        return dp[idx][swap] = res;
    }

    int minSwap(vector<int> &A, vector<int> &B)
    {
        n = A.size();
        memset(dp, -1, sizeof(dp));
        return recur(A, B, -1, -1, 0, 0);
    }
};


// Source https://leetcode.com/problems/find-eventual-safe-states/

There is a directed graph of n nodes with each node labeled from 0 to n - 1. The graph is represented by a 0-indexed 2D integer array graph 
where graph[i] is an integer array of nodes adjacent to node i, meaning there is an edge from node i to each node in graph[i].

A node is a terminal node if there are no outgoing edges. A node is a safe node if every possible path starting from that node leads to a terminal node.

Return an array containing all the safe nodes of the graph. The answer should be sorted in ascending order.

 

Example 1:

Illustration of graph
Input: graph = [[1,2],[2,3],[5],[0],[5],[],[]]
Output: [2,4,5,6]
Explanation: The given graph is shown above.
Nodes 5 and 6 are terminal nodes as there are no outgoing edges from either of them.
Every path starting at nodes 2, 4, 5, and 6 all lead to either node 5 or 6.
Example 2:

Input: graph = [[1,2,3,4],[1,2],[3,4],[0,4],[]]
Output: [4]
Explanation:
Only node 4 is a terminal node, and every path starting at node 4 leads to node 4.
 

Constraints:

n == graph.length
1 <= n <= 104
0 <= graph[i].length <= n
0 <= graph[i][j] <= n - 1
graph[i] is sorted in a strictly increasing order.
The graph may contain self-loops.
The number of edges in the graph will be in the range [1, 4 * 104].

class Solution
{
public:

    vector<int> eventualSafeNodes(vector<vector<int>> &graph)
    {
        int n = graph.size();
        vector<int> adj[n];

        vector<int> outdegree(n, 0);
        for(int i = 0; i < n; i++)
        {
            for(auto x : graph[i])
            {
                adj[x].push_back(i);
                outdegree[i]++;
            }
        }

        queue<int> q;
        for(int i = 0; i < n; i++)
        {
            if(!outdegree[i])
                q.push(i);
        }

        vector<int> res;
        while(!q.empty())
        {
            int node = q.front();
            q.pop();
            res.push_back(node);
            for(auto v : adj[node])
            {
                if(--outdegree[v] == 0)
                    q.push(v);
            }
        }
        sort(res.begin(), res.end());
        return res;
    }
};


// Source https://leetcode.com/problems/bricks-falling-when-hit/

You are given an m x n binary grid, where each 1 represents a brick and 0 represents an empty space. A brick is stable if:

It is directly connected to the top of the grid, or
At least one other brick in its four adjacent cells is stable.
You are also given an array hits, which is a sequence of erasures we want to apply. Each time we want to erase the brick at the location hits[i] = (rowi, coli). 
The brick on that location (if it exists) will disappear. Some other bricks may no longer be stable because of that erasure and will fall. 
Once a brick falls, it is immediately erased from the grid (i.e., it does not land on other stable bricks).

Return an array result, where each result[i] is the number of bricks that will fall after the ith erasure is applied.

Note that an erasure may refer to a location with no brick, and if it does, no bricks drop.

 

Example 1:

Input: grid = [[1,0,0,0],[1,1,1,0]], hits = [[1,0]]
Output: [2]
Explanation: Starting with the grid:
[[1,0,0,0],
 [1,1,1,0]]
We erase the underlined brick at (1,0), resulting in the grid:
[[1,0,0,0],
 [0,1,1,0]]
The two underlined bricks are no longer stable as they are no longer connected to the top nor adjacent to another stable brick, so they will fall. The resulting grid is:
[[1,0,0,0],
 [0,0,0,0]]
Hence the result is [2].
Example 2:

Input: grid = [[1,0,0,0],[1,1,0,0]], hits = [[1,1],[1,0]]
Output: [0,0]
Explanation: Starting with the grid:
[[1,0,0,0],
 [1,1,0,0]]
We erase the underlined brick at (1,1), resulting in the grid:
[[1,0,0,0],
 [1,0,0,0]]
All remaining bricks are still stable, so no bricks fall. The grid remains the same:
[[1,0,0,0],
 [1,0,0,0]]
Next, we erase the underlined brick at (1,0), resulting in the grid:
[[1,0,0,0],
 [0,0,0,0]]
Once again, all remaining bricks are still stable, so no bricks fall.
Hence the result is [0,0].
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 200
grid[i][j] is 0 or 1.
1 <= hits.length <= 4 * 104
hits[i].length == 2
0 <= xi <= m - 1
0 <= yi <= n - 1
All (xi, yi) are unique.

class Solution
{
public:
    int m, n;
    vector <int> parent;
    vector <int> rank;
    vector <int> size;
    vector<vector<int>> directions = {{0, 1}, {0, -1}, {-1, 0}, {1, 0}};

    int find(int x)
    {
        if (parent[x] != x) parent[x] = find(parent[x]);
        return parent[x];
    }

    void Union(int x, int y)
    {
        int r1 = find(x);
        int r2 = find(y);
        if (r1 == r2) return;
        if (rank[r1] > rank[r2])
        {
            parent[r2] = r1;
            size[r1] += size[r2];
        }
        else if (rank[r2] > rank[r1])
        {
            parent[r1] = r2;
            size[r2] += size[r1];
        }
        else
        {
            parent[r2] = r1;
            size[r1] += size[r2];
            rank[r1]++;
        }
    }
    void unionAround(int i, int j, vector<vector<int>> &grid)
    {
        int seq = i * n + j + 1;
        for (auto &d : directions)
        {
            int ni = i + d[0], nj = j + d[1];
            if (ni >= 0 && ni < m && nj >= 0 && nj < n && grid[ni][nj] == 1)
            {
                int new_seq = ni * n + nj + 1;
                Union(seq, new_seq);
            }
        }
        if (i == 0) Union(0, seq);
    }
    vector<int> hitBricks(vector<vector<int>> &grid, vector<vector<int>> &hits)
    {
        m = grid.size();
        n = grid[0].size();
        int hitCnt = hits.size();
        size = vector<int>(m * n + 1, 1);
        size[0] = 0;
        parent = vector <int>(m * n + 1, 0);
        for (int i = 0; i <= m * n; i++) parent[i] = i;
        rank = vector<int>(m * n + 1, 0);
        vector <int> ans(hitCnt, 0);
        for (auto &v : hits)
        {
            int x = v[0], y = v[1];
            if (grid[x][y] == 1) grid[x][y] = 2;
        }
        for (int i = 0; i < m; i++)
        {
            for (int j = 0; j < n; j++)
            {
                if (grid[i][j] == 1) unionAround(i, j, grid);
            }
        }
        int currCnt = size[find(0)];
        for (int i = hitCnt - 1; i >= 0; i--)
        {
            int x = hits[i][0], y = hits[i][1];
            if (grid[x][y] == 2)
            {
                grid[x][y] = 1;
                unionAround(x, y, grid);
                int newCnt = size[find(0)];
                if (newCnt > currCnt) ans[i] = newCnt - currCnt - 1;
                currCnt = newCnt;
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/unique-morse-code-words/

International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows:

'a' maps to ".-",
'b' maps to "-...",
'c' maps to "-.-.", and so on.
For convenience, the full table for the 26 letters of the English alphabet is given below:

[".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."]
Given an array of strings words where each word can be written as a concatenation of the Morse code of each letter.

For example, "cab" can be written as "-.-..--...", which is the concatenation of "-.-.", ".-", and "-...". We will call such a concatenation the transformation of a word.
Return the number of different transformations among all words we have.

 

Example 1:

Input: words = ["gin","zen","gig","msg"]
Output: 2
Explanation: The transformation of each word is:
"gin" -> "--...-."
"zen" -> "--...-."
"gig" -> "--...--."
"msg" -> "--...--."
There are 2 different transformations: "--...-." and "--...--.".
Example 2:

Input: words = ["a"]
Output: 1
 

Constraints:

1 <= words.length <= 100
1 <= words[i].length <= 12
words[i] consists of lowercase English letters.

class Solution
{
public:
    int uniqueMorseRepresentations(vector<string> &words)
    {
        vector<string> morse{".-", "-...", "-.-.", "-..", ".", "..-.", "--.", "....", "..", ".---", "-.-", ".-..", "--", "-.", "---", ".--.", "--.-", ".-.", "...", "-", "..-", "...-", ".--", "-..-", "-.--", "--.."};
        unordered_set<string> s;
        for (string &word : words)
        {
            string t = "";
            for (char c : word) t += morse[c - 'a'];
            s.insert(t);
        }
        return s.size();
    }
};


// Source https://leetcode.com/problems/split-array-with-same-average/

You are given an integer array nums.

You should move each element of nums into one of the two arrays A and B such that A and B are non-empty, and average(A) == average(B).

Return true if it is possible to achieve that and false otherwise.

Note that for an array arr, average(arr) is the sum of all the elements of arr over the length of arr.

 

Example 1:

Input: nums = [1,2,3,4,5,6,7,8]
Output: true
Explanation: We can split the array into [1,4,5,8] and [2,3,6,7], and both of them have an average of 4.5.
Example 2:

Input: nums = [3,1]
Output: false
 

Constraints:

1 <= nums.length <= 30
0 <= nums[i] <= 104

n = n1 + n2
sum = avg * n
sum1 = avg1 * n1
sum2 = avg2 * n2
sum = sum1 + sum2
avg * n = avg1 * n1 + avg2 * n2
如果avg等于avg1，则avg也等于avg2
avg = avg1 = avg2
问题转化为是否存在sum1、n1使得sum / n = sum1 / n1

sum * n1 = sum1 * n -> (sum * n1) % n == 0

从nums的左半部分选择a个数，从nums的右半部分选择b个数
n1 = a + b
sum1 = sum1a + sum1b

sum * (a + b) = (sum1a + sum1b) * n
sum * (a + b) - (sum1a * n) = sum1b * n
问题转化为是否存在sum1a、sum1b、a、b使得sum * (a + b) - (sum1a * n) = sum1b * n

class Solution
{
public:
    int n;

    void solve(vector<int> &nums, int i, int sum, int count, int sz, unordered_map<int, unordered_set<int>> &m)
    {
        if(i == sz)
        {
            m[count].insert(sum * n);
            return ;
        }

        solve(nums, i + 1, sum + nums[i], count + 1, sz, m);
        solve(nums, i + 1, sum, count, sz, m);
    }

    bool splitArraySameAverage(vector<int> &nums)
    {
        n = nums.size();
        int sum = 0;
        for(auto x : nums) sum += x;
        // n1 和 n2 只校验个数较小的那个
        int m = n / 2;
        bool possible = false;
        for (int i = 1; i <= m && !possible; ++i)
        {
            if ((sum * i) % n == 0) possible = true;
        }
        if (!possible) return false;

        //m1[x] stores all possible sum of length x made up of from left half
        //m2[x] stores all possible sum of length x made up of from right half
        unordered_map<int, unordered_set<int>> m1, m2;

        solve(nums, 0, 0, 0, n / 2, m1);
        solve(nums, n / 2, 0, 0, n, m2);

        for(auto &x : m1)
        {
            for(auto &y : x.second)
            {
                for(auto &z : m2)
                {
                    int a = x.first, b = z.first;

                    if(a + b == 0 || a + b == n) continue;

                    if(m2[b].find((a + b)*sum - y) != m2[b].end()) return true;
                }
            }
        }

        return false;
    }
};


// Source https://leetcode.com/problems/number-of-lines-to-write-string/

You are given a string s of lowercase English letters and an array widths denoting how many pixels wide each lowercase English letter is. 
Specifically, widths[0] is the width of 'a', widths[1] is the width of 'b', and so on.

You are trying to write s across several lines, where each line is no longer than 100 pixels. Starting at the beginning of s, write as many letters on the first line 
such that the total width does not exceed 100 pixels. Then, from where you stopped in s, continue writing as many letters as you can on the second line. 
Continue this process until you have written all of s.

Return an array result of length 2 where:

result[0] is the total number of lines.
result[1] is the width of the last line in pixels.
 

Example 1:

Input: widths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = "abcdefghijklmnopqrstuvwxyz"
Output: [3,60]
Explanation: You can write s as follows:
abcdefghij  // 100 pixels wide
klmnopqrst  // 100 pixels wide
uvwxyz      // 60 pixels wide
There are a total of 3 lines, and the last line is 60 pixels wide.
Example 2:

Input: widths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = "bbbcccdddaaa"
Output: [2,4]
Explanation: You can write s as follows:
bbbcccdddaa  // 98 pixels wide
a            // 4 pixels wide
There are a total of 2 lines, and the last line is 4 pixels wide.
 

Constraints:

widths.length == 26
2 <= widths[i] <= 10
1 <= s.length <= 1000
s contains only lowercase English letters.

class Solution
{
public:
    vector<int> numberOfLines(vector<int> &widths, string S)
    {
        int cnt = 1, cur = 0;
        for (char c : S)
        {
            int t = widths[c - 'a'];
            if (cur + t > 100)
            {
                ++cnt;
                cur = t;
            }
            else cur += t;
        }
        return {cnt, cur};
    }
};


// Source https://leetcode.com/problems/max-increase-to-keep-city-skyline/

There is a city composed of n x n blocks, where each block contains a single building shaped like a vertical square prism. 
You are given a 0-indexed n x n integer matrix grid where grid[r][c] represents the height of the building located in the block at row r and column c.

A city's skyline is the the outer contour formed by all the building when viewing the side of the city from a distance. 
The skyline from each cardinal direction north, east, south, and west may be different.

We are allowed to increase the height of any number of buildings by any amount (the amount can be different per building). 
The height of a 0-height building can also be increased. However, increasing the height of a building should not affect the city's skyline from any cardinal direction.

Return the maximum total sum that the height of the buildings can be increased by without changing the city's skyline from any cardinal direction.

 

Example 1:


Input: grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]
Output: 35
Explanation: The building heights are shown in the center of the above image.
The skylines when viewed from each cardinal direction are drawn in red.
The grid after increasing the height of buildings without affecting skylines is:
gridNew = [ [8, 4, 8, 7],
            [7, 4, 7, 7],
            [9, 4, 8, 7],
            [3, 3, 3, 3] ]
Example 2:

Input: grid = [[0,0,0],[0,0,0],[0,0,0]]
Output: 0
Explanation: Increasing the height of any building will result in the skyline changing.
 

Constraints:

n == grid.length
n == grid[r].length
2 <= n <= 50
0 <= grid[r][c] <= 100

class Solution
{
public:
    int maxIncreaseKeepingSkyline(vector<vector<int>> &grid)
    {
        int m = grid.size(), n = grid[0].size(), res = 0;
        vector<int> row(m, 0), col(n, 0);
        for (int i = 0; i < m; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                row[i] = max(row[i], grid[i][j]);
                col[j] = max(col[j], grid[i][j]);
            }
        }
        for (int i = 0; i < m; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                res += min(row[i] - grid[i][j], col[j] - grid[i][j]);
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/soup-servings/

There are two types of soup: type A and type B. Initially, we have n ml of each type of soup. There are four kinds of operations:

Serve 100 ml of soup A and 0 ml of soup B,
Serve 75 ml of soup A and 25 ml of soup B,
Serve 50 ml of soup A and 50 ml of soup B, and
Serve 25 ml of soup A and 75 ml of soup B.
When we serve some soup, we give it to someone, and we no longer have it. Each turn, we will choose from the four operations with an equal probability 0.25. 
If the remaining volume of soup is not enough to complete the operation, we will serve as much as possible. We stop once we no longer have some quantity of both types of soup.

Note that we do not have an operation where all 100 ml's of soup B are used first.

Return the probability that soup A will be empty first, plus half the probability that A and B become empty at the same time. Answers within 10-5 of the actual answer will be accepted.

 

Example 1:

Input: n = 50
Output: 0.62500
Explanation: If we choose the first two operations, A will become empty first.
For the third operation, A and B will become empty at the same time.
For the fourth operation, B will become empty first.
So the total probability of A becoming empty first plus half the probability that A and B become empty at the same time, is 0.25 * (1 + 1 + 0.5 + 0) = 0.625.
Example 2:

Input: n = 100
Output: 0.71875
 

Constraints:

0 <= n <= 109

两种汤，A和B，开始时各给了N毫升的。有下面四种操作：

1. 供应100毫升A汤，0毫升B汤。

2. 供应75毫升A汤，25毫升B汤。

3. 供应50毫升A汤，50毫升B汤。

4. 供应25毫升A汤，75毫升B汤。

我们选择每种操作的概率是一样的，让我们返回A汤先供应完的概率加上A汤和B汤同时供应完的一半概率。

先来看这四种操作，由于概率相同，所以这四种操作可以想象成迷宫遍历的四个方向。
我们发现汤的供应量都是25的倍数，所以我们可以将25毫升当作一份汤的量，所以这四种操作就变成了：

1. 供应4份A汤，0份B汤。

2. 供应3份A汤，1份B汤。

3. 供应2份A汤，2份B汤。

4. 供应1份A汤，3份B汤。

If the remaining volume of soup is not enough to complete the operation, we will serve as much as possible. We stop once we no longer have some quantity of both types of soup.
我们的汤份数可以通过除以25来获得，由于N可能不是25的倍数，会有余数，所以我们可以直接加上24再除以25就可以得到正确的份数。
首先判断如果两种汤都没了，那么返回0.5，因为题目中说了如果两种汤都供应完了，返回一半的概率；如果A汤没了，返回1；如果B汤没了，返回0；
如果上面的情况都没有进入，说明此时A汤和B汤都有剩余，所以我们先查记忆数组dp，如果其大于0，说明当前情况已经被计算过了，我们直接返回该值即可。
如果没有的话，我们就要计算这种情况的值，通过对四种情况分别调用递归函数中，将返回的概率值累加后除以4即可。
这道题还有一个很大的优化，就是当N大过某一个数值(4800左右)的时候，返回的都是1。

class Solution
{
public:
    double dp[200][200];

    double recur(int a, int b)
    {
        if (a <= 0 && b <= 0) return 0.5;
        if (a <= 0) return 1.0;
        if (b <= 0) return 0;
        if (dp[a][b] > 0) return dp[a][b];
        double res = 0;
        res = 0.25 * (recur(a - 4, b) + recur(a - 3, b - 1) + recur(a - 2, b - 2) + recur(a - 1, b - 3));
        return dp[a][b] = res;
    }

    double soupServings(int N)
    {
        memset(dp, 0x00, sizeof(dp));
        return N >= 4800 ? 1.0 : recur((N + 24) / 25, (N + 24) / 25);
    }
};


// Source https://leetcode.com/problems/expressive-words/

Sometimes people repeat letters to represent extra feeling. For example:

"hello" -> "heeellooo"
"hi" -> "hiiii"
In these strings like "heeellooo", we have groups of adjacent letters that are all the same: "h", "eee", "ll", "ooo".

You are given a string s and an array of query strings words. A query word is stretchy if it can be made to be equal to s by any number of applications of the following extension operation: 
choose a group consisting of characters c, and add some number of characters c to the group so that the size of the group is three or more.

For example, starting with "hello", we could do an extension on the group "o" to get "hellooo", but we cannot get "helloo" since the group "oo" has a size less than three. 
Also, we could do another extension like "ll" -> "lllll" to get "helllllooo". If s = "helllllooo", then the query word "hello" would be stretchy because of these two extension operations: 
query = "hello" -> "hellooo" -> "helllllooo" = s.
Return the number of query strings that are stretchy.

 

Example 1:

Input: s = "heeellooo", words = ["hello", "hi", "helo"]
Output: 1
Explanation: 
We can extend "e" and "o" in the word "hello" to get "heeellooo".
We can't extend "helo" to get "heeellooo" because the group "ll" is not size 3 or more.
Example 2:

Input: s = "zzzzzyyyyy", words = ["zzyy","zy","zyy"]
Output: 3
 

Constraints:

1 <= s.length, words.length <= 100
1 <= words[i].length <= 100
s and words[i] consist of lowercase letters.

class Solution
{
public:
    int expressiveWords(string S, vector<string> &words)
    {
        int res = 0, m = S.length();
        for (string &word : words)
        {
            int i = 0, j = 0, n = word.length();
            while (i < m && j < n)
            {
                if (S[i] != word[j]) { break; }
                int k = i + 1;
                for (; k < m && S[k] == S[k-1]; ++k);
                int len1 = k - i;
                int t = j + 1;
                for (; t < n && word[t] == word[t-1]; ++t);
                int len2 = t - j;
                if (len1 < len2) { break; }
                if (len1 > len2 && len1 <= 2) { break; }
                i = k;
                j = t;
            }
            if (i == m && j == n) ++res;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/chalkboard-xor-game/

You are given an array of integers nums represents the numbers written on a chalkboard.

Alice and Bob take turns erasing exactly one number from the chalkboard, with Alice starting first. 
If erasing a number causes the bitwise XOR of all the elements of the chalkboard to become 0, then that player loses. 
The bitwise XOR of one element is that element itself, and the bitwise XOR of no elements is 0.

Also, if any player starts their turn with the bitwise XOR of all the elements of the chalkboard equal to 0, then that player wins.

Return true if and only if Alice wins the game, assuming both players play optimally.

 

Example 1:

Input: nums = [1,1,2]
Output: false
Explanation: 
Alice has two choices: erase 1 or erase 2. 
If she erases 1, the nums array becomes [1, 2]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 2 = 3. 
Now Bob can remove any element he wants, because Alice will be the one to erase the last element and she will lose. 
If Alice erases 2 first, now nums become [1, 1]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 1 = 0. Alice will lose.
Example 2:

Input: nums = [0,1]
Output: true
Example 3:

Input: nums = [1,2,3]
Output: true
 

Constraints:

1 <= nums.length <= 1000
0 <= nums[i] < 216

某个选手在开始移除数字之前，如果数组的异或值为0的话，选手直接获胜。所以，先检查一遍数组的异或值，如果是0的话，直接获胜。
如果数组中的数字个数是偶数，且异或值为x（x != 0），那么选手只要移除一个不为x的数字就行了，这样移除后数组的异或值也不会是0，接下来问题转化为数组中的数字个数是奇数，且异或值不为0
如果数组中的数字个数是奇数，且异或值为x（x != 0），即便选手先移除掉了一个数字，使得数组异或值仍不为0，接下来问题转化为数组中的数字个数是偶数，且异或值不为0，
如果数组中只剩下最后一个数字，别无选择只能移除最后一个数字，此时数组为空，异或值为0，选手失败

class Solution
{
public:
    bool xorGame(vector<int> &nums)
    {
        int x = 0, n = nums.size();
        for (int num : nums) x ^= num;
        return x == 0 || n % 2 == 0;
    }
};


// Source https://leetcode.com/problems/subdomain-visit-count/

A website domain "discuss.leetcode.com" consists of various subdomains. At the top level, we have "com", at the next level, we have "leetcode.com" 
and at the lowest level, "discuss.leetcode.com". When we visit a domain like "discuss.leetcode.com", we will also visit the parent domains "leetcode.com" and "com" implicitly.

A count-paired domain is a domain that has one of the two formats "rep d1.d2.d3" or "rep d1.d2" where rep is the number of visits to the domain and d1.d2.d3 is the domain itself.

For example, "9001 discuss.leetcode.com" is a count-paired domain that indicates that discuss.leetcode.com was visited 9001 times.
Given an array of count-paired domains cpdomains, return an array of the count-paired domains of each subdomain in the input. You may return the answer in any order.

 

Example 1:

Input: cpdomains = ["9001 discuss.leetcode.com"]
Output: ["9001 leetcode.com","9001 discuss.leetcode.com","9001 com"]
Explanation: We only have one website domain: "discuss.leetcode.com".
As discussed above, the subdomain "leetcode.com" and "com" will also be visited. So they will all be visited 9001 times.
Example 2:

Input: cpdomains = ["900 google.mail.com", "50 yahoo.com", "1 intel.mail.com", "5 wiki.org"]
Output: ["901 mail.com","50 yahoo.com","900 google.mail.com","5 wiki.org","5 org","1 intel.mail.com","951 com"]
Explanation: We will visit "google.mail.com" 900 times, "yahoo.com" 50 times, "intel.mail.com" once and "wiki.org" 5 times.
For the subdomains, we will visit "mail.com" 900 + 1 = 901 times, "com" 900 + 50 + 1 = 951 times, and "org" 5 times.
 

Constraints:

1 <= cpdomain.length <= 100
1 <= cpdomain[i].length <= 100
cpdomain[i] follows either the "repi d1i.d2i.d3i" format or the "repi d1i.d2i" format.
repi is an integer in the range [1, 104].
d1i, d2i, and d3i consist of lowercase English letters.

class Solution
{
public:
    vector<string> subdomainVisits(vector<string> &cpdomains)
    {
        vector<string> res;
        unordered_map<string, int> subdomainCnt;
        for (auto &cpdomain : cpdomains)
        {
            int spaceIdx = cpdomain.find(" ");
            int cnt = stoi(cpdomain.substr(0, spaceIdx));
            string rem = cpdomain.substr(spaceIdx + 1);
            for (int i = 0; i < rem.size(); ++i)
            {
                if (rem[i] == '.')
                {
                    subdomainCnt[rem.substr(i + 1)] += cnt;
                }
            }
            subdomainCnt[rem] += cnt;
        }
        for (auto &p : subdomainCnt)
        {
            res.push_back(to_string(p.second) + " " + p.first);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/largest-triangle-area/

Given an array of points on the X-Y plane points where points[i] = [xi, yi], return the area of the largest triangle that can be formed by any three different points. 
Answers within 10-5 of the actual answer will be accepted.

 

Example 1:


Input: points = [[0,0],[0,1],[1,0],[0,2],[2,0]]
Output: 2.00000
Explanation: The five points are shown in the above figure. The red triangle is the largest.
Example 2:

Input: points = [[1,0],[0,0],[0,1]]
Output: 0.50000
 

Constraints:

3 <= points.length <= 50
-50 <= xi, yi <= 50
All the given points are unique.

	x1,y1(A)

		x3,y3(C)

x2,y2(B)

        (D)          (E)         (F)         -> x坐标轴

三角形面积= 梯形DEAB + 梯形FEAC - 梯形DFCB
=(y2 + y1) * (x1 - x2) / 2 + (y3 + y1) * (x3 - x1) /2 - (y2 + y3) * (x3 - x2) / 2
=(y2 * x1 - y2 * x2 + y1 * x1 - y1 * x2 + y3 * x3 - y3 * x1 + y1 * x3 - y1 * x1 - (y2 * x3 - y2 * x2 + y3 * x3 - y3 * x2)) / 2
=(y2 * x1 - y2 * x2 + y1 * x1 - y1 * x2 + y3 * x3 - y3 * x1 + y1 * x3 - y1 * x1 - y2 * x3 + y2 * x2 - y3 * x3 + y3 * x2) / 2
=(

y2 * x1 - y2 * x2
- y2 * x3 + y2 * x2 = y2 * x1 - y2 * x3

y1 * x1 - y1 * x2 
y1 * x3 - y1 * x1 = y1 * x3 - y1 * x2

y3 * x3 - y3 * x1
 - y3 * x3 + y3 * x2 = y3 * x2 - y3 * x1
)
= (y2 * x1 + y3 * x2 + y1 * x3 - y3 * x1 - y1 * x2 - y2 * x3) / 2

梯形面积 = (上底+下底) * 高 / 2
(上底 * 高) * 2 / 2 + (x1 * 高) / 2 + (x2 * 高) / 2
(上底 * 2 + x1 + x2） * 高 / 2
上底 + x1 + x2 = 下底

class Solution
{
public:
    double largestTriangleArea(vector<vector<int>> &points)
    {
        double res = 0;
        for (int i = 0; i < points.size(); ++i)
        {
            for (int j = i + 1; j < points.size(); ++j)
            {
                for (int k = j + 1; k < points.size(); ++k)
                {
                    int x1 = points[i][0], y1 = points[i][1];
                    int x2 = points[j][0], y2 = points[j][1];
                    int x3 = points[k][0], y3 = points[k][1];
                    double area = abs(0.5 * (x2 * y3 + x1 * y2 + x3 * y1 - x3 * y2 - x2 * y1 - x1 * y3));
                    res = max(res, area);
                }
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/largest-sum-of-averages/

You are given an integer array nums and an integer k. You can partition the array into at most k non-empty adjacent subarrays. 
The score of a partition is the sum of the averages of each subarray.

Note that the partition must use every integer in nums, and that the score is not necessarily an integer.

Return the maximum score you can achieve of all the possible partitions. Answers within 10-6 of the actual answer will be accepted.

 

Example 1:

Input: nums = [9,1,2,3,9], k = 3
Output: 20.00000
Explanation: 
The best choice is to partition nums into [9], [1, 2, 3], [9]. The answer is 9 + (1 + 2 + 3) / 3 + 9 = 20.
We could have also partitioned nums into [9, 1], [2], [3, 9], for example.
That partition would lead to a score of 5 + 2 + 6 = 13, which is worse.
Example 2:

Input: nums = [1,2,3,4,5,6,7], k = 4
Output: 20.50000
 

Constraints:

1 <= nums.length <= 100
1 <= nums[i] <= 104
1 <= k <= nums.length

class Solution
{
public:
    int n;
    double avg[200][200];
    double dp[200][200];
    double initVal;

    double largestAvgSum(int start, int k)
    {
        if (start >= n) return 0;

        if(k == 1) return avg[start][n - 1];

        if(dp[start][k] != initVal) return dp[start][k];

        double maxAvg = INT_MIN;
        for(int end = start; end < n; end++)
        {
            maxAvg = max(maxAvg, avg[start][end] + largestAvgSum(end + 1, k - 1));
        }
        return dp[start][k] =  maxAvg;
    }

    double largestSumOfAverages(vector<int> &nums, int k)
    {
        n = nums.size();
        memset(avg, 0x00, sizeof(avg));
        memset(dp, 0xf0, sizeof(dp));
        memset(&initVal, 0xf0, sizeof(initVal));

        for(int i = 0; i < n; i++)
        {
            double sum = 0;
            for(int j = i; j < n; j++)
            {
                sum += nums[j];
                avg[i][j] = avg[j][i] = sum / (j - i + 1);
            }
        }

        return largestAvgSum(0, k);
    }
};


// Source https://leetcode.com/problems/binary-tree-pruning/

Given the root of a binary tree, return the same tree where every subtree (of the given tree) not containing a 1 has been removed.

A subtree of a node node is node plus every node that is a descendant of node.

 

Example 1:


Input: root = [1,null,0,0,1]
Output: [1,null,0,null,1]
Explanation: 
Only the red nodes satisfy the property "every subtree not containing a 1".
The diagram on the right represents the answer.
Example 2:


Input: root = [1,0,1,0,0,0,1]
Output: [1,null,1,null,1]
Example 3:


Input: root = [1,1,0,1,1,0,1,0]
Output: [1,1,0,1,1,null,1]
 

Constraints:

The number of nodes in the tree is in the range [1, 200].
Node.val is either 0 or 1.

class Solution
{
public:
    TreeNode *pruneTree(TreeNode *root)
    {
        if (!root) return NULL;
        root->left = pruneTree(root->left);
        root->right = pruneTree(root->right);
        return (!root->left && !root->right && root->val == 0) ? NULL : root;
    }
};


// Source https://leetcode.com/problems/bus-routes/

You are given an array routes representing bus routes where routes[i] is a bus route that the ith bus repeats forever.

For example, if routes[0] = [1, 5, 7], this means that the 0th bus travels in the sequence 1 -> 5 -> 7 -> 1 -> 5 -> 7 -> 1 -> ... forever.
You will start at the bus stop source (You are not on any bus initially), and you want to go to the bus stop target. You can travel between bus stops by buses only.

Return the least number of buses you must take to travel from source to target. Return -1 if it is not possible.

 

Example 1:

Input: routes = [[1,2,7],[3,6,7]], source = 1, target = 6
Output: 2
Explanation: The best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6.
Example 2:

Input: routes = [[7,12],[4,5,15],[6],[15,19],[9,12,13]], source = 15, target = 12
Output: -1
 

Constraints:

1 <= routes.length <= 500.
1 <= routes[i].length <= 105
All the values of routes[i] are unique.
sum(routes[i].length) <= 105
0 <= routes[i][j] < 106
0 <= source, target < 106

class Solution
{
public:
    int numBusesToDestination(vector<vector<int>> &routes, int S, int T)
    {
        if (S == T) return 0;
        unordered_map<int, vector<int>> stop2bus;
        for (int i = 0; i < routes.size(); ++i)
        {
            for (int j : routes[i])
            {
                stop2bus[j].push_back(i);
            }
        }
        int res = 1;
        queue<int> q;
        unordered_set<int> visited;
        q.push(S);
        while (!q.empty())
        {
            int sz = q.size();
            for (int i = 0; i < sz; ++i)
            {
                int t = q.front();
                q.pop();
                for (int bus : stop2bus[t])
                {
                    if (visited.count(bus)) continue;
                    visited.insert(bus);
                    for (int stop : routes[bus])
                    {
                        if (stop == T) return res;
                        q.push(stop);
                    }
                }
            }
            ++res;
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/ambiguous-coordinates/

We had some 2-dimensional coordinates, like "(1, 3)" or "(2, 0.5)". Then, we removed all commas, decimal points, and spaces and ended up with the string s.

For example, "(1, 3)" becomes s = "(13)" and "(2, 0.5)" becomes s = "(205)".
Return a list of strings representing all possibilities for what our original coordinates could have been.

Our original representation never had extraneous zeroes, so we never started with numbers like "00", "0.0", "0.00", "1.0", "001", "00.01", 
or any other number that can be represented with fewer digits. Also, a decimal point within a number never occurs without at least one digit occurring before it, 
so we never started with numbers like ".1".

The final answer list can be returned in any order. All coordinates in the final answer have exactly one space between them (occurring after the comma.)

 

Example 1:

Input: s = "(123)"
Output: ["(1, 2.3)","(1, 23)","(1.2, 3)","(12, 3)"]
Example 2:

Input: s = "(0123)"
Output: ["(0, 1.23)","(0, 12.3)","(0, 123)","(0.1, 2.3)","(0.1, 23)","(0.12, 3)"]
Explanation: 0.0, 00, 0001 or 00.01 are not allowed.
Example 3:

Input: s = "(00011)"
Output: ["(0, 0.011)","(0.001, 1)"]
 

Constraints:

4 <= s.length <= 12
s[0] == '(' and s[s.length - 1] == ')'.
The rest of s are digits.

class Solution
{
public:
    vector<string> ambiguousCoordinates(string s)
    {
        s = s.substr(1, s.length() - 2);
        int size = s.length();
        vector<string> ans;
        for (int split = 1; split < size; split++)
        {
            for(auto first : generate(0, split - 1, s))
            {
                for(auto second : generate(split, size - 1, s))
                {
                    ans.push_back("(" + first + "," + " " + second + ")");
                }
            }
        }
        return ans;
    }
    vector<string> generate(int start, int end, string &s)
    {
        if(s[start] == '0')
        {
            if(end == start) return{"0"};
            else if (s[end] == '0') return{};
            else
            {
                return{"0." + s.substr(start + 1, end - start)};
            }
        }
        string base = s.substr(start, 1 + end - start);
        vector<string> res = {base};
        if(s[end] != '0')
        {
            for(int i = 1; i < base.length(); i++)
            {
                res.push_back(base.substr(0, i) + "." + base.substr(i));
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/linked-list-components/

You are given the head of a linked list containing unique integer values and an integer array nums that is a subset of the linked list values.

Return the number of connected components in nums where two values are connected if they appear consecutively in the linked list.

 

Example 1:


Input: head = [0,1,2,3], nums = [0,1,3]
Output: 2
Explanation: 0 and 1 are connected, so [0, 1] and [3] are the two connected components.
Example 2:


Input: head = [0,1,2,3,4], nums = [0,3,1,4]
Output: 2
Explanation: 0 and 1 are connected, 3 and 4 are connected, so [0, 1] and [3, 4] are the two connected components.
 

Constraints:

The number of nodes in the linked list is n.
1 <= n <= 104
0 <= Node.val < n
All the values Node.val are unique.
1 <= nums.length <= n
0 <= nums[i] < n
All the values of nums are unique.

class Solution
{
public:
    int numComponents(ListNode *head, vector<int> &nums)
    {
        int arr[10001];
        memset(arr, 0, sizeof(arr));
        for(auto val : nums) arr[val] = 1;
        int res = 0;
        ListNode *cur = head;
        while(cur)
        {
            if(arr[cur->val] == 1)
            {
                while(cur && arr[cur->val] == 1)
                {
                    cur = cur->next;
                }
                ++res;
            }
            else
                cur = cur->next;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/race-car/

Your car starts at position = 0 and speed = 1 on an infinite number line. Your car can go into negative positions. 
Your car drives automatically according to a sequence of instructions 'A' (accelerate) and 'R' (reverse):

When you get an instruction 'A', your car does the following:
position += speed
speed *= 2
When you get an instruction 'R', your car does the following:
If your speed is positive then speed = -1
otherwise speed = 1
Your position stays the same.
For example, after commands "AAR", your car goes to positions 0 --> 1 --> 3 --> 3, and your speed goes to 1 --> 2 --> 4 --> -1.

Given a target position target, return the length of the shortest sequence of instructions to get there.

 

Example 1:

Input: target = 3
Output: 2
Explanation: 
The shortest instruction sequence is "AA".
Your position goes from 0 --> 1 --> 3.
Example 2:

Input: target = 6
Output: 5
Explanation: 
The shortest instruction sequence is "AAARA".
Your position goes from 0 --> 1 --> 3 --> 7 --> 7 --> 6.
 

Constraints:

1 <= target <= 104

起始时小车在位置0，速度为1，目标位置为target
小车只有两种操作，第一种是加速操作，首先当前位置加上小车速度，然后小车速度乘以2。第二种是反向操作，小车位置不变，小车速度重置为单位长度，并且反向。
问我们最少需要多少个操作才能到达 target。我们首先来看下若小车一直加速的话，都能经过哪些位置，从起点开始，若小车连加五次速，位置的变化为：

0 -> 1 -> 3 -> 7 -> 15 -> 31

那么我们得出了结论，当小车从0开始连加n个速的话，其将会到达位置 2^n - 1。我们可以看出，小车越往后，位置跨度越大，那么当 target 不在这些位置上，很有可能一脚油门就开过了，
比如，target = 6 的话，小车在3的位置上，一脚油门，就到7了，这时候就要回头，回头后，速度变为 -1，此时正好就到达6了，那么小车的操作如下：

Initial:    pos -> 0,    speed -> 1

A:    　　pos -> 1,    speed -> 2

A:    　　pos -> 3,    speed -> 4

A:    　　pos -> 7,    speed -> 8

R:    　　pos -> 7,    speed -> -1

A:    　　pos -> 6,    speed -> -2

所以，我们只需要5步就可以了。但是还有个问题，假如回头，再一脚油门，又过站了怎么办？
比如 target = 5 的时候，之前小车回头之后到达了6的位置，此时速度已经是 -2了，再加个速，就直接干到了位置4，就得再回头，那么这种方式小车的操作如下：

Initial:    pos -> 0,    speed -> 1

A:    　　pos -> 1,    speed -> 2

A:    　　pos -> 3,    speed -> 4

A:    　　pos -> 7,    speed -> 8

R:    　　pos -> 7,    speed -> -1

A:    　　pos -> 6,    speed -> -2

A:    　　pos -> 4,    speed -> -4

R:    　　pos -> 4,    speed -> 1

A:    　　pos -> 5,    speed -> 2

那么此时我们就用了8步，但这是最优的方法么，我们一定要在过了目标才回头么？
其实不必，我们可以在到达 target 之前提前调头，然后往回走走，再调回来，使得之后能恰好到达 target，比如下面这种走法：

Initial:    pos -> 0,    speed -> 1

A:    　　pos -> 1,    speed -> 2

A:    　　pos -> 3,    speed -> 4

R:    　　pos -> 3,    speed -> -1

A:    　　pos -> 2,    speed -> -2

R:    　　pos -> 2,    speed -> 1

A:    　　pos -> 3,    speed -> 2

A:    　　pos -> 5,    speed -> 4

我们在未到达 target 的位置3时就直接掉头了，往后退到2，再调回来，往前走，到达5，此时总共只用了7步，是最优解。

class Solution
{
public:
    int racecar(int target)
    {
        queue<pair<int, long>>q;
        q.push({0, 1});
        int level = 0;
        while(!q.empty())
        {
            int sz = q.size();
            for(int i = 0; i < sz; i++)
            {
                pair<int, long> t = q.front();
                q.pop();
                if(t.first == target) return level;
                q.push({t.first + t.second, t.second * 2});
                long speed = t.second < 0 ? 1 : -1;
                if((t.first + t.second > target && t.second > 0) ||
                        (t.first + t.second < target && t.second < 0))
                {
                    q.push({t.first, speed});
                }
            }
            level++;
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/most-common-word/

Given a string paragraph and a string array of the banned words banned, return the most frequent word that is not banned. 
It is guaranteed there is at least one word that is not banned, and that the answer is unique.

The words in paragraph are case-insensitive and the answer should be returned in lowercase.

 

Example 1:

Input: paragraph = "Bob hit a ball, the hit BALL flew far after it was hit.", banned = ["hit"]
Output: "ball"
Explanation: 
"hit" occurs 3 times, but it is a banned word.
"ball" occurs twice (and no other word does), so it is the most frequent non-banned word in the paragraph. 
Note that words in the paragraph are not case sensitive,
that punctuation is ignored (even if adjacent to words, such as "ball,"), 
and that "hit" isn't the answer even though it occurs more because it is banned.
Example 2:

Input: paragraph = "a.", banned = []
Output: "a"
 

Constraints:

1 <= paragraph.length <= 1000
paragraph consists of English letters, space ' ', or one of the symbols: "!?',;.".
0 <= banned.length <= 100
1 <= banned[i].length <= 10
banned[i] consists of only lowercase English letters.

class Solution
{
public:
    string mostCommonWord(string paragraph, vector<string> &banned)
    {
        unordered_set<string> ban(banned.begin(), banned.end());
        unordered_map<string, int> strCnt;
        int mx = 0;
        for (auto &c : paragraph) c = isalpha(c) ? tolower(c) : ' ';
        istringstream iss(paragraph);
        string t = "", res = "";
        while (iss >> t)
        {
            if (!ban.count(t) && ++strCnt[t] > mx)
            {
                mx = strCnt[t];
                res = t;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/short-encoding-of-words/

A valid encoding of an array of words is any reference string s and array of indices indices such that:

words.length == indices.length
The reference string s ends with the '#' character.
For each index indices[i], the substring of s starting from indices[i] and up to (but not including) the next '#' character is equal to words[i].
Given an array of words, return the length of the shortest reference string s possible of any valid encoding of words.

 

Example 1:

Input: words = ["time", "me", "bell"]
Output: 10
Explanation: A valid encoding would be s = "time#bell#" and indices = [0, 2, 5].
words[0] = "time", the substring of s starting from indices[0] = 0 to the next '#' is underlined in "time#bell#"
words[1] = "me", the substring of s starting from indices[1] = 2 to the next '#' is underlined in "time#bell#"
words[2] = "bell", the substring of s starting from indices[2] = 5 to the next '#' is underlined in "time#bell#"
Example 2:

Input: words = ["t"]
Output: 2
Explanation: A valid encoding would be s = "t#" and indices = [0].
 

Constraints:

1 <= words.length <= 2000
1 <= words[i].length <= 7
words[i] consists of only lowercase letters.

class Solution
{
public:
    vector<string> reverse_words(vector<string> &words)
    {
        vector<string> res;
        for (auto word : words)
        {
            reverse(word.begin(), word.end());
            res.emplace_back(std::move(word));
        }
        return res;
    }

    int minimumLengthEncoding(vector<string> &words)
    {
        vector<string> r_words = reverse_words(words);
        int res = 0;
        sort(r_words.begin(), r_words.end());
        int n = r_words.size();
        for (int i = 0; i < n - 1; ++i)
        {
            if (r_words[i + 1].find(r_words[i]) != 0)
            {
                res += r_words[i].size() + 1;
            }
        }
        res += r_words[n - 1].size() + 1;
        return res;
    }
};


// Source https://leetcode.com/problems/shortest-distance-to-a-character/

Given a string s and a character c that occurs in s, return an array of integers answer where answer.length == s.length 
and answer[i] is the distance from index i to the closest occurrence of character c in s.

The distance between two indices i and j is abs(i - j), where abs is the absolute value function.

 

Example 1:

Input: s = "loveleetcode", c = "e"
Output: [3,2,1,0,1,0,0,1,2,2,1,0]
Explanation: The character 'e' appears at indices 3, 5, 6, and 11 (0-indexed).
The closest occurrence of 'e' for index 0 is at index 3, so the distance is abs(0 - 3) = 3.
The closest occurrence of 'e' for index 1 is at index 3, so the distance is abs(1 - 3) = 2.
For index 4, there is a tie between the 'e' at index 3 and the 'e' at index 5, but the distance is still the same: abs(4 - 3) == abs(4 - 5) = 1.
The closest occurrence of 'e' for index 8 is at index 6, so the distance is abs(8 - 6) = 2.
Example 2:

Input: s = "aaab", c = "b"
Output: [3,2,1,0]
 

Constraints:

1 <= s.length <= 104
s[i] and c are lowercase English letters.
It is guaranteed that c occurs at least once in s.

class Solution
{
public:
    vector<int> shortestToChar(string S, char C)
    {
        vector<int> res, idx;
        for (int i = 0; i < S.size(); ++i)
        {
            if (S[i] == C) idx.push_back(i);
        }
        for (int i = 0; i < S.size(); ++i)
        {
            auto it = lower_bound(idx.begin(), idx.end(), i);
            if (it == idx.end())
            {
                auto pre = prev(it);
                res.push_back(i - *pre);
            }
            else if (it == idx.begin()) res.push_back(*it - i);
            else
            {
                auto pre = prev(it);
                int d1 = *it - i, d2 = i - *pre;
                res.push_back(min(d1, d2));
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/card-flipping-game/

You are given n cards, with a positive integer printed on the front and back of each card (possibly different). You can flip any number of cards (possibly zero).

After choosing the front and the back of each card, you will pick each card, and if the integer printed on the back of this card is not printed on the front of any other card, 
then this integer is good.

You are given two integer array fronts and backs where fronts[i] and backs[i] are the integers printer on the front and the back of the ith card respectively.

Return the smallest good and integer after flipping the cards. If there are no good integers, return 0.

Note that a flip swaps the front and back numbers, so the value on the front is now on the back and vice versa.

 

Example 1:

Input: fronts = [1,2,4,4,7], backs = [1,3,4,1,3]
Output: 2
Explanation: If we flip the second card, the fronts are [1,3,4,4,7] and the backs are [1,2,4,1,3].
We choose the second card, which has the number 2 on the back, and it is not on the front of any card, so 2 is good.
Example 2:

Input: fronts = [1], backs = [1]
Output: 0
 

Constraints:

n == fronts.length
n == backs.length
1 <= n <= 1000
1 <= fronts[i], backs[i] <= 2000

class Solution
{
public:
    int flipgame(vector<int> &fronts, vector<int> &backs)
    {
        int res = INT_MAX, n = fronts.size();
        unordered_set<int> same;
        for (int i = 0; i < n; ++i)
        {
            if (fronts[i] == backs[i]) same.insert(fronts[i]);
        }
        for (int front : fronts)
        {
            if (!same.count(front)) res = min(res, front);
        }
        for (int back : backs)
        {
            if (!same.count(back)) res = min(res, back);
        }
        return (res == INT_MAX) ? 0 : res;
    }
};


// Source https://leetcode.com/problems/binary-trees-with-factors/

Given an array of unique integers, arr, where each integer arr[i] is strictly greater than 1.

We make a binary tree using these integers, and each number may be used for any number of times. 
Each non-leaf node's value should be equal to the product of the values of its children.

Return the number of binary trees we can make. The answer may be too large so return the answer modulo 109 + 7.

 

Example 1:

Input: arr = [2,4]
Output: 3
Explanation: We can make these trees: [2], [4], [4, 2, 2]
Example 2:

Input: arr = [2,4,5,10]
Output: 7
Explanation: We can make these trees: [2], [4], [5], [10], [4, 2, 2], [10, 2, 5], [10, 5, 2].
 

Constraints:

1 <= arr.length <= 1000
2 <= arr[i] <= 109
All the values of arr are unique.

class Solution
{
public:
    int numFactoredBinaryTrees(vector<int> &arr)
    {
        sort(arr.begin(), arr.end());
        int n = arr.size();
        int mod = 1000000007;
        vector<long long> dp(n, 1);
        unordered_set<int> st;
        for(int val : arr) st.insert(val);
        unordered_map<int, int> index;
        for(int i = 0; i < n; i++) index[arr[i]] = i;
        for(int i = 1; i < n; i++)
        {
            int num = arr[i];
            int srt = sqrt(num);
            for(int j = 0; j < i; j++)
            {
                int num2 = arr[j];
                if(num2 > srt)
                    break;
                int num3 = num / num2;
                if(num % num2 == 0 && st.find(num3) != st.end())
                {
                    if (num2 != num3)
                    {
                        dp[i] = (dp[i] + 2 * (dp[j] * dp[index[num3]])) % mod;
                    }
                    else
                    {
                        dp[i] = (dp[i] + (dp[j] * dp[index[num3]])) % mod;
                    }
                }
            }
        }
        int sum = 0;
        for(int cnt : dp) sum = (sum + cnt) % mod;
        return sum;
    }
};


// Source https://leetcode.com/problems/goat-latin/

You are given a string sentence that consist of words separated by spaces. Each word consists of lowercase and uppercase letters only.

We would like to convert the sentence to "Goat Latin" (a made-up language similar to Pig Latin.) The rules of Goat Latin are as follows:

If a word begins with a vowel ('a', 'e', 'i', 'o', or 'u'), append "ma" to the end of the word.
For example, the word "apple" becomes "applema".
If a word begins with a consonant (i.e., not a vowel), remove the first letter and append it to the end, then add "ma".
For example, the word "goat" becomes "oatgma".
Add one letter 'a' to the end of each word per its word index in the sentence, starting with 1.
For example, the first word gets "a" added to the end, the second word gets "aa" added to the end, and so on.
Return the final sentence representing the conversion from sentence to Goat Latin.

 

Example 1:

Input: sentence = "I speak Goat Latin"
Output: "Imaa peaksmaaa oatGmaaaa atinLmaaaaa"
Example 2:

Input: sentence = "The quick brown fox jumped over the lazy dog"
Output: "heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa"
 

Constraints:

1 <= sentence.length <= 150
sentence consists of English letters and spaces.
sentence has no leading or trailing spaces.
All the words in sentence are separated by a single space.

class Solution
{
public:
    string toGoatLatin(string S)
    {
        unordered_set<char> vowel{'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};
        istringstream ss(S);
        string res = "", t;
        int cnt = 1;
        while (ss >> t)
        {
            res += (vowel.count(t[0]) ? t : t.substr(1) + t[0]) + "ma" + string(cnt, 'a');
            res.push_back(' ');
            ++cnt;
        }
        res.pop_back();
        return res;
    }
};


// Source https://leetcode.com/problems/friends-of-appropriate-ages/

There are n persons on a social media website. You are given an integer array ages where ages[i] is the age of the ith person.

A Person x will not send a friend request to a person y (x != y) if any of the following conditions is true:

age[y] <= 0.5 * age[x] + 7
age[y] > age[x]
age[y] > 100 && age[x] < 100
Otherwise, x will send a friend request to y.

Note that if x sends a request to y, y will not necessarily send a request to x. Also, a person will not send a friend request to themself.

Return the total number of friend requests made.

 

Example 1:

Input: ages = [16,16]
Output: 2
Explanation: 2 people friend request each other.
Example 2:

Input: ages = [16,17,18]
Output: 2
Explanation: Friend requests are made 17 -> 16, 18 -> 17.
Example 3:

Input: ages = [20,30,100,110,120]
Output: 3
Explanation: Friend requests are made 110 -> 100, 120 -> 110, 120 -> 100.
 

Constraints:

n == ages.length
1 <= n <= 2 * 104
1 <= ages[i] <= 120

0.5 * age[x] + 7 < age[x]
7 < 0.5 * age[x]
14 < age[x]

有效的age[x]满足>=15 && <= 120

class Solution
{
public:
    int numFriendRequests(vector<int> &ages)
    {
        int res = 0;
        vector<int> numInAge(121), sumInAge(121);
        for (int age : ages) ++numInAge[age];
        for (int i = 1; i <= 120; ++i)
        {
            sumInAge[i] = numInAge[i] + sumInAge[i - 1];
        }
        for (int i = 15; i <= 120; ++i)
        {
            if (numInAge[i] == 0) continue;
            int cnt = sumInAge[i] - sumInAge[i * 0.5 + 7];
            if (cnt > 1) res += (cnt - 1) * numInAge[i];
        }
        return res;
    }
};


// Source https://leetcode.com/problems/most-profit-assigning-work/

You have n jobs and m workers. You are given three arrays: difficulty, profit, and worker where:

difficulty[i] and profit[i] are the difficulty and the profit of the ith job, and
worker[j] is the ability of jth worker (i.e., the jth worker can only complete a job with difficulty at most worker[j]).
Every worker can be assigned at most one job, but one job can be completed multiple times.

For example, if three workers attempt the same job that pays $1, then the total profit will be $3. If a worker cannot complete any job, their profit is $0.
Return the maximum profit we can achieve after assigning the workers to the jobs.

 

Example 1:

Input: difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7]
Output: 100
Explanation: Workers are assigned jobs of difficulty [4,4,6,6] and they get a profit of [20,20,30,30] separately.
Example 2:

Input: difficulty = [85,47,57], profit = [24,66,99], worker = [40,25,25]
Output: 0
 

Constraints:

n == difficulty.length
n == profit.length
m == worker.length
1 <= n, m <= 104
1 <= difficulty[i], profit[i], worker[i] <= 105

class Solution
{
public:
    int maxProfitAssignment(vector<int> &difficulty, vector<int> &profit, vector<int> &worker)
    {
        int res = 0, cur = 0;
        map<int, int> m;
        for (int i = 0; i < difficulty.size(); ++i)
        {
            m[difficulty[i]] = max(m[difficulty[i]], profit[i]);
        }
        for (auto &a : m)
        {
            a.second = max(a.second, cur);
            cur = a.second;
        }
        for (int i = 0; i < worker.size(); ++i)
        {
            auto it = m.upper_bound(worker[i]);
            if (it != m.begin())
            {
                auto pre = prev(it);
                res += pre->second;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/making-a-large-island/

You are given an n x n binary matrix grid. You are allowed to change at most one 0 to be 1.

Return the size of the largest island in grid after applying this operation.

An island is a 4-directionally connected group of 1s.

 

Example 1:

Input: grid = [[1,0],[0,1]]
Output: 3
Explanation: Change one 0 to 1 and connect two 1s, then we get an island with area = 3.
Example 2:

Input: grid = [[1,1],[1,0]]
Output: 4
Explanation: Change the 0 to 1 and make the island bigger, only one island with area = 4.
Example 3:

Input: grid = [[1,1],[1,1]]
Output: 4
Explanation: Can't change any 0 to 1, only one island with area = 4.
 

Constraints:

n == grid.length
n == grid[i].length
1 <= n <= 500
grid[i][j] is either 0 or 1.

class Solution
{
public:

    int parent[500001] = {0};
    int vsize[500001] = {0};
    int n;
    int ans;

    bool valid(int x, int y, int n)
    {
        return (x >= 0 && x < n && y >= 0 && y < n);
    }

    void make(int x)
    {
        parent[x] = x;
        vsize[x] = 1;
    }

    int find(int x)
    {
        if(parent[x] != x) parent[x] = find(parent[x]);
        return parent[x];
    }

    void join(int a, int b)
    {
        a = find(a);
        b = find(b);
        if(a == b) return;
        if(vsize[a] < vsize[b])
        {
            parent[a] = b;
            vsize[b] += vsize[a];
            ans = max(ans, vsize[b]);
        }
        else if(vsize[b] < vsize[a])
        {
            parent[b] = a;
            vsize[a] += vsize[b];
            ans = max(ans, vsize[a]);
        }
        else
        {
            parent[b] = a;
            vsize[a] += vsize[b];
            ans = max(ans, vsize[a]);
        }
    }

    int largestIsland(vector<vector<int>> &grid)
    {
        n = grid.size();
        ans = 0;
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(grid[i][j]) { make(1000 * i + j); ans = 1; }
            }
        }
        if (ans == 0) return 1;
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(grid[i][j])
                {
                    if(i && grid[i - 1][j]) join(1000 * i + j, 1000 * (i - 1) + j);
                    if(j && grid[i][j - 1]) join(1000 * i + j, 1000 * i + j - 1);
                    if(i < n - 1 && grid[i + 1][j]) join(1000 * i + j, 1000 * (i + 1) + j);
                    if(j < n - 1 && grid[i][j + 1]) join(1000 * i + j, 1000 * i + j + 1);
                }
            }
        }

        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(grid[i][j]) continue;
                int pp = 0;
                set<int> s;
                if(valid(i + 1, j, n) && grid[i + 1][j]) s.insert(find(1000 * (i + 1) + j));
                if(valid(i - 1, j, n) && grid[i - 1][j]) s.insert(find(1000 * (i - 1) + j));
                if(valid(i, j - 1, n) && grid[i][j - 1]) s.insert(find(1000 * i + j - 1));
                if(valid(i, j + 1, n) && grid[i][j + 1]) s.insert(find(1000 * i + j + 1));
                for(auto qq : s) pp += vsize[qq];
                ans = max(ans, pp + 1);
            }
        }

        return ans;
    }
};


// Source https://leetcode.com/problems/count-unique-characters-of-all-substrings-of-a-given-string/

Let's define a function countUniqueChars(s) that returns the number of unique characters on s.

For example, calling countUniqueChars(s) if s = "LEETCODE" then "L", "T", "C", "O", "D" are the unique characters since they appear only once in s, therefore countUniqueChars(s) = 5.
Given a string s, return the sum of countUniqueChars(t) where t is a substring of s.

Notice that some substrings can be repeated so in this case you have to count the repeated ones too.

 

Example 1:

Input: s = "ABC"
Output: 10
Explanation: All possible substrings are: "A","B","C","AB","BC" and "ABC".
Evey substring is composed with only unique letters.
Sum of lengths of all substring is 1 + 1 + 1 + 2 + 2 + 3 = 10
Example 2:

Input: s = "ABA"
Output: 8
Explanation: The same as example 1, except countUniqueChars("ABA") = 1.
Example 3:

Input: s = "LEETCODE"
Output: 92
 

Constraints:

1 <= s.length <= 105
s consists of uppercase English letters only.

首先来看一个字符串 CACACCAC，若想让第二个A成为子串中的唯一，那么必须要知道其前后两个相邻的A的位置，比如 CA(CACC)AC，括号中的子串 CACC 中A就是唯一的存在，
同样，对于 CAC(AC)CAC，括号中的子串 AC 中A也是唯一的存在。这样就可以观察出来，只要左括号的位置在第一个A和第二个A之间（共有2个位置），右括号在第二个A和第三个A之间（共有3个位置），
这样第二个A在6个子串中成为那个唯一的存在。换个角度来说，只有6个子串可以让第二个A作为单独的存在从而在结果中贡献。
这样的话，每个字母出现的位置就很重要了，由于上面的分析说了，只要知道三个位置，就可以求出中间的字母的贡献值，
为了节省空间，只保留每个字母最近两次的出现位置，这样加上当前位置i，就可以知道前一个字母的贡献值了。
这里使用一个长度为 26x2 的二维数组 idx，因为题目中限定了只有26个大写字母。这里只保留每个字母的前两个出现位置，均初始化为 -1。然后遍历S中每个字母，对于每个字符减去A，就是其对应位置，此时将前一个字母的贡献值累加到结果 res 中，假如当前字母是首次出现，也不用担心，前两个字母的出现位置都是 -1，相减后为0，所以累加值还是0。然后再更新 idx 数组的值。由于每次都是计算该字母前一个位置的贡献值，所以最后还需要一个 for 循环去计算每个字母最后出现位置的贡献值，此时由于身后没有该字母了，就用位置N来代替即可

class Solution
{
public:
    int uniqueLetterString(string S)
    {
        int res = 0, n = S.size(), M = 1e9 + 7;
        vector<vector<int>> idx(26, vector<int>(2, -1));
        for (int i = 0; i < n; ++i)
        {
            int c = S[i] - 'A';
            res = (res + (i - idx[c][1]) * (idx[c][1] - idx[c][0]) % M) % M;
            idx[c][0] = idx[c][1];
            idx[c][1] = i;
        }
        for (int c = 0; c < 26; ++c)
        {
            res = (res + (n - idx[c][1]) * (idx[c][1] - idx[c][0]) % M) % M;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/consecutive-numbers-sum/

Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.

 

Example 1:

Input: n = 5
Output: 2
Explanation: 5 = 2 + 3
Example 2:

Input: n = 9
Output: 3
Explanation: 9 = 4 + 5 = 2 + 3 + 4
Example 3:

Input: n = 15
Output: 4
Explanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5
 

Constraints:

1 <= n <= 109

由于要写成连续正整数之和，则肯定是一个等差数列，并且差值为1，这个等差数列不必从1开始，假设其是从x开始的，且个数共有k个，则可以写出这个等差数列为：
x, x+1, x+2, ..., x+k-1
其和为N，根据等差数列的求和公式，可以写出下列等式：

kx + (k-1)k / 2 = N
变形后可得到：

kx = N - (k-1)k / 2
这样，只要对于任意一个k值，x能得到正整数解，就表示一定会有一个对应的等差数列和为N。下面要来求k的范围，由于k是等差数列的长度，首先肯定是要大于0的，这是下限。
求上限还是要利用上面的那个式子，由于x也必须是正整数，可以得到不等式：

N - (k-1)k / 2 > 0
从而得到近似解：
2N > (k -1)k
k^2 - k - 2N = 0
k = (1 + sqrt(1 + 8N)) / 2 < 1/2 + sqrt(2*(N+1))
有了k的范围就可以开始遍历了，首先数字N本身也是符合题意的，可以看作是长度为1的等差数列，则 res 可以初始化为1，然后i从2遍历到 sqrt(2N)，对于每个i值，只要 (N - i(i-1)/2) 能整除i，就表示存在长度为i的等差数列和为N，结果 res 自增1，这样就可以求出所有符合题意的等差数列的个数

class Solution
{
public:
    int consecutiveNumbersSum(int N)
    {
        int res = 1;
        int lim = (0.5 + sqrt(2 * (N+1)));
        for (int i = 2; i <= lim ; ++i)
        {
            int val = N - (i * (i - 1)) / 2;
            if (val > 0 && val % i == 0) ++res;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/positions-of-large-groups/

In a string s of lowercase letters, these letters form consecutive groups of the same character.

For example, a string like s = "abbxxxxzyy" has the groups "a", "bb", "xxxx", "z", and "yy".

A group is identified by an interval [start, end], where start and end denote the start and end indices (inclusive) of the group. In the above example, "xxxx" has the interval [3,6].

A group is considered large if it has 3 or more characters.

Return the intervals of every large group sorted in increasing order by start index.

 

Example 1:

Input: s = "abbxxxxzzy"
Output: [[3,6]]
Explanation: "xxxx" is the only large group with start index 3 and end index 6.
Example 2:

Input: s = "abc"
Output: []
Explanation: We have groups "a", "b", and "c", none of which are large groups.
Example 3:

Input: s = "abcdddeeeeaabbbcd"
Output: [[3,5],[6,9],[12,14]]
Explanation: The large groups are "ddd", "eeee", and "bbb".
 

Constraints:

1 <= s.length <= 1000
s contains lowercase English letters only.

class Solution
{
public:
    vector<vector<int>> largeGroupPositions(string S)
    {
        vector<vector<int>> res;
        int n = S.size(), i = 0;
        while (i < n)
        {
            int j = i + 1;
            for (; j < n && S[j] == S[i]; ++j);
            if (j - i >= 3) res.push_back({i, j - 1});
            i = j;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/masking-personal-information/

You are given a personal information string s, representing either an email address or a phone number. Return the masked personal information using the below rules.

Email address:

An email address is:

A name consisting of uppercase and lowercase English letters, followed by
The '@' symbol, followed by
The domain consisting of uppercase and lowercase English letters with a dot '.' somewhere in the middle (not the first or last character).
To mask an email:

The uppercase letters in the name and domain must be converted to lowercase letters.
The middle letters of the name (i.e., all but the first and last letters) must be replaced by 5 asterisks "*****".
Phone number:

A phone number is formatted as follows:

The phone number contains 10-13 digits.
The last 10 digits make up the local number.
The remaining 0-3 digits, in the beginning, make up the country code.
Separation characters from the set {'+', '-', '(', ')', ' '} separate the above digits in some way.
To mask a phone number:

Remove all separation characters.
The masked phone number should have the form:
"***-***-XXXX" if the country code has 0 digits.
"+*-***-***-XXXX" if the country code has 1 digit.
"+**-***-***-XXXX" if the country code has 2 digits.
"+***-***-***-XXXX" if the country code has 3 digits.
"XXXX" is the last 4 digits of the local number.
 

Example 1:

Input: s = "LeetCode@LeetCode.com"
Output: "l*****e@leetcode.com"
Explanation: s is an email address.
The name and domain are converted to lowercase, and the middle of the name is replaced by 5 asterisks.
Example 2:

Input: s = "AB@qq.com"
Output: "a*****b@qq.com"
Explanation: s is an email address.
The name and domain are converted to lowercase, and the middle of the name is replaced by 5 asterisks.
Note that even though "ab" is 2 characters, it still must have 5 asterisks in the middle.
Example 3:

Input: s = "1(234)567-890"
Output: "***-***-7890"
Explanation: s is a phone number.
There are 10 digits, so the local number is 10 digits and the country code is 0 digits.
Thus, the resulting masked number is "***-***-7890".
 

Constraints:

s is either a valid email or a phone number.
If s is an email:
8 <= s.length <= 40
s consists of uppercase and lowercase English letters and exactly one '@' symbol and '.' symbol.
If s is a phone number:
10 <= s.length <= 20
s consists of digits, spaces, and the symbols '(', ')', '-', and '+'.

class Solution
{
public:
    string maskPII(string S)
    {
        string res = "";
        auto pos = S.find('@');
        if (pos == string::npos)
        {
            string str = "";
            for (char c : S)
            {
                if (c >= '0' && c <= '9') str.push_back(c);
            }
            int n = str.length();
            if (n > 10) res += "+" + string(n - 10, '*') + "-";
            res += "***-***-" + str.substr(n - 4);
        }
        else
        {
            res = S.substr(0, 1) + "*****" + S.substr(pos - 1);
            for (auto &c : res) c = tolower(c);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/flipping-an-image/

Given an n x n binary matrix image, flip the image horizontally, then invert it, and return the resulting image.

To flip an image horizontally means that each row of the image is reversed.

For example, flipping [1,1,0] horizontally results in [0,1,1].
To invert an image means that each 0 is replaced by 1, and each 1 is replaced by 0.

For example, inverting [0,1,1] results in [1,0,0].
 

Example 1:

Input: image = [[1,1,0],[1,0,1],[0,0,0]]
Output: [[1,0,0],[0,1,0],[1,1,1]]
Explanation: First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].
Then, invert the image: [[1,0,0],[0,1,0],[1,1,1]]
Example 2:

Input: image = [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]
Output: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]
Explanation: First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]].
Then invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]
 

Constraints:

n == image.length
n == image[i].length
1 <= n <= 20
images[i][j] is either 0 or 1.

class Solution
{
public:
    vector<vector<int>> flipAndInvertImage(vector<vector<int>> &A)
    {
        for (auto &row : A) reverse(row.begin(), row.end());
        for (auto &row : A)
        {
            for (int &num : row) num ^= 1;
        }
        return A;
    }
};


// Source https://leetcode.com/problems/find-and-replace-in-string/

You are given a 0-indexed string s that you must perform k replacement operations on. 
The replacement operations are given as three 0-indexed parallel arrays, indices, sources, and targets, all of length k.

To complete the ith replacement operation:

Check if the substring sources[i] occurs at index indices[i] in the original string s.
If it does not occur, do nothing.
Otherwise if it does occur, replace that substring with targets[i].
For example, if s = "abcd", indices[i] = 0, sources[i] = "ab", and targets[i] = "eee", then the result of this replacement will be "eeecd".

All replacement operations must occur simultaneously, meaning the replacement operations should not affect the indexing of each other. 
The testcases will be generated such that the replacements will not overlap.

For example, a testcase with s = "abc", indices = [0, 1], and sources = ["ab","bc"] will not be generated because the "ab" and "bc" replacements overlap.
Return the resulting string after performing all replacement operations on s.

A substring is a contiguous sequence of characters in a string.

 

Example 1:


Input: s = "abcd", indices = [0, 2], sources = ["a", "cd"], targets = ["eee", "ffff"]
Output: "eeebffff"
Explanation:
"a" occurs at index 0 in s, so we replace it with "eee".
"cd" occurs at index 2 in s, so we replace it with "ffff".
Example 2:


Input: s = "abcd", indices = [0, 2], sources = ["ab","ec"], targets = ["eee","ffff"]
Output: "eeecd"
Explanation:
"ab" occurs at index 0 in s, so we replace it with "eee".
"ec" does not occur at index 2 in s, so we do nothing.
 

Constraints:

1 <= s.length <= 1000
k == indices.length == sources.length == targets.length
1 <= k <= 100
0 <= indexes[i] < s.length
1 <= sources[i].length, targets[i].length <= 50
s consists of only lowercase English letters.
sources[i] and targets[i] consist of only lowercase English letters.

class Solution
{
public:
    string findReplaceString(string S, vector<int> &indexes, vector<string> &sources, vector<string> &targets)
    {
        map<int, int, greater<int>> m;
        for (int i = 0; i < indexes.size(); ++i)
        {
            m[indexes[i]] = i;
        }
        for (auto a : m)
        {
            int i = a.first;
            string &s = sources[a.second];
            string &t = targets[a.second];
            if (S.substr(i, s.length()) == s)
            {
                S = S.substr(0, i) + t + S.substr(i + s.length());
            }
        }
        return S;
    }
};


// Source https://leetcode.com/problems/sum-of-distances-in-tree/

There is an undirected connected tree with n nodes labeled from 0 to n - 1 and n - 1 edges.

You are given the integer n and the array edges where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.

Return an array answer of length n where answer[i] is the sum of the distances between the ith node in the tree and all other nodes.

 

Example 1:


Input: n = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]
Output: [8,12,6,10,10,10]
Explanation: The tree is shown above.
We can see that dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) + dist(0,5)
equals 1 + 1 + 2 + 2 + 2 = 8.
Hence, answer[0] = 8, and so on.
Example 2:


Input: n = 1, edges = []
Output: [0]
Example 3:


Input: n = 2, edges = [[1,0]]
Output: [1,1]
 

Constraints:

1 <= n <= 3 * 104
edges.length == n - 1
edges[i].length == 2
0 <= ai, bi < n
ai != bi
The given input represents a valid tree.

假如只有一个结点的话，由于不存在其他结点，所以是0。

若有两个结点，比如下面所示：

  0
 / 
1
对于结点0来说，结点0只有1个子结点，距离之和为1。

若有三个结点的话，比如：

  0
 / \
1   2
对于结点0来说，结点0有2个子结点，距离之和为2。

    0
   / \
  1   2
 / \
3   4
所有结点到结点0的距离之和为6，左子树中的3和4到结点1的距离之和为2，而左子树总共有3个结点，加起来是5。右子树中的其他结点到结点2的距离之和为0，右子树总共有1个结点，5加上1，正好是6
两个数组 count 和 res，其中 count[i] 表示以结点i为根结点的子树中结点的个数，res[i] 表示子树中其他结点到根结点i的距离之和。根据上面的规律，可以总结出下面两个式子：

count[root] = sum(count[i]) + 1
res[root] = sum(res[i]) + sum(count[i])
root 表示某个子树的根结点，i表示与root直接相连的子结点，res[root] 表示的是以 root 为根结点的子树中其他结点到根节点root 的距离之和，子树之外的结点到结点root的距离之和还没有统计。

上面的res[root] 表示的是以 root 为根结点的子树中其他结点到根节点root 的距离之和，那么子树之外的结点到结点root 的距离也得加上，才是最终要求的 res[i]。
虽然现在还没有更新所有的 res[i]，但是有一个结点的 res 值是正确的，就是整个树的根结点。
现在假设要计算 root 结点的一个子结点i的 res 值，即要计算所有其他结点到结点i的距离，此时知道以结点i为根结点的子树的总结点个数为 count[i]，
而这 count[i] 个结点之前在算 res[root] 时都算了结点i到结点root一次，但是现在只要计算到结点i的距离，所以这 count[i] 个结点的距离都少了1，
而其他所有的结点，共 N - count[i] 个，离结点i的距离比离 root 结点的距离都增加了1，所以 res[i] 的更新方法如下：

res[i] = res[root] - count[i] + N - count[i]

class Solution
{
public:
    vector<int> sumOfDistancesInTree(int N, vector<vector<int>> &edges)
    {
        vector<int> res(N), count(N);
        vector<vector<int>> tree(N);
        for (auto &edge : edges)
        {
            tree[edge[0]].push_back(edge[1]);
            tree[edge[1]].push_back(edge[0]);
        }
        helper(tree, 0, -1, count, res);
        helper2(tree, 0, -1, count, res);
        return res;
    }
    void helper(vector<vector<int>> &tree, int cur, int pre, vector<int> &count, vector<int> &res)
    {
        for (int i : tree[cur])
        {
            if (i == pre) continue;
            helper(tree, i, cur, count, res);
            count[cur] += count[i];
            res[cur] += res[i] + count[i];
        }
        ++count[cur];
    }
    void helper2(vector<vector<int>> &tree, int cur, int pre, vector<int> &count, vector<int> &res)
    {
        for (int i : tree[cur])
        {
            if (i == pre) continue;
            res[i] = res[cur] - count[i] + count.size() - count[i];
            helper2(tree, i, cur, count, res);
        }
    }
};


// Source https://leetcode.com/problems/image-overlap/

You are given two images, img1 and img2, represented as binary, square matrices of size n x n. A binary matrix has only 0s and 1s as values.

We translate one image however we choose by sliding all the 1 bits left, right, up, and/or down any number of units. 
We then place it on top of the other image. We can then calculate the overlap by counting the number of positions that have a 1 in both images.

Note also that a translation does not include any kind of rotation. Any 1 bits that are translated outside of the matrix borders are erased.

Return the largest possible overlap.

 

Example 1:


Input: img1 = [[1,1,0],[0,1,0],[0,1,0]], img2 = [[0,0,0],[0,1,1],[0,0,1]]
Output: 3
Explanation: We translate img1 to right by 1 unit and down by 1 unit.

The number of positions that have a 1 in both images is 3 (shown in red).

Example 2:

Input: img1 = [[1]], img2 = [[1]]
Output: 1
Example 3:

Input: img1 = [[0]], img2 = [[0]]
Output: 0
 

Constraints:

n == img1.length == img1[i].length
n == img2.length == img2[i].length
1 <= n <= 30
img1[i][j] is either 0 or 1.
img2[i][j] is either 0 or 1.

只有值为1的地方才有可能重叠，所以我们只关心A和B中值为1的地方，将其坐标位置分别存入两个数组 listA 和 listB 中。
对于A和B中的任意两个1的位置，肯定有一种方法能将A平移到B，平移的方法就是横向平移其横坐标之差，竖向平移其纵坐标之差。
我们用一个 HashMap 来建立坐标差值和其出现次数之间的映射，为了降维，将横纵坐标之差转为字符串，然后中加上个横杠分隔开，
这样只要组成了相同的字符串，那么一定就是在同一个平移上，计数器自增1。最后在 HashMap 中找到最大的值即可

class Solution
{
public:
    int largestOverlap(vector<vector<int>> &A, vector<vector<int>> &B)
    {
        int res = 0, n = A.size();
        vector<pair<int, int>> listA, listB;
        unordered_map<int, int> diffCnt;
        for (int i = 0; i < n; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                if (A[i][j] == 1) listA.push_back({i, j});
                if (B[i][j] == 1) listB.push_back({i, j});
            }
        }
        for (auto a : listA)
        {
            for (auto b : listB)
            {
                ++diffCnt[ (a.first - b.first) * 100 + (a.second - b.second) ];
            }
        }
        for (auto diff : diffCnt)
        {
            res = max(res, diff.second);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/rectangle-overlap/

An axis-aligned rectangle is represented as a list [x1, y1, x2, y2], where (x1, y1) is the coordinate of its bottom-left corner, and (x2, y2) is the coordinate of its top-right corner. 
Its top and bottom edges are parallel to the X-axis, and its left and right edges are parallel to the Y-axis.

Two rectangles overlap if the area of their intersection is positive. To be clear, two rectangles that only touch at the corner or edges do not overlap.

Given two axis-aligned rectangles rec1 and rec2, return true if they overlap, otherwise return false.

 

Example 1:

Input: rec1 = [0,0,2,2], rec2 = [1,1,3,3]
Output: true
Example 2:

Input: rec1 = [0,0,1,1], rec2 = [1,0,2,1]
Output: false
Example 3:

Input: rec1 = [0,0,1,1], rec2 = [2,2,3,3]
Output: false
 

Constraints:

rect1.length == 4
rect2.length == 4
-109 <= rec1[i], rec2[i] <= 109
rec1 and rec2 represent a valid rectangle with a non-zero area.

对于两条线段，它们相交的话可以是如下情况：

           x3             x4
           |--------------|
 |--------------|
 x1             x2
我们可以直观的看出一些关系： 

x1 < x3 < x2 && x3 < x2 < x4

可以稍微化简一下：

x1 < x4 && x3 < x2

就算是调换个位置：

           x1             x2
           |--------------|
 |--------------|
 x3             x4
还是能得到同样的关系：

x3 < x2 && x1 < x4

两个矩形重叠有四种情况：

1）两个矩形在矩形1的右上角重叠：

           ____________________x4,y4
          |                   |
   _______|______x2,y2        |
  |       |______|____________|
  |      x3,y3   |
  |______________|
 x1,y1

满足的条件为：x1 < x4 && x3 < x2 && y1 < y4 && y3 < y2

2）两个矩形在矩形1的左上角重叠：

   ___________________  x4,y4
  |                   |
  |            _______|____________x2,y2
  |___________|_______|           |
x3,y3         |                   | 
              |___________________|
            x1,y1
满足的条件为：x3 < x2 && x1 < x4 && y1 < y4 && y3 < y2

3）两个矩形在矩形1的左下角重叠：

           ____________________x2,y2
          |                   |
   _______|______x4,y4        |
  |       |______|____________|
  |      x1,y1   |
  |______________|
 x3,y3

满足的条件为：x3 < x2 && x1 < x4 && y3 < y2 && y1 < y4

4）两个矩形在矩形1的右下角重叠：

   ___________________  x2,y2
  |                   |
  |            _______|____________x4,y4
  |___________|_______|           |
x1,y1         |                   | 
              |___________________|
            x3,y3

满足的条件为：x1 < x4 && x3 < x2 && y3 < y2 && y1 < y4

仔细观察可以发现，上面四种情况的满足条件其实都是相同的，只不过顺序调换了位置，所以我们只要一行就可以解决问题了

[x1, y1, x2, y2]
[x3, y3, x4, y4]

class Solution
{
public:
    bool isRectangleOverlap(vector<int> &rec1, vector<int> &rec2)
    {
        return rec1[0] < rec2[2] && rec2[0] < rec1[2] && rec1[1] < rec2[3] && rec2[1] < rec1[3];
    }
};


// Source https://leetcode.com/problems/new-21-game/

Alice plays the following game, loosely based on the card game "21".

Alice starts with 0 points and draws numbers while she has less than k points. During each draw, she gains an integer number of points randomly from the range [1, maxPts], 
where maxPts is an integer. Each draw is independent and the outcomes have equal probabilities.

Alice stops drawing numbers when she gets k or more points.

Return the probability that Alice has n or fewer points.

Answers within 10-5 of the actual answer are considered accepted.

 

Example 1:

Input: n = 10, k = 1, maxPts = 10
Output: 1.00000
Explanation: Alice gets a single card, then stops.
Example 2:

Input: n = 6, k = 1, maxPts = 10
Output: 0.60000
Explanation: Alice gets a single card, then stops.
In 6 out of 10 possibilities, she is at or below 6 points.
Example 3:

Input: n = 21, k = 17, maxPts = 10
Output: 0.73278
 

Constraints:

0 <= k <= n <= 104
1 <= maxPts <= 104

每次拿到 [1, W] 范围内的任意一张牌的概率都是 1/W
假设W = 10, 我们拿到15点的概率是多少呢？
这时候肯定不止拿一张牌了，那么我们分析最后一张牌，可以取1到 10，那么能拿到 15 点就有十种情况，
之前共拿5点且最后一张拿10，之前共拿6点且最后一张拿9，之前拿共7点且最后一张拿8，...，之前共拿 14 点且最后一张拿1。
那么拿 15 点的概率就是把这十种的概率都加起来。由于是‘且’的关系，所以是概率相乘，可以将 1/W 提取出来

拿到x点的概率就可以归纳出下面的等式：

P(x) = 1/W * (P(x-1) + P(x-2) + P(x-W))

Alice starts with 0 points and draws numbers while she has less than k points. 
Alice stops drawing numbers when she gets k or more points.

最终的点数一定 >=K && <=K - 1 + W，求最终的点数<=N的概率

当 K=0 时，由于题目中说当前点数大于等于K，不能摸牌，那么一开始就不能摸牌了，而 0 <= K <= N，所以永远不会超过N，概率返回1。
还有就是当 N >= K+W 的时候，K-1+W < N，所以返回概率为1。

我们新建一个大小为 K+W 的一维数组 sums，其中 sum[i] 表示获得范围 [0, i] 内的点数的概率综合，初始化 sum[0] = P[0] = 1.0。
sum[i] = sum[i-1] + P[i]
假设N=21, K=17, W=10。先来说一下当点数不超过 10 的更新方法，这个其实比较简单，比如拿到七点的概率 P[7]，
根据我们上面对于 P(x) 的求法，我们知道可以拆分为下列多种情况：
先拿到六点的概率 (P[6]) 乘以再拿一个1点的概率 (1/W)，先拿到五点的概率 (P[5]) 乘以再拿一个2点的概率 (1/W)，...，先拿到一点的概率 (P[1]) 乘以再拿一个六点的概率 (1/W)，直接拿个七点的概率 (1/W)，

P[7] = 1/W * (P[6] + p[5] + ... + P[1] + P[0]) = 1/W * sum[6]

那么当 i > W 的时候，情况是不一样的，比如要求得到 15 点的概率 P[15]，那么还是根据上面求 P(x) 的方法，拆分为下面多种情况：
先拿到 14 点的概率 (P[14]) 乘以再拿一个1点的概率 (1/W)，先拿到 13 点的概率 (P[13]) 乘以再拿一个2点的概率 (1/W)，...，先拿到五点的概率 (P[5]) 乘以再拿一个 10 点的概率 (1/W)，那么统统加起来就是：

P[15] = 1/W * (P[14] + P[13] + ... + P[5]) = 1/W * (sum[14] - sum[4])

更新K以内的P值，和更新大于K的P值是稍有不同的，比如 P[20] 的更新方法就有所不同了，由于超过了 17 点就不能再摸牌了，所以 20 点只能由下列情况组成：
先拿到 16 点的概率 (P[16]) 再拿到一个4点的概率 (1/W)，先拿到 15 点的概率 (P[15]) 再拿到一个5点的概率 (1/W)，...，先拿到 10 点的概率 (P[10]) 再拿到一个 10 点的概率 (1/W)，

P[20] = 1/W * (P[16] + P[15] + P[14] + ... + P[10]) = 1/W * (sum[16] - sum[9])

如果K > W
P[i] = 1/W * sum[i-1]     (when i <= K && i <= W)
P[i] = 1/W * (sum[i-1] - sum[i-W-1])    (when i <= K && i > W)
P[i] = 1/W * (sum[K-1] - sum[i-W-1])    (when i > K && i > W)

如果K < W
P[i] = 1/W * sum[i-1]     (when i <= K && i <= W)
P[i] = 1/W * sum[K-1]     (when i > K && i <= W)
P[i] = 1/W * (sum[K-1] - sum[i-W-1])    (when i > K && i > W)

sum[i] = sum[i-1] + P[i]

K和W的大小关系其实是不知道的，不过我们可以把二者揉在一起，我们每次使用 i-1 和 K-1 中的较小值来算 P[i] 即可，这样就完美把K融到了W的分类情况中，
当 sum 数组计算完成之后，我们就直接按照上面的条件概率公式来算 P(<=N | >=K) = P(<=N && >=K) / P(>=K) = sumP(K, N) / sumP(K, K+W-1) 就行了

class Solution
{
public:
    double sum[20001];

    double new21Game(int N, int K, int W)
    {
        if (K == 0 || N >= K + W) return 1.0;
        sum[0] = 1.0;
        for (int i = 1; i < K + W; ++i)
        {
            int t = min(i - 1, K - 1);
            if (i <= W) sum[i] = sum[i - 1] + sum[t] / W;
            else sum[i] = sum[i - 1] + (sum[t] - sum[i - W - 1]) / W;
        }
        return (sum[N] - sum[K - 1]) / (sum[K + W - 1] - sum[K - 1]);
    }
};


// Source https://leetcode.com/problems/push-dominoes/

There are n dominoes in a line, and we place each domino vertically upright. In the beginning, we simultaneously push some of the dominoes either to the left or to the right.

After each second, each domino that is falling to the left pushes the adjacent domino on the left. Similarly, the dominoes falling to the right push their adjacent dominoes standing on the right.

When a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces.

For the purposes of this question, we will consider that a falling domino expends no additional force to a falling or already fallen domino.

You are given a string dominoes representing the initial state where:

dominoes[i] = 'L', if the ith domino has been pushed to the left,
dominoes[i] = 'R', if the ith domino has been pushed to the right, and
dominoes[i] = '.', if the ith domino has not been pushed.
Return a string representing the final state.

 

Example 1:

Input: dominoes = "RR.L"
Output: "RR.L"
Explanation: The first domino expends no additional force on the second domino.
Example 2:


Input: dominoes = ".L.R...LR..L.."
Output: "LL.RR.LLRRLL.."
 

Constraints:

n == dominoes.length
1 <= n <= 105
dominoes[i] is either 'L', 'R', or '.'.

某个位置的骨牌会不会倒，并且朝哪个方向倒，是由左右两边受到的力的大小决定的，那么可以分为下列四种情况：

1）R....R  ->  RRRRRR

这是当两个向右推的操作连在一起时，那么中间的骨牌毫无悬念的都要向右边倒去。

2）L....L  ->  LLLLLL

当两个向左推的操作连在一起时，那么中间的骨牌毫无悬念的都要向左边倒去。

3）L....R  ->  L....R

当左边界的骨牌向左推，右边界的骨牌向右推，那么中间的骨牌不会收到力，所以依然保持坚挺。

4）R....L  -> RRRLLL   or   R.....L  ->  RRR.LLL

当左边界的骨牌向右推，右边界的骨牌向左推时，就要看中间的骨牌个数了，若是偶数，那么对半分，若是奇数，那么最中间的骨牌保持站立，其余的对半分。 

class Solution
{
public:
    string pushDominoes(string dominoes)
    {
        string res = "";
        dominoes = "L" + dominoes + "R";
        int n = dominoes.length();
        for (int i = 0, j = 1; j < n; ++j)
        {
            if (dominoes[j] == '.') continue;
            int mid = j - i - 1;
            if (i > 0) res += dominoes[i];
            if (dominoes[i] == dominoes[j]) res += string(mid, dominoes[i]);
            else if (dominoes[i] == 'L' && dominoes[j] == 'R') res += string(mid, '.');
            else res += string(mid / 2, 'R') + string(mid % 2, '.') + string(mid / 2, 'L');
            i = j;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/similar-string-groups/

Two strings X and Y are similar if we can swap two letters (in different positions) of X, so that it equals Y. Also two strings X and Y are similar if they are equal.

For example, "tars" and "rats" are similar (swapping at positions 0 and 2), and "rats" and "arts" are similar, but "star" is not similar to "tars", "rats", or "arts".

Together, these form two connected groups by similarity: {"tars", "rats", "arts"} and {"star"}.  Notice that "tars" and "arts" are in the same group even though they are not similar.  
Formally, each group is such that a word is in the group if and only if it is similar to at least one other word in the group.

We are given a list strs of strings where every string in strs is an anagram of every other string in strs. How many groups are there?

 

Example 1:

Input: strs = ["tars","rats","arts","star"]
Output: 2
Example 2:

Input: strs = ["omv","ovm"]
Output: 1
 

Constraints:

1 <= strs.length <= 300
1 <= strs[i].length <= 300
strs[i] consists of lowercase letters only.
All words in strs have the same length and are anagrams of each other.

class Solution
{
public:
    vector<int> parent;
    vector<int> vsize;

    int find(int x)
    {
        if(parent[x] != x) parent[x] = find(parent[x]);
        return parent[x];
    }

    void join(int a, int b)
    {
        a = find(a);
        b = find(b);
        if(a == b) return;
        if(vsize[a] < vsize[b])
        {
            parent[a] = b;
            vsize[b] += vsize[a];
        }
        else if(vsize[b] < vsize[a])
        {
            parent[b] = a;
            vsize[a] += vsize[b];
        }
        else
        {
            parent[b] = a;
            vsize[a] += vsize[b];
        }
    }

    bool isSimilar(string &str1, string &str2)
    {
        for (int i = 0, cnt = 0; i < str1.size(); ++i)
        {
            if (str1[i] == str2[i]) continue;
            if (++cnt > 2) return false;
        }
        return true;
    }

    int numSimilarGroups(vector<string> &A)
    {
        int res = 0, n = A.size();
        parent = vector<int>(n);
        vsize = vector<int>(n, 1);
        for (int i = 0; i < n; ++i) parent[i] = i;
        for (int i = 1; i < n; ++i)
        {
            for (int j = 0; j < i; ++j)
            {
                if (!isSimilar(A[i], A[j])) continue;
                join(i, j);
            }
        }
        for (int i = 0; i < n; ++i)
        {
            if (parent[i] == i) ++res;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/magic-squares-in-grid/

A 3 x 3 magic square is a 3 x 3 grid filled with distinct numbers from 1 to 9 such that each row, column, and both diagonals all have the same sum.

Given a row x col grid of integers, how many 3 x 3 "magic square" subgrids are there?  (Each subgrid is contiguous).

 

Example 1:


Input: grid = [[4,3,8,4],[9,5,1,9],[2,7,6,2]]
Output: 1
Explanation: 
The following subgrid is a 3 x 3 magic square:

while this one is not:

In total, there is only one magic square inside the given grid.
Example 2:

Input: grid = [[8]]
Output: 0
 

Constraints:

row == grid.length
col == grid[i].length
1 <= row, col <= 10
0 <= grid[i][j] <= 15

A 3 x 3 magic square is a 3 x 3 grid filled with distinct numbers from 1 to 9 such that each row, column, and both diagonals all have the same sum.
每行 每列 对角线 反对角线 和都是15，且中间的数必须是5

class Solution
{
public:
    int numMagicSquaresInside(vector<vector<int>> &grid)
    {
        int m = grid.size(), n = grid[0].size(), res = 0;
        for (int i = 0; i < m - 2; ++i)
        {
            for (int j = 0; j < n - 2; ++j)
            {
                if (grid[i + 1][j + 1] == 5 && isValid(grid, i, j)) ++res;
            }
        }
        return res;
    }
    bool isValid(vector<vector<int>> &grid, int i, int j)
    {
        vector<int> cnt(10);
        for (int x = i; x <= i + 2; ++x)
        {
            for (int y = j; y <= j + 2; ++y)
            {
                int k = grid[x][y];
                if (k < 1 || k > 9 || cnt[k] == 1) return false;
                cnt[k] = 1;
            }
        }
        if (15 != grid[i][j] + grid[i][j + 1] + grid[i][j + 2]) return false;
        if (15 != grid[i + 1][j] + grid[i + 1][j + 1] + grid[i + 1][j + 2]) return false;
        if (15 != grid[i + 2][j] + grid[i + 2][j + 1] + grid[i + 2][j + 2]) return false;
        if (15 != grid[i][j] + grid[i + 1][j] + grid[i + 2][j]) return false;
        if (15 != grid[i][j + 1] + grid[i + 1][j + 1] + grid[i + 2][j + 1]) return false;
        if (15 != grid[i][j + 2] + grid[i + 1][j + 2] + grid[i + 2][j + 2]) return false;
        if (15 != grid[i][j] + grid[i + 1][j + 1] + grid[i + 2][j + 2]) return false;
        if (15 != grid[i + 2][j] + grid[i + 1][j + 1] + grid[i][j + 2]) return false;
        return true;
    }
};


// Source https://leetcode.com/problems/keys-and-rooms/

There are n rooms labeled from 0 to n - 1 and all the rooms are locked except for room 0. Your goal is to visit all the rooms. However, you cannot enter a locked room without having its key.

When you visit a room, you may find a set of distinct keys in it. Each key has a number on it, denoting which room it unlocks, and you can take all of them with you to unlock the other rooms.

Given an array rooms where rooms[i] is the set of keys that you can obtain if you visited room i, return true if you can visit all the rooms, or false otherwise.

 

Example 1:

Input: rooms = [[1],[2],[3],[]]
Output: true
Explanation: 
We visit room 0 and pick up key 1.
We then visit room 1 and pick up key 2.
We then visit room 2 and pick up key 3.
We then visit room 3.
Since we were able to visit every room, we return true.
Example 2:

Input: rooms = [[1,3],[3,0,1],[2],[0]]
Output: false
Explanation: We can not enter room number 2 since the only key that unlocks it is in that room.
 

Constraints:

n == rooms.length
2 <= n <= 1000
0 <= rooms[i].length <= 1000
1 <= sum(rooms[i].length) <= 3000
0 <= rooms[i][j] < n
All the values of rooms[i] are unique.

class Solution
{
public:
    bool canVisitAllRooms(vector<vector<int>> &rooms)
    {
        unordered_set<int> visited;
        queue<int> q;
        q.push(0);
        visited.insert(0);
        while (!q.empty())
        {
            int t = q.front();
            q.pop();
            for (int key : rooms[t])
            {
                if (visited.count(key)) continue;
                q.push(key);
                visited.insert(key);
                if (visited.size() == rooms.size()) return true;
            }
        }
        return visited.size() == rooms.size();
    }
};


// Source https://leetcode.com/problems/split-array-into-fibonacci-sequence/

You are given a string of digits num, such as "123456579". We can split it into a Fibonacci-like sequence [123, 456, 579].

Formally, a Fibonacci-like sequence is a list f of non-negative integers such that:

0 <= f[i] < 2^31, (that is, each integer fits in a 32-bit signed integer type),
f.length >= 3, and
f[i] + f[i + 1] == f[i + 2] for all 0 <= i < f.length - 2.
Note that when splitting the string into pieces, each piece must not have extra leading zeroes, except if the piece is the number 0 itself.

Return any Fibonacci-like sequence split from num, or return [] if it cannot be done.

 

Example 1:

Input: num = "1101111"
Output: [11,0,11,11]
Explanation: The output [110, 1, 111] would also be accepted.
Example 2:

Input: num = "112358130"
Output: []
Explanation: The task is impossible.
Example 3:

Input: num = "0123"
Output: []
Explanation: Leading zeroes are not allowed, so "01", "2", "3" is not valid.
 

Constraints:

1 <= num.length <= 200
num contains only digits.

class Solution
{
public:
    int n;
    vector<int> res;

    vector<int> splitIntoFibonacci(string S)
    {
        n = S.length();
        vector<int> out;
        helper(S, 0, out);
        return res;
    }
    void helper(string &S, int start, vector<int> &out)
    {
        if (!res.empty()) return;
        if (start >= n)
        {
            if (out.size() >= 3) res = out;
            return;
        }
        for (int i = start; i < n; ++i)
        {
            string cur = S.substr(start, i - start + 1);
            if ((cur.size() > 1 && cur[0] == '0') || cur.size() > 10) break;
            long num = stol(cur);
            if (num > INT_MAX) break;
            int len = out.size();
            if (len >= 2 && num != ((long)out[len - 1] + out[len - 2])) continue;
            out.push_back(num);
            helper(S, i + 1, out);
            out.pop_back();
        }
    }
};


// Source https://leetcode.com/problems/guess-the-word/

This is an interactive problem.

You are given an array of unique strings wordlist where wordlist[i] is 6 letters long, and one word in this list is chosen as secret.

You may call Master.guess(word) to guess a word. The guessed word should have type string and must be from the original list with 6 lowercase letters.

This function returns an integer type, representing the number of exact matches (value and position) of your guess to the secret word. 
Also, if your guess is not in the given wordlist, it will return -1 instead.

For each test case, you have exactly 10 guesses to guess the word. At the end of any number of calls, 
if you have made 10 or fewer calls to Master.guess and at least one of these guesses was secret, then you pass the test case.

 

Example 1:

Input: secret = "acckzz", wordlist = ["acckzz","ccbazz","eiowzz","abcczz"], numguesses = 10
Output: You guessed the secret word correctly.
Explanation:
master.guess("aaaaaa") returns -1, because "aaaaaa" is not in wordlist.
master.guess("acckzz") returns 6, because "acckzz" is secret and has all 6 matches.
master.guess("ccbazz") returns 3, because "ccbazz" has 3 matches.
master.guess("eiowzz") returns 2, because "eiowzz" has 2 matches.
master.guess("abcczz") returns 4, because "abcczz" has 4 matches.
We made 5 calls to master.guess and one of them was the secret, so we pass the test case.
Example 2:

Input: secret = "hamada", wordlist = ["hamada","khaled"], numguesses = 10
Output: You guessed the secret word correctly.
 

Constraints:

1 <= wordlist.length <= 100
wordlist[i].length == 6
wordlist[i] consist of lowercase English letters.
All the strings of wordlist are unique.
secret exists in wordlist.
numguesses == 10

class Solution
{
public:
    int checkString(string &word1, string &word2)
    {
        int counter = 0;
        for (int i = 0; i < 6; i++)
        {
            if (word1[i] == word2[i])
            {
                counter++;
            }
        }
        return counter;
    }

    void findSecretWord(vector<string> &wordlist, Master &master)
    {
        for (int i = 0; i < 10; i++)
        {
            string &guessWord = wordlist[rand() % wordlist.size()];
            int guessMatch = master.guess(guessWord);
            vector <string> newList;
            for (string &word : wordlist)
            {
                if (guessMatch == checkString(word, guessWord))
                {
                    newList.push_back(word);
                }
            }
            wordlist = newList;
        }
    }
};


// Source https://leetcode.com/problems/backspace-string-compare/

Given two strings s and t, return true if they are equal when both are typed into empty text editors. '#' means a backspace character.

Note that after backspacing an empty text, the text will continue empty.

 

Example 1:

Input: s = "ab#c", t = "ad#c"
Output: true
Explanation: Both s and t become "ac".
Example 2:

Input: s = "ab##", t = "c#d#"
Output: true
Explanation: Both s and t become "".
Example 3:

Input: s = "a#c", t = "b"
Output: false
Explanation: s becomes "c" while t becomes "b".
 

Constraints:

1 <= s.length, t.length <= 200
s and t only contain lowercase letters and '#' characters.

class Solution
{
public:
    bool backspaceCompare(string s, string t)
    {
        int n = s.length();
        stack<char> st;
        for(int i = 0; i < n; i++)
        {
            if(!st.empty() && s[i] == '#')
            {
                st.pop();
            }
            else if(s[i] != '#')
            {
                st.push(s[i]);
            }
        }
        int m = t.length();
        stack<char> tt;
        for(int i = 0; i < m; i++)
        {
            if(!tt.empty() && t[i] == '#')
            {
                tt.pop();
            }
            else if(t[i] != '#')
            {
                tt.push(t[i]);
            }
        }
        string str1, str2;
        while(!st.empty())
        {
            str1.push_back(st.top());
            st.pop();
        }
        while(!tt.empty())
        {
            str2.push_back(tt.top());
            tt.pop();
        }
        return str1 == str2;
    }
};


// Source https://leetcode.com/problems/longest-mountain-in-array/

You may recall that an array arr is a mountain array if and only if:

arr.length >= 3
There exists some index i (0-indexed) with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
Given an integer array arr, return the length of the longest subarray, which is a mountain. Return 0 if there is no mountain subarray.

 

Example 1:

Input: arr = [2,1,4,7,3,2,5]
Output: 5
Explanation: The largest mountain is [1,4,7,3,2] which has length 5.
Example 2:

Input: arr = [2,2,2]
Output: 0
Explanation: There is no mountain.
 

Constraints:

1 <= arr.length <= 104
0 <= arr[i] <= 104

class Solution
{
public:
    int longestMountain(vector<int> &A)
    {
        int res = 0, n = A.size();
        vector<int> left(n), right(n);
        for (int i = n - 2; i >= 0; --i)
        {
            if (A[i] > A[i + 1]) right[i] = right[i + 1] + 1;
        }
        for (int i = 1; i < n; ++i)
        {
            if (A[i] > A[i - 1]) left[i] = left[i - 1] + 1;
            if (left[i] > 0 && right[i] > 0) res = max(res, left[i] + right[i] + 1);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/hand-of-straights/

Alice has some number of cards and she wants to rearrange the cards into groups so that each group is of size groupSize, and consists of groupSize consecutive cards.

Given an integer array hand where hand[i] is the value written on the ith card and an integer groupSize, return true if she can rearrange the cards, or false otherwise.

 

Example 1:

Input: hand = [1,2,3,6,2,3,4,7,8], groupSize = 3
Output: true
Explanation: Alice's hand can be rearranged as [1,2,3],[2,3,4],[6,7,8]
Example 2:

Input: hand = [1,2,3,4,5], groupSize = 4
Output: false
Explanation: Alice's hand can not be rearranged into groups of 4.

 

Constraints:

1 <= hand.length <= 104
0 <= hand[i] <= 109
1 <= groupSize <= hand.length

class Solution
{
public:
    bool isNStraightHand(vector<int> &hand, int groupSize)
    {
        int n = hand.size();
        if (n % groupSize) return false;
        map<int, int> m;
        for (int val : hand) ++m[val];
        for (auto a : m)
        {
            if (a.second == 0) continue;
            for (int i = a.first; i < a.first + groupSize; ++i)
            {
                if (m[i] < a.second) return false;
                m[i] = m[i] - a.second;
            }
        }
        return true;
    }
};


// Source https://leetcode.com/problems/shortest-path-visiting-all-nodes/

You have an undirected, connected graph of n nodes labeled from 0 to n - 1. You are given an array graph where graph[i] is a list of all the nodes connected with node i by an edge.

Return the length of the shortest path that visits every node. You may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges.

 

Example 1:


Input: graph = [[1,2,3],[0],[0],[0]]
Output: 4
Explanation: One possible path is [1,0,2,0,3]
Example 2:


Input: graph = [[1],[0,2,4],[1,3,4],[2],[1,2]]
Output: 4
Explanation: One possible path is [0,1,4,2,3]
 

Constraints:

n == graph.length
1 <= n <= 12
0 <= graph[i].length < n
graph[i] does not contain i.
If graph[a] contains b, then graph[b] contains a.
The input graph is always connected.

class Solution
{
public:
    int shortestPathLength(vector<vector<int>> &g)
    {
        int n = g.size();
        vector<vector<bool>> visited(n, vector<bool>((1 << n), false));
        queue<array<int, 3>> q;
        for(int i = 0; i < n; i++)
        {
            q.push({i, (1 << i), 0});
            visited[i][(1 << i)] = true;
        }
        int target = (1 << n) - 1;
        while(!q.empty())
        {
            auto curr = q.front();
            q.pop();
            int u = curr[0], mask = curr[1], cost = curr[2];
            if(mask == target) return cost;
            for(auto v : g[u])
            {
                int new_mask = mask | (1 << v);
                int new_u = v;
                int new_cost = cost + 1;
                if(visited[new_u][new_mask]) continue;
                q.push({new_u, new_mask, new_cost});
                visited[new_u][new_mask] = true;
            }
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/shifting-letters/

You are given a string s of lowercase English letters and an integer array shifts of the same length.

Call the shift() of a letter, the next letter in the alphabet, (wrapping around so that 'z' becomes 'a').

For example, shift('a') = 'b', shift('t') = 'u', and shift('z') = 'a'.
Now for each shifts[i] = x, we want to shift the first i + 1 letters of s, x times.

Return the final string after all such shifts to s are applied.

 

Example 1:

Input: s = "abc", shifts = [3,5,9]
Output: "rpl"
Explanation: We start with "abc".
After shifting the first 1 letters of s by 3, we have "dbc".
After shifting the first 2 letters of s by 5, we have "igc".
After shifting the first 3 letters of s by 9, we have "rpl", the answer.
Example 2:

Input: s = "aaa", shifts = [1,2,3]
Output: "gfd"
 

Constraints:

1 <= s.length <= 105
s consists of lowercase English letters.
shifts.length == s.length
0 <= shifts[i] <= 109

class Solution
{
public:
    string shiftingLetters(string S, vector<int> &shifts)
    {
        int n = shifts.size();
        for (int i = n - 2; i >= 0; --i)
        {
            shifts[i] = (shifts[i] + shifts[i + 1]) % 26;
        }
        for (int i = 0; i < n; ++i)
        {
            S[i] = (S[i] - 'a' + shifts[i]) % 26 + 'a';
        }
        return S;
    }
};


// Source https://leetcode.com/problems/maximize-distance-to-closest-person/

You are given an array representing a row of seats where seats[i] = 1 represents a person sitting in the ith seat, and seats[i] = 0 represents that the ith seat is empty (0-indexed).

There is at least one empty seat, and at least one person sitting.

Alex wants to sit in the seat such that the distance between him and the closest person to him is maximized. 

Return that maximum distance to the closest person.

 

Example 1:

1 0 0 0 0 1
Input: seats = [1,0,0,0,1,0,1]
Output: 2
Explanation: 
If Alex sits in the second open seat (i.e. seats[2]), then the closest person has distance 2.
If Alex sits in any other open seat, the closest person has distance 1.
Thus, the maximum distance to the closest person is 2.
Example 2:

Input: seats = [1,0,0,0]
Output: 3
Explanation: 
If Alex sits in the last seat (i.e. seats[3]), the closest person is 3 seats away.
This is the maximum distance possible, so the answer is 3.
Example 3:

Input: seats = [0,1]
Output: 1
 

Constraints:

2 <= seats.length <= 2 * 104
seats[i] is 0 or 1.
At least one seat is empty.
At least one seat is occupied.

class Solution
{
public:
    int maxDistToClosest(vector<int> &seats)
    {
        int n = seats.size(), res = 0;
        int i = 0;
        for (; i < n && seats[i] == 0; ++i);
        if (i > 0) res = i;
        while (i < n)
        {
            for (; i < n && seats[i] == 1; ++i);
            if (i == n) break;
            int start = i;
            for (; i < n && seats[i] == 0; ++i);
            if (i == n) { res = max(res, n - start); break; }
            else res = max(res, (i - start + 1) / 2);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/rectangle-area-ii/

You are given a 2D array of axis-aligned rectangles. Each rectangle[i] = [xi1, yi1, xi2, yi2] denotes the ith rectangle 
where (xi1, yi1) are the coordinates of the bottom-left corner, and (xi2, yi2) are the coordinates of the top-right corner.

Calculate the total area covered by all rectangles in the plane. Any area covered by two or more rectangles should only be counted once.

Return the total area. Since the answer may be too large, return it modulo 109 + 7.

 

Example 1:


Input: rectangles = [[0,0,2,2],[1,0,2,3],[1,0,3,1]]
Output: 6
Explanation: A total area of 6 is covered by all three rectangales, as illustrated in the picture.
From (1,1) to (2,2), the green and red rectangles overlap.
From (1,0) to (2,3), all three rectangles overlap.
Example 2:

Input: rectangles = [[0,0,1000000000,1000000000]]
Output: 49
Explanation: The answer is 1018 modulo (109 + 7), which is 49.
 

Constraints:

1 <= rectangles.length <= 200
rectanges[i].length == 4
0 <= xi1, yi1, xi2, yi2 <= 109

class Solution
{
public:
    int rectangleArea(vector<vector<int>> &rectangles)
    {
        map<int, vector<pair<int, int>>> groupMap;
        for (auto &a : rectangles)
        {
            groupMap[a[0]].push_back({a[1], 1});
            groupMap[a[0]].push_back({a[3], -1});
            groupMap[a[2]].push_back({a[1], -1});
            groupMap[a[2]].push_back({a[3], 1});
        }
        map<int, int> cntMap;
        long res = 0, pre_x = 0, height = 0, M = 1e9 + 7;
        for (auto &group : groupMap)
        {
            res = (res + (group.first - pre_x) * height) % M;
            for (auto a : group.second)
            {
                cntMap[a.first] += a.second;
            }
            height = 0;
            long start = 0, cnt = 0;
            for (auto a : cntMap)
            {
                if (a.second == 0) continue;
                if (cnt == 0) start = a.first;
                cnt += a.second;
                if (cnt == 0) height += a.first - start;
            }
            pre_x = group.first;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/loud-and-rich/

There is a group of n people labeled from 0 to n - 1 where each person has a different amount of money and a different level of quietness.

You are given an array richer where richer[i] = [ai, bi] indicates that ai has more money than bi and an integer array quiet where quiet[i] is the quietness of the ith person. 
All the given data in richer are logically correct (i.e., the data will not lead you to a situation where x is richer than y and y is richer than x at the same time).

Return an integer array answer where answer[x] = y if y is the least quiet person (that is, the person y with the smallest value of quiet[y]) among all people 
who definitely have equal to or more money than the person x.

 

Example 1:

Input: richer = [[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]], quiet = [3,2,5,4,6,1,7,0]
Output: [5,5,2,5,4,5,6,7]
Explanation: 
answer[0] = 5.
Person 5 has more money than 3, which has more money than 1, which has more money than 0.
The only person who is quieter (has lower quiet[x]) is person 7, but it is not clear if they have more money than person 0.
answer[7] = 7.
Among all people that definitely have equal to or more money than person 7 (which could be persons 3, 4, 5, 6, or 7), the person who is the quietest (has lower quiet[x]) is person 7.
The other answers can be filled out with similar reasoning.
Example 2:

Input: richer = [], quiet = [0]
Output: [0]
 

Constraints:

n == quiet.length
1 <= n <= 500
0 <= quiet[i] < n
All the values of quiet are unique.
0 <= richer.length <= n * (n - 1) / 2
0 <= ai, bi < n
ai != bi
All the pairs of richer are unique.
The observations in richer are all logically consistent.

class Solution
{
public:
    vector<int> loudAndRich(vector<vector<int>> &richer, vector<int> &quiet)
    {
        int n = quiet.size();
        vector<int> res(n, -1);
        unordered_map<int, vector<int>> findRicher;
        for (auto &a : richer) findRicher[a[1]].push_back(a[0]);
        for (int i = 0; i < n; ++i)
        {
            helper(findRicher, quiet, i, res);
        }
        return res;
    }
    int helper(unordered_map<int, vector<int>> &findRicher, vector<int> &quiet, int i, vector<int> &res)
    {
        if (res[i] != -1) return res[i];
        res[i] = i;
        for (int j : findRicher[i])
        {
            int idx = helper(findRicher, quiet, j, res);
            if (quiet[res[i]] > quiet[idx])
            {
                res[i] = idx;
            }
        }
        return res[i];
    }
};


// Source https://leetcode.com/problems/peak-index-in-a-mountain-array/

Let's call an array arr a mountain if the following properties hold:

arr.length >= 3
There exists some i with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... arr[i-1] < arr[i]
arr[i] > arr[i+1] > ... > arr[arr.length - 1]
Given an integer array arr that is guaranteed to be a mountain, return any i such that arr[0] < arr[1] < ... arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1].

 

Example 1:

Input: arr = [0,1,0]
Output: 1
Example 2:

Input: arr = [0,2,1,0]
Output: 1
Example 3:

Input: arr = [0,10,5,2]
Output: 1
 

Constraints:

3 <= arr.length <= 104
0 <= arr[i] <= 106
arr is guaranteed to be a mountain array.

class Solution
{
public:
    int peakIndexInMountainArray(vector<int> &A)
    {
        int n = A.size(), left = 0, right = n - 1;
        while (left < right)
        {
            int mid = left + (right - left) / 2;
            if (A[mid] < A[mid + 1]) left = mid + 1;
            else right = mid;
        }
        return right;
    }
};


// Source https://leetcode.com/problems/car-fleet/

There are n cars going to the same destination along a one-lane road. The destination is target miles away.

You are given two integer array position and speed, both of length n, where position[i] is the position of the ith car and speed[i] is the speed of the ith car (in miles per hour).

A car can never pass another car ahead of it, but it can catch up to it and drive bumper to bumper at the same speed. 
The faster car will slow down to match the slower car's speed. The distance between these two cars is ignored (i.e., they are assumed to have the same position).

A car fleet is some non-empty set of cars driving at the same position and same speed. Note that a single car is also a car fleet.

If a car catches up to a car fleet right at the destination point, it will still be considered as one car fleet.

Return the number of car fleets that will arrive at the destination.

 

Example 1:

Input: target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]
Output: 3
Explanation:
The cars starting at 10 (speed 2) and 8 (speed 4) become a fleet, meeting each other at 12.
The car starting at 0 does not catch up to any other car, so it is a fleet by itself.
The cars starting at 5 (speed 1) and 3 (speed 3) become a fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target.
Note that no other cars meet these fleets before the destination, so the answer is 3.
Example 2:

Input: target = 10, position = [3], speed = [3]
Output: 1
Explanation: There is only one car, hence there is only one fleet.
Example 3:

Input: target = 100, position = [0,2,4], speed = [4,2,1]
Output: 1
Explanation:
The cars starting at 0 (speed 4) and 2 (speed 2) become a fleet, meeting each other at 4. The fleet moves at speed 2.
Then, the fleet (speed 2) and the car starting at 4 (speed 1) become one fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target.
 

Constraints:

n == position.length == speed.length
1 <= n <= 105
0 < target <= 106
0 <= position[i] < target
All the values of position are unique.
0 < speed[i] <= 106

假如车B在车A的后面，而车B到终点线的时间小于等于车A，那么就知道车A和B一定会组成车队一起过线。
这样的话，就可以从离终点最近的一辆车开始，先算出其撞线的时间，然后再一次遍历身后的车，
若后面的车撞线的时间小于等于前面的车的时间，则会组成车队。反之，若大于前面的车的时间，则说明无法追上前面的车，于是自己会形成一个新的车队，且是车头，则结果 res 自增1即可。

class Solution
{
public:
    int carFleet(int target, vector<int> &position, vector<int> &speed)
    {
        priority_queue<pair<int, double>> q;
        for (int i = 0; i < position.size(); ++i)
        {
            double timeNeeded = (double)(target - position[i]) / speed[i];
            q.push({position[i], timeNeeded});
        }
        int res = 0;
        double cur = 0;
        while (!q.empty())
        {
            auto t = q.top();
            q.pop();
            if (t.second <= cur) continue;
            cur = t.second;
            ++res;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/k-similar-strings/

Strings s1 and s2 are k-similar (for some non-negative integer k) if we can swap the positions of two letters in s1 exactly k times so that the resulting string equals s2.

Given two anagrams s1 and s2, return the smallest k for which s1 and s2 are k-similar.

 

Example 1:

Input: s1 = "ab", s2 = "ba"
Output: 1
Example 2:

Input: s1 = "abc", s2 = "bca"
Output: 2
 

Constraints:

1 <= s1.length <= 20
s2.length == s1.length
s1 and s2 contain only lowercase letters from the set {'a', 'b', 'c', 'd', 'e', 'f'}.
s2 is an anagram of s1.

A和B是异构词，这表明A和B中的字符的种类及其个数都相同，就是排列顺序不同，则A经过交换是一定能变为B的，而且交换的次数在区间 [0, n-1] 内，n是A的长度。

class Solution
{
public:
    int kSimilarity(string A, string B)
    {
        queue<string> q;
        unordered_set<string> visited;
        q.push(A);
        visited.insert(A);
        int res = 0, n = A.size();
        while (!q.empty())
        {
            int sz = q.size();
            for (int k = 0; k < sz; ++k)
            {
                string cur = q.front();
                q.pop();
                if (cur == B) return res;
                int i = 0;
                while (i < n && cur[i] == B[i]) ++i;
                for (int j = i + 1; j < n; ++j)
                {
                    if (cur[j] == B[j] || cur[j] != B[i]) continue;
                    swap(cur[i], cur[j]);
                    if (!visited.count(cur))
                    {
                        q.push(cur);
                        visited.insert(cur);
                    }
                    swap(cur[i], cur[j]);
                }
            }
            ++res;
        }
        return -1;
    }
};

class Solution
{
public:
    int kSimilarity(string A, string B)
    {
        int n = A.size(), res = n - 1;
        for (int i = 0; i < n; ++i)
        {
            if (A[i] == B[i]) continue;
            vector<int> matches;
            for (int j = i + 1; j < n; ++j)
            {
                if (A[j] == B[j] || A[j] != B[i]) continue;
                matches.push_back(j);
                if (A[i] != B[j]) continue;
                swap(A[i], A[j]);
                return 1 + kSimilarity(A.substr(i + 1), B.substr(i + 1));
            }
            for (int j : matches)
            {
                swap(A[i], A[j]);
                res = min(res, 1 + kSimilarity(A.substr(i + 1), B.substr(i + 1)));
                swap(A[i], A[j]);
            }
            return res;
        }
        return 0;
    }
};


// Source https://leetcode.com/problems/exam-room/

There is an exam room with n seats in a single row labeled from 0 to n - 1.

When a student enters the room, they must sit in the seat that maximizes the distance to the closest person. 
If there are multiple such seats, they sit in the seat with the lowest number. If no one is in the room, then the student sits at seat number 0.

Design a class that simulates the mentioned exam room.

Implement the ExamRoom class:

ExamRoom(int n) Initializes the object of the exam room with the number of the seats n.
int seat() Returns the label of the seat at which the next student will set.
void leave(int p) Indicates that the student sitting at seat p will leave the room. It is guaranteed that there will be a student sitting at seat p.
 

Example 1:

Input
["ExamRoom", "seat", "seat", "seat", "seat", "leave", "seat"]
[[10], [], [], [], [], [4], []]
Output
[null, 0, 9, 4, 2, null, 5]

Explanation
ExamRoom examRoom = new ExamRoom(10);
examRoom.seat(); // return 0, no one is in the room, then the student sits at seat number 0.
examRoom.seat(); // return 9, the student sits at the last seat number 9.
examRoom.seat(); // return 4, the student sits at the last seat number 4.
examRoom.seat(); // return 2, the student sits at the last seat number 2.
examRoom.leave(4);
examRoom.seat(); // return 5, the student sits at the last seat number 5.

 

Constraints:

1 <= n <= 109
It is guaranteed that there is a student sitting at seat p.
At most 104 calls will be made to seat and leave.

class ExamRoom
{
public:
    int n;
    set<int> spots;

    ExamRoom(int N)
    {
        n = N;
    }

    int seat()
    {
        int start = 0, mx = 0, idx = 0;
        for (int i : spots)
        {
            if (start == 0)
            {
                if (mx < i - start)
                {
                    mx = i - start;
                    idx = 0;
                }
            }
            else
            {
                if (mx < (i - start + 1) / 2)
                {
                    mx = (i - start + 1) / 2;
                    idx = start + mx - 1;
                }
            }
            start = i + 1;
        }
        if (start > 0 && mx < n - start)
        {
            mx = n - start;
            idx = n - 1;
        }
        spots.insert(idx);
        return idx;
    }

    void leave(int p)
    {
        spots.erase(p);
    }
};


// Source https://leetcode.com/problems/score-of-parentheses/

Given a balanced parentheses string s, return the score of the string.

The score of a balanced parentheses string is based on the following rule:

"()" has score 1.
AB has score A + B, where A and B are balanced parentheses strings.
(A) has score 2 * A, where A is a balanced parentheses string.
 

Example 1:

Input: s = "()"
Output: 1
Example 2:

Input: s = "(())"
Output: 2
Example 3:

Input: s = "()()"
Output: 2
 

Constraints:

2 <= s.length <= 50
s consists of only '(' and ')'.
s is a balanced parentheses string.

class Solution
{
public:
    int scoreOfParentheses(string S)
    {
        int n = S.length();
        if (n == 2) return 1;
        int res = 0;
        int i = 0;
        while (i < n)
        {
            int pos = i + 1, cnt = 1;
            while (pos < n)
            {
                if (S[pos] == '(') ++cnt;
                else --cnt;
                if (cnt == 0) break;
                ++pos;
            }
            if (pos == (i + 1)) res += 1;
            else
            {
                int cur = scoreOfParentheses(S.substr(i + 1, pos - i - 1));
                res += (2 * cur);
            }
            i = pos +  1;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/minimum-cost-to-hire-k-workers/

There are n workers. You are given two integer arrays quality and wage where quality[i] is the quality of the ith worker and wage[i] is the minimum wage expectation for the ith worker.

We want to hire exactly k workers to form a paid group. To hire a group of k workers, we must pay them according to the following rules:

Every worker in the paid group should be paid in the ratio of their quality compared to other workers in the paid group.
Every worker in the paid group must be paid at least their minimum wage expectation.
Given the integer k, return the least amount of money needed to form a paid group satisfying the above conditions. Answers within 10-5 of the actual answer will be accepted.

 

Example 1:

Input: quality = [10,20,5], wage = [70,50,30], k = 2
Output: 105.00000
Explanation: We pay 70 to 0th worker and 35 to 2nd worker.
Example 2:

Input: quality = [3,1,10,10,1], wage = [4,8,2,2,7], k = 3
Output: 30.66667
Explanation: We pay 4 to 0th worker, 13.33333 to 2nd and 3rd workers separately.
 

Constraints:

n == quality.length == wage.length
1 <= k <= n <= 104
1 <= quality[i], wage[i] <= 104

两个员工A和B，若A的能力值是B的2倍，那么A的薪水就要是B的两倍
K个员工的薪水和能力比例值都是相同的，只要能够算出这个最低的薪水能力比例值，乘以K个员工的总能力值，就可以得到最少的总花费。
每个员工的薪水不能低于其期望值，最低的薪水能力比例值不能小于任何一个员工自己的比例值（期望值除以能力值）。

class Solution
{
public:
    double mincostToHireWorkers(vector<int> &quality, vector<int> &wage, int K)
    {
        int n = quality.size();
        vector<pair<double, int>> workers;
        for (int i = 0; i < n; ++i)
        {
            workers.push_back({double(wage[i]) / quality[i], quality[i]});
        }
        sort(workers.begin(), workers.end());
        priority_queue<int> pq;
        double res = DBL_MAX;
        int qsum = 0;
        for (auto worker : workers)
        {
            qsum += worker.second;
            pq.push(worker.second);
            if (pq.size() > K)
            {
                qsum -= pq.top();
                pq.pop();
            }
            if (pq.size() == K)
            {
                res = min(res, qsum * worker.first);
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/mirror-reflection/

There is a special square room with mirrors on each of the four walls. Except for the southwest corner, there are receptors on each of the remaining corners, numbered 0, 1, and 2.

The square room has walls of length p and a laser ray from the southwest corner first meets the east wall at a distance q from the 0th receptor.

Given the two integers p and q, return the number of the receptor that the ray meets first.

The test cases are guaranteed so that the ray will meet a receptor eventually.

2	1

	   q

空	0
      p


Example 1:


Input: p = 2, q = 1
Output: 2
Explanation: The ray meets receptor 2 the first time it gets reflected back to the left wall.
Example 2:

Input: p = 3, q = 1
Output: 1
 

Constraints:

1 <= q <= p <= 1000

p/q = 3 时，若我们在右边增加大小相同的2个房间，在第三个房间的时候，则激光会到达右上角
由于第二个房间和原始房间是镜面对称的，第三个房间和第二个房间也是镜面对称的，则第三个房间和原始房间就是一样的了
偶数个房间的布局和原始房间是镜面对称的，奇数个房间的布局和原始房间是一样的
p/q = 4 时，若我们在右边增加大小相同的3个房间，在第四个房间的时候，激光到达了右上角
当 p/q = 3/2 时，我们需要复制出一个 2x3 大小的矩阵出来，在水平方向共有三个房间，是奇数则水平方向和原始房间布局一致，
但是竖直方向也复制了房间，那么竖直方向有偶数个房间，则竖直方向和原始房间成镜面反射，则最右上角为接收器0。

分析到这里，我们应该已经能总结出规律如下了：

p为奇数，q为奇数时，到达接收器1。
p为奇数，q为偶数时，到达接收器0。
p为偶数，q为奇数时，到达接收器2。

若p和q均为偶数，则同时除以2，直到不同时为偶数时，然后再带入上面归纳的三种情况求解即可

class Solution
{
public:
    int mirrorReflection(int p, int q)
    {
        while (p % 2 == 0 && q % 2 == 0)
        {
            p /= 2;
            q /= 2;
        }
        if (p % 2 == 0) return 2;
        if (q % 2 == 0) return 0;
        return 1;
    }
};


// Source https://leetcode.com/problems/buddy-strings/

Given two strings s and goal, return true if you can swap two letters in s so the result is equal to goal, otherwise, return false.

Swapping letters is defined as taking two indices i and j (0-indexed) such that i != j and swapping the characters at s[i] and s[j].

For example, swapping at indices 0 and 2 in "abcd" results in "cbad".
 

Example 1:

Input: s = "ab", goal = "ba"
Output: true
Explanation: You can swap s[0] = 'a' and s[1] = 'b' to get "ba", which is equal to goal.
Example 2:

Input: s = "ab", goal = "ab"
Output: false
Explanation: The only letters you can swap are s[0] = 'a' and s[1] = 'b', which results in "ba" != goal.
Example 3:

Input: s = "aa", goal = "aa"
Output: true
Explanation: You can swap s[0] = 'a' and s[1] = 'a' to get "aa", which is equal to goal.
 

Constraints:

1 <= s.length, goal.length <= 2 * 104
s and goal consist of lowercase letters.

class Solution
{
public:
    bool buddyStrings(string A, string B)
    {
        if (A.size() != B.size()) return false;
        if (A == B && unordered_set<char>(A.begin(), A.end()).size() < A.size()) return true;
        vector<int> diff;
        for (int i = 0; i < A.size(); ++i)
        {
            if (A[i] != B[i]) diff.push_back(i);
        }
        return diff.size() == 2 && A[diff[0]] == B[diff[1]] && A[diff[1]] == B[diff[0]];
    }
};


// Source https://leetcode.com/problems/lemonade-change/

At a lemonade stand, each lemonade costs $5. Customers are standing in a queue to buy from you and order one at a time (in the order specified by bills). 
Each customer will only buy one lemonade and pay with either a $5, $10, or $20 bill. You must provide the correct change to each customer 
so that the net transaction is that the customer pays $5.

Note that you do not have any change in hand at first.

Given an integer array bills where bills[i] is the bill the ith customer pays, return true if you can provide every customer with the correct change, or false otherwise.

 

Example 1:

Input: bills = [5,5,5,10,20]
Output: true
Explanation: 
From the first 3 customers, we collect three $5 bills in order.
From the fourth customer, we collect a $10 bill and give back a $5.
From the fifth customer, we give a $10 bill and a $5 bill.
Since all customers got correct change, we output true.
Example 2:

Input: bills = [5,5,10,10,20]
Output: false
Explanation: 
From the first two customers in order, we collect two $5 bills.
For the next two customers in order, we collect a $10 bill and give back a $5 bill.
For the last customer, we can not give the change of $15 back because we only have two $10 bills.
Since not every customer received the correct change, the answer is false.
 

Constraints:

1 <= bills.length <= 105
bills[i] is either 5, 10, or 20.

10 刀的钞票需要5刀的找零，20 刀的钞票可以用1张 10 刀和1张5刀，或者3张5刀的钞票，当前5刀的个数一定不能小于 10 刀和 20 刀的个数之后，否则无法成功找零。
由于 20 刀可以用 10 刀来找零，每个 10 刀可以节省两个5刀，但是为了获得每张 10 刀，我们还得付出一张5刀的找零，所以实际上用 10 刀来找零只能省下1张5刀钞票，
但是假如 10 刀的个数不够，那么每张 20 刀的钞票还是需要3张5刀的钞票来找零的，所以判断若5刀钞票的个数小于 20 刀钞票个数的三倍减去 10 刀钞票的个数，直接返回 false

class Solution
{
public:
    bool lemonadeChange(vector<int> &bills)
    {
        int cnt[30] = {0};
        for (int bill : bills)
        {
            ++cnt[bill];
            if (cnt[5] < cnt[20] + cnt[10]) return false;
            if (cnt[5] < 3 * cnt[20] - cnt[10]) return false;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/score-after-flipping-matrix/

You are given an m x n binary matrix grid.

A move consists of choosing any row or column and toggling each value in that row or column (i.e., changing all 0's to 1's, and all 1's to 0's).

Every row of the matrix is interpreted as a binary number, and the score of the matrix is the sum of these numbers.

Return the highest possible score after making any number of moves (including zero moves).

 

Example 1:


Input: grid = [[0,0,1,1],[1,0,1,0],[1,1,0,0]]
Output: 39
Explanation: 0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39
Example 2:

Input: grid = [[0]]
Output: 1
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 20
grid[i][j] is either 0 or 1.

当最高位是0的时候，无论如何都是需要翻转当前行的，对于 mxn 的数组来说，每行的二进制数共有n位，最高位是1的话，就是 1<<(n-1)，那么共有m行，所以至少能将 m*(1<<(n-1)) 这么大的值收入囊中，
既然最高值一定要是1，那么每一行的翻转情况就确定了，若还想增大数字之和，就只能看各列是否还能翻转了，而且是从次高位列开始看，因为最高位列必须保证都是1。
由于每一行的翻转情况已经确定了，那么如何才能确定其他位到底是0还是1呢，此时就要看它跟最高位是否相同了，
若相同的话，不管最高位初始时是0还是1，最终都要变成1，那么当前位一定最终也会变成1，而一旦跟最高位相反，那么最后一定会是0。
我们翻转当前列的条件肯定是希望翻转之后1的个数要更多一些，这样值才能增加，所以就要统计每列当前的1的个数，若小于0的个数，才进行翻转，然后乘以该列的值，对于第j列，其值为 1<<(n-1-j)

class Solution
{
public:
    int matrixScore(vector<vector<int>> &A)
    {
        int m = A.size(), n = A[0].size(), res = (1 << (n - 1)) * m;
        for (int j = 1; j < n; ++j)
        {
            int cnt = 0;
            for (int i = 0; i < m; ++i)
            {
                cnt += (A[i][j] == A[i][0]);
            }
            res += max(cnt, m - cnt) * (1 << (n - 1 - j));
        }
        return res;
    }
};


// Source https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k/

Given an integer array nums and an integer k, return the length of the shortest non-empty subarray of nums with a sum of at least k. If there is no such subarray, return -1.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [1], k = 1
Output: 1
Example 2:

Input: nums = [1,2], k = 4
Output: -1
Example 3:

Input: nums = [2,-1,2], k = 3
Output: 3
 

Constraints:

1 <= nums.length <= 105
-105 <= nums[i] <= 105
1 <= k <= 109

class Solution
{
public:
    int shortestSubarray(vector<int> &nums, int k)
    {
        int n = nums.size();
        vector<long long> sum(n, 0L);
        sum[0] = nums[0];
        for (int i = 1; i < n; ++i) sum[i] = sum[i - 1] + nums[i];
        int minL = INT_MAX;
        deque<int>dq;
        for(int i = 0; i < n; i++)
        {
            if(sum[i] >= k) minL = min(minL, i + 1);
            while(!dq.empty() && sum[i] - sum[dq.front()] >= k)
            {
                minL = min(minL, i - dq.front());
                dq.pop_front();
            }

            while(!dq.empty() && sum[dq.back()] >= sum[i]) dq.pop_back();
            dq.push_back(i);
        }
        return minL == INT_MAX ? -1 : minL;
    }
};


// Source https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/

Given the root of a binary tree, the value of a target node target, and an integer k, return an array of the values of all nodes that have a distance k from the target node.

You can return the answer in any order.

 

Example 1:


Input: root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, k = 2
Output: [7,4,1]
Explanation: The nodes that are a distance 2 from the target node (with value 5) have values 7, 4, and 1.
Example 2:

Input: root = [1], target = 1, k = 3
Output: []
 

Constraints:

The number of nodes in the tree is in the range [1, 500].
0 <= Node.val <= 500
All the values Node.val are unique.
target is the value of one of the nodes in the tree.
0 <= k <= 1000

class Solution
{
public:
    void findParent(TreeNode *node, unordered_map<TreeNode *, TreeNode *> &parent)
    {
        if (!node) return;
        if (node->left) parent[node->left] = node;
        if (node->right) parent[node->right] = node;
        findParent(node->left, parent);
        findParent(node->right, parent);
    }

    void helper(TreeNode *node, int K, unordered_map<TreeNode *, TreeNode *> &parent, unordered_set<TreeNode *> &visited, vector<int> &res)
    {
        if (visited.count(node)) return;
        visited.insert(node);
        if (K == 0)
        {
            res.push_back(node->val);
            return;
        }
        if (node->left) helper(node->left, K - 1, parent, visited, res);
        if (node->right) helper(node->right, K - 1, parent, visited, res);
        if (parent[node]) helper(parent[node], K - 1, parent, visited, res);
    }

    vector<int> distanceK(TreeNode *root, TreeNode *target, int K)
    {
        unordered_map<TreeNode *, TreeNode *> parent;
        findParent(root, parent);
        unordered_set<TreeNode *> visited;
        vector<int> res;
        helper(target, K, parent, visited, res);
        return res;
    }
};


// Source https://leetcode.com/problems/shortest-path-to-get-all-keys/

You are given an m x n grid grid where:

'.' is an empty cell.
'#' is a wall.
'@' is the starting point.
Lowercase letters represent keys.
Uppercase letters represent locks.
You start at the starting point and one move consists of walking one space in one of the four cardinal directions. You cannot walk outside the grid, or walk into a wall.

If you walk over a key, you can pick it up and you cannot walk over a lock unless you have its corresponding key.

For some 1 <= k <= 6, there is exactly one lowercase and one uppercase letter of the first k letters of the English alphabet in the grid. 
This means that there is exactly one key for each lock, and one lock for each key; and also that the letters used to represent the keys and locks were chosen in the same order as the English alphabet.

Return the lowest number of moves to acquire all keys. If it is impossible, return -1.

 

Example 1:


Input: grid = ["@.a.#","###.#","b.A.B"]
Output: 8
Explanation: Note that the goal is to obtain all the keys not to open all the locks.
Example 2:


Input: grid = ["@..aA","..B#.","....b"]
Output: 6
Example 3:


Input: grid = ["@Aa"]
Output: -1
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 30
grid[i][j] is either an English letter, '.', '#', or '@'.
The number of keys in the grid is in the range [1, 6].
Each key in the grid is unique.
Each key in the grid has a matching lock.

class Solution
{
public:
    int shortestPathAllKeys(vector<string> &grid)
    {
        int m = grid.size(), n = grid[0].size(), keyCnt = 0;
        queue<pair<int, int>> q;
        unordered_set<long> visited;
        int dirX[4] = {-1, 0, 1, 0};
        int dirY[4] = {0, 1, 0, -1};
        for (int i = 0; i < m; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                if (grid[i][j] == '@')
                {
                    q.push({i * n + j, 0});
                    visited.insert((i * n + j + 1) * 1000 + 0);
                }
                if (grid[i][j] >= 'a' && grid[i][j] <= 'f') ++keyCnt;
            }
        }
        int res = 0;
        int target = (1 << keyCnt) - 1;
        while (!q.empty())
        {
            int sz = q.size();
            for (int i =0; i < sz; ++i)
            {
                auto p = q.front();
                q.pop();
                int t = p.first, curKeys = p.second;
                if (curKeys == target) return res;
                for (int k = 0; k < 4; ++k)
                {
                    int x = t / n + dirX[k], y = t % n + dirY[k];
                    if (x < 0 || x >= m || y < 0 || y >= n) continue;
                    char c = grid[x][y];
                    if (c == '#') continue;
                    int keys = curKeys;
                    if (c >= 'A' && c <= 'F' && (keys & (1 << (c - 'A'))) == 0) continue;
                    if (c >= 'a' && c <= 'f') keys |= 1 << (c - 'a');
                    long val = (x * n + y + 1) * 1000 + keys;
                    if (!visited.count(val))
                    {
                        q.push({x * n + y, keys});
                        visited.insert(val);
                    }
                }
            }
            ++res;
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes/

Given the root of a binary tree, the depth of each node is the shortest distance to the root.

Return the smallest subtree such that it contains all the deepest nodes in the original tree.

A node is called the deepest if it has the largest depth possible among any node in the entire tree.

The subtree of a node is a tree consisting of that node, plus the set of all descendants of that node.

 

Example 1:


Input: root = [3,5,1,6,2,0,8,null,null,7,4]
Output: [2,7,4]
Explanation: We return the node with value 2, colored in yellow in the diagram.
The nodes coloured in blue are the deepest nodes of the tree.
Notice that nodes 5, 3 and 2 contain the deepest nodes in the tree but node 2 is the smallest subtree among them, so we return it.
Example 2:

Input: root = [1]
Output: [1]
Explanation: The root is the deepest node in the tree.
Example 3:

Input: root = [0,1,3,null,2]
Output: [2]
Explanation: The deepest node in the tree is 2, the valid subtrees are the subtrees of nodes 2, 1 and 0 but the subtree of node 2 is the smallest.
 

Constraints:

The number of nodes in the tree will be in the range [1, 500].
0 <= Node.val <= 500
The values of the nodes in the tree are unique.

class Solution
{
public:
    unordered_map<TreeNode *, int> mp;

    int depth(TreeNode *node)
    {
        if (!node) return 0;
        int leftD = depth(node->left);
        int rightD = depth(node->right);
        return mp[node] = max(leftD, rightD) + 1;
    }

    TreeNode *recur(TreeNode *root)
    {
        if (root->left == nullptr && root->right == nullptr) return root;
        if (root->left == nullptr) return recur(root->right);
        if (root->right == nullptr) return recur(root->left);
        int diff = mp[root->left] - mp[root->right];
        if (diff == 0) return root;
        if (diff > 0) return recur(root->left);
        else return recur(root->right);
    }

    TreeNode *subtreeWithAllDeepest(TreeNode *root)
    {
        depth(root);
        return recur(root);
    }
};


// Source https://leetcode.com/problems/prime-palindrome/

Given an integer n, return the smallest prime palindrome greater than or equal to n.

An integer is prime if it has exactly two divisors: 1 and itself. Note that 1 is not a prime number.

For example, 2, 3, 5, 7, 11, and 13 are all primes.
An integer is a palindrome if it reads the same from left to right as it does from right to left.

For example, 101 and 12321 are palindromes.
The test cases are generated so that the answer always exists and is in the range [2, 2 * 108].

 

Example 1:

Input: n = 6
Output: 7
Example 2:

Input: n = 8
Output: 11
Example 3:

Input: n = 13
Output: 101
 

Constraints:

1 <= n <= 108

长度为偶数的回文数字一定是 11 的倍数

当a<=b时
abba = 11 * (cdc)

cdc
  cdc

c =a
d = b - a

1221 = 11 * (111)
3553 = 11 * (323)
1111 = 11 * (101)

当a>b时
abba = 11 * (cde)
cde
  cde

e = a
(e + d) % 10 = b
(c + d + carry) % 10 = b

5335 = 11 * (485)

485
  485

class Solution
{
public:
    bool isPrime(int num)
    {
        if (num < 2) return false;
        if (num < 4) return true;
        for (int i = 2; i * i <= num; ++i)
        {
            if (num % i == 0) return false;
        }
        return true;
    }

    int primePalindrome(int N)
    {
        if (N >= 8 && N <= 11) return 11;
        for (int i = 1; i < 1e5; ++i)
        {
            string s = to_string(i);
            string t(s.rbegin(), s.rend());
            int x = stoi(s + t.substr(1));
            if (x >= N && isPrime(x)) return x;
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/transpose-matrix/

Given a 2D integer array matrix, return the transpose of matrix.

The transpose of a matrix is the matrix flipped over its main diagonal, switching the matrix's row and column indices.



 

Example 1:

Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[1,4,7],[2,5,8],[3,6,9]]
Example 2:

Input: matrix = [[1,2,3],[4,5,6]]
Output: [[1,4],[2,5],[3,6]]
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 1000
1 <= m * n <= 105
-109 <= matrix[i][j] <= 109

class Solution
{
public:
    vector<vector<int>> transpose(vector<vector<int>> &A)
    {
        int m = A.size(), n = A[0].size();
        vector<vector<int>> res(n, vector<int>(m));
        for (int i = 0; i < m; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                res[j][i] = A[i][j];
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/binary-gap/

Given a positive integer n, find and return the longest distance between any two adjacent 1's in the binary representation of n. If there are no two adjacent 1's, return 0.

Two 1's are adjacent if there are only 0's separating them (possibly no 0's). The distance between two 1's is the absolute difference between their bit positions. 
For example, the two 1's in "1001" have a distance of 3.

 

Example 1:

Input: n = 22
Output: 2
Explanation: 22 in binary is "10110".
The first adjacent pair of 1's is "10110" with a distance of 2.
The second adjacent pair of 1's is "10110" with a distance of 1.
The answer is the largest of these two distances, which is 2.
Note that "10110" is not a valid pair since there is a 1 separating the two 1's underlined.
Example 2:

Input: n = 8
Output: 0
Explanation: 8 in binary is "1000".
There are not any adjacent pairs of 1's in the binary representation of 8, so we return 0.
Example 3:

Input: n = 5
Output: 2
Explanation: 5 in binary is "101".
 

Constraints:

1 <= n <= 109

class Solution
{
public:
    int binaryGap(int N)
    {
        vector<int> pos;
        for (int i = 0; i < 32; ++i)
        {
            if (((N >> i) & 1) != 0) pos.push_back(i);
        }
        int res = 0, n = pos.size();
        for (int i = 1; i < n; ++i)
        {
            res = max(res, pos[i] - pos[i - 1]);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/reordered-power-of-2/

You are given an integer n. We reorder the digits in any order (including the original order) such that the leading digit is not zero.

Return true if and only if we can do this so that the resulting number is a power of two.

 

Example 1:

Input: n = 1
Output: true
Example 2:

Input: n = 10
Output: false
 

Constraints:

1 <= n <= 109

class Solution
{
public:
    bool reorderedPowerOf2(int N)
    {
        string str = to_string(N);
        sort(str.begin(), str.end());
        for (int i = 0; i < 31; ++i)
        {
            string t = to_string(1 << i);
            sort(t.begin(), t.end());
            if (t == str) return true;
        }
        return false;
    }
};


// Source https://leetcode.com/problems/advantage-shuffle/

You are given two integer arrays nums1 and nums2 both of the same length. The advantage of nums1 with respect to nums2 is the number of indices i for which nums1[i] > nums2[i].

Return any permutation of nums1 that maximizes its advantage with respect to nums2.

 

Example 1:

Input: nums1 = [2,7,11,15], nums2 = [1,10,4,11]
Output: [2,11,7,15]
Example 2:

Input: nums1 = [12,24,8,32], nums2 = [13,25,32,11]
Output: [24,32,8,12]
 

Constraints:

1 <= nums1.length <= 105
nums2.length == nums1.length
0 <= nums1[i], nums2[i] <= 109

对于B中的每个数，先在A中找刚好大于该数的数字，用太大的数字就浪费了，而如果A中没有比之大的数字，就用A中最小的数字。

class Solution
{
public:
    vector<int> advantageCount(vector<int> &A, vector<int> &B)
    {
        vector<int> res;
        multiset<int> st(A.begin(), A.end());
        for (int i = 0; i < B.size(); ++i)
        {
            auto it = (*st.rbegin() <= B[i]) ? st.begin() : st.upper_bound(B[i]);
            res.push_back(*it);
            st.erase(it);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/minimum-number-of-refueling-stops/

A car travels from a starting position to a destination which is target miles east of the starting position.

There are gas stations along the way. The gas stations are represented as an array stations 
where stations[i] = [positioni, fueli] indicates that the ith gas station is positioni miles east of the starting position and has fueli liters of gas.

The car starts with an infinite tank of gas, which initially has startFuel liters of fuel in it. It uses one liter of gas per one mile that it drives. 
When the car reaches a gas station, it may stop and refuel, transferring all the gas from the station into the car.

Return the minimum number of refueling stops the car must make in order to reach its destination. If it cannot reach the destination, return -1.

Note that if the car reaches a gas station with 0 fuel left, the car can still refuel there. If the car reaches the destination with 0 fuel left, it is still considered to have arrived.

 

Example 1:

Input: target = 1, startFuel = 1, stations = []
Output: 0
Explanation: We can reach the target without refueling.
Example 2:

Input: target = 100, startFuel = 1, stations = [[10,100]]
Output: -1
Explanation: We can not reach the target (or even the first gas station).
Example 3:

Input: target = 100, startFuel = 10, stations = [[10,60],[20,30],[30,30],[60,40]]
Output: 2
Explanation: We start with 10 liters of fuel.
We drive to position 10, expending 10 liters of fuel.  We refuel from 0 liters to 60 liters of gas.
Then, we drive from position 10 to position 60 (expending 50 liters of fuel),
and refuel from 10 liters to 50 liters of gas.  We then drive to and reach the target.
We made 2 refueling stops along the way, so we return 2.
 

Constraints:

1 <= target, startFuel <= 109
0 <= stations.length <= 500
0 <= positioni <= positioni+1 < target
1 <= fueli < 109

将所有能到达的加油站根据油量的多少放入最大堆，这样每一次都选择油量最多的加油站去加油，才能尽可能的到达最远的地方

class Solution
{
public:
    int minRefuelStops(int target, int startFuel, vector<vector<int>> &stations)
    {
        int res = 0, i = 0, n = stations.size();
        priority_queue<int> pq;
        while (startFuel < target)
        {
            while (i < n && stations[i][0] <= startFuel)
            {
                pq.push(stations[i][1]);
                ++i;
            }
            if (pq.empty()) return -1;
            startFuel += pq.top();
            pq.pop();
            ++res;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/leaf-similar-trees/

Consider all the leaves of a binary tree, from left to right order, the values of those leaves form a leaf value sequence.



For example, in the given tree above, the leaf value sequence is (6, 7, 4, 9, 8).

Two binary trees are considered leaf-similar if their leaf value sequence is the same.

Return true if and only if the two given trees with head nodes root1 and root2 are leaf-similar.

 

Example 1:


Input: root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]
Output: true
Example 2:


Input: root1 = [1,2,3], root2 = [1,3,2]
Output: false
 

Constraints:

The number of nodes in each tree will be in the range [1, 200].
Both of the given trees will have values in the range [0, 200].

class Solution
{
public:
    bool leafSimilar(TreeNode *root1, TreeNode *root2)
    {
        vector<int> leaf1, leaf2;
        helper(root1, leaf1);
        helper(root2, leaf2);
        return leaf1 == leaf2;
    }
    void helper(TreeNode *node, vector<int> &leaf)
    {
        if (!node) return;
        if (!node->left && !node->right)
        {
            leaf.push_back(node->val);
        }
        helper(node->left, leaf);
        helper(node->right, leaf);
    }
};


// Source https://leetcode.com/problems/length-of-longest-fibonacci-subsequence/

A sequence x1, x2, ..., xn is Fibonacci-like if:

n >= 3
xi + xi+1 == xi+2 for all i + 2 <= n
Given a strictly increasing array arr of positive integers forming a sequence, return the length of the longest Fibonacci-like subsequence of arr. If one does not exist, return 0.

A subsequence is derived from another sequence arr by deleting any number of elements (including none) from arr, without changing the order of the remaining elements. 
For example, [3, 5, 8] is a subsequence of [3, 4, 5, 6, 7, 8].

 

Example 1:

Input: arr = [1,2,3,4,5,6,7,8]
Output: 5
Explanation: The longest subsequence that is fibonacci-like: [1,2,3,5,8].
Example 2:

Input: arr = [1,3,7,11,12,14,18]
Output: 3
Explanation: The longest subsequence that is fibonacci-like: [1,11,12], [3,11,14] or [7,11,18].
 

Constraints:

3 <= arr.length <= 1000
1 <= arr[i] < arr[i + 1] <= 109

class Solution
{
public:
    int lenLongestFibSubseq(vector<int> &A)
    {
        int res = 0, n = A.size();
        unordered_set<int> st(A.begin(), A.end());
        for (int i = 0; i < n; ++i)
        {
            for (int j = i + 1; j < n; ++j)
            {
                int a = A[i], b = A[j], cnt = 2;
                while (st.count(a + b))
                {
                    ++cnt;
                    int temp = a + b;
                    a = b;
                    b = temp;
                }
                res = max(res, cnt);
            }
        }
        return (res > 2) ? res : 0;
    }
};


// Source https://leetcode.com/problems/walking-robot-simulation/

A robot on an infinite XY-plane starts at point (0, 0) facing north. The robot can receive a sequence of these three possible types of commands:

-2: Turn left 90 degrees.
-1: Turn right 90 degrees.
1 <= k <= 9: Move forward k units, one unit at a time.
Some of the grid squares are obstacles. The ith obstacle is at grid point obstacles[i] = (xi, yi). 
If the robot runs into an obstacle, then it will instead stay in its current location and move on to the next command.

Return the maximum Euclidean distance that the robot ever gets from the origin squared (i.e. if the distance is 5, return 25).

Note:

North means +Y direction.
East means +X direction.
South means -Y direction.
West means -X direction.
 

Example 1:

Input: commands = [4,-1,3], obstacles = []
Output: 25
Explanation: The robot starts at (0, 0):
1. Move north 4 units to (0, 4).
2. Turn right.
3. Move east 3 units to (3, 4).
The furthest point the robot ever gets from the origin is (3, 4), which squared is 32 + 42 = 25 units away.
Example 2:

Input: commands = [4,-1,4,-2,4], obstacles = [[2,4]]
Output: 65
Explanation: The robot starts at (0, 0):
1. Move north 4 units to (0, 4).
2. Turn right.
3. Move east 1 unit and get blocked by the obstacle at (2, 4), robot is at (1, 4).
4. Turn left.
5. Move north 4 units to (1, 8).
The furthest point the robot ever gets from the origin is (1, 8), which squared is 12 + 82 = 65 units away.
Example 3:

Input: commands = [6,-1,-1,6], obstacles = []
Output: 36
Explanation: The robot starts at (0, 0):
1. Move north 6 units to (0, 6).
2. Turn right.
3. Turn right.
4. Move south 6 units to (0, 0).
The furthest point the robot ever gets from the origin is (0, 6), which squared is 62 = 36 units away.
 

Constraints:

1 <= commands.length <= 104
commands[i] is either -2, -1, or an integer in the range [1, 9].
0 <= obstacles.length <= 104
-3 * 104 <= xi, yi <= 3 * 104
The answer is guaranteed to be less than 231.

class Solution
{
public:
    int robotSim(vector<int> &commands, vector<vector<int>> &obstacles)
    {
        int res = 0, x = 0, y = 0, idx = 0;
        unordered_set<string> obs;
        for (auto &v : obstacles) obs.insert(to_string(v[0]) + "-" + to_string(v[1]));
        int dirX[4] = {0, 1, 0, -1};
        int dirY[4] = {1, 0, -1, 0};
        for (int command : commands)
        {
            if (command == -1) idx = (idx + 1) % 4;
            else if (command == -2) idx = (idx - 1 + 4) % 4;
            else
            {
                while (command > 0 && !obs.count(to_string(x + dirX[idx]) + "-" + to_string(y + dirY[idx])))
                {
                    x += dirX[idx];
                    y += dirY[idx];
                    --command;
                }
            }
            res = max(res, x * x + y * y);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/koko-eating-bananas/

Koko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] bananas. The guards have gone and will come back in h hours.

Koko can decide her bananas-per-hour eating speed of k. Each hour, she chooses some pile of bananas and eats k bananas from that pile. 
If the pile has less than k bananas, she eats all of them instead and will not eat any more bananas during this hour.

Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return.

Return the minimum integer k such that she can eat all the bananas within h hours.

 

Example 1:

Input: piles = [3,6,7,11], h = 8
Output: 4
Example 2:

Input: piles = [30,11,23,4,20], h = 5
Output: 30
Example 3:

Input: piles = [30,11,23,4,20], h = 6
Output: 23
 

Constraints:

1 <= piles.length <= 104
piles.length <= h <= 109
1 <= piles[i] <= 109

class Solution
{
public:
    int minEatingSpeed(vector<int> &piles, int H)
    {
        int left = 1, right = 1e9;
        while (left < right)
        {
            int mid = left + (right - left) / 2, cnt = 0;
            for (int pile : piles) cnt += (pile + mid - 1) / mid;
            if (cnt > H) left = mid + 1;
            else right = mid;
        }
        return right;
    }
};


// Source https://leetcode.com/problems/middle-of-the-linked-list/

Given the head of a singly linked list, return the middle node of the linked list.

If there are two middle nodes, return the second middle node.

 

Example 1:


Input: head = [1,2,3,4,5]
Output: [3,4,5]
Explanation: The middle node of the list is node 3.
Example 2:


Input: head = [1,2,3,4,5,6]
Output: [4,5,6]
Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.
 

Constraints:

The number of nodes in the list is in the range [1, 100].
1 <= Node.val <= 100

class Solution
{
public:
    ListNode *middleNode(ListNode *head)
    {
        ListNode *slow = head, *fast = head;
        while (fast && fast->next)
        {
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }
};


// Source https://leetcode.com/problems/stone-game/

Alice and Bob play a game with piles of stones. There are an even number of piles arranged in a row, and each pile has a positive integer number of stones piles[i].

The objective of the game is to end with the most stones. The total number of stones across all the piles is odd, so there are no ties.

Alice and Bob take turns, with Alice starting first. Each turn, a player takes the entire pile of stones either from the beginning or from the end of the row. 
This continues until there are no more piles left, at which point the person with the most stones wins.

Assuming Alice and Bob play optimally, return true if Alice wins the game, or false if Bob wins.

 

Example 1:

Input: piles = [5,3,4,5]
Output: true
Explanation: 
Alice starts first, and can only take the first 5 or the last 5.
Say she takes the first 5, so that the row becomes [3, 4, 5].
If Bob takes 3, then the board is [4, 5], and Alice takes 5 to win with 10 points.
If Bob takes the last 5, then the board is [3, 4], and Alice takes 4 to win with 9 points.
This demonstrated that taking the first 5 was a winning move for Alice, so we return true.
Example 2:

Input: piles = [3,7,2,3]
Output: true
 

Constraints:

2 <= piles.length <= 500
piles.length is even.
1 <= piles[i] <= 500
sum(piles[i]) is odd.

class Solution
{
public:
    int n;
    int dp[501][501];

    int solve(vector<int> &arr, int i, int j)
    {
        if(i > j) return 0;
        if(i == j)
        {
            return dp[i][j] = arr[i];
        }
        if(dp[i][j] != -1) return dp[i][j];
        int res = 0;
        res = max(res, solve(arr, i + 1, j) + arr[i]);
        res = max(res, solve(arr, i, j - 1) + arr[j]);
        return dp[i][j] = res;
    }

    bool stoneGame(vector<int> &piles)
    {
        n = piles.size();
        memset(dp, -1, sizeof(dp));
        int sum = 0;
        for(auto val : piles) sum += val;
        int a = solve(piles, 0, n - 1);
        int b = sum - a;
        return a > b;
    }
};


// Source https://leetcode.com/problems/nth-magical-number/

A positive integer is magical if it is divisible by either a or b.

Given the three integers n, a, and b, return the nth magical number. Since the answer may be very large, return it modulo 109 + 7.

 

Example 1:

Input: n = 1, a = 2, b = 3
Output: 2
Example 2:

Input: n = 4, a = 2, b = 3
Output: 6
 

Constraints:

1 <= n <= 109
2 <= a, b <= 4 * 104

class Solution
{
public:
    int gcd(int a, int b)
    {
        return (b == 0) ? a : gcd(b, a % b);
    }

    int nthMagicalNumber(int N, int A, int B)
    {
        long lcm = A * B / gcd(A, B), M = 1e9 + 7;
        long left = 2, right = 1e14;
        while (left < right)
        {
            long mid = left + (right - left) / 2;
            long cnt = (mid / A + mid / B - mid / lcm);
            if (cnt < N) left = mid + 1;
            else right = mid;
        }
        return right % M;
    }
};


// Source https://leetcode.com/problems/profitable-schemes/

There is a group of n members, and a list of various crimes they could commit. The ith crime generates a profit[i] and requires group[i] members to participate in it. 
If a member participates in one crime, that member can't participate in another crime.

Let's call a profitable scheme any subset of these crimes that generates at least minProfit profit, and the total number of members participating in that subset of crimes is at most n.

Return the number of schemes that can be chosen. Since the answer may be very large, return it modulo 109 + 7.

 

Example 1:

Input: n = 5, minProfit = 3, group = [2,2], profit = [2,3]
Output: 2
Explanation: To make a profit of at least 3, the group could either commit crimes 0 and 1, or just crime 1.
In total, there are 2 schemes.
Example 2:

Input: n = 10, minProfit = 5, group = [2,3,5], profit = [6,7,8]
Output: 7
Explanation: To make a profit of at least 5, the group could commit any crimes, as long as they commit one.
There are 7 possible schemes: (0), (1), (2), (0,1), (0,2), (1,2), and (0,1,2).
 

Constraints:

1 <= n <= 100
0 <= minProfit <= 100
1 <= group.length <= 100
1 <= group[i] <= 100
profit.length == group.length
0 <= profit[i] <= 100

class Solution
{
public:
    int sz;
    int mod = 1e9 + 7;
    int dp[101][101][101];

    int helper(vector<int> &group, vector<int> &profit, int idx, int cnt, int minProfit)
    {
        if(cnt < 0) return 0;
        if(idx == sz)
        {
            if(minProfit == 0) return 1;
            return 0;
        }
        if(dp[idx][cnt][minProfit] != -1) return dp[idx][cnt][minProfit];
        int op1 = helper(group, profit, idx + 1, cnt, minProfit);
        int op2 = helper(group, profit, idx + 1, cnt - group[idx], max(0, minProfit - profit[idx]));
        int ans = (op1 + op2) % mod;
        return dp[idx][cnt][minProfit] = ans;
    }

    int profitableSchemes(int n, int minProfit, vector<int> &group, vector<int> &profit)
    {
        sz = group.size();
        memset(dp, -1, sizeof(dp));
        return helper(group, profit, 0, n, minProfit);
    }
};


// Source https://leetcode.com/problems/decoded-string-at-index/

You are given an encoded string s. To decode the string to a tape, the encoded string is read one character at a time and the following steps are taken:

If the character read is a letter, that letter is written onto the tape.
If the character read is a digit d, the entire current tape is repeatedly written d - 1 more times in total.
Given an integer k, return the kth letter (1-indexed) in the decoded string.

 

Example 1:

Input: s = "leet2code3", k = 10
Output: "o"
Explanation: The decoded string is "leetleetcodeleetleetcodeleetleetcode".
The 10th letter in the string is "o".
Example 2:

Input: s = "ha22", k = 5
Output: "h"
Explanation: The decoded string is "hahahaha".
The 5th letter is "h".
Example 3:

Input: s = "a2345678999999999999999", k = 1
Output: "a"
Explanation: The decoded string is "a" repeated 8301530446056247680 times.
The 1st letter is "a".
 

Constraints:

2 <= s.length <= 100
s consists of lowercase English letters and digits 2 through 9.
s starts with a letter.
1 <= k <= 109
It is guaranteed that k is less than or equal to the length of the decoded string.
The decoded string is guaranteed to have less than 263 letters.

ha22cc22xx，k = 5
hahahahacchahahahacchahahahacchahahahaccxx

class Solution
{
public:
    string decodeAtIndex(string S, int K)
    {
        int i = 0;
        long cnt = 0;
        for (; cnt < K; ++i)
        {
            cnt = isdigit(S[i]) ? cnt * (S[i] - '0') : (cnt + 1);
        }
        int j = i - 1;
        while (j >= 0)
        {
            if (isdigit(S[j]))
            {
                cnt /= (S[j] - '0');
                K %= cnt;
            }
            else
            {
                if (K % cnt == 0) { break; }
                --cnt;
            }
            --j;
        }
        return string(1, S[j]);
    }
};


// Source https://leetcode.com/problems/boats-to-save-people/

You are given an array people where people[i] is the weight of the ith person, and an infinite number of boats where each boat can carry a maximum weight of limit. 
Each boat carries at most two people at the same time, provided the sum of the weight of those people is at most limit.

Return the minimum number of boats to carry every given person.

 

Example 1:

Input: people = [1,2], limit = 3
Output: 1
Explanation: 1 boat (1, 2)
Example 2:

Input: people = [3,2,2,1], limit = 3
Output: 3
Explanation: 3 boats (1, 2), (2) and (3)
Example 3:

Input: people = [3,5,3,4], limit = 5
Output: 4
Explanation: 4 boats (3), (3), (4), (5)
 

Constraints:

1 <= people.length <= 5 * 104
1 <= people[i] <= limit <= 3 * 104

class Solution
{
public:
    int numRescueBoats(vector<int> &people, int limit)
    {
        sort(people.begin(), people.end());
        int res = 0, n = people.size(), left = 0, right = n - 1;
        while (left < right)
        {
            if (people[left] + people[right] <= limit) ++left;
            --right;
            ++res;
        }
        if (left == right) ++res;
        return res;
    }
};


// Source https://leetcode.com/problems/reachable-nodes-in-subdivided-graph/

You are given an undirected graph (the "original graph") with n nodes labeled from 0 to n - 1. 
You decide to subdivide each edge in the graph into a chain of nodes, with the number of new nodes varying between each edge.

The graph is given as a 2D array of edges where edges[i] = [ui, vi, cnti] indicates that there is an edge between nodes ui and vi in the original graph, 
and cnti is the total number of new nodes that you will subdivide the edge into. Note that cnti == 0 means you will not subdivide the edge.

To subdivide the edge [ui, vi], replace it with (cnti + 1) new edges and cnti new nodes. 
The new nodes are x1, x2, ..., xcnti, and the new edges are [ui, x1], [x1, x2], [x2, x3], ..., [xcnti-1, xcnti], [xcnti, vi].

In this new graph, you want to know how many nodes are reachable from the node 0, where a node is reachable if the distance is maxMoves or less.

Given the original graph and maxMoves, return the number of nodes that are reachable from node 0 in the new graph.

 

Example 1:


Input: edges = [[0,1,10],[0,2,1],[1,2,2]], maxMoves = 6, n = 3
Output: 13
Explanation: The edge subdivisions are shown in the image above.
The nodes that are reachable are highlighted in yellow.
Example 2:

Input: edges = [[0,1,4],[1,2,6],[0,2,8],[1,3,1]], maxMoves = 10, n = 4
Output: 23
Example 3:

Input: edges = [[1,2,4],[1,4,5],[1,3,1],[2,3,4],[3,4,5]], maxMoves = 17, n = 5
Output: 1
Explanation: Node 0 is disconnected from the rest of the graph, so only node 0 is reachable.
 

Constraints:

0 <= edges.length <= min(n * (n - 1) / 2, 104)
edges[i].length == 3
0 <= ui < vi < n
There are no multiple edges in the graph.
0 <= cnti <= 104
0 <= maxMoves <= 109
1 <= n <= 3000

class Solution
{
public:
    int reachableNodes(vector<vector<int>> &edges, int M, int N)
    {
        unordered_map<int, unordered_map<int, int>> graph;
        for (auto &edge : edges)
        {
            graph[edge[0]][edge[1]] = edge[2];
            graph[edge[1]][edge[0]] = edge[2];
        }
        vector<bool> visited(N);
        priority_queue<pair<int, int>> pq;
        pq.push({M, 0});
        int res = 0;
        while (!pq.empty())
        {
            auto t = pq.top();
            pq.pop();
            int move = t.first, cur = t.second;
            if (visited[cur]) continue;
            visited[cur] = true;
            ++res;
            if (move == 0) continue;
            for (auto a : graph[cur])
            {
                int cnt = min(move, a.second);
                res += cnt;
                if (!visited[a.first])
                {
                    graph[a.first][cur] -= cnt;
                    if (move > a.second) pq.push({move - a.second - 1, a.first});
                }
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/projection-area-of-3d-shapes/

You are given an n x n grid where we place some 1 x 1 x 1 cubes that are axis-aligned with the x, y, and z axes.

Each value v = grid[i][j] represents a tower of v cubes placed on top of the cell (i, j).

We view the projection of these cubes onto the xy, yz, and zx planes.

A projection is like a shadow, that maps our 3-dimensional figure to a 2-dimensional plane. We are viewing the "shadow" when looking at the cubes from the top, the front, and the side.

Return the total area of all three projections.

 

Example 1:


Input: grid = [[1,2],[3,4]]
Output: 17
Explanation: Here are the three projections ("shadows") of the shape made with each axis-aligned plane.
Example 2:

Input: grid = [[2]]
Output: 5
Example 3:

Input: grid = [[1,0],[0,2]]
Output: 8
 

Constraints:

n == grid.length == grid[i].length
1 <= n <= 50
0 <= grid[i][j] <= 50

class Solution
{
public:
    int projectionArea(vector<vector<int>> &grid)
    {
        int n = grid[0].size(), res = 0;
        for (int i = 0; i < n; ++i)
        {
            int rowMax = 0, colMax = 0;
            for (int j = 0; j < n; ++j)
            {
                if (grid[i][j] > 0) ++res;
                rowMax = max(rowMax, grid[i][j]);
                colMax = max(colMax, grid[j][i]);
            }
            res += rowMax + colMax;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/uncommon-words-from-two-sentences/

A sentence is a string of single-space separated words where each word consists only of lowercase letters.

A word is uncommon if it appears exactly once in one of the sentences, and does not appear in the other sentence.

Given two sentences s1 and s2, return a list of all the uncommon words. You may return the answer in any order.

 

Example 1:

Input: s1 = "this apple is sweet", s2 = "this apple is sour"
Output: ["sweet","sour"]
Example 2:

Input: s1 = "apple apple", s2 = "banana"
Output: ["banana"]
 

Constraints:

1 <= s1.length, s2.length <= 200
s1 and s2 consist of lowercase English letters and spaces.
s1 and s2 do not have leading or trailing spaces.
All the words in s1 and s2 are separated by a single space.

class Solution
{
public:
    vector<string> uncommonFromSentences(string A, string B)
    {
        unordered_map<string, int> wordCnt;
        istringstream iss(A + " " + B);
        string t;
        while (iss >> t) ++wordCnt[t];
        vector<string> res;
        for (auto &a : wordCnt)
        {
            if (a.second == 1) res.push_back(a.first);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/spiral-matrix-iii/

You start at the cell (rStart, cStart) of an rows x cols grid facing east. The northwest corner is at the first row and column in the grid, and the southeast corner is at the last row and column.

You will walk in a clockwise spiral shape to visit every position in this grid. Whenever you move outside the grid's boundary, 
we continue our walk outside the grid (but may return to the grid boundary later.). Eventually, we reach all rows * cols spaces of the grid.

Return an array of coordinates representing the positions of the grid in the order you visited them.

 

Example 1:


Input: rows = 1, cols = 4, rStart = 0, cStart = 0
Output: [[0,0],[0,1],[0,2],[0,3]]
Example 2:


Input: rows = 5, cols = 6, rStart = 1, cStart = 4
Output: [[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]
 

Constraints:

1 <= rows, cols <= 100
0 <= rStart < rows
0 <= cStart < cols

class Solution
{
public:
    vector<vector<int>> spiralMatrixIII(int R, int C, int r0, int c0)
    {
        vector<vector<int>> res;
        int step = 1;
        while (res.size() < R * C)
        {
            for (int i = 0; i < step; ++i) add(R, C, r0, c0++, res);
            for (int i = 0; i < step; ++i) add(R, C, r0++, c0, res);
            ++step;
            for (int i = 0; i < step; ++i) add(R, C, r0, c0--, res);
            for (int i = 0; i < step; ++i) add(R, C, r0--, c0, res);
            ++step;
        }
        return res;
    }
    void add(int R, int C, int x, int y, vector<vector<int>> &res)
    {
        if (x >= 0 && x < R && y >= 0 && y < C) res.push_back({x, y});
    }
};


// Source https://leetcode.com/problems/possible-bipartition/

We want to split a group of n people (labeled from 1 to n) into two groups of any size. Each person may dislike some other people, and they should not go into the same group.

Given the integer n and the array dislikes where dislikes[i] = [ai, bi] indicates that the person labeled ai does not like the person labeled bi, 
return true if it is possible to split everyone into two groups in this way.

 

Example 1:

Input: n = 4, dislikes = [[1,2],[1,3],[2,4]]
Output: true
Explanation: group1 [1,4] and group2 [2,3].
Example 2:

Input: n = 3, dislikes = [[1,2],[1,3],[2,3]]
Output: false
Example 3:

Input: n = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]]
Output: false
 

Constraints:

1 <= n <= 2000
0 <= dislikes.length <= 104
dislikes[i].length == 2
1 <= dislikes[i][j] <= n
ai < bi
All the pairs of dislikes are unique.

class Solution
{
public:
    int find(vector<int> &root, int i)
    {
        if (root[i] != i) root[i] = find(root, root[i]);
        return root[i];
    }

    bool possibleBipartition(int N, vector<vector<int>> &dislikes)
    {
        unordered_map<int, vector<int>> g;
        for (auto &dislike : dislikes)
        {
            g[dislike[0]].push_back(dislike[1]);
            g[dislike[1]].push_back(dislike[0]);
        }
        vector<int> root(N + 1);
        for (int i = 0; i <= N; ++i) root[i] = i;
        for (int i = 1; i <= N; ++i)
        {
            if (!g.count(i)) continue;
            int x = find(root, i), y = find(root, g[i][0]);
            if (x == y) return false;
            for (int j = 1; j < g[i].size(); ++j)
            {
                int parent = find(root, g[i][j]);
                if (x == parent) return false;
                root[parent] = y;
            }
        }
        return true;
    }
};


// Source https://leetcode.com/problems/super-egg-drop/

You are given k identical eggs and you have access to a building with n floors labeled from 1 to n.

You know that there exists a floor f where 0 <= f <= n such that any egg dropped at a floor higher than f will break, and any egg dropped at or below floor f will not break.

Each move, you may take an unbroken egg and drop it from any floor x (where 1 <= x <= n). If the egg breaks, you can no longer use it. 
However, if the egg does not break, you may reuse it in future moves.

Return the minimum number of moves that you need to determine with certainty what the value of f is.

 

Example 1:

Input: k = 1, n = 2
Output: 2
Explanation: 
Drop the egg from floor 1. If it breaks, we know that f = 0.
Otherwise, drop the egg from floor 2. If it breaks, we know that f = 1.
If it does not break, then we know f = 2.
Hence, we need at minimum 2 moves to determine with certainty what the value of f is.
Example 2:

Input: k = 2, n = 6
Output: 3
Example 3:

Input: k = 3, n = 14
Output: 4
 

Constraints:

1 <= k <= 100
1 <= n <= 104

注意，题目求的是扔鸡蛋的次数

有K个鸡蛋，还有一栋共N层的大楼，有个临界点的层数F，任何鸡蛋在高于这个层数扔都会碎，低于等于这个层数就不会碎，
不管临界点的值是多少，我们都要能找到这个临界点，问最小需要多少操作，注意这里的操作只有当前还有没碎的鸡蛋才能进行。

假设我们只有1个鸡蛋，碎了就不能再用了，这时我们要测 100 楼的临界点的时候，只能一层一层从低处往高处去测，
当某层鸡蛋碎了之后，就知道临界点了，所以最坏情况要测 100 次（从第1层到第100层，临界点的值是100）。

假设我们有两个鸡蛋，我们可以把第一个鸡蛋仍在 14 楼，若碎了，说明临界点一定在 14 楼以内 [0,13]，
可以用第二个鸡蛋一层一层从低处往高处去测，所以最多操作 14 次（从第1层到第13层，临界点的值是13）。
若第一个鸡蛋没碎，则下一次扔在第 27 楼，假如碎了，说明临界点在 [14,27) 范围内，
可以用第二个鸡蛋一层一层从低处往高处去测，所以最多操作 14 次（从第15层到第26层，临界点的值是26）。
若第一个鸡蛋没碎，则下一次扔在第 39 楼，假如碎了，说明临界点在 [27,39) 范围内，
可以用第二个鸡蛋一层一层从低处往高处去测，所以最多操作 14 次（从第28层到第38层，临界点的值是38）。
若第一个鸡蛋没碎，则下一次扔在第 50 楼，假如碎了，说明临界点在 [39,50) 范围内，
可以用第二个鸡蛋一层一层从低处往高处去测，所以最多操作 14 次（从第40层到第49层，临界点的值是49）。
...
若第一个鸡蛋没碎，则下一次扔在第 95 楼，假如碎了，说明临界点在 [90,95) 范围内，
可以用第二个鸡蛋一层一层从低处往高处去测，所以最多操作 14 次（从第91层到第94层，临界点的值是94）。
若第一个鸡蛋没碎，则下一次扔在第 99 楼，假如碎了，说明临界点在 [95,99) 范围内，
可以用第二个鸡蛋一层一层从低处往高处去测，所以最多操作 14 次（从第96层到第98层，临界点的值是98）。
若第一个鸡蛋没碎，则下一次扔在第 100 楼，假如碎了，说明临界点为99，否则为100。

dp[i][j] 表示当有i次操作，且有j个鸡蛋时能测出的最高的楼层，先使用1个鸡蛋测试第 dp[i-1][j-1]+1 层，有两种情况：

鸡蛋碎掉：剩余i-1次操作，j-1个鸡蛋，还可以测出 0, 1, 2, ..., dp[i-1][j-1] 。
鸡蛋没碎：那这个鸡蛋可以继续利用，此时可以测出 dp[i-1][j-1]+1, ..., dp[i-1][j-1]+1 + dp[i-1][j]
这样，通过i次操作和j个鸡蛋查找的层数范围是 [0, dp[i-1][j-1] + dp[i-1][j] + 1]，状态转移方程如下：

dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j] + 1

当 dp[i][K] 正好大于等于N的时候，i就是我们要求的最小操作次数了

在鸡蛋数足够的前提下
用1次操作，可以测出的临界点如下 0, 1
先在第1层扔鸡蛋

用2次操作，可以测出的临界点如下 0, 1, 2, 3
先在第2层扔鸡蛋，再在第1层，第3层扔鸡蛋

用3次操作，可以测出的临界点如下 0, 1, 2, 3, 4, 5, 6, 7
现在第4层扔鸡蛋，再在第2，6层扔鸡蛋，再在第1层，第3层，第5，7层扔鸡蛋

class Solution
{
public:
    int superEggDrop(int K, int N)
    {
        vector<int> dp(K + 1);
        int m = 0;
        while (dp[K] < N)
        {
            ++m;
            vector<int> temp(K + 1);
            for (int j = 1; j <= K; ++j)
            {
                temp[j] = dp[j - 1] + dp[j] + 1;
            }
            swap(dp, temp);
        }
        return m;
    }
};


// Source https://leetcode.com/problems/fair-candy-swap/

Alice and Bob have a different total number of candies. You are given two integer arrays aliceSizes and bobSizes 
where aliceSizes[i] is the number of candies of the ith box of candy that Alice has and bobSizes[j] is the number of candies of the jth box of candy that Bob has.

Since they are friends, they would like to exchange one candy box each so that after the exchange, they both have the same total amount of candy. 
The total amount of candy a person has is the sum of the number of candies in each box they have.

Return an integer array answer where answer[0] is the number of candies in the box that Alice must exchange, and answer[1] is the number of candies in the box that Bob must exchange. 
If there are multiple answers, you may return any one of them. It is guaranteed that at least one answer exists.

 

Example 1:

Input: aliceSizes = [1,1], bobSizes = [2,2]
Output: [1,2]
Example 2:

Input: aliceSizes = [1,2], bobSizes = [2,3]
Output: [1,2]
Example 3:

Input: aliceSizes = [2], bobSizes = [1,3]
Output: [2,3]
 

Constraints:

1 <= aliceSizes.length, bobSizes.length <= 104
1 <= aliceSizes[i], bobSizes[j] <= 105
Alice and Bob have a different total number of candies.
There will be at least one valid answer for the given input.

sum = sumA + sumB
sum = 2 * C
sumA - C = diff1
num1 in A
num1 - diff1 in B
交换A中的num1和B中的num1 - diff1

A=[1]
B=[2,3]
C = 6 / 2 = 3
sumA - C = 1 - 3 = -2
1 in A
1 + 2 in B
交换A中的1和B中的3

class Solution
{
public:
    vector<int> fairCandySwap(vector<int> &A, vector<int> &B)
    {
        int sumA = accumulate(A.begin(), A.end(), 0);
        int sumB = accumulate(B.begin(), B.end(), 0);
        long C = (sumA + sumB) / 2;
        int diff1 = sumA - C;
        unordered_set<int> st(B.begin(), B.end());
        for (int num : A)
        {
            if (st.count(num - diff1)) return {num, num - diff1};
        }
        return {};
    }
};



// Source https://leetcode.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal/

Given two integer arrays, preorder and postorder where preorder is the preorder traversal of a binary tree of distinct values 
and postorder is the postorder traversal of the same tree, reconstruct and return the binary tree.

If there exist multiple answers, you can return any of them.

 

Example 1:


Input: preorder = [1,2,4,5,3,6,7], postorder = [4,5,2,6,7,3,1]
Output: [1,2,3,4,5,6,7]
Example 2:

Input: preorder = [1], postorder = [1]
Output: [1]
 

Constraints:

1 <= preorder.length <= 30
1 <= preorder[i] <= preorder.length
All the values of preorder are unique.
postorder.length == preorder.length
1 <= postorder[i] <= postorder.length
All the values of postorder are unique.
It is guaranteed that preorder and postorder are the preorder traversal and postorder traversal of the same binary tree.

先序和后序的各个区间表示如下：

preorder -> [root] [left subtree] [right subtree]
postorder -> [left subtree] [right substree] [root]

具体到题目中的例子就是：

preorder -> [1] [2,4,5] [3,6,7]
postorder -> [4,5,2] [6,7,3] [1]

class Solution
{
public:
    int n;
    unordered_map<int, int> m;

    TreeNode *helper(vector<int> &pre, int preL, int preR, vector<int> &post, int postL, int postR)
    {
        if (preL > preR || postL > postR) return nullptr;
        TreeNode *node = new TreeNode(pre[preL]);
        if (preL == preR) return node;
        int idx = m[pre[preL + 1]], len = (idx - postL) + 1;
        node->left = helper(pre, preL + 1, preL + len, post, postL, idx);
        node->right = helper(pre, preL + 1 + len, preR, post, idx + 1, postR - 1);
        return node;
    }

    TreeNode *constructFromPrePost(vector<int> &pre, vector<int> &post)
    {
        n = post.size();
        for (int i = 0; i < n; ++i) m[post[i]] = i;
        return helper(pre, 0, n - 1, post, 0, n - 1);
    }
};


// Source https://leetcode.com/problems/find-and-replace-pattern/

Given a list of strings words and a string pattern, return a list of words[i] that match pattern. You may return the answer in any order.

A word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p(x), we get the desired word.

Recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.

 

Example 1:

Input: words = ["abc","deq","mee","aqq","dkd","ccc"], pattern = "abb"
Output: ["mee","aqq"]
Explanation: "mee" matches the pattern because there is a permutation {a -> m, b -> e, ...}. 
"ccc" does not match the pattern because {a -> c, b -> c, ...} is not a permutation, since a and b map to the same letter.
Example 2:

Input: words = ["a","b","c"], pattern = "a"
Output: ["a","b","c"]
 

Constraints:

1 <= pattern.length <= 20
1 <= words.length <= 50
words[i].length == pattern.length
pattern and words[i] are lowercase English letters.

class Solution
{
public:
    bool check(string &word, string &pattern)
    {
        unordered_map<char, char> w2p, p2w;
        int n = word.size();
        for (int i = 0; i < n; ++i)
        {
            if (w2p.count(word[i]) && w2p[word[i]] != pattern[i]) return false;
            w2p[word[i]] = pattern[i];
            if (p2w.count(pattern[i]) && p2w[pattern[i]] != word[i]) return false;
            p2w[pattern[i]] = word[i];
        }
        return true;
    }

    vector<string> findAndReplacePattern(vector<string> &words, string pattern)
    {
        vector<string> res;
        for (string &word : words)
        {
            if (check(word, pattern)) res.push_back(word);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/sum-of-subsequence-widths/

The width of a sequence is the difference between the maximum and minimum elements in the sequence.

Given an array of integers nums, return the sum of the widths of all the non-empty subsequences of nums. Since the answer may be very large, return it modulo 109 + 7.

A subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. 
For example, [3,6,2,7] is a subsequence of the array [0,3,1,6,2,2,7].

 

Example 1:

Input: nums = [2,1,3]
Output: 6
Explanation: The subsequences are [1], [2], [3], [2,1], [2,3], [1,3], [2,1,3].
The corresponding widths are 0, 0, 0, 1, 1, 2, 2.
The sum of these widths is 6.
Example 2:

Input: nums = [2]
Output: 0
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 105

一个长度为n的数组，共有多少个子序列，如果算上空集的话，共有 2^n 个。那么在给数组排序之后，对于其中任意一个数字 A[i]，其前面共有i个数是小于等于 A[i] 的，这i个数字共有 2^i 个子序列，
它们加上 A[i] 都可以组成一个新的非空子序列，并且 A[i] 是这里面最大的数字，那么在宽度计算的时候，就要加上 A[i] x (2^i)，同理，A[i] 后面还有 n-1-i 个数字是大于等于它的，后面可以形成 2^(n-1-i) 个子序列，
每个加上 A[i] 就都是一个新的非空子序列，同时 A[i] 是这些子序列中最小的一个，那么结果中就要减去 A[i] x (2 ^ (n-1-i))。对于每个数字都这么计算一下，就是最终要求的所有子序列的宽度之和了。
A[i] x (2^(n-1-i)) 转换为了 A[n-1-i] x 2^i，其实二者最终的累加和是相等的：
sum(A[i] * 2^(n-1-i)) = A[0]*2^(n-1) + A[1]*2^(n-2) + A[2]*2^(n-3) + ... + A[n-1]*2^0
sum(A[n-1-i] * 2^i) = A[n-1]*2^0 + A[n-2]*2^1 + ... + A[1]*2^(n-2) + A[0]*2^(n-1)
可以发现两个等式的值都是相等的，只不过顺序颠倒了一下

class Solution
{
public:
    int sumSubseqWidths(vector<int> &A)
    {
        sort(A.begin(), A.end());
        int n = A.size();
        long res = 0, M = 1e9 + 7, c = 1;
        for (int i = 0; i < n; ++i)
        {
            res = (res + A[i] * c - A[n - i - 1] * c + M) % M;
            c = (c << 1) % M;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/surface-area-of-3d-shapes/

You are given an n x n grid where you have placed some 1 x 1 x 1 cubes. Each value v = grid[i][j] represents a tower of v cubes placed on top of cell (i, j).

After placing these cubes, you have decided to glue any directly adjacent cubes to each other, forming several irregular 3D shapes.

Return the total surface area of the resulting shapes.

Note: The bottom face of each shape counts toward its surface area.

 

Example 1:


Input: grid = [[1,2],[3,4]]
Output: 34

6 + 10 + 14 + 18 - 1 * 2 - 1 * 2 - 2 * 2 - 3 * 2 = 48 - 14 = 34



Example 2:


Input: grid = [[1,1,1],[1,0,1],[1,1,1]]
Output: 32
Example 3:


Input: grid = [[2,2,2],[2,1,2],[2,2,2]]
Output: 46
 

Constraints:

n == grid.length == grid[i].length
1 <= n <= 50
0 <= grid[i][j] <= 50

每个小正方体的表面积是6，若在同一个位置累加两个，表面积就是10，三个累加到了一起就是14，其实是有规律的，n个小正方体累在一起，表面积是 4n+2。
6 * n - 2 * (n - 1) = 4 * n + 2
现在不仅仅是累加在一个小正方体上，而是在 nxn 的区间，累加出一个三维物体。

class Solution
{
public:
    int surfaceArea(vector<vector<int>> &grid)
    {
        int n = grid.size(), res = 0;
        for (int i = 0; i < n; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                if (grid[i][j] > 0) res += 4 * grid[i][j] + 2;
                if (i > 0) res -= min(grid[i][j], grid[i - 1][j]) * 2;
                if (j > 0) res -= min(grid[i][j], grid[i][j - 1]) * 2;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/groups-of-special-equivalent-strings/

You are given an array of strings of the same length words.

In one move, you can swap any two even indexed characters or any two odd indexed characters of a string words[i].

Two strings words[i] and words[j] are special-equivalent if after any number of moves, words[i] == words[j].

For example, words[i] = "zzxy" and words[j] = "xyzz" are special-equivalent because we may make the moves "zzxy" -> "xzzy" -> "xyzz".
A group of special-equivalent strings from words is a non-empty subset of words such that:

Every pair of strings in the group are special equivalent, and
The group is the largest size possible (i.e., there is not a string words[i] not in the group such that words[i] is special-equivalent to every string in the group).
Return the number of groups of special-equivalent strings from words.

 

Example 1:

Input: words = ["abcd","cdab","cbad","xyzz","zzxy","zzyx"]
Output: 3
Explanation: 
One group is ["abcd", "cdab", "cbad"], since they are all pairwise special equivalent, and none of the other strings is all pairwise special equivalent to these.
The other two groups are ["xyzz", "zzxy"] and ["zzyx"].
Note that in particular, "zzxy" is not special equivalent to "zzyx".
Example 2:

Input: words = ["abc","acb","bac","bca","cab","cba"]
Output: 3
 

Constraints:

1 <= words.length <= 1000
1 <= words[i].length <= 20
words[i] consist of lowercase English letters.
All the strings are of the same length.

class Solution
{
public:
    int numSpecialEquivGroups(vector<string> &A)
    {
        unordered_set<string> st;
        for (string &word : A)
        {
            string even, odd;
            for (int i = 0; i < word.size(); ++i)
            {
                if (i % 2 == 0) even += word[i];
                else odd += word[i];
            }
            sort(even.begin(), even.end());
            sort(odd.begin(), odd.end());
            st.insert(even + odd);
        }
        return st.size();
    }
};


// Source https://leetcode.com/problems/all-possible-full-binary-trees/

Given an integer n, return a list of all possible full binary trees with n nodes. Each node of each tree in the answer must have Node.val == 0.

Each element of the answer is the root node of one possible tree. You may return the final list of trees in any order.

A full binary tree is a binary tree where each node has exactly 0 or 2 children.

 

Example 1:


Input: n = 7
Output: [[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]
Example 2:

Input: n = 3
Output: [[0,0,0]]
 

Constraints:

1 <= n <= 20

满二叉树每个结点一定会有0个或2两个子结点，满二叉树的结点总数都是奇数，所以只要当N为偶数的时候，一定返回的是空数组。
当N是奇数时，如何生成不同的满二叉树。先从最简单的开始，当 N=1 时，就只有一个根结点，当 N=3 时，也只有一种情况，根结点和左右子结点，当 N=5 时，就有如下两种情况：
    0
   / \
  0   0
 / \
0   0


    0
   / \
  0   0
     / \
    0   0
我们可以看出来就是在 N=3 的情况下再多加两个结点，这两个结点可以都在左子结点下，或者都在右子结点下。
当 N=7 的时候，我们可以把多余出来的两个结点分别加到上面两棵树的任意一个叶结点下方，有5种，
其中有两种情况是重合的，即在第一棵树的最右叶结点下添加，跟在第二棵树的最左叶结点下添加后得到的完全二叉树是一样的，所以总共只有5种组合。

N个结点，除去根结点，左右子树一共N-1 个结点，满二叉树的子树也是满二叉树，所以每个子树的结点总数是奇数，由于N是奇数，N-1 是偶数，把 N-1 这个偶数拆分成任意两个奇数之和，
比如p和q，满足 p+q = N-1，且p，q均为奇数，然后对其分别对p和q调用递归函数，得到两个数组，数组里面的就是所有可能情况的左右子树的根结点。
之后要做的就是从这两个数组中任意取两个结点，加到一个新建的 cur 结点的左右子结点上，然后将 cur 结点存入结果 res 中。

class Solution
{
public:
    unordered_map<int, vector<TreeNode *>> m;

    vector<TreeNode *> allPossibleFBT(int N)
    {
        if (N % 2 == 0) return {};
        if (N == 1) return {new TreeNode(0)};
        if (m.count(N)) return m[N];
        vector<TreeNode *> res;
        for (int i = 1; i < N; i += 2)
        {
            vector<TreeNode *> left = allPossibleFBT(i), right = allPossibleFBT(N - i - 1);
            for (auto a : left)
            {
                for (auto b : right)
                {
                    TreeNode *cur = new TreeNode(0);
                    cur->left = a;
                    cur->right = b;
                    res.push_back(cur);
                }
            }
        }
        return m[N] = res;
    }
};


// Source https://leetcode.com/problems/maximum-frequency-stack/

Design a stack-like data structure to push elements to the stack and pop the most frequent element from the stack.

Implement the FreqStack class:

FreqStack() constructs an empty frequency stack.
void push(int val) pushes an integer val onto the top of the stack.
int pop() removes and returns the most frequent element in the stack.
If there is a tie for the most frequent element, the element closest to the stack's top is removed and returned.
 

Example 1:

Input
["FreqStack", "push", "push", "push", "push", "push", "push", "pop", "pop", "pop", "pop"]
[[], [5], [7], [5], [7], [4], [5], [], [], [], []]
Output
[null, null, null, null, null, null, null, 5, 7, 5, 4]

Explanation
FreqStack freqStack = new FreqStack();
freqStack.push(5); // The stack is [5]
freqStack.push(7); // The stack is [5,7]
freqStack.push(5); // The stack is [5,7,5]
freqStack.push(7); // The stack is [5,7,5,7]
freqStack.push(4); // The stack is [5,7,5,7,4]
freqStack.push(5); // The stack is [5,7,5,7,4,5]
freqStack.pop();   // return 5, as 5 is the most frequent. The stack becomes [5,7,5,7,4].
freqStack.pop();   // return 7, as 5 and 7 is the most frequent, but 7 is closest to the top. The stack becomes [5,7,5,4].
freqStack.pop();   // return 5, as 5 is the most frequent. The stack becomes [5,7,4].
freqStack.pop();   // return 4, as 4, 5 and 7 is the most frequent, but 4 is closest to the top. The stack becomes [5,7].
 

Constraints:

0 <= val <= 109
At most 2 * 104 calls will be made to push and pop.
It is guaranteed that there will be at least one element in the stack before calling pop.

class FreqStack
{
public:
    int pos;
    priority_queue<array<int, 3>> pq;
    unordered_map<int, int> mp;

    FreqStack()
    {
        pos = 1;
    }

    void push(int val)
    {
        mp[val]++;  //increasing the frequency of current element in map
        pq.push({mp[val], pos++, val});
    }

    int pop()
    {
        auto arr = pq.top();
        pq.pop();
        mp[arr[2]]--;  //decreasing the frequency of current element in map
        return arr[2];
    }
};

// Source https://leetcode.com/problems/monotonic-array/

An array is monotonic if it is either monotone increasing or monotone decreasing.

An array nums is monotone increasing if for all i <= j, nums[i] <= nums[j]. An array nums is monotone decreasing if for all i <= j, nums[i] >= nums[j].

Given an integer array nums, return true if the given array is monotonic, or false otherwise.

 

Example 1:

Input: nums = [1,2,2,3]
Output: true
Example 2:

Input: nums = [6,5,4,4]
Output: true
Example 3:

Input: nums = [1,3,2]
Output: false
 

Constraints:

1 <= nums.length <= 105
-105 <= nums[i] <= 105

class Solution
{
public:
    bool isMonotonic(vector<int> &A)
    {
        bool inc = true, dec = true;
        for (int i = 1; i < A.size(); ++i)
        {
            inc &= (A[i - 1] <= A[i]);
            dec &= (A[i - 1] >= A[i]);
            if (!inc && !dec) return false;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/increasing-order-search-tree/

Given the root of a binary search tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only one right child.

 

Example 1:


Input: root = [5,3,6,2,4,null,8,1,null,null,null,7,9]
Output: [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]
Example 2:


Input: root = [5,1,7]
Output: [1,null,5,null,7]
 

Constraints:

The number of nodes in the given tree will be in the range [1, 100].
0 <= Node.val <= 1000

class Solution
{
public:
    void inorder(vector<TreeNode *> &nodeVec, TreeNode*node)
    {
        if (!node) return;
        inorder(nodeVec, node->left);
        nodeVec.push_back(node);
        inorder(nodeVec, node->right);
    }

    TreeNode *increasingBST(TreeNode *root)
    {
        vector<TreeNode *> nodeVec;
        nodeVec.reserve(128);
        inorder(nodeVec, root);
        int n = nodeVec.size();
        for (int i = 0; i < n - 1; ++i)
        {
            nodeVec[i]->left = nullptr;
            nodeVec[i]->right = nodeVec[i + 1];
        }
        nodeVec[n - 1]->left = nullptr;
        nodeVec[n - 1]->right = nullptr;
        return nodeVec[0];
    }
};


// Source https://leetcode.com/problems/bitwise-ors-of-subarrays/

We have an array arr of non-negative integers.

For every (contiguous) subarray sub = [arr[i], arr[i + 1], ..., arr[j]] (with i <= j), we take the bitwise OR of all the elements in sub, obtaining a result arr[i] | arr[i + 1] | ... | arr[j].

Return the number of possible results. Results that occur more than once are only counted once in the final answer

 

Example 1:

Input: arr = [0]
Output: 1
Explanation: There is only one possible result: 0.
Example 2:

Input: arr = [1,1,2]
Output: 3
Explanation: The possible subarrays are [1], [1], [2], [1, 1], [1, 2], [1, 1, 2].
These yield the results 1, 1, 2, 1, 3, 3.
There are 3 unique values, so the answer is 3.
Example 3:

Input: arr = [1,2,4]
Output: 6
Explanation: The possible results are 1, 2, 3, 4, 6, and 7.
 

Constraints:

1 <= nums.length <= 5 * 104
0 <= nums[i] <= 109

数组 [1, 3, 4, 6, 5]，写成二进制的就是 [001, 011, 100, 110, 101]，生成子数组的方法是在现有的集合都加入当前数字，并每次新加一个只有当前数字的集合，顺序如下：

[001]
[001 011] [011]
[001 011 100] [011 100] [100]
[001 011 100 110] [011 100 110] [100 110] [110]
[001 011 100 110 101] [011 100 110 101] [100 110 101] [110 101] [101]

对每个集合都计算总'或'值，可以得到：

001
011 011
111 111 100
111 111 110 110
111 111 111 111 101
对重复值只需要保留一个，实际上就可以变成：

001
011
111 100
111 110
111 101

class Solution
{
public:
    int subarrayBitwiseORs(vector<int> &arr)
    {
        unordered_set<int>res;
        for( int i = 0; i < arr.size(); ++i )
        {
            res.insert(arr[i]);
            for( int j = i - 1; j >= 0; --j )
            {
                // arr[j] 保存 the bitwise OR of all the elements in arr[j ... i - 1]
                if( (arr[i] | arr[j]) == arr[j] )
                    break;
                // arr[j] 保存 the bitwise OR of all the elements in arr[j ... i]
                arr[j] |= arr[i];
                res.insert(arr[j]);
            }
        }
        return res.size();
    }
};


// Source https://leetcode.com/problems/orderly-queue/

You are given a string s and an integer k. You can choose one of the first k letters of s and append it at the end of the string..

Return the lexicographically smallest string you could have after applying the mentioned step any number of moves.

 

Example 1:

Input: s = "cba", k = 1
Output: "acb"
Explanation: 
In the first move, we move the 1st character 'c' to the end, obtaining the string "bac".
In the second move, we move the 1st character 'b' to the end, obtaining the final result "acb".
Example 2:

Input: s = "baaca", k = 3
Output: "aaabc"
Explanation: 
In the first move, we move the 1st character 'b' to the end, obtaining the string "aacab".
In the second move, we move the 3rd character 'c' to the end, obtaining the final result "aaabc".
 

Constraints:

1 <= k <= s.length <= 1000
s consist of lowercase English letters.

一个只有小写字母的字符串，说是每次可以把前K个字母中的任意一个移动到末尾，让我们返回可以变换成的字母顺序最小的字符串。
若 K=1，我们可以都生成，然后比较出其中最小的那个返回即可。
若 K>1,   直接对S串进行排序即可。

S="53214", K=2：

5 3 2 1 4
3 2 1 4 5
2 1 4 5 3
2 4 5 3 1
4 5 3 1 2
5 3 1 2 4
3 1 2 4 5
3 2 4 5 1
3 4 5 1 2
4 5 1 2 3
5 1 2 3 4
1 2 3 4 5

S="871524", K = 2

8 7 1 5 2 4
8 1 5 2 4 7
1 5 2 4 7 8
5 2 4 7 8 1
5 4 7 8 1 2
5 7 8 1 2 4
7 8 1 2 4 5
8 1 2 4 5 7
1 2 4 5 7 8

S="78635219", K = 2

7 8 6 3 5 2 1 9
8 6 3 5 2 1 9 7
6 3 5 2 1 9 7 8
3 5 2 1 9 7 8 6
5 2 1 9 7 8 6 3
2 1 9 7 8 6 3 5
2 9 7 8 6 3 5 1
9 7 8 6 3 5 1 2
7 8 6 3 5 1 2 9
8 6 3 5 1 2 9 7
6 3 5 1 2 9 7 8
3 5 1 2 9 7 8 6
3 1 2 9 7 8 6 5
3 2 9 7 8 6 5 1
3 9 7 8 6 5 1 2
9 7 8 6 5 1 2 3
7 8 6 5 1 2 3 9
8 6 5 1 2 3 9 7
6 5 1 2 3 9 7 8
5 1 2 3 9 7 8 6
5 2 3 9 7 8 6 1
5 3 9 7 8 6 1 2
5 9 7 8 6 1 2 3
9 7 8 6 1 2 3 5
7 8 6 1 2 3 5 9
8 6 1 2 3 5 9 7
6 1 2 3 5 9 7 8
6 2 3 5 9 7 8 1
6 3 5 9 7 8 1 2
6 5 9 7 8 1 2 3
6 9 7 8 1 2 3 5
9 7 8 1 2 3 5 6
9 8 1 2 3 5 6 7
9 1 2 3 5 6 7 8
1 2 3 5 6 7 8 9

当 K=2时,   先把最小的数字移动到末尾，形成 xxxxx1 这种类型的，然后将第二小的数字移动到末尾，变成 xxxx12，
以此类推类推，可以将所有数字按顺序移动到末尾

如果 the first k letters 中有2个字符的顺序是大在前，小在后，此时，可以先把小的字符移动到末尾，再把大的字符移动到末尾，从而变成小在前，大在后

class Solution
{
public:
    string orderlyQueue(string S, int K)
    {
        if (K > 1)
        {
            sort(S.begin(), S.end());
            return S;
        }
        string res = S;
        for (int i = 1; i < S.size(); ++i)
        {
            res = min(res, S.substr(i) + S.substr(0, i));
        }
        return res;
    }
};


// Source https://leetcode.com/problems/rle-iterator/

We can use run-length encoding (i.e., RLE) to encode a sequence of integers. In a run-length encoded array of even length encoding (0-indexed), 
for all even i, encoding[i] tells us the number of times that the non-negative integer value encoding[i + 1] is repeated in the sequence.

For example, the sequence arr = [8,8,8,5,5] can be encoded to be encoding = [3,8,2,5]. encoding = [3,8,0,9,2,5] and encoding = [2,8,1,8,2,5] are also valid RLE of arr.
Given a run-length encoded array, design an iterator that iterates through it.

Implement the RLEIterator class:

RLEIterator(int[] encoded) Initializes the object with the encoded array encoded.
int next(int n) Exhausts the next n elements and returns the last element exhausted in this way. If there is no element left to exhaust, return -1 instead.
 

Example 1:

Input
["RLEIterator", "next", "next", "next", "next"]
[[[3, 8, 0, 9, 2, 5]], [2], [1], [1], [2]]
Output
[null, 8, 8, 5, -1]

Explanation
RLEIterator rLEIterator = new RLEIterator([3, 8, 0, 9, 2, 5]); // This maps to the sequence [8,8,8,5,5].
rLEIterator.next(2); // exhausts 2 terms of the sequence, returning 8. The remaining sequence is now [8, 5, 5].
rLEIterator.next(1); // exhausts 1 term of the sequence, returning 8. The remaining sequence is now [5, 5].
rLEIterator.next(1); // exhausts 1 term of the sequence, returning 5. The remaining sequence is now [5].
rLEIterator.next(2); // exhausts 2 terms, returning -1. This is because the first term exhausted was 5,
but the second term did not exist. Since the last term exhausted does not exist, we return -1.
 

Constraints:

2 <= encoding.length <= 1000
encoding.length is even.
0 <= encoding[i] <= 109
1 <= n <= 109
At most 1000 calls will be made to next.

class RLEIterator
{
public:
    int cur;
    vector<int> nums;

    RLEIterator(vector<int> &A): nums(A), cur(0) {}

    int next(int n)
    {
        while (cur < nums.size() && n > nums[cur])
        {
            n -= nums[cur];
            cur += 2;
        }
        if (cur >= nums.size()) return -1;
        nums[cur] -= n;
        return nums[cur + 1];
    }
};


// Source https://leetcode.com/problems/online-stock-span/

Design an algorithm that collects daily price quotes for some stock and returns the span of that stock's price for the current day.

The span of the stock's price today is defined as the maximum number of consecutive days (starting from today and going backward) 
for which the stock price was less than or equal to today's price.

For example, if the price of a stock over the next 7 days were [100,80,60,70,60,75,85], then the stock spans would be [1,1,1,2,1,4,6].
Implement the StockSpanner class:

StockSpanner() Initializes the object of the class.
int next(int price) Returns the span of the stock's price given that today's price is price.
 

Example 1:

Input
["StockSpanner", "next", "next", "next", "next", "next", "next", "next"]
[[], [100], [80], [60], [70], [60], [75], [85]]
Output
[null, 1, 1, 1, 2, 1, 4, 6]

Explanation
StockSpanner stockSpanner = new StockSpanner();
stockSpanner.next(100); // return 1
stockSpanner.next(80);  // return 1
stockSpanner.next(60);  // return 1
stockSpanner.next(70);  // return 2
stockSpanner.next(60);  // return 1
stockSpanner.next(75);  // return 4, because the last 4 prices (including today's price of 75) were less than or equal to today's price.
stockSpanner.next(85);  // return 6
 

Constraints:

1 <= price <= 105
At most 104 calls will be made to next.

class StockSpanner
{
public:
    stack<pair<int, int>> st;

    StockSpanner() {}

    int next(int price)
    {
        int cnt = 1;
        while (!st.empty() && st.top().first <= price)
        {
            cnt += st.top().second;
            st.pop();
        }
        st.push({price, cnt});
        return cnt;
    }
};


// Source https://leetcode.com/problems/numbers-at-most-n-given-digit-set/

Given an array of digits which is sorted in non-decreasing order. You can write numbers using each digits[i] as many times as we want. 
For example, if digits = ['1','3','5'], we may write numbers such as '13', '551', and '1351315'.

Return the number of positive integers that can be generated that are less than or equal to a given integer n.

 

Example 1:

Input: digits = ["1","3","5","7"], n = 100
Output: 20
Explanation: 
The 20 numbers that can be written are:
1, 3, 5, 7, 11, 13, 15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77.
Example 2:

Input: digits = ["1","4","9"], n = 1000000000
Output: 29523
Explanation: 
We can write 3 one digit numbers, 9 two digit numbers, 27 three digit numbers,
81 four digit numbers, 243 five digit numbers, 729 six digit numbers,
2187 seven digit numbers, 6561 eight digit numbers, and 19683 nine digit numbers.
In total, this is 29523 integers that can be written using the digits array.
Example 3:

Input: digits = ["7"], n = 8
Output: 1
 

Constraints:

1 <= digits.length <= 9
digits[i].length == 1
digits[i] is a digit from '1' to '9'.
All the values in digits are unique.
digits is sorted in non-decreasing order.
1 <= n <= 109

假如 D={"1","3","5","7"}，N=365，我们可以很快的算出所有的两位数和一位数的组合情况总数 4^2 + 4 = 20 个。

对于N的百位数字3来说，D中的1小于N中的百位上的3，那么此时百位上固定为1，十位和个位上就可以是任意值了，即 1xx，共有 4^2 = 16 个。
对于N的百位数字3来说，D中的3等于N中的百位上的3，那么此时百位上固定为3，十位和个位的值还是不确定，此时就不能再继续遍历D中的数字了，因为之后的数字肯定大于3，但是我们可以继续尝试N的下一位。
对于N的十位数字6来说，D中的1小于N中的十位上的6，那么百位和十位分别固定为3和1，个位上就可以是任意值了，即 31x，共有 4 个。
对于N的十位数字6来说，D中的3小于N中的十位上的6，那么百位和十位分别固定为3和3，个位上就可以是任意值了，即 33x，共有 4 个。
对于N的十位数字6来说，D中的5小于N中的十位上的6，那么百位和十位分别固定为3和5，个位上就可以是任意值了，即 35x，共有 4 个。
对于N的十位数字6来说，D中的7大于N中的十位上的6，此时再也组不成小于N的数字了，直接返回最终的 20+16+4+4+4=48 个。

class Solution
{
public:
    int atMostNGivenDigitSet(vector<string> &D, int N)
    {
        string str = to_string(N);
        int res = 0, n = D.size(), len = str.size();
        for (int i = 1; i < len; ++i) res += pow(n, i);
        for (int i = 0; i < len; ++i)
        {
            bool hasSameNum = false;
            for (string &d : D)
            {
                if (d[0] < str[i]) res += pow(n, len - 1 - i);
                else if (d[0] == str[i]) { hasSameNum = true; break; }
            }
            if (!hasSameNum) return res;
        }
        return res + 1;
    }
};


// Source https://leetcode.com/problems/valid-permutations-for-di-sequence/

You are given a string s of length n where s[i] is either:

'D' means decreasing, or
'I' means increasing.
A permutation perm of n + 1 integers of all the integers in the range [0, n] is called a valid permutation if for all valid i:

If s[i] == 'D', then perm[i] > perm[i + 1], and
If s[i] == 'I', then perm[i] < perm[i + 1].
Return the number of valid permutations perm. Since the answer may be large, return it modulo 109 + 7.

 

Example 1:

Input: s = "DID"
Output: 5
Explanation: The 5 valid permutations of (0, 1, 2, 3) are:
(1, 0, 3, 2)
(2, 0, 3, 1)
(2, 1, 3, 0)
(3, 0, 2, 1)
(3, 1, 2, 0)
Example 2:

Input: s = "D"
Output: 1
 

Constraints:

n == s.length
1 <= n <= 200
s[i] is either 'I' or 'D'.

dp[i][j] 表示前i个数已经确定，当前要放第i + 1数，且它为剩余的n + 1 - i个数中的第j + 1小，the number of valid permutations

j + 1 <= n + 1 - i
j <= n - i

s = "DID", n = 3，all the integers in the range [0, 3]

dp[0][3] = 1  (3)
dp[0][2] = 1  (2)
dp[0][1] = 1  (1)
dp[0][0] = 1  (0)

dp[1][2] = dp[0][3] = 1  (32)
dp[1][1] = dp[0][3] + dp[0][2] = 2  (31, 21)
dp[1][0] = dp[0][3] + dp[0][2] + dp[0][1] = 3  (30, 20, 10)

dp[2][1] = dp[1][1] + dp[1][0] = 5  (312, 213, 302, 203, 103)
dp[2][0] = dp[1][0] = 3  (301, 201, 102)

dp[3][0] = dp[2][1] = 5 (3120, 2130, 3021, 2031, 1032)

if (S[i] == 'D')  dp[i+1][j] = sum(dp[i][k])    ( j < k <= n - i )
else                dp[i+1][j] = sum(dp[i][k])    ( 0 <= k <= j )

class Solution
{
public:
    int n;
    int dp[205][205];
    int M = 1e9 + 7;

    int numPermsDISequence(string S)
    {
        n = S.size();
        memset(dp, 0, sizeof(dp));
        for (int j = 0; j <= n; ++j) dp[0][j] = 1;
        for (int i = 1; i <= n; ++i)
        {
            if (S[i-1] == 'I')
            {
                int cur = 0;
                for (int j = 0; j <= n - i; ++j)
                {
                    cur = (cur + dp[i-1][j]) % M;
                    dp[i][j] = cur;
                }
            }
            else
            {
                int cur = 0;
                for (int j = n - i; j >= 0; --j)
                {
                    cur = (cur + dp[i - 1][j + 1]) % M;
                    dp[i][j] = cur;
                }
            }
        }
        return dp[n][0];
    }
};


// Source https://leetcode.com/problems/fruit-into-baskets/

You are visiting a farm that has a single row of fruit trees arranged from left to right. The trees are represented by an integer array fruits where fruits[i] is the type of fruit the ith tree produces.

You want to collect as much fruit as possible. However, the owner has some strict rules that you must follow:

You only have two baskets, and each basket can only hold a single type of fruit. There is no limit on the amount of fruit each basket can hold.
Starting from any tree of your choice, you must pick exactly one fruit from every tree (including the start tree) while moving to the right. The picked fruits must fit in one of your baskets.
Once you reach a tree with fruit that cannot fit in your baskets, you must stop.
Given the integer array fruits, return the maximum number of fruits you can pick.

 

Example 1:

Input: fruits = [1,2,1]
Output: 3
Explanation: We can pick from all 3 trees.
Example 2:

Input: fruits = [0,1,2,2]
Output: 3
Explanation: We can pick from trees [1,2,2].
If we had started at the first tree, we would only pick from trees [0,1].
Example 3:

Input: fruits = [1,2,3,2,2]
Output: 4
Explanation: We can pick from trees [2,3,2,2].
If we had started at the first tree, we would only pick from trees [1,2].
 

Constraints:

1 <= fruits.length <= 105
0 <= fruits[i] < fruits.length

有一排树，每棵树产的水果种类是 tree[i]，现在有两种操作，第一种是将当前树的水果加入果篮中，若不能加则停止；第二种是移动到下一个树，若没有下一棵树，则停止。
现在我们有两个果篮，可以从任意一个树的位置开始，但是必须按顺序执行操作一和二，问我们最多能收集多少个水果。
这道题的本质就是从任意位置开始，若最多只能收集两种水果，问最多能收集多少个水果，其实就是最多有两种不同字符的最长子串的长度。

class Solution
{
public:
    int totalFruit(vector<int> &tree)
    {
        int res = 0, start = 0, n = tree.size();
        unordered_map<int, int> fruitCnt;
        for (int i = 0; i < n; ++i)
        {
            ++fruitCnt[tree[i]];
            while (fruitCnt.size() > 2)
            {
                if (--fruitCnt[tree[start]] == 0)
                {
                    fruitCnt.erase(tree[start]);
                }
                ++start;
            }
            res = max(res, i - start + 1);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/sort-array-by-parity/

Given an integer array nums, move all the even integers at the beginning of the array followed by all the odd integers.

Return any array that satisfies this condition.

 

Example 1:

Input: nums = [3,1,2,4]
Output: [2,4,3,1]
Explanation: The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.
Example 2:

Input: nums = [0]
Output: [0]
 

Constraints:

1 <= nums.length <= 5000
0 <= nums[i] <= 5000

class Solution
{
public:
    vector<int> sortArrayByParity(vector<int> &A)
    {
        partition(A.begin(), A.end(), [](auto a)
        {
            return a % 2 == 0;
        });
        return A;
    }
};


// Source https://leetcode.com/problems/super-palindromes/

Let's say a positive integer is a super-palindrome if it is a palindrome, and it is also the square of a palindrome.

Given two positive integers left and right represented as strings, return the number of super-palindromes integers in the inclusive range [left, right].

 

Example 1:

Input: left = "4", right = "1000"
Output: 4
Explanation: 4, 9, 121, and 484 are superpalindromes.
Note that 676 is not a superpalindrome: 26 * 26 = 676, but 26 is not a palindrome.
Example 2:

Input: left = "1", right = "2"
Output: 1
 

Constraints:

1 <= left.length, right.length <= 18
left and right consist of only digits.
left and right cannot have leading zeros.
left and right represent integers in the range [1, 1018 - 1].
left is less than or equal to right.

class Solution
{
public:
    bool isPalindrome(const string &str)
    {
        int left = 0, right = (int)str.size() - 1;
        while (left < right)
        {
            if (str[left++] != str[right--]) return false;
        }
        return true;
    }

    void helper(string cur, long left, long right, int &res)
    {
        if (cur.size() > 9) return;
        if (!cur.empty() && cur[0] != '0')
        {
            long num = stol(cur);
            num *= num;
            if (num > right) return;
            if (num >= left && isPalindrome(to_string(num))) ++res;
        }
        for (char c = '0'; c <= '9'; ++c)
        {
            helper(string(1, c) + cur + string(1, c), left, right, res);
        }
    }

    int superpalindromesInRange(string L, string R)
    {
        int res = 0;
        long left = stol(L), right = stol(R);
        helper("", left, right, res);
        for (char c = '0'; c <= '9'; ++c)
        {
            helper(string(1, c), left, right, res);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/sum-of-subarray-minimums/

Given an array of integers arr, find the sum of min(b), where b ranges over every (contiguous) subarray of arr. Since the answer may be large, return the answer modulo 109 + 7.

 

Example 1:

Input: arr = [3,1,2,4]
Output: 17
Explanation: 
Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. 
Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.
Sum is 17.
Example 2:

Input: arr = [11,81,94,43,3]
Output: 444
 

Constraints:

1 <= arr.length <= 3 * 104
1 <= arr[i] <= 3 * 104

c1 = c2 = c3
d1 = d2 = d3 > c1
b1 = b2 = b3 > c1
a1 = a2 < c1

a1 b1 b2 c1 d1 d2 d3 c2 c3 b3 a2
小 大 大       大  大  大          大  小

left_smaller[j] = i 表示 从j向左，一直到arr[i] 才小于arr[j]
right_smaller[j] = i 表示 从j向右，一直到arr[i] 才小于等于arr[j]

right_smaller[c3] = a2，left_smaller[c3] = a1
right_smaller[c2] = c3，left_smaller[c2] = a1

一定包含c3的子数组，右边界大于等于c3且小于a2，左边界小于等于c3且大于a1，对应arr3
一定包含c2且不包含c3的子数组，右边界等于c2，左边界小于等于c2且大于a1，对应arr2
一定包含c1且不包含c3和c2的子数组，右边界大于等于c1且小于c2，左边界小于等于c1且大于a1，对应arr1

arr3中的子数组与arr2中的子数组没有重复的
arr3中的子数组与arr1中的子数组没有重复的
arr2中的子数组与arr1中的子数组没有重复的

class Solution
{
public:
    int mod = 1e9 + 7;

    int sumSubarrayMins(vector<int> &arr)
    {
        int n = arr.size();
        if(n == 1) return arr[0];
        int left_smaller[n], right_smaller[n];
        stack<int> st;
        st.push(0);
        for(int i = 1; i < n; i++)
        {
            if(arr[i] <= arr[st.top()])
            {
                while(!st.empty() && arr[i] <= arr[st.top()])
                {
                    right_smaller[st.top()] = i;
                    st.pop();
                }
            }
            st.push(i);
        }

        while(!st.empty())
        {
            right_smaller[st.top()] = n;
            st.pop();
        }

        st.push(n - 1);
        for(int i = n - 2; i >= 0; i--)
        {
            if(arr[i] < arr[st.top()])
            {
                while(!st.empty() && arr[i] < arr[st.top()])
                {
                    left_smaller[st.top()] = i;
                    st.pop();
                }
            }
            st.push(i);
        }

        while(!st.empty())
        {
            left_smaller[st.top()] = -1;
            st.pop();
        }

        long ans = 0;
        for(int i = 0 ; i < n; i++)
        {
            ans = (ans + (long)(i - left_smaller[i]) * (right_smaller[i] - i) * arr[i]) % mod;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/smallest-range-i/

You are given an integer array nums and an integer k.

In one operation, you can choose any index i where 0 <= i < nums.length and change nums[i] to nums[i] + x where x is an integer from the range [-k, k]. 
You can apply this operation at most once for each index i.

The score of nums is the difference between the maximum and minimum elements in nums.

Return the minimum score of nums after applying the mentioned operation at most once for each index in it.

 

Example 1:

Input: nums = [1], k = 0
Output: 0
Explanation: The score is max(nums) - min(nums) = 1 - 1 = 0.
Example 2:

Input: nums = [0,10], k = 2
Output: 6
Explanation: Change nums to be [2, 8]. The score is max(nums) - min(nums) = 8 - 2 = 6.
Example 3:

Input: nums = [1,3,6], k = 3
Output: 0
Explanation: Change nums to be [4, 4, 4]. The score is max(nums) - min(nums) = 4 - 4 = 0.
 

Constraints:

1 <= nums.length <= 104
0 <= nums[i] <= 104
0 <= k <= 104

class Solution
{
public:
    int smallestRangeI(vector<int> &A, int K)
    {
        int mx = A[0], mn = A[0];
        for (int num : A)
        {
            mx = max(mx, num);
            mn = min(mn, num);
        }
        return max(0, mx - mn - 2 * K);
    }
};


// Source https://leetcode.com/problems/snakes-and-ladders/

You are given an n x n integer matrix board where the cells are labeled from 1 to n^2 in a Boustrophedon style starting from the bottom left of the board 
(i.e. board[n - 1][0]) and alternating direction each row.

36	35	34	33	32	31
25	26	27	28	29	30
24	23	22	21	20	19
13	14	15	16	17	18
12	11	10	9	8	7
1	2	3	4	5	6

You start on square 1 of the board. In each move, starting from square curr, do the following:

Choose a destination square next with a label in the range [curr + 1, min(curr + 6, n^2)].
This choice simulates the result of a standard 6-sided die roll: i.e., there are always at most 6 destinations, regardless of the size of the board.
If next has a snake or ladder, you must move to the destination of that snake or ladder. Otherwise, you move to next.
The game ends when you reach the square n2.
A board square on row r and column c has a snake or ladder if board[r][c] != -1. The destination of that snake or ladder is board[r][c]. Squares 1 and n^2 do not have a snake or ladder.

Note that you only take a snake or ladder at most once per move. If the destination to a snake or ladder is the start of another snake or ladder, you do not follow the subsequent snake or ladder.

For example, suppose the board is [[-1,4],[-1,3]], and on the first move, your destination square is 2. You follow the ladder to square 3, but do not follow the subsequent ladder to 4.
Return the least number of moves required to reach the square n^2. If it is not possible to reach the square, return -1.

 

Example 1:


Input: board = [[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,35,-1,-1,13,-1],[-1,-1,-1,-1,-1,-1],[-1,15,-1,-1,-1,-1]]
Output: 4
Explanation: 
In the beginning, you start at square 1 (at row 5, column 0).
You decide to move to square 2 and must take the ladder to square 15.
You then decide to move to square 17 and must take the snake to square 13.
You then decide to move to square 14 and must take the ladder to square 35.
You then decide to move to square 36, ending the game.
This is the lowest possible number of moves to reach the last square, so return 4.
Example 2:

Input: board = [[-1,-1],[-1,3]]
Output: 1
 

Constraints:

n == board.length == board[i].length
2 <= n <= 20
grid[i][j] is either -1 or in the range [1, n2].
The squares labeled 1 and n2 do not have any ladders or snakes.

class Solution
{
public:
    int n;

    int getBoardValue(vector<vector<int>> &board, int num)
    {
        int x = (num - 1) / n, y = (num - 1) % n;
        if (x % 2 == 1) y = n - 1 - y;
        x = n - 1 - x;
        return board[x][y];
    }

    int snakesAndLadders(vector<vector<int>> &board)
    {
        n = board.size();
        queue<int> q;
        vector<bool> visited(n * n + 1);
        q.push(1);
        visited[1] = true;
        int res = 0;
        int target = n * n;
        while (!q.empty())
        {
            int sz = q.size();
            for (int k = 0; k < sz; ++k)
            {
                int num = q.front();
                q.pop();
                if (num == target) return res;
                for (int i = 1; i <= 6 && num + i <= n * n; ++i)
                {
                    int next = getBoardValue(board, num + i);
                    if (next == -1) next = num + i;
                    if (visited[next]) continue;
                    q.push(next);
                    visited[next] = true;
                }
            }
            ++res;
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/smallest-range-ii/

You are given an integer array nums and an integer k.

For each index i where 0 <= i < nums.length, change nums[i] to be either nums[i] + k or nums[i] - k.

The score of nums is the difference between the maximum and minimum elements in nums.

Return the minimum score of nums after changing the values at each index.

 

Example 1:

Input: nums = [1], k = 0
Output: 0
Explanation: The score is max(nums) - min(nums) = 1 - 1 = 0.
Example 2:

Input: nums = [0,10], k = 2
Output: 6
Explanation: Change nums to be [2, 8]. The score is max(nums) - min(nums) = 8 - 2 = 6.
Example 3:

Input: nums = [1,3,6], k = 3
Output: 3
Explanation: Change nums to be [4, 6, 3]. The score is max(nums) - min(nums) = 6 - 3 = 3.
 

Constraints:

1 <= nums.length <= 104
0 <= nums[i] <= 104
0 <= k <= 104

由于每个数字都需要加K或者减K，为了使得新数组的最大值最小值的差值最小，应该尽量使原数组中的较小的数字加K，较大的数字减K，所以最好是先给原数组排个序，
然后在数组的某个位置i为界限，将原数组分为两段，前面所有的数字都加K，后面所有的数字都减K。
则前半段 [0, i] 中的最大值是 A[i]+K，最小值是 A[0]+K，后半段 [i+1, n-1] 范围内的最大值是 A[n-1]-K，最小值是 A[i+1]-K，
所以整个数组的最大值是 A[i]+K 和 A[n-1]-K 中的较大值，最小值是 A[0]+K 和 A[i+1]-K 中的较小值，二者做差就是可能的结果了，遍历所有的i，用每次计算出的差值来更新结果 res 即可

class Solution
{
public:
    int smallestRangeII(vector<int> &A, int K)
    {
        int n = A.size();
        if (n == 1) return 0;
        sort(A.begin(), A.end());
        int res = A[n-1] - A[0]; // 全部加K，或全部减K
        int left = A[0] + K, right =  A[n - 1] - K;
        for (int i = 0; i < n - 1; ++i)
        {
            int high = max(right, A[i] + K);
            int low = min(left, A[i + 1] - K);
            res = min(res, high - low);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/online-election/

You are given two integer arrays persons and times. In an election, the ith vote was cast for persons[i] at time times[i].

For each query at a time t, find the person that was leading the election at time t. Votes cast at time t will count towards our query. 
In the case of a tie, the most recent vote (among tied candidates) wins.

Implement the TopVotedCandidate class:

TopVotedCandidate(int[] persons, int[] times) Initializes the object with the persons and times arrays.
int q(int t) Returns the number of the person that was leading the election at time t according to the mentioned rules.
 

Example 1:

Input
["TopVotedCandidate", "q", "q", "q", "q", "q", "q"]
[[[0, 1, 1, 0, 0, 1, 0], [0, 5, 10, 15, 20, 25, 30]], [3], [12], [25], [15], [24], [8]]
Output
[null, 0, 1, 1, 0, 0, 1]

Explanation
TopVotedCandidate topVotedCandidate = new TopVotedCandidate([0, 1, 1, 0, 0, 1, 0], [0, 5, 10, 15, 20, 25, 30]);
topVotedCandidate.q(3); // return 0, At time 3, the votes are [0], and 0 is leading.
topVotedCandidate.q(12); // return 1, At time 12, the votes are [0,1,1], and 1 is leading.
topVotedCandidate.q(25); // return 1, At time 25, the votes are [0,1,1,0,0,1], and 1 is leading (as ties go to the most recent vote.)
topVotedCandidate.q(15); // return 0
topVotedCandidate.q(24); // return 0
topVotedCandidate.q(8); // return 1

 

Constraints:

1 <= persons.length <= 5000
times.length == persons.length
0 <= persons[i] < persons.length
0 <= times[i] <= 109
times is sorted in a strictly increasing order.
times[0] <= t <= 109
At most 104 calls will be made to q.

class TopVotedCandidate
{
public:
    vector<int> leader;
    vector<int> times;

    TopVotedCandidate(vector<int> &persons, vector<int> &times)
    {
        int n = persons.size();
        vector<int> count(n);
        this->times = times;
        this->leader.resize(n, 0);
        int lead = 0;
        for (int i = 0; i < n; ++i)
        {
            if (++count[persons[i]] >= count[lead])
            {
                lead = persons[i];
            }
            leader[i] = lead;
        }
    }

    int q(int t)
    {
        auto itr = upper_bound(times.begin(), times.end(), t);
        --itr;
        auto idx = itr - times.begin();
        return leader[idx];
    }
};


// Source https://leetcode.com/problems/sort-an-array/

Given an array of integers nums, sort the array in ascending order.

 

Example 1:

Input: nums = [5,2,3,1]
Output: [1,2,3,5]
Example 2:

Input: nums = [5,1,1,2,0,0]
Output: [0,0,1,1,2,5]
 

Constraints:

1 <= nums.length <= 5 * 104
-5 * 104 <= nums[i] <= 5 * 104

class Solution
{
public:
    vector<int> sortArray(vector<int> &nums)
    {
        sort(nums.begin(), nums.end());
        return nums;
    }
};

class Solution
{
public:
    template<typename Iterator, typename CompareType = std::less<typename std::iterator_traits<Iterator>::value_type>>
    void merge(const Iterator begin, const Iterator end, const Iterator middle, CompareType compare = CompareType())
    {
        typedef typename std::iterator_traits<Iterator>::value_type T;// 迭代器指向对象的值类型
        if(std::distance(begin, middle) <= 0 || std::distance(middle, end) <= 0) return;
        std::vector<T> result(std::distance(begin, end)); //暂存结果
        auto current = result.begin();
        auto left_current = begin; //左侧序列当前比较位置
        auto right_current = middle; //右序列当前比较位置
        while(left_current != middle && right_current != end)
        {
            if(compare(*left_current, *right_current))
            {
                *current++ = *left_current++; //左侧较小
            }
            else
            {
                *current++ = *right_current++; //左侧较小
            }
        }
        if(left_current == middle && right_current != end) //当左侧序列为搬空
        {
            std::copy(right_current, end, current);
        }
        if(right_current == end && left_current != middle) //当右侧序列搬空
        {
            std::copy(left_current, middle, current);
        }
        std::copy(result.begin(), result.end(), begin); //复制回原序列，因此是非原地的
    }

    template<typename Iterator, typename CompareType = std::less<typename std::iterator_traits<Iterator>::value_type>>
    void merge_sort(const Iterator begin, const Iterator end, CompareType compare = CompareType())
    {
        auto size = std::distance(begin, end);
        if(size > 1)
        {
            Iterator middle = begin + size / 2;
            merge_sort(begin, middle, compare);
            merge_sort(middle, end, compare);
            merge(begin, end, middle, compare);
        }
    }
    vector<int> sortArray(vector<int> &nums)
    {
        merge_sort(nums.begin(), nums.end());
        return nums;
    }
};


// Source https://leetcode.com/problems/cat-and-mouse/

A game on an undirected graph is played by two players, Mouse and Cat, who alternate turns.

The graph is given as follows: graph[a] is a list of all nodes b such that ab is an edge of the graph.

The mouse starts at node 1 and goes first, the cat starts at node 2 and goes second, and there is a hole at node 0.

During each player's turn, they must travel along one edge of the graph that meets where they are.  For example, if the Mouse is at node 1, it must travel to any node in graph[1].

Additionally, it is not allowed for the Cat to travel to the Hole (node 0.)

Then, the game can end in three ways:

If ever the Cat occupies the same node as the Mouse, the Cat wins.
If ever the Mouse reaches the Hole, the Mouse wins.
If ever a position is repeated (i.e., the players are in the same position as a previous turn, and it is the same player's turn to move), the game is a draw.
Given a graph, and assuming both players play optimally, return

1 if the mouse wins the game,
2 if the cat wins the game, or
0 if the game is a draw.
 

Example 1:


Input: graph = [[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]
Output: 0
Example 2:


Input: graph = [[1,3],[0],[3],[0,2]]
Output: 1
 

Constraints:

3 <= graph.length <= 50
1 <= graph[i].length < graph.length
0 <= graph[i][j] < graph.length
graph[i][j] != i
graph[i] is unique.
The mouse and the cat can always move. 

游戏中的状态由老鼠的位置、猫的位置和轮到移动的一方三个因素确定。初始时，只有边界情况的胜负结果已知，其余所有状态的结果都初始化为平局。
边界情况为直接确定胜负的情况，包括两类情况：老鼠躲入洞里，无论猫位于哪个结点，都是老鼠获胜；猫和老鼠占据相同的节点，无论占据哪个结点，都是猫获胜。

从边界情况出发遍历其他情况。对于当前状态，可以得到老鼠的位置、猫的位置和轮到移动的一方，根据当前状态可知上一轮的所有可能状态，其中上一轮的移动方和当前的移动方相反，
上一轮的移动方在上一轮状态和当前状态所在的节点不同。假设当前状态是老鼠所在节点是 mouse，猫所在节点是 cat，则根据当前的移动方，可以得到上一轮的所有可能状态：

如果当前的移动方是老鼠，则上一轮的移动方是猫，上一轮状态中老鼠所在节点是 mouse，猫所在节点可能是 graph[cat] 中的任意一个节点（除了节点 0）；

如果当前的移动方是猫，则上一轮的移动方是老鼠，上一轮状态中老鼠所在节点可能是 graph[mouse] 中的任意一个节点，猫所在节点是 cat。

对于上一轮的每一种可能的状态，如果该状态的结果已知不是平局，则不需要重复计算该状态的结果，只有对结果是平局的状态，才需要计算该状态的结果。
对于上一轮的移动方，只有当可以确定上一轮状态是必胜状态或者必败状态时，才更新上一轮状态的结果。

如果上一轮的移动方和当前状态的结果的获胜方相同，上一轮状态更新为上一轮的移动方的必胜状态。

如果上一轮的移动方和当前状态的结果的获胜方不同，则上一轮的移动方需要尝试其他可能的移动，可能有以下三种情况：

如果存在一种移动可以到达上一轮的移动方的必胜状态，则上一轮状态更新为上一轮的移动方的必胜状态；

如果所有的移动都到达上一轮的移动方的必败状态，则上一轮状态更新为为上一轮的移动方的必败状态；

如果所有的移动都不能到达上一轮的移动方的必胜状态，但是存在一种移动可以到达上一轮的移动方的必和状态，则上一轮状态更新为为上一轮的移动方的必和状态。

其中，对于必败状态与必和状态的判断依据为上一轮的移动方可能的移动是都到达必败状态还是可以到达必和状态。为了实现必败状态与必和状态的判断，
需要记录每个状态的度，初始时每个状态的度为当前玩家在当前位置可以移动到的节点数。对于老鼠而言，初始的度为老鼠所在的节点的相邻节点数；
对于猫而言，初始的度为猫所在的节点的相邻且非节点 0 的节点数。

遍历过程中，从当前状态出发遍历上一轮的所有可能状态，如果上一轮状态的结果是平局且上一轮的移动方和当前状态的结果的获胜方不同，则将上一轮状态的度减 1。
如果上一轮状态的度减少到 0，则从上一轮状态出发到达的所有状态都是上一轮的移动方的必败状态，因此上一轮状态也是上一轮的移动方的必败状态。

在确定上一轮状态的结果（必胜或必败）之后，即可从上一轮状态出发，遍历其他结果是平局的状态。当没有更多的状态可以确定胜负结果时，遍历结束，此时即可得到初始状态的结果。

class Solution
{
public:
    int dp[2][55][55];
    int out_degree[2][55][55];
    int cat_degree[55];

    void recur(vector<vector<int>> &graph, int mouse, int cat, int turn, int result)
    {
        if (dp[turn][mouse][cat] != 0) return;
        dp[turn][mouse][cat] = result;
        if (turn) // 当前移动方为cat，上一轮移动方为mouse
        {
            turn = 0;
            for (int j : graph[mouse])
            {
                if (j == 0 || j == cat)
                {
                    continue;
                }
                if (result == 1)
                {
                    recur(graph, j, cat, turn, result);
                }
                else
                {
                    out_degree[turn][j][cat]++;
                    if (out_degree[turn][j][cat] == graph[j].size()) recur(graph, j, cat, turn, 2);
                }
            }
        }
        else  // 当前移动方为mouse，上一轮移动方为cat
        {
            turn = 1;
            for (int j : graph[cat])
            {
                if (j == 0 || j == mouse)
                {
                    continue;
                }
                if (result == 2)
                {
                    recur(graph, mouse, j, turn, result);
                }
                else
                {
                    out_degree[turn][mouse][j]++;
                    if (out_degree[turn][mouse][j] == cat_degree[j]) recur(graph, mouse, j, turn, 1);
                }
            }
        }
    }

    int catMouseGame(vector<vector<int>> &graph)
    {
        int n = graph.size();
        memset(dp, 0, sizeof(dp));
        memset(out_degree, 0, sizeof(out_degree));
        memset(cat_degree, 0, sizeof(cat_degree));

        for (int i = 1; i < n; ++i)
        {
            cat_degree[i] = graph[i].size();
        }
        for (int i : graph[0]) cat_degree[i]--;

        for (int i = 1; i < n; ++i)
        {
            recur(graph, 0, i, 1, 1);
            recur(graph, i, i, 0, 2);
            recur(graph, i, i, 1, 2);
        }
        return dp[0][1][2];
    }
};


// Source https://leetcode.com/problems/x-of-a-kind-in-a-deck-of-cards/

In a deck of cards, each card has an integer written on it.

Return true if and only if you can choose X >= 2 such that it is possible to split the entire deck into 1 or more groups of cards, where:

Each group has exactly X cards.
All the cards in each group have the same integer.
 

Example 1:

Input: deck = [1,2,3,4,4,3,2,1]
Output: true
Explanation: Possible partition [1,1],[2,2],[3,3],[4,4].
Example 2:

Input: deck = [1,1,1,2,2,2,3,3]
Output: false
Explanation: No possible partition.
 

Constraints:

1 <= deck.length <= 104
0 <= deck[i] < 104

class Solution
{
public:
    int gcd(int a, int b)
    {
        return b == 0 ? a : gcd(b, a % b);
    }

    bool hasGroupsSizeX(vector<int> &deck)
    {
        unordered_map<int, int> cardCnt;
        for (int card : deck) ++cardCnt[card];
        int res = 0;
        for (auto a : cardCnt)
        {
            if (a.second == 1) return false;
            res = gcd(res, a.second);
        }
        return res > 1;
    }
};


// Source https://leetcode.com/problems/partition-array-into-disjoint-intervals/

Given an integer array nums, partition it into two (contiguous) subarrays left and right so that:

Every element in left is less than or equal to every element in right.
left and right are non-empty.
left has the smallest possible size.
Return the length of left after such a partitioning.

Test cases are generated such that partitioning exists.

 

Example 1:

Input: nums = [5,0,3,8,6]
Output: 3
Explanation: left = [5,0,3], right = [8,6]
Example 2:

Input: nums = [1,1,1,0,6,12]
Output: 4
Explanation: left = [1,1,1,0], right = [6,12]
 

Constraints:

2 <= nums.length <= 105
0 <= nums[i] <= 106
There is at least one valid answer for the given input.

class Solution
{
public:
    int partitionDisjoint(vector<int> &A)
    {
        int n = A.size();
        vector<int> backMin(n);
        backMin[n-1] = A[n-1];
        for (int i = n - 2; i >= 0; --i)
        {
            backMin[i] = min(backMin[i + 1], A[i]);
        }
        int curMax = A[0];
        for (int i = 1; i < n; ++i)
        {
            if (curMax <= backMin[i]) return i;
            curMax = max(curMax, A[i]);
        }
        return 0;
    }
};


// Source https://leetcode.com/problems/word-subsets/

You are given two string arrays words1 and words2.

A string b is a subset of string a if every letter in b occurs in a including multiplicity.

For example, "wrr" is a subset of "warrior" but is not a subset of "world".
A string a from words1 is universal if for every string b in words2, b is a subset of a.

Return an array of all the universal strings in words1. You may return the answer in any order.

 

Example 1:

Input: words1 = ["amazon","apple","facebook","google","leetcode"], words2 = ["e","o"]
Output: ["facebook","google","leetcode"]
Example 2:

Input: words1 = ["amazon","apple","facebook","google","leetcode"], words2 = ["l","e"]
Output: ["apple","google","leetcode"]
 

Constraints:

1 <= words1.length, words2.length <= 104
1 <= words1[i].length, words2[i].length <= 10
words1[i] and words2[i] consist only of lowercase English letters.
All the strings of words1 are unique.

class Solution
{
public:
    vector<int> helper(string &word)
    {
        vector<int> res(26);
        for (char c : word) ++res[c - 'a'];
        return res;
    }

    vector<string> wordSubsets(vector<string> &A, vector<string> &B)
    {
        vector<int> charCnt(26);
        for (string &b : B)
        {
            vector<int> t = helper(b);
            for (int i = 0; i < 26; ++i)
            {
                charCnt[i] = max(charCnt[i], t[i]);
            }
        }
        vector<string> res;
        for (string &a : A)
        {
            vector<int> t = helper(a);
            int i = 0;
            for (; i < 26; ++i)
            {
                if (t[i] < charCnt[i]) break;
            }
            if (i == 26) res.push_back(a);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/reverse-only-letters/

Given a string s, reverse the string according to the following rules:

All the characters that are not English letters remain in the same position.
All the English letters (lowercase or uppercase) should be reversed.
Return s after reversing it.

 

Example 1:

Input: s = "ab-cd"
Output: "dc-ba"
Example 2:

Input: s = "a-bC-dEf-ghIj"
Output: "j-Ih-gfE-dCba"
Example 3:

Input: s = "Test1ng-Leet=code-Q!"
Output: "Qedo1ct-eeLg=ntse-T!"
 

Constraints:

1 <= s.length <= 100
s consists of characters with ASCII values in the range [33, 122].
s does not contain '\"' or '\\'.

class Solution
{
public:
    string reverseOnlyLetters(string S)
    {
        int n = S.size(), i = 0, j = n - 1;
        while (i < j)
        {
            if (!isalpha(S[i])) ++i;
            else if (!isalpha(S[j])) --j;
            else
            {
                swap(S[i], S[j]);
                ++i;
                --j;
            }
        }
        return S;
    }
};


// Source https://leetcode.com/problems/maximum-sum-circular-subarray/

Given a circular integer array nums of length n, return the maximum possible sum of a non-empty subarray of nums.

A circular array means the end of the array connects to the beginning of the array. Formally, the next element of nums[i] is nums[(i + 1) % n] 
and the previous element of nums[i] is nums[(i - 1 + n) % n].

A subarray may only include each element of the fixed buffer nums at most once. 
Formally, for a subarray nums[i], nums[i + 1], ..., nums[j], there does not exist i <= k1, k2 <= j with k1 % n == k2 % n.

 

Example 1:

Input: nums = [1,-2,3,-2]
Output: 3
Explanation: Subarray [3] has maximum sum 3.
Example 2:

Input: nums = [5,-3,5]
Output: 10
Explanation: Subarray [5,5] has maximum sum 5 + 5 = 10.
Example 3:

Input: nums = [-3,-2,-3]
Output: -2
Explanation: Subarray [-2] has maximum sum -2.
 

Constraints:

n == nums.length
1 <= n <= 3 * 104
-3 * 104 <= nums[i] <= 3 * 104

假如nums中的值全部小于等于0，那么和最小的子数组就是原数组本身，则sum - mn求出的差值是0

class Solution
{
public:
    int maxSubarraySumCircular(vector<int> &A)
    {
        int sum = 0, mn = INT_MAX, mx = INT_MIN, curMax = 0, curMin = 0;
        for (int num : A)
        {
            curMin = min(curMin + num, num);
            mn = min(mn, curMin);
            curMax = max(curMax + num, num);
            mx = max(mx, curMax);
            sum += num;
        }
        return (sum - mn == 0) ? mx : max(mx, sum - mn);
    }
};


// Source https://leetcode.com/problems/complete-binary-tree-inserter/

A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible.

Design an algorithm to insert a new node to a complete binary tree keeping it complete after the insertion.

Implement the CBTInserter class:

CBTInserter(TreeNode root) Initializes the data structure with the root of the complete binary tree.
int insert(int v) Inserts a TreeNode into the tree with value Node.val == val so that the tree remains complete, and returns the value of the parent of the inserted TreeNode.
TreeNode get_root() Returns the root node of the tree.
 

Example 1:


Input
["CBTInserter", "insert", "insert", "get_root"]
[[[1, 2]], [3], [4], []]
Output
[null, 1, 2, [1, 2, 3, 4]]

Explanation
CBTInserter cBTInserter = new CBTInserter([1, 2]);
cBTInserter.insert(3);  // return 1
cBTInserter.insert(4);  // return 2
cBTInserter.get_root(); // return [1, 2, 3, 4]
 

Constraints:

The number of nodes in the tree will be in the range [1, 1000].
0 <= Node.val <= 5000
root is a complete binary tree.
0 <= val <= 5000
At most 104 calls will be made to insert and get_root.

class CBTInserter
{
public:
    vector<TreeNode *> tree;

    CBTInserter(TreeNode *root)
    {
        tree.reserve(1000);
        queue<TreeNode *> q;
        q.push(root);
        while (!q.empty())
        {
            int sz = q.size();
            for (int k = 0; k < sz; ++k)
            {
                auto cur = q.front();
                q.pop();
                tree.push_back(cur);
                if (cur->left) q.push(cur->left);
                if (cur->right) q.push(cur->right);
            }
        }
    }

    int insert(int v)
    {
        TreeNode *node = new TreeNode(v);
        int n = tree.size();
        tree.push_back(node);
        if (n % 2 == 1) tree[(n - 1) / 2]->left = node;
        else tree[(n - 1) / 2]->right = node;
        return tree[(n - 1) / 2]->val;
    }

    TreeNode *get_root()
    {
        return tree[0];
    }
};



// Source https://leetcode.com/problems/number-of-music-playlists/

Your music player contains n different songs. You want to listen to goal songs (not necessarily different) during your trip. To avoid boredom, you will create a playlist so that:

Every song is played at least once.
A song can only be played again only if k other songs have been played.
Given n, goal, and k, return the number of possible playlists that you can create. Since the answer can be very large, return it modulo 109 + 7.

 

Example 1:

Input: n = 3, goal = 3, k = 1
Output: 6
Explanation: There are 6 possible playlists: [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], and [3, 2, 1].
Example 2:

Input: n = 2, goal = 3, k = 0
Output: 6
Explanation: There are 6 possible playlists: [1, 1, 2], [1, 2, 1], [2, 1, 1], [2, 2, 1], [2, 1, 2], and [1, 2, 2].
Example 3:

Input: n = 2, goal = 3, k = 1
Output: 2
Explanation: There are 2 possible playlists: [1, 2, 1] and [2, 1, 2].
 

Constraints:

0 <= k < n <= goal <= 100

class Solution
{
public:
    int mod = 1e9 + 7;
    int dp[105][105];

    long long solve(int cur_n, int cur_goal, int n, int goal, int k)
    {
        if(cur_n > n) return 0;
        if(cur_goal > goal) return 0;
        if(cur_goal == goal) return cur_n == n;
        if(dp[cur_n][cur_goal] != -1) return dp[cur_n][cur_goal];
        long long ans = 0;
        ans += (solve(cur_n, cur_goal + 1, n, goal, k) * max(0, cur_n - k)) % mod;
        ans += (solve(cur_n + 1, cur_goal + 1, n, goal, k) * (n - cur_n)) % mod;
        return dp[cur_n][cur_goal] = ans % mod;
    }

    int numMusicPlaylists(int n, int goal, int k)
    {
        memset(dp, -1, sizeof(dp));
        return solve(0, 0, n, goal, k);
    }
};


// Source https://leetcode.com/problems/minimum-add-to-make-parentheses-valid/

A parentheses string is valid if and only if:

It is the empty string,
It can be written as AB (A concatenated with B), where A and B are valid strings, or
It can be written as (A), where A is a valid string.
You are given a parentheses string s. In one move, you can insert a parenthesis at any position of the string.

For example, if s = "()))", you can insert an opening parenthesis to be "(()))" or a closing parenthesis to be "())))".
Return the minimum number of moves required to make s valid.

 

Example 1:

Input: s = "())"
Output: 1
Example 2:

Input: s = "((("
Output: 3
 

Constraints:

1 <= s.length <= 1000
s[i] is either '(' or ')'.

class Solution
{
public:
    int minAddToMakeValid(string s)
    {
        stack<char> st;
        int cnt = 0;
        for(char c : s)
        {
            if(c == '(')
                st.push(c);
            else
            {
                if(!st.empty())
                    st.pop();
                else
                    cnt++;
            }
        }
        return cnt + st.size();
    }
};


// Source https://leetcode.com/problems/sort-array-by-parity-ii/

Given an array of integers nums, half of the integers in nums are odd, and the other half are even.

Sort the array so that whenever nums[i] is odd, i is odd, and whenever nums[i] is even, i is even.

Return any answer array that satisfies this condition.

 

Example 1:

Input: nums = [4,2,5,7]
Output: [4,5,2,7]
Explanation: [4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.
Example 2:

Input: nums = [2,3]
Output: [2,3]
 

Constraints:

2 <= nums.length <= 2 * 104
nums.length is even.
Half of the integers in nums are even.
0 <= nums[i] <= 1000

class Solution
{
public:
    vector<int> sortArrayByParityII(vector<int> &A)
    {
        int n = A.size();
        vector<int> evenVec;
        vector<int> oddVec;
        evenVec.reserve(n/2);
        oddVec.reserve(n/2);
        for (auto val : A)
        {
            if (val % 2) oddVec.push_back(val);
            else evenVec.push_back(val);
        }
        vector<int> res;
        res.reserve(n);
        for (int i = 0; i < n / 2; ++i)
        {
            res.push_back(evenVec[i]);
            res.push_back(oddVec[i]);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/3sum-with-multiplicity/

Given an integer array arr, and an integer target, return the number of tuples i, j, k such that i < j < k and arr[i] + arr[j] + arr[k] == target.

As the answer can be very large, return it modulo 109 + 7.

 

Example 1:

Input: arr = [1,1,2,2,3,3,4,4,5,5], target = 8
Output: 20
Explanation: 
Enumerating by the values (arr[i], arr[j], arr[k]):
(1, 2, 5) occurs 8 times;
(1, 3, 4) occurs 8 times;
(2, 2, 4) occurs 2 times;
(2, 3, 3) occurs 2 times.
Example 2:

Input: arr = [1,1,2,2,2,2], target = 5
Output: 12
Explanation: 
arr[i] = 1, arr[j] = arr[k] = 2 occurs 12 times:
We choose one 1 from [1,1] in 2 ways,
and two 2s from [2,2,2,2] in 6 ways.
 

Constraints:

3 <= arr.length <= 3000
0 <= arr[i] <= 100
0 <= target <= 300

class Solution
{
public:
    int n;
    int mod = 1e9 + 7;
    int dp[3001][4][301];

    int recur(vector<int> &arr, int idx, int cnt, int target)
    {
        if(cnt < 0) return 0;
        if(target < 0) return 0;
        if(cnt == 0) return target == 0;
        if(idx >= n) return 0;
        if(dp[idx][cnt][target] != -1) return dp[idx][cnt][target];
        int pick = recur(arr, idx + 1, cnt - 1, target - arr[idx]) % mod;
        int notPick = recur(arr, idx + 1, cnt, target) % mod;
        return dp[idx][cnt][target] = (pick + notPick) % mod;
    }

    int threeSumMulti(vector<int> &arr, int target)
    {
        n = arr.size();
        memset(dp, -1, sizeof(dp));
        return recur(arr, 0, 3, target);
    }
};


// Source https://leetcode.com/problems/minimize-malware-spread/

You are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1.

Some nodes initial are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, 
both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops. We will remove exactly one node from initial.

Return the node that, if removed, would minimize M(initial). If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.

Note that if a node was removed from the initial list of infected nodes, it might still be infected later due to the malware spread.

 

Example 1:

Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0
Example 2:

Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
Output: 0
Example 3:

Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
Output: 1
 

Constraints:

n == graph.length
n == graph[i].length
2 <= n <= 300
graph[i][j] is 0 or 1.
graph[i][j] == graph[j][i]
graph[i][i] == 1
1 <= initial.length <= n
0 <= initial[i] <= n - 1
All the integers in initial are unique.

class Solution
{
public:
    int parent[300];
    int size[300];

    int find(int v)
    {
        if (parent[v] != v) parent[v] = find(parent[v]);
        return parent[v];
    }

    void join(int a, int b)
    {
        int root_a = find(a);
        int root_b = find(b);
        if (root_a == root_b) return;
        if (size[root_a] > size[root_b])
        {
            parent[root_b] = root_a;
            size[root_a] += size[root_b];
        }
        else
        {
            parent[root_a] = root_b;
            size[root_b] += size[root_a];
        }
    }

    int minMalwareSpread(vector<vector<int>> &graph, vector<int> &initial)
    {
        int n = graph.size();
        for(int i = 0; i < n; i++)
        {
            parent[i] = i;
            size[i] = 1;
        }

        for(int i = 0; i < n; i++)   // union different sets
        {
            for(int j = 0; j < n; j++)
            {
                if(graph[i][j] == 1 && i != j)
                {
                    join(i, j);
                }
            }
        }

        unordered_map<int, int> mp; // {component, no of initial}
        for(int i = 0; i < initial.size(); i++)
        {
            int root_a = find(initial[i]);
            mp[root_a]++;  // storing frequency of initials in each component
        }

        int componentSize = INT_MIN;
        int removeInitial = INT_MAX;

        for(auto it : initial)
        {
            int root_a = find(it);
            if(mp[root_a] == 1)   // if component contain only one initial, then we proceed
            {
                if(size[root_a] == componentSize)   // if two component have same size take min initial, as mentioned in question
                {
                    removeInitial = min(removeInitial, it);
                }
                else if(size[root_a] > componentSize)   // if component with large size than previous, we take current initial
                {
                    componentSize = size[root_a];
                    removeInitial = it;
                }
            }
        }

        // if we didn't get any initial to remove, we will take minimum of all initial, as mentioned in question
        if(removeInitial == INT_MAX)
        {
            for(auto it : initial)
            {
                removeInitial = min(removeInitial, it);
            }
        }
        return removeInitial;
    }
};


// Source https://leetcode.com/problems/long-pressed-name/

Your friend is typing his name into a keyboard. Sometimes, when typing a character c, the key might get long pressed, and the character will be typed 1 or more times.

You examine the typed characters of the keyboard. Return True if it is possible that it was your friends name, with some characters (possibly none) being long pressed.

 

Example 1:

Input: name = "alex", typed = "aaleex"
Output: true
Explanation: 'a' and 'e' in 'alex' were long pressed.
Example 2:

Input: name = "saeed", typed = "ssaaedd"
Output: false
Explanation: 'e' must have been pressed twice, but it was not in the typed output.
 

Constraints:

1 <= name.length, typed.length <= 1000
name and typed consist of only lowercase English letters.

class Solution
{
public:
    bool isLongPressedName(string name, string typed)
    {
        int m = name.size(), n = typed.size();
        int i = 0, j = 0;
        while (i < m && j < n)
        {
            if (name[i] != typed[j]) return false;
            int k1 = i + 1;
            for (; k1 < m && name[k1] == name[i]; ++k1);
            int cnt1 = k1 - i;
            int k2 = j + 1;
            for (; k2 < n && typed[k2] == typed[j]; ++k2);
            int cnt2 = k2 - j;
            if (cnt1 > cnt2) return false;
            i = k1;
            j = k2;
        }
        return i == m && j == n;
    }
};


// Source https://leetcode.com/problems/flip-string-to-monotone-increasing/

A binary string is monotone increasing if it consists of some number of 0's (possibly none), followed by some number of 1's (also possibly none).

You are given a binary string s. You can flip s[i] changing it from 0 to 1 or from 1 to 0.

Return the minimum number of flips to make s monotone increasing.

 

Example 1:

Input: s = "00110"
Output: 1
Explanation: We flip the last digit to get 00111.
Example 2:

Input: s = "010110"
Output: 2
Explanation: We flip to get 011111, or alternatively 000111.
Example 3:

Input: s = "00011000"
Output: 2
Explanation: We flip to get 00000000.
 

Constraints:

1 <= s.length <= 105
s[i] is either '0' or '1'.

全部为0不需要翻转
全部为1不需要翻转
若干个0后面是若干个1，不需要翻转
若干个1后面是若干个0，这种情况需要翻转
如果0的次数小于1的次数，则翻转次数为0的次数
如果0的次数大于等于1的次数，则翻转次数为1的次数
0011100110 变成0011111111，翻转3次
001110000011000  变成000000000000000，翻转5次
00011000 变成 00000000，翻转2次
010110 变成 000111，翻转2次
00110 变成00111，翻转1次
010 变成000或011，翻转1次

class Solution
{
public:
    int minFlipsMonoIncr(string s)
    {
        int cnt = 0, ans = 0;
        for(char ch : s)
        {
            if(ch == '0' and cnt > 0)
            {
                cnt--;
                ans++;
            }
            else if(ch == '1') cnt++;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/three-equal-parts/

You are given an array arr which consists of only zeros and ones, divide the array into three non-empty parts such that all of these parts represent the same binary value.

If it is possible, return any [i, j] with i + 1 < j, such that:

arr[0], arr[1], ..., arr[i] is the first part,
arr[i + 1], arr[i + 2], ..., arr[j - 1] is the second part, and
arr[j], arr[j + 1], ..., arr[arr.length - 1] is the third part.
All three parts have equal binary values.
If it is not possible, return [-1, -1].

Note that the entire part is used when considering what binary value it represents. For example, [1,1,0] represents 6 in decimal, not 3. 
Also, leading zeros are allowed, so [0,1,1] and [1,1] represent the same value.

 

Example 1:

Input: arr = [1,0,1,0,1]
Output: [0,3]
Example 2:

Input: arr = [1,1,0,1,1]
Output: [-1,-1]
Example 3:

Input: arr = [1,1,0,0,1]
Output: [0,2]
 

Constraints:

3 <= arr.length <= 3 * 104
arr[i] is 0 or 1

class Solution
{
public:
    vector<int> threeEqualParts(vector<int> &A)
    {
        int cntOne = 0, n = A.size();
        for (int num : A)
        {
            if (num == 1) ++cntOne;
        }
        if (cntOne == 0) return {0, n - 1};
        if (cntOne % 3 != 0) return {-1, -1};
        int k = cntOne / 3, start = 0, mid = 0, end = 0, cnt = 0;
        for (int i = 0; i < n; ++i)
        {
            if (A[i] == 0) continue;
            ++cnt;
            if (cnt == 1) start = i;
            if (cnt == k + 1) mid = i;
            if (cnt == 2 * k + 1)
            {
                end = i;
                break;
            }
        }
        while (end < n && A[start] == A[mid] && A[mid] == A[end])
        {
            ++start;
            ++mid;
            ++end;
        }
        if (end == n) return {start - 1, mid};
        return {-1, -1};
    }
};


// Source https://leetcode.com/problems/minimize-malware-spread-ii/

You are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1.

Some nodes initial are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, 
both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops.

We will remove exactly one node from initial, completely removing it and any connections from this node to any other node.

Return the node that, if removed, would minimize M(initial). If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.

 

Example 1:

Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0
Example 2:

Input: graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]
Output: 1
Example 3:

Input: graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]
Output: 1
 

Constraints:

n == graph.length
n == graph[i].length
2 <= n <= 300
graph[i][j] is 0 or 1.
graph[i][j] == graph[j][i]
graph[i][i] == 1
1 <= initial.length < n
0 <= initial[i] <= n - 1
All the integers in initial are unique.

之前的那道题是remove exactly one node from initial，这道题除了remove exactly one node from initial, 还会completely removing it and any connections from this node to any other node.

class Solution
{
public:
    int parent[300];
    int size[300];

    int find(int v)
    {
        if (parent[v] != v) parent[v] = find(parent[v]);
        return parent[v];
    }

    void join(int a, int b)
    {
        int root_a = find(a);
        int root_b = find(b);
        if (root_a == root_b) return;
        if (size[root_a] > size[root_b])
        {
            parent[root_b] = root_a;
            size[root_a] += size[root_b];
        }
        else
        {
            parent[root_a] = root_b;
            size[root_b] += size[root_a];
        }
    }

    int minMalwareSpread(vector<vector<int>> &graph, vector<int> &initial)
    {
        int n = graph.size();
        for(int i = 0; i < n; i++)
        {
            parent[i] = i;
            size[i] = 1;
        }

        unordered_set<int> s(initial.begin(), initial.end());
        for (int i = 0; i < n; i++)
        {
            if (s.count(i))
                continue;
            for (int j = 0; j < n; j++)
            {
                if (s.count(j)) continue;
                if(graph[i][j] == 1 && i != j)
                {
                    join(i, j);
                }
            }
        }

        vector<int> ref_cnt(n);
        for (auto a : initial)
        {
            unordered_set<int> nbrs;
            for (int i = 0; i < n; i++)
            {
                if (!s.count(i) && graph[a][i])
                    nbrs.insert(find(i));
            }
            for (auto nbr : nbrs)
                ref_cnt[nbr]++;
        }

        int mx = INT_MIN, res = -1;
        for (auto a : initial)
        {
            unordered_set<int> nbrs;
            for (int i = 0; i < n; i++)
            {
                if (!s.count(i) && graph[a][i])
                    nbrs.insert(find(i));
            }

            int cnt = 0;
            for (auto nbr : nbrs)
            {
                if (ref_cnt[nbr] == 1)
                    cnt += size[nbr];
            }
            if (cnt > mx || cnt == mx && a < res)
            {
                res = a;
                mx = cnt;
            }
        }

        return res;
    }
};


// Source https://leetcode.com/problems/unique-email-addresses/

Every valid email consists of a local name and a domain name, separated by the '@' sign. Besides lowercase letters, the email may contain one or more '.' or '+'.

For example, in "alice@leetcode.com", "alice" is the local name, and "leetcode.com" is the domain name.
If you add periods '.' between some characters in the local name part of an email address, mail sent there will be forwarded to the same address without dots in the local name. 
Note that this rule does not apply to domain names.

For example, "alice.z@leetcode.com" and "alicez@leetcode.com" forward to the same email address.
If you add a plus '+' in the local name, everything after the first plus sign will be ignored. This allows certain emails to be filtered. Note that this rule does not apply to domain names.

For example, "m.y+name@email.com" will be forwarded to "my@email.com".
It is possible to use both of these rules at the same time.

Given an array of strings emails where we send one email to each emails[i], return the number of different addresses that actually receive mails.

 

Example 1:

Input: emails = ["test.email+alex@leetcode.com","test.e.mail+bob.cathy@leetcode.com","testemail+david@lee.tcode.com"]
Output: 2
Explanation: "testemail@leetcode.com" and "testemail@lee.tcode.com" actually receive mails.
Example 2:

Input: emails = ["a@leetcode.com","b@leetcode.com","c@leetcode.com"]
Output: 3
 

Constraints:

1 <= emails.length <= 100
1 <= emails[i].length <= 100
emails[i] consist of lowercase English letters, '+', '.' and '@'.
Each emails[i] contains exactly one '@' character.
All local and domain names are non-empty.
Local names do not start with a '+' character.
Domain names end with the ".com" suffix.

class Solution
{
public:
    int numUniqueEmails(vector<string> &emails)
    {
        unordered_set<string> st;
        for (auto &email : emails)
        {
            string name;
            for (char c : email)
            {
                if (c == '.') continue;
                if (c == '+' || c == '@') break;
                name.push_back(c);
            }
            name += email.substr(email.find('@'));
            st.insert(name);
        }
        return st.size();
    }
};


// Source https://leetcode.com/problems/binary-subarrays-with-sum/

Given a binary array nums and an integer goal, return the number of non-empty subarrays with a sum goal.

A subarray is a contiguous part of the array.

 

Example 1:

Input: nums = [1,0,1,0,1], goal = 2
Output: 4
Explanation: The 4 subarrays are bolded and underlined below:
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
Example 2:

Input: nums = [0,0,0,0,0], goal = 0
Output: 15
 

Constraints:

1 <= nums.length <= 3 * 104
nums[i] is either 0 or 1.
0 <= goal <= nums.length

class Solution
{
public:
    int numSubarraysWithSum(vector<int> &arr, int goal)
    {
        int n = arr.size();
        vector<int> prefix(n + 1, 0);
        for(int i = 1; i <= n; i++)
        {
            prefix[i] = arr[i - 1] + prefix[i - 1];
        }
        int count = 0;
        unordered_map<int, int> mp;
        for(int i = 1; i <= n; i++)
        {
            if(prefix[i] == goal)
            {
                count++;
            }

            auto it = mp.find(prefix[i] - goal);

            if(it != mp.end())
            {
                count += it -> second;
            }

            mp[prefix[i]]++;
        }

        return count;
    }
};


// Source https://leetcode.com/problems/minimum-falling-path-sum/

Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.

A falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. 
Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).

 

Example 1:


Input: matrix = [[2,1,3],[6,5,4],[7,8,9]]
Output: 13
Explanation: There are two falling paths with a minimum sum as shown.
Example 2:


Input: matrix = [[-19,57],[-40,-5]]
Output: -59
Explanation: The falling path with a minimum sum is shown.
 

Constraints:

n == matrix.length == matrix[i].length
1 <= n <= 100
-100 <= matrix[i][j] <= 100

class Solution
{
public:
    int minFallingPathSum(vector<vector<int>> &A)
    {
        if (A.size() == 1) return *min_element(A[0].begin(), A[0].end());
        int n = A.size(), res = INT_MAX;
        for (int i = 1; i < n; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                int pre = A[i - 1][j];
                if (j > 0) pre = min(pre, A[i - 1][j - 1]);
                if (j < n - 1) pre = min(pre, A[i - 1][j + 1]);
                A[i][j] += pre;
                if (i == n - 1) res = min(res, A[i][j]);
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/beautiful-array/

An array nums of length n is beautiful if:

nums is a permutation of the integers in the range [1, n].
For every 0 <= i < j < n, there is no index k with i < k < j where 2 * nums[k] == nums[i] + nums[j].
Given the integer n, return any beautiful array nums of length n. There will be at least one valid answer for the given n.

 

Example 1:

Input: n = 4
Output: [2,1,4,3]

1
1 2
1 3 2 4
1 5 3 7 2 6 4 8

Example 2:

Input: n = 5
Output: [3,1,2,5,4]
 

Constraints:

1 <= n <= 1000

对于任意一个漂亮数组，若对每个数字都加上一个相同的数字，或者都乘上一个相同的数字，则一定还是漂亮数组，因为数字的之间的内在关系并没有改变。

For every 0 <= i < j < n, there is no index k with i < k < j where 2 * nums[k] == nums[i] + nums[j].

2 * 2 * nums[k] == (2 * nums[i]) + (2 * nums[j])
2 * 2 * nums[k] - 2 == (2 * nums[i]) - 1 + (2 * nums[j]) - 1
2 * (2 * nums[k] - 1) == (2 * nums[i] - 1) + (2 * nums[j] - 1)

假设此时已经有了一个长度为n的漂亮数组，如何将其扩大呢？可以将其中每个数字都乘以2并加1，就都会变成奇数，并且这个奇数数组还是漂亮的，
然后再将每个数字都乘以2，那么都会变成偶数，并且这个偶数数组还是漂亮的，两个数组拼接起来，就会得到一个长度为 2n 的漂亮数组。

nums[i]为奇数，nums[j]为偶数，奇数加偶数等于奇数，就不会是任何一个数字的2倍了。

可以从1开始，1本身就是一个漂亮数组，然后将其扩大，注意这里要卡一个N，不能让扩大的数组长度超过N，只要在变为奇数和偶数时加个判定就行了，将不大于N的数组加入到新的数组中

class Solution
{
public:
    vector<int> beautifulArray(int N)
    {
        vector<int> res{1};
        while (res.size() < N)
        {
            vector<int> t;
            for (int num : res)
            {
                if (num * 2 - 1 <= N) t.push_back(num * 2 - 1);
            }
            for (int num : res)
            {
                if (num * 2 <= N) t.push_back(num * 2);
            }
            res = t;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/number-of-recent-calls/

You have a RecentCounter class which counts the number of recent requests within a certain time frame.

Implement the RecentCounter class:

RecentCounter() Initializes the counter with zero recent requests.
int ping(int t) Adds a new request at time t, where t represents some time in milliseconds, and returns the number of requests that has happened in the past 3000 milliseconds 
(including the new request). Specifically, return the number of requests that have happened in the inclusive range [t - 3000, t].
It is guaranteed that every call to ping uses a strictly larger value of t than the previous call.

 

Example 1:

Input
["RecentCounter", "ping", "ping", "ping", "ping"]
[[], [1], [100], [3001], [3002]]
Output
[null, 1, 2, 3, 3]

Explanation
RecentCounter recentCounter = new RecentCounter();
recentCounter.ping(1);     // requests = [1], range is [-2999,1], return 1
recentCounter.ping(100);   // requests = [1, 100], range is [-2900,100], return 2
recentCounter.ping(3001);  // requests = [1, 100, 3001], range is [1,3001], return 3
recentCounter.ping(3002);  // requests = [1, 100, 3001, 3002], range is [2,3002], return 3
 

Constraints:

1 <= t <= 109
Each test case will call ping with strictly increasing values of t.
At most 104 calls will be made to ping.

class RecentCounter
{
public:
    queue<int> q;

    RecentCounter() {}

    int ping(int t)
    {
        while (!q.empty())
        {
            if (q.front() + 3000 >= t) break;
            q.pop();
        }
        q.push(t);
        return q.size();
    }
};


// Source https://leetcode.com/problems/shortest-bridge/

You are given an n x n binary matrix grid where 1 represents land and 0 represents water.

An island is a 4-directionally connected group of 1's not connected to any other 1's. There are exactly two islands in grid.

You may change 0's to 1's to connect the two islands to form one island.

Return the smallest number of 0's you must flip to connect the two islands.

 

Example 1:

Input: grid = [[0,1],[1,0]]
Output: 1
Example 2:

Input: grid = [[0,1,0],[0,0,0],[0,0,1]]
Output: 2
Example 3:

Input: grid = [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]
Output: 1
 

Constraints:

n == grid.length == grid[i].length
2 <= n <= 100
grid[i][j] is either 0 or 1.
There are exactly two islands in grid.

class Solution
{
public:
    int shortestBridge(vector<vector<int>> &A)
    {
        int n = A.size();
        queue<int> q1, q2;
        int dirX[4] = {-1, 0, 1, 0};
        int dirY[4] = {0, 1, 0, -1};
        for (int i = 0; i < n; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                if (A[i][j] == 0) continue;
                A[i][j] = 2;
                q1.push(i * n + j);
                break;
            }
            if (!q1.empty()) break;
        }
        while (!q1.empty())
        {
            int t = q1.front();
            q1.pop();
            q2.push(t);
            for (int k = 0; k < 4; ++k)
            {
                int x = t / n + dirX[k], y = t % n + dirY[k];
                if (x < 0 || x >= n || y < 0 || y >= n || A[x][y] == 0 || A[x][y] == 2) continue;
                A[x][y] = 2;
                q1.push(x * n + y);
            }
        }
        int res = 0;
        while (!q2.empty())
        {
            int sz = q2.size();
            for (int i = 0; i < sz; ++i)
            {
                int t = q2.front();
                q2.pop();
                for (int k = 0; k < 4; ++k)
                {
                    int x = t / n + dirX[k], y = t % n + dirY[k];
                    if (x < 0 || x >= n || y < 0 || y >= n || A[x][y] == 2) continue;
                    if (A[x][y] == 1) return res;
                    A[x][y] = 2;
                    q2.push(x * n + y);
                }
            }
            ++res;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/knight-dialer/

The chess knight has a unique movement, it may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically 
(with both forming the shape of an L). The possible movements of chess knight are shown in this diagaram:

A chess knight can move as indicated in the chess diagram below:

a	x	a	x	a
x	a	b	a	x
a	b	y	b	a
x	a	b	a	x
a	x	a	x	a

y为骑士，x为骑士移动目标

We have a chess knight and a phone pad as shown below, the knight can only stand on a numeric cell (i.e. blue cell).

1	2	3
4	5	6
7	8	9
*	0	#

Given an integer n, return how many distinct phone numbers of length n we can dial.

You are allowed to place the knight on any numeric cell initially and then you should perform n - 1 jumps to dial a number of length n. All jumps should be valid knight jumps.

As the answer may be very large, return the answer modulo 109 + 7.

 

Example 1:

Input: n = 1
Output: 10
Explanation: We need to dial a number of length 1, so placing the knight over any numeric cell of the 10 cells is sufficient.
Example 2:

Input: n = 2
Output: 20
Explanation: All the valid number we can dial are [04, 06, 16, 18, 27, 29, 34, 38, 40, 43, 49, 60, 61, 67, 72, 76, 81, 83, 92, 94]
Example 3:

Input: n = 3131
Output: 136006598
Explanation: Please take care of the mod.
 

Constraints:

1 <= n <= 5000

0 -> 4, 6
1 -> 6, 8
2 -> 7, 9
3 -> 4, 8
4 -> 3, 9, 0
5 ->
6 -> 1, 7, 0
7 -> 2, 6
8 -> 1, 3
9 -> 4, 2

可以发现，除了数字5之外，每个数字都可以跳到其他位置，其中4和6可以跳到三个不同位置，其他都只能取两个位置。

class Solution
{
public:
    const int M = 1e9 + 7;
    vector<vector<int>> path;
    int dp[5005][10];

    int helper(int n, int prev)
    {
        if (n == 0) return 1;
        if (dp[n][prev] != -1) return dp[n][prev];
        int res = 0;
        for (int idx : path[prev])
        {
            res = (res + helper(n - 1, idx)) % M;
        }
        return dp[n][prev] = res;
    }

    int knightDialer(int N)
    {
        path = {{4, 6}, {6, 8}, {7, 9}, {4, 8}, {3, 9, 0}, {}, {1, 7, 0}, {2, 6}, {1, 3}, {4, 2}};
        memset(dp, -1, sizeof(dp));
        int res = 0;
        for (int i = 0; i < 10; ++i)
        {
            res = (res + helper(N - 1, i)) % M;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/stamping-the-sequence/

You are given two strings stamp and target. Initially, there is a string s of length target.length with all s[i] == '?'.

In one turn, you can place stamp over s and replace every letter in the s with the corresponding letter from stamp.

For example, if stamp = "abc" and target = "abcba", then s is "?????" initially. In one turn you can:
place stamp at index 0 of s to obtain "abc??",
place stamp at index 1 of s to obtain "?abc?", or
place stamp at index 2 of s to obtain "??abc".
Note that stamp must be fully contained in the boundaries of s in order to stamp (i.e., you cannot place stamp at index 3 of s).
We want to convert s to target using at most 10 * target.length turns.

Return an array of the index of the left-most letter being stamped at each turn. If we cannot obtain target from s within 10 * target.length turns, return an empty array.

 

Example 1:

Input: stamp = "abc", target = "ababc"
Output: [0,2]
Explanation: Initially s = "?????".
- Place stamp at index 0 to get "abc??".
- Place stamp at index 2 to get "ababc".
[1,0,2] would also be accepted as an answer, as well as some other answers.
Example 2:

Input: stamp = "abca", target = "aabcaca"
Output: [3,0,1]
Explanation: Initially s = "???????".
- Place stamp at index 3 to get "???abca".
- Place stamp at index 0 to get "abcabca".
- Place stamp at index 1 to get "aabcaca".
 

Constraints:

1 <= stamp.length <= target.length <= 1000
stamp and target consist of lowercase English letters.

假如给的是 target 字符串，每次盖印章，将对应的位置变成星号，只要将 target 中所有的字符盖成星号，最终再把盖印章的顺序翻转一下，就是题目中所求了。

class Solution
{
public:
    int m, n;

    vector<int> movesToStamp(string stamp, string target)
    {
        m = stamp.length();
        n = target.length();
        string s(n, '?');
        vector<int> indices;
        int stamps = 10 * target.size();
        bool is_eligible = DFS_Stamp(stamp, target, s, stamps, indices);
        if (!is_eligible) return {};
        reverse(indices.begin(), indices.end());
        return indices;
    }

    bool DFS_Stamp(const string &stamp, string &target, const string &s, int stamps, vector<int> &indices)
    {
        if (s == target) return true;
        if (stamps == 0)
        {
            return false;
        }
        int cnt = indices.size();
        for (int istart = 0; istart <= n - m;)
        {
            if (!ShouldStamp(stamp, istart, target))
            {
                ++istart;
                continue;
            }
            for (int i = 0; i < m; ++i) target[istart + i] = '?';
            indices.push_back(istart);
            --stamps;
            if (stamps == 0) return s == target;
            istart += m;
        }
        if (cnt == indices.size()) return false;
        return DFS_Stamp(stamp, target, s, stamps, indices);
    }

    bool ShouldStamp(const string &stamp, int istart, const string &target)
    {
        int matched = 0, stamped = 0;
        for (int i = 0; i < m; ++i)
        {
            if(target[istart + i] == stamp[i] || target[istart + i] == '?') ++matched;
            if(target[istart + i] == '?') ++stamped;
        }
        return stamped == m ? false : matched == m;
    }
};


// Source https://leetcode.com/problems/reorder-data-in-log-files/

You are given an array of logs. Each log is a space-delimited string of words, where the first word is the identifier.

There are two types of logs:

Letter-logs: All words (except the identifier) consist of lowercase English letters.
Digit-logs: All words (except the identifier) consist of digits.
Reorder these logs so that:

The letter-logs come before all digit-logs.
The letter-logs are sorted lexicographically by their contents. If their contents are the same, then sort them lexicographically by their identifiers.
The digit-logs maintain their relative ordering.
Return the final order of the logs.

 

Example 1:

Input: logs = ["dig1 8 1 5 1","let1 art can","dig2 3 6","let2 own kit dig","let3 art zero"]
Output: ["let1 art can","let3 art zero","let2 own kit dig","dig1 8 1 5 1","dig2 3 6"]
Explanation:
The letter-log contents are all different, so their ordering is "art can", "art zero", "own kit dig".
The digit-logs have a relative order of "dig1 8 1 5 1", "dig2 3 6".
Example 2:

Input: logs = ["a1 9 2 3 1","g1 act car","zo4 4 7","ab1 off key dog","a8 act zoo"]
Output: ["g1 act car","a8 act zoo","ab1 off key dog","a1 9 2 3 1","zo4 4 7"]
 

Constraints:

1 <= logs.length <= 100
3 <= logs[i].length <= 100
All the tokens of logs[i] are separated by a single space.
logs[i] is guaranteed to have an identifier and at least one word after the identifier.

class Solution
{
public:
    vector<string> reorderLogFiles(vector<string> &logs)
    {
        vector<string> res, digitLogs;
        vector<pair<string, string>> data;
        for (string &log : logs)
        {
            auto pos = log.find(" ");
            if (log[pos + 1] >= '0' && log[pos + 1] <= '9')
            {
                digitLogs.push_back(log);
                continue;
            }
            data.push_back({log.substr(0, pos), log.substr(pos + 1)});
        }
        sort(data.begin(), data.end(), [](auto &a, auto &b)
        {
            return a.second < b.second || (a.second == b.second && a.first < b.first);
        });
        for (auto &a : data)
        {
            res.push_back(a.first + " " + a.second);
        }
        for (string &log : digitLogs) res.push_back(log);
        return res;
    }
};


// Source https://leetcode.com/problems/range-sum-of-bst/

Given the root node of a binary search tree and two integers low and high, return the sum of values of all nodes with a value in the inclusive range [low, high].

 

Example 1:


Input: root = [10,5,15,3,7,null,18], low = 7, high = 15
Output: 32
Explanation: Nodes 7, 10, and 15 are in the range [7, 15]. 7 + 10 + 15 = 32.
Example 2:


Input: root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10
Output: 23
Explanation: Nodes 6, 7, and 10 are in the range [6, 10]. 6 + 7 + 10 = 23.
 

Constraints:

The number of nodes in the tree is in the range [1, 2 * 104].
1 <= Node.val <= 105
1 <= low <= high <= 105
All Node.val are unique.

class Solution
{
public:
    int rangeSumBST(TreeNode *root, int L, int R)
    {
        if (!root) return 0;
        if (root->val < L) return rangeSumBST(root->right, L, R);
        if (root->val > R) return rangeSumBST(root->left, L, R);
        return root->val + rangeSumBST(root->left, L, R) + rangeSumBST(root->right, L, R);
    }
};


// Source https://leetcode.com/problems/minimum-area-rectangle/

You are given an array of points in the X-Y plane points where points[i] = [xi, yi].

Return the minimum area of a rectangle formed from these points, with sides parallel to the X and Y axes. If there is not any such rectangle, return 0.

 

Example 1:


Input: points = [[1,1],[1,3],[3,1],[3,3],[2,2]]
Output: 4
Example 2:


Input: points = [[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]
Output: 2
 

Constraints:

1 <= points.length <= 500
points[i].length == 2
0 <= xi, yi <= 4 * 104
All the given points are unique.

先找出两个对角线的顶点，一但两个对角顶点确定了，其实这个矩形的大小也就确定了，另外的两个点其实就是分别在跟这两个点具有相同的横坐标或纵坐标的点中寻找即可

class Solution
{
public:
    int minAreaRect(vector<vector<int>> &points)
    {
        int res = INT_MAX, n = points.size();
        unordered_map<int, unordered_set<int>> m;
        for (auto &point : points)
        {
            m[point[0]].insert(point[1]);
        }
        for (int i = 0; i < n; ++i)
        {
            for (int j = i + 1; j < n; ++j)
            {
                if (points[i][0] == points[j][0] || points[i][1] == points[j][1]) continue;
                if (m[points[i][0]].count(points[j][1]) && m[points[j][0]].count(points[i][1]))
                {
                    res = min(res, abs(points[i][0] - points[j][0]) * abs(points[i][1] - points[j][1]));
                }
            }
        }
        return res == INT_MAX ? 0 : res;
    }
};


// Source https://leetcode.com/problems/distinct-subsequences-ii/

Given a string s, return the number of distinct non-empty subsequences of s. Since the answer may be very large, return it modulo 109 + 7.

A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters 
without disturbing the relative positions of the remaining characters. (i.e., "ace" is a subsequence of "abcde" while "aec" is not.
 

Example 1:

Input: s = "abc"
Output: 7
Explanation: The 7 distinct subsequences are "a", "b", "c", "ab", "ac", "bc", and "abc".
Example 2:

Input: s = "aba"
Output: 6
Explanation: The 6 distinct subsequences are "a", "b", "ab", "aa", "ba", and "aba".
Example 3:

Input: s = "aaa"
Output: 3
Explanation: The 3 distinct subsequences are "a", "aa" and "aaa".
 

Constraints:

1 <= s.length <= 2000
s consists of lowercase English letters.

 dp[i] 表示以字符 i+'a' 结尾的不同子序列的个数，因为题目中限定了只有小写字母，所以只有 26 个。
以 aba 这个例子来分析一下，当遇到开头的a时，那么以a结尾的子序列只有一个，就是a，
当遇到中间的b时，此时知道以b结尾的子序列有2个，分别是 b 和 ab，其实是空串和a后面分别加个b得来的
当遇到末尾的a的时候，那么此时以a结尾的子序列就有4个，分别是 a，aa，ba，aba，其实是空串，a，b，ab，分别加上一个a
在当前不同序列的基础上，加上任何一个字符都会得到另一个不同的子序列，后面的加1是为了加上空串的情况

class Solution
{
public:
    int distinctSubseqII(string S)
    {
        int M = 1e9 + 7;
        vector<int> dp(26);
        for (char c : S)
        {
            dp[c - 'a'] = accumulate(dp.begin(), dp.end(), 1L) % M;
        }
        return accumulate(dp.begin(), dp.end(), 0L) % M;
    }
};


// Source https://leetcode.com/problems/valid-mountain-array/

Given an array of integers arr, return true if and only if it is a valid mountain array.

Recall that arr is a mountain array if and only if:

arr.length >= 3
There exists some i with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
arr[i] > arr[i + 1] > ... > arr[arr.length - 1]

 

Example 1:

Input: arr = [2,1]
Output: false
Example 2:

Input: arr = [3,5,5]
Output: false
Example 3:

Input: arr = [0,3,2,1]
Output: true
 

Constraints:

1 <= arr.length <= 104
0 <= arr[i] <= 104

class Solution
{
public:
    bool validMountainArray(vector<int> &A)
    {
        int n = A.size(), i = 0, j = n - 1;
        while (i < n - 1 && A[i] < A[i + 1]) ++i;
        while (j > 0 && A[j - 1] > A[j]) --j;
        return i > 0 && j < n - 1 && i == j;
    }
};


// Source https://leetcode.com/problems/di-string-match/

A permutation perm of n + 1 integers of all the integers in the range [0, n] can be represented as a string s of length n where:

s[i] == 'I' if perm[i] < perm[i + 1], and
s[i] == 'D' if perm[i] > perm[i + 1].
Given a string s, reconstruct the permutation perm and return it. If there are multiple valid permutations perm, return any of them.

 

Example 1:

Input: s = "IDID"
Output: [0,4,1,3,2]
Example 2:

Input: s = "III"
Output: [0,1,2,3]
Example 3:

Input: s = "DDI"
Output: [3,2,0,1]
 

Constraints:

1 <= s.length <= 105
s[i] is either 'I' or 'D'.

对于上升来说，可以从0开始累加，而对于下降来说，则可以从n开始下降，这样保证了在结束之前二者绝不会相遇，到最后一个数字的时候二者相同，再将这个相同数字加入即可

class Solution
{
public:
    vector<int> diStringMatch(string S)
    {
        vector<int> res;
        int n = S.size(), mn = 0, mx = n;
        for (char c : S)
        {
            if (c == 'I') res.push_back(mn++);
            else res.push_back(mx--);
        }
        res.push_back(mx);
        return res;
    }
};


// Source https://leetcode.com/problems/find-the-shortest-superstring/

Given an array of strings words, return the smallest string that contains each string in words as a substring. If there are multiple valid strings of the smallest length, return any of them.

You may assume that no string in words is a substring of another string in words.

 

Example 1:

Input: words = ["alex","loves","leetcode"]
Output: "alexlovesleetcode"
Explanation: All permutations of "alex","loves","leetcode" would also be accepted.
Example 2:

Input: words = ["catg","ctaagt","gcta","ttca","atgcatc"]
Output: "gctaagttcatgcatc"
 

Constraints:

1 <= words.length <= 12
1 <= words[i].length <= 20
words[i] consists of lowercase English letters.
All the strings of words are unique.

class Solution
{
public:
    int n;
    unordered_map<long, pair<int, int>> dp;
    int ovlp[20][20];

    pair<int, int> recur(vector<string> &words, long prev, long mask)
    {
        long key = ((prev + 10) << 16) + mask;
        if (dp.find(key) != dp.end()) return dp[key];
        if (mask == 0) return make_pair(0, 0);
        int vv = INT_MAX, kk = -1;
        for (int k = 0; k < n; ++k)
        {
            if (mask & (1 << k))
            {
                auto [v, tmp] = recur(words, k, mask ^ (1 << k));
                int offset = (prev == -1 ? size(words[k]) : size(words[k]) - ovlp[prev][k]);
                if (v + offset < vv)
                {
                    vv = v + offset;
                    kk = k;
                }
            }
        }
        return dp[key] = make_pair(vv, kk);
    };

    string shortestSuperstring(vector<string> &words)
    {
        n = words.size();
        memset(ovlp, 0, sizeof(ovlp));

        for (int i = 0; i < n; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                if (i == j) continue;
                for (int k = min(words[i].size(), words[j].size()); k > 0; --k)
                {
                    // words[i] 的后缀 和 words[j]的前缀相等
                    if (words[i].substr(words[i].size() - k) == words[j].substr(0, k))
                    {
                        ovlp[i][j] = k;
                        break;
                    }
                }
            }
        }

        string ans;
        long prev = -1, mask = (1 << n) - 1;
        recur(words, prev, mask);
        while (mask)
        {
            auto [tmp, k] = recur(words, prev, mask);
            if (ans.size()) ans += words[k].substr(ovlp[prev][k]);
            else ans += words[k];
            prev = k;
            mask ^= 1 << k;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/delete-columns-to-make-sorted/

You are given an array of n strings strs, all of the same length.

The strings can be arranged such that there is one on each line, making a grid. For example, strs = ["abc", "bce", "cae"] can be arranged as:

abc
bce
cae
You want to delete the columns that are not sorted lexicographically. In the above example (0-indexed), columns 0 ('a', 'b', 'c') and 2 ('c', 'e', 'e') are sorted 
while column 1 ('b', 'c', 'a') is not, so you would delete column 1.

Return the number of columns that you will delete.

 

Example 1:

Input: strs = ["cba","daf","ghi"]
Output: 1
Explanation: The grid looks as follows:
  cba
  daf
  ghi
Columns 0 and 2 are sorted, but column 1 is not, so you only need to delete 1 column.
Example 2:

Input: strs = ["a","b"]
Output: 0
Explanation: The grid looks as follows:
  a
  b
Column 0 is the only column and is sorted, so you will not delete any columns.
Example 3:

Input: strs = ["zyx","wvu","tsr"]
Output: 3
Explanation: The grid looks as follows:
  zyx
  wvu
  tsr
All 3 columns are not sorted, so you will delete all 3.
 

Constraints:

n == strs.length
1 <= n <= 100
1 <= strs[i].length <= 1000
strs[i] consists of lowercase English letters.

class Solution
{
public:
    int minDeletionSize(vector<string> &A)
    {
        int n = A.size(), m = A[0].size(), res = 0;
        for (int j = 0; j < m; ++j)
        {
            for (int i = 0; i < n - 1; ++i)
            {
                if (A[i][j] <= A[i + 1][j]) continue;
                ++res;
                break;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/minimum-increment-to-make-array-unique/

You are given an integer array nums. In one move, you can pick an index i where 0 <= i < nums.length and increment nums[i] by 1.

Return the minimum number of moves to make every value in nums unique.

 

Example 1:

Input: nums = [1,2,2]
Output: 1
Explanation: After 1 move, the array could be [1, 2, 3].
Example 2:

Input: nums = [3,2,1,2,1,7]
Output: 6
Explanation: After 6 moves, the array could be [3, 4, 1, 2, 5, 7].
It can be shown with 5 or less moves that it is impossible for the array to have all unique values.
 
1 1 2 2 3 7
1 2 3 4 5 7

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 105

class Solution
{
public:
    int minIncrementForUnique(vector<int> &A)
    {
        int res = 0, need = 0;
        sort(A.begin(), A.end());
        int n = A.size();
        need = A[0] + 1;
        for (int i = 1; i < n; ++i)
        {
            res += max(need - A[i], 0);
            need = max(need, A[i]) + 1;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/validate-stack-sequences/

Given two integer arrays pushed and popped each with distinct values, return true if this could have been the result of a sequence of push and pop operations on an initially empty stack, or false otherwise.

 

Example 1:

Input: pushed = [1,2,3,4,5], popped = [4,5,3,2,1]
Output: true
Explanation: We might do the following sequence:
push(1), push(2), push(3), push(4),
pop() -> 4,
push(5),
pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1
Example 2:

Input: pushed = [1,2,3,4,5], popped = [4,3,5,1,2]
Output: false
Explanation: 1 cannot be popped before 2.
 

Constraints:

1 <= pushed.length <= 1000
0 <= pushed[i] <= 1000
All the elements of pushed are unique.
popped.length == pushed.length
popped is a permutation of pushed.

class Solution
{
public:
    bool validateStackSequences(vector<int> &pushed, vector<int> &popped)
    {
        stack<int> st;
        int i = 0;
        for (int num : pushed)
        {
            st.push(num);
            while (!st.empty() && st.top() == popped[i])
            {
                st.pop();
                ++i;
            }
        }
        return st.empty();
    }
};


// Source https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/

On a 2D plane, we place n stones at some integer coordinate points. Each coordinate point may have at most one stone.

A stone can be removed if it shares either the same row or the same column as another stone that has not been removed.

Given an array stones of length n where stones[i] = [xi, yi] represents the location of the ith stone, return the largest possible number of stones that can be removed.

 

Example 1:

Input: stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]
Output: 5
Explanation: One way to remove 5 stones is as follows:
1. Remove stone [2,2] because it shares the same row as [2,1].
2. Remove stone [2,1] because it shares the same column as [0,1].
3. Remove stone [1,2] because it shares the same row as [1,0].
4. Remove stone [1,0] because it shares the same column as [0,0].
5. Remove stone [0,1] because it shares the same row as [0,0].
Stone [0,0] cannot be removed since it does not share a row/column with another stone still on the plane.
Example 2:

Input: stones = [[0,0],[0,2],[1,1],[2,0],[2,2]]
Output: 3
Explanation: One way to make 3 moves is as follows:
1. Remove stone [2,2] because it shares the same row as [2,0].
2. Remove stone [2,0] because it shares the same column as [0,0].
3. Remove stone [0,2] because it shares the same row as [0,0].
Stones [0,0] and [1,1] cannot be removed since they do not share a row/column with another stone still on the plane.
Example 3:

Input: stones = [[0,0]]
Output: 0
Explanation: [0,0] is the only stone on the plane, so you cannot remove it.
 

Constraints:

1 <= stones.length <= 1000
0 <= xi, yi <= 104
No two stones are at the same coordinate point.

共行或共列的石头属于同一个群组，总有办法能把每个群组移除到只剩一个石子，所以总共有多少个群组，最终就会剩下多少个石子，最大的移除个数就是总石子个数减去群组个数。

class Solution
{
public:
    unordered_map<int, vector<int>> rowMap, colMap;

    int removeStones(vector<vector<int>> &stones)
    {
        for (auto &stone : stones)
        {
            rowMap[stone[0]].push_back(stone[1]);
            colMap[stone[1]].push_back(stone[0]);
        }
        unordered_set<int> rowVisited;
        int res = 0;
        for (auto &a : rowMap)
        {
            res += max(0, helper(a.first, rowVisited) - 1);
        }
        return res;
    }

    int helper(int row, unordered_set<int> &rowVisited)
    {
        if (rowVisited.count(row)) return 0;
        rowVisited.insert(row);
        int res = rowMap[row].size();
        for (int c : rowMap[row])
        {
            for (int r : colMap[c])
            {
                res += helper(r, rowVisited);
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/bag-of-tokens/

You have an initial power of power, an initial score of 0, and a bag of tokens where tokens[i] is the value of the ith token (0-indexed).

Your goal is to maximize your total score by potentially playing each token in one of two ways:

If your current power is at least tokens[i], you may play the ith token face up, losing tokens[i] power and gaining 1 score.
If your current score is at least 1, you may play the ith token face down, gaining tokens[i] power and losing 1 score.
Each token may be played at most once and in any order. You do not have to play all the tokens.

Return the largest possible score you can achieve after playing any number of tokens.

 

Example 1:

Input: tokens = [100], power = 50
Output: 0
Explanation: Playing the only token in the bag is impossible because you either have too little power or too little score.
Example 2:

Input: tokens = [100,200], power = 150
Output: 1
Explanation: Play the 0th token (100) face up, your power becomes 50 and score becomes 1.
There is no need to play the 1st token since you cannot play it face up to add to your score.
Example 3:

Input: tokens = [100,200,300,400], power = 200
Output: 2
Explanation: Play the tokens in this order to get a score of 2:
1. Play the 0th token (100) face up, your power becomes 100 and score becomes 1.
2. Play the 3rd token (400) face down, your power becomes 500 and score becomes 0.
3. Play the 1st token (200) face up, your power becomes 300 and score becomes 1.
4. Play the 2nd token (300) face up, your power becomes 0 and score becomes 2.
 

Constraints:

0 <= tokens.length <= 1000
0 <= tokens[i], power < 104

class Solution
{
public:
    int res;

    void helper(vector<int> &tokens, int curPower, int curScore, int i, int j)
    {
        res = max(res, curScore);
        if (i > j) return;
        if (tokens[i] <= curPower)
        {
            helper(tokens, curPower - tokens[i], curScore + 1, i + 1, j);
            return;
        }
        if (curScore > 0)
        {
            helper(tokens, curPower + tokens[j], curScore - 1, i, j - 1);
        }
    }

    int bagOfTokensScore(vector<int> &tokens, int P)
    {
        res = 0;
        sort(tokens.begin(), tokens.end());
        int n = tokens.size();
        helper(tokens, P, 0, 0, n - 1);
        return res;
    }
};


// Source https://leetcode.com/problems/largest-time-for-given-digits/

Given an array arr of 4 digits, find the latest 24-hour time that can be made using each digit exactly once.

24-hour times are formatted as "HH:MM", where HH is between 00 and 23, and MM is between 00 and 59. The earliest 24-hour time is 00:00, and the latest is 23:59.

Return the latest 24-hour time in "HH:MM" format. If no valid time can be made, return an empty string.

 

Example 1:

Input: arr = [1,2,3,4]
Output: "23:41"
Explanation: The valid 24-hour times are "12:34", "12:43", "13:24", "13:42", "14:23", "14:32", "21:34", "21:43", "23:14", and "23:41". Of these times, "23:41" is the latest.
Example 2:

Input: arr = [5,5,5,5]
Output: ""
Explanation: There are no valid 24-hour times as "55:55" is not valid.
 

Constraints:

arr.length == 4
0 <= arr[i] <= 9

class Solution
{
public:
    string largestTimeFromDigits(vector<int> &A)
    {
        string res;
        sort(A.begin(), A.end());
        do
        {
            int hour = (A[0] * 10 + A[1]), minute = (A[2] * 10 + A[3]);
            if (hour <= 23 && minute <= 59) res = string{char(A[0] + '0'), char(A[1] + '0'), ':', char(A[2] + '0'), char(A[3] + '0')};
        }
        while(next_permutation(A.begin(), A.end()));
        return res;
    }
};


// Source https://leetcode.com/problems/reveal-cards-in-increasing-order/

You are given an integer array deck. There is a deck of cards where every card has a unique integer. The integer on the ith card is deck[i].

You can order the deck in any order you want. Initially, all the cards start face down (unrevealed) in one deck.

You will do the following steps repeatedly until all cards are revealed:

Take the top card of the deck, reveal it, and take it out of the deck.
If there are still cards in the deck then put the next top card of the deck at the bottom of the deck.
If there are still unrevealed cards, go back to step 1. Otherwise, stop.
Return an ordering of the deck that would reveal the cards in increasing order.

Note that the first entry in the answer is considered to be the top of the deck.

 

Example 1:

Input: deck = [17,13,11,2,3,5,7]
Output: [2,13,3,11,5,17,7]
Explanation: 
We get the deck in the order [17,13,11,2,3,5,7] (this order does not matter), and reorder it.
After reordering, the deck starts as [2,13,3,11,5,17,7], where 2 is the top of the deck.
We reveal 2, and move 13 to the bottom.  The deck is now [3,11,5,17,7,13].
We reveal 3, and move 11 to the bottom.  The deck is now [5,17,7,13,11].
We reveal 5, and move 17 to the bottom.  The deck is now [7,13,11,17].
We reveal 7, and move 13 to the bottom.  The deck is now [11,17,13].
We reveal 11, and move 17 to the bottom.  The deck is now [13,17].
We reveal 13, and move 17 to the bottom.  The deck is now [17].
We reveal 17.
Since all the cards revealed are in increasing order, the answer is correct.
Example 2:

Input: deck = [1,1000]
Output: [1,1000]
 

Constraints:

1 <= deck.length <= 1000
1 <= deck[i] <= 106
All the values of deck are unique.

class Solution
{
public:
    vector<int> deckRevealedIncreasing(vector<int> &deck)
    {
        int n = deck.size();
        vector<int> res(n);
        queue<int> q;
        sort(deck.begin(), deck.end());
        for (int i = 0; i < n; ++i) q.push(i);
        for (int i = 0; i < n; ++i)
        {
            int t = q.front();
            q.pop();
            res[t] = deck[i];
            if (i == n - 1) break;
            int next = q.front();
            q.pop();
            q.push(next);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/flip-equivalent-binary-trees/

For a binary tree T, we can define a flip operation as follows: choose any node, and swap the left and right child subtrees.

A binary tree X is flip equivalent to a binary tree Y if and only if we can make X equal to Y after some number of flip operations.

Given the roots of two binary trees root1 and root2, return true if the two trees are flip equivalent or false otherwise.

 

Example 1:

Flipped Trees Diagram
Input: root1 = [1,2,3,4,5,6,null,null,null,7,8], root2 = [1,3,2,null,6,4,5,null,null,null,null,8,7]
Output: true
Explanation: We flipped at nodes with values 1, 3, and 5.
Example 2:

Input: root1 = [], root2 = []
Output: true
Example 3:

Input: root1 = [], root2 = [1]
Output: false
 

Constraints:

The number of nodes in each tree is in the range [0, 100].
Each tree will have unique node values in the range [0, 99].

class Solution
{
public:
    bool flipEquiv(TreeNode *root1, TreeNode *root2)
    {
        if (!root1 && !root2) return true;
        if (!root1 || !root2) return false;
        if (root1->val != root2->val) return false;
        return (flipEquiv(root1->left, root2->left) && flipEquiv(root1->right, root2->right)) || (flipEquiv(root1->left, root2->right) && flipEquiv(root1->right, root2->left));
    }
};


// Source https://leetcode.com/problems/largest-component-size-by-common-factor/

You are given an integer array of unique positive integers nums. Consider the following graph:

There are nums.length nodes, labeled nums[0] to nums[nums.length - 1],
There is an undirected edge between nums[i] and nums[j] if nums[i] and nums[j] share a common factor greater than 1.
Return the size of the largest connected component in the graph.

 

Example 1:


Input: nums = [4,6,15,35]
Output: 4
Example 2:


Input: nums = [20,50,9,63]
Output: 2
Example 3:


Input: nums = [2,3,6,7,4,12,21,39]
Output: 8
 

Constraints:

1 <= nums.length <= 2 * 104
1 <= nums[i] <= 105
All the values of nums are unique.

class Solution
{
public:
    int find(vector<int> &root, int x)
    {
        if (root[x] != x) root[x] = find(root, root[x]);
        return root[x];
    }

    int largestComponentSize(vector<int> &A)
    {
        int mx = 0;
        unordered_map<int, int> m;
        for (int num : A) mx = max(mx, num);
        vector<int> root(mx + 1);
        for (int i = 1; i <= mx; ++i) root[i] = i;
        for (int num : A)
        {
            for (int d = sqrt(num); d >= 2; --d)
            {
                if (num % d == 0)
                {
                    root[find(root, num)] = find(root, d);
                    root[find(root, num)] = find(root, num / d);
                }
            }
        }
        int res = 0;
        for (int num : A)
        {
            res = max(res, ++m[find(root, num)]);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/verifying-an-alien-dictionary/

In an alien language, surprisingly, they also use English lowercase letters, but possibly in a different order. The order of the alphabet is some permutation of lowercase letters.

Given a sequence of words written in the alien language, and the order of the alphabet, return true if and only if the given words are sorted lexicographically in this alien language.

 

Example 1:

Input: words = ["hello","leetcode"], order = "hlabcdefgijkmnopqrstuvwxyz"
Output: true
Explanation: As 'h' comes before 'l' in this language, then the sequence is sorted.
Example 2:

Input: words = ["word","world","row"], order = "worldabcefghijkmnpqstuvxyz"
Output: false
Explanation: As 'd' comes after 'l' in this language, then words[0] > words[1], hence the sequence is unsorted.
Example 3:

Input: words = ["apple","app"], order = "abcdefghijklmnopqrstuvwxyz"
Output: false
Explanation: The first three characters "app" match, and the second string is shorter (in size.) According to lexicographical rules "apple" > "app", because 'l' > '∅', where '∅' is defined as the blank character which is less than any other character (More info).
 

Constraints:

1 <= words.length <= 100
1 <= words[i].length <= 20
order.length == 26
All characters in words[i] and order are English lowercase letters.

class Solution
{
public:
    bool isAlienSorted(vector<string> &words, string order)
    {
        unordered_map<char, int> charMap;
        for (int i = 0; i < order.size(); ++i)
        {
            charMap[order[i]] = i;
        }
        for (int i = 1; i < words.size(); ++i)
        {
            string &word1 = words[i - 1];
            string &word2 = words[i];
            int n1 = word1.size(), n2 = word2.size();
            for (int j = 0; j < n1 && j < n2; ++j)
            {
                if (word1[j] == word2[j]) continue;
                if (charMap[word1[j]] > charMap[word2[j]]) return false;
                else break;
            }
            if (n1 > n2 && word1.substr(0, n2) == word2) return false;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/array-of-doubled-pairs/

Given an integer array of even length arr, return true if it is possible to reorder arr such that arr[2 * i + 1] = 2 * arr[2 * i] for every 0 <= i < len(arr) / 2, or false otherwise.

 

Example 1:

Input: arr = [3,1,3,6]
Output: false
Example 2:

Input: arr = [2,1,2,6]
Output: false
Example 3:

Input: arr = [4,-2,2,-4]
Output: true
Explanation: We can take two groups, [-2,-4] and [2,4] to form [-2,-4,2,4] or [2,4,-2,-4].
 

Constraints:

2 <= arr.length <= 3 * 104
arr.length is even.
-105 <= arr[i] <= 105

class Solution
{
public:
    bool canReorderDoubled(vector<int> &A)
    {
        map<int, int> m;
        for (int num : A) ++m[num];
        for (auto a : m)
        {
            if (a.second == 0) continue;
            if (a.first < 0 && a.first % 2 != 0) return false;
            int want = a.first < 0 ? a.first / 2 : a.first * 2;
            if (a.first == want && m[want] % 2 != 0) return false;
            if (a.second > m[want]) return false;
            m[want] -= a.second;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/delete-columns-to-make-sorted-ii/

You are given an array of n strings strs, all of the same length.

We may choose any deletion indices, and we delete all the characters in those indices for each string.

For example, if we have strs = ["abcdef","uvwxyz"] and deletion indices {0, 2, 3}, then the final array after deletions is ["bef", "vyz"].

Suppose we chose a set of deletion indices answer such that after deletions, the final array has its elements in lexicographic order (i.e., strs[0] <= strs[1] <= strs[2] <= ... <= strs[n - 1]). 
Return the minimum possible value of answer.length.

 

Example 1:

Input: strs = ["ca","bb","ac"]
Output: 1
Explanation: 
After deleting the first column, strs = ["a", "b", "c"].
Now strs is in lexicographic order (ie. strs[0] <= strs[1] <= strs[2]).
We require at least 1 deletion since initially strs was not in lexicographic order, so the answer is 1.
Example 2:

Input: strs = ["xc","yb","za"]
Output: 0
Explanation: 
strs is already in lexicographic order, so we do not need to delete anything.
Note that the rows of strs are not necessarily in lexicographic order:
i.e., it is NOT necessarily true that (strs[0][0] <= strs[0][1] <= ...)
Example 3:

Input: strs = ["zyx","wvu","tsr"]
Output: 3
Explanation: We have to delete every column.
 

Constraints:

n == strs.length
1 <= n <= 100
1 <= strs[i].length <= 100
strs[i] consists of lowercase English letters.

class Solution
{
public:
    int minDeletionSize(vector<string> &A)
    {
        int res = 0, m = A.size(), n = A[0].size(), i = 0, j = 0;
        vector<int> sorted(m - 1);
        for (j = 0; j < n; ++j)
        {
            for (i = 0; i < m - 1; ++i)
            {
                if (!sorted[i] && A[i][j] > A[i + 1][j])
                {
                    ++res;
                    break;
                }
            }
            if (i < m - 1) continue;
            for (i = 0; i < m - 1; ++i)
            {
                sorted[i] |= (A[i][j] < A[i + 1][j]);
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/tallest-billboard/

You are installing a billboard and want it to have the largest height. The billboard will have two steel supports, one on each side. Each steel support must be an equal height.

You are given a collection of rods that can be welded together. For example, if you have rods of lengths 1, 2, and 3, you can weld them together to make a support of length 6.

Return the largest possible height of your billboard installation. If you cannot support the billboard, return 0.

 

Example 1:

Input: rods = [1,2,3,6]
Output: 6
Explanation: We have two disjoint subsets {1,2,3} and {6}, which have the same sum = 6.
Example 2:

Input: rods = [1,2,3,4,5,6]
Output: 10
Explanation: We have two disjoint subsets {2,3,5} and {4,6}, which have the same sum = 10.
Example 3:

Input: rods = [1,2]
Output: 0
Explanation: The billboard cannot be supported, so we return 0.
 

Constraints:

1 <= rods.length <= 20
1 <= rods[i] <= 1000
sum(rods[i]) <= 5000

dp[idx][diff + 5000] 表示rods 前idx个的选择情况已经确定，并且左边的高度与右边的高度差为diff，
当前还剩rods[idx ... n - 1]可供选择，使得左边的高度与右边的高度差变为0，左边的高度最多可增加的值

class Solution
{
public:
    int n;
    int dp[21][10001];

    int recur(vector<int> &rods, int idx, int diff)
    {
        if(idx >= n) return diff == 0 ? 0 : INT_MIN;
        if(dp[idx][diff + 5000] != -1) return dp[idx][diff + 5000];
        int res = recur(rods, idx + 1, diff);
        res = max(res, recur(rods, idx + 1, diff - rods[idx]));
        res = max(res, recur(rods, idx + 1, diff + rods[idx]) + rods[idx]);
        return dp[idx][diff + 5000] = res;
    }

    int tallestBillboard(vector<int> &rods)
    {
        n = rods.size();
        memset(dp, -1, sizeof(dp));
        return recur(rods, 0, 0);
    }
};


// Source https://leetcode.com/problems/prison-cells-after-n-days/

There are 8 prison cells in a row and each cell is either occupied or vacant.

Each day, whether the cell is occupied or vacant changes according to the following rules:

If a cell has two adjacent neighbors that are both occupied or both vacant, then the cell becomes occupied.
Otherwise, it becomes vacant.
Note that because the prison is a row, the first and the last cells in the row can't have two adjacent neighbors.

You are given an integer array cells where cells[i] == 1 if the ith cell is occupied and cells[i] == 0 if the ith cell is vacant, and you are given an integer n.

Return the state of the prison after n days (i.e., n such changes described above).

 

Example 1:

Input: cells = [0,1,0,1,1,0,0,1], n = 7
Output: [0,0,1,1,0,0,0,0]
Explanation: The following table summarizes the state of the prison on each day:
Day 0: [0, 1, 0, 1, 1, 0, 0, 1]
Day 1: [0, 1, 1, 0, 0, 0, 0, 0]
Day 2: [0, 0, 0, 0, 1, 1, 1, 0]
Day 3: [0, 1, 1, 0, 0, 1, 0, 0]
Day 4: [0, 0, 0, 0, 0, 1, 0, 0]
Day 5: [0, 1, 1, 1, 0, 1, 0, 0]
Day 6: [0, 0, 1, 0, 1, 1, 0, 0]
Day 7: [0, 0, 1, 1, 0, 0, 0, 0]
Example 2:

Input: cells = [1,0,0,1,0,0,1,0], n = 1000000000
Output: [0,0,1,1,1,1,1,0]
 

Constraints:

cells.length == 8
cells[i] is either 0 or 1.
1 <= n <= 109

一个只由0和1构成的数组，长度固定为8，现在要进行N步变换，变换的规则是若一个位置的左右两边的数字相同，则该位置的数字变为1，反之则变为0，让求N步变换后的数组的状态。
需要注意的数组的开头和结尾的两个位置，由于一个没有左边，一个没有右边，默认其左右两边的数字不相等，所以不管首尾数字初始的时候是啥，在第一次变换之后一定会是0，而且一直会保持0的状态。

class Solution
{
public:
    vector<int> prisonAfterNDays(vector<int> &cells, int N)
    {
        vector<int> res;
        string str;
        for (int num : cells) str.push_back(num + '0');
        unordered_map<string, int> m;
        m[str] = N;
        while (N > 0)
        {
            string cur(8, '0');
            for (int i = 1; i < 7; ++i)
            {
                cur[i] = (str[i - 1] == str[i + 1]) ? '1' : '0';
            }
            --N;
            if (m.count(cur))
            {
                N %= m[cur] - N;
            }
            else
            {
                m[cur] = N;
            }
            str = cur;
        }
        for (char c : str) res.push_back(c - '0');
        return res;
    }
};



// Source https://leetcode.com/problems/check-completeness-of-a-binary-tree/

Given the root of a binary tree, determine if it is a complete binary tree.

In a complete binary tree, every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. 
It can have between 1 and 2^h nodes inclusive at the last level h.

 

Example 1:


Input: root = [1,2,3,4,5,6]
Output: true
Explanation: Every level before the last is full (ie. levels with node-values {1} and {2, 3}), and all nodes in the last level ({4, 5, 6}) are as far left as possible.
Example 2:


Input: root = [1,2,3,4,5,null,7]
Output: false
Explanation: The node with value 7 isn't as far left as possible.
 

Constraints:

The number of nodes in the tree is in the range [1, 100].
1 <= Node.val <= 1000

class Solution
{
public:
    bool isCompleteTree(TreeNode *root)
    {
        queue<TreeNode *> q;
        bool found = false;
        q.push(root);
        while (!q.empty())
        {
            TreeNode *cur = q.front();
            q.pop();
            if (!cur)
            {
                found = true;
                continue;
            }
            if (found) return false;
            q.push(cur->left);
            q.push(cur->right);
        }
        return true;
    }
};


// Source https://leetcode.com/problems/regions-cut-by-slashes/

An n x n grid is composed of 1 x 1 squares where each 1 x 1 square consists of a '/', '\', or blank space ' '. These characters divide the square into contiguous regions.

Given the grid grid represented as a string array, return the number of regions.

Note that backslash characters are escaped, so a '\' is represented as '\\'.

 

Example 1:


Input: grid = [" /","/ "]
Output: 2
Example 2:


Input: grid = [" /","  "]
Output: 1
Example 3:


Input: grid = ["/\\","\\/"]
Output: 5
Explanation: Recall that because \ characters are escaped, "\\/" refers to \/, and "/\\" refers to /\.
 

Constraints:

n == grid.length == grid[i].length
1 <= n <= 30
grid[i][j] is either '/', '\', or ' '.

将每个小区间化为九个小格子，这样斜杠或者反斜杠就是对角线或者逆对角线了，这样只要把斜杠的位置都标记为1，而空白的位置都标记为0，这样只要找出分隔开的0的群组的个数就可以了

class Solution
{
public:
    int n, m;

    int regionsBySlashes(vector<string> &grid)
    {
        n = grid.size();
        m = 3 * n;
        vector<vector<int>> nums(m, vector<int>(m));
        for (int i = 0; i < n; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                if (grid[i][j] == '/')
                {
                    nums[i * 3][j * 3 + 2] = 1;
                    nums[i * 3 + 1][j * 3 + 1] = 1;
                    nums[i * 3 + 2][j * 3] = 1;
                }
                else if (grid[i][j] == '\\')
                {
                    nums[i * 3][j * 3] = 1;
                    nums[i * 3 + 1][j * 3 + 1] = 1;
                    nums[i * 3 + 2][j * 3 + 2] = 1;
                }
            }
        }
        int res = 0;
        for (int i = 0; i < m; ++i)
        {
            for (int j = 0; j < m; ++j)
            {
                if (nums[i][j] == 0)
                {
                    helper(nums, i, j);
                    ++res;
                }
            }
        }
        return res;
    }

    void helper(vector<vector<int>> &nums, int i, int j)
    {
        if (i < 0 || i >= m || j < 0 || j >= m || nums[i][j] == 1) return;
        nums[i][j] = 1;
        helper(nums, i - 1, j);
        helper(nums, i, j + 1);
        helper(nums, i + 1, j);
        helper(nums, i, j - 1);
    }
};


// Source https://leetcode.com/problems/delete-columns-to-make-sorted-iii/

You are given an array of n strings strs, all of the same length.

We may choose any deletion indices, and we delete all the characters in those indices for each string.

For example, if we have strs = ["abcdef","uvwxyz"] and deletion indices {0, 2, 3}, then the final array after deletions is ["bef", "vyz"].

Suppose we chose a set of deletion indices answer such that after deletions, the final array has every string (row) in lexicographic order. 
(i.e., (strs[0][0] <= strs[0][1] <= ... <= strs[0][strs[0].length - 1]), and (strs[1][0] <= strs[1][1] <= ... <= strs[1][strs[1].length - 1]), and so on). 
Return the minimum possible value of answer.length.

 

Example 1:

Input: strs = ["babca","bbazb"]
Output: 3
Explanation: After deleting columns 0, 1, and 4, the final array is strs = ["bc", "az"].
Both these rows are individually in lexicographic order (ie. strs[0][0] <= strs[0][1] and strs[1][0] <= strs[1][1]).
Note that strs[0] > strs[1] - the array strs is not necessarily in lexicographic order.
Example 2:

Input: strs = ["edcba"]
Output: 4
Explanation: If we delete less than 4 columns, the only row will not be lexicographically sorted.
Example 3:

Input: strs = ["ghi","def","abc"]
Output: 0
Explanation: All rows are already lexicographically sorted.
 

Constraints:

n == strs.length
1 <= n <= 100
1 <= strs[i].length <= 100
strs[i] consists of lowercase English letters.

class Solution
{
public:
    int n, m;
    int dp[105][105];

    bool check(vector<string> &strs, int prev, int curr)
    {
        if(prev < 0) return true;
        for(int i = 0; i < n; i++)
        {
            if(strs[i][prev] > strs[i][curr])
            {
                return false;
            }
        }
        return true;
    }

    int recur(vector<string> &strs, int prev, int curr)
    {
        if(curr == m) return 0;
        if(prev != -1 && dp[prev][curr] != -1) return dp[prev][curr];
        int dels = INT_MAX;
        if(check(strs, prev, curr)) dels = min(dels, recur(strs, curr, curr + 1));
        dels = min(dels, 1 + recur(strs, prev, curr + 1));
        if(prev != -1) dp[prev][curr] = dels;
        return dels;
    }

    int minDeletionSize(vector<string> &strs)
    {
        n = strs.size();
        m = strs[0].length();
        memset(dp, -1, sizeof(dp));
        return recur(strs, -1, 0);
    }
};


// Source https://leetcode.com/problems/n-repeated-element-in-size-2n-array/

You are given an integer array nums with the following properties:

nums.length == 2 * n.
nums contains n + 1 unique elements.
Exactly one element of nums is repeated n times.
Return the element that is repeated n times.

 

Example 1:

Input: nums = [1,2,3,3]
Output: 3
Example 2:

Input: nums = [2,1,2,5,3,2]
Output: 2
Example 3:

Input: nums = [5,1,5,2,5,3,5,4]
Output: 5
 

Constraints:

2 <= n <= 5000
nums.length == 2 * n
0 <= nums[i] <= 104
nums contains n + 1 unique elements and one of them is repeated exactly n times.

class Solution
{
public:
    int repeatedNTimes(vector<int> &A)
    {
        int n = A.size();
        unordered_map<int, int> numCnt;
        for (int num : A)
        {
            if (++numCnt[num] > 1) return num;
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/maximum-width-ramp/

A ramp in an integer array nums is a pair (i, j) for which i < j and nums[i] <= nums[j]. The width of such a ramp is j - i.

Given an integer array nums, return the maximum width of a ramp in nums. If there is no ramp in nums, return 0.

 

Example 1:

Input: nums = [6,0,8,2,1,5]
Output: 4
Explanation: The maximum width ramp is achieved at (i, j) = (1, 5): nums[1] = 0 and nums[5] = 5.
Example 2:

Input: nums = [9,8,1,0,1,9,4,0,4,1]
Output: 7
Explanation: The maximum width ramp is achieved at (i, j) = (2, 9): nums[2] = 1 and nums[9] = 1.
 

Constraints:

2 <= nums.length <= 5 * 104
0 <= nums[i] <= 5 * 104

class Solution
{
public:
    
    int maxWidthRamp(vector<int> &nums)
    {
        int res = 0;
        stack<int> st;
        for(int i = 0; i < nums.size(); i++)
        {
            if(st.empty() || nums[st.top()] > nums[i])
            {
                st.push(i);
            }
        }
        for(int i = nums.size() - 1; i >= 0; i--)
        {
            while(!st.empty() && nums[st.top()] <= nums[i])
            {
                res = max(res, i - st.top());
                st.pop();
            }
            if (st.empty()) break;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/minimum-area-rectangle-ii/

You are given an array of points in the X-Y plane points where points[i] = [xi, yi].

Return the minimum area of any rectangle formed from these points, with sides not necessarily parallel to the X and Y axes. If there is not any such rectangle, return 0.

Answers within 10-5 of the actual answer will be accepted.

 

Example 1:


Input: points = [[1,2],[2,1],[1,0],[0,1]]
Output: 2.00000
Explanation: The minimum area rectangle occurs at [1,2],[2,1],[1,0],[0,1], with an area of 2.
Example 2:


Input: points = [[0,1],[2,1],[1,1],[1,0],[2,0]]
Output: 1.00000
Explanation: The minimum area rectangle occurs at [1,0],[1,1],[2,1],[2,0], with an area of 1.
Example 3:


Input: points = [[0,3],[1,2],[3,1],[1,3],[2,1]]
Output: 0
Explanation: There is no possible rectangle to form from these points.
 

Constraints:

1 <= points.length <= 50
points[i].length == 2
0 <= xi, yi <= 4 * 104
All the given points are unique.

矩形的两条对角线长度是相等的，而且相交于矩形的中心，这个中心可以通过对角线的两个顶点的坐标求出来。
只要找到了两组顶点，它们的中心重合，并且表示的对角线长度相等，则一定可以组成矩形。

class Solution
{
public:
    long getLength(vector<int> &pt1, vector<int> &pt2)
    {
        return (pt1[0] - pt2[0]) * (pt1[0] - pt2[0]) + (pt1[1] - pt2[1]) * (pt1[1] - pt2[1]);
    }

    double minAreaFreeRect(vector<vector<int>> &points)
    {
        int n = points.size();
        if (n < 4) return 0.0;
        double res = DBL_MAX;
        unordered_map<string, vector<pair<int, int>>> m;
        for (int i = 0; i < n; ++i)
        {
            for (int j = i + 1; j < n; ++j)
            {
                long dist = getLength(points[i], points[j]);
                double centerX = (points[i][0] + points[j][0]) / 2.0;
                double centerY = (points[i][1] + points[j][1]) / 2.0;
                string key = to_string(dist) + "_" + to_string(centerX) + "_" + to_string(centerY);
                m[key].push_back({i, j});
            }
        }
        for (auto &a : m)
        {
            auto &vec = a.second;
            if (vec.size() < 2) continue;
            for (int i = 0; i < vec.size(); ++i)
            {
                for (int j = i + 1; j < vec.size(); ++j)
                {
                    int p1 = vec[i].first, p2 = vec[j].first, p3 = vec[j].second;
                    double len1 = sqrt(getLength(points[p1], points[p2]));
                    double len2 = sqrt(getLength(points[p1], points[p3]));
                    res = min(res, len1 * len2);
                }
            }
        }
        return res == DBL_MAX ? 0.0 : res;
    }
};


// Source https://leetcode.com/problems/least-operators-to-express-number/

Given a single positive integer x, we will write an expression of the form x (op1) x (op2) x (op3) x ... 
where each operator op1, op2, etc. is either addition, subtraction, multiplication, or division (+, -, *, or /). 
For example, with x = 3, we might write 3 * 3 / 3 + 3 - 3 which is a value of 3.

When writing such an expression, we adhere to the following conventions:

The division operator (/) returns rational numbers.
There are no parentheses placed anywhere.
We use the usual order of operations: multiplication and division happen before addition and subtraction.
It is not allowed to use the unary negation operator (-). For example, "x - x" is a valid expression as it only uses subtraction, but "-x + x" is not because it uses negation.
We would like to write an expression with the least number of operators such that the expression equals the given target. Return the least number of operators used.

 

Example 1:

Input: x = 3, target = 19
Output: 5
Explanation: 3 * 3 + 3 * 3 + 3 / 3.
The expression contains 5 operations.
Example 2:

Input: x = 5, target = 501
Output: 8
Explanation: 5 * 5 * 5 * 5 - 5 * 5 * 5 + 5 / 5.
The expression contains 8 operations.
Example 3:

Input: x = 100, target = 100000000
Output: 3
Explanation: 100 * 100 * 100 * 100.
The expression contains 3 operations.
 

Constraints:

2 <= x <= 100
1 <= target <= 2 * 108

若 x 等于 target，不用加任何运算符，返回0即可。

若 x 大于 target，比如 x=5，target=3，我们其实可以迅速的求出运算符的个数，因为5比3大，要凑3就只能先变成1，这里就有两种变法，
一种是全部都变成1，然后来凑3，即 5/5 + 5/5 + 5/5，这时的运算符个数是 target * 2 -1，因为加号的个数总是比除号少一个。
另一种凑法就是 5 - 5/5 - 5/5，这时候的运算符个数是 (x - target) * 2，此时的减号和除号的个数相同，均为x和 target 的差值。

若 x 小于 target，由于不知道x到底比 target 小多少，若差距太大的话，肯定不能用加号，所以应该先用乘号来让x变大，直到刚好大于等于 target 停止，并每次增加次数 cnt。
若此时 sum 正好等于 target，太幸运了，直接返回 cnt。但通常情况下 sum 会大于 target，此时 sum - target 的差值就需要另行计算了。
这里差值跟 target 的大小关系又要分为两种情况来讨论，当 sum - target < target 时，比如 x=5，sum=25，target=15，则 sum - target=10，
就是说现在已经乘到了 25，但需要再减去 10，这个差值 10 可以再次调用原函数来计算，此时新的 target 代入 10 即可，记得返回值要加上 cnt。
另一种凑的方法，由于 sum 超过了 target，所以回退一个x，变成 sum / x，此时小于 target，那么它们的差值 target - (sum / x) 就可以通过再次调用函数来计算，
注意这里加上 cnt 之后还要减去1，因为回退了一个x，少了一个乘号。最终二者的较小值即为所求，记得要加上个1，因为多加了1个加法或减法运算符

class Solution
{
public:
    unordered_map<int, int> dp;

    int recur(int x, int target)
    {
        if (x == target) return 0;
        if (x > target)
        {
            return min(target * 2 - 1, (x - target) * 2);
        }
        if(dp.find(target) != dp.end()) return dp[target];
        long sum = x;
        int cnt = 0;
        while (sum < target)
        {
            sum *= x;
            ++cnt;
        }
        if (sum == target) return cnt;
        int res1 = INT_MAX, res2 = INT_MAX;
        if (sum - target < target)
        {
            res1 = recur(x, sum - target) + cnt + 1; // 最后的1为多加的1个减法运算符
        }
        res2 = recur(x, target - (sum / x)) + cnt - 1 + 1; // 最后的1为多加的1个加法运算符
        return dp[target] = min(res1, res2);
    }

    int leastOpsExpressTarget(int x, int target)
    {
        return recur(x, target);
    }
};


// Source https://leetcode.com/problems/univalued-binary-tree/

A binary tree is uni-valued if every node in the tree has the same value.

Given the root of a binary tree, return true if the given tree is uni-valued, or false otherwise.

 

Example 1:


Input: root = [1,1,1,1,1,null,1]
Output: true
Example 2:


Input: root = [2,2,2,5,2]
Output: false
 

Constraints:

The number of nodes in the tree is in the range [1, 100].
0 <= Node.val < 100

class Solution
{
public:
    bool isUnivalTree(TreeNode *root)
    {
        return helper(root, root->val);
    }
    bool helper(TreeNode *node, int val)
    {
        if (!node) return true;
        if (node->val != val) return false;
        return helper(node->left, val) && helper(node->right, val);
    }
};


// Source https://leetcode.com/problems/vowel-spellchecker/

Given a wordlist, we want to implement a spellchecker that converts a query word into a correct word.

For a given query word, the spell checker handles two categories of spelling mistakes:

Capitalization: If the query matches a word in the wordlist (case-insensitive), then the query word is returned with the same case as the case in the wordlist.
Example: wordlist = ["yellow"], query = "YellOw": correct = "yellow"
Example: wordlist = ["Yellow"], query = "yellow": correct = "Yellow"
Example: wordlist = ["yellow"], query = "yellow": correct = "yellow"
Vowel Errors: If after replacing the vowels ('a', 'e', 'i', 'o', 'u') of the query word with any vowel individually, it matches a word in the wordlist (case-insensitive), 
then the query word is returned with the same case as the match in the wordlist.
Example: wordlist = ["YellOw"], query = "yollow": correct = "YellOw"
Example: wordlist = ["YellOw"], query = "yeellow": correct = "" (no match)
Example: wordlist = ["YellOw"], query = "yllw": correct = "" (no match)
In addition, the spell checker operates under the following precedence rules:

When the query exactly matches a word in the wordlist (case-sensitive), you should return the same word back.
When the query matches a word up to capitlization, you should return the first such match in the wordlist.
When the query matches a word up to vowel errors, you should return the first such match in the wordlist.
If the query has no matches in the wordlist, you should return the empty string.
Given some queries, return a list of words answer, where answer[i] is the correct word for query = queries[i].

 

Example 1:

Input: wordlist = ["KiTe","kite","hare","Hare"], queries = ["kite","Kite","KiTe","Hare","HARE","Hear","hear","keti","keet","keto"]
Output: ["kite","KiTe","KiTe","Hare","hare","","","KiTe","","KiTe"]
Example 2:

Input: wordlist = ["yellow"], queries = ["YellOw"]
Output: ["yellow"]
 

Constraints:

1 <= wordlist.length, queries.length <= 5000
1 <= wordlist[i].length, queries[i].length <= 7
wordlist[i] and queries[i] consist only of only English letters.

class Solution
{
public:
    vector<string> spellchecker(vector<string> &wordlist, vector<string> &queries)
    {
        vector<string> res;
        unordered_set<string> st;
        unordered_map<string, string> m1;
        unordered_map<string, string> m2;
        for (int i = 0; i < wordlist.size(); ++i)
        {
            string word = wordlist[i];
            st.insert(word);
            transform(word.begin(), word.end(), word.begin(), ::tolower);
            if (!m1.count(word)) m1[word] = wordlist[i];
            for (char &c : word)
            {
                if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') c = '_';
            }
            if (!m2.count(word)) m2[word] = wordlist[i];
        }
        for (string query : queries)
        {
            if (st.count(query))
            {
                res.push_back(query);
                continue;
            }
            transform(query.begin(), query.end(), query.begin(), ::tolower);
            if (m1.count(query))
            {
                res.push_back(m1[query]);
                continue;
            }
            for (char &c : query)
            {
                if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') c = '_';
            }
            if (m2.count(query))
            {
                res.push_back(m2[query]);
                continue;
            }
            res.push_back("");
        }
        return res;
    }
};


// Source https://leetcode.com/problems/numbers-with-same-consecutive-differences/

Return all non-negative integers of length n such that the absolute difference between every two consecutive digits is k.

Note that every number in the answer must not have leading zeros. For example, 01 has one leading zero and is invalid.

You may return the answer in any order.

 

Example 1:

Input: n = 3, k = 7
Output: [181,292,707,818,929]
Explanation: Note that 070 is not a valid number, because it has leading zeroes.
Example 2:

Input: n = 2, k = 1
Output: [10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]
 

Constraints:

2 <= n <= 9
0 <= k <= 9

class Solution
{
public:
    vector<int> numsSameConsecDiff(int n, int k)
    {
        vector<int> res{1, 2, 3, 4, 5, 6, 7, 8, 9};
        for (int i = 1; i < n; ++i)
        {
            vector<int> cur;
            for (int num : res)
            {
                int digit = num % 10;
                if (digit + k <= 9) cur.push_back(num * 10 + digit + k);
                // 判断k不等于0的原因是为了避免 digit+k 和 digit-k 相等，从而产生重复结果。
                if (k != 0 && digit - k >= 0) cur.push_back(num * 10 + digit - k);
            }
            swap(res, cur);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/binary-tree-cameras/

You are given the root of a binary tree. We install cameras on the tree nodes where each camera at a node can monitor its parent, itself, and its immediate children.

Return the minimum number of cameras needed to monitor all nodes of the tree.

 

Example 1:


Input: root = [0,0,null,0,0]
Output: 1
Explanation: One camera is enough to monitor all nodes if placed as shown.
Example 2:


Input: root = [0,0,null,0,null,0,null,null,0]
Output: 2
Explanation: At least two cameras are needed to monitor all nodes of the tree. The above image shows one of the valid configurations of camera placement.
 

Constraints:

The number of nodes in the tree is in the range [1, 1000].
Node.val == 0

摄像机放在叶结点的父结点上，这样最多可以拍到四个结点（当前结点本身，父结点，左右两个子结点）。所以策略应该是先找到叶结点，然后在其父结点放上相机，同时标记父结点的父结点为被拍到了。
这样就有3种不同的状态，用0来表示当前结点是叶结点，1表示当前结点是叶结点的父结点，并被放置了相机，2表示当前结点的是叶结点的爷爷结点，并被相机拍到了。
这里使用一个子函数，将全局变量 res 传进去，用来记录放置的相机的总个数。在递归函数中，若当前结点不存在，则返回2，空结点也可看作已经被相机拍到了。
否则分别对左右子结点调用递归函数，若二者中有一个返回0了，当前结点至少有一个子结点是叶结点，需要在当前位置放一个相机，结果 res 自增1，并返回1。
否则若左右子结点的返回值有一个为1，说明左右子结点中至少有一个已经被放上了相机，当前结点已经被拍到了，返回2。
若都不是，则说明当前结点是叶结点，返回0。在主函数中，若对根结点调用递归的返回值是0，说明根结点是叶结点，此时没有办法，只能在叶结点上放个相机了，所以要加上1，否则不用加

class Solution
{
public:
    int minCameraCover(TreeNode *root)
    {
        int res = 0;
        int type = helper(root, res);
        if (type == 0) ++res;
        return res;
    }

    int helper(TreeNode *node, int &res)
    {
        if (!node) return 2;
        int left = helper(node->left, res), right = helper(node->right, res);
        if (left == 0 || right == 0)
        {
            ++res;
            return 1;
        }
        return (left == 1 || right == 1) ? 2 : 0;
    }
};


// Source https://leetcode.com/problems/pancake-sorting/

Given an array of integers arr, sort the array by performing a series of pancake flips.

In one pancake flip we do the following steps:

Choose an integer k where 1 <= k <= arr.length.
Reverse the sub-array arr[0...k-1] (0-indexed).
For example, if arr = [3,2,1,4] and we performed a pancake flip choosing k = 3, we reverse the sub-array [3,2,1], so arr = [1,2,3,4] after the pancake flip at k = 3.

Return an array of the k-values corresponding to a sequence of pancake flips that sort arr. Any valid answer that sorts the array within 10 * arr.length flips will be judged as correct.

 

Example 1:

Input: arr = [3,2,4,1]
Output: [4,2,4,3]
Explanation: 
We perform 4 pancake flips, with k values 4, 2, 4, and 3.
Starting state: arr = [3, 2, 4, 1]
After 1st flip (k = 4): arr = [1, 4, 2, 3]
After 2nd flip (k = 2): arr = [4, 1, 2, 3]
After 3rd flip (k = 4): arr = [3, 2, 1, 4]
After 4th flip (k = 3): arr = [1, 2, 3, 4], which is sorted.
Example 2:

Input: arr = [1,2,3]
Output: []
Explanation: The input is already sorted, so there is no need to flip anything.
Note that other answers, such as [3, 3], would also be accepted.
 

Constraints:

1 <= arr.length <= 100
1 <= arr[i] <= arr.length
All integers in arr are unique (i.e. arr is a permutation of the integers from 1 to arr.length).

class Solution
{
public:
    vector<int> pancakeSort(vector<int> &arr)
    {
        int n = arr.size();
        vector<int> res;
        for (int i = n; i >= 1; --i)
        {
            int j = 0;
            for (; arr[j] != i; ++j);
            reverse(arr.begin(), arr.begin() + j + 1);
            res.push_back(j + 1);
            reverse(arr.begin(), arr.begin() + i);
            res.push_back(i);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/powerful-integers/

Given three integers x, y, and bound, return a list of all the powerful integers that have a value less than or equal to bound.

An integer is powerful if it can be represented as x^i + y^j for some integers i >= 0 and j >= 0.

You may return the answer in any order. In your answer, each value should occur at most once.

 

Example 1:

Input: x = 2, y = 3, bound = 10
Output: [2,3,4,5,7,9,10]
Explanation:
2 = 20 + 30
3 = 21 + 30
4 = 20 + 31
5 = 21 + 31
7 = 22 + 31
9 = 23 + 30
10 = 20 + 32
Example 2:

Input: x = 3, y = 5, bound = 15
Output: [2,4,6,8,10,14]
 

Constraints:

1 <= x, y <= 100
0 <= bound <= 106

class Solution
{
public:
    vector<int> powerfulIntegers(int x, int y, int bound)
    {
        set<int> res;
        for (int a = 1; a < bound; a *= x)
        {
            for (int b = 1; a + b <= bound; b *= y)
            {
                res.insert(a + b);
                if (y == 1) break;
            }
            if (x == 1) break;
        }
        return vector<int>(res.begin(), res.end());
    }
};


// Source https://leetcode.com/problems/flip-binary-tree-to-match-preorder-traversal/

You are given the root of a binary tree with n nodes, where each node is uniquely assigned a value from 1 to n. 
You are also given a sequence of n values voyage, which is the desired pre-order traversal of the binary tree.

Any node in the binary tree can be flipped by swapping its left and right subtrees. For example, flipping node 1 will have the following effect:

		1					1
	2		3	      ->		3		2
		4		5	4		5

Flip the smallest number of nodes so that the pre-order traversal of the tree matches voyage.

Return a list of the values of all flipped nodes. You may return the answer in any order. 
If it is impossible to flip the nodes in the tree to make the pre-order traversal match voyage, return the list [-1].

 

Example 1:


Input: root = [1,2], voyage = [2,1]
Output: [-1]
Explanation: It is impossible to flip the nodes such that the pre-order traversal matches voyage.
Example 2:


Input: root = [1,2,3], voyage = [1,3,2]
Output: [1]
Explanation: Flipping node 1 swaps nodes 2 and 3, so the pre-order traversal matches voyage.
Example 3:


Input: root = [1,2,3], voyage = [1,2,3]
Output: []
Explanation: The tree's pre-order traversal already matches voyage, so no nodes need to be flipped.
 

Constraints:

The number of nodes in the tree is n.
n == voyage.length
1 <= n <= 100
1 <= Node.val, voyage[i] <= n
All the values in the tree are unique.
All the values in voyage are unique.

class Solution
{
public:
    int n;
    
    vector<int> flipMatchVoyage(TreeNode *root, vector<int> &voyage)
    {
        vector<int> res;
        n = voyage.size();
        int i = 0;
        bool temp = helper(root, voyage, i, res);
        if (temp && i == n) return res;
        return vector<int>{-1};
    }

    bool helper(TreeNode *node, vector<int> &voyage, int &i, vector<int> &res)
    {
        if (i == n) return true;
        if (!node) return true;
        if (node->val != voyage[i]) return false;
        ++i;
        if (node->left && node->left->val != voyage[i])
        {
            res.push_back(node->val);
            return helper(node->right, voyage, i, res) && helper(node->left, voyage, i, res);
        }
        return helper(node->left, voyage, i, res) && helper(node->right, voyage, i, res);
    }
};


// Source https://leetcode.com/problems/equal-rational-numbers/

Given two strings s and t, each of which represents a non-negative rational number, return true if and only if they represent the same number. 
The strings may use parentheses to denote the repeating part of the rational number.

A rational number can be represented using up to three parts: <IntegerPart>, <NonRepeatingPart>, and a <RepeatingPart>. 
The number will be represented in one of the following three ways:

<IntegerPart>
For example, 12, 0, and 123.
<IntegerPart><.><NonRepeatingPart>
For example, 0.5, 1., 2.12, and 123.0001.
<IntegerPart><.><NonRepeatingPart><(><RepeatingPart><)>
For example, 0.1(6), 1.(9), 123.00(1212).
The repeating portion of a decimal expansion is conventionally denoted within a pair of round brackets. For example:

1/6 = 0.16666666... = 0.1(6) = 0.1666(6) = 0.166(66).
 

Example 1:

Input: s = "0.(52)", t = "0.5(25)"
Output: true
Explanation: Because "0.(52)" represents 0.52525252..., and "0.5(25)" represents 0.52525252525..... , the strings represent the same number.
Example 2:

Input: s = "0.1666(6)", t = "0.166(66)"
Output: true
Example 3:

Input: s = "0.9(9)", t = "1."
Output: true
Explanation: "0.9(9)" represents 0.999999999... repeated forever, which equals 1.  [See this link for an explanation.]
"1." represents the number 1, which is formed correctly: (IntegerPart) = "1" and (NonRepeatingPart) = "".
 

Constraints:

Each part consists only of digits.
The <IntegerPart> does not have leading zeros (except for the zero itself).
1 <= <IntegerPart>.length <= 4
0 <= <NonRepeatingPart>.length <= 4
1 <= <RepeatingPart>.length <= 4

class Solution
{
public:
    bool isRationalEqual(string S, string T)
    {
        return helper(S) == helper(T);
    }
    double helper(string S)
    {
        auto i = S.find('(');
        if (i != string::npos)
        {
            string base = S.substr(0, i);
            string rep = S.substr(i + 1, (int)S.length() - i - 2);
            for (int k = 0; k < 20; ++k) base += rep;
            return stod(base);
        }
        return stod(S);
    }
};


// Source https://leetcode.com/problems/k-closest-points-to-origin/

Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane and an integer k, return the k closest points to the origin (0, 0).

The distance between two points on the X-Y plane is the Euclidean distance (i.e., √(x1 - x2)2 + (y1 - y2)2).

You may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in).

 

Example 1:


Input: points = [[1,3],[-2,2]], k = 1
Output: [[-2,2]]
Explanation:
The distance between (1, 3) and the origin is sqrt(10).
The distance between (-2, 2) and the origin is sqrt(8).
Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.
We only want the closest k = 1 points from the origin, so the answer is just [[-2,2]].
Example 2:

Input: points = [[3,3],[5,-1],[-2,4]], k = 2
Output: [[3,3],[-2,4]]
Explanation: The answer [[-2,4],[3,3]] would also be accepted.
 

Constraints:

1 <= k <= points.length <= 104
-104 < xi, yi < 104

class Solution
{
public:
    vector<vector<int>> kClosest(vector<vector<int>> &points, int K)
    {
        vector<vector<int>> res;
        priority_queue<pair<int, int>> pq;
        for (int i = 0; i < points.size(); ++i)
        {
            int t = points[i][0] * points[i][0] + points[i][1] * points[i][1];
            pq.push({t, i});
            if (pq.size() > K) pq.pop();
        }
        while (!pq.empty())
        {
            auto t = pq.top();
            pq.pop();
            res.push_back(points[t.second]);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/subarray-sums-divisible-by-k/

Given an integer array nums and an integer k, return the number of non-empty subarrays that have a sum divisible by k.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [4,5,0,-2,-3,1], k = 5
Output: 7
Explanation: There are 7 subarrays with a sum divisible by k = 5:
[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]
Example 2:

Input: nums = [5], k = 9
Output: 0
 

Constraints:

1 <= nums.length <= 3 * 104
-104 <= nums[i] <= 104
2 <= k <= 104

class Solution
{
public:
    int subarraysDivByK(vector<int> &A, int K)
    {
        int res = 0, sum = 0;
        vector<int> cnt(K);
        cnt[0] = 1;
        for (int num : A)
        {
            sum = (sum + num % K + K) % K;
            res += cnt[sum];
            ++cnt[sum];
        }
        return res;
    }
};


// Source https://leetcode.com/problems/odd-even-jump/

You are given an integer array arr. From some starting index, you can make a series of jumps. The (1st, 3rd, 5th, ...) jumps in the series are called odd-numbered jumps, 
and the (2nd, 4th, 6th, ...) jumps in the series are called even-numbered jumps. Note that the jumps are numbered, not the indices.

You may jump forward from index i to index j (with i < j) in the following way:

During odd-numbered jumps (i.e., jumps 1, 3, 5, ...), you jump to the index j such that arr[i] <= arr[j] and arr[j] is the smallest possible value. 
If there are multiple such indices j, you can only jump to the smallest such index j.
During even-numbered jumps (i.e., jumps 2, 4, 6, ...), you jump to the index j such that arr[i] >= arr[j] and arr[j] is the largest possible value. 
If there are multiple such indices j, you can only jump to the smallest such index j.
It may be the case that for some index i, there are no legal jumps.
A starting index is good if, starting from that index, you can reach the end of the array (index arr.length - 1) by jumping some number of times (possibly 0 or more than once).

Return the number of good starting indices.

 

Example 1:

Input: arr = [10,13,12,14,15]
Output: 2
Explanation: 
From starting index i = 0, we can make our 1st jump to i = 2 (since arr[2] is the smallest among arr[1], arr[2], arr[3], arr[4] that is greater or equal to arr[0]), then we cannot jump any more.
From starting index i = 1 and i = 2, we can make our 1st jump to i = 3, then we cannot jump any more.
From starting index i = 3, we can make our 1st jump to i = 4, so we have reached the end.
From starting index i = 4, we have reached the end already.
In total, there are 2 different starting indices i = 3 and i = 4, where we can reach the end with some number of
jumps.
Example 2:

Input: arr = [2,3,1,1,4]
Output: 3
Explanation: 
From starting index i = 0, we make jumps to i = 1, i = 2, i = 3:
During our 1st jump (odd-numbered), we first jump to i = 1 because arr[1] is the smallest value in [arr[1], arr[2], arr[3], arr[4]] that is greater than or equal to arr[0].
During our 2nd jump (even-numbered), we jump from i = 1 to i = 2 because arr[2] is the largest value in [arr[2], arr[3], arr[4]] that is less than or equal to arr[1]. arr[3] is also the largest value, but 2 is a smaller index, so we can only jump to i = 2 and not i = 3
During our 3rd jump (odd-numbered), we jump from i = 2 to i = 3 because arr[3] is the smallest value in [arr[3], arr[4]] that is greater than or equal to arr[2].
We can't jump from i = 3 to i = 4, so the starting index i = 0 is not good.
In a similar manner, we can deduce that:
From starting index i = 1, we jump to i = 4, so we reach the end.
From starting index i = 2, we jump to i = 3, and then we can't jump anymore.
From starting index i = 3, we jump to i = 4, so we reach the end.
From starting index i = 4, we are already at the end.
In total, there are 3 different starting indices i = 1, i = 3, and i = 4, where we can reach the end with some
number of jumps.
Example 3:

Input: arr = [5,1,3,4,2]
Output: 3
Explanation: We can reach the end from starting indices 1, 2, and 4.
 

Constraints:

1 <= arr.length <= 2 * 104
0 <= arr[i] < 105

class Solution
{
public:
    int n;
    int dp[20001][2];
    int odd[20001];
    int even[20001];

    bool get(int i, int jump)
    {
        if(i == n - 1) return true;
        if(dp[i][jump] != -1) return dp[i][jump];
        bool res = false;
        if (jump)
        {
            if(odd[i] != -1)
            {
                res = get(odd[i], jump ^ 1);
            }
        }
        else
        {
            if(even[i] != -1)
            {
                res = get(even[i], jump ^ 1);
            }
        }
        return dp[i][jump] = res;
    }

    int oddEvenJumps(vector<int> &arr)
    {
        n = arr.size();
        memset(dp, -1, sizeof(dp));
        memset(odd, -1, sizeof(odd));
        memset(even, -1, sizeof(even));
        set<int>s;
        unordered_map<int, int>ind;
        for(int i = n - 1; i >= 0; i--)
        {
            auto it = s.lower_bound(arr[i]);
            if(it != s.end())
            {
                odd[i] = ind[(*it)];
            }
            it = s.upper_bound(arr[i]);
            if(it != s.begin())
            {
                it--;
                even[i] = ind[(*it)];
            }
            ind[arr[i]] = i;
            s.insert(arr[i]);
        }
        int res = 0;
        for(int i = 0; i < n; i++)
            res += get(i, 1);
        return res;
    }
};


// Source https://leetcode.com/problems/largest-perimeter-triangle/

Given an integer array nums, return the largest perimeter of a triangle with a non-zero area, formed from three of these lengths. 
If it is impossible to form any triangle of a non-zero area, return 0.

 

Example 1:

Input: nums = [2,1,2]
Output: 5
Example 2:

Input: nums = [1,2,1]
Output: 0
 

Constraints:

3 <= nums.length <= 104
1 <= nums[i] <= 106

class Solution
{
public:
    int largestPerimeter(vector<int> &A)
    {
        sort(A.begin(), A.end());
        int n = A.size();
        for (int i = n - 1; i >= 2; --i)
        {
            if (A[i] < A[i - 1] + A[i - 2])
            {
                return A[i] + A[i - 1] + A[i - 2];
            }
        }
        return 0;
    }
};


// Source https://leetcode.com/problems/squares-of-a-sorted-array/

Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.

 

Example 1:

Input: nums = [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Explanation: After squaring, the array becomes [16,1,0,9,100].
After sorting, it becomes [0,1,9,16,100].
Example 2:

Input: nums = [-7,-3,2,3,11]
Output: [4,9,9,49,121]
 

Constraints:

1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums is sorted in non-decreasing order.

class Solution
{
public:
    vector<int> sortedSquares(vector<int> &A)
    {
        int n = A.size(), i = 0, j = n - 1;
        vector<int> res(n);
        for (int k = n - 1; k >= 0; --k)
        {
            if (abs(A[i]) > abs(A[j]))
            {
                res[k] = A[i] * A[i];
                ++i;
            }
            else
            {
                res[k] = A[j] * A[j];
                --j;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/longest-turbulent-subarray/

Given an integer array arr, return the length of a maximum size turbulent subarray of arr.

A subarray is turbulent if the comparison sign flips between each adjacent pair of elements in the subarray.

More formally, a subarray [arr[i], arr[i + 1], ..., arr[j]] of arr is said to be turbulent if and only if:

For i <= k < j:
arr[k] > arr[k + 1] when k is odd, and
arr[k] < arr[k + 1] when k is even.
Or, for i <= k < j:
arr[k] > arr[k + 1] when k is even, and
arr[k] < arr[k + 1] when k is odd.
 

Example 1:

Input: arr = [9,4,2,10,7,8,8,1,9]
Output: 5
Explanation: arr[1] > arr[2] < arr[3] > arr[4] < arr[5]
Example 2:

Input: arr = [4,8,12,16]
Output: 2
Example 3:

Input: arr = [100]
Output: 1
 

Constraints:

1 <= arr.length <= 4 * 104
0 <= arr[i] <= 109

先增大再减小再增大等交替进行，或者是先减小再增大再减小等交替进行的

dec[i] 表示满足右边界为arr[i]，且arr[i-1] > arr[i]，子数组的最大长度
inc[i] 表示满足右边界为arr[i]，且arr[i-1] < arr[i]，子数组的最大长度

class Solution
{
public:
    int maxTurbulenceSize(vector<int> &arr)
    {
        int res = 1, n = arr.size();
        vector<int> dec(n, 1), inc(n, 1);
        for (int i = 1; i < n; ++i)
        {
            if (arr[i - 1] > arr[i])
            {
                dec[i] = inc[i - 1] + 1;
            }
            else if (arr[i - 1] < arr[i])
            {
                inc[i] = dec[i - 1] + 1;
            }
            res = max(res, max(dec[i], inc[i]));
        }
        return res;
    }
};


// Source https://leetcode.com/problems/distribute-coins-in-binary-tree/

You are given the root of a binary tree with n nodes where each node in the tree has node.val coins. There are n coins in total throughout the whole tree.

In one move, we may choose two adjacent nodes and move one coin from one node to another. A move may be from parent to child, or from child to parent.

Return the minimum number of moves required to make every node have exactly one coin.

 

Example 1:


Input: root = [3,0,0]
Output: 2
Explanation: From the root of the tree, we move one coin to its left child, and one coin to its right child.
Example 2:


Input: root = [0,3,0]
Output: 3
Explanation: From the left child of the root, we move two coins to the root [taking two moves]. Then, we move one coin from the root of the tree to the right child.
 

Constraints:

The number of nodes in the tree is n.
1 <= n <= 100
0 <= Node.val <= n
The sum of all Node.val is n.

叶结点要是硬币不够，只能从父结点获得，
叶结点要是硬币多了，只能传给父结点（除非该叶结点就是根结点）。

不管是给还是要，都是算一次移动，本质没有太大的区别，不需要分开统计，直接加在一起就行。
为了方便起见，就当作每个结点都会给出当前结点值减1个的硬币，若当前是0的话，就给出 -1 个，其实就是要一个。
这样每个结点可以给出的硬币的总个数就是左右子结点分别可以给出的个数加上当前结点值并减1。

class Solution
{
public:
    int distributeCoins(TreeNode *root)
    {
        int res = 0;
        helper(root, res);
        return res;
    }
    int helper(TreeNode *node, int &res)
    {
        if (!node) return 0;
        int left = helper(node->left, res), right = helper(node->right, res);
        res += abs(left) + abs(right);
        return node->val + left + right - 1;
    }
};


// Source https://leetcode.com/problems/unique-paths-iii/

You are given an m x n integer array grid where grid[i][j] could be:

1 representing the starting square. There is exactly one starting square.
2 representing the ending square. There is exactly one ending square.
0 representing empty squares we can walk over.
-1 representing obstacles that we cannot walk over.
Return the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once.

 

Example 1:


Input: grid = [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]
Output: 2
Explanation: We have the following two paths: 
1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)
2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)
Example 2:


Input: grid = [[1,0,0,0],[0,0,0,0],[0,0,0,2]]
Output: 4
Explanation: We have the following four paths: 
1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)
2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)
3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)
4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)
Example 3:


Input: grid = [[0,1],[2,0]]
Output: 0
Explanation: There is no path that walks over every empty square exactly once.
Note that the starting and ending square can be anywhere in the grid.
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 20
1 <= m * n <= 20
-1 <= grid[i][j] <= 2
There is exactly one starting cell and one ending cell.

class Solution
{
public:
    int m, n;
    int res, empty;
    int visit[30][30];

    void dfs(vector<vector<int>> &grid, int x, int y, int count)
    {
        if (x < 0 || x >= m || y < 0 || y >= n || grid[x][y] == -1 || visit[x][y] == 1) return;
        if (grid[x][y] == 2)
        {
            if(count == (empty + 1)) res++;
            return;
        }
        visit[x][y] = 1;
        dfs(grid, x + 1, y, count + 1);
        dfs(grid, x - 1, y, count + 1);
        dfs(grid, x, y + 1, count + 1);
        dfs(grid, x, y - 1, count + 1);
        visit[x][y] = 0;
    }

    int uniquePathsIII(vector<vector<int>> &grid)
    {
        m = grid.size();
        n = grid[0].size();
        empty = 0;
        int start_x, start_y;
        for (int i = 0; i < m; i++)
        {
            for (int j = 0; j < n; j++)
            {
                if (grid[i][j] == 1) start_x = i, start_y = j;
                else if (grid[i][j] == 0) empty++;
            }
        }
        memset(visit, 0, sizeof(visit));
        res = 0;
        dfs(grid, start_x, start_y, 0);
        return res;
    }
};


// Source https://leetcode.com/problems/time-based-key-value-store/

Design a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key's value at a certain timestamp.

Implement the TimeMap class:

TimeMap() Initializes the object of the data structure.
void set(String key, String value, int timestamp) Stores the key key with the value value at the given time timestamp.
String get(String key, int timestamp) Returns a value such that set was called previously, with timestamp_prev <= timestamp. 
If there are multiple such values, it returns the value associated with the largest timestamp_prev. If there are no values, it returns "".
 

Example 1:

Input
["TimeMap", "set", "get", "get", "set", "get", "get"]
[[], ["foo", "bar", 1], ["foo", 1], ["foo", 3], ["foo", "bar2", 4], ["foo", 4], ["foo", 5]]
Output
[null, null, "bar", "bar", null, "bar2", "bar2"]

Explanation
TimeMap timeMap = new TimeMap();
timeMap.set("foo", "bar", 1);  // store the key "foo" and value "bar" along with timestamp = 1.
timeMap.get("foo", 1);         // return "bar"
timeMap.get("foo", 3);         // return "bar", since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 is "bar".
timeMap.set("foo", "bar2", 4); // store the key "foo" and value "bar2" along with timestamp = 4.
timeMap.get("foo", 4);         // return "bar2"
timeMap.get("foo", 5);         // return "bar2"
 

Constraints:

1 <= key.length, value.length <= 100
key and value consist of lowercase English letters and digits.
1 <= timestamp <= 107
All the timestamps timestamp of set are strictly increasing.
At most 2 * 105 calls will be made to set and get.

class TimeMap
{
public:
    unordered_map<string, map<int, string>> dataMap;

    TimeMap() {}

    void set(string key, string value, int timestamp)
    {
        dataMap[key].insert({timestamp, value});
    }

    string get(string key, int timestamp)
    {
        auto it = dataMap[key].upper_bound(timestamp);
        return it == dataMap[key].begin() ? "" : prev(it)->second;
    }
};


// Source https://leetcode.com/problems/triples-with-bitwise-and-equal-to-zero/

Given an integer array nums, return the number of AND triples.

An AND triple is a triple of indices (i, j, k) such that:

0 <= i < nums.length
0 <= j < nums.length
0 <= k < nums.length
nums[i] & nums[j] & nums[k] == 0, where & represents the bitwise-AND operator.
 

Example 1:

Input: nums = [2,1,3]
Output: 12
Explanation: We could choose the following i, j, k triples:
(i=0, j=0, k=1) : 2 & 2 & 1
(i=0, j=1, k=0) : 2 & 1 & 2
(i=0, j=1, k=1) : 2 & 1 & 1
(i=0, j=1, k=2) : 2 & 1 & 3
(i=0, j=2, k=1) : 2 & 3 & 1
(i=1, j=0, k=0) : 1 & 2 & 2
(i=1, j=0, k=1) : 1 & 2 & 1
(i=1, j=0, k=2) : 1 & 2 & 3
(i=1, j=1, k=0) : 1 & 1 & 2
(i=1, j=2, k=0) : 1 & 3 & 2
(i=2, j=0, k=1) : 3 & 2 & 1
(i=2, j=1, k=0) : 3 & 1 & 2
Example 2:

Input: nums = [0,0,0]
Output: 27
 

Constraints:

1 <= nums.length <= 1000
0 <= nums[i] < 2^16

num的第i位为0，则curNum的第i位可以为1或0
num的第i位为1，则curNum的第i位只能为0

这样 num & curNum 就等于0

class Solution
{
public:
    int cnt[1 << 16];

    void traverse(int i, unsigned curNum, unsigned num, int &res)
    {
        if (i == 16)
        {
            res += cnt[curNum];
            return;
        }
        if (((num >> i) & 1) == 0)
        {
            traverse(i + 1, curNum, num, res);
            traverse(i + 1, curNum + (1 << i), num, res);
        }
        else
        {
            traverse(i + 1, curNum, num, res);
        }
    }

    int countTriplets(vector<int> &nums)
    {
        memset(cnt, 0, sizeof(cnt));
        for (int i = 0; i < nums.size(); ++i)
        {
            for (int j = 0; j < nums.size(); ++j)
            {
                cnt[nums[i] & nums[j]]++;
            }
        }
        int res = 0;
        for (auto num : nums)
        {
            traverse(0, 0, num, res);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/minimum-cost-for-tickets/

You have planned some train traveling one year in advance. The days of the year in which you will travel are given as an integer array days. Each day is an integer from 1 to 365.

Train tickets are sold in three different ways:

a 1-day pass is sold for costs[0] dollars,
a 7-day pass is sold for costs[1] dollars, and
a 30-day pass is sold for costs[2] dollars.
The passes allow that many days of consecutive travel.

For example, if we get a 7-day pass on day 2, then we can travel for 7 days: 2, 3, 4, 5, 6, 7, and 8.
Return the minimum number of dollars you need to travel every day in the given list of days.

 

Example 1:

Input: days = [1,4,6,7,8,20], costs = [2,7,15]
Output: 11
Explanation: For example, here is one way to buy passes that lets you travel your travel plan:
On day 1, you bought a 1-day pass for costs[0] = $2, which covered day 1.
On day 3, you bought a 7-day pass for costs[1] = $7, which covered days 3, 4, ..., 9.
On day 20, you bought a 1-day pass for costs[0] = $2, which covered day 20.
In total, you spent $11 and covered all the days of your travel.
Example 2:

Input: days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15]
Output: 17
Explanation: For example, here is one way to buy passes that lets you travel your travel plan:
On day 1, you bought a 30-day pass for costs[2] = $15 which covered days 1, 2, ..., 30.
On day 31, you bought a 1-day pass for costs[0] = $2 which covered day 31.
In total, you spent $17 and covered all the days of your travel.
 

Constraints:

1 <= days.length <= 365
1 <= days[i] <= 365
days is in strictly increasing order.
costs.length == 3
1 <= costs[i] <= 1000

class Solution
{
public:
    int n;
    int dp[500];

    int recur(int idx, vector<int> &days, vector<int> &costs)
    {
        if(idx >= n) return 0;
        if(dp[idx] != -1) return dp[idx];
        int index = idx;
        int res = costs[0] + recur(idx + 1, days, costs);
        int x = days[idx];
        x += 6;
        while(idx < n && days[idx] <= x)
        {
            idx++;
        }
        res = min(res, costs[1] + recur(idx, days, costs));
        x += 23;
        while(idx < n && days[idx] <= x)
        {
            idx++;
        }
        res = min(res, costs[2] + recur(idx, days, costs));
        return dp[index] = res;
    }

    int mincostTickets(vector<int> &days, vector<int> &costs)
    {
        n = days.size();
        memset(dp, -1, sizeof(dp));
        return recur(0, days, costs);
    }
};


// Source https://leetcode.com/problems/string-without-aaa-or-bbb/

Given two integers a and b, return any string s such that:

s has length a + b and contains exactly a 'a' letters, and exactly b 'b' letters,
The substring 'aaa' does not occur in s, and
The substring 'bbb' does not occur in s.
 

Example 1:

Input: a = 1, b = 2
Output: "abb"
Explanation: "abb", "bab" and "bba" are all correct answers.
Example 2:

Input: a = 4, b = 1
Output: "aabaa"
 

Constraints:

0 <= a, b <= 100
It is guaranteed such an s exists for the given a and b.

a大于b时，可以用两个a，加一个b，尽量让a和b往相等的方向靠拢，然后，对 a-2 和 b-1 递归调用
b大于a时，可以用两个b，加一个a，尽量让a和b往相等的方向靠拢，然后，对 a-1 和 b-2 递归调用

class Solution
{
public:
    string strWithout3a3b(int a, int b)
    {
        string res;
        while (a && b)
        {
            if (a > b)
            {
                res += "aab";
                --a;
            }
            else if (b > a)
            {
                res += "bba";
                --b;
            }
            else
            {
                res += "ab";
            }
            --a;
            --b;
        }
        res += string(a, 'a');
        res += string(b, 'b');
        return res;
    }
};


// Source https://leetcode.com/problems/sum-of-even-numbers-after-queries/

You are given an integer array nums and an array queries where queries[i] = [vali, indexi].

For each query i, first, apply nums[indexi] = nums[indexi] + vali, then print the sum of the even values of nums.

Return an integer array answer where answer[i] is the answer to the ith query.

 

Example 1:

Input: nums = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]]
Output: [8,6,2,4]
Explanation: At the beginning, the array is [1,2,3,4].
After adding 1 to nums[0], the array is [2,2,3,4], and the sum of even values is 2 + 2 + 4 = 8.
After adding -3 to nums[1], the array is [2,-1,3,4], and the sum of even values is 2 + 4 = 6.
After adding -4 to nums[0], the array is [-2,-1,3,4], and the sum of even values is -2 + 4 = 2.
After adding 2 to nums[3], the array is [-2,-1,3,6], and the sum of even values is -2 + 6 = 4.
Example 2:

Input: nums = [1], queries = [[4,0]]
Output: [0]
 

Constraints:

1 <= nums.length <= 104
-104 <= nums[i] <= 104
1 <= queries.length <= 104
-104 <= vali <= 104
0 <= indexi < nums.length

class Solution
{
public:
    vector<int> sumEvenAfterQueries(vector<int> &A, vector<vector<int>> &queries)
    {
        vector<int> res;
        int n = A.size(), even = 0;
        for (int num : A)
        {
            if (num % 2 == 0) even += num;
        }
        for (auto &query : queries)
        {
            int old = A[query[1]], cur = old + query[0];
            if (old % 2 == 0) even -= old;
            if (cur % 2 == 0) even += cur;
            A[query[1]] = cur;
            res.push_back(even);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/interval-list-intersections/

You are given two lists of closed intervals, firstList and secondList, where firstList[i] = [starti, endi] and secondList[j] = [startj, endj]. Each list of intervals is pairwise disjoint and in sorted order.

Return the intersection of these two interval lists.

A closed interval [a, b] (with a <= b) denotes the set of real numbers x with a <= x <= b.

The intersection of two closed intervals is a set of real numbers that are either empty or represented as a closed interval. For example, the intersection of [1, 3] and [2, 4] is [2, 3].

 

Example 1:


Input: firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24],[25,26]]
Output: [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]
Example 2:

Input: firstList = [[1,3],[5,9]], secondList = []
Output: []
 

Constraints:

0 <= firstList.length, secondList.length <= 1000
firstList.length + secondList.length >= 1
0 <= starti < endi <= 109
endi < starti+1
0 <= startj < endj <= 109
endj < startj+1

A closed interval [a, b] (with a <= b) denotes the set of real numbers x with a <= x <= b.

class Solution
{
public:
    vector<vector<int>> intervalIntersection(vector<vector<int>> &A, vector<vector<int>> &B)
    {
        int m = A.size(), n = B.size(), i = 0, j = 0;
        vector<vector<int>> res;
        while (i < m && j < n)
        {
            int lo = max(A[i][0], B[j][0]), hi = min(A[i][1], B[j][1]);
            if (lo <= hi) res.push_back({lo, hi});
            (A[i][1] < B[j][1]) ? ++i : ++j;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/

Given the root of a binary tree, calculate the vertical order traversal of the binary tree.

For each node at position (row, col), its left and right children will be at positions (row + 1, col - 1) and (row + 1, col + 1) respectively. The root of the tree is at (0, 0).

The vertical order traversal of a binary tree is a list of top-to-bottom orderings for each column index starting from the leftmost column and ending on the rightmost column. 
There may be multiple nodes in the same row and same column. In such a case, sort these nodes by their values.

Return the vertical order traversal of the binary tree.

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: [[9],[3,15],[20],[7]]
Explanation:
Column -1: Only node 9 is in this column.
Column 0: Nodes 3 and 15 are in this column in that order from top to bottom.
Column 1: Only node 20 is in this column.
Column 2: Only node 7 is in this column.
Example 2:


Input: root = [1,2,3,4,5,6,7]
Output: [[4],[2],[1,5,6],[3],[7]]
Explanation:
Column -2: Only node 4 is in this column.
Column -1: Only node 2 is in this column.
Column 0: Nodes 1, 5, and 6 are in this column.
          1 is at the top, so it comes first.
          5 and 6 are at the same position (2, 0), so we order them by their value, 5 before 6.
Column 1: Only node 3 is in this column.
Column 2: Only node 7 is in this column.
Example 3:


Input: root = [1,2,3,4,6,5,7]
Output: [[4],[2],[1,5,6],[3],[7]]
Explanation:
This case is the exact same as example 2, but with nodes 5 and 6 swapped.
Note that the solution remains the same since 5 and 6 are in the same location and should be ordered by their values.
 

Constraints:

The number of nodes in the tree is in the range [1, 1000].
0 <= Node.val <= 1000

class Solution
{
public:
    vector<vector<int>> verticalTraversal(TreeNode *root)
    {
        vector<vector<int>> res;
        map<int, map<int, vector<int>>> m;
        helper(root, 0, 0, m);
        for (auto &a : m)
        {
            vector<int> col;
            for (auto &it : a.second)
            {
                sort(it.second.begin(), it.second.end());
                col.insert(col.end(), it.second.begin(), it.second.end());
            }
            res.push_back(col);
        }
        return res;
    }
    void helper(TreeNode *root, int row, int col, map<int, map<int, vector<int>>> &m)
    {
        if (!root) return;
        m[col][row].push_back(root->val);
        helper(root->left, row + 1, col - 1, m);
        helper(root->right, row + 1, col + 1, m);
    }
};


// Source https://leetcode.com/problems/smallest-string-starting-from-leaf/

You are given the root of a binary tree where each node has a value in the range [0, 25] representing the letters 'a' to 'z'.

Return the lexicographically smallest string that starts at a leaf of this tree and ends at the root.

As a reminder, any shorter prefix of a string is lexicographically smaller.

For example, "ab" is lexicographically smaller than "aba".
A leaf of a node is a node that has no children.

 

Example 1:


Input: root = [0,1,2,3,4,3,4]
Output: "dba"
Example 2:


Input: root = [25,1,3,1,3,0,2]
Output: "adz"
Example 3:


Input: root = [2,2,1,null,1,0,null,0]
Output: "abc"
 

Constraints:

The number of nodes in the tree is in the range [1, 8500].
0 <= Node.val <= 25

class Solution
{
public:
    string res;

    string smallestFromLeaf(TreeNode *root)
    {
        res = "~";
        helper(root, "");
        return res;
    }
    void helper(TreeNode *node, string cur)
    {
        if (!node) return;
        string str = string(1, node->val + 'a') + cur;
        if (!node->left && !node->right)
        {
            res = min(res, str);
        }
        helper(node->left, str);
        helper(node->right, str);
    }
};


// Source https://leetcode.com/problems/add-to-array-form-of-integer/

The array-form of an integer num is an array representing its digits in left to right order.

For example, for num = 1321, the array form is [1,3,2,1].
Given num, the array-form of an integer, and an integer k, return the array-form of the integer num + k.

 

Example 1:

Input: num = [1,2,0,0], k = 34
Output: [1,2,3,4]
Explanation: 1200 + 34 = 1234
Example 2:

Input: num = [2,7,4], k = 181
Output: [4,5,5]
Explanation: 274 + 181 = 455
Example 3:

Input: num = [2,1,5], k = 806
Output: [1,0,2,1]
Explanation: 215 + 806 = 1021
 

Constraints:

1 <= num.length <= 104
0 <= num[i] <= 9
num does not contain any leading zeros except for the zero itself.
1 <= k <= 104

class Solution
{
public:
    vector<int> addToArrayForm(vector<int> &A, int K)
    {
        vector<int> B;
        B.reserve(8);
        while (K > 0)
        {
            B.push_back(K % 10);
            K /= 10;
        }
        reverse(A.begin(), A.end());
        int n = A.size(), m = B.size(), carry = 0;
        int len = max(n, m);
        int i = 0;
        while (i < len || carry > 0)
        {
            int num = carry;
            if (i < n) num += A[i];
            if (i < m) num += B[i];
            carry = num / 10;
            num %= 10;
            if (i < n)
            {
                A[i] = num;
            }
            else
            {
                A.push_back(num);
            }
            ++i;
        }
        reverse(A.begin(), A.end());
        return A;
    }
};


// Source https://leetcode.com/problems/satisfiability-of-equality-equations/

You are given an array of strings equations that represent relationships between variables 
where each string equations[i] is of length 4 and takes one of two different forms: "xi==yi" or "xi!=yi".
Here, xi and yi are lowercase letters (not necessarily different) that represent one-letter variable names.

Return true if it is possible to assign integers to variable names so as to satisfy all the given equations, or false otherwise.

 

Example 1:

Input: equations = ["a==b","b!=a"]
Output: false
Explanation: If we assign say, a = 1 and b = 1, then the first equation is satisfied, but not the second.
There is no way to assign the variables to satisfy both equations.
Example 2:

Input: equations = ["b==a","a==b"]
Output: true
Explanation: We could assign a = 1 and b = 1 to satisfy both equations.
 

Constraints:

1 <= equations.length <= 500
equations[i].length == 4
equations[i][0] is a lowercase letter.
equations[i][1] is either '=' or '!'.
equations[i][2] is '='.
equations[i][3] is a lowercase letter.

class Solution
{
public:
    int root[26];
    int size[26];

    int find(int x)
    {
        if (root[x] != x) root[x] = find(root[x]);
        return root[x];
    }

    void join(int x, int y)
    {
        int root_x = find(x);
        int root_y = find(y);
        if (root_x == root_y) return;
        if (size[root_x] > size[root_y])
        {
            root[root_y] = root_x;
            size[root_x] += size[root_y];
        }
        else
        {
            root[root_x] = root_y;
            size[root_y] += size[root_x];
        }
    }

    bool equationsPossible(vector<string> &equations)
    {
        for (int i = 0; i < 26; ++i) { root[i] = i; size[i] = 1; }
        for (string &eq : equations)
        {
            if (eq[1] == '!') continue;
            join(eq[0] - 'a', eq[3] - 'a');
        }
        for (string &eq : equations)
        {
            if (eq[1] == '=') continue;
            if (find(eq[0] - 'a') == find(eq[3] - 'a')) return false;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/broken-calculator/

There is a broken calculator that has the integer startValue on its display initially. In one operation, you can:

multiply the number on display by 2, or
subtract 1 from the number on display.
Given two integers startValue and target, return the minimum number of operations needed to display target on the calculator.

 

Example 1:

Input: startValue = 2, target = 3
Output: 2
Explanation: Use double operation and then decrement operation {2 -> 4 -> 3}.
Example 2:

Input: startValue = 5, target = 8
Output: 2
Explanation: Use decrement and then double {5 -> 4 -> 8}.
Example 3:

Input: startValue = 3, target = 10
Output: 3
Explanation: Use double, decrement and double {3 -> 6 -> 5 -> 10}.
 

Constraints:

1 <= startValue, target <= 109

当startValue和target相等，不需要另外的操作
当startValue大于target时，由于都是正数，肯定不能再乘2了，所以此时直接就可以返回 startValue-target
当startValue小于target时，问题转化为target 除以2 或 加1得到startValue

class Solution
{
public:
    int brokenCalc(int startValue, int target)
    {
        if (startValue >= target) return startValue - target;
        return (target % 2 == 0) ? (1 + brokenCalc(startValue, target / 2)) : (1 + brokenCalc(startValue, target + 1));
    }
};


// Source https://leetcode.com/problems/subarrays-with-k-different-integers/

Given an integer array nums and an integer k, return the number of good subarrays of nums.

A good array is an array where the number of different integers in that array is exactly k.

For example, [1,2,3,1,2] has 3 different integers: 1, 2, and 3.
A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [1,2,1,2,3], k = 2
Output: 7
Explanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2]
Example 2:

Input: nums = [1,2,1,3,4], k = 3
Output: 3
Explanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].
 

Constraints:

1 <= nums.length <= 2 * 104
1 <= nums[i], k <= nums.length

class Solution
{
public:
    int subarraysWithKDistinct(vector<int> &A, int K)
    {
        return helper(A, K) - helper(A, K - 1);
    }
    int helper(vector<int> &A, int K)
    {
        int n = A.size(), res = 0;
        unordered_map<int, int> mp;
        int left = 0, i = 0;
        while (i < n)
        {
            mp[A[i]]++;
            while (mp.size() > K)
            {
                if (--mp[A[left]] == 0) mp.erase(A[left]);
                ++left;
            }
            res += i - left + 1;
            ++i;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/cousins-in-binary-tree/

Given the root of a binary tree with unique values and the values of two different nodes of the tree x and y, 
return true if the nodes corresponding to the values x and y in the tree are cousins, or false otherwise.

Two nodes of a binary tree are cousins if they have the same depth with different parents.

Note that in a binary tree, the root node is at the depth 0, and children of each depth k node are at the depth k + 1.

 

Example 1:


Input: root = [1,2,3,4], x = 4, y = 3
Output: false
Example 2:


Input: root = [1,2,3,null,4,null,5], x = 5, y = 4
Output: true
Example 3:


Input: root = [1,2,3,null,4], x = 2, y = 3
Output: false
 

Constraints:

The number of nodes in the tree is in the range [2, 100].
1 <= Node.val <= 100
Each node has a unique value.
x != y
x and y are exist in the tree.

class Solution
{
public:
    bool find(TreeNode *node, int val, vector<int> &res)
    {
        if (!node) return false;
        res.push_back(node->val);
        if (node->val == val) { return true; }
        if (find(node->left, val, res)) return true;
        if (find(node->right, val, res)) return true;
        res.pop_back();
        return false;
    }

    bool isCousins(TreeNode *root, int x, int y)
    {
        vector<int> resX, resY;
        resX.reserve(32);
        resY.reserve(32);
        find(root, x, resX);
        find(root, y, resY);
        if (resX.size() != resY.size()) return false;
        int n = resX.size();
        if (resX[n - 2] == resY[n - 2]) return false;
        return true;
    }
};


// Source https://leetcode.com/problems/rotting-oranges/

You are given an m x n grid where each cell can have one of three values:

0 representing an empty cell,
1 representing a fresh orange, or
2 representing a rotten orange.
Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

 

Example 1:


Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
Output: 4
Example 2:

Input: grid = [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.
Example 3:

Input: grid = [[0,2]]
Output: 0
Explanation: Since there are already no fresh oranges at minute 0, the answer is just 0.
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 10
grid[i][j] is 0, 1, or 2.

class Solution
{
public:
    int orangesRotting(vector<vector<int>> &grid)
    {
        int m = grid.size(), n = grid[0].size(), freshLeft = 0;
        queue<pair<int, int>> q;
        vector<array<int, 2>> dirs{{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
        for (int i = 0; i < m; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                if (grid[i][j] == 1) ++freshLeft;
                else if (grid[i][j] == 2) q.push({i, j});
            }
        }
        int res = 0;
        while (!q.empty() && freshLeft > 0)
        {
            int sz = q.size();
            for (int i = 0; i < sz; ++i)
            {
                auto cur = q.front();
                q.pop();
                for (int k = 0; k < 4; ++k)
                {
                    int x = cur.first + dirs[k][0], y = cur.second + dirs[k][1];
                    if (x < 0 || x >= m || y < 0 || y >= n || grid[x][y] != 1) continue;
                    grid[x][y] = 2;
                    q.push({x, y});
                    --freshLeft;
                }
            }
            ++res;
        }
        return freshLeft > 0 ? -1 : res;
    }
};


// Source https://leetcode.com/problems/minimum-number-of-k-consecutive-bit-flips/

You are given a binary array nums and an integer k.

A k-bit flip is choosing a subarray of length k from nums and simultaneously changing every 0 in the subarray to 1, and every 1 in the subarray to 0.

Return the minimum number of k-bit flips required so that there is no 0 in the array. If it is not possible, return -1.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [0,1,0], k = 1
Output: 2
Explanation: Flip nums[0], then flip nums[2].
Example 2:

Input: nums = [1,1,0], k = 2
Output: -1
Explanation: No matter how we flip subarrays of size 2, we cannot make the array become [1,1,1].
Example 3:

Input: nums = [0,0,0,1,0,1,1,0], k = 3
Output: 3
Explanation: 
Flip nums[0],nums[1],nums[2]: nums becomes [1,1,1,1,0,1,1,0]
Flip nums[4],nums[5],nums[6]: nums becomes [1,1,1,1,1,0,0,0]
Flip nums[5],nums[6],nums[7]: nums becomes [1,1,1,1,1,1,1,1]
 

Constraints:

1 <= nums.length <= 105
1 <= k <= nums.length

class Solution
{
public:
    int minKBitFlips(vector<int> &nums, int k)
    {
        int n = nums.size();
        queue<int> q;
        int ans = 0;
        for(int i = 0; i < n; i++)
        {
            while(!q.empty() && q.front() <= i - k)
                q.pop();
            int sz = q.size();
            int val = (nums[i] + sz % 2) % 2;
            if(!val)
            {
                if(i + k > n) return -1;
                ans++;
                q.push(i);
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/number-of-squareful-arrays/

An array is squareful if the sum of every pair of adjacent elements is a perfect square.

Given an integer array nums, return the number of permutations of nums that are squareful.

Two permutations perm1 and perm2 are different if there is some index i such that perm1[i] != perm2[i].

 

Example 1:

Input: nums = [1,17,8]
Output: 2
Explanation: [1,8,17] and [17,8,1] are the valid permutations.
Example 2:

Input: nums = [2,2,2]
Output: 1
 

Constraints:

1 <= nums.length <= 12
0 <= nums[i] <= 109

class Solution
{
public:
    int res;
    unordered_map<int, int> numCnt;
    unordered_map<int, unordered_set<int>> numMap;

    void helper(int x, int left)
    {
        if (left == 0)
        {
            ++res;
            return;
        }
        --numCnt[x];
        for (int y : numMap[x])
        {
            if (numCnt[y] > 0)
            {
                helper(y, left - 1);
            }
        }
        ++numCnt[x];
    }

    int numSquarefulPerms(vector<int> &A)
    {
        int n = A.size();
        for (int num : A) ++numCnt[num];
        for (auto &a : numCnt)
        {
            for (auto &b : numCnt)
            {
                int x = a.first, y = b.first, r = sqrt(x + y);
                if (r * r == x + y) numMap[x].insert(y);
            }
        }
        res = 0;
        for (auto a : numCnt)
        {
            helper(a.first, n - 1);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/find-the-town-judge/

In a town, there are n people labeled from 1 to n. There is a rumor that one of these people is secretly the town judge.

If the town judge exists, then:

The town judge trusts nobody.
Everybody (except for the town judge) trusts the town judge.
There is exactly one person that satisfies properties 1 and 2.
You are given an array trust where trust[i] = [ai, bi] representing that the person labeled ai trusts the person labeled bi.

Return the label of the town judge if the town judge exists and can be identified, or return -1 otherwise.

 

Example 1:

Input: n = 2, trust = [[1,2]]
Output: 2
Example 2:

Input: n = 3, trust = [[1,3],[2,3]]
Output: 3
Example 3:

Input: n = 3, trust = [[1,3],[2,3],[3,1]]
Output: -1
 

Constraints:

1 <= n <= 1000
0 <= trust.length <= 104
trust[i].length == 2
All the pairs of trust are unique.
ai != bi
1 <= ai, bi <= n

class Solution
{
public:
    int findJudge(int N, vector<vector<int>> &trust)
    {
        vector<int> in(N + 1), out(N + 1);
        for (auto &a : trust)
        {
            ++out[a[0]];
            ++in[a[1]];
        }
        for (int i = 1; i <= N; ++i)
        {
            if (in[i] == N - 1 && out[i] == 0) return i;
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/maximum-binary-tree-ii/

A maximum tree is a tree where every node has a value greater than any other value in its subtree.

You are given the root of a maximum binary tree and an integer val.

Just as in the previous problem, the given tree was constructed from a list a (root = Construct(a)) recursively with the following Construct(a) routine:

If a is empty, return null.
Otherwise, let a[i] be the largest element of a. Create a root node with the value a[i].
The left child of root will be Construct([a[0], a[1], ..., a[i - 1]]).
The right child of root will be Construct([a[i + 1], a[i + 2], ..., a[a.length - 1]]).
Return root.
Note that we were not given a directly, only a root node root = Construct(a).

Suppose b is a copy of a with the value val appended to it. It is guaranteed that b has unique values.

Return Construct(b).

 

Example 1:


Input: root = [4,1,3,null,null,2], val = 5
Output: [5,4,null,1,3,null,null,2]
Explanation: a = [1,4,2,3], b = [1,4,2,3,5]
Example 2:


Input: root = [5,2,4,null,1], val = 3
Output: [5,2,4,null,1,null,3]
Explanation: a = [2,1,5,4], b = [2,1,5,4,3]
Example 3:


Input: root = [5,2,3,null,1], val = 4
Output: [5,2,4,null,1,3]
Explanation: a = [2,1,5,3], b = [2,1,5,3,4]
 

Constraints:

The number of nodes in the tree is in the range [1, 100].
1 <= Node.val <= 100
All the values of the tree are unique.
1 <= val <= 100

b is a copy of a with the value val appended to it.
新的数字 val 一定是加在数组的末尾的
由于数组中的最大值将作为根结点，若 val 是最大值，则其一定是新的根结点，原二叉树直接变成其左子树了，直接就得到了结果。
若 val 小于当前数组的最大值，则其一定是在右子树中，则可以对最大值右边的子数组调用递归函数，即对根结点的右子结点调用递归函数，将返回的结点更新为新的右子结点即可

class Solution
{
public:
    TreeNode *insertIntoMaxTree(TreeNode *root, int val)
    {
        if (root && root->val > val)
        {
            root->right = insertIntoMaxTree(root->right, val);
            return root;
        }
        return new TreeNode(val, root, nullptr);
    }
};


// Source https://leetcode.com/problems/available-captures-for-rook/

On an 8 x 8 chessboard, there is exactly one white rook 'R' and some number of white bishops 'B', black pawns 'p', and empty squares '.'.
                                                                              车                                                     象                        兵
When the rook moves, it chooses one of four cardinal directions (north, east, south, or west), then moves in that direction until it chooses to stop, 
reaches the edge of the board, captures a black pawn, or is blocked by a white bishop. A rook is considered attacking a pawn if the rook can capture the pawn on the rook's turn. 
The number of available captures for the white rook is the number of pawns that the rook is attacking.

Return the number of available captures for the white rook.

 

Example 1:


Input: board = [[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","R",".",".",".","p"],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."]]
Output: 3
Explanation: In this example, the rook is attacking all the pawns.
Example 2:


Input: board = [[".",".",".",".",".",".",".","."],[".","p","p","p","p","p",".","."],[".","p","p","B","p","p",".","."],[".","p","B","R","B","p",".","."],[".","p","p","B","p","p",".","."],[".","p","p","p","p","p",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."]]
Output: 0
Explanation: The bishops are blocking the rook from attacking any of the pawns.
Example 3:


Input: board = [[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","p",".",".",".","."],["p","p",".","R",".","p","B","."],[".",".",".",".",".",".",".","."],[".",".",".","B",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","."]]
Output: 3
Explanation: The rook is attacking the pawns at positions b5, d6, and f5.
 

Constraints:

board.length == 8
board[i].length == 8
board[i][j] is either 'R', '.', 'B', or 'p'
There is exactly one cell with board[i][j] == 'R'

有三种棋子，分别是白方的车，白方的象，和黑方的兵，问白色方的车最多能吃到多少个黑方的兵。

class Solution
{
public:
    int numRookCaptures(vector<vector<char>> &board)
    {
        int x0 = 0, y0 = 0, res = 0;
        vector<vector<int>> dirs{{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
        bool flag = false;
        for (int i = 0; i < 8; ++i)
        {
            for (int j = 0; j < 8; ++j)
            {
                if (board[i][j] == 'R')
                {
                    x0 = i;
                    y0 = j;
                    flag = true;
                    break;
                }
            }
            if (flag) break;
        }
        for (auto &dir : dirs)
        {
            int x = x0 + dir[0], y = y0 + dir[1];
            while (x >= 0 && x < 8 && y >= 0 && y < 8)
            {
                if (board[x][y] == 'p') ++res;
                if (board[x][y] != '.') break;
                x += dir[0];
                y += dir[1];
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/minimum-cost-to-merge-stones/

There are n piles of stones arranged in a row. The ith pile has stones[i] stones.

A move consists of merging exactly k consecutive piles into one pile, and the cost of this move is equal to the total number of stones in these k piles.

Return the minimum cost to merge all piles of stones into one pile. If it is impossible, return -1.

 

Example 1:

Input: stones = [3,2,4,1], k = 2
Output: 20
Explanation: We start with [3, 2, 4, 1].
We merge [3, 2] for a cost of 5, and we are left with [5, 4, 1].
We merge [4, 1] for a cost of 5, and we are left with [5, 5].
We merge [5, 5] for a cost of 10, and we are left with [10].
The total cost was 20, and this is the minimum possible.
Example 2:

Input: stones = [3,2,4,1], k = 3
Output: -1
Explanation: After any merge operation, there are 2 piles left, and we can't merge anymore.  So the task is impossible.
Example 3:

Input: stones = [3,5,1,2,6], k = 3
Output: 25
Explanation: We start with [3, 5, 1, 2, 6].
We merge [5, 1, 2] for a cost of 8, and we are left with [3, 8, 6].
We merge [3, 8, 6] for a cost of 17, and we are left with [17].
The total cost was 25, and this is the minimum possible.
 

Constraints:

n == stones.length
1 <= n <= 30
1 <= stones[i] <= 100
2 <= k <= 30

class Solution
{
public:
    int N;
    int K;
    int dp[35][35][35];
    int sum[35];

    int solve(const int l, const int r, int piles)
    {
        if (piles > r - l + 1) return 1e9;
        if (l == r) return 0;
        if (dp[l][r][piles] != -1) return dp[l][r][piles];
        int ans = 1e9;
        if (piles == 1)
        {
            ans = min(ans, sum[r + 1] - sum[l] + solve(l, r, K));
            return dp[l][r][piles] = ans;
         }
        for (int i = l; i < r; i++)
        {
            ans = min(ans, solve(l, i, 1) + solve(i + 1, r, piles - 1));
        }
        return dp[l][r][piles] = ans;
    }

    int mergeStones(vector<int> &stones, int k)
    {
        this->N = stones.size();
        this->K = k;
        if((N-1)%(K-1)!=0) return -1;
        memset(dp, -1, sizeof(dp));
        memset(sum, 0, sizeof(sum));
        for (int i = 1; i <= N; i++)
            sum[i] = sum[i - 1] + stones[i - 1];
        int ans = solve(0, N - 1, 1);
        return ans == 1e9 ? -1 : ans;
    }
};


// Source https://leetcode.com/problems/grid-illumination/

There is a 2D grid of size n x n where each cell of this grid has a lamp that is initially turned off.

You are given a 2D array of lamp positions lamps, where lamps[i] = [rowi, coli] indicates that the lamp at grid[rowi][coli] is turned on. 
Even if the same lamp is listed more than once, it is turned on.

When a lamp is turned on, it illuminates its cell and all other cells in the same row, column, or diagonal.

You are also given another 2D array queries, where queries[j] = [rowj, colj]. For the jth query, determine whether grid[rowj][colj] is illuminated or not. 
After answering the jth query, turn off the lamp at grid[rowj][colj] and its 8 adjacent lamps if they exist. A lamp is adjacent if its cell shares either a side or corner with grid[rowj][colj].

Return an array of integers ans, where ans[j] should be 1 if the cell in the jth query was illuminated, or 0 if the lamp was not.

 

Example 1:


Input: n = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,0]]
Output: [1,0]
Explanation: We have the initial grid with all lamps turned off. In the above picture we see the grid after turning on the lamp at grid[0][0] then turning on the lamp at grid[4][4].
The 0th query asks if the lamp at grid[1][1] is illuminated or not (the blue square). It is illuminated, so set ans[0] = 1. Then, we turn off all lamps in the red square.

The 1st query asks if the lamp at grid[1][0] is illuminated or not (the blue square). It is not illuminated, so set ans[1] = 0. Then, we turn off all lamps in the red rectangle.

Example 2:

Input: n = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,1]]
Output: [1,1]
Example 3:

Input: n = 5, lamps = [[0,0],[0,4]], queries = [[0,4],[0,1],[1,4]]
Output: [1,1,0]
 

Constraints:

1 <= n <= 109
0 <= lamps.length <= 20000
0 <= queries.length <= 20000
lamps[i].length == 2
0 <= rowi, coli < n
queries[j].length == 2
0 <= rowj, colj < n

class Solution
{
public:
    vector<int> gridIllumination(int n, vector<vector<int>> &lamps, vector<vector<int>> &queries)
    {
        set<pair<int, int>> ss;
        unordered_map<int, int> rows, cols, anti, diag;

        for (auto &lamp : lamps)
        {
            int i = lamp[0], j = lamp[1];
            if (ss.insert({i, j}).second)
            {
                ++rows[i];
                ++anti[i + j];
                ++cols[j];
                ++diag[i - j];
            }
        }

        vector<int> ans;
        for (auto &query : queries)
        {
            int i = query[0], j = query[1];
            if (rows[i] || cols[j] || anti[i + j] || diag[i - j]) ans.push_back(1);
            else ans.push_back(0);
            for (int ii = i - 1; ii <= i + 1; ++ii)
            {
                for (int jj = j - 1; jj <= j + 1; ++jj)
                {
                    if (ss.erase({ii, jj}))
                    {
                        --rows[ii];
                        --anti[ii + jj];
                        --cols[jj];
                        --diag[ii - jj];
                    }
                }
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/find-common-characters/

Given a string array words, return an array of all characters that show up in all strings within the words (including duplicates). You may return the answer in any order.

 

Example 1:

Input: words = ["bella","label","roller"]
Output: ["e","l","l"]
Example 2:

Input: words = ["cool","lock","cook"]
Output: ["c","o"]
 

Constraints:

1 <= words.length <= 100
1 <= words[i].length <= 100
words[i] consists of lowercase English letters.

class Solution
{
public:
    vector<string> commonChars(vector<string> &A)
    {
        vector<string> res;
        vector<int> cnt(26, INT_MAX);
        for (string &word : A)
        {
            vector<int> t(26);
            for (char c : word) ++t[c - 'a'];
            for (int i = 0; i < 26; ++i)
            {
                cnt[i] = min(cnt[i], t[i]);
            }
        }
        for (int i = 0; i < 26; ++i)
        {
            for (int j = 0; j < cnt[i]; ++j)
            {
                res.push_back(string(1, 'a' + i));
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/check-if-word-is-valid-after-substitutions/

Given a string s, determine if it is valid.

A string s is valid if, starting with an empty string t = "", you can transform t into s after performing the following operation any number of times:

Insert string "abc" into any position in t. More formally, t becomes tleft + "abc" + tright, where t == tleft + tright. Note that tleft and tright may be empty.
Return true if s is a valid string, otherwise, return false.

 

Example 1:

Input: s = "aabcbc"
Output: true
Explanation:
"" -> "abc" -> "aabcbc"
Thus, "aabcbc" is valid.
Example 2:

Input: s = "abcabcababcc"
Output: true
Explanation:
"" -> "abc" -> "abcabc" -> "abcabcabc" -> "abcabcababcc"
Thus, "abcabcababcc" is valid.
Example 3:

Input: s = "abccba"
Output: false
Explanation: It is impossible to get "abccba" using the operation.
 

Constraints:

1 <= s.length <= 2 * 104
s consists of letters 'a', 'b', and 'c'

class Solution
{
public:
    bool isValid(string s)
    {
        for (auto pos = s.find("abc"); pos != string::npos; pos = s.find("abc"))
        {
            s.erase(pos, 3);
        }
        return s.empty();
    }
};


// Source https://leetcode.com/problems/max-consecutive-ones-iii/

Given a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's.

 

Example 1:

Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2
Output: 6
Explanation: [1,1,1,0,0,1,1,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.
Example 2:

Input: nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3
Output: 10
Explanation: [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.
 

Constraints:

1 <= nums.length <= 105
nums[i] is either 0 or 1.
0 <= k <= nums.length

class Solution
{
public:
    int longestOnes(vector<int> &A, int K)
    {
        int n = A.size(), i = 0, j = 0;
        int cnt[2] = {0};
        int res = 0;
        while (j < n)
        {
            cnt[A[j]]++;
            while(cnt[0] > K)
            {
                cnt[A[i]]--;
                ++i;
            }
            res = max(res, j - i + 1);
            ++j;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/maximize-sum-of-array-after-k-negations/

Given an integer array nums and an integer k, modify the array in the following way:

choose an index i and replace nums[i] with -nums[i].
You should apply this process exactly k times. You may choose the same index i multiple times.

Return the largest possible sum of the array after modifying it in this way.

 

Example 1:

Input: nums = [4,2,3], k = 1
Output: 5
Explanation: Choose index 1 and nums becomes [4,-2,3].
Example 2:

Input: nums = [3,-1,0,2], k = 3
Output: 6
Explanation: Choose indices (1, 2, 2) and nums becomes [3,1,0,2].
Example 3:

Input: nums = [2,-3,-1,5,-4], k = 2
Output: 13
Explanation: Choose indices (1, 4) and nums becomes [2,3,-1,5,4].
 

Constraints:

1 <= nums.length <= 104
-100 <= nums[i] <= 100
1 <= k <= 104

class Solution
{
public:
    int largestSumAfterKNegations(vector<int> &A, int K)
    {
        int n = A.size();
        sort(A.begin(), A.end());
        for (int i = 0; i < n && K > 0 && A[i] < 0; ++i, --K)
        {
            A[i] = -A[i];
        }
        if (K == 0) return accumulate(A.begin(), A.end(), 0);
        int mn = INT_MAX;
        int sum = 0;
        for (int num : A)
        {
            sum += num;
            mn = min(mn, num);
        }
        if (K % 2 == 0) return sum;
        return sum - 2 * mn;
    }
};


// Source https://leetcode.com/problems/clumsy-factorial/

The factorial of a positive integer n is the product of all positive integers less than or equal to n.

For example, factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1.
We make a clumsy factorial using the integers in decreasing order by swapping out the multiply operations 
for a fixed rotation of operations with multiply '*', divide '/', add '+', and subtract '-' in this order.

For example, clumsy(10) = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1.
However, these operations are still applied using the usual order of operations of arithmetic. 
We do all multiplication and division steps before any addition or subtraction steps, and multiplication and division steps are processed left to right.

Additionally, the division that we use is floor division such that 10 * 9 / 8 = 90 / 8 = 11.

Given an integer n, return the clumsy factorial of n.

 

Example 1:

Input: n = 4
Output: 7
Explanation: 7 = 4 * 3 / 2 + 1
Example 2:

Input: n = 10
Output: 12
Explanation: 12 = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1
 

Constraints:

1 <= n <= 104

16 * 15 / 14 +  13 - 12 * 11 / 10 + 9 - 8 * 7 / 6 + 5 - 4 * 3 / 2 + 1
15 * 14 / 13 + 12 - 11 * 10 / 9 + 8 - 7 * 6 / 5 + 4 - 3 * 2 / 1
14 * 13 / 12 + 11 - 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1
13 * 12 / 11 + 10 - 9 * 8 / 7 + 6 - 5 * 4 / 3 + 2 - 1

class Solution
{
public:
    int clumsy(int N)
    {
        if (N == 1) return 1;
        if (N == 2) return 2;
        if (N == 3) return 6;
        int res = 0;
        int cnt1 = N / 4, cnt2 = N % 4;
        for (int i = 0; i < cnt1; ++i)
        {
            int num = N - i * 4;
            int temp = num * (num - 1) / (num - 2);
            res += (i == 0) ? temp : -temp;
            res += (num - 3);
        }
        if (cnt2 == 0) return res;
        else if (cnt2 == 1) return res - 1;
        else if (cnt2 == 2) return res - 2;
        return res - 6;
    }
};


// Source https://leetcode.com/problems/minimum-domino-rotations-for-equal-row/

In a row of dominoes, tops[i] and bottoms[i] represent the top and bottom halves of the ith domino. (A domino is a tile with two numbers from 1 to 6 - one on each half of the tile.)

We may rotate the ith domino, so that tops[i] and bottoms[i] swap values.

Return the minimum number of rotations so that all the values in tops are the same, or all the values in bottoms are the same.

If it cannot be done, return -1.

 

Example 1:


Input: tops = [2,1,2,4,2,2], bottoms = [5,2,6,2,3,2]
Output: 2
Explanation: 
The first figure represents the dominoes as given by tops and bottoms: before we do any rotations.
If we rotate the second and fourth dominoes, we can make every value in the top row equal to 2, as indicated by the second figure.
Example 2:

Input: tops = [3,5,1,2,3], bottoms = [3,6,3,3,4]
Output: -1
Explanation: 
In this case, it is not possible to rotate the dominoes to make one row of values equal.
 

Constraints:

2 <= tops.length <= 2 * 104
bottoms.length == tops.length
1 <= tops[i], bottoms[i] <= 6

class Solution
{
public:
    int minDominoRotations(vector<int> &A, vector<int> &B)
    {
        int res = INT_MAX, n = A.size();
        vector<int> cntA(7), cntB(7), same(7);
        for (int i = 0; i < n; ++i)
        {
            ++cntA[A[i]];
            ++cntB[B[i]];
            if (A[i] == B[i]) ++same[A[i]];
        }
        for (int i = 1; i <= 6; ++i)
        {
            if (cntA[i] + cntB[i] - same[i] == n)
            {
                res = min(res, n - max(cntA[i], cntB[i]));
            }
        }
        return res == INT_MAX ? -1 : res;
    }
};


// Source https://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal/

Given an array of integers preorder, which represents the preorder traversal of a BST (i.e., binary search tree), construct the tree and return its root.

It is guaranteed that there is always possible to find a binary search tree with the given requirements for the given test cases.

A binary search tree is a binary tree where for every node, any descendant of Node.left has a value strictly less than Node.val, and any descendant of Node.right has a value strictly greater than Node.val.

A preorder traversal of a binary tree displays the value of the node first, then traverses Node.left, then traverses Node.right.

 

Example 1:


Input: preorder = [8,5,1,7,10,12]
Output: [8,5,10,1,7,null,12]
Example 2:

Input: preorder = [1,3]
Output: [1,null,3]
 

Constraints:

1 <= preorder.length <= 100
1 <= preorder[i] <= 1000
All the values of preorder are unique.

class Solution
{
public:
    TreeNode* recur(vector<int>& preorder, int i, int j)
    {
        if (i > j) return nullptr;
        if (i == j) return new TreeNode(preorder[i]);
        TreeNode *node = new TreeNode(preorder[i]);
        int k = i + 1;
        for (; k <= j && preorder[k] < preorder[i]; ++k);
        node->left = recur(preorder, i + 1, k - 1);
        node->right = recur(preorder, k, j);
        return node;
    }

    TreeNode *bstFromPreorder(vector<int> &preorder)
    {
        int n = preorder.size();
        return recur(preorder, 0, n - 1);
    }
};


// Source https://leetcode.com/problems/complement-of-base-10-integer/

The complement of an integer is the integer you get when you flip all the 0's to 1's and all the 1's to 0's in its binary representation.

For example, The integer 5 is "101" in binary and its complement is "010" which is the integer 2.
Given an integer n, return its complement.

 

Example 1:

Input: n = 5
Output: 2
Explanation: 5 is "101" in binary, with complement "010" in binary, which is 2 in base-10.
Example 2:

Input: n = 7
Output: 0
Explanation: 7 is "111" in binary, with complement "000" in binary, which is 0 in base-10.
Example 3:

Input: n = 10
Output: 5
Explanation: 10 is "1010" in binary, with complement "0101" in binary, which is 5 in base-10.
 

Constraints:

0 <= n < 109

class Solution
{
public:
    int bitwiseComplement(int N)
    {
        if (N == 0) return 1;
        int val = 1;
        int res = 0;
        while (N > 0)
        {
           if((N & 1) == 0) res += val;
            N >>= 1;
            val <<= 1;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/pairs-of-songs-with-total-durations-divisible-by-60/

You are given a list of songs where the ith song has a duration of time[i] seconds.

Return the number of pairs of songs for which their total duration in seconds is divisible by 60. 
Formally, we want the number of indices i, j such that i < j with (time[i] + time[j]) % 60 == 0.

 

Example 1:

Input: time = [30,20,150,100,40]
Output: 3
Explanation: Three pairs have a total duration divisible by 60:
(time[0] = 30, time[2] = 150): total duration 180
(time[1] = 20, time[3] = 100): total duration 120
(time[1] = 20, time[4] = 40): total duration 60
Example 2:

Input: time = [60,60,60]
Output: 3
Explanation: All three pairs have a total duration of 120, which is divisible by 60.
 

Constraints:

1 <= time.length <= 6 * 104
1 <= time[i] <= 500

class Solution
{
public:
    int numPairsDivisibleBy60(vector<int> &time)
    {
        int res = 0;
        vector<int> cnt(60);
        for (int t : time)
        {
            res += cnt[(600 - t) % 60];
            ++cnt[t % 60];
        }
        return res;
    }
};


// Source https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/

A conveyor belt has packages that must be shipped from one port to another within days days.

The ith package on the conveyor belt has a weight of weights[i]. Each day, we load the ship with packages on the conveyor belt (in the order given by weights). 
We may not load more weight than the maximum weight capacity of the ship.

Return the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within days days.

 

Example 1:

Input: weights = [1,2,3,4,5,6,7,8,9,10], days = 5
Output: 15
Explanation: A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:
1st day: 1, 2, 3, 4, 5
2nd day: 6, 7
3rd day: 8
4th day: 9
5th day: 10

Note that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed.
Example 2:

Input: weights = [3,2,2,4,1,4], days = 3
Output: 6
Explanation: A ship capacity of 6 is the minimum to ship all the packages in 3 days like this:
1st day: 3, 2
2nd day: 2, 4
3rd day: 1, 4
Example 3:

Input: weights = [1,2,3,1,1], days = 4
Output: 3
Explanation:
1st day: 1
2nd day: 2
3rd day: 3
4th day: 1, 1
 

Constraints:

1 <= days <= weights.length <= 5 * 104
1 <= weights[i] <= 500

class Solution
{
public:
    int shipWithinDays(vector<int> &weights, int D)
    {
        int left = *max_element(weights.begin(), weights.end()), right = accumulate(weights.begin(), weights.end(), 0);
        while (left < right)
        {
            int mid = left + (right - left) / 2, cnt = 1, cur = 0;
            for (int w : weights)
            {
                cur += w;
                if (cur > mid)
                {
                    cur = w;
                    ++cnt;
                }
            }
            if (cnt > D) left = mid + 1;
            else right = mid;
        }
        return left;
    }
};


// Source https://leetcode.com/problems/numbers-with-repeated-digits/

Given an integer n, return the number of positive integers in the range [1, n] that have at least one repeated digit.

 

Example 1:

Input: n = 20
Output: 1
Explanation: The only positive number (<= 20) with at least 1 repeated digit is 11.
Example 2:

Input: n = 100
Output: 10
Explanation: The positive numbers (<= 100) with atleast 1 repeated digit are 11, 22, 33, 44, 55, 66, 77, 88, 99, and 100.
Example 3:

Input: n = 1000
Output: 262
 

Constraints:

1 <= n <= 109

可以求不大于N且一个重复数字都没有的正整数的个数，然后用N减去这个数字即为所求。
对于任意一个N，比如 7918，是个四位数，可以直接求出没有重复数字的三位数，两位数，和一位数。
比如三位数，由于百位上不能有0，则只有9种情况，十位上可以有0，则有9种情况，个位上则有8种情况，所以就是 9*9*8。
可以归纳出没有重复数字的n位数的个数，最高位去除0还有9种，剩余的 n-1 位则依次是 9，8，7...
接下来算符合题意的四位数，由于第一位是7，若千位上是小于7的数字（共有6种，千位上不能是0），则后面的百位，十位，个位又都可以全排列了，从9个数字中取3个数字的全排列，再乘以千位上小于7的6种情况。
若当千位固定为7，则百位上可以放小于9的数字（共有8种，百位不能放7，但可以放0），则后面的十位和个位都可以全排列了，从8个数字种取出2个数字的全排列，再乘以百位上小于9的8种情况。
需要注意的是，遍历给定数字的各个位时，有可能出现重复数字，一旦出现了之后，则该 prefix 就不能再用了，因为已经不合题意了。
所以要用一个 HashSet 来记录访问过的数字，一旦遇到重复数字后就直接 break 掉。
由于N本身也需要计算进去，所以再计算的时候，使用 N+1 进行计算的话，就可以把N这种情况算进去了

A(m, n) = m * (m - 1) * ... * (m - n + 1)
A(m, n -1) = m * (m - 1) * ... * (m - n + 2)

class Solution
{
public:
    int dp[20][20];

    int A(int m, int n)
    {
        if (n == 0) return 1;
        if (dp[m][n] != -1) return dp[m][n];
        int res = A(m, n - 1) * (m - n + 1);
        return dp[m][n] = res;
    }

    int numDupDigitsAtMostN(int N)
    {
        memset(dp, -1, sizeof(dp));
        vector<int> digits;
        for (int x = N + 1; x > 0; x /= 10)
        {
            digits.insert(digits.begin(), x % 10);
        }
        int res = 0, len = digits.size();
        for (int i = 1; i < len; ++i)
        {
            res += 9 * A(9, i - 1);
        }
        unordered_set<int> visited;
        for (int i = 0; i < len; ++i)
        {
            for (int num = i > 0 ? 0 : 1; num < digits[i]; ++num)
            {
                if (visited.count(num)) continue;
                res += A(9 - i, len - i - 1);
            }
            if (visited.count(digits[i])) break;
            visited.insert(digits[i]);
        }
        return N - res;
    }
};


// Source https://leetcode.com/problems/partition-array-into-three-parts-with-equal-sum/

Given an array of integers arr, return true if we can partition the array into three non-empty parts with equal sums.

Formally, we can partition the array if we can find indexes i + 1 < j with (arr[0] + arr[1] + ... + arr[i] == arr[i + 1] + arr[i + 2] + ... + arr[j - 1] == arr[j] + arr[j + 1] + ... + arr[arr.length - 1])

 

Example 1:

Input: arr = [0,2,1,-6,6,-7,9,1,2,0,1]
Output: true
Explanation: 0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1
Example 2:

Input: arr = [0,2,1,-6,6,7,9,-1,2,0,1]
Output: false
Example 3:

Input: arr = [3,3,6,5,-2,2,5,1,-9,4]
Output: true
Explanation: 3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4
 

Constraints:

3 <= arr.length <= 5 * 104
-104 <= arr[i] <= 104

class Solution
{
public:
    bool canThreePartsEqualSum(vector<int> &arr)
    {
        int sum = accumulate(arr.begin(), arr.end(), 0);
        if (sum % 3 != 0) return false;
        int target = sum / 3, cur = 0, cnt = 0;
        for (int num : arr)
        {
            cur += num;
            if (cur == target)
            {
                ++cnt;
                cur = 0;
            }
        }
        return cnt >= 3;
    }
};


// Source https://leetcode.com/problems/best-sightseeing-pair/

You are given an integer array values where values[i] represents the value of the ith sightseeing spot. Two sightseeing spots i and j have a distance j - i between them.

The score of a pair (i < j) of sightseeing spots is values[i] + values[j] + i - j: the sum of the values of the sightseeing spots, minus the distance between them.

Return the maximum score of a pair of sightseeing spots.

 

Example 1:

Input: values = [8,1,5,2,6]
Output: 11
Explanation: i = 0, j = 2, values[i] + values[j] + i - j = 8 + 5 + 0 - 2 = 11
Example 2:

Input: values = [1,2]
Output: 2
 

Constraints:

2 <= values.length <= 5 * 104
1 <= values[i] <= 1000

class Solution
{
public:
    int maxScoreSightseeingPair(vector<int> &A)
    {
        int n = A.size();
        int mx = A[0] + 0;
        int res = INT_MIN;
        for (int i = 1; i < n; ++i)
        {
            res = max(res, mx + A[i] - i);
            mx = max(mx, A[i] + i);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/smallest-integer-divisible-by-k/

Given a positive integer k, you need to find the length of the smallest positive integer n such that n is divisible by k, and n only contains the digit 1.

Return the length of n. If there is no such n, return -1.

Note: n may not fit in a 64-bit signed integer.

 

Example 1:

Input: k = 1
Output: 1
Explanation: The smallest answer is n = 1, which has length 1.
Example 2:

Input: k = 2
Output: -1
Explanation: There is no such positive integer n divisible by 2.
Example 3:

Input: k = 3
Output: 3
Explanation: The smallest answer is n = 111, which has length 3.
 

Constraints:

1 <= k <= 105

能被2整除的数字必须是偶数，能被3整除的数字各个位加起来必须能被3整除，能被5整除的数字的末尾数字必须是0或者5。
由于N都是由1组成的，所以一定不可能整除2或者5，所以只要K中包含2或者5，直接返回 -1。
其实有一个定理，若K不能被2或5整除，则一定有一个长度小于等于K且均由1组成的数，可以整除K。
这里只要找到那个最短的长度即可，从1开始试，每次乘以 10 再加1，就可以得到下一个数字，但是由于K可能很大，则N就会超出整型数的范围，就算是长整型也不一定 hold 的住，所以不能一直变大，
而是每次累加后都要对 K 取余，若余数为0，则直接返回当前长度，若不为0，则用余数乘以 10 再加1

class Solution
{
public:
    int smallestRepunitDivByK(int K)
    {
        if (K % 2 == 0 || K % 5 == 0) return -1;
        int r = 0;
        for (int i = 1; i <= K; ++i)
        {
            r = (r * 10 + 1) % K;
            if (r == 0) return i;
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/binary-string-with-substrings-representing-1-to-n/

Given a binary string s and a positive integer n, return true if the binary representation of all the integers in the range [1, n] are substrings of s, or false otherwise.

A substring is a contiguous sequence of characters within a string.

 

Example 1:

Input: s = "0110", n = 3
Output: true
Example 2:

Input: s = "0110", n = 4
Output: false
 

Constraints:

1 <= s.length <= 1000
s[i] is either '0' or '1'.
1 <= n <= 109

class Solution
{
public:
    bool queryString(string S, int N)
    {
        for (int i = N; i > 0; --i)
        {
            string b = bitset<32>(i).to_string();
            if (S.find(b.substr(b.find("1"))) == string::npos) return false;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/convert-to-base-2/

Given an integer n, return a binary string representing its representation in base -2.

Note that the returned string should not have leading zeros unless the string is "0".

 

Example 1:

Input: n = 2
Output: "110"
Explantion: (-2)^2 + (-2)^1 = 2
Example 2:

Input: n = 3
Output: "111"
Explantion: (-2)2 + (-2)1 + (-2)0 = 3
Example 3:

Input: n = 4
Output: "100"
Explantion: (-2)2 = 4
 

Constraints:

0 <= n <= 109

计算分子 x 除以分母 y 的商和余数。
std::div_t     div( int x, int y );
quot * y + rem == x
y = -2
quot * (-2) + rem == x
如果rem < 0，则(quot + 1) * (-2) + rem - (-2) == x

class Solution
{
public:
    string baseNeg2(int n)
    {
        if (n == 0) return "0";
        if (n == 1) return "1";
        string repr;
        repr.reserve(32);
        while (n)
        {
            auto const d = div(n, -2);
            // Remainder will be in {-1, 0, +1}.
            // If remainder is -1, then "normalize" the remainder to +1 by adding 1 to the quotient
            // ( e.g., -7 = (-2) * 3 + (-1) = (-2) * (3 + 1) + 1 )
            n = d.rem < 0 ? d.quot + 1 : d.quot;
            // so now remainder is either 0 or 1 after the aforementioned "normalization" step
            repr.push_back(d.rem != 0 ? '1' : '0');
        }
        reverse(repr.begin(), repr.end());
        return repr;
    }
};


// Source https://leetcode.com/problems/binary-prefix-divisible-by-5/

You are given a binary array nums (0-indexed).

We define xi as the number whose binary representation is the subarray nums[0..i] (from most-significant-bit to least-significant-bit).

For example, if nums = [1,0,1], then x0 = 1, x1 = 2, and x2 = 5.
Return an array of booleans answer where answer[i] is true if xi is divisible by 5.

 

Example 1:

Input: nums = [0,1,1]
Output: [true,false,false]
Explanation: The input numbers in binary are 0, 01, 011; which are 0, 1, and 3 in base-10.
Only the first number is divisible by 5, so answer[0] is true.
Example 2:

Input: nums = [1,1,1]
Output: [false,false,false]
 

Constraints:

1 <= nums.length <= 105
nums[i] is either 0 or 1.

class Solution
{
public:
    vector<bool> prefixesDivBy5(vector<int> &A)
    {
        int n = A.size();
        vector<bool> res;
        res.reserve(n);
        int cur = 0;
        for (int i = 0; i < n; ++i)
        {
            cur = (cur * 2 + A[i]) % 5;
            res.push_back(cur == 0);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/next-greater-node-in-linked-list/

You are given the head of a linked list with n nodes.

For each node in the list, find the value of the next greater node. That is, for each node, find the value of the first node that is next to it and has a strictly larger value than it.

Return an integer array answer where answer[i] is the value of the next greater node of the ith node (1-indexed). If the ith node does not have a next greater node, set answer[i] = 0.

 

Example 1:


Input: head = [2,1,5]
Output: [5,5,0]
Example 2:


Input: head = [2,7,4,3,5]
Output: [7,0,5,5,0]
 

Constraints:

The number of nodes in the list is n.
1 <= n <= 104
1 <= Node.val <= 109

class Solution
{
public:
    vector<int> nextLargerNodes(ListNode *head)
    {
        vector<int> nums;
        nums.reserve(10000);
        for (ListNode *node = head; node != nullptr; node = node->next) nums.push_back(node->val);
        int n = nums.size();
        vector<int> res(n);
        stack<int> st;
        for (int i = 0; i < n; ++i)
        {
            while (!st.empty() && nums[i] > nums[st.top()])
            {
                res[st.top()] = nums[i];
                st.pop();
            }
            st.push(i);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/number-of-enclaves/

You are given an m x n binary matrix grid, where 0 represents a sea cell and 1 represents a land cell.

A move consists of walking from one land cell to another adjacent (4-directionally) land cell or walking off the boundary of the grid.

Return the number of land cells in grid for which we cannot walk off the boundary of the grid in any number of moves.

 

Example 1:


Input: grid = [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]
Output: 3
Explanation: There are three 1s that are enclosed by 0s, and one 1 that is not enclosed because its on the boundary.
Example 2:


Input: grid = [[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]]
Output: 0
Explanation: All 1s are either on the boundary or can reach the boundary.
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 500
grid[i][j] is either 0 or 1.

class Solution
{
public:
    int m, n;

    int numEnclaves(vector<vector<int>> &A)
    {
        m = A.size();
        n = A[0].size();
        for (int i = 0; i < m; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                if (A[i][j] == 1)
                {
                    if (i * j == 0 || i == m - 1 || j == n - 1) helper(A, i, j);
                }
            }
        }
        int res = 0;
        for (int i = 0; i < m; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                if (A[i][j] == 1) ++res;
            }
        }
        return res;
    }
    void helper(vector<vector<int>> &A, int i, int j)
    {
        if (i < 0 || i >= m || j < 0 || j >= n || A[i][j] != 1) return;
        A[i][j] = 0;
        helper(A, i + 1, j);
        helper(A, i - 1, j);
        helper(A, i, j + 1);
        helper(A, i, j - 1);
    }
};


// Source https://leetcode.com/problems/remove-outermost-parentheses/

A valid parentheses string is either empty "", "(" + A + ")", or A + B, where A and B are valid parentheses strings, and + represents string concatenation.

For example, "", "()", "(())()", and "(()(()))" are all valid parentheses strings.
A valid parentheses string s is primitive if it is nonempty, and there does not exist a way to split it into s = A + B, with A and B nonempty valid parentheses strings.

Given a valid parentheses string s, consider its primitive decomposition: s = P1 + P2 + ... + Pk, where Pi are primitive valid parentheses strings.

Return s after removing the outermost parentheses of every primitive string in the primitive decomposition of s.

 

Example 1:

Input: s = "(()())(())"
Output: "()()()"
Explanation: 
The input string is "(()())(())", with primitive decomposition "(()())" + "(())".
After removing outer parentheses of each part, this is "()()" + "()" = "()()()".
Example 2:

Input: s = "(()())(())(()(()))"
Output: "()()()()(())"
Explanation: 
The input string is "(()())(())(()(()))", with primitive decomposition "(()())" + "(())" + "(()(()))".
After removing outer parentheses of each part, this is "()()" + "()" + "()(())" = "()()()()(())".
Example 3:

Input: s = "()()"
Output: ""
Explanation: 
The input string is "()()", with primitive decomposition "()" + "()".
After removing outer parentheses of each part, this is "" + "" = "".
 

Constraints:

1 <= s.length <= 105
s[i] is either '(' or ')'.
s is a valid parentheses string.

class Solution
{
public:
    string removeOuterParentheses(string S)
    {
        int n = S.length();
        string res;
        int i = 0;
        while (i < n)
        {
            int j = i;
            int cnt = 0;
            for (; j < n; ++j)
            {
                if (S[j] == '(') ++cnt;
                else --cnt;
                if (cnt == 0) break;
            }
            res.append(S.substr(i + 1, j - i - 1));
            i = j + 1;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/sum-of-root-to-leaf-binary-numbers/

You are given the root of a binary tree where each node has a value 0 or 1. Each root-to-leaf path represents a binary number starting with the most significant bit.

For example, if the path is 0 -> 1 -> 1 -> 0 -> 1, then this could represent 01101 in binary, which is 13.
For all leaves in the tree, consider the numbers represented by the path from the root to that leaf. Return the sum of these numbers.

The test cases are generated so that the answer fits in a 32-bits integer.

 

Example 1:


Input: root = [1,0,1,0,1,0,1]
Output: 22
Explanation: (100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22
Example 2:

Input: root = [0]
Output: 0
 

Constraints:

The number of nodes in the tree is in the range [1, 1000].
Node.val is 0 or 1.

class Solution
{
public:
    int res;

    int sumRootToLeaf(TreeNode *root)
    {
        res = 0;
        helper(root, 0);
        return res;
    }
    void helper(TreeNode *node, int cur)
    {
        if (!node) return;
        cur = cur * 2 + node->val;
        if (node->left == nullptr && node->right == nullptr) res += cur;
        helper(node->left, cur);
        helper(node->right, cur);
    }
};


// Source https://leetcode.com/problems/camelcase-matching/

Given an array of strings queries and a string pattern, return a boolean array answer where answer[i] is true if queries[i] matches pattern, and false otherwise.

A query word queries[i] matches pattern if you can insert lowercase English letters pattern so that it equals the query. 
You may insert each character at any position and you may not insert any characters.

 

Example 1:

Input: queries = ["FooBar","FooBarTest","FootBall","FrameBuffer","ForceFeedBack"], pattern = "FB"
Output: [true,false,true,true,false]
Explanation: "FooBar" can be generated like this "F" + "oo" + "B" + "ar".
"FootBall" can be generated like this "F" + "oot" + "B" + "all".
"FrameBuffer" can be generated like this "F" + "rame" + "B" + "uffer".
Example 2:

Input: queries = ["FooBar","FooBarTest","FootBall","FrameBuffer","ForceFeedBack"], pattern = "FoBa"
Output: [true,false,true,false,false]
Explanation: "FooBar" can be generated like this "Fo" + "o" + "Ba" + "r".
"FootBall" can be generated like this "Fo" + "ot" + "Ba" + "ll".
Example 3:

Input: queries = ["FooBar","FooBarTest","FootBall","FrameBuffer","ForceFeedBack"], pattern = "FoBaT"
Output: [false,true,false,false,false]
Explanation: "FooBarTest" can be generated like this "Fo" + "o" + "Ba" + "r" + "T" + "est".
 

Constraints:

1 <= pattern.length, queries.length <= 100
1 <= queries[i].length <= 100
queries[i] and pattern consist of English letters.

class Solution
{
public:
    vector<bool> camelMatch(vector<string> &queries, string pattern)
    {
        vector<bool> res;
        int n = pattern.length();
        for (string &query : queries)
        {
            int m = query.length();
            int i = 0, j = 0;
            while (j < m)
            {
                if (i < n && query[j] == pattern[i])
                {
                    ++i;
                    ++j;
                    continue;
                }
                if (isupper(query[j]))
                {
                    break;
                }
                ++j;
            }
            res.push_back(j == m && i == n);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/video-stitching/

You are given a series of video clips from a sporting event that lasted time seconds. These video clips can be overlapping with each other and have varying lengths.

Each video clip is described by an array clips where clips[i] = [starti, endi] indicates that the ith clip started at starti and ended at endi.

We can cut these clips into segments freely.

For example, a clip [0, 7] can be cut into segments [0, 1] + [1, 3] + [3, 7].
Return the minimum number of clips needed so that we can cut the clips into segments that cover the entire sporting event [0, time]. If the task is impossible, return -1.

 

Example 1:

Input: clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], time = 10
Output: 3
Explanation: We take the clips [0,2], [8,10], [1,9]; a total of 3 clips.
Then, we can reconstruct the sporting event as follows:
We cut [1,9] into segments [1,2] + [2,8] + [8,9].
Now we have segments [0,2] + [2,8] + [8,10] which cover the sporting event [0, 10].
Example 2:

Input: clips = [[0,1],[1,2]], time = 5
Output: -1
Explanation: We cannot cover [0,5] with only [0,1] and [1,2].
Example 3:

Input: clips = [[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]], time = 9
Output: 3
Explanation: We can take clips [0,4], [4,7], and [6,9].
 

Constraints:

1 <= clips.length <= 100
0 <= starti <= endi <= 100
1 <= time <= 100

class Solution
{
public:
    int n;
    long long int dp[105][105];

    long long int recur(long long int i, vector<vector<int>> &clips, long long int end, long long int time)
    {
        if(end >= time) return 0;
        if(i == n) return INT_MAX;
        if(clips[i][0] > end) return INT_MAX;
        if(dp[i][end] != -1) return dp[i][end];
        long long int take = recur(i + 1, clips, max(end, (long long int)clips[i][1]), time) + 1;
        long long int not_take = recur(i + 1, clips, end, time);
        return dp[i][end] = min(take, not_take);
    }

    int videoStitching(vector<vector<int>> &clips, int time)
    {
        sort(clips.begin(), clips.end());
        if (clips[0][0] > 0) return -1;
        n = clips.size();
        memset(dp, -1, sizeof(dp));
        long long int ans = recur(0, clips, 0, time);
        if(ans == INT_MAX) return -1;
        return ans;
    }
};


// Source https://leetcode.com/problems/divisor-game/

Alice and Bob take turns playing a game, with Alice starting first.

Initially, there is a number n on the chalkboard. On each player's turn, that player makes a move consisting of:

Choosing any x with 0 < x < n and n % x == 0.
Replacing the number n on the chalkboard with n - x.
Also, if a player cannot make a move, they lose the game.

Return true if and only if Alice wins the game, assuming both players play optimally.

 

Example 1:

Input: n = 2
Output: true
Explanation: Alice chooses 1, and Bob has no more moves.
Example 2:

Input: n = 3
Output: false
Explanation: Alice chooses 1, Bob chooses 1, and Alice has no more moves.
 

Constraints:

1 <= n <= 1000

当N==1时，没法找到小于N的因子，因此输掉游戏
dp[i] 表示起始数字为i时Alice或Bob是否会赢

class Solution
{
public:
    bool divisorGame(int N)
    {
        vector<bool> dp(N + 1);
        for (int i = 2; i <= N; ++i)
        {
            for (int j = 1; j < i; ++j)
            {
                if (i % j != 0) continue;
                if (!dp[i - j])
                {
                    dp[i] = true;
                    break;
                }
            }
        }
        return dp[N];
    }
};

当拿到1的时候，输了
当拿到2的时候，赢了，因为取1作为因子，然后把剩下的1丢给对手
当N>2 且 N 为奇数，小于N的因子x一定也是个奇数，则留给对手的 N-x 一定是个偶数
当N>2 且 N 为偶数，我们可以取1，然后变成一个奇数丢给对手
所以拿到偶数的人，将奇数丢给对手后，下一轮自己还会拿到偶数，这样当N不断减小后，最终一定会拿到2，所以会赢

class Solution
{
public:
    bool divisorGame(int N)
    {
        return N % 2 == 0;
    }
};


// Source https://leetcode.com/problems/maximum-difference-between-node-and-ancestor/

Given the root of a binary tree, find the maximum value v for which there exist different nodes a and b where v = |a.val - b.val| and a is an ancestor of b.

A node a is an ancestor of b if either: any child of a is equal to b or any child of a is an ancestor of b.

 

Example 1:


Input: root = [8,3,10,1,6,null,14,null,null,4,7,13]
Output: 7
Explanation: We have various ancestor-node differences, some of which are given below :
|8 - 3| = 5
|3 - 7| = 4
|8 - 1| = 7
|10 - 13| = 3
Among all possible differences, the maximum value of 7 is obtained by |8 - 1| = 7.
Example 2:


Input: root = [1,null,2,null,0,3]
Output: 3
 

Constraints:

The number of nodes in the tree is in the range [2, 5000].
0 <= Node.val <= 105

class Solution
{
public:
    int maxAncestorDiff(TreeNode *root)
    {
        int res = 0;
        helper(root->left, root->val, root->val, res);
        helper(root->right, root->val, root->val, res);
        return res;
    }
    void helper(TreeNode *node, int mn, int mx, int &res)
    {
        if (!node) return;
        res = max(res, abs(node->val - mn));
        res = max(res, abs(mx - node->val));
        mn = min(mn, node->val);
        mx = max(mx, node->val);
        helper(node->left, mn, mx, res);
        helper(node->right, mn, mx, res);
    }
};


// Source https://leetcode.com/problems/longest-arithmetic-subsequence/

Given an array nums of integers, return the length of the longest arithmetic subsequence in nums.

Recall that a subsequence of an array nums is a list nums[i1], nums[i2], ..., nums[ik] with 0 <= i1 < i2 < ... < ik <= nums.length - 1, 
and that a sequence seq is arithmetic if seq[i+1] - seq[i] are all the same value (for 0 <= i < seq.length - 1).

 

Example 1:

Input: nums = [3,6,9,12]
Output: 4
Explanation: 
The whole array is an arithmetic sequence with steps of length = 3.
Example 2:

Input: nums = [9,4,7,2,10]
Output: 3
Explanation: 
The longest arithmetic subsequence is [4,7,10].
Example 3:

Input: nums = [20,1,15,3,10,5,8]
Output: 4
Explanation: 
The longest arithmetic subsequence is [20,15,10,5].
 

Constraints:

2 <= nums.length <= 1000
0 <= nums[i] <= 500

class Solution
{
public:
    int dp[1005][1005];

    int longestArithSeqLength(vector<int> &A)
    {
        int res = 0, n = A.size();
        memset(dp, 0, sizeof(dp));
        for (int i = 0; i < n; ++i)
        {
            for (int j = 0; j < i; ++j)
            {
                int diff = A[i] - A[j] + 500;
                dp[i][diff] = dp[j][diff] + 1;
                res = max(res, dp[i][diff]);
            }
        }
        return res + 1;
    }
};


// Source https://leetcode.com/problems/recover-a-tree-from-preorder-traversal/

We run a preorder depth-first search (DFS) on the root of a binary tree.

At each node in this traversal, we output D dashes (where D is the depth of this node), then we output the value of this node.  
If the depth of a node is D, the depth of its immediate child is D + 1.  The depth of the root node is 0.

If a node has only one child, that child is guaranteed to be the left child.

Given the output traversal of this traversal, recover the tree and return its root.

 

Example 1:


Input: traversal = "1-2--3--4-5--6--7"
Output: [1,2,5,3,4,6,7]
Example 2:


Input: traversal = "1-2--3---4-5--6---7"
Output: [1,2,5,3,null,6,null,4,null,7]
Example 3:


Input: traversal = "1-401--349---90--88"
Output: [1,401,null,349,88,90]
 

Constraints:

The number of nodes in the original tree is in the range [1, 1000].
1 <= Node.val <= 109

class Solution
{
public:
    TreeNode *recoverFromPreorder(string S)
    {
        vector<TreeNode *> st;
        int i = 0, n = S.length();
        while (i < n)
        {
            int level = 0;
            for (; i < n && S[i] == '-'; ++i)
            {
                ++level;
            }
            int val = 0;
            for (; i < n && S[i] != '-'; ++i)
            {
                val = 10 * val + (S[i] - '0');
            }
            TreeNode *node = new TreeNode(val);
            while (st.size() > level) st.pop_back();
            if (!st.empty())
            {
                if (!st.back()->left) st.back()->left = node;
                else st.back()->right = node;
            }
            st.push_back(node);
        }
        return st[0];
    }
};


// Source https://leetcode.com/problems/two-city-scheduling/

A company is planning to interview 2n people. Given the array costs where costs[i] = [aCosti, bCosti], the cost of flying the ith person to city a is aCosti, 
and the cost of flying the ith person to city b is bCosti.

Return the minimum cost to fly every person to a city such that exactly n people arrive in each city.

 

Example 1:

Input: costs = [[10,20],[30,200],[400,50],[30,20]]
Output: 110
Explanation: 
The first person goes to city A for a cost of 10.
The second person goes to city A for a cost of 30.
The third person goes to city B for a cost of 50.
The fourth person goes to city B for a cost of 20.

The total minimum cost is 10 + 30 + 50 + 20 = 110 to have half the people interviewing in each city.
Example 2:

Input: costs = [[259,770],[448,54],[926,667],[184,139],[840,118],[577,469]]
Output: 1859
Example 3:

Input: costs = [[515,563],[451,713],[537,709],[343,819],[855,779],[457,60],[650,359],[631,42]]
Output: 3086
 

Constraints:

2 * n == costs.length
2 <= costs.length <= 100
costs.length is even.
1 <= aCosti, bCosti <= 1000

开始时遍历一遍 costs 数组，将去城市A的花费先累加到结果 res 中，然后将去城市B的花费减去城市A的花费的差值存入 refund 数组，之后给 refund 数组排序，取出前n个值加到结果 res 中即可

class Solution
{
public:
    int twoCitySchedCost(vector<vector<int>> &costs)
    {
        int res = 0, n = costs.size() / 2;
        vector<int> refund;
        for (auto &cost : costs)
        {
            res += cost[0];
            refund.push_back(cost[1] - cost[0]);
        }
        sort(refund.begin(), refund.end());
        for (int i = 0; i < n; ++i)
        {
            res += refund[i];
        }
        return res;
    }
};


// Source https://leetcode.com/problems/matrix-cells-in-distance-order/

You are given four integers row, cols, rCenter, and cCenter. There is a rows x cols matrix and you are on the cell with the coordinates (rCenter, cCenter).

Return the coordinates of all cells in the matrix, sorted by their distance from (rCenter, cCenter) from the smallest distance to the largest distance. 
You may return the answer in any order that satisfies this condition.

The distance between two cells (r1, c1) and (r2, c2) is |r1 - r2| + |c1 - c2|.

 

Example 1:

Input: rows = 1, cols = 2, rCenter = 0, cCenter = 0
Output: [[0,0],[0,1]]
Explanation: The distances from (0, 0) to other cells are: [0,1]
Example 2:

Input: rows = 2, cols = 2, rCenter = 0, cCenter = 1
Output: [[0,1],[0,0],[1,1],[1,0]]
Explanation: The distances from (0, 1) to other cells are: [0,1,1,2]
The answer [[0,1],[1,1],[0,0],[1,0]] would also be accepted as correct.
Example 3:

Input: rows = 2, cols = 3, rCenter = 1, cCenter = 2
Output: [[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]]
Explanation: The distances from (1, 2) to other cells are: [0,1,1,2,2,3]
There are other answers that would also be accepted as correct, such as [[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]].
 

Constraints:

1 <= rows, cols <= 100
0 <= rCenter < rows
0 <= cCenter < cols

class Solution
{
public:
    vector<vector<int>> allCellsDistOrder(int R, int C, int r0, int c0)
    {
        vector<vector<int>> res;
        vector<vector<int>> dirs{{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
        unordered_set<int> visited;
        queue<pair<int, int>> q;
        q.push({r0, c0});
        visited.insert(r0 * C + c0);
        while (!q.empty())
        {
            auto t = q.front();
            q.pop();
            res.push_back({t.first, t.second});
            for (auto &dir : dirs)
            {
                int x = t.first + dir[0], y = t.second + dir[1];
                if (x < 0 || x >= R || y < 0 || y >= C || visited.count(x * C + y)) continue;
                q.push({x, y});
                visited.insert(x * C + y);
            }
        }
        return res;
    }
};

// Source https://leetcode.com/problems/maximum-sum-of-two-non-overlapping-subarrays/

Given an integer array nums and two integers firstLen and secondLen, return the maximum sum of elements in two non-overlapping subarrays with lengths firstLen and secondLen.

The array with length firstLen could occur before or after the array with length secondLen, but they have to be non-overlapping.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [0,6,5,2,2,5,1,9,4], firstLen = 1, secondLen = 2
Output: 20
Explanation: One choice of subarrays is [9] with length 1, and [6,5] with length 2.
Example 2:

Input: nums = [3,8,1,3,2,1,8,9,0], firstLen = 3, secondLen = 2
Output: 29
Explanation: One choice of subarrays is [3,8,1] with length 3, and [8,9] with length 2.
Example 3:

Input: nums = [2,1,5,6,0,9,5,0,3,8], firstLen = 4, secondLen = 3
Output: 31
Explanation: One choice of subarrays is [5,6,0,9] with length 4, and [0,3,8] with length 3.
 

Constraints:

1 <= firstLen, secondLen <= 1000
2 <= firstLen + secondLen <= 1000
firstLen + secondLen <= nums.length <= 1000
0 <= nums[i] <= 1000

class Solution
{
public:
    int maxSumTwoNoOverlap(vector<int> &A, int L, int M)
    {
        int n = A.size();
        for (int i = 1; i < n; ++i)
        {
            A[i] += A[i - 1];
        }
        vector<int> leftMaxL(n);
        int mx = A[L - 1];
        for (int i = L; i < n; ++i)
        {
            mx = max(mx, A[i] - A[i - L]);
            leftMaxL[i] = mx;
        }
        vector<int> leftMaxM(n);
        mx = A[M - 1];
        for (int i = M; i < n; ++i)
        {
            mx = max(mx, A[i] - A[i - M]);
            leftMaxM[i] = mx;
        }

        int res = A[L + M - 1];
        for (int i = L + M; i < n; ++i)
        {
            res = max(res, leftMaxL[i - M] + A[i] - A[i - M]);
            res = max(res, leftMaxM[i - L] + A[i] - A[i - L]);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/stream-of-characters/

Design an algorithm that accepts a stream of characters and checks if a suffix of these characters is a string of a given array of strings words.

For example, if words = ["abc", "xyz"] and the stream added the four characters (one by one) 'a', 'x', 'y', and 'z', 
your algorithm should detect that the suffix "xyz" of the characters "axyz" matches "xyz" from words.

Implement the StreamChecker class:

StreamChecker(String[] words) Initializes the object with the strings array words.
boolean query(char letter) Accepts a new character from the stream and returns true if any non-empty suffix from the stream forms a word that is in words.
 

Example 1:

Input
["StreamChecker", "query", "query", "query", "query", "query", "query", "query", "query", "query", "query", "query", "query"]
[[["cd", "f", "kl"]], ["a"], ["b"], ["c"], ["d"], ["e"], ["f"], ["g"], ["h"], ["i"], ["j"], ["k"], ["l"]]
Output
[null, false, false, false, true, false, true, false, false, false, false, false, true]

Explanation
StreamChecker streamChecker = new StreamChecker(["cd", "f", "kl"]);
streamChecker.query("a"); // return False
streamChecker.query("b"); // return False
streamChecker.query("c"); // return False
streamChecker.query("d"); // return True, because 'cd' is in the wordlist
streamChecker.query("e"); // return False
streamChecker.query("f"); // return True, because 'f' is in the wordlist
streamChecker.query("g"); // return False
streamChecker.query("h"); // return False
streamChecker.query("i"); // return False
streamChecker.query("j"); // return False
streamChecker.query("k"); // return False
streamChecker.query("l"); // return True, because 'kl' is in the wordlist
 

Constraints:

1 <= words.length <= 2000
1 <= words[i].length <= 2000
words[i] consists of lowercase English letters.
letter is a lowercase English letter.
At most 4 * 104 calls will be made to query.

class StreamChecker
{
public:
    struct TrieNode
    {
        TrieNode *children[26];
        bool isWord;

        TrieNode()
        {
            for (int i = 0; i < 26; ++i)
            {
                children[i] = NULL;
            }
            isWord = false;
        }
    };

    TrieNode *root;
    string queryStr;

    StreamChecker(vector<string> &words)
    {
        root = new TrieNode();
        for (string &word : words)
        {
            TrieNode *node = root;
            int n = word.length();
            for (int i = n - 1; i >= 0; --i)
            {
                if (!node->children[word[i] - 'a'])
                {
                    node->children[word[i] - 'a'] = new TrieNode();
                }
                node = node->children[word[i] - 'a'];
            }
            node->isWord = true;
        }
    }

    bool query(char letter)
    {
        queryStr.push_back(letter);
        TrieNode *node = root;
        int n = queryStr.length();
        for (int i = n - 1; i >= 0; --i)
        {
            if (!node->children[queryStr[i] - 'a']) return false;
            node = node->children[queryStr[i] - 'a'];
            if (node->isWord) return true;
        }
        return false;
    }
};


// Source https://leetcode.com/problems/moving-stones-until-consecutive/

There are three stones in different positions on the X-axis. You are given three integers a, b, and c, the positions of the stones.

In one move, you pick up a stone at an endpoint (i.e., either the lowest or highest position stone), and move it to an unoccupied position between those endpoints. 
Formally, let's say the stones are currently at positions x, y, and z with x < y < z. You pick up the stone at either position x or position z, 
and move that stone to an integer position k, with x < k < z and k != y.

The game ends when you cannot make any more moves (i.e., the stones are in three consecutive positions).

Return an integer array answer of length 2 where:

answer[0] is the minimum number of moves you can play, and
answer[1] is the maximum number of moves you can play.
 

Example 1:

Input: a = 1, b = 2, c = 5
Output: [1,2]
Explanation: Move the stone from 5 to 3, or move the stone from 5 to 4 to 3.
Example 2:

Input: a = 4, b = 3, c = 2
Output: [0,0]
Explanation: We cannot make any moves.
Example 3:

Input: a = 3, b = 5, c = 1
Output: [1,2]
Explanation: Move the stone from 1 to 4; or move the stone from 1 to 2 to 4.
 

Constraints:

1 <= a, b, c <= 100
a, b, and c have different values.

最大移动次数，其实就是三个石头的中间空位的个数，可以直接计算得出。再来看最小移动次数，其只能是 0，1，2 这三个值中的一个
最好的情况就是三个已经相连了，不需要移动。最坏的情况就是三个都离得很远，但是可以用两次移动分别将最大和最小位置的石头移动到中间的石头的两边，从而使它们相邻。
若某两个石头中间只有一个位置，那么可以直接把第三个石头移动到这个中间位置，直接就相连了

class Solution
{
public:
    vector<int> numMovesStones(int a, int b, int c)
    {
        vector<int> nums{a, b, c};
        sort(nums.begin(), nums.end());
        int diff1 = nums[2] - nums[1], diff2 = nums[1] - nums[0];
        if (diff1 == 1 && diff2 == 1) return {0, nums[2] - nums[0] - 2};
        if (diff1 == 1 || diff2 == 1) return {1, nums[2] - nums[0] - 2};
        if (diff1 == 2 || diff2 == 2) return {1, nums[2] - nums[0] - 2};
        return {2, nums[2] - nums[0] - 2};
    }
};


// Source https://leetcode.com/problems/coloring-a-border/

You are given an m x n integer matrix grid, and three integers row, col, and color. Each value in the grid represents the color of the grid square at that location.

Two squares belong to the same connected component if they have the same color and are next to each other in any of the 4 directions.

The border of a connected component is all the squares in the connected component that are either 4-directionally adjacent to a square not in the component, 
or on the boundary of the grid (the first or last row or column).

You should color the border of the connected component that contains the square grid[row][col] with color.

Return the final grid.

 

Example 1:

Input: grid = [[1,1],[1,2]], row = 0, col = 0, color = 3
Output: [[3,3],[3,2]]
Example 2:

Input: grid = [[1,2,2],[2,3,2]], row = 0, col = 1, color = 3
Output: [[1,3,3],[2,3,3]]
Example 3:

Input: grid = [[1,1,1],[1,1,1],[1,1,1]], row = 1, col = 1, color = 2
Output: [[2,2,2],[2,1,2],[2,2,2]]
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 50
1 <= grid[i][j], color <= 1000
0 <= row < m
0 <= col < n

class Solution
{
public:
    vector<vector<int>> colorBorder(vector<vector<int>> &grid, int r0, int c0, int color)
    {
        if (grid[r0][c0] == color) return grid;
        int m = grid.size(), n = grid[0].size(), oldColor = grid[r0][c0];
        vector<vector<int>> dirs{{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
        unordered_set<int> visited;
        queue<pair<int, int>> q;
        q.push({r0, c0});
        visited.insert(r0 * n + c0);
        while (!q.empty())
        {
            auto t = q.front();
            q.pop();
            if (t.first == 0 || t.first == m - 1 || t.second == 0 || t.second == n - 1) grid[t.first][t.second] = color;
            for (auto &dir : dirs)
            {
                int x = t.first + dir[0], y = t.second + dir[1];
                if (x < 0 || x >= m || y < 0 || y >= n || visited.count(x * n + y)) continue;
                if (grid[x][y] == oldColor)
                {
                    q.push({x, y});
                    visited.insert(x * n + y);
                }
                else
                {
                    grid[t.first][t.second] = color;
                }
            }
        }
        return grid;
    }
};


// Source https://leetcode.com/problems/uncrossed-lines/

You are given two integer arrays nums1 and nums2. We write the integers of nums1 and nums2 (in the order they are given) on two separate horizontal lines.

We may draw connecting lines: a straight line connecting two numbers nums1[i] and nums2[j] such that:

nums1[i] == nums2[j], and
the line we draw does not intersect any other connecting (non-horizontal) line.
Note that a connecting line cannot intersect even at the endpoints (i.e., each number can only belong to one connecting line).

Return the maximum number of connecting lines we can draw in this way.

 

Example 1:


Input: nums1 = [1,4,2], nums2 = [1,2,4]
Output: 2
Explanation: We can draw 2 uncrossed lines as in the diagram.
We cannot draw 3 uncrossed lines, because the line from nums1[1] = 4 to nums2[2] = 4 will intersect the line from nums1[2]=2 to nums2[1]=2.
Example 2:

Input: nums1 = [2,5,1,2,5], nums2 = [10,5,2,1,5,2]
Output: 3
Example 3:

Input: nums1 = [1,3,7,1,7,5], nums2 = [1,9,2,5,1]
Output: 2
 

Constraints:

1 <= nums1.length, nums2.length <= 500
1 <= nums1[i], nums2[j] <= 2000

class Solution
{
public:
    int maxUncrossedLines(vector<int> &A, vector<int> &B)
    {
        int m = A.size(), n = B.size();
        vector<vector<int>> dp(m + 1, vector<int>(n + 1));
        for (int i = 1; i <= m; ++i)
        {
            for (int j = 1; j <= n; ++j)
            {
                if (A[i - 1] == B[j - 1])
                {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                }
                else
                {
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }
        return dp[m][n];
    }
};


// Source https://leetcode.com/problems/escape-a-large-maze/

There is a 1 million by 1 million grid on an XY-plane, and the coordinates of each grid square are (x, y).

We start at the source = [sx, sy] square and want to reach the target = [tx, ty] square. There is also an array of blocked squares, 
where each blocked[i] = [xi, yi] represents a blocked square with coordinates (xi, yi).

Each move, we can walk one square north, east, south, or west if the square is not in the array of blocked squares. We are also not allowed to walk outside of the grid.

Return true if and only if it is possible to reach the target square from the source square through a sequence of valid moves.

 

Example 1:

Input: blocked = [[0,1],[1,0]], source = [0,0], target = [0,2]
Output: false
Explanation: The target square is inaccessible starting from the source square because we cannot move.
We cannot move north or east because those squares are blocked.
We cannot move south or west because we cannot go outside of the grid.
Example 2:

Input: blocked = [], source = [0,0], target = [999999,999999]
Output: true
Explanation: Because there are no blocked cells, it is possible to reach the target square.
 

Constraints:

0 <= blocked.length <= 200
blocked[i].length == 2
0 <= xi, yi < 106
source.length == target.length == 2
0 <= sx, sy, tx, ty < 106
source != target
It is guaranteed that source and target are not blocked.

题目中限定了黑名单的大小不超过 200，那么来思考用 200 个点能多能封闭多大的空间，如下所示：

0th      _________________________
         |O O O O O O O X
         |O O O O O O X
         |O O O O O X
         |O O O O X
         .O O O X
         .O O X
         .O X
200th    |X

200 * 200 - 200 = 39800
39800 / 2 = 19900
最多能封闭 19900 个点，那么就是说若当前能够遍历到 20000 个点，则说明很大机会可以到达终点。当然极端情况下，终点可能被四个黑名单的上的点犹如围棋围杀般的包围着，
所以说还需要反着遍历一般，从终点遍历点，若能在 20000 步内到达，或者达到了 20000 步，都返回 true，否则返回 false。

class Solution
{
public:
    bool isEscapePossible(vector<vector<int>> &blocked, vector<int> &source, vector<int> &target)
    {
        unordered_set<long> visited;
        for (auto &a : blocked) visited.insert(a[0] * 1e6 + a[1]);
        return helper(visited, source, target) && helper(visited, target, source);
    }
    bool helper(unordered_set<long> visited, vector<int> &source, vector<int> &target)
    {
        int N = 1e6, cnt = 0;
        vector<vector<int>> dirs{{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
        queue<pair<int, int>> q;
        q.push({source[0], source[1]});
        visited.insert((long)source[0] * N + source[1]);
        while (!q.empty())
        {
            auto t = q.front();
            q.pop();
            if (t.first == target[0] && t.second == target[1]) return true;
            for (auto &dir : dirs)
            {
                int x = t.first + dir[0], y = t.second + dir[1];
                if (x < 0 || x >= N || y < 0 || y >= N || visited.count((long)x * N + y)) continue;
                q.push({x, y});
                visited.insert((long)x * N + y);
                if (++cnt == 20000) return true;
            }
        }
        return false;
    }
};


// Source https://leetcode.com/problems/valid-boomerang/

Given an array points where points[i] = [xi, yi] represents a point on the X-Y plane, return true if these points are a boomerang.

A boomerang is a set of three points that are all distinct and not in a straight line.

 

Example 1:

Input: points = [[1,1],[2,3],[3,2]]
Output: true
Example 2:

Input: points = [[1,1],[2,2],[3,3]]
Output: false
 

Constraints:

points.length == 3
points[i].length == 2
0 <= xi, yi <= 100

(y2 - y0) / (x2 - x0) != (y1 - y0) / (x1 - x0)
(y2 - y0) * (x1 - x0) != (y1 - y0) * (x2 - x0)

class Solution
{
public:
    bool isBoomerang(vector<vector<int>> &points)
    {
        return (points[2][1] - points[0][1]) * (points[1][0] - points[0][0]) != (points[1][1] - points[0][1]) * (points[2][0] - points[0][0]);
    }
};


// Source https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/

Given the root of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST.

As a reminder, a binary search tree is a tree that satisfies these constraints:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
 

Example 1:


Input: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]
Output: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]
Example 2:

Input: root = [0,null,1]
Output: [1,null,1]
 

Constraints:

The number of nodes in the tree is in the range [1, 100].
0 <= Node.val <= 100
All the values in the tree are unique.

class Solution
{
public:
    TreeNode *bstToGst(TreeNode *root)
    {
        int cur = 0;
        helper(root, cur);
        return root;
    }
    void helper(TreeNode *node, int &cur)
    {
        if (!node) return;
        helper(node->right, cur);
        node->val += cur;
        cur = node->val;
        helper(node->left, cur);
    }
};


// Source https://leetcode.com/problems/minimum-score-triangulation-of-polygon/

You have a convex n-sided polygon where each vertex has an integer value. You are given an integer array values where values[i] is the value of the ith vertex (i.e., clockwise order).

You will triangulate the polygon into n - 2 triangles. For each triangle, the value of that triangle is the product of the values of its vertices, 
and the total score of the triangulation is the sum of these values over all n - 2 triangles in the triangulation.

Return the smallest possible total score that you can achieve with some triangulation of the polygon.

 

Example 1:


Input: values = [1,2,3]
Output: 6
Explanation: The polygon is already triangulated, and the score of the only triangle is 6.
Example 2:


Input: values = [3,7,4,5]
Output: 144
Explanation: There are two triangulations, with possible scores: 3*7*5 + 4*5*7 = 245, or 3*4*5 + 3*4*7 = 144.
The minimum score is 144.
Example 3:


Input: values = [1,3,1,4,1,5]
Output: 13
Explanation: The minimum score triangulation has score 1*1*3 + 1*1*4 + 1*1*5 + 1*1*1 = 13.
 

Constraints:

n == values.length
3 <= n <= 50
1 <= values[i] <= 100

class Solution
{
public:
    int n;
    int dp[55][55];
    
    int solve(vector<int> &values, int l, int r)
    {
        if(r - l + 1 < 3) return 0;

        if(dp[l][r] != -1) return dp[l][r];

        int ans = 1e9;
        for(int n = l + 1; n < r; n++)
        {
            ans = min(ans, values[l] * values[r] * values[n] + solve(values, l, n) + solve(values, n, r));
        }

        return dp[l][r] = ans;
    }

    int minScoreTriangulation(vector<int> &values)
    {
        n = values.size();
        memset(dp, -1, sizeof(dp));
        return solve(values, 0, n - 1);
    }
};

// Source https://leetcode.com/problems/moving-stones-until-consecutive-ii/

There are some stones in different positions on the X-axis. You are given an integer array stones, the positions of the stones.

Call a stone an endpoint stone if it has the smallest or largest position. In one move, you pick up an endpoint stone and move it to an unoccupied position 
so that it is no longer an endpoint stone.

In particular, if the stones are at say, stones = [1,2,5], you cannot move the endpoint stone at position 5, 
since moving it to any position (such as 0, or 3) will still keep that stone as an endpoint stone.
The game ends when you cannot make any more moves (i.e., the stones are in three consecutive positions).

Return an integer array answer of length 2 where:

answer[0] is the minimum number of moves you can play, and
answer[1] is the maximum number of moves you can play.
 

Example 1:

Input: stones = [7,4,9]
Output: [1,2]
Explanation: We can move 4 -> 8 for one move to finish the game.
Or, we can move 9 -> 5, 4 -> 6 for two moves to finish the game.
Example 2:

Input: stones = [6,5,4,3,10]
Output: [2,3]
Explanation: We can move 3 -> 8 then 10 -> 7 to finish the game.
Or, we can move 3 -> 7, 4 -> 8, 5 -> 9 to finish the game.
Notice we cannot move 10 -> 2 to finish the game, because that would be an illegal move.
 

Constraints:

3 <= stones.length <= 104
1 <= stones[i] <= 109
All the values of stones are unique.

有n个石头，每次可以取最大位置或最小位置的石头，将其放到中间某个没有石头的位置，注意放的位置不能是新的顺序中的最大或最小的位置，当所有石头位置相连时游戏结束，问最小和最大的移动数分别是多少。
先给数组排个序，最大位置 stones[n-1] 和 最小位置 stones[0] 之间共有 stones[n-1] - stones[0] - n + 1 个空位。
注意，最小位置和第二小位置中间的空位是不能走的，最大位置和第二大位置中间的空位是不能走的
取最小的位置，把它移动到第二小位置后的第一个空位，然后再取当前最小的位置，把它移动到此时中间的第一个空位，以此类推，直到所有的石头都相连了为止。
最大位置 stones[n-1] 和 第二小位置 stones[1] 之间共有 stones[n-1] - stones[1] - n + 2 个空位。
第二大位置 stones[n-2] 和 最小位置 stones[0] 之间共有 stones[n-2] - stones[0] - n + 2 个空位。
最大的移动数 = max(stones[n-2] - stones[0] - n + 2, stones[n-1] - stones[1] - n + 2)
一个长度为n的滑动窗口，每次计算出当前滑动窗口中已经有的数字个数，那么总个数减去已经有的个数就是所有石头安排在当前滑动窗口对应的最小的移动数。

5个石头 a < b < c < d < e

a x x x b x x x c x x x d x x x e
                a b c d e
4次移动，先移动e，再移动d，再移动a，再移动b

a x x x b x c x x x d x x x e
           b a c d e
3次移动，先移动e，再移动d，再移动a

a x x x b x x c x x x d x x x e
           b a d c e
3次移动，先移动e，再移动d，再移动a

a x x x b x x x c x x x d x x x e
           b a d e c
3次移动，先移动e，再移动d，再移动a

a x x x b x c x d x x x x x e
           b a c e d
2次移动，先移动e，再移动a

a x x x b x c d x x x x x e
        e b a c d
2次移动，先移动e，再移动a

a x x x b c d x x x x x x e
      e a b c d
2次移动，先移动e，再移动a

a x x x b c x d e
          b c a d e
1次移动，移动a

a x x x b c d e
      e a b c d
2次移动，先移动e，再移动a

如果当前滑动窗口中已经有的数字个数 <= n - 2，要n - already_store次移动
如果当前滑动窗口中已经有的数字个数 = n - 1，且中间有空位，只要1次移动
如果当前滑动窗口中已经有的数字个数 = n - 1，且中间无空位，要2次移动
如果当前滑动窗口中已经有的数字个数 = n，不需要移动

class Solution
{
public:
    vector<int> numMovesStonesII(vector<int> &stones)
    {
        sort(stones.begin(), stones.end());
        int n = stones.size(), low = n;
        int i = 0, j = 0;
        while (j < n)
        {
            while (stones[j] - stones[i] + 1 > n) ++i;
            int already_store = j - i + 1;
            if (already_store == n - 1 && stones[j] - stones[i] + 1 == n - 1)
            {
                low = min(low, 2);
            }
            else
            {
                low = min(low, n - already_store);
            }
            ++j;
        }
        return {low, max(stones[n - 1] - stones[1] - n + 2, stones[n - 2] - stones[0] - n + 2)};
    }
};


// Source https://leetcode.com/problems/robot-bounded-in-circle/

On an infinite plane, a robot initially stands at (0, 0) and faces north. Note that:

The north direction is the positive direction of the y-axis.
The south direction is the negative direction of the y-axis.
The east direction is the positive direction of the x-axis.
The west direction is the negative direction of the x-axis.
The robot can receive one of three instructions:

"G": go straight 1 unit.
"L": turn 90 degrees to the left (i.e., anti-clockwise direction).
"R": turn 90 degrees to the right (i.e., clockwise direction).
The robot performs the instructions given in order, and repeats them forever.

Return true if and only if there exists a circle in the plane such that the robot never leaves the circle.

 

Example 1:

Input: instructions = "GGLLGG"
Output: true
Explanation: The robot is initially at (0, 0) facing the north direction.
"G": move one step. Position: (0, 1). Direction: North.
"G": move one step. Position: (0, 2). Direction: North.
"L": turn 90 degrees anti-clockwise. Position: (0, 2). Direction: West.
"L": turn 90 degrees anti-clockwise. Position: (0, 2). Direction: South.
"G": move one step. Position: (0, 1). Direction: South.
"G": move one step. Position: (0, 0). Direction: South.
Repeating the instructions, the robot goes into the cycle: (0, 0) --> (0, 1) --> (0, 2) --> (0, 1) --> (0, 0).
Based on that, we return true.
Example 2:

Input: instructions = "GG"
Output: false
Explanation: The robot is initially at (0, 0) facing the north direction.
"G": move one step. Position: (0, 1). Direction: North.
"G": move one step. Position: (0, 2). Direction: North.
Repeating the instructions, keeps advancing in the north direction and does not go into cycles.
Based on that, we return false.
Example 3:

Input: instructions = "GL"
Output: true
Explanation: The robot is initially at (0, 0) facing the north direction.
"G": move one step. Position: (0, 1). Direction: North.
"L": turn 90 degrees anti-clockwise. Position: (0, 1). Direction: West.
"G": move one step. Position: (-1, 1). Direction: West.
"L": turn 90 degrees anti-clockwise. Position: (-1, 1). Direction: South.
"G": move one step. Position: (-1, 0). Direction: South.
"L": turn 90 degrees anti-clockwise. Position: (-1, 0). Direction: East.
"G": move one step. Position: (0, 0). Direction: East.
"L": turn 90 degrees anti-clockwise. Position: (0, 0). Direction: North.
Repeating the instructions, the robot goes into the cycle: (0, 0) --> (0, 1) --> (-1, 1) --> (-1, 0) --> (0, 0).
Based on that, we return true.
 

Constraints:

1 <= instructions.length <= 100
instructions[i] is 'G', 'L' or, 'R'.

执行一遍所有指令之后，如果机器人还在原点上，则一定是在一个圆圈路径上，如果机器人偏离了起始位置，且此时机器人的朝向不是向北，则其最终一定会回到起点

class Solution
{
public:
    bool isRobotBounded(string instructions)
    {
        int idx = 0; // 0 north, 1 east, 2 south, 3 west.
        array<int, 2> cur{0, 0};
        vector<vector<int>> dirs{{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
        for (char c : instructions)
        {
            if (c == 'G')
            {
                cur = {cur[0] + dirs[idx][0], cur[1] + dirs[idx][1]};
            }
            else if (c == 'L')
            {
                idx = (idx - 1 + 4) % 4;
            }
            else
            {
                idx = (idx + 1) % 4;
            }
        }
        return (cur[0] == 0 && cur[1] == 0) || idx > 0;
    }
};


// Source https://leetcode.com/problems/flower-planting-with-no-adjacent/

You have n gardens, labeled from 1 to n, and an array paths where paths[i] = [xi, yi] describes a bidirectional path between garden xi to garden yi. 
In each garden, you want to plant one of 4 types of flowers.

All gardens have at most 3 paths coming into or leaving it.

Your task is to choose a flower type for each garden such that, for any two gardens connected by a path, they have different types of flowers.

Return any such a choice as an array answer, where answer[i] is the type of flower planted in the (i+1)th garden. The flower types are denoted 1, 2, 3, or 4. 
It is guaranteed an answer exists.

 

Example 1:

Input: n = 3, paths = [[1,2],[2,3],[3,1]]
Output: [1,2,3]
Explanation:
Gardens 1 and 2 have different types.
Gardens 2 and 3 have different types.
Gardens 3 and 1 have different types.
Hence, [1,2,3] is a valid answer. Other valid answers include [1,2,4], [1,4,2], and [3,2,1].
Example 2:

Input: n = 4, paths = [[1,2],[3,4]]
Output: [1,2,1,2]
Example 3:

Input: n = 4, paths = [[1,2],[2,3],[3,4],[4,1],[1,3],[2,4]]
Output: [1,2,3,4]
 

Constraints:

1 <= n <= 104
0 <= paths.length <= 2 * 104
paths[i].length == 2
1 <= xi, yi <= n
xi != yi
Every garden has at most 3 paths coming into or leaving it.

每个花园最多只能连通其他三个花园，而总共可有四种颜色可以选择，最坏情况就是相连的三个花园各自的颜色都不同，但总还是有一种颜色可以供当前的花园选择。

class Solution
{
public:
    vector<int> gardenNoAdj(int n, vector<vector<int>> &paths)
    {
        vector<int> res(n);
        vector<vector<int>> graph(n);
        for (auto &path : paths)
        {
            graph[path[0] - 1].push_back(path[1] - 1);
            graph[path[1] - 1].push_back(path[0] - 1);
        }
        for (int i = 0; i < n; ++i)
        {
            vector<bool> colors(5);
            for (int j : graph[i]) colors[res[j]] = true;
            // 从颜色4开始往前遍历，只要某种颜色没有被使用，就赋值给当前花园即可
            for (int c = 4; c > 0; --c)
            {
                if (!colors[c]) res[i] = c;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/partition-array-for-maximum-sum/

Given an integer array arr, partition the array into (contiguous) subarrays of length at most k. 
After partitioning, each subarray has their values changed to become the maximum value of that subarray.

Return the largest sum of the given array after partitioning. Test cases are generated so that the answer fits in a 32-bit integer.

 

Example 1:

Input: arr = [1,15,7,9,2,5,10], k = 3
Output: 84
Explanation: arr becomes [15,15,15,9,10,10,10]
Example 2:

Input: arr = [1,4,1,5,7,3,6,1,9,9,3], k = 4
Output: 83
Example 3:

Input: arr = [1], k = 1
Output: 1
 

Constraints:

1 <= arr.length <= 500
0 <= arr[i] <= 109
1 <= k <= arr.length

class Solution
{
public:
    int n;
    int dp[501];

    int helper(vector<int> &arr, int idx, int k)
    {
        if(idx >= n) return 0;
        if(dp[idx] != -1) return dp[idx];
        int res = INT_MIN;
        int currMax = INT_MIN;
        for (int j = idx; j < n && j < idx + k ; ++j)
        {
            currMax = max(currMax, arr[j]);
            res = max(res, currMax * (j - idx + 1) + helper(arr, j + 1, k));
        }
        return dp[idx] = res;
    }

    int maxSumAfterPartitioning(vector<int> &arr, int k)
    {
        n = arr.size();
        memset(dp, -1, sizeof(dp));
        return helper(arr, 0, k);
    }
};


// Source https://leetcode.com/problems/longest-duplicate-substring/

Given a string s, consider all duplicated substrings: (contiguous) substrings of s that occur 2 or more times. The occurrences may overlap.

Return any duplicated substring that has the longest possible length. If s does not have a duplicated substring, the answer is "".

 

Example 1:

Input: s = "banana"
Output: "ana"
Example 2:

Input: s = "abcd"
Output: ""
 

Constraints:

2 <= s.length <= 3 * 104
s consists of lowercase English letters.

class Solution
{
public:
    string ans;

    bool solve(int len, string &s, uint64_t power)
    {
        unordered_set<uint64_t> st;
        uint64_t curHash = 0;
        for(int i = 0; i < len; ++i)
        {
            curHash = (curHash * 131 + (s[i]));
        }
        st.insert(curHash);
        int start = 0;
        for(int j = len; j < s.size(); ++j)
        {
            curHash = (curHash - power * (s[start]));
            curHash = (curHash * 131);
            curHash = (curHash + (s[j]));
            start++;
            if(st.find(curHash) != st.end())
            {
                string curS = s.substr(start, len);
                if(curS.size() > ans.size())
                {
                    ans = curS;
                }
                return true;
            }
            st.insert(curHash);
        }
        return false;
    }

    void binary(int l, int r, string &s, vector<uint64_t> &power)
    {
        if(l > r) return;
        int mid = l + (r - l) / 2;
        if(solve(mid, s, power[mid - 1]))
        {
            l = mid + 1;
        }
        else
        {
            r = mid - 1;
        }
        binary(l, r, s, power);
    }

    string longestDupSubstring(string s)
    {
        int n = s.size();
        vector<uint64_t> power(n, 1);
        for(int i = 1; i < n; ++i)
        {
            power[i] = (power[i - 1] * 131);
        }
        ans = "";
        binary(1, n - 1, s, power);
        return ans;
    }
};


// Source https://leetcode.com/problems/last-stone-weight/

You are given an array of integers stones where stones[i] is the weight of the ith stone.

We are playing a game with the stones. On each turn, we choose the heaviest two stones and smash them together. 
Suppose the heaviest two stones have weights x and y with x <= y. The result of this smash is:

If x == y, both stones are destroyed, and
If x != y, the stone of weight x is destroyed, and the stone of weight y has new weight y - x.
At the end of the game, there is at most one stone left.

Return the smallest possible weight of the left stone. If there are no stones left, return 0.

 

Example 1:

Input: stones = [2,7,4,1,8,1]
Output: 1
Explanation: 
We combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then,
we combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then,
we combine 2 and 1 to get 1 so the array converts to [1,1,1] then,
we combine 1 and 1 to get 0 so the array converts to [1] then that's the value of the last stone.
Example 2:

Input: stones = [1]
Output: 1
 

Constraints:

1 <= stones.length <= 30
1 <= stones[i] <= 1000

class Solution
{
public:
    int lastStoneWeight(vector<int> &stones)
    {
        priority_queue<int> q;
        for (int stone : stones) q.push(stone);
        while (q.size() > 1)
        {
            int first = q.top();
            q.pop();
            int second = q.top();
            q.pop();
            if (first > second) q.push(first - second);
        }
        return q.empty() ? 0 : q.top();
    }
};


// Source https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string/

You are given a string s consisting of lowercase English letters. A duplicate removal consists of choosing two adjacent and equal letters and removing them.

We repeatedly make duplicate removals on s until we no longer can.

Return the final string after all such duplicate removals have been made. It can be proven that the answer is unique.

 

Example 1:

Input: s = "abbaca"
Output: "ca"
Explanation: 
For example, in "abbaca" we could remove "bb" since the letters are adjacent and equal, and this is the only possible move.  The result of this move is that the string is "aaca", of which only "aa" is possible, so the final string is "ca".
Example 2:

Input: s = "azxxzy"
Output: "ay"
 

Constraints:

1 <= s.length <= 105
s consists of lowercase English letters.

class Solution
{
public:
    string removeDuplicates(string S)
    {
        string res;
        for (char c : S)
        {
            if (!res.empty() && res.back() == c)
            {
                res.pop_back();
            }
            else
            {
                res.push_back(c);
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/longest-string-chain/

You are given an array of words where each word consists of lowercase English letters.

wordA is a predecessor of wordB if and only if we can insert exactly one letter anywhere in wordA without changing the order of the other characters to make it equal to wordB.

For example, "abc" is a predecessor of "abac", while "cba" is not a predecessor of "bcad".
A word chain is a sequence of words [word1, word2, ..., wordk] with k >= 1, where word1 is a predecessor of word2, word2 is a predecessor of word3, and so on. A single word is trivially a word chain with k == 1.

Return the length of the longest possible word chain with words chosen from the given list of words.

 

Example 1:

Input: words = ["a","b","ba","bca","bda","bdca"]
Output: 4
Explanation: One of the longest word chains is ["a","ba","bda","bdca"].
Example 2:

Input: words = ["xbc","pcxbcf","xb","cxbc","pcxbc"]
Output: 5
Explanation: All the words can be put in a word chain ["xb", "xbc", "cxbc", "pcxbc", "pcxbcf"].
Example 3:

Input: words = ["abcd","dbqca"]
Output: 1
Explanation: The trivial word chain ["abcd"] is one of the longest word chains.
["abcd","dbqca"] is not a valid word chain because the ordering of the letters is changed.
 

Constraints:

1 <= words.length <= 1000
1 <= words[i].length <= 16
words[i] only consists of lowercase English letters.

class Solution
{
public:
    bool helper(string &word1, string &word2)
    {
        int m = word1.size(), n = word2.size(), i = 0;
        for (int j = 0; j < n && i < m; ++j)
        {
            if (word2[j] == word1[i]) ++i;
        }
        return i == m;
    }

    int longestStrChain(vector<string> &words)
    {
        int n = words.size(), res = 1;
        sort(words.begin(), words.end(), [](string & a, string & b)
        {
            return a.size() < b.size();
        });
        vector<int> dp(n, 1);
        for (int i = 1; i < n; ++i)
        {
            for (int j = i - 1; j >= 0; --j)
            {
                if (words[j].size() + 1 < words[i].size()) break;
                if (words[j].size() == words[i].size()) continue;
                if (helper(words[j], words[i]))
                {
                    dp[i] = max(dp[i], dp[j] + 1);
                    res = max(res, dp[i]);
                }
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/last-stone-weight-ii/

You are given an array of integers stones where stones[i] is the weight of the ith stone.

We are playing a game with the stones. On each turn, we choose any two stones and smash them together. Suppose the stones have weights x and y with x <= y. The result of this smash is:

If x == y, both stones are destroyed, and
If x != y, the stone of weight x is destroyed, and the stone of weight y has new weight y - x.
At the end of the game, there is at most one stone left.

Return the smallest possible weight of the left stone. If there are no stones left, return 0.

 

Example 1:

Input: stones = [2,7,4,1,8,1]
Output: 1
Explanation:
We can combine 2 and 4 to get 2, so the array converts to [2,7,1,8,1] then,
we can combine 7 and 8 to get 1, so the array converts to [2,1,1,1] then,
we can combine 2 and 1 to get 1, so the array converts to [1,1,1] then,
we can combine 1 and 1 to get 0, so the array converts to [1], then that's the optimal value.
Example 2:

Input: stones = [31,26,33,21,40]
Output: 5
 

Constraints:

1 <= stones.length <= 30
1 <= stones[i] <= 100

On each turn, we choose any two stones and smash them together. 
任意取两个石头进行碰撞

实际上可以看成将n个石子分为两堆，求两堆石子的重量之差最小值

class Solution
{
public:
    int n;
    int dp[31][3001];
    
    int recur(vector<int> &stones, int i, int sum, int mer)
    {
        if(i >= n) return abs(sum - mer);
        if(dp[i][sum] != -1) return dp[i][sum];
        int diff1 = recur(stones, i + 1, sum, mer);
        int diff2 = recur(stones, i + 1, sum - stones[i], mer + stones[i]);
        return dp[i][sum] = min(diff1, diff2);
    }

    int lastStoneWeightII(vector<int> &stones)
    {
        n = stones.size();
        memset(dp, -1, sizeof dp);
        int sum = accumulate(stones.begin(), stones.end(), 0);
        return recur(stones, 0, sum, 0);
    }
};


// Source https://leetcode.com/problems/height-checker/

A school is trying to take an annual photo of all the students. The students are asked to stand in a single file line in non-decreasing order by height. 
Let this ordering be represented by the integer array expected where expected[i] is the expected height of the ith student in line.

You are given an integer array heights representing the current order that the students are standing in. Each heights[i] is the height of the ith student in line (0-indexed).

Return the number of indices where heights[i] != expected[i].

 

Example 1:

Input: heights = [1,1,4,2,1,3]
Output: 3
Explanation: 
heights:  [1,1,4,2,1,3]
expected: [1,1,1,2,3,4]
Indices 2, 4, and 5 do not match.
Example 2:

Input: heights = [5,1,2,3,4]
Output: 5
Explanation:
heights:  [5,1,2,3,4]
expected: [1,2,3,4,5]
All indices do not match.
Example 3:

Input: heights = [1,2,3,4,5]
Output: 0
Explanation:
heights:  [1,2,3,4,5]
expected: [1,2,3,4,5]
All indices match.
 

Constraints:

1 <= heights.length <= 100
1 <= heights[i] <= 100

class Solution
{
public:
    int heightChecker(vector<int> &heights)
    {
        int res = 0, n = heights.size();
        vector<int> sorted = heights;
        sort(sorted.begin(), sorted.end());
        for (int i = 0; i < n; ++i)
        {
            if (sorted[i] != heights[i]) ++res;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/grumpy-bookstore-owner/

There is a bookstore owner that has a store open for n minutes. Every minute, some number of customers enter the store. 
You are given an integer array customers of length n where customers[i] is the number of the customer that enters the store at the start of the ith minute 
and all those customers leave after the end of that minute.

On some minutes, the bookstore owner is grumpy. You are given a binary array grumpy where grumpy[i] is 1 if the bookstore owner is grumpy during the ith minute, and is 0 otherwise.

When the bookstore owner is grumpy, the customers of that minute are not satisfied, otherwise, they are satisfied.

The bookstore owner knows a secret technique to keep themselves not grumpy for minutes consecutive minutes, but can only use it once.

Return the maximum number of customers that can be satisfied throughout the day.

 

Example 1:

Input: customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], minutes = 3
Output: 16
Explanation: The bookstore owner keeps themselves not grumpy for the last 3 minutes. 
The maximum number of customers that can be satisfied = 1 + 1 + 1 + 1 + 7 + 5 = 16.
Example 2:

Input: customers = [1], grumpy = [0], minutes = 1
Output: 1
 

Constraints:

n == customers.length == grumpy.length
1 <= minutes <= n <= 2 * 104
0 <= customers[i] <= 1000
grumpy[i] is either 0 or 1.

class Solution
{
public:
    int maxSatisfied(vector<int> &customers, vector<int> &grumpy, int X)
    {
        int res = 0, n = customers.size(), mx = 0;
        vector<int> sums(n + 1);
        for (int i = 0; i < n; ++i)
        {
            sums[i + 1] = sums[i];
            if (grumpy[i] == 0) res += customers[i];
            else sums[i + 1] += customers[i];
            if (i >= X - 1) mx = max(mx, sums[i + 1] - sums[i + 1 - X]);
        }
        return res + mx;
    }
};


// Source https://leetcode.com/problems/previous-permutation-with-one-swap/

Given an array of positive integers arr (not necessarily distinct), return the lexicographically largest permutation that is smaller than arr, 
that can be made with exactly one swap (A swap exchanges the positions of two numbers arr[i] and arr[j]). If it cannot be done, then return the same array.

 

Example 1:

Input: arr = [3,2,1]
Output: [3,1,2]
Explanation: Swapping 2 and 1.
Example 2:

Input: arr = [1,1,5]
Output: [1,1,5]
Explanation: This is already the smallest permutation.
Example 3:

Input: arr = [1,9,4,6,7]
Output: [1,7,4,6,9]
Explanation: Swapping 9 and 7.
 

Constraints:

1 <= arr.length <= 104
1 <= arr[i] <= 104

class Solution
{
public:
    vector<int> prevPermOpt1(vector<int> &arr)
    {
        int n = arr.size(), mx = 0, idx = -1;
        for (int i = n - 1; i > 0; --i)
        {
            if (arr[i] >= arr[i - 1]) continue;
            for (int j = i; j < n; ++j)
            {
                if (arr[j] < arr[i - 1] && mx < arr[j])
                {
                    mx = arr[j];
                    idx = j;
                }
            }
            swap(arr[i - 1], arr[idx]);
            break;
        }
        return arr;
    }
};


// Source https://leetcode.com/problems/distant-barcodes/

In a warehouse, there is a row of barcodes, where the ith barcode is barcodes[i].

Rearrange the barcodes so that no two adjacent barcodes are equal. You may return any answer, and it is guaranteed an answer exists.

 

Example 1:

Input: barcodes = [1,1,1,2,2,2]
Output: [2,1,2,1,2,1]
Example 2:

Input: barcodes = [1,1,1,1,2,2,3,3]
Output: [1,3,1,3,1,2,1,2]
 

Constraints:

1 <= barcodes.length <= 10000
1 <= barcodes[i] <= 10000

class Solution
{
public:
    vector<int> rearrangeBarcodes(vector<int> &barcodes)
    {
        unordered_map<int, int> mp;
        for(int x : barcodes) mp[x]++;
        priority_queue<pair<int, int>> pq;
        for(auto x : mp)
        {
            pq.push({x.second, x.first});
        }
        int n = barcodes.size();
        vector<int> ans;
        ans.reserve(n);
        while(pq.size() > 1)
        {
            auto temp1 = pq.top();
            pq.pop();
            ans.push_back(temp1.second);
            temp1.first -= 1;
            auto temp2 = pq.top();
            pq.pop();
            ans.push_back(temp2.second);
            temp2.first -= 1;
            if(temp2.first > 0)
            {
                pq.push(temp2);
            }
            if(temp1.first > 0)
            {
                pq.push(temp1);
            }
        }
        if (!pq.empty()) ans.push_back(pq.top().second);
        return ans;
    }
};


// Source https://leetcode.com/problems/greatest-common-divisor-of-strings/

For two strings s and t, we say "t divides s" if and only if s = t + ... + t (i.e., t is concatenated with itself one or more times).

Given two strings str1 and str2, return the largest string x such that x divides both str1 and str2.

 

Example 1:

Input: str1 = "ABCABC", str2 = "ABC"
Output: "ABC"
Example 2:

Input: str1 = "ABABAB", str2 = "ABAB"
Output: "AB"
Example 3:

Input: str1 = "LEET", str2 = "CODE"
Output: ""
 

Constraints:

1 <= str1.length, str2.length <= 1000
str1 and str2 consist of English uppercase letters.

class Solution
{
public:
    string gcdOfStrings(string str1, string str2)
    {
        if (str1 + str2 != str2 + str1) return "";
        int len = gcd(str1.size(), str2.size());
        return str1.substr(0, len);
    }
};


// Source https://leetcode.com/problems/flip-columns-for-maximum-number-of-equal-rows/

You are given an m x n binary matrix matrix.

You can choose any number of columns in the matrix and flip every cell in that column (i.e., Change the value of the cell from 0 to 1 or vice versa).

Return the maximum number of rows that have all values equal after some number of flips.

 

Example 1:

Input: matrix = [[0,1],[1,1]]
Output: 1
Explanation: After flipping no values, 1 row has all values equal.
Example 2:

Input: matrix = [[0,1],[1,0]]
Output: 2
Explanation: After flipping values in the first column, both rows have equal values.
Example 3:

Input: matrix = [[0,0,0],[0,0,1],[1,1,0]]
Output: 2
Explanation: After flipping values in the first two columns, the last two rows have equal values.
 
1 1 0
1 1 1
0 0 0

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 300
matrix[i][j] is either 0 or 1.

将每一行 encode 成为一个 pattern，使得rows that have all values equal after some number of flips都能被编码成相同的 pattern，
使用一个 HashMap 来建立 pattern 和其出现次数之间的映射，最大出现次数就是 the maximum number of rows that have all values equal after some number of flips.

0 0 1 变成 0 0 0 对应的pattern为 0 0 1，表示前2列不flip，第3列flip
         变成 1 1 1 对应的pattern为 1 1 0，表示前2列flip，第3列不flip
1 1 0 变成 1 1 1 对应的pattern为 0 0 1，表示前2列不flip，第3列flip
         变成 0 0 0 对应的pattern为 1 1 0，表示前2列flip，第3列不flip

class Solution
{
public:
    int maxEqualRowsAfterFlips(vector<vector<int>> &matrix)
    {
        int m = matrix.size();
        int n = matrix[0].size();
        map<vector<int>, int> mp;
        int ans = 0;
        for(int i = 0; i < m; i++)
        {
            vector<int> v;
            if(matrix[i][0]) v = matrix[i];
            else for(int j = 0; j < n; j++) v.push_back(matrix[i][j] ^ 1);
            ans = max(ans, ++mp[v]);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/adding-two-negabinary-numbers/

Given two numbers arr1 and arr2 in base -2, return the result of adding them together.

Each number is given in array format:  as an array of 0s and 1s, from most significant bit to least significant bit.  
For example, arr = [1,1,0,1] represents the number (-2)^3 + (-2)^2 + (-2)^0 = -3.  A number arr in array, format is also guaranteed to have no leading zeros: either arr == [0] or arr[0] == 1.

Return the result of adding arr1 and arr2 in the same format: as an array of 0s and 1s with no leading zeros.

 

Example 1:

Input: arr1 = [1,1,1,1,1], arr2 = [1,0,1]
Output: [1,0,0,0,0]
Explanation: arr1 represents 11, arr2 represents 5, the output represents 16.

16 -8 4 -2 1
4 1
Example 2:

Input: arr1 = [0], arr2 = [0]
Output: [0]
Example 3:

Input: arr1 = [0], arr2 = [1]
Output: [1]
 

Constraints:

1 <= arr1.length, arr2.length <= 1000
arr1[i] and arr2[i] are 0 or 1
arr1 and arr2 have no leading zeros

基数变化
16 -8 4 -2 1
-2 = -2 * 1
4 = -2 * -2
-8 = -2 * 4
16 = -2 * -8
下标i + 1的基数为a，下标i的基数为-2 * a
mp[-2] = {0, 1} 表示 下标i + 1为-2 等价于 下标i + 1为0，下标 i 加1
a * -2 = a * 0 + (-2 * a) * 1
a * -1 = a * 1 + (-2 * a) * 1
a * 0 = a * 0 + (-2 * a) * 0
a * 1 = a * 1 + (-2 * a) * 0
a * 2 = a * 0 + (-2 * a) * -1
a * 3 = a * 1 + (-2 * a) * -1

class Solution
{
public:
    vector<int> addNegabinary(vector<int> &arr1, vector<int> &arr2)
    {
        unordered_map<int, pair<int,int>> mp ;
        mp[-2] = {0, 1}, mp[-1] = {1, 1}, mp[0] = {0, 0}, mp[1] = {1, 0}, mp[2] = {0, -1}, mp[3] = {1, -1};
        vector<int> res ;
        int n = arr1.size(), m = arr2.size();
        int i = n - 1, j = m - 1, carry = 0, currbit = 0;
        while(i >= 0 || j >= 0 || carry)
        {
            int currSum = carry;
            if(i >= 0 ) currSum += arr1[i--];
            if(j >= 0) currSum += arr2[j--];
            currbit = mp[currSum].first;
            carry = mp[currSum].second;
            res.push_back(currbit);
        }
        reverse(res.begin(), res.end());
        auto it = res.begin();
        while(it != res.end() && *it == 0) it ++;
        if(it == res.end()) return {0};
        return vector<int>(it, res.end());
    }
};


// Source https://leetcode.com/problems/number-of-submatrices-that-sum-to-target/

Given a matrix and a target, return the number of non-empty submatrices that sum to target.

A submatrix x1, y1, x2, y2 is the set of all cells matrix[x][y] with x1 <= x <= x2 and y1 <= y <= y2.

Two submatrices (x1, y1, x2, y2) and (x1', y1', x2', y2') are different if they have some coordinate that is different: for example, if x1 != x1'.

 

Example 1:


Input: matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0
Output: 4
Explanation: The four 1x1 submatrices that only contain 0.
Example 2:

Input: matrix = [[1,-1],[-1,1]], target = 0
Output: 5
Explanation: The two 1x2 submatrices, plus the two 2x1 submatrices, plus the 2x2 submatrix.
Example 3:

Input: matrix = [[904]], target = 0
Output: 0
 

Constraints:

1 <= matrix.length <= 100
1 <= matrix[0].length <= 100
-1000 <= matrix[i] <= 1000
-10^8 <= target <= 10^8

class Solution
{
public:
    int numSubmatrixSumTarget(vector<vector<int>> &matrix, int target)
    {
        int n = matrix.size(), m = matrix[0].size();
        int dp[110][110];
        memset(dp, 0, sizeof(dp));
        for(int i = 1 ; i <= n; i++)
        {
            for(int j = 1; j <= m; j++)
            {
                dp[i][j] = matrix[i - 1][j - 1] + dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1];
            }
        }
        int ans = 0;
        for(int i = 1; i <= n; i++)
        {
            for(int j = 1; j <= m; j++)
            {
                for(int p = 1; p <= i; p++)
                {
                    for(int q = 1; q <= j; q++)
                    {
                        int val = dp[i][j] - dp[p - 1][j] - dp[i][q - 1] + dp[p - 1][q - 1];
                        if(val == target)
                        {
                            ans++;
                        }
                    }
                }
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/occurrences-after-bigram/

Given two strings first and second, consider occurrences in some text of the form "first second third", where second comes immediately after first, and third comes immediately after second.

Return an array of all the words third for each occurrence of "first second third".

 

Example 1:

Input: text = "alice is a good girl she is a good student", first = "a", second = "good"
Output: ["girl","student"]
Example 2:

Input: text = "we will we will rock you", first = "we", second = "will"
Output: ["we","rock"]
 

Constraints:

1 <= text.length <= 1000
text consists of lowercase English letters and spaces.
All the words in text a separated by a single space.
1 <= first.length, second.length <= 10
first and second consist of lowercase English letters.

class Solution
{
public:
    vector<string> findOcurrences(string text, string first, string second)
    {
        vector<string> res;
        istringstream iss(text);
        string t, pre, pre2;
        while (iss >> t)
        {
            if (pre2 == first && pre == second) res.push_back(t);
            pre2 = pre;
            pre = t;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/letter-tile-possibilities/

You have n  tiles, where each tile has one letter tiles[i] printed on it.

Return the number of possible non-empty sequences of letters you can make using the letters printed on those tiles.

 

Example 1:

Input: tiles = "AAB"
Output: 8
Explanation: The possible sequences are "A", "B", "AA", "AB", "BA", "AAB", "ABA", "BAA".
Example 2:

Input: tiles = "AAABBC"
Output: 188
Example 3:

Input: tiles = "V"
Output: 1
 

Constraints:

1 <= tiles.length <= 7
tiles consists of uppercase English letters.

class Solution
{
public:
    int res;

    int numTilePossibilities(string tiles)
    {
        vector<int> cnt(26);
        for (char c : tiles) ++cnt[c - 'A'];
        res = 0;
        helper(cnt);
        return res;
    }
    void helper(vector<int> &cnt)
    {
        for (int i = 0; i < 26; ++i)
        {
            if (cnt[i] == 0) continue;
            ++res;
            --cnt[i];
            helper(cnt);
            ++cnt[i];
        }
    }
};


// Source https://leetcode.com/problems/insufficient-nodes-in-root-to-leaf-paths/

Given the root of a binary tree and an integer limit, delete all insufficient nodes in the tree simultaneously, and return the root of the resulting binary tree.

A node is insufficient if every root to leaf path intersecting this node has a sum strictly less than limit.

A leaf is a node with no children.

 

Example 1:


Input: root = [1,2,3,4,-99,-99,7,8,9,-99,-99,12,13,-99,14], limit = 1
Output: [1,2,3,4,null,null,7,8,9,null,14]
Example 2:


Input: root = [5,4,8,11,null,17,4,7,1,null,null,5,3], limit = 22
Output: [5,4,8,11,null,17,4,7,null,null,null,5]
Example 3:


Input: root = [1,2,-3,-5,null,4,null], limit = -1
Output: [1,null,-3,4]
 

Constraints:

The number of nodes in the tree is in the range [1, 5000].
-105 <= Node.val <= 105
-109 <= limit <= 109

class Solution
{
public:
    TreeNode *sufficientSubset(TreeNode *root, int limit)
    {
        if (!root->left && !root->right)
        {
            if (root->val < limit) return nullptr;
            else return root;
        }
        if (root->left)
        {
            root->left = sufficientSubset(root->left, limit - root->val);
        }
        if (root->right)
        {
            root->right = sufficientSubset(root->right, limit - root->val);
        }
        if (!root->left && !root->right) return nullptr;
        else return root;
    }
};


// Source https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/

Given a string s, return the lexicographically smallest subsequence of s that contains all the distinct characters of s exactly once.

 

Example 1:

Input: s = "bcabc"
Output: "abc"
Example 2:

Input: s = "cbacdcbc"
Output: "acdb"
 

Constraints:

1 <= s.length <= 1000
s consists of lowercase English letters.

class Solution
{
public:
    string smallestSubsequence(string s)
    {
        string res;
        vector<int> cnt(26), visited(26);
        for (char c : s) ++cnt[c - 'a'];
        for (char c : s)
        {
            --cnt[c - 'a'];
            if (visited[c - 'a']) continue;
            while (!res.empty() && c < res.back() && cnt[res.back() - 'a'])
            {
                visited[res.back() - 'a'] = 0;
                res.pop_back();
            }
            res += c;
            visited[c - 'a'] = 1;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/duplicate-zeros/

Given a fixed-length integer array arr, duplicate each occurrence of zero, shifting the remaining elements to the right.

Note that elements beyond the length of the original array are not written. Do the above modifications to the input array in place and do not return anything.

 

Example 1:

Input: arr = [1,0,2,3,0,4,5,0]
Output: [1,0,0,2,3,0,0,4]
Explanation: After calling your function, the input array is modified to: [1,0,0,2,3,0,0,4]
Example 2:

Input: arr = [1,2,3]
Output: [1,2,3]
Explanation: After calling your function, the input array is modified to: [1,2,3]
 

Constraints:

1 <= arr.length <= 104
0 <= arr[i] <= 9

class Solution
{
public:
    void duplicateZeros(vector<int> &arr)
    {
        int n = arr.size();
        vector<int> ans;
        ans.reserve(n);
        for(int val : arr)
        {
            ans.push_back(val);
            if(val == 0) ans.push_back(0);
            if (ans.size() >= n) break;
        }
        if (ans.size() > n) ans.pop_back();
        arr = ans;
    }
};


// Source https://leetcode.com/problems/largest-values-from-labels/

There is a set of n items. You are given two integer arrays values and labels where the value and the label of the ith element are values[i] and labels[i] respectively. 
You are also given two integers numWanted and useLimit.

Choose a subset s of the n elements such that:

The size of the subset s is less than or equal to numWanted.
There are at most useLimit items with the same label in s.
The score of a subset is the sum of the values in the subset.

Return the maximum score of a subset s.

不超过 num_wanted 个物品，且每个标签类别的物品不超过 use_limit，问能得到的最大价值是多少

Example 1:

Input: values = [5,4,3,2,1], labels = [1,1,2,2,3], numWanted = 3, useLimit = 1
Output: 9
Explanation: The subset chosen is the first, third, and fifth items.
Example 2:

Input: values = [5,4,3,2,1], labels = [1,3,3,3,2], numWanted = 3, useLimit = 2
Output: 12
Explanation: The subset chosen is the first, second, and third items.
Example 3:

Input: values = [9,8,8,7,6], labels = [0,0,0,1,1], numWanted = 3, useLimit = 1
Output: 16
Explanation: The subset chosen is the first and fourth items.
 

Constraints:

n == values.length == labels.length
1 <= n <= 2 * 104
0 <= values[i], labels[i] <= 2 * 104
1 <= numWanted, useLimit <= n

class Solution
{
public:
    int largestValsFromLabels(vector<int> &values, vector<int> &labels, int num_wanted, int use_limit)
    {
        int res = 0, n = values.size();
        priority_queue<pair<int, int>> pq;
        for (int i = 0; i < n; ++i)
        {
            pq.push({values[i], labels[i]});
        }
        unordered_map<int, int> useMap;
        while (num_wanted > 0 && !pq.empty())
        {
            int value = pq.top().first, label = pq.top().second;
            pq.pop();
            if (useMap[label] < use_limit)
            {
                ++useMap[label];
                --num_wanted;
                res += value;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/shortest-path-in-binary-matrix/

Given an n x n binary matrix grid, return the length of the shortest clear path in the matrix. If there is no clear path, return -1.

A clear path in a binary matrix is a path from the top-left cell (i.e., (0, 0)) to the bottom-right cell (i.e., (n - 1, n - 1)) such that:

All the visited cells of the path are 0.
All the adjacent cells of the path are 8-directionally connected (i.e., they are different and they share an edge or a corner).
The length of a clear path is the number of visited cells of this path.

 

Example 1:


Input: grid = [[0,1],[1,0]]
Output: 2
Example 2:


Input: grid = [[0,0,0],[1,1,0],[1,1,0]]
Output: 4
Example 3:

Input: grid = [[1,0,0],[1,1,0],[1,1,0]]
Output: -1
 

Constraints:

n == grid.length
n == grid[i].length
1 <= n <= 100
grid[i][j] is 0 or 1

class Solution
{
public:
    pair<int, int> directions[8] = {{1, -1}, {1, 0}, {1, 1}, {0, -1}, {0, 1}, {-1, -1}, {-1, 0}, {-1, 1}};

    bool bundaryCheck(int row, int col, int n)
    {
        return row < 0 || col < 0 || row >= n || col >= n;
    }

    int shortestPathBinaryMatrix(vector<vector<int>> &grid)
    {
        int n = grid.size();
        if(grid[0][0] == 1 || grid[n - 1][n - 1] == 1) return -1;
        queue<pair<int, int>> que;
        que.push({0, 0});
        grid[0][0] = 1;
        while(!que.empty())
        {
            pair<int, int> cur = que.front();
            que.pop();
            for(int i = 0; i < 8; i++)
            {
                int row =cur.first + directions[i].first;
                int col = cur.second + directions[i].second;
                if(!bundaryCheck(row, col, n) && grid[row][col] == 0)
                {
                    grid[row][col] = grid[cur.first][cur.second] + 1;
                    que.push({row, col});
                }
            }
        }
        if(grid[n - 1][n - 1] == 0) return -1;
        else return grid[n - 1][n - 1];
    }
};


// Source https://leetcode.com/problems/shortest-common-supersequence/

Given two strings str1 and str2, return the shortest string that has both str1 and str2 as subsequences. If there are multiple valid strings, return any of them.

A string s is a subsequence of string t if deleting some number of characters from t (possibly 0) results in the string s.

 

Example 1:

Input: str1 = "abac", str2 = "cab"
Output: "cabac"
Explanation: 
str1 = "abac" is a subsequence of "cabac" because we can delete the first "c".
str2 = "cab" is a subsequence of "cabac" because we can delete the last "ac".
The answer provided is the shortest such string that satisfies these properties.
Example 2:

Input: str1 = "aaaaaaaa", str2 = "aaaaaaaa"
Output: "aaaaaaaa"
 

Constraints:

1 <= str1.length, str2.length <= 1000
str1 and str2 consist of lowercase English letters.

class Solution
{
public:
    string shortestCommonSupersequence(string str1, string str2)
    {
        int n = str1.length(), m = str2.length();
        int dp[n + 1][m + 1];
        for(int i = 0; i < n + 1; i++)
        {
            dp[i][0] = 0;
        }
        for(int i = 1; i < m + 1; i++)
        {
            dp[0][i] = 0;
        }
        for(int i = 1; i < n + 1; i++)
        {
            for(int j = 1; j < m + 1; j++)
            {
                if(str1[i - 1] == str2[j - 1])
                {
                    dp[i][j] = 1 + dp[i - 1][j - 1];
                }
                else
                {
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }
        string ans = "";
        int i = n, j = m;
        while(i > 0 && j > 0)
        {
            if(str1[i - 1] == str2[j - 1])
            {
                ans = str1[i - 1] + ans;
                i--;
                j--;
            }
            else
            {
                if(dp[i - 1][j] > dp[i][j - 1])
                {
                    ans = str1[i - 1] + ans;
                    i--;
                }
                else
                {
                    ans = str2[j - 1] + ans;
                    j--;
                }
            }
        }
        while(i > 0)
        {
            ans = str1[i - 1] + ans;
            i--;
        }
        while(j > 0)
        {
            ans = str2[j - 1] + ans;
            j--;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/statistics-from-a-large-sample/

You are given a large sample of integers in the range [0, 255]. Since the sample is so large, it is represented by an array count where count[k] is the number of times that k appears in the sample.

Calculate the following statistics:

minimum: The minimum element in the sample.
maximum: The maximum element in the sample.
mean: The average of the sample, calculated as the total sum of all elements divided by the total number of elements.
median:
If the sample has an odd number of elements, then the median is the middle element once the sample is sorted.
If the sample has an even number of elements, then the median is the average of the two middle elements once the sample is sorted.
mode: The number that appears the most in the sample. It is guaranteed to be unique.
Return the statistics of the sample as an array of floating-point numbers [minimum, maximum, mean, median, mode]. Answers within 10-5 of the actual answer will be accepted.

 

Example 1:

Input: count = [0,1,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
Output: [1.00000,3.00000,2.37500,2.50000,3.00000]
Explanation: The sample represented by count is [1,2,2,2,3,3,3,3].
The minimum and maximum are 1 and 3 respectively.
The mean is (1+2+2+2+3+3+3+3) / 8 = 19 / 8 = 2.375.
Since the size of the sample is even, the median is the average of the two middle elements 2 and 3, which is 2.5.
The mode is 3 as it appears the most in the sample.
Example 2:

Input: count = [0,4,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
Output: [1.00000,4.00000,2.18182,2.00000,1.00000]
Explanation: The sample represented by count is [1,1,1,1,2,2,2,3,3,4,4].
The minimum and maximum are 1 and 4 respectively.
The mean is (1+1+1+1+2+2+2+3+3+4+4) / 11 = 24 / 11 = 2.18181818... (for display purposes, the output shows the rounded number 2.18182).
Since the size of the sample is odd, the median is the middle element 2.
The mode is 1 as it appears the most in the sample.
 

Constraints:

count.length == 256
0 <= count[i] <= 109
1 <= sum(count) <= 109
The mode of the sample that count represents is unique.

class Solution
{
public:
    vector<double> sampleStats(vector<int> &count)
    {
        double mn = 256, mx = 0, mean = 0, median = 0, sum = 0;
        int cnt = 0, mode = 0;
        for (int i = 0; i < count.size(); ++i)
        {
            if (count[i] == 0) continue;
            if (mn == 256) mn = i;
            mx = i;
            sum += (double)i * count[i];
            cnt += count[i];
            if (count[i] > count[mode]) mode = i;
        }
        mean = sum / cnt;
        // cnt为偶数, first + 1 等于 second
        // cnt为奇数, first 等于 second
        int first = (cnt + 1) / 2, second = (cnt + 2) / 2, cur = 0;
        for (int i = 0; i < count.size() && cur < second; ++i)
        {
            if (cur < first && cur + count[i] >= first) median += i / 2.0;
            if (cur < second && cur + count[i] >= second) median += i / 2.0;
            cur += count[i];
        }
        return {mn, mx, mean, median, (double)mode};
    }
};


// Source https://leetcode.com/problems/car-pooling/

There is a car with capacity empty seats. The vehicle only drives east (i.e., it cannot turn around and drive west).

You are given the integer capacity and an array trips where trips[i] = [numPassengersi, fromi, toi] indicates that the ith trip has numPassengersi passengers 
and the locations to pick them up and drop them off are fromi and toi respectively. The locations are given as the number of kilometers due east from the car's initial location.

Return true if it is possible to pick up and drop off all passengers for all the given trips, or false otherwise.

 

Example 1:

Input: trips = [[2,1,5],[3,3,7]], capacity = 4
Output: false
Example 2:

Input: trips = [[2,1,5],[3,3,7]], capacity = 5
Output: true
 

Constraints:

1 <= trips.length <= 1000
trips[i].length == 3
1 <= numPassengersi <= 100
0 <= fromi < toi <= 1000
1 <= capacity <= 105

class Solution
{
public:
    bool carPooling(vector<vector<int>> &trips, int capacity)
    {
        vector<pair<int, int>> data;
        for (auto &trip : trips)
        {
            data.push_back({trip[1], trip[0]});
            data.push_back({trip[2], -trip[0]});
        }
        sort(data.begin(), data.end());
        int cur = 0;
        for (auto a : data)
        {
            cur += a.second;
            if (cur > capacity) return false;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/find-in-mountain-array/

(This problem is an interactive problem.)

You may recall that an array arr is a mountain array if and only if:

arr.length >= 3
There exists some i with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
Given a mountain array mountainArr, return the minimum index such that mountainArr.get(index) == target. If such an index does not exist, return -1.

You cannot access the mountain array directly. You may only access the array using a MountainArray interface:

MountainArray.get(k) returns the element of the array at index k (0-indexed).
MountainArray.length() returns the length of the array.
Submissions making more than 100 calls to MountainArray.get will be judged Wrong Answer. Also, any solutions that attempt to circumvent the judge will result in disqualification.

 

Example 1:

Input: array = [1,2,3,4,5,3,1], target = 3
Output: 2
Explanation: 3 exists in the array, at index=2 and index=5. Return the minimum index, which is 2.
Example 2:

Input: array = [0,1,2,4,2,1], target = 3
Output: -1
Explanation: 3 does not exist in the array, so we return -1.
 

Constraints:

3 <= mountain_arr.length() <= 104
0 <= target <= 109
0 <= mountain_arr.get(index) <= 109

class Solution
{
public:
    int findInMountainArray(int target, MountainArray &mountainArr)
    {
        int n = mountainArr.length(), left = 0, right = n - 1, peak = -1;
        while (left < right)
        {
            int mid = left + (right - left) / 2;
            if (mountainArr.get(mid) < mountainArr.get(mid + 1)) left = mid + 1;
            else right = mid;
        }
        peak = left;
        if (mountainArr.get(peak) == target) return peak;
        int idx1 = helper(target, mountainArr, 0, peak - 1, true);
        int idx2 = helper(target, mountainArr, peak + 1, n - 1, false);
        if (idx1 != -1) return idx1;
        return idx2;
    }
    int helper(int target, MountainArray &mountainArr, int left, int right, bool isAsc)
    {
        while (left <= right)
        {
            int mid = left + (right - left) / 2;
            int cur = mountainArr.get(mid);
            if (cur == target) return mid;
            else if (cur < target)
            {
                if (isAsc) left = mid + 1;
                else right = mid - 1;
            }
            else
            {
                if (isAsc) right = mid - 1;
                else left = mid + 1;
            }
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/brace-expansion-ii/

Under the grammar given below, strings can represent a set of lowercase words. Let R(expr) denote the set of words the expression represents.

The grammar can best be understood through simple examples:

Single letters represent a singleton set containing that word.
R("a") = {"a"}
R("w") = {"w"}
When we take a comma-delimited list of two or more expressions, we take the union of possibilities.
R("{a,b,c}") = {"a","b","c"}
R("{{a,b},{b,c}}") = {"a","b","c"} (notice the final set only contains each word at most once)
When we concatenate two expressions, we take the set of possible concatenations between two words where the first word comes from the first expression and the second word comes from the second expression.
R("{a,b}{c,d}") = {"ac","ad","bc","bd"}
R("a{b,c}{d,e}f{g,h}") = {"abdfg", "abdfh", "abefg", "abefh", "acdfg", "acdfh", "acefg", "acefh"}
Formally, the three rules for our grammar:

For every lowercase letter x, we have R(x) = {x}.
For expressions e1, e2, ... , ek with k >= 2, we have R({e1, e2, ...}) = R(e1) ∪ R(e2) ∪ ...
For expressions e1 and e2, we have R(e1 + e2) = {a + b for (a, b) in R(e1) × R(e2)}, where + denotes concatenation, and × denotes the cartesian product.
Given an expression representing a set of words under the given grammar, return the sorted list of words that the expression represents.

 

Example 1:

Input: expression = "{a,b}{c,{d,e}}"
Output: ["ac","ad","ae","bc","bd","be"]
Example 2:

Input: expression = "{{a,z},a{b,c},{ab,z}}"
Output: ["a","ab","ac","z"]
Explanation: Each distinct word is written only once in the final answer.
 

Constraints:

1 <= expression.length <= 60
expression[i] consists of '{', '}', ','or lowercase English letters.
The given expression represents a set of words based on the grammar given in the description.

class Solution
{
public:
    vector<string> generateAllCombination(vector<string> &firstList, vector<string> &secondList)
    {
        if (firstList.empty())
            return secondList;

        vector<string> allCombination;
        for (string elemFirstList : firstList)
        {
            for (string elemSecondList : secondList)
            {
                allCombination.push_back(elemFirstList + elemSecondList);
            }
        }
        return allCombination;
    }

    void addStringsToResult(vector<string> &result, vector<string> &strings)
    {
        for (string &curString : strings)
        {
            result.push_back(curString);
        }
    }

    string getNextString(string &expression, int &index)
    {
        string result = "";
        while (index < expression.size() && expression[index] != '{'
                && expression[index] != '}'
                && expression[index] != ',')
        {
            result += expression[index];
            index++;
        }

        return result;
    }

    vector<string> getBracketAns(string &expression, int &index)
    {
        vector<string> result;
        vector<string> curResult;

        while (index < expression.size())
        {
            int curChar = expression[index];
            if (curChar == '{')
            {
                index++;
                vector<string> bracketResult = getBracketAns(expression, index);
                curResult = generateAllCombination(curResult, bracketResult);
            }
            else if(curChar == '}')
            {
                index++;
                if (curResult.size() > 0)
                {
                    addStringsToResult(result, curResult);
                }
                return result;
            }
            else if (curChar == ',')
            {
                index++;                
                if (curResult.size() > 0)
                {
                    addStringsToResult(result, curResult);
                    curResult.clear();
                }
            }
            else
            {
                string curString = getNextString(expression, index);
                vector<string> curStringVector{curString};
                curResult = generateAllCombination(curResult, curStringVector);
            }
        }
        if (curResult.size() > 0)
        {
            addStringsToResult(result, curResult);
        }
        return result;
    }

    vector<string> braceExpansionII(string expression)
    {
        int index = 0;
        vector<string> ret = getBracketAns(expression, index);
        set<string> uniqueResult(ret.begin(), ret.end());
        return vector<string>(uniqueResult.begin(), uniqueResult.end());
    }
};


// Source https://leetcode.com/problems/distribute-candies-to-people/

We distribute some number of candies, to a row of n = num_people people in the following way:

We then give 1 candy to the first person, 2 candies to the second person, and so on until we give n candies to the last person.

Then, we go back to the start of the row, giving n + 1 candies to the first person, n + 2 candies to the second person, and so on until we give 2 * n candies to the last person.

This process repeats (with us giving one more candy each time, and moving to the start of the row after we reach the end) until we run out of candies.  
The last person will receive all of our remaining candies (not necessarily one more than the previous gift).

Return an array (of length num_people and sum candies) that represents the final distribution of candies.

 

Example 1:

Input: candies = 7, num_people = 4
Output: [1,2,3,1]
Explanation:
On the first turn, ans[0] += 1, and the array is [1,0,0,0].
On the second turn, ans[1] += 2, and the array is [1,2,0,0].
On the third turn, ans[2] += 3, and the array is [1,2,3,0].
On the fourth turn, ans[3] += 1 (because there is only one candy left), and the final array is [1,2,3,1].
Example 2:

Input: candies = 10, num_people = 3
Output: [5,2,3]
Explanation: 
On the first turn, ans[0] += 1, and the array is [1,0,0].
On the second turn, ans[1] += 2, and the array is [1,2,0].
On the third turn, ans[2] += 3, and the array is [1,2,3].
On the fourth turn, ans[0] += 4, and the final array is [5,2,3].
 

Constraints:

1 <= candies <= 10^9
1 <= num_people <= 1000

class Solution
{
public:
    vector<int> distributeCandies(int candies, int num_people)
    {
        vector<int> res(num_people);
        for (int i = 0; candies > 0; ++i)
        {
            int cnt = min(candies, i + 1);
            res[i % num_people] += cnt;
            candies -= cnt;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/path-in-zigzag-labelled-binary-tree/

In an infinite binary tree where every node has two children, the nodes are labelled in row order.

In the odd numbered rows (ie., the first, third, fifth,...), the labelling is left to right, while in the even numbered rows (second, fourth, sixth,...), the labelling is right to left.
					1
		3							2
	4			5 			6				7
15		14	13		12	11		10		9		8

					1
		2							3
	4			5			6				7
8		9	10		11	12		13		14		15
Given the label of a node in this tree, return the labels in the path from the root of the tree to the node with that label.

Example 1:

Input: label = 14
Output: [1,3,4,14]
Example 2:

Input: label = 26
Output: [1,2,6,10,26]
 

Constraints:

1 <= label <= 10^6

当前结点的父结点值 = 当前结点在该行的对称结点值 / 2
比如15 对应 8，14 对应 9，13 对应 10，12 对应 11
当前结点在该行的对称结点值 + current = mn + mx
当前结点在该行的对称结点值 = (mn + mx) - current

class Solution
{
public:
    vector<int> pathInZigZagTree(int label)
    {
        int cnt = 0, val = label;
        while (val > 0)
        {
            ++cnt;
            val /= 2;
        }
        vector<int> res(cnt);
        while (label >= 1)
        {
            res[cnt - 1] = label;
            if (cnt <= 1) break;
            int otherLabel = (1 << cnt) - 1 - label + (1 << (cnt - 1));
            label = otherLabel / 2;
            --cnt;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/filling-bookcase-shelves/

You are given an array books where books[i] = [thicknessi, heighti] indicates the thickness and height of the ith book. You are also given an integer shelfWidth.

We want to place these books in order onto bookcase shelves that have a total width shelfWidth.

We choose some of the books to place on this shelf such that the sum of their thickness is less than or equal to shelfWidth, 
then build another level of the shelf of the bookcase so that the total height of the bookcase has increased by the maximum height of the books we just put down. 
We repeat this process until there are no more books to place.

Note that at each step of the above process, the order of the books we place is the same order as the given sequence of books.

For example, if we have an ordered list of 5 books, we might place the first and second book onto the first shelf, the third book on the second shelf, and the fourth and fifth book on the last shelf.
Return the minimum possible height that the total bookshelf can be after placing shelves in this manner.

 

Example 1:


Input: books = [[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]], shelf_width = 4
Output: 6
Explanation:
The sum of the heights of the 3 shelves is 1 + 3 + 2 = 6.
Notice that book number 2 does not have to be on the first shelf.
Example 2:

Input: books = [[1,3],[2,4],[3,2]], shelfWidth = 6
Output: 4
 

Constraints:

1 <= books.length <= 1000
1 <= thicknessi <= shelfWidth <= 1000
1 <= heighti <= 1000

class Solution
{
public:
    int n;
    map<pair<int, pair<int, int>>, int> dp;
    
    int recur(vector<vector<int>> &books, int shelfWidth, int i, int curr_h, int rem_w)
    {
        if (dp.find({i, {curr_h, rem_w}}) != dp.end()) return dp[{i, {curr_h, rem_w}}];
        if (i == n) return curr_h;
        int w = books[i][0], h = books[i][1];
        ///place on next shelf
        int ans = recur(books, shelfWidth, i + 1, h, shelfWidth - w) + curr_h;
        ///place on curr_shelf
        if (w <= rem_w)
        {
            ans = min(ans, recur(books, shelfWidth, i + 1, max(curr_h, h), rem_w - w));
        }
        return dp[{i, {curr_h, rem_w}}] = ans;
    }
    
    int minHeightShelves(vector<vector<int>> &books, int shelfWidth)
    {
        n = books.size();
        return recur(books, shelfWidth, 1, books[0][1], shelfWidth - books[0][0]);
    }
};


// Source https://leetcode.com/problems/parsing-a-boolean-expression/

Return the result of evaluating a given boolean expression, represented as a string.

An expression can either be:

"t", evaluating to True;
"f", evaluating to False;
"!(expr)", evaluating to the logical NOT of the inner expression expr;
"&(expr1,expr2,...)", evaluating to the logical AND of 2 or more inner expressions expr1, expr2, ...;
"|(expr1,expr2,...)", evaluating to the logical OR of 2 or more inner expressions expr1, expr2, ...
 

Example 1:

Input: expression = "!(f)"
Output: true
Example 2:

Input: expression = "|(f,t)"
Output: true
Example 3:

Input: expression = "&(t,f)"
Output: false
 

Constraints:

1 <= expression.length <= 2 * 104
expression[i] consists of characters in {'(', ')', '&', '|', '!', 't', 'f', ','}.
expression is a valid expression representing a boolean, as given in the description.

class Solution
{
public:
    bool parseBoolExpr(string expression)
    {
        int n = expression.length();
        stack<char> st;
        int cnt[256] = {0};
        for (int i = 0; i < n; ++i)
        {
            char c = expression[i];
            if (c == ',') continue;
            if (c != ')')
            {
                st.push(c);
                continue;
            }
            cnt['f'] = 0;
            cnt['t'] = 0;
            while (!st.empty() && st.top() != '(')
            {
                cnt[st.top()] = 1;
                st.pop();
            }
            st.pop();
            char op = st.top();
            st.pop();
            if (op == '&')
            {
                st.push(cnt['f'] == 1 ? 'f' : 't');
            }
            else if (op == '|')
            {
                st.push(cnt['t'] == 1 ? 't' : 'f');
            }
            else
            {
                st.push(cnt['t'] == 1 ? 'f' : 't');
            }
        }
        return st.top() == 't';
    }
};


// Source https://leetcode.com/problems/defanging-an-ip-address/

Given a valid (IPv4) IP address, return a defanged version of that IP address.

A defanged IP address replaces every period "." with "[.]".

 

Example 1:

Input: address = "1.1.1.1"
Output: "1[.]1[.]1[.]1"
Example 2:

Input: address = "255.100.50.0"
Output: "255[.]100[.]50[.]0"
 

Constraints:

The given address is a valid IPv4 address.

class Solution
{
public:
    string defangIPaddr(string address)
    {
        string res, t;
        istringstream is(address);
        while (getline(is, t, '.'))
        {
            res += t + "[.]";
        }
        int n = res.length();
        return res.substr(0, n - 3);
    }
};


// Source https://leetcode.com/problems/corporate-flight-bookings/

There are n flights that are labeled from 1 to n.

You are given an array of flight bookings bookings, where bookings[i] = [firsti, lasti, seatsi] 
represents a booking for flights firsti through lasti (inclusive) with seatsi seats reserved for each flight in the range.

Return an array answer of length n, where answer[i] is the total number of seats reserved for flight i.

Example 1:

Input: bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5
Output: [10,55,45,25,25]
Explanation:
Flight labels:              1   2   3   4   5
Booking 1 reserved:  10  10
Booking 2 reserved:        20  20
Booking 3 reserved:        25  25  25  25
Total seats:               10  55  45  25  25
Hence, answer = [10,55,45,25,25]
Example 2:

Input: bookings = [[1,2,10],[2,2,15]], n = 2
Output: [10,25]
Explanation:
Flight labels:        1   2
Booking 1 reserved:  10  10
Booking 2 reserved:      15
Total seats:         10  25
Hence, answer = [10,25]

 

Constraints:

1 <= n <= 2 * 104
1 <= bookings.length <= 2 * 104
bookings[i].length == 3
1 <= firsti <= lasti <= n
1 <= seatsi <= 104

class Solution
{
public:
    vector<int> corpFlightBookings(vector<vector<int>> &bookings, int n)
    {
        vector<int> res(n);
        for (auto &booking : bookings)
        {
            res[booking[0] - 1] += booking[2];
            if (booking[1] < n) res[booking[1]] -= booking[2];
        }
        for (int i = 1; i < n; ++i)
        {
            res[i] += res[i - 1];
        }
        return res;
    }
};


// Source https://leetcode.com/problems/delete-nodes-and-return-forest/

Given the root of a binary tree, each node in the tree has a distinct value.

After deleting all nodes with a value in to_delete, we are left with a forest (a disjoint union of trees).

Return the roots of the trees in the remaining forest. You may return the result in any order.

 

Example 1:


Input: root = [1,2,3,4,5,6,7], to_delete = [3,5]
Output: [[1,2,null,4],[6],[7]]
Example 2:

Input: root = [1,2,4,null,3], to_delete = [3]
Output: [[1,2,4]]
 

Constraints:

The number of nodes in the given tree is at most 1000.
Each node has a distinct value between 1 and 1000.
to_delete.length <= 1000
to_delete contains distinct values between 1 and 1000.

class Solution
{
public:
    vector<TreeNode *> delNodes(TreeNode *root, vector<int> &to_delete)
    {
        vector<TreeNode *> res;
        unordered_set<int> st(to_delete.begin(), to_delete.end());
        helper(root, true, st, res);
        return res;
    }
    TreeNode *helper(TreeNode *node, bool is_root, unordered_set<int> &st, vector<TreeNode *> &res)
    {
        if (!node) return nullptr;
        bool deleted = st.count(node->val);
        if (is_root && !deleted) res.push_back(node);
        node->left = helper(node->left, deleted, st, res);
        node->right = helper(node->right, deleted, st, res);
        return deleted ? nullptr : node;
    }
};


// Source https://leetcode.com/problems/maximum-nesting-depth-of-two-valid-parentheses-strings/

A string is a valid parentheses string (denoted VPS) if and only if it consists of "(" and ")" characters only, and:

It is the empty string, or
It can be written as AB (A concatenated with B), where A and B are VPS's, or
It can be written as (A), where A is a VPS.
We can similarly define the nesting depth depth(S) of any VPS S as follows:

depth("") = 0
depth(A + B) = max(depth(A), depth(B)), where A and B are VPS's
depth("(" + A + ")") = 1 + depth(A), where A is a VPS.
For example,  "", "()()", and "()(()())" are VPS's (with nesting depths 0, 1, and 2), and ")(" and "(()" are not VPS's.

 

Given a VPS seq, split it into two disjoint subsequences A and B, such that A and B are VPS's (and A.length + B.length = seq.length).

Now choose any such A and B such that max(depth(A), depth(B)) is the minimum possible value.

Return an answer array (of length seq.length) that encodes such a choice of A and B:  answer[i] = 0 if seq[i] is part of A, else answer[i] = 1.  
Note that even though multiple answers may exist, you may return any of them.

 

Example 1:

Input: seq = "(()())"
Output: [0,1,1,1,1,0]
Example 2:

Input: seq = "()(())()"
Output: [0,0,0,1,1,0,1,1]
 

Constraints:

1 <= seq.size <= 10000

对于连续的左括号，要将其平均的分配到不同的字符串中。
比如"(())" 这种，要拆分为 "()" 和 "()"，而对于没有嵌套括号的，比如 "()()()" 这种，可以都放到一个字符串中都没问题。
使用一个 level 变量，初始化为0，然后遍历给定括号字符串，若遇到了左括号，则 level 对2取余，将结果存入 res 中，为了避免连续左括号加入同一个组，将 level 自增1。
这样接下来又遇到左括号时，就可以加进不同的组，若接下来遇到右括号了，则应该先给 level 自增1，再对2取余，这样就可以跟前一个左括号划分到同一个组中了

class Solution
{
public:
    vector<int> maxDepthAfterSplit(string seq)
    {
        int n = seq.size(), level = 0;
        vector<int> res(n);
        for (int i = 0; i < n; ++i)
        {
            if (seq[i] == '(')
            {
                res[i] = level++ % 2;
            }
            else
            {
                res[i] = ++level % 2;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/print-in-order/

Suppose we have a class:

public class Foo {
  public void first() { print("first"); }
  public void second() { print("second"); }
  public void third() { print("third"); }
}
The same instance of Foo will be passed to three different threads. Thread A will call first(), thread B will call second(), and thread C will call third(). 
Design a mechanism and modify the program to ensure that second() is executed after first(), and third() is executed after second().

Note:

We do not know how the threads will be scheduled in the operating system, even though the numbers in the input seem to imply the ordering. 
The input format you see is mainly to ensure our tests' comprehensiveness.

 

Example 1:

Input: nums = [1,2,3]
Output: "firstsecondthird"
Explanation: There are three threads being fired asynchronously. The input [1,2,3] means thread A calls first(), thread B calls second(), and thread C calls third(). "firstsecondthird" is the correct output.
Example 2:

Input: nums = [1,3,2]
Output: "firstsecondthird"
Explanation: The input [1,3,2] means thread A calls first(), thread B calls third(), and thread C calls second(). "firstsecondthird" is the correct output.
 

Constraints:

nums is a permutation of [1, 2, 3].

class Foo
{
public:
    mutex a, b;

    Foo()
    {
        a.lock(); //for second
        b.lock(); //for third
    }

    void first(function<void()> printFirst)
    {
        // printFirst() outputs "first". Do not change or remove this line.
        printFirst();
        a.unlock(); // now can run second
    }

    void second(function<void()> printSecond)
    {
        // printSecond() outputs "second". Do not change or remove this line.
        a.lock(); // while second is running lock a
        printSecond();
        a.unlock();
        b.unlock(); // now third can run
    }

    void third(function<void()> printThird)
    {
        // printThird() outputs "third". Do not change or remove this line.
        b.lock(); // while third is running lock b
        printThird();
        b.unlock();
    }
};


// Source https://leetcode.com/problems/print-foobar-alternately/

Suppose you are given the following code:

class FooBar {
  public void foo() {
    for (int i = 0; i < n; i++) {
      print("foo");
    }
  }

  public void bar() {
    for (int i = 0; i < n; i++) {
      print("bar");
    }
  }
}
The same instance of FooBar will be passed to two different threads:

thread A will call foo(), while
thread B will call bar().
Modify the given program to output "foobar" n times.

 

Example 1:

Input: n = 1
Output: "foobar"
Explanation: There are two threads being fired asynchronously. One of them calls foo(), while the other calls bar().
"foobar" is being output 1 time.
Example 2:

Input: n = 2
Output: "foobarfoobar"
Explanation: "foobar" is being output 2 times.
 

Constraints:

1 <= n <= 1000

class FooBar
{
private:
    int n, count;
    mutex m;
    condition_variable cv;
public:
    FooBar(int n)
    {
        count = 0;
        this->n = n;
    }

    void foo(function<void()> printFoo)
    {
        unique_lock<mutex> ml(m);
        for (int i = 0; i < n; i++)
        {
            // printFoo() outputs "foo". Do not change or remove this line.
            cv.wait(ml, [this] { return count % 2 == 0;});
            printFoo();
            count++;
            cv.notify_all();
        }
    }

    void bar(function<void()> printBar)
    {
        unique_lock<mutex> ml(m);
        for (int i = 0; i < n; i++)
        {
            // printBar() outputs "bar". Do not change or remove this line.
            cv.wait(ml, [this] { return count % 2 == 1;});
            printBar();
            count++;
            cv.notify_all();
        }
    }
};


// Source https://leetcode.com/problems/print-zero-even-odd/

You have a function printNumber that can be called with an integer parameter and prints it to the console.

For example, calling printNumber(7) prints 7 to the console.
You are given an instance of the class ZeroEvenOdd that has three functions: zero, even, and odd. The same instance of ZeroEvenOdd will be passed to three different threads:

Thread A: calls zero() that should only output 0's.
Thread B: calls even() that should only output even numbers.
Thread C: calls odd() that should only output odd numbers.
Modify the given class to output the series "010203040506..." where the length of the series must be 2n.

Implement the ZeroEvenOdd class:

ZeroEvenOdd(int n) Initializes the object with the number n that represents the numbers that should be printed.
void zero(printNumber) Calls printNumber to output one zero.
void even(printNumber) Calls printNumber to output one even number.
void odd(printNumber) Calls printNumber to output one odd number.
 

Example 1:

Input: n = 2
Output: "0102"
Explanation: There are three threads being fired asynchronously.
One of them calls zero(), the other calls even(), and the last one calls odd().
"0102" is the correct output.
Example 2:

Input: n = 5
Output: "0102030405"
 

Constraints:

1 <= n <= 1000

class ZeroEvenOdd
{
private:
    int n;
    bool isZero;
    int count;

    std::mutex m;
    std::condition_variable zeroCond;
    std::condition_variable oddCond;
    std::condition_variable evenCond;

public:
    ZeroEvenOdd(int n)
    {
        this->n = n;
        isZero = true;
        count = 1;
    }

    void zero(function<void(int)> printNumber)
    {
        for(int i = 1; i <= n; i++)
        {
            std::unique_lock<std::mutex> lck(m);
            zeroCond.wait(lck, [this]()
            {
                return isZero;
            });
            printNumber(0);
            isZero = false;
            if(count % 2)
            {
                oddCond.notify_one();
            }
            else
            {
                evenCond.notify_one();
            }
        }
    }

    void even(function<void(int)> printNumber)
    {
        for(int i = 2; i <= n; i += 2)
        {
            std::unique_lock<std::mutex> lck(m);
            evenCond.wait(lck, [this]()
            {
                return !isZero && (count % 2 == 0);
            });
            printNumber(i);
            count++;
            isZero = true;
            zeroCond.notify_one();
        }
    }

    void odd(function<void(int)> printNumber)
    {
        for(int i = 1; i <= n; i += 2)
        {
            std::unique_lock<std::mutex> lck(m);
            oddCond.wait(lck, [this]()
            {
                return !isZero && (count % 2 == 1);
            });
            printNumber(i);
            count++;
            isZero = true;
            zeroCond.notify_one();
        }
    }
};


// Source https://leetcode.com/problems/building-h2o/

There are two kinds of threads: oxygen and hydrogen. Your goal is to group these threads to form water molecules.

There is a barrier where each thread has to wait until a complete molecule can be formed. Hydrogen and oxygen threads will be given releaseHydrogen and releaseOxygen methods respectively, 
which will allow them to pass the barrier. These threads should pass the barrier in groups of three, and they must immediately bond with each other to form a water molecule. 
You must guarantee that all the threads from one molecule bond before any other threads from the next molecule do.

In other words:

If an oxygen thread arrives at the barrier when no hydrogen threads are present, it must wait for two hydrogen threads.
If a hydrogen thread arrives at the barrier when no other threads are present, it must wait for an oxygen thread and another hydrogen thread.
We do not have to worry about matching the threads up explicitly; the threads do not necessarily know which other threads they are paired up with. 
The key is that threads pass the barriers in complete sets; thus, if we examine the sequence of threads that bind and divide them into groups of three, 
each group should contain one oxygen and two hydrogen threads.

Write synchronization code for oxygen and hydrogen molecules that enforces these constraints.

 

Example 1:

Input: water = "HOH"
Output: "HHO"
Explanation: "HOH" and "OHH" are also valid answers.
Example 2:

Input: water = "OOHHHH"
Output: "HHOHHO"
Explanation: "HOHHHO", "OHHHHO", "HHOHOH", "HOHHOH", "OHHHOH", "HHOOHH", "HOHOHH" and "OHHOHH" are also valid answers.
 

Constraints:

3 * n == water.length
1 <= n <= 20
water[i] is either 'H' or 'O'.
There will be exactly 2 * n 'H' in water.
There will be exactly n 'O' in water.

class H2O
{
    int hcount, ocount;
    condition_variable cv;
    mutex m;
public:
    H2O()
    {
        hcount = 2;
        ocount = 1;
    }

    void hydrogen(function<void()> releaseHydrogen)
    {
        unique_lock<mutex> ul(m);
        cv.wait(ul, [this]()
        {
            return hcount > 0 ;
        });
        --hcount;
        // releaseHydrogen() outputs "H". Do not change or remove this line.
        releaseHydrogen();
        if (hcount == 0 && ocount == 0)
        {
            hcount = 2;
            ocount = 1;
            cv.notify_all();
        }
    }

    void oxygen(function<void()> releaseOxygen)
    {
        unique_lock<mutex> ul(m);
        cv.wait(ul, [this]()
        {
            return ocount > 0;
        });
        --ocount;
        // releaseOxygen() outputs "O". Do not change or remove this line.
        releaseOxygen();
        if (hcount == 0 && ocount == 0)
        {
            hcount = 2;
            ocount = 1;
            cv.notify_all();
        }
    }
};


// Source https://leetcode.com/problems/relative-sort-array/

Given two arrays arr1 and arr2, the elements of arr2 are distinct, and all elements in arr2 are also in arr1.

Sort the elements of arr1 such that the relative ordering of items in arr1 are the same as in arr2. Elements that do not appear in arr2 should be placed at the end of arr1 in ascending order.

 

Example 1:

Input: arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6]
Output: [2,2,2,1,4,3,3,9,6,7,19]
Example 2:

Input: arr1 = [28,6,22,8,44,17], arr2 = [22,28,8,6]
Output: [22,28,8,6,17,44]
 

Constraints:

1 <= arr1.length, arr2.length <= 1000
0 <= arr1[i], arr2[i] <= 1000
All the elements of arr2 are distinct.
Each arr2[i] is in arr1.

class Solution
{
public:
    vector<int> relativeSortArray(vector<int> &arr1, vector<int> &arr2)
    {
        int n = arr1.size();
        vector<int> res;
        res.reserve(n);
        map<int, int> m;
        for (int num : arr1) ++m[num];
        for (int num : arr2)
        {
            for (int i = 0; i < m[num]; ++i)
            {
                res.push_back(num);
            }
            m.erase(num);
        }
        for (auto a : m)
        {
            for (int i = 0; i < a.second; ++i)
            {
                res.push_back(a.first);
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/

Given the root of a binary tree, return the lowest common ancestor of its deepest leaves.

Recall that:

The node of a binary tree is a leaf if and only if it has no children
The depth of the root of the tree is 0. if the depth of a node is d, the depth of each of its children is d + 1.
The lowest common ancestor of a set S of nodes, is the node A with the largest depth such that every node in S is in the subtree with root A.
 

Example 1:


Input: root = [3,5,1,6,2,0,8,null,null,7,4]
Output: [2,7,4]
Explanation: We return the node with value 2, colored in yellow in the diagram.
The nodes coloured in blue are the deepest leaf-nodes of the tree.
Note that nodes 6, 0, and 8 are also leaf nodes, but the depth of them is 2, but the depth of nodes 7 and 4 is 3.
Example 2:

Input: root = [1]
Output: [1]
Explanation: The root is the deepest node in the tree, and it's the lca of itself.
Example 3:

Input: root = [0,1,3,null,2]
Output: [2]
Explanation: The deepest leaf node in the tree is 2, the lca of one node is itself.
 

Constraints:

The number of nodes in the tree will be in the range [1, 1000].
0 <= Node.val <= 1000
The values of the nodes in the tree are unique.

class Solution
{
public:
    unordered_map<TreeNode *, int> mp;

    int recur(TreeNode *node)
    {
        if (!node) return 0;
        int leftD = recur(node->left);
        int rightD = recur(node->right);
        return mp[node] = max(leftD, rightD) + 1;
    }

    TreeNode * helper(TreeNode *node)
    {
        if (!node) return nullptr;
        int leftD = 0, rightD = 0;
        if (node->left) leftD = mp[node->left];
        if (node->right) rightD = mp[node->right];
        if (leftD == rightD) return node;
        if (leftD < rightD) return helper(node->right);
        return helper(node->left);
    }

    TreeNode *lcaDeepestLeaves(TreeNode *root)
    {
        recur(root);
        return helper(root);
    }
};


// Source https://leetcode.com/problems/longest-well-performing-interval/

We are given hours, a list of the number of hours worked per day for a given employee.

A day is considered to be a tiring day if and only if the number of hours worked is (strictly) greater than 8.

A well-performing interval is an interval of days for which the number of tiring days is strictly larger than the number of non-tiring days.

Return the length of the longest well-performing interval.

 

Example 1:

Input: hours = [9,9,6,0,6,6,9]
Output: 3
Explanation: The longest well-performing interval is [9,9,6].
Example 2:

Input: hours = [6,6,6]
Output: 0
 

Constraints:

1 <= hours.length <= 104
0 <= hours[i] <= 16

class Solution
{
public:
    int longestWPI(vector<int> &hours)
    {
        int res = 0, n = hours.size();
        vector<int> sums(n + 1);
        for (int i = 1; i <= n; ++i)
        {
            sums[i] = sums[i - 1] + (hours[i - 1] > 8 ? 1 : -1);
            if(sums[i] > 0)
            {
                res = i;
            }
        }
        stack<int> st;
        for (int i = 0; i <= n; ++i)
        {
            if (st.empty() || sums[st.top()] > sums[i])
            {
                st.push(i);
            }
        }
        for (int i = n; i >= 0; --i)
        {
            while (!st.empty() && sums[st.top()] < sums[i])
            {
                res = max(res, i - st.top());
                st.pop();
            }
            if (st.empty()) break;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/smallest-sufficient-team/

In a project, you have a list of required skills req_skills, and a list of people. The ith person people[i] contains a list of skills that the person has.

Consider a sufficient team: a set of people such that for every required skill in req_skills, there is at least one person in the team who has that skill. 
We can represent these teams by the index of each person.

For example, team = [0, 1, 3] represents the people with skills people[0], people[1], and people[3].
Return any sufficient team of the smallest possible size, represented by the index of each person. You may return the answer in any order.

It is guaranteed an answer exists.

 

Example 1:

Input: req_skills = ["java","nodejs","reactjs"], people = [["java"],["nodejs"],["nodejs","reactjs"]]
Output: [0,2]
Example 2:

Input: req_skills = ["algorithms","math","java","reactjs","csharp","aws"], people = [["algorithms","math","java"],["algorithms","math","reactjs"],["java","csharp","aws"],["reactjs","csharp"],["csharp","math"],["aws","java"]]
Output: [1,2]
 

Constraints:

1 <= req_skills.length <= 16
1 <= req_skills[i].length <= 16
req_skills[i] consists of lowercase English letters.
All the strings of req_skills are unique.
1 <= people.length <= 60
0 <= people[i].length <= 16
1 <= people[i][j].length <= 16
people[i][j] consists of lowercase English letters.
All the strings of people[i] are unique.
Every skill in people[i] is a skill in req_skills.
It is guaranteed a sufficient team exists.

class Solution
{
public:
    int n, m;
    unordered_map<string, int> mp;
    vector<vector<int>> dp;
    vector<vector<bool>> record;

    int recur(vector<vector<string>> &people, vector<int> &people_skills, int mask, int idx)
    {
        if(idx >= m)
        {
            if(mask == 0) return 0;
            else return 1e9;
        }
        if(dp[idx][mask] != -1) return dp[idx][mask];
        int k2 = mask & people_skills[idx];
        int t1 = recur(people, people_skills, mask, idx + 1);
        int t2 = recur(people, people_skills, mask ^ k2, idx + 1) + 1;
        int res = min(t1, t2);
        if(t2 < t1) record[idx][mask] = 1;
        return dp[idx][mask] = res;
    }

    vector<int> smallestSufficientTeam(vector<string> &req_skills, vector<vector<string>> &people)
    {
        n = req_skills.size();
        m = people.size();
        int cnt = (1 << n);
        dp = vector<vector<int>>(m + 1, vector<int>(cnt + 5, -1));
        record = vector<vector<bool>>(m + 1, vector<bool>(cnt + 5, 0));
        for(int i = 0; i < n; ++i) mp[req_skills[i]] = i;
        vector<int> people_skills(m, 0);
        for(int i = 0; i < m; ++i)
        {
            for(int j = 0; j < people[i].size(); ++j)
            {
                int b = mp[people[i][j]];
                people_skills[i] = people_skills[i] ^ (1 << b);
            }
        }
        recur(people, people_skills, cnt - 1, 0);
        int mask = cnt - 1, i = 0;
        vector<int> ans;
        while(mask && i < m)
        {
            if(record[i][mask] == 1)
            {
                ans.push_back(i);
                int k = mask & people_skills[i];
                mask = mask ^ k;
            }
            i++;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/number-of-equivalent-domino-pairs/

Given a list of dominoes, dominoes[i] = [a, b] is equivalent to dominoes[j] = [c, d] if and only if either (a == c and b == d), or (a == d and b == c) - 
that is, one domino can be rotated to be equal to another domino.

Return the number of pairs (i, j) for which 0 <= i < j < dominoes.length, and dominoes[i] is equivalent to dominoes[j].

 

Example 1:

Input: dominoes = [[1,2],[2,1],[3,4],[5,6]]
Output: 1
Example 2:

Input: dominoes = [[1,2],[1,2],[1,1],[1,2],[2,2]]
Output: 3
 

Constraints:

1 <= dominoes.length <= 4 * 104
dominoes[i].length == 2
1 <= dominoes[i][j] <= 9

class Solution
{
public:
    int numEquivDominoPairs(vector<vector<int>> &dominoes)
    {
        int res = 0;
        unordered_map<int, int> cntMap;
        for (auto &d : dominoes)
        {
            ++cntMap[min(d[0], d[1]) * 10 + max(d[0], d[1])];
        }
        for (auto a : cntMap)
        {
            res += a.second * (a.second - 1) / 2;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/shortest-path-with-alternating-colors/

You are given an integer n, the number of nodes in a directed graph where the nodes are labeled from 0 to n - 1. 
Each edge is red or blue in this graph, and there could be self-edges and parallel edges.

You are given two arrays redEdges and blueEdges where:

redEdges[i] = [ai, bi] indicates that there is a directed red edge from node ai to node bi in the graph, and
blueEdges[j] = [uj, vj] indicates that there is a directed blue edge from node uj to node vj in the graph.
Return an array answer of length n, where each answer[x] is the length of the shortest path from node 0 to node x 
such that the edge colors alternate along the path, or -1 if such a path does not exist.

 

Example 1:

Input: n = 3, redEdges = [[0,1],[1,2]], blueEdges = []
Output: [0,1,-1]
Example 2:

Input: n = 3, redEdges = [[0,1]], blueEdges = [[2,1]]
Output: [0,1,-1]
 

Constraints:

1 <= n <= 100
0 <= redEdges.length, blueEdges.length <= 400
redEdges[i].length == blueEdges[j].length == 2
0 <= ai, bi, uj, vj < n

class Solution
{
public:
    vector<int> shortestAlternatingPaths(int n, vector<vector<int>> &red_edges, vector<vector<int>> &blue_edges)
    {
        vector<int> res(n);
        vector<vector<int>> dp(2, vector<int>(n));
        vector<vector<unordered_set<int>>> graph(2, vector<unordered_set<int>>(n));
        for (auto &edge : red_edges)
        {
            graph[0][edge[0]].insert(edge[1]);
        }
        for (auto &edge : blue_edges)
        {
            graph[1][edge[0]].insert(edge[1]);
        }
        for (int i = 1; i < n; ++i)
        {
            dp[0][i] = 2 * n;
            dp[1][i] = 2 * n;
        }
        queue<pair<int, int>> q;
        q.push({0, 0});
        q.push({0, 1});
        while (!q.empty())
        {
            auto p = q.front();
            q.pop();
            int cur = p.first, color = p.second;
            for (int next : graph[1 - color][cur])
            {
                if (dp[1 - color][next] == 2 * n)
                {
                    dp[1 - color][next] = 1 + dp[color][cur];
                    q.push({next, 1 - color});
                }
            }
        }
        for (int i = 1; i < n; ++i)
        {
            int val = min(dp[0][i], dp[1][i]);
            if (val == 2 * n) res[i] = -1;
            else res[i] = val;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/

Given an array arr of positive integers, consider all binary trees such that:

Each node has either 0 or 2 children;
The values of arr correspond to the values of each leaf in an in-order traversal of the tree.
The value of each non-leaf node is equal to the product of the largest leaf value in its left and right subtree, respectively.
Among all possible binary trees considered, return the smallest possible sum of the values of each non-leaf node. It is guaranteed this sum fits into a 32-bit integer.

A node is a leaf if and only if it has zero children.

 

Example 1:


Input: arr = [6,2,4]
Output: 32
Explanation: There are two possible trees shown.
The first has a non-leaf node sum 36, and the second has non-leaf node sum 32.
Example 2:


Input: arr = [4,11]
Output: 44
 

Constraints:

2 <= arr.length <= 40
1 <= arr[i] <= 15
It is guaranteed that the answer fits into a 32-bit signed integer (i.e., it is less than 231).

class Solution
{
public:
    pair<int, int> dp[41][41]; // dp[s][e].first -> the largest leaf value
                                          // dp[s][e].second ->  sum of the values of each non-leaf node

    pair<int, int> recur(vector<int> &arr, int s, int e)
    {
        if (dp[s][e].first) return dp[s][e];
        if (s == e) return {arr[s], 0};
        pair<int, int> l, r;
        for (int i = s; i < e; i++)
        {
            l = recur(arr, s, i);
            r = recur(arr, i + 1, e);
            dp[s][e].second = min(dp[s][e].second, l.first * r.first + l.second + r.second);
        }
        dp[s][e].first = max(l.first, r.first);
        return dp[s][e];
    }

    int mctFromLeafValues(vector<int> &arr)
    {
        int n = arr.size();
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < n; j++)
            {
                dp[i][j].first = 0;
                dp[i][j].second = INT_MAX;
            }
        }
        return recur(arr, 0, n - 1).second;
    }
};


// Source https://leetcode.com/problems/maximum-of-absolute-value-expression/

Given two arrays of integers with equal lengths, return the maximum value of:

|arr1[i] - arr1[j]| + |arr2[i] - arr2[j]| + |i - j|

where the maximum is taken over all 0 <= i, j < arr1.length.

 

Example 1:

Input: arr1 = [1,2,3,4], arr2 = [-1,4,5,6]
Output: 13
Example 2:

Input: arr1 = [1,-2,-5,0,10], arr2 = [0,-2,-1,-7,-4]
Output: 20
 

Constraints:

2 <= arr1.length == arr2.length <= 40000
-10^6 <= arr1[i], arr2[i] <= 10^6

|arr1[i] - arr1[j]| + |arr2[i] - arr2[j]| + |i - j| 的最大值
总共就有八种情况：

arr1[i] - arr1[j] + arr2[i] - arr2[j] + i - j

arr1[i] - arr1[j] + arr2[i] - arr2[j] - i + j

arr1[i] - arr1[j] - arr2[i] + arr2[j] + i - j

arr1[i] - arr1[j] - arr2[i] + arr2[j] - i + j

- arr1[i] + arr1[j] + arr2[i] - arr2[j] + i - j

- arr1[i] + arr1[j] + arr2[i] - arr2[j] - i + j

- arr1[i] + arr1[j] - arr2[i] + arr2[j] + i - j

- arr1[i] + arr1[j] - arr2[i] + arr2[j] - i + j

合并一下，就是：

(arr1[i] + arr2[i] + i) - (arr1[j] + arr2[j] + j)

(arr1[i] + arr2[i] - i) - (arr1[j] + arr2[j] - j)

(arr1[i] - arr2[i] + i) - (arr1[j] - arr2[j] + j)

(arr1[i] - arr2[i] - i) - (arr1[j] - arr2[j] - j)

- (arr1[i] - arr2[i] - i) + (arr1[j] - arr2[j] - j)

- (arr1[i] - arr2[i] + i) + (arr1[j] - arr2[j] + j)

- (arr1[i] + arr2[i] - i) + (arr1[j] + arr2[j] - j)

- (arr1[i] + arr2[i] + i) + (arr1[j] + arr2[j] + j)

仔细观察上面八种情况，其实后四种和前四种是重复的，因为i和j是可以交换的

class Solution
{
public:
    int maxAbsValExpr(vector<int> &arr1, vector<int> &arr2)
    {
        int n = arr1.size();
        vector<int> sum1(n), sum2(n), diff1(n), diff2(n);
        for (int i = 0; i < n; ++i)
        {
            sum1[i] = arr1[i] + arr2[i] + i;
            sum2[i] = arr1[i] + arr2[i] - i;
            diff1[i] = arr1[i] - arr2[i] + i;
            diff2[i] = arr1[i] - arr2[i] - i;
        }
        return max(max(helper(sum1), helper(sum2)), max(helper(diff1), helper(diff2)));
    }
    int helper(vector<int> &arr)
    {
        int mx = arr[0], mn = arr[0];
        for (int num : arr)
        {
            mx = max(mx, num);
            mn = min(mn, num);
        }
        return mx - mn;
    }
};


// Source https://leetcode.com/problems/n-th-tribonacci-number/

The Tribonacci sequence Tn is defined as follows: 

T0 = 0, T1 = 1, T2 = 1, and Tn+3 = Tn + Tn+1 + Tn+2 for n >= 0.

Given n, return the value of Tn.

 

Example 1:

Input: n = 4
Output: 4
Explanation:
T_3 = 0 + 1 + 1 = 2
T_4 = 1 + 1 + 2 = 4
Example 2:

Input: n = 25
Output: 1389537
 

Constraints:

0 <= n <= 37
The answer is guaranteed to fit within a 32-bit integer, ie. answer <= 2^31 - 1.

class Solution
{
public:
    int tribonacci(int n)
    {
        int arr[128] = {0};
        arr[0] = 0;
        arr[1] = 1;
        arr[2] = 1;
        for (int i = 3; i <= n; ++i)
        {
            arr[i] = arr[i - 1] + arr[i - 2] + arr[i - 3];
        }
        return arr[n];
    }
};


// Source https://leetcode.com/problems/alphabet-board-path/

On an alphabet board, we start at position (0, 0), corresponding to character board[0][0].

Here, board = ["abcde", "fghij", "klmno", "pqrst", "uvwxy", "z"], as shown in the diagram below.

a	b	c	d	e
f	g	h	i	j
k	l	m	n	o
p	q	r	s	t
u	v	w	x	y
z

We may make the following moves:

'U' moves our position up one row, if the position exists on the board;
'D' moves our position down one row, if the position exists on the board;
'L' moves our position left one column, if the position exists on the board;
'R' moves our position right one column, if the position exists on the board;
'!' adds the character board[r][c] at our current position (r, c) to the answer.
(Here, the only positions that exist on the board are positions with letters on them.)

Return a sequence of moves that makes our answer equal to target in the minimum number of moves.  You may return any path that does so.

 

Example 1:

Input: target = "leet"
Output: "DDR!UURRR!!DDD!"
Example 2:

Input: target = "code"
Output: "RR!DDRR!UUL!R!"
 

Constraints:

1 <= target.length <= 100
target consists only of English lowercase letters.

z到其他字符都必须先往上走，再向右走
其他字符到z都必须先往左走，再向下走

class Solution
{
public:
    string alphabetBoardPath(string target)
    {
        string res;
        int curX = 0, curY = 0;
        for (char c : target)
        {
            int x = (c - 'a') / 5, y = (c - 'a') % 5;
            int diffX = (curX - x);
            int diffY = (curY - y);
            if (diffX == 0 && diffY == 0) { res.push_back('!'); continue; }
            if (diffX > 0) res += string(diffX, 'U');
            if (diffY < 0) res += string(abs(diffY), 'R');
            if (diffY > 0) res += string(diffY, 'L');
            if (diffX < 0) res += string(abs(diffX), 'D');
            res.push_back('!');
            curX = x;
            curY = y;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/largest-1-bordered-square/

Given a 2D grid of 0s and 1s, return the number of elements in the largest square subgrid that has all 1s on its border, or 0 if such a subgrid doesn't exist in the grid.

 

Example 1:

Input: grid = [[1,1,1],[1,0,1],[1,1,1]]
Output: 9
Example 2:

Input: grid = [[1,1,0,0]]
Output: 1
 

Constraints:

1 <= grid.length <= 100
1 <= grid[0].length <= 100
grid[i][j] is 0 or 1

class Solution
{
public:
    int largest1BorderedSquare(vector<vector<int>> &grid)
    {
        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> left(m, vector<int>(n)), top(m, vector<int>(n));
        for (int i = 0; i < m; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                if (grid[i][j] == 0) continue;
                left[i][j] = j == 0 ? 1 : left[i][j - 1] + 1;
                top[i][j] = i == 0 ? 1 : top[i - 1][j] + 1;
            }
        }
        int mx = 0;
        for (int i = m - 1; i >= 0; --i)
        {
            for (int j = n - 1; j >= 0; --j)
            {
                int small = min(left[i][j], top[i][j]);
                while (small > mx)
                {
                    if (top[i][j - small + 1] >= small && left[i - small + 1][j] >= small) { mx = small; break; }
                    --small;
                }
            }
        }
        return mx * mx;
    }
};


// Source https://leetcode.com/problems/stone-game-ii/

Alice and Bob continue their games with piles of stones.  There are a number of piles arranged in a row, and each pile has a positive integer number of stones piles[i].  
The objective of the game is to end with the most stones. 

Alice and Bob take turns, with Alice starting first.  Initially, M = 1.

On each player's turn, that player can take all the stones in the first X remaining piles, where 1 <= X <= 2M.  Then, we set M = max(M, X).

The game continues until all the stones have been taken.

Assuming Alice and Bob play optimally, return the maximum number of stones Alice can get.

 

Example 1:

Input: piles = [2,7,9,4,4]
Output: 10
Explanation:  If Alice takes one pile at the beginning, Bob takes two piles, then Alice takes 2 piles again. Alice can get 2 + 4 + 4 = 10 piles in total. If Alice takes two piles at the beginning, then Bob can take all three piles left. In this case, Alice get 2 + 7 = 9 piles in total. So we return 10 since it's larger. 
Example 2:

Input: piles = [1,2,3,4,5,100]
Output: 104
 

Constraints:

1 <= piles.length <= 100
1 <= piles[i] <= 104

class Solution
{
public:
    int n;
    int dp[105][105];

    int recur(vector<int> &sums, int i, int m)
    {
        if (i + 2 * m >= n) return sums[i];
        if (dp[i][m] > 0) return dp[i][m];
        int res = 0;
        for (int x = 1; x <= 2 * m; ++x)
        {
            int cur = sums[i] - sums[i + x];
            res = max(res, cur + sums[i + x] - recur(sums, i + x, max(x, m)));
        }
        return dp[i][m] = res;
    }

    int stoneGameII(vector<int> &piles)
    {
        n = piles.size();
        memset(dp, 0, sizeof(dp));
        vector<int> sums = piles;
        for (int i = n - 2; i >= 0; --i)
        {
            sums[i] += sums[i + 1];
        }
        return recur(sums, 0, 1);
    }
};


// Source https://leetcode.com/problems/longest-common-subsequence/

Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.

 

Example 1:

Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.
Example 2:

Input: text1 = "abc", text2 = "abc"
Output: 3
Explanation: The longest common subsequence is "abc" and its length is 3.
Example 3:

Input: text1 = "abc", text2 = "def"
Output: 0
Explanation: There is no such common subsequence, so the result is 0.
 

Constraints:

1 <= text1.length, text2.length <= 1000
text1 and text2 consist of only lowercase English characters.

class Solution
{
public:
    int longestCommonSubsequence(string text1, string text2)
    {
        int m = text1.size(), n = text2.size();
        vector<vector<int>> dp(m + 1, vector<int>(n + 1));
        for (int i = 1; i <= m; ++i)
        {
            for (int j = 1; j <= n; ++j)
            {
                if (text1[i - 1] == text2[j - 1])
                {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                }
                else
                {
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }
        return dp[m][n];
    }
};


// Source https://leetcode.com/problems/decrease-elements-to-make-array-zigzag/

Given an array nums of integers, a move consists of choosing any element and decreasing it by 1.

An array A is a zigzag array if either:

Every even-indexed element is greater than adjacent elements, ie. A[0] > A[1] < A[2] > A[3] < A[4] > ...
OR, every odd-indexed element is greater than adjacent elements, ie. A[0] < A[1] > A[2] < A[3] > A[4] < ...
Return the minimum number of moves to transform the given array nums into a zigzag array.

 

Example 1:

Input: nums = [1,2,3]
Output: 2
Explanation: We can decrease 2 to 0 or 3 to 1.
Example 2:

Input: nums = [9,6,1,6,2]
Output: 4
 

Constraints:

1 <= nums.length <= 1000
1 <= nums[i] <= 1000

class Solution
{
public:
    int movesToMakeZigzag(vector<int> &nums)
    {
        int n = nums.size();
        if(n == 1) return 0;
        int a = 0, b = 0;
        for(int i = 0; i < n; i += 2)
        {
            if(i == 0)
            {
                if(nums[i] >= nums[i + 1]) a += nums[i] - nums[i + 1] + 1;
            }
            else if(i == n - 1)
            {
                if(nums[i] >= nums[i - 1]) a += nums[i] - nums[i - 1] + 1;
            }
            else
            {
                if(nums[i] >= nums[i - 1] || nums[i] >= nums[i + 1])
                {
                    a += nums[i] - min(nums[i - 1], nums[i + 1]) + 1;
                }
            }
        }

        for(int i = 1; i < n; i += 2)
        {
            if(i == n - 1)
            {
                if(nums[i] >= nums[i - 1]) b += nums[i] - nums[i - 1] + 1;
            }
            else
            {
                if(nums[i] >= nums[i - 1] || nums[i] >= nums[i + 1])
                {
                    b += nums[i] - min(nums[i - 1], nums[i + 1]) + 1;
                }
            }
        }
        return min(a, b);
    }
};


// Source https://leetcode.com/problems/binary-tree-coloring-game/

Two players play a turn based game on a binary tree. We are given the root of this binary tree, and the number of nodes n in the tree. n is odd, and each node has a distinct value from 1 to n.

Initially, the first player names a value x with 1 <= x <= n, and the second player names a value y with 1 <= y <= n and y != x. 
The first player colors the node with value x red, and the second player colors the node with value y blue.

Then, the players take turns starting with the first player. In each turn, that player chooses a node of their color (red if player 1, blue if player 2) 
and colors an uncolored neighbor of the chosen node (either the left child, right child, or parent of the chosen node.)

If (and only if) a player cannot choose such a node in this way, they must pass their turn. If both players pass their turn, the game ends, and the winner is the player that colored more nodes.

You are the second player. If it is possible to choose such a y to ensure you win the game, return true. If it is not possible, return false.

 

Example 1:


Input: root = [1,2,3,4,5,6,7,8,9,10,11], n = 11, x = 3
Output: true
Explanation: The second player can choose the node with value 2.
Example 2:

Input: root = [1,2,3], n = 3, x = 1
Output: false
 

Constraints:

The number of nodes in the tree is n.
1 <= x <= n <= 100
n is odd.
1 <= Node.val <= n
All the values of the tree are unique.

两个选手轮流给二叉树结点上色，这个二叉树有n个结点，结点值标号是从1到n。每个选手轮流给一个结点上色，选手一上红色，选手二上蓝色，
每个选手只能选择其已经上过色的结点的相连的未上色结点进行上色（即左右子结点和父结点），直到最后两个选手都没法再上色时游戏结束，并且上色的结点多的那个选手获胜。
我们是选手二，而且选手一已经给某个结点x上色了，选手二应该选结点x的左右子结点或者父结点

class Solution
{
public:
    bool btreeGameWinningMove(TreeNode *root, int n, int x)
    {
        int left = 0, right = 0;
        helper(root, x, left, right);
        return max(max(left, right), n - left - right - 1) > n / 2;
    }
    int helper(TreeNode *node, int x, int &left, int &right)
    {
        if (!node) return 0;
        int l = helper(node->left, x, left, right), r = helper(node->right, x, left, right);
        if (node->val == x)
        {
            left = l;
            right = r;
        }
        return l + r + 1;
    }
};


// Source https://leetcode.com/problems/snapshot-array/

Implement a SnapshotArray that supports the following interface:

SnapshotArray(int length) initializes an array-like data structure with the given length.  Initially, each element equals 0.
void set(index, val) sets the element at the given index to be equal to val.
int snap() takes a snapshot of the array and returns the snap_id: the total number of times we called snap() minus 1.
int get(index, snap_id) returns the value at the given index, at the time we took the snapshot with the given snap_id
 

Example 1:

Input: ["SnapshotArray","set","snap","set","get"]
[[3],[0,5],[],[0,6],[0,0]]
Output: [null,null,0,null,5]
Explanation: 
SnapshotArray snapshotArr = new SnapshotArray(3); // set the length to be 3
snapshotArr.set(0,5);  // Set array[0] = 5
snapshotArr.snap();  // Take a snapshot, return snap_id = 0
snapshotArr.set(0,6);
snapshotArr.get(0,0);  // Get the value of array[0] with snap_id = 0, return 5
 

Constraints:

1 <= length <= 50000
At most 50000 calls will be made to set, snap, and get.
0 <= index < length
0 <= snap_id < (the total number of times we call snap())
0 <= val <= 10^9

class SnapshotArray
{
public:
    unordered_map<int, map<int, int>> A;
    int snap_no = 0;

    SnapshotArray(int length)
    {

    }

    void set(int index, int val)
    {
        A[index][snap_no] = val;
    }

    int snap()
    {
        return snap_no++;
    }

    int get(int index, int snap_id)
    {
        auto it = A[index].upper_bound(snap_id);
        return it == begin(A[index]) ? 0 : prev(it)->second;
    }
};


// Source https://leetcode.com/problems/longest-chunked-palindrome-decomposition/

You are given a string text. You should split it to k substrings (subtext1, subtext2, ..., subtextk) such that:

subtexti is a non-empty string.
The concatenation of all the substrings is equal to text (i.e., subtext1 + subtext2 + ... + subtextk == text).
subtexti == subtextk - i + 1 for all valid values of i (i.e., 1 <= i <= k).
Return the largest possible value of k.

 

Example 1:

Input: text = "ghiabcdefhelloadamhelloabcdefghi"
Output: 7
Explanation: We can split the string on "(ghi)(abcdef)(hello)(adam)(hello)(abcdef)(ghi)".
Example 2:

Input: text = "merchant"
Output: 1
Explanation: We can split the string on "(merchant)".
Example 3:

Input: text = "antaprezatepzapreanta"
Output: 11
Explanation: We can split the string on "(a)(nt)(a)(pre)(za)(tpe)(za)(pre)(a)(nt)(a)".
 

Constraints:

1 <= text.length <= 1000
text consists only of lowercase English characters.

class Solution
{
public:
    int longestDecomposition(string text)
    {
        int n = text.size();
        for (int i = 1; i <= n / 2; ++i)
        {
            if (text[0] == text[n - i] && text[i - 1] == text[n - 1])
            {
                if (text.substr(0, i) == text.substr(n - i))
                {
                    return 2 + longestDecomposition(text.substr(i, n - 2 * i));
                }
            }
        }
        return n == 0 ? 0 : 1;
    }
};


// Source https://leetcode.com/problems/day-of-the-year/

Given a string date representing a Gregorian calendar date formatted as YYYY-MM-DD, return the day number of the year.

 

Example 1:

Input: date = "2019-01-09"
Output: 9
Explanation: Given date is the 9th day of the year in 2019.
Example 2:

Input: date = "2019-02-10"
Output: 41
 

Constraints:

date.length == 10
date[4] == date[7] == '-', and all other date[i]'s are digits
date represents a calendar date between Jan 1st, 1900 and Dec 31th, 2019.

class Solution
{
public:
    int dayOfYear(string date)
    {
        vector<int> monthDays{31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
        int res = 0, year = stoi(date.substr(0, 4)), month = stoi(date.substr(5, 2)), day = stoi(date.substr(8, 2));
        bool isLeap = (year % 400 == 0 || (year % 100 != 0 && year % 4 == 0));
        for (int i = 0; i < month - 1; ++i)
        {
            res += monthDays[i];
        }
        if (month > 2 && isLeap)
        {
            ++res;
        }
        return res + day;
    }
};


// Source https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/

You have n dice and each die has k faces numbered from 1 to k.

Given three integers n, k, and target, return the number of possible ways (out of the kn total ways) to roll the dice so the sum of the face-up numbers equals target. 
Since the answer may be too large, return it modulo 109 + 7.

 

Example 1:

Input: n = 1, k = 6, target = 3
Output: 1
Explanation: You throw one die with 6 faces.
There is only one way to get a sum of 3.
Example 2:

Input: n = 2, k = 6, target = 7
Output: 6
Explanation: You throw two dice, each with 6 faces.
There are 6 ways to get a sum of 7: 1+6, 2+5, 3+4, 4+3, 5+2, 6+1.
Example 3:

Input: n = 30, k = 30, target = 500
Output: 222616187
Explanation: The answer must be returned modulo 109 + 7.
 

Constraints:

1 <= n, k <= 30
1 <= target <= 1000

class Solution
{
public:
    const int mod = 1e9 + 7;
    int dp[31][1001];

    int recur(int n, int k, int target)
    {
        if(target < 0) return 0;
        if(n == 0) return target == 0;
        if(dp[n][target] != -1) return dp[n][target];
        long res = 0;
        for(int i = 1; i <= k; i++)
        {
            res += recur(n - 1, k, target - i) % mod;
        }
        return dp[n][target] = res % mod;
    }

    int numRollsToTarget(int n, int k, int target)
    {
        memset(dp, -1, sizeof(dp));
        return recur(n, k, target);
    }
};


// Source https://leetcode.com/problems/swap-for-longest-repeated-character-substring/

You are given a string text. You can swap two of the characters in the text.

Return the length of the longest substring with repeated characters.

 

Example 1:

Input: text = "ababa"
Output: 3
Explanation: We can swap the first 'b' with the last 'a', or the last 'b' with the first 'a'. Then, the longest repeated character substring is "aaa" with length 3.
Example 2:

Input: text = "aaabaaa"
Output: 6
Explanation: Swap 'b' with the last 'a' (or the first 'a'), and we get longest repeated character substring "aaaaaa" with length 6.
Example 3:

Input: text = "aaaaa"
Output: 5
Explanation: No need to swap, longest repeated character substring is "aaaaa" with length is 5.
 

Constraints:

1 <= text.length <= 2 * 104
text consist of lowercase English characters only.

class Solution
{
public:
    int maxRepOpt1(string text)
    {
        int res = 0, n = text.size();
        unordered_map<char, vector<int>> idxMap;
        for (int i = 0; i < n; ++i) idxMap[text[i]].push_back(i);
        for (char c = 'a'; c <= 'z'; ++c)
        {
            if(idxMap[c].empty()) continue; 
            int cnt = 1, cnt2 = 0, mx = 1;
            for (int i = 1; i < idxMap[c].size(); ++i)
            {
                if (idxMap[c][i] == idxMap[c][i - 1] + 1)
                {
                    ++cnt;
                }
                else
                {
                    cnt2 = (idxMap[c][i] == idxMap[c][i - 1] + 2) ? cnt : 0;
                    cnt = 1;
                }
                mx = max(mx, cnt + cnt2);
            }
            res = max(res, mx + (mx < idxMap[c].size() ? 1 : 0));
        }
        return res;
    }
};


// Source https://leetcode.com/problems/online-majority-element-in-subarray/

Design a data structure that efficiently finds the majority element of a given subarray.

The majority element of a subarray is an element that occurs threshold times or more in the subarray.

Implementing the MajorityChecker class:

MajorityChecker(int[] arr) Initializes the instance of the class with the given array arr.
int query(int left, int right, int threshold) returns the element in the subarray arr[left...right] that occurs at least threshold times, or -1 if no such element exists.
 

Example 1:

Input
["MajorityChecker", "query", "query", "query"]
[[[1, 1, 2, 2, 1, 1]], [0, 5, 4], [0, 3, 3], [2, 3, 2]]
Output
[null, 1, -1, 2]

Explanation
MajorityChecker majorityChecker = new MajorityChecker([1, 1, 2, 2, 1, 1]);
majorityChecker.query(0, 5, 4); // return 1
majorityChecker.query(0, 3, 3); // return -1
majorityChecker.query(2, 3, 2); // return 2
 

Constraints:

1 <= arr.length <= 2 * 104
1 <= arr[i] <= 2 * 104
0 <= left <= right < arr.length
threshold <= right - left + 1
2 * threshold > right - left + 1
At most 104 calls will be made to query.

class MajorityChecker
{
public:
    vector<int> nums;
    unordered_map<int, vector<int>> idxMap;

    MajorityChecker(vector<int> &arr)
    {
        for (int i = 0; i < arr.size(); ++i)
        {
            idxMap[arr[i]].push_back(i);
        }
        nums = arr;
    }

    int query(int left, int right, int threshold)
    {
        for (int i = 0; i < 10; ++i)
        {
            int key = nums[left + rand() % (right - left + 1)];
            vector<int> &vec = idxMap[key];
            if (vec.size() < threshold) continue;
            auto it1 = lower_bound(begin(vec), end(vec), left);
            auto it2 = upper_bound(begin(vec), end(vec), right);
            if (it2 - it1 >= threshold) return key;
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/find-words-that-can-be-formed-by-characters/

You are given an array of strings words and a string chars.

A string is good if it can be formed by characters from chars (each character can only be used once).

Return the sum of lengths of all good strings in words.

 

Example 1:

Input: words = ["cat","bt","hat","tree"], chars = "atach"
Output: 6
Explanation: The strings that can be formed are "cat" and "hat" so the answer is 3 + 3 = 6.
Example 2:

Input: words = ["hello","world","leetcode"], chars = "welldonehoneyr"
Output: 10
Explanation: The strings that can be formed are "hello" and "world" so the answer is 5 + 5 = 10.
 

Constraints:

1 <= words.length <= 1000
1 <= words[i].length, chars.length <= 100
words[i] and chars consist of lowercase English letters.

class Solution
{
public:
    int countCharacters(vector<string> &words, string chars)
    {
        int res = 0;
        int charCnt[26] = {0};
        for (char c : chars) ++charCnt[c - 'a'];
        for (string &word : words)
        {
            int arrCnt[26];
            memcpy(arrCnt, charCnt, sizeof(arrCnt));
            bool succeed = true;
            for (char c : word)
            {
                if (--arrCnt[c - 'a'] < 0)
                {
                    succeed = false;
                    break;
                }
            }
            if (succeed) res += word.size();
        }
        return res;
    }
};


// Source https://leetcode.com/problems/maximum-level-sum-of-a-binary-tree/

Given the root of a binary tree, the level of its root is 1, the level of its children is 2, and so on.

Return the smallest level x such that the sum of all the values of nodes at level x is maximal.

 

Example 1:


Input: root = [1,7,0,7,-8,null,null]
Output: 2
Explanation: 
Level 1 sum = 1.
Level 2 sum = 7 + 0 = 7.
Level 3 sum = 7 + -8 = -1.
So we return the level with the maximum sum which is level 2.
Example 2:

Input: root = [989,null,10250,98693,-89388,null,null,null,-32127]
Output: 2
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
-105 <= Node.val <= 105

class Solution
{
public:
    int maxLevelSum(TreeNode *root)
    {
        if (!root) return 0;
        int res = 0, level = 1, sum = INT_MIN;
        queue<TreeNode *> q;
        q.push(root);
        while (!q.empty())
        {
            int sz = q.size(), temp = 0;
            for (int i = 0; i < sz; i++ )
            {
                TreeNode *node = q.front();
                q.pop();
                temp += node->val;
                if (node->left) q.push(node->left);
                if (node->right) q.push(node->right);
            }
            if (temp > sum) res = level;
            sum = max(sum, temp);
            level++;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/as-far-from-land-as-possible/

Given an n x n grid containing only values 0 and 1, where 0 represents water and 1 represents land, find a water cell such that its distance to the nearest land cell is maximized, 
and return the distance. If no land or water exists in the grid, return -1.

The distance used in this problem is the Manhattan distance: the distance between two cells (x0, y0) and (x1, y1) is |x0 - x1| + |y0 - y1|.

 

Example 1:


Input: grid = [[1,0,1],[0,0,0],[1,0,1]]
Output: 2
Explanation: The cell (1, 1) is as far as possible from all the land with distance 2.
Example 2:


Input: grid = [[1,0,0],[0,0,0],[0,0,0]]
Output: 4
Explanation: The cell (2, 2) is as far as possible from all the land with distance 4.
 

Constraints:

n == grid.length
n == grid[i].length
1 <= n <= 100
grid[i][j] is 0 or 1

class Solution
{
public:
    int maxDistance(vector<vector<int>> &grid)
    {
        int n = grid.size();
        vector<vector<int>> dirs{{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
        queue<pair<int, int>> q;
        for (int i = 0; i < n; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                if (grid[i][j] == 0) continue;
                q.push({i, j});
            }
        }
        if (q.size() == 0 || q.size() == n * n) return -1;
        int level = 0;
        while (!q.empty())
        {
            int sz = q.size();
            for (int k = 0; k < sz; ++k)
            {
                auto p = q.front();
                q.pop();
                for (auto &dir : dirs)
                {
                    int x = p.first + dir[0], y = p.second + dir[1];
                    if (x < 0 || x >= n || y < 0 || y >= n || grid[x][y] != 0) continue;
                    grid[x][y] = level + 1;
                    q.push({x, y});
                }
            }
            if (q.empty()) return level;
            ++level;
        }
        return level;
    }
};


// Source https://leetcode.com/problems/last-substring-in-lexicographical-order/

Given a string s, return the last substring of s in lexicographical order.

 

Example 1:

Input: s = "abab"
Output: "bab"
Explanation: The substrings are ["a", "ab", "aba", "abab", "b", "ba", "bab"]. The lexicographically maximum substring is "bab".
Example 2:

Input: s = "leetcode"
Output: "tcode"
 

Constraints:

1 <= s.length <= 4 * 105
s contains only lowercase English letters.

class Solution
{
public:
    string lastSubstring(string s)
    {
        int n = s.length();
        int max_ind = n - 1, i = n - 2;
        while (i >= 0)
        {
            if (s[i] < s[max_ind])
            {
                --i;
                continue;
            }
            if (s[i] > s[max_ind])
            {
                max_ind = i;
                --i;
                continue;
            }
            if (max_ind == n - 1)
            {
                max_ind = i;
                --i;
                continue;
            }
            int j = 1;
            while (max_ind + j < n && s[i + j] == s[max_ind + j] && i + j != max_ind) j++;
            if (max_ind + j >= n || s[i + j] >= s[max_ind + j])
            {
                max_ind = i;
            }
            --i;
        }
        return s.substr(max_ind);
    }
};


// Source https://leetcode.com/problems/invalid-transactions/

A transaction is possibly invalid if:

the amount exceeds $1000, or;
if it occurs within (and including) 60 minutes of another transaction with the same name in a different city.
You are given an array of strings transaction where transactions[i] consists of comma-separated values representing the name, time (in minutes), amount, and city of the transaction.

Return a list of transactions that are possibly invalid. You may return the answer in any order.

 

Example 1:

Input: transactions = ["alice,20,800,mtv","alice,50,100,beijing"]
Output: ["alice,20,800,mtv","alice,50,100,beijing"]
Explanation: The first transaction is invalid because the second transaction occurs within a difference of 60 minutes, have the same name and is in a different city. Similarly the second one is invalid too.
Example 2:

Input: transactions = ["alice,20,800,mtv","alice,50,1200,mtv"]
Output: ["alice,50,1200,mtv"]
Example 3:

Input: transactions = ["alice,20,800,mtv","bob,50,1200,mtv"]
Output: ["bob,50,1200,mtv"]
 

Constraints:

transactions.length <= 1000
Each transactions[i] takes the form "{name},{time},{amount},{city}"
Each {name} and {city} consist of lowercase English letters, and have lengths between 1 and 10.
Each {time} consist of digits, and represent an integer between 0 and 1000.
Each {amount} consist of digits, and represent an integer between 0 and 2000.

class transaction
{
public:
    int time;
    int amount;
    string city;
    string tran;
    bool marked;

    transaction (int t, int a, string c, string tr)
    {
        tran = tr;
        time = t;
        amount = a;
        city = c;
        marked = false;
    }
};

class Solution
{
public:
    vector<string> invalidTransactions(vector<string> &transactions)
    {
        if(transactions.empty())
            return {};

        unordered_map<string, vector<transaction *>> trans;

        for(string &st : transactions)
        {
            istringstream ss(st);
            string token = "";

            getline(ss, token, ',');
            string name = token;
            getline(ss, token, ',');
            int time = stoi(token);
            getline(ss, token, ',');
            int amount = stoi(token);
            getline(ss, token, ',');
            string city = token;

            transaction *t = new transaction(time, amount, city, st);
            trans[name].push_back(t);
        }
        vector<string> result;

        for(auto &p : trans)
        {
            sort(p.second.begin(), p.second.end(), [](const transaction * a, const transaction * b)
            {
                return a->time < b->time;
            });
            for(int i = 0; i < p.second.size(); i++)
            {
                if(p.second[i]->amount > 1000)
                {
                    result.push_back(p.second[i]->tran);
                    p.second[i]->marked = true;
                }

                if(i > 0 && p.second[i]->time <= p.second[i - 1]->time + 60)
                {
                    int r = i - 1;
                    while(r >= 0 && p.second[r]->time >= p.second[i]->time - 60)
                    {
                        if(p.second[i]->city != p.second[r]->city)
                        {
                            if(!p.second[r]->marked)
                            {
                                result.push_back(p.second[r]->tran);
                                p.second[r]->marked = true;
                            }
                            if(!p.second[i]->marked)
                            {
                                result.push_back(p.second[i]->tran);
                                p.second[i]->marked = true;
                            }
                        }
                        r--;
                    }
                }
            }
            for(int i = 0; i < p.second.size(); i++)
           {
               delete p.second[i];
           }
        }
        return result;
    }
};


// Source https://leetcode.com/problems/compare-strings-by-frequency-of-the-smallest-character/

Let the function f(s) be the frequency of the lexicographically smallest character in a non-empty string s. For example, if s = "dcce" then f(s) = 2 
because the lexicographically smallest character is 'c', which has a frequency of 2.

You are given an array of strings words and another array of query strings queries. For each query queries[i], count the number of words in words such that f(queries[i]) < f(W) for each W in words.

Return an integer array answer, where each answer[i] is the answer to the ith query.

 

Example 1:

Input: queries = ["cbd"], words = ["zaaaz"]
Output: [1]
Explanation: On the first query we have f("cbd") = 1, f("zaaaz") = 3 so f("cbd") < f("zaaaz").
Example 2:

Input: queries = ["bbb","cc"], words = ["a","aa","aaa","aaaa"]
Output: [1,2]
Explanation: On the first query only f("bbb") < f("aaaa"). On the second query both f("aaa") and f("aaaa") are both > f("cc").
 

Constraints:

1 <= queries.length <= 2000
1 <= words.length <= 2000
1 <= queries[i].length, words[i].length <= 10
queries[i][j], words[i][j] consist of lowercase English letters.

class Solution
{
public:

    int f(string &s)
    {
        sort(s.begin(), s.end());
        for (int i = 1; i < s.size(); ++i)
        {
            if (s[i] != s[0]) return i;
        }
        return s.size();
    }

    vector<int> numSmallerByFrequency(vector<string> &queries, vector<string> &words)
    {
        vector<int> res, freq(12);
        for (string &word : words)
        {
            ++freq[f(word)];
        }
        for (int i = 9; i >= 0; --i)
        {
            freq[i] += freq[i + 1];
        }
        for (string &query : queries)
        {
            int cnt = f(query);
            res.push_back(freq[cnt + 1]);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/remove-zero-sum-consecutive-nodes-from-linked-list/

Given the head of a linked list, we repeatedly delete consecutive sequences of nodes that sum to 0 until there are no such sequences.

After doing so, return the head of the final linked list.  You may return any such answer.

 

(Note that in the examples below, all sequences are serializations of ListNode objects.)

Example 1:

Input: head = [1,2,-3,3,1]
Output: [3,1]
Note: The answer [1,2,1] would also be accepted.
Example 2:

Input: head = [1,2,3,-3,4]
Output: [1,2,4]
Example 3:

Input: head = [1,2,3,-3,-2]
Output: [1]
 

Constraints:

The given linked list will contain between 1 and 1000 nodes.
Each node in the linked list has -1000 <= node.val <= 1000.

class Solution
{
public:
    ListNode *removeZeroSumSublists(ListNode *head)
    {
        int sum = 0;
        unordered_map<int, ListNode *> m;
        ListNode *root = new ListNode(0);
        root->next = head;
        m[0] = root;
        ListNode *curr = head;
        while(curr != NULL)
        {
            sum = sum + curr->val;
            if(m.find(sum) == m.end())
            {
                m[sum] = curr;
               curr = curr->next;
            }
            else
            {
                ListNode *prev = m[sum];
                int csum = sum;
                ListNode *temp = prev->next;
                while(temp != curr)
                {
                    csum += temp->val;
                    m.erase(csum);
                    temp = temp->next;
                }
                prev->next = curr->next;
                curr = curr->next;
            }
        }
        ListNode * res= root->next;
        delete root;
        return res;
    }
};


// Source https://leetcode.com/problems/dinner-plate-stacks/

You have an infinite number of stacks arranged in a row and numbered (left to right) from 0, each of the stacks has the same maximum capacity.

Implement the DinnerPlates class:

DinnerPlates(int capacity) Initializes the object with the maximum capacity of the stacks capacity.
void push(int val) Pushes the given integer val into the leftmost stack with a size less than capacity.
int pop() Returns the value at the top of the rightmost non-empty stack and removes it from that stack, and returns -1 if all the stacks are empty.
int popAtStack(int index) Returns the value at the top of the stack with the given index index and removes it from that stack or returns -1 if the stack with that given index is empty.
 

Example 1:

Input
["DinnerPlates", "push", "push", "push", "push", "push", "popAtStack", "push", "push", "popAtStack", "popAtStack", "pop", "pop", "pop", "pop", "pop"]
[[2], [1], [2], [3], [4], [5], [0], [20], [21], [0], [2], [], [], [], [], []]
Output
[null, null, null, null, null, null, 2, null, null, 20, 21, 5, 4, 3, 1, -1]

Explanation: 
DinnerPlates D = DinnerPlates(2);  // Initialize with capacity = 2
D.push(1);
D.push(2);
D.push(3);
D.push(4);
D.push(5);         // The stacks are now:  2  4
                                           1  3  5
                                           ﹈ ﹈ ﹈
D.popAtStack(0);   // Returns 2.  The stacks are now:     4
                                                       1  3  5
                                                       ﹈ ﹈ ﹈
D.push(20);        // The stacks are now: 20  4
                                           1  3  5
                                           ﹈ ﹈ ﹈
D.push(21);        // The stacks are now: 20  4 21
                                           1  3  5
                                           ﹈ ﹈ ﹈
D.popAtStack(0);   // Returns 20.  The stacks are now:     4 21
                                                        1  3  5
                                                        ﹈ ﹈ ﹈
D.popAtStack(2);   // Returns 21.  The stacks are now:     4
                                                        1  3  5
                                                        ﹈ ﹈ ﹈ 
D.pop()            // Returns 5.  The stacks are now:      4
                                                        1  3 
                                                        ﹈ ﹈  
D.pop()            // Returns 4.  The stacks are now:   1  3 
                                                        ﹈ ﹈   
D.pop()            // Returns 3.  The stacks are now:   1 
                                                        ﹈   
D.pop()            // Returns 1.  There are no stacks.
D.pop()            // Returns -1.  There are still no stacks.
 

Constraints:

1 <= capacity <= 2 * 104
1 <= val <= 2 * 104
0 <= index <= 105
At most 2 * 105 calls will be made to push, pop, and popAtStack.

class DinnerPlates
{
public:
    vector<vector<int> *> t;
    int capacity, last_id;
    set<int> indexes;

    DinnerPlates(int capacity)
    {
        this->capacity = capacity, last_id = -1;
    }

    void push(int val)
    {
        if(indexes.empty())
        {
            last_id++;
            if (last_id == t.size()) t.push_back(new vector<int>());
            t[last_id]->push_back(val);
            if(t[last_id]->size() < capacity) indexes.insert(last_id);
        }
        else
        {
            int id = *indexes.begin();
            t[id]->push_back(val);
            if(t[id]->size() == capacity) indexes.erase(id);
        }
    }

    int pop()
    {
        if(last_id == -1) return -1;

        int result = t[last_id]->back();
        t[last_id]->pop_back();

        if( t[last_id]->empty() )
        {
            while(last_id != -1 && t[last_id]->empty())
            {
                indexes.erase(last_id);
                last_id--;
            }
        }
        else indexes.insert(last_id);

        return result;
    }

    int popAtStack(int index)
    {
        if(index < 0 || index > last_id || t[index]->empty()) return -1;

        if(index == last_id) return pop();
        else
        {
            int result = t[index]->back();
            t[index]->pop_back();

            indexes.insert(index);

            return result;
        }
    }
};


// Source https://leetcode.com/problems/prime-arrangements/

Return the number of permutations of 1 to n so that prime numbers are at prime indices (1-indexed.)

(Recall that an integer is prime if and only if it is greater than 1, and cannot be written as a product of two positive integers both smaller than it.)

Since the answer may be large, return the answer modulo 10^9 + 7.

 

Example 1:

Input: n = 5
Output: 12
Explanation: For example [1,2,5,4,3] is a valid permutation, but [5,2,3,4,1] is not because the prime number 5 is at index 1.
Example 2:

Input: n = 100
Output: 682289015
 

Constraints:

1 <= n <= 100

class Solution
{
public:
    int numPrimeArrangements(int n)
    {
        vector<bool> prime(105, true);
        prime[0] = false;
        prime[1] = false;
        for (int i = 2; i * i <= n; ++i)
        {
            if (prime[i])
            {
                for (int factor = 2; factor * i <= n; ++factor)
                {
                    prime[factor * i] = false;
                }
            }
        }
        long cnt = 0;
        for (int i = 1; i <= n; ++i)
        {
            if (prime[i]) ++cnt;
        }
        long res = 1, M = 1e9 + 7;
        for (int i = 1; i <= cnt; ++i)
        {
            res = res * i % M;
        }
        for (int i = 1; i <= n - cnt; ++i)
        {
            res = res * i % M;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/can-make-palindrome-from-substring/

You are given a string s and array queries where queries[i] = [lefti, righti, ki]. We may rearrange the substring s[lefti...righti] for each query 
and then choose up to ki of them to replace with any lowercase English letter.

If the substring is possible to be a palindrome string after the operations above, the result of the query is true. Otherwise, the result is false.

Return a boolean array answer where answer[i] is the result of the ith query queries[i].

Note that each letter is counted individually for replacement, so if, for example s[lefti...righti] = "aaa", and ki = 2, we can only replace two of the letters. Also, note that no query modifies the initial string s.

 

Example :

Input: s = "abcda", queries = [[3,3,0],[1,2,0],[0,3,1],[0,3,2],[0,4,1]]
Output: [true,false,false,true,true]
Explanation:
queries[0]: substring = "d", is palidrome.
queries[1]: substring = "bc", is not palidrome.
queries[2]: substring = "abcd", is not palidrome after replacing only 1 character.
queries[3]: substring = "abcd", could be changed to "abba" which is palidrome. Also this can be changed to "baab" first rearrange it "bacd" then replace "cd" with "ab".
queries[4]: substring = "abcda", could be changed to "abcba" which is palidrome.
Example 2:

Input: s = "lyb", queries = [[0,1,0],[2,2,1]]
Output: [false,true]
 

Constraints:

1 <= s.length, queries.length <= 105
0 <= lefti <= righti < s.length
0 <= ki <= s.length
s consists of lowercase English letters.

We may rearrange the substring s[lefti...righti] for each query and then choose up to ki of them to replace with any lowercase English letter.

class Solution
{
public:
    vector<bool> canMakePaliQueries(string s, vector<vector<int>> &queries)
    {
        int n = s.size();
        vector<vector<int>> cnt(n + 1, vector<int>(26));
        for (int i = 0; i < n; ++i)
        {
            cnt[i + 1] = cnt[i];
            ++cnt[i + 1][s[i] - 'a'];
        }
        vector<bool> res;
        for (auto &query : queries)
        {
            int sum = 0;
            for (int i = 0; i < 26; ++i)
            {
                sum += (cnt[query[1] + 1][i] - cnt[query[0]][i]) % 2;
            }
            res.push_back(sum / 2 <= query[2]);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/number-of-valid-words-for-each-puzzle/

With respect to a given puzzle string, a word is valid if both the following conditions are satisfied:
word contains the first letter of puzzle.
For each letter in word, that letter is in puzzle.
For example, if the puzzle is "abcdefg", then valid words are "faced", "cabbage", and "baggage", while
invalid words are "beefed" (does not include 'a') and "based" (includes 's' which is not in the puzzle).
Return an array answer, where answer[i] is the number of words in the given word list words that is valid with respect to the puzzle puzzles[i].
 

Example 1:

Input: words = ["aaaa","asas","able","ability","actt","actor","access"], puzzles = ["aboveyz","abrodyz","abslute","absoryz","actresz","gaswxyz"]
Output: [1,1,3,2,4,0]
Explanation: 
1 valid word for "aboveyz" : "aaaa" 
1 valid word for "abrodyz" : "aaaa"
3 valid words for "abslute" : "aaaa", "asas", "able"
2 valid words for "absoryz" : "aaaa", "asas"
4 valid words for "actresz" : "aaaa", "asas", "actt", "access"
There are no valid words for "gaswxyz" cause none of the words in the list contains letter 'g'.
Example 2:

Input: words = ["apple","pleas","please"], puzzles = ["aelwxyz","aelpxyz","aelpsxy","saelpxy","xaelpsy"]
Output: [0,1,3,2,0]
 

Constraints:

1 <= words.length <= 105
4 <= words[i].length <= 50
1 <= puzzles.length <= 104
puzzles[i].length == 7
words[i] and puzzles[i] consist of lowercase English letters.
Each puzzles[i] does not contain repeated characters.

class Solution
{
public:
    vector<int> findNumOfValidWords(vector<string> &words, vector<string> &puzzles)
    {
        vector<int> res;
        unordered_map<int, int> maskMap;
        for (string &word : words)
        {
            int mask = 0;
            for (char c : word)
            {
                mask |= 1 << (c - 'a');
            }
            ++maskMap[mask];
        }
        for (string &puzzle : puzzles)
        {
            int mask = 0;
            for (char c : puzzle)
            {
                mask |= 1 << (c - 'a');
            }
            int sub = mask, cnt = 0, first = 1 << (puzzle[0] - 'a');
            while (true)
            {
                if ((sub & first) == first && maskMap.count(sub))
                {
                    cnt += maskMap[sub];
                }
                if (sub == first) break;
                sub = (sub - 1) & mask;
            }
            res.push_back(cnt);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/distance-between-bus-stops/

A bus has n stops numbered from 0 to n - 1 that form a circle. We know the distance between all pairs of neighboring stops 
where distance[i] is the distance between the stops number i and (i + 1) % n.

The bus goes along both directions i.e. clockwise and counterclockwise.

Return the shortest distance between the given start and destination stops.

 

Example 1:



Input: distance = [1,2,3,4], start = 0, destination = 1
Output: 1
Explanation: Distance between 0 and 1 is 1 or 9, minimum is 1.
 

Example 2:



Input: distance = [1,2,3,4], start = 0, destination = 2
Output: 3
Explanation: Distance between 0 and 2 is 3 or 7, minimum is 3.
 

Example 3:



Input: distance = [1,2,3,4], start = 0, destination = 3
Output: 4
Explanation: Distance between 0 and 3 is 6 or 4, minimum is 4.
 

Constraints:

1 <= n <= 10^4
distance.length == n
0 <= start, destination < n
0 <= distance[i] <= 10^4

class Solution
{
public:
    int distanceBetweenBusStops(vector<int> &distance, int start, int destination)
    {
        int sum1 = 0, sum2 = 0, n = distance.size();
        if (start > destination) swap(start, destination);
        for (int i = 0; i < n; ++i)
        {
            if (i >= start && i < destination)
            {
                sum1 += distance[i];
            }
            else
            {
                sum2 += distance[i];
            }
        }
        return min(sum1, sum2);
    }
};


// Source https://leetcode.com/problems/day-of-the-week/

Given a date, return the corresponding day of the week for that date.

The input is given as three integers representing the day, month and year respectively.

Return the answer as one of the following values {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}.

 

Example 1:

Input: day = 31, month = 8, year = 2019
Output: "Saturday"
Example 2:

Input: day = 18, month = 7, year = 1999
Output: "Sunday"
Example 3:

Input: day = 15, month = 8, year = 1993
Output: "Sunday"
 

Constraints:

The given dates are valid dates between the years 1971 and 2100.

1970.12.31 星期四

class Solution
{
public:
    bool isLeapYear(int year)
    {
        return year % 400 == 0 || (year % 100 != 0 && year % 4 == 0);
    }

    string dayOfTheWeek(int day, int month, int year)
    {
        int totalDays = 0;
        vector<int> monthDays{0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
        vector<string> days{"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
        for (int i = 1971; i < year; ++i)
        {
            totalDays += isLeapYear(i) ? 366 : 365;
        }
        for (int i = 1; i < month; ++i)
        {
            totalDays += monthDays[i];
        }
        if (month > 2 && isLeapYear(year)) ++totalDays;
        totalDays += day; // totalDays为1 对应 1971.1.1
        return days[(totalDays + 4) % 7];
    }
};


// Source https://leetcode.com/problems/maximum-subarray-sum-with-one-deletion/

Given an array of integers, return the maximum sum for a non-empty subarray (contiguous elements) with at most one element deletion. 
In other words, you want to choose a subarray and optionally delete one element from it so that there is still at least one element left 
and the sum of the remaining elements is maximum possible.

Note that the subarray needs to be non-empty after deleting one element.

 

Example 1:

Input: arr = [1,-2,0,3]
Output: 4
Explanation: Because we can choose [1, -2, 0, 3] and drop -2, thus the subarray [1, 0, 3] becomes the maximum value.
Example 2:

Input: arr = [1,-2,-2,3]
Output: 3
Explanation: We just choose [3] and it's the maximum sum.
Example 3:

Input: arr = [-1,-1,-1,-1]
Output: -1
Explanation: The final subarray needs to be non-empty. You can't choose [-1] and delete -1 from it, then get an empty subarray to make the sum equals to 0.
 

Constraints:

1 <= arr.length <= 105
-104 <= arr[i] <= 104

cd[i] = max(c[i-1], cd[i-1] + arr[i]);
c[i] = max(arr[i], c[i-1] + arr[i]);
ans = max(ans, max(c[i], cd[i]));

c[0] = arr[0]
cd[0] = 0

class Solution
{
public:
    int maximumSum(vector<int> &arr)
    {
        int n = arr.size();
        vector<int> c(n);
        vector<int> cd(n);
        c[0] = arr[0];
        cd[0] = 0;
        int ans = c[0];
        for(int i = 1; i < arr.size(); i++)
        {
            cd[i] = max(c[i-1], cd[i-1] + arr[i]);
            c[i] = max(arr[i], c[i-1] + arr[i]);
            ans = max(ans, max(cd[i], c[i]));
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/make-array-strictly-increasing/

Given two integer arrays arr1 and arr2, return the minimum number of operations (possibly zero) needed to make arr1 strictly increasing.

In one operation, you can choose two indices 0 <= i < arr1.length and 0 <= j < arr2.length and do the assignment arr1[i] = arr2[j].

If there is no way to make arr1 strictly increasing, return -1.

 

Example 1:

Input: arr1 = [1,5,3,6,7], arr2 = [1,3,2,4]
Output: 1
Explanation: Replace 5 with 2, then arr1 = [1, 2, 3, 6, 7].
Example 2:

Input: arr1 = [1,5,3,6,7], arr2 = [4,3,1]
Output: 2
Explanation: Replace 5 with 3 and then replace 3 with 4. arr1 = [1, 3, 4, 6, 7].
Example 3:

Input: arr1 = [1,5,3,6,7], arr2 = [1,6,3,3]
Output: -1
Explanation: You can't make arr1 strictly increasing.
 

Constraints:

1 <= arr1.length, arr2.length <= 2000
0 <= arr1[i], arr2[i] <= 10^9

class Solution
{
public:
    int n, m;
    short dp[2001][2001][2];

    int solve(vector<int> &arr1, vector<int> &arr2, int i, int j, int prev)
    {
        if(i >= n) return 0;
        int k = upper_bound(arr2.begin() + j, arr2.end(), prev) - arr2.begin();
        int t = 0;
        if(prev < arr1[i]) t = 1;
        if(dp[i][k][t] != -1) return dp[i][k][t];
        int res = 2001;
        if(k >= m && arr1[i] <= prev) return res;
        if(k < m) res = min(res, 1 + solve(arr1, arr2, i + 1, k + 1, arr2[k]));
        if(prev < arr1[i]) res = min(res, solve(arr1, arr2, i + 1, k, arr1[i]));
        return dp[i][k][t] = res;
    }

    int makeArrayIncreasing(vector<int> &arr1, vector<int> &arr2)
    {
        sort(arr2.begin(), arr2.end());
        n = arr1.size();
        m = arr2.size();
        memset(dp, -1, sizeof(dp));
        int ans = solve(arr1, arr2, 0, 0, INT_MIN);
        if(ans > 2000) return -1;
        return ans;
    }
};


// Source https://leetcode.com/problems/maximum-number-of-balloons/

Given a string text, you want to use the characters of text to form as many instances of the word "balloon" as possible.

You can use each character in text at most once. Return the maximum number of instances that can be formed.

 

Example 1:



Input: text = "nlaebolko"
Output: 1
Example 2:



Input: text = "loonbalxballpoon"
Output: 2
Example 3:

Input: text = "leetcode"
Output: 0
 

Constraints:

1 <= text.length <= 104
text consists of lower case English letters only.

class Solution
{
public:
    int maxNumberOfBalloons(string text)
    {
        unordered_map<char, int> charCnt;
        for (char c : text) ++charCnt[c];
        int res = INT_MAX;
        string balloon = "balloon";
        for (char c : balloon)
        {
            if (c == 'l' || c == 'o') res = min(res, charCnt[c] / 2);
            else res = min(res, charCnt[c]);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/reverse-substrings-between-each-pair-of-parentheses/

You are given a string s that consists of lower case English letters and brackets.

Reverse the strings in each pair of matching parentheses, starting from the innermost one.

Your result should not contain any brackets.

 

Example 1:

Input: s = "(abcd)"
Output: "dcba"
Example 2:

Input: s = "(u(love)i)"
Output: "iloveu"
Explanation: The substring "love" is reversed first, then the whole string is reversed.
Example 3:

Input: s = "(ed(et(oc))el)"
Output: "leetcode"
Explanation: First, we reverse the substring "oc", then "etco", and finally, the whole string.
 

Constraints:

1 <= s.length <= 2000
s only contains lower case English characters and parentheses.
It is guaranteed that all parentheses are balanced.

class Solution
{
public:
    string reverseParentheses(string s)
    {
        string res;
        vector<int> pos;
        for (char c : s)
        {
            if (c == '(')
            {
                pos.push_back(res.size());
            }
            else if (c == ')')
            {
                int idx = pos.back();
                pos.pop_back();
                reverse(res.begin() + idx, res.end());
            }
            else
            {
                res.push_back(c);
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/k-concatenation-maximum-sum/

Given an integer array arr and an integer k, modify the array by repeating it k times.

For example, if arr = [1, 2] and k = 3 then the modified array will be [1, 2, 1, 2, 1, 2].

Return the maximum sub-array sum in the modified array. Note that the length of the sub-array can be 0 and its sum in that case is 0.

As the answer can be very large, return the answer modulo 109 + 7.

 

Example 1:

Input: arr = [1,2], k = 3
Output: 9
Example 2:

Input: arr = [1,-2,1], k = 5
Output: 2
Example 3:

Input: arr = [-1,-2], k = 7
Output: 0
 

Constraints:

1 <= arr.length <= 105
1 <= k <= 105
-104 <= arr[i] <= 104

class Solution
{
public:
    int helper(vector<int> &arr)
    {
        int curSum = 0, maxSum = INT_MIN;
        for(int val : arr)
        {
            curSum = max(curSum + val, val);
            maxSum = max(maxSum, curSum);
        }
        return maxSum;
    }

    int kConcatenationMaxSum(vector<int> &arr, int k)
    {
        const int mod = 1e9 + 7;
        if(k == 1)
        {
            int ans = helper(arr);
            if (ans <= 0) return 0;
            return ans % mod;
        }
        int n = arr.size();
        int sum = 0;
        for(int val : arr)
        {
            sum = (sum + val) % mod;
        }
        arr.reserve(2 * n);
        for (int i = 0; i < n; ++i)
        {
            arr.push_back(arr[i]);
        }
        int ans = helper(arr);
        if (ans <= 0) return 0;
        ans = ans % mod;
        if (k == 2 || sum <= 0) return ans;
        ans = (ans  + long(k - 2) * sum) % mod;
        return ans;
    }
};


// Source https://leetcode.com/problems/critical-connections-in-a-network/

There are n servers numbered from 0 to n - 1 connected by undirected server-to-server connections forming a network 
where connections[i] = [ai, bi] represents a connection between servers ai and bi. Any server can reach other servers directly or indirectly through the network.

A critical connection is a connection that, if removed, will make some servers unable to reach some other server.

Return all critical connections in the network in any order.

 

Example 1:


Input: n = 4, connections = [[0,1],[1,2],[2,0],[1,3]]
Output: [[1,3]]
Explanation: [[3,1]] is also accepted.
Example 2:

Input: n = 2, connections = [[0,1]]
Output: [[0,1]]
 

Constraints:

2 <= n <= 105
n - 1 <= connections.length <= 105
0 <= ai, bi <= n - 1
ai != bi
There are no repeated connections.

class Solution
{
public:
    vector<vector<int>> ans;

    void dfs(int node, int parent, vector<int> &vis, vector<int> &tin, vector<int> &low, int &timer, vector<vector<int>> &adj)
    {
        vis[node] = 1;
        tin[node] = low[node] = timer++;
        for(auto it : adj[node])
        {
            if(it == parent)
            {
                continue;
            }
            if(!vis[it])
            {
                dfs(it, node, vis, tin, low, timer, adj);
                low[node] = min(low[node], low[it]);
                if(low[it] > tin[node])
                {
                    ans.push_back({node, it});
                }
            }
            else
            {
                low[node] = min(low[node], tin[it]);
            }
        }
    }

    vector<vector<int>> criticalConnections(int n, vector<vector<int>> &c)
    {
        vector<vector<int>> adj(n);
        for(int i = 0 ; i < c.size() ; i++)
        {
            adj[c[i][0]].push_back(c[i][1]);
            adj[c[i][1]].push_back(c[i][0]);
        }
        vector<int> vis(n, 0) ;
        vector<int> tin(n, 0) ;
        vector<int> low(n, 0);
        int timer = 1;
        for(int i = 0 ; i < n ; i++)
        {
            if(!vis[i])
            {
                dfs(i, -1, vis, tin, low, timer, adj);
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/fizz-buzz-multithreaded/

You have the four functions:

printFizz that prints the word "Fizz" to the console,
printBuzz that prints the word "Buzz" to the console,
printFizzBuzz that prints the word "FizzBuzz" to the console, and
printNumber that prints a given integer to the console.
You are given an instance of the class FizzBuzz that has four functions: fizz, buzz, fizzbuzz and number. The same instance of FizzBuzz will be passed to four different threads:

Thread A: calls fizz() that should output the word "Fizz".
Thread B: calls buzz() that should output the word "Buzz".
Thread C: calls fizzbuzz() that should output the word "FizzBuzz".
Thread D: calls number() that should only output the integers.
Modify the given class to output the series [1, 2, "Fizz", 4, "Buzz", ...] where the ith token (1-indexed) of the series is:

"FizzBuzz" if i is divisible by 3 and 5,
"Fizz" if i is divisible by 3 and not 5,
"Buzz" if i is divisible by 5 and not 3, or
i if i is not divisible by 3 or 5.
Implement the FizzBuzz class:

FizzBuzz(int n) Initializes the object with the number n that represents the length of the sequence that should be printed.
void fizz(printFizz) Calls printFizz to output "Fizz".
void buzz(printBuzz) Calls printBuzz to output "Buzz".
void fizzbuzz(printFizzBuzz) Calls printFizzBuzz to output "FizzBuzz".
void number(printNumber) Calls printnumber to output the numbers.
 

Example 1:

Input: n = 15
Output: [1,2,"fizz",4,"buzz","fizz",7,8,"fizz","buzz",11,"fizz",13,14,"fizzbuzz"]
Example 2:

Input: n = 5
Output: [1,2,"fizz",4,"buzz"]
 

Constraints:

1 <= n <= 50

class FizzBuzz
{
private:
    int n;
    int num;
    std::mutex gLock;
    std::condition_variable cv;

public:
    FizzBuzz(int n)
    {
        this->n = n;
        num = 1;
    }

    // printFizz() outputs "fizz".
    void fizz(function<void()> printFizz)
    {
        std::unique_lock<std::mutex> gl(gLock);
        while (true)
        {
            cv.wait(gl, [this] {return (num > n) || (num % 3 == 0 && num % 5 != 0);});
            if (num > n)
            {
                break;
            }
            printFizz();
            num++;
            cv.notify_all();
        }
    }

    // printBuzz() outputs "buzz".
    void buzz(function<void()> printBuzz)
    {
        std::unique_lock<std::mutex> gl(gLock);
        while (true)
        {
            cv.wait(gl, [this] {return (num > n) || (num % 3 != 0 && num % 5 == 0);});
            if (num > n)
            {
                break;
            }
            printBuzz();
            num++;
            cv.notify_all();
        }
    }

    // printFizzBuzz() outputs "fizzbuzz".
    void fizzbuzz(function<void()> printFizzBuzz)
    {
        std::unique_lock<std::mutex> gl(gLock);
        while (true)
        {
            cv.wait(gl, [this] {return (num > n) || (num % 3 == 0 && num % 5 == 0);});
            if (num > n)
            {
                break;
            }
            printFizzBuzz();
            num++;
            cv.notify_all();
        }
    }

    // printNumber(x) outputs "x", where x is an integer.
    void number(function<void(int)> printNumber)
    {
        std::unique_lock<std::mutex> gl(gLock);
        while (true)
        {
            cv.wait(gl, [this] {return (num > n) || (num % 3 != 0 && num % 5 != 0);});
            if (num > n)
            {
                break;
            }
            printNumber(num);
            num++;
            cv.notify_all();
        }
    }
};


// Source https://leetcode.com/problems/minimum-absolute-difference/

Given an array of distinct integers arr, find all pairs of elements with the minimum absolute difference of any two elements.

Return a list of pairs in ascending order(with respect to pairs), each pair [a, b] follows

a, b are from arr
a < b
b - a equals to the minimum absolute difference of any two elements in arr
 

Example 1:

Input: arr = [4,2,1,3]
Output: [[1,2],[2,3],[3,4]]
Explanation: The minimum absolute difference is 1. List all pairs with difference equal to 1 in ascending order.
Example 2:

Input: arr = [1,3,6,10,15]
Output: [[1,3]]
Example 3:

Input: arr = [3,8,-10,23,19,-4,-14,27]
Output: [[-14,-10],[19,23],[23,27]]
 

Constraints:

2 <= arr.length <= 105
-106 <= arr[i] <= 106

class Solution
{
public:
    vector<vector<int>> minimumAbsDifference(vector<int> &arr)
    {
        vector<vector<int>> res;
        int n = arr.size(), mn = INT_MAX;
        sort(arr.begin(), arr.end());
        for (int i = 1; i < n; ++i)
        {
            int diff = arr[i] - arr[i - 1];
            if (diff <= mn)
            {
                if (diff < mn) res.clear();
                mn = diff;
                res.push_back({arr[i - 1], arr[i]});
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/ugly-number-iii/

An ugly number is a positive integer that is divisible by a, b, or c.

Given four integers n, a, b, and c, return the nth ugly number.

 

Example 1:

Input: n = 3, a = 2, b = 3, c = 5
Output: 4
Explanation: The ugly numbers are 2, 3, 4, 5, 6, 8, 9, 10... The 3rd is 4.
Example 2:

Input: n = 4, a = 2, b = 3, c = 4
Output: 6
Explanation: The ugly numbers are 2, 3, 4, 6, 8, 9, 10, 12... The 4th is 6.
Example 3:

Input: n = 5, a = 2, b = 11, c = 13
Output: 10
Explanation: The ugly numbers are 2, 4, 6, 8, 10, 11, 12, 13... The 5th is 10.
 

Constraints:

1 <= n, a, b, c <= 109
1 <= a * b * c <= 1018
It is guaranteed that the result will be in range [1, 2 * 109].

mid / a = cnt(只是a的倍数) + cnt(只是a和b的倍数) + cnt(只是a和c的倍数)+ cnt(只是a和b和c的倍数)
mid / b = cnt(只是b的倍数) + cnt(只是b和a的倍数) + cnt(只是b和c的倍数)+ cnt(只是b和a和c的倍数)
mid / c = cnt(只是c的倍数) + cnt(只是c和a的倍数) + cnt(只是c和b的倍数)+ cnt(只是c和a和b的倍数)
mid / ab = cnt(只是a和b的倍数) + cnt(只是a和b和c的倍数)
mid / bc = cnt(只是b和c的倍数) + cnt(只是b和a和c的倍数)
mid / ca = cnt(只是c和a的倍数) + cnt(只是c和a和b的倍数)

mid / a + mid / b + mid / c = cnt(只是a的倍数) + cnt(只是b的倍数) + cnt(只是c的倍数) + 2 * ( cnt(只是a和b的倍数) + cnt(只是a和c的倍数) + cnt(只是b和c的倍数) ) + 3 * cnt(只是a和b和c的倍数)

( mid / a + mid / b + mid / c ) - ( cnt(只是a和b的倍数) + cnt(只是a和c的倍数) + cnt(只是b和c的倍数) ) - 2 * cnt(只是a和b和c的倍数)
=
cnt(只是a的倍数) + cnt(只是b的倍数) + cnt(只是c的倍数) + cnt(只是a和b的倍数) + cnt(只是a和c的倍数) + cnt(只是b和c的倍数) + cnt(只是a和b和c的倍数)
=
( mid / a + mid / b + mid / c ) - ( mid / ab + mid / bc + mid / ca ) + cnt(只是a和b和c的倍数)

class Solution
{
public:
    int nthUglyNumber(int n, int a, int b, int c)
    {
        long ab = (long) a / gcd(a, b) * b, bc = (long) b / gcd(b, c) * c, ca = (long) c / gcd(c, a) * a, abc = (long) ab / gcd(ab, c) * c;
        int lo = 1, hi = n * min({a, b, c});
        while (lo < hi)
        {
            int mid = lo + (hi - lo) / 2;
            if (mid / a + mid / b + mid / c - mid / ab - mid / bc - mid / ca + mid / abc < n) lo = mid + 1;
            else hi = mid;
        }
        return lo;
    }
};


// Source https://leetcode.com/problems/smallest-string-with-swaps/

You are given a string s, and an array of pairs of indices in the string pairs where pairs[i] = [a, b] indicates 2 indices(0-indexed) of the string.

You can swap the characters at any pair of indices in the given pairs any number of times.

Return the lexicographically smallest string that s can be changed to after using the swaps.

 

Example 1:

Input: s = "dcab", pairs = [[0,3],[1,2]]
Output: "bacd"
Explaination: 
Swap s[0] and s[3], s = "bcad"
Swap s[1] and s[2], s = "bacd"
Example 2:

Input: s = "dcab", pairs = [[0,3],[1,2],[0,2]]
Output: "abcd"
Explaination: 
Swap s[0] and s[3], s = "bcad"
Swap s[0] and s[2], s = "acbd"
Swap s[1] and s[2], s = "abcd"
Example 3:

Input: s = "cba", pairs = [[0,1],[1,2]]
Output: "abc"
Explaination: 
Swap s[0] and s[1], s = "bca"
Swap s[1] and s[2], s = "bac"
Swap s[0] and s[1], s = "abc"
 

Constraints:

1 <= s.length <= 10^5
0 <= pairs.length <= 10^5
0 <= pairs[i][0], pairs[i][1] < s.length
s only contains lower case English letters.

class Solution
{
public:
    int find(vector<int> &root, int i)
    {
        if (root[i] != i) root[i] = find(root, root[i]);
        return root[i];
    }

    void join(vector<int> &root, vector<int> &size, int x, int y)
    {
        int root_x = find(root, x);
        int root_y = find(root, y);
        if (root_x == root_y) return;
        if (size[root_x] > size[root_y])
        {
            root[root_y] = root_x;
            size[root_x] += size[root_y];
        }
        else
        {
            root[root_x] = root_y;
            size[root_y] += size[root_x];
        }
    }

    string smallestStringWithSwaps(string s, vector<vector<int>> &pairs)
    {
        int n = s.size();
        vector<int> root(n);
        vector<int> size(n);
        for (int i = 0; i < n; ++i) { root[i] = i; size[i] = 1; }
        vector<vector<int>> g(n);
        for (auto &pair : pairs)
        {
            join(root, size, pair[0], pair[1]);
        }
        for (int i = 0; i < n; ++i)
        {
            g[find(root, i)].push_back(i);
        }
        for (auto &v : g)
        {
            string t;
            for (int idx : v) t += s[idx];
            sort(t.begin(), t.end());
            for (int i = 0; i < v.size(); ++i)
            {
                s[v[i]] = t[i];
            }
        }
        return s;
    }
};


// Source https://leetcode.com/problems/sort-items-by-groups-respecting-dependencies/

There are n items each belonging to zero or one of m groups where group[i] is the group that the i-th item belongs to and it's equal to -1 if the i-th item belongs to no group. 
The items and the groups are zero indexed. A group can have no item belonging to it.

Return a sorted list of the items such that:

The items that belong to the same group are next to each other in the sorted list.
There are some relations between these items where beforeItems[i] is a list containing all the items that should come before the i-th item in the sorted array (to the left of the i-th item).
Return any solution if there is more than one solution and return an empty list if there is no solution.

 

Example 1:



Input: n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3,6],[],[],[]]
Output: [6,3,4,1,5,2,0,7]
Example 2:

Input: n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3],[],[4],[]]
Output: []
Explanation: This is the same as example 1 except that 4 needs to be before 6 in the sorted list.
 

Constraints:

1 <= m <= n <= 3 * 104
group.length == beforeItems.length == n
-1 <= group[i] <= m - 1
0 <= beforeItems[i].length <= n - 1
0 <= beforeItems[i][j] <= n - 1
i != beforeItems[i][j]
beforeItems[i] does not contain duplicates elements.

class Solution
{
public:

    vector<int> topSort(vector<int> &indegree, vector<int> adjL[])
    {
        vector<int> topSOrder;
        queue<int> q;

        for(int i = 0; i < indegree.size(); i++)
        {
            if(!indegree[i])
            {
                q.push(i);
            }
        }

        while(!q.empty())
        {
            int sz = q.size();
            for(int i = 0; i < sz; i++)
            {
                int t = q.front();
                q.pop();
                topSOrder.push_back(t);
                for(int j = 0; j < adjL[t].size(); j++)
                {
                    if(--indegree[adjL[t][j]] == 0)
                    {
                        q.push(adjL[t][j]);
                    }
                }
            }
        }

        if(topSOrder.size() == indegree.size())
            return topSOrder;

        return {};
    }

    vector<int> sortItems(int n, int m, vector<int> &group, vector<vector<int>> &beforeItems)
    {
        for(int i = 0; i < n; i++)
        {
            if(group[i] == -1)
            {
                group[i] = m++;
            }
        }

        vector<int> adjL_items[n];
        vector<int> adjL_groups[m];

        vector<int> id_items(n, 0);
        vector<int> id_groups(m, 0);

        for(int i = 0; i < n; i++)
        {
            for(auto pred : beforeItems[i])
            {
                adjL_items[pred].push_back(i);
                if(group[pred] != group[i])
                {
                    adjL_groups[group[pred]].push_back(group[i]);
                    id_groups[group[i]]++;
                }
                id_items[i]++;
            }
        }

        vector<int> sortedItems = topSort(id_items, adjL_items);
        vector<int> sortedGroups = topSort(id_groups, adjL_groups);

        if( sortedItems.empty() || sortedGroups.empty())
        {
            return {};
        }

        vector<int> tempG[m];
        for(auto i : sortedItems)
        {
            tempG[group[i]].push_back(i);
        }

        vector<vector<int>> ans;
        for(auto i : sortedGroups)
        {
            ans.push_back(tempG[i]);
        }

        vector<int> finalRes;
        for(auto &grp : ans)
        {
            for(int j = 0; j < grp.size(); j++)
            {
                finalRes.push_back(grp[j]);
            }
        }

        return finalRes;
    }
};


// Source https://leetcode.com/problems/design-skiplist/

Design a Skiplist without using any built-in libraries.

A skiplist is a data structure that takes O(log(n)) time to add, erase and search. Comparing with treap and red-black tree which has the same function and performance, 
the code length of Skiplist can be comparatively short and the idea behind Skiplists is just simple linked lists.

For example, we have a Skiplist containing [30,40,50,60,70,90] and we want to add 80 and 45 into it. The Skiplist works this way:


Artyom Kalinin [CC BY-SA 3.0], via Wikimedia Commons

You can see there are many layers in the Skiplist. Each layer is a sorted linked list. With the help of the top layers, add, erase and search can be faster than O(n). It can be proven that the average time complexity for each operation is O(log(n)) and space complexity is O(n).

See more about Skiplist: https://en.wikipedia.org/wiki/Skip_list

Implement the Skiplist class:

Skiplist() Initializes the object of the skiplist.
bool search(int target) Returns true if the integer target exists in the Skiplist or false otherwise.
void add(int num) Inserts the value num into the SkipList.
bool erase(int num) Removes the value num from the Skiplist and returns true. If num does not exist in the Skiplist, do nothing and return false. 
If there exist multiple num values, removing any one of them is fine.
Note that duplicates may exist in the Skiplist, your code needs to handle this situation.

 

Example 1:

Input
["Skiplist", "add", "add", "add", "search", "add", "search", "erase", "erase", "search"]
[[], [1], [2], [3], [0], [4], [1], [0], [1], [1]]
Output
[null, null, null, null, false, null, true, false, true, false]

Explanation
Skiplist skiplist = new Skiplist();
skiplist.add(1);
skiplist.add(2);
skiplist.add(3);
skiplist.search(0); // return False
skiplist.add(4);
skiplist.search(1); // return True
skiplist.erase(0);  // return False, 0 is not in skiplist.
skiplist.erase(1);  // return True
skiplist.search(1); // return False, 1 has already been erased.
 

Constraints:

0 <= num, target <= 2 * 104
At most 5 * 104 calls will be made to search, add, and erase.

class Skiplist
{
private:
    const int kMaxHeight = 16;

    struct Node
    {
        int val;
        int height;
        Node **next;

        Node(int v, int h)
        {
            val = v;
            height = h;
            next = new Node*[h];
            while (--h >= 0) next[h] = nullptr;
        }

        ~Node()
        {
            delete [] next;
        }
    };

    int getRandomHeight()
    {
        int h = 1;
        while (h < kMaxHeight && rand() % 4 == 1) ++h;

        return h;
    }


    Node *findGreaterOrEqual(int target, Node **prev)
    {
        Node *it = head;
        int level = kMaxHeight - 1;
        while (true)
        {
            Node *next = it->next[level];
            if (next && next->val < target)
            {
                it = next;
            }
            else
            {
                if (prev)  prev[level] = it;

                if (level == 0)
                {
                    return next;
                }
                else
                {
                    --level;
                }
            }
        }
    }


    Node *head;
public:
    Skiplist()
    {
        head = new Node(-1, kMaxHeight);
    }

    ~Skiplist ()
    {
        Node *p = head;
        Node *next;
        while (p)
        {
            next = p->next[0];
            delete p;
            p = next;
        }
    }

    bool search(int target)
    {
        Node *node = findGreaterOrEqual(target, nullptr);
        return node != nullptr && node->val == target;
    }

    void add(int num)
    {
        Node *prev[kMaxHeight];
        findGreaterOrEqual(num, prev);

        Node *node = new Node(num, getRandomHeight());
        for (int i = 0; i < node->height; ++i)
        {
            node->next[i] = prev[i]->next[i];
            prev[i]->next[i] = node;
        }
    }

    bool erase(int num)
    {
        Node *prev[kMaxHeight];
        Node *to_del = findGreaterOrEqual(num, prev);
        if (to_del == nullptr || to_del->val != num)
        {
            return false;
        }

        for (int i = 0; i < to_del->height; ++i)
        {
            prev[i]->next[i] = to_del->next[i];
        }

        delete to_del;
        return true;
    }
};


// Source https://leetcode.com/problems/unique-number-of-occurrences/

Given an array of integers arr, return true if the number of occurrences of each value in the array is unique, or false otherwise.

 

Example 1:

Input: arr = [1,2,2,1,1,3]
Output: true
Explanation: The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences.
Example 2:

Input: arr = [1,2]
Output: false
Example 3:

Input: arr = [-3,0,1,-3,1,1,1,-3,10,0]
Output: true
 

Constraints:

1 <= arr.length <= 1000
-1000 <= arr[i] <= 1000

class Solution
{
public:
    bool uniqueOccurrences(vector<int> &arr)
    {
        unordered_map<int, int> numCnt;
        unordered_set<int> st;
        for (int num : arr) ++numCnt[num];
        for (auto a : numCnt)
        {
            if (st.count(a.second)) return false;
            st.insert(a.second);
        }
        return true;
    }
};


// Source https://leetcode.com/problems/get-equal-substrings-within-budget/

You are given two strings s and t of the same length and an integer maxCost.

You want to change s to t. Changing the ith character of s to ith character of t costs |s[i] - t[i]| (i.e., the absolute difference between the ASCII values of the characters).

Return the maximum length of a substring of s that can be changed to be the same as the corresponding substring of t with a cost less than or equal to maxCost. 
If there is no substring from s that can be changed to its corresponding substring from t, return 0.

 

Example 1:

Input: s = "abcd", t = "bcdf", maxCost = 3
Output: 3
Explanation: "abc" of s can change to "bcd".
That costs 3, so the maximum length is 3.
Example 2:

Input: s = "abcd", t = "cdef", maxCost = 3
Output: 1
Explanation: Each character in s costs 2 to change to character in t,  so the maximum length is 1.
Example 3:

Input: s = "abcd", t = "acde", maxCost = 0
Output: 1
Explanation: You cannot make any change, so the maximum length is 1.
 

Constraints:

1 <= s.length <= 105
t.length == s.length
0 <= maxCost <= 106
s and t consist of only lowercase English letters.

class Solution
{
public:
    int equalSubstring(string s, string t, int maxCost)
    {
        int res = 0, n = s.size(), cur = 0;
        int start = 0, i = 0;
        while (i < n)
        {
            cur += abs(s[i] - t[i]);
            while (cur > maxCost && start <= i)
            {
                cur -= abs(s[start] - t[start]);
                ++start;
            }
            res = max(res, i - start + 1);
            ++i;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string-ii/

You are given a string s and an integer k, a k duplicate removal consists of choosing k adjacent and equal letters from s and removing them, 
causing the left and the right side of the deleted substring to concatenate together.

We repeatedly make k duplicate removals on s until we no longer can.

Return the final string after all such duplicate removals have been made. It is guaranteed that the answer is unique.

 

Example 1:

Input: s = "abcd", k = 2
Output: "abcd"
Explanation: There's nothing to delete.
Example 2:

Input: s = "deeedbbcccbdaa", k = 3
Output: "aa"
Explanation: 
First delete "eee" and "ccc", get "ddbbbdaa"
Then delete "bbb", get "dddaa"
Finally delete "ddd", get "aa"
Example 3:

Input: s = "pbbcggttciiippooaais", k = 2
Output: "ps"
 

Constraints:

1 <= s.length <= 105
2 <= k <= 104
s only contains lower case English letters.

class Solution
{
public:
    string removeDuplicates(string s, int k)
    {
        string res;
        vector<pair<int, char>> st{{0, '#'}};
        for (char c : s)
        {
            if (st.back().second != c)
            {
                st.push_back({1, c});
                continue;
            }
            if (++st.back().first == k)
            {
                st.pop_back();
            }
        }
        for (auto a : st)
        {
            res.append(a.first, a.second);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/minimum-moves-to-reach-target-with-rotations/

In an n*n grid, there is a snake that spans 2 cells and starts moving from the top left corner at (0, 0) and (0, 1). 
The grid has empty cells represented by zeros and blocked cells represented by ones. The snake wants to reach the lower right corner at (n-1, n-2) and (n-1, n-1).

In one move the snake can:

Move one cell to the right if there are no blocked cells there. This move keeps the horizontal/vertical position of the snake as it is.
Move down one cell if there are no blocked cells there. This move keeps the horizontal/vertical position of the snake as it is.
Rotate clockwise if it's in a horizontal position and the two cells under it are both empty. In that case the snake moves from (r, c) and (r, c+1) to (r, c) and (r+1, c).

Rotate counterclockwise if it's in a vertical position and the two cells to its right are both empty. In that case the snake moves from (r, c) and (r+1, c) to (r, c) and (r, c+1).

Return the minimum number of moves to reach the target.

If there is no way to reach the target, return -1.

 

Example 1:



Input: grid = [[0,0,0,0,0,1],
               [1,1,0,0,1,0],
               [0,0,0,0,1,1],
               [0,0,1,0,1,0],
               [0,1,1,0,0,0],
               [0,1,1,0,0,0]]
Output: 11
Explanation:
One possible solution is [right, right, rotate clockwise, right, down, down, down, down, rotate counterclockwise, right, down].
Example 2:

Input: grid = [[0,0,1,1,1,1],
               [0,0,0,0,1,1],
               [1,1,0,0,0,1],
               [1,1,1,0,0,1],
               [1,1,1,0,0,1],
               [1,1,1,0,0,0]]
Output: 9
 

Constraints:

2 <= n <= 100
0 <= grid[i][j] <= 1
It is guaranteed that the snake starts at empty cells.

class Solution
{
public:
    int minimumMoves(vector<vector<int>> &grid)
    {
        int n = grid.size();
        unordered_set<int> visited;
        visited.insert( (0 * n + 1 + 1) * 100 + 0 );
        queue<pair<pair<int, int>, int>> q;
        q.push( {{0, 1}, 0} ); // 蛇头位置 (0, 1)，水平姿势 0
        int res = 0;
        while (!q.empty())
        {
            int sz = q.size();
            for (int i = 0; i < sz; ++i)
            {
                auto t = q.front();
                q.pop();
                int x = t.first.first, y = t.first.second, dir = t.second;
                if (x == n - 1 && y == n - 1 && dir == 0) return res;
                if (dir == 0)   // horizontal
                {
                    if (y + 1 < n && grid[x][y + 1] == 0 && !visited.count( (x * n + y + 1 + 1) * 100 + 0 ))   // Move right
                    {
                        visited.insert( (x * n + y + 1 + 1) * 100 + 0 );
                        q.push( {{x, y + 1}, 0} );
                    }
                    if (x + 1 < n && y > 0 && grid[x + 1][y - 1] == 0 && grid[x + 1][y] == 0)
                    {
                        if (!visited.count( ((x + 1) * n + y + 1) * 100 + 0 ))   // Move down
                        {
                            visited.insert( ((x + 1) * n + y + 1) * 100 + 0 );
                            q.push( {{x + 1, y}, 0} );
                        }
                        if (!visited.count( ((x + 1) * n + y - 1 + 1) * 100 + 1 ))   // Rote
                        {
                            visited.insert( ((x + 1) * n + y - 1 + 1) * 100 + 1 );
                            q.push( {{x + 1, y - 1}, 1} );
                        }
                    }
                }
                else     // vertical
                {
                    if (x + 1 < n && grid[x + 1][y] == 0 && !visited.count( ((x + 1) * n + y + 1) * 100 + 1 ))   // Move down
                    {
                        visited.insert( ((x + 1) * n + y + 1) * 100 + 1 );
                        q.push( {{x + 1, y}, 1} );
                    }
                    if (y + 1 < n && x > 0 && grid[x - 1][y + 1] == 0 && grid[x][y + 1] == 0)
                    {
                        if (!visited.count( (x * n + y + 1 + 1) * 100 + 1 ))   // Move right
                        {
                            visited.insert( (x * n + y + 1 + 1) * 100 + 1 );
                            q.push( {{x, y + 1}, 1} );
                        }
                        if (!visited.count( ((x - 1) * n + y + 1 + 1) * 100 + 0 ))   // Rotate
                        {
                            visited.insert( ((x - 1) * n + y + 1 + 1) * 100 + 0 );
                            q.push( {{x - 1, y + 1}, 0} );
                        }
                    }
                }
            }
            ++res;
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/minimum-cost-to-move-chips-to-the-same-position/

We have n chips, where the position of the ith chip is position[i].

We need to move all the chips to the same position. In one step, we can change the position of the ith chip from position[i] to:

position[i] + 2 or position[i] - 2 with cost = 0.
position[i] + 1 or position[i] - 1 with cost = 1.
Return the minimum cost needed to move all the chips to the same position.

 

Example 1:


Input: position = [1,2,3]
Output: 1
Explanation: First step: Move the chip at position 3 to position 1 with cost = 0.
Second step: Move the chip at position 2 to position 1 with cost = 1.
Total cost is 1.
Example 2:


Input: position = [2,2,2,3,3]
Output: 2
Explanation: We can move the two chips at position  3 to position 2. Each move has cost = 1. The total cost = 2.
Example 3:

Input: position = [1,1000000000]
Output: 1
 

Constraints:

1 <= position.length <= 100
1 <= position[i] <= 10^9

最终合成一摞的位置肯定是在某一个已经存在的筹码的位置。
若最终位置不在某个已经存在的筹码的位置，那么看该位置距离任意一个筹码的距离是否有偶数距离，有的话最终位置其实可以移动到那个筹码的位置，因为偶数距离之间的移动没有花费。
若最终位置距离所有筹码的位置均为奇数（则所有筹码之间的距离均为偶数），那么该位置根本不应该成为最终位置，因为奇数距离都是有花费的。

因为距离为偶数的筹码可以事先移动到一摞，而所有奇数位置的筹码互相之间都是相距偶数的距离，所有偶数位置的筹码互相之间也都是相距偶数的距离。
这样所有筹码就可以在花费为0的情况下归为相邻的两大摞，则总花费其实就是个数较小的那一摞

class Solution
{
public:
    int minCostToMoveChips(vector<int> &position)
    {
        int even = 0, odd = 0;
        for (int pos : position)
        {
            (pos % 2 == 1) ? ++odd : ++even;
        }
        return min(odd, even);
    }
};


// Source https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/

Given an integer array arr and an integer difference, return the length of the longest subsequence in arr which is an arithmetic sequence 
such that the difference between adjacent elements in the subsequence equals difference.

A subsequence is a sequence that can be derived from arr by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:

Input: arr = [1,2,3,4], difference = 1
Output: 4
Explanation: The longest arithmetic subsequence is [1,2,3,4].
Example 2:

Input: arr = [1,3,5,7], difference = 1
Output: 1
Explanation: The longest arithmetic subsequence is any single element.
Example 3:

Input: arr = [1,5,7,8,5,3,4,2,1], difference = -2
Output: 4
Explanation: The longest arithmetic subsequence is [7,5,3,1].
 

Constraints:

1 <= arr.length <= 105
-104 <= arr[i], difference <= 104

class Solution
{
public:
    int longestSubsequence(vector<int> &arr, int difference)
    {
        int n = arr.size(), maxLength = 1;
        unordered_map<int, int> dp; //number, length of subsequence upto this number
        dp[arr[0]] = 1;
        for(int i = 1; i < n; i++)
        {
            int prevElement = arr[i] - difference;
            auto it = dp.find(prevElement);
            if(it == dp.end())
            {
                dp[arr[i]] = max(dp[arr[i]], 1);
            }
            else
            {
                dp[arr[i]] = max(dp[arr[i]], it->second + 1);
            }
            maxLength = max(maxLength, dp[arr[i]]);
        }
        return maxLength;
    }
};


// Source https://leetcode.com/problems/path-with-maximum-gold/

In a gold mine grid of size m x n, each cell in this mine has an integer representing the amount of gold in that cell, 0 if it is empty.

Return the maximum amount of gold you can collect under the conditions:

Every time you are located in a cell you will collect all the gold in that cell.
From your position, you can walk one step to the left, right, up, or down.
You can't visit the same cell more than once.
Never visit a cell with 0 gold.
You can start and stop collecting gold from any position in the grid that has some gold.
 

Example 1:

Input: grid = [[0,6,0],[5,8,7],[0,9,0]]
Output: 24
Explanation:
[[0,6,0],
 [5,8,7],
 [0,9,0]]
Path to get the maximum gold, 9 -> 8 -> 7.
Example 2:

Input: grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]
Output: 28
Explanation:
[[1,0,7],
 [2,0,6],
 [3,4,5],
 [0,3,0],
 [9,0,20]]
Path to get the maximum gold, 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7.
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 15
0 <= grid[i][j] <= 100
There are at most 25 cells containing gold.

class Solution
{
public:
    int m, n;
    int vis[20][20];
    
    int getMaximumGold(vector<vector<int>> &grid)
    {
        m = grid.size();
        n = grid[0].size();
        memset(vis, 0, sizeof(vis));
        int sol = 0;
        for(int i = 0; i < m; ++i)
        {
            for(int j = 0; j < n; ++j)
            {
                if(grid[i][j] != 0)
                {
                    sol = max(sol, helper(i, j, vis, grid));
                }
            }
        }
        return  sol;
    }

    int helper(int row, int col, int vis[][20], vector<vector<int>> &grid)
    {
        pair<int, int> choices[4] = {{row, col + 1}, {row, col - 1}, {row + 1, col}, {row - 1, col}};
        int sum = 0;
        for (int i = 0; i < 4; ++i)
        {
            int nextR = choices[i].first;
            int nextC = choices[i].second;
            if(valid(nextR, nextC, grid) && !vis[nextR][nextC] && grid[nextR][nextC] != 0)
            {
                vis[row][col] = 1;
                sum = max(sum, helper(nextR, nextC, vis, grid));
                vis[row][col] = 0;
            }
        }
        return sum + grid[row][col];
    }

    bool valid(int row, int col, vector<vector<int>> &grid)
    {
        return row >= 0 && row < m && col >= 0 && col < n;
    }
};


// Source https://leetcode.com/problems/count-vowels-permutation/

Given an integer n, your task is to count how many strings of length n can be formed under the following rules:

Each character is a lower case vowel ('a', 'e', 'i', 'o', 'u')
Each vowel 'a' may only be followed by an 'e'.
Each vowel 'e' may only be followed by an 'a' or an 'i'.
Each vowel 'i' may not be followed by another 'i'.
Each vowel 'o' may only be followed by an 'i' or a 'u'.
Each vowel 'u' may only be followed by an 'a'.
Since the answer may be too large, return it modulo 10^9 + 7.

 

Example 1:

Input: n = 1
Output: 5
Explanation: All possible strings are: "a", "e", "i" , "o" and "u".
Example 2:

Input: n = 2
Output: 10
Explanation: All possible strings are: "ae", "ea", "ei", "ia", "ie", "io", "iu", "oi", "ou" and "ua".
Example 3: 

Input: n = 5
Output: 68
 

Constraints:

1 <= n <= 2 * 10^4

a的后面只能跟e，e的后面只能跟a或i，i的后面不能跟另一个i，o的后面只能跟i或u，u的后面只能跟a。

a 可以放在e, i, u后面
e 可以放在a, i后面
i 可以放在e, o后面
o 可以放在i后面
u 可以放在i, o后面

class Solution
{
public:
    long dp[20005][5];
    
    int countVowelPermutation(int n)
    {
        memset(dp, 0, sizeof(dp));
        const int M = 1e9 + 7;
        // 'a', 'e', 'i', 'o', 'u' -> 0, 1, 2, 3, 4
        for (int j = 0; j < 5; ++j) dp[0][j] = 1;
        for (int i = 1; i < n; ++i)
        {
            dp[i][0] = (dp[i - 1][1] + dp[i - 1][2] + dp[i - 1][4]) % M;
            dp[i][1] = (dp[i - 1][0] + dp[i - 1][2]) % M;
            dp[i][2] = (dp[i - 1][1] + dp[i - 1][3]) % M;
            dp[i][3] = dp[i - 1][2];
            dp[i][4] = (dp[i - 1][2] + dp[i - 1][3]) % M;
        }
        int res = 0;
        for (int j = 0; j < 5; ++j)
        {
            res = (res + dp[n - 1][j]) % M;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/split-a-string-in-balanced-strings/

Balanced strings are those that have an equal quantity of 'L' and 'R' characters.

Given a balanced string s, split it in the maximum amount of balanced strings.

Return the maximum amount of split balanced strings.

 

Example 1:

Input: s = "RLRRLLRLRL"
Output: 4
Explanation: s can be split into "RL", "RRLL", "RL", "RL", each substring contains same number of 'L' and 'R'.
Example 2:

Input: s = "RLLLLRRRLR"
Output: 3
Explanation: s can be split into "RL", "LLLRRR", "LR", each substring contains same number of 'L' and 'R'.
Example 3:

Input: s = "LLLLRRRR"
Output: 1
Explanation: s can be split into "LLLLRRRR".
 

Constraints:

1 <= s.length <= 1000
s[i] is either 'L' or 'R'.
s is a balanced string.

class Solution
{
public:
    int balancedStringSplit(string s)
    {
        int res = 0, cnt = 0;
        for (char c : s)
        {
            (c == 'L') ? ++cnt : --cnt;
            if (cnt == 0) ++res;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/queens-that-can-attack-the-king/

On an 8x8 chessboard, there can be multiple Black Queens and one White King.

Given an array of integer coordinates queens that represents the positions of the Black Queens, and a pair of coordinates king that represent the position of the White King, 
return the coordinates of all the queens (in any order) that can attack the King.

 

Example 1:



Input: queens = [[0,1],[1,0],[4,0],[0,4],[3,3],[2,4]], king = [0,0]
Output: [[0,1],[1,0],[3,3]]
Explanation:  
The queen at [0,1] can attack the king cause they're in the same row. 
The queen at [1,0] can attack the king cause they're in the same column. 
The queen at [3,3] can attack the king cause they're in the same diagnal. 
The queen at [0,4] can't attack the king cause it's blocked by the queen at [0,1]. 
The queen at [4,0] can't attack the king cause it's blocked by the queen at [1,0]. 
The queen at [2,4] can't attack the king cause it's not in the same row/column/diagnal as the king.
Example 2:



Input: queens = [[0,0],[1,1],[2,2],[3,4],[3,5],[4,4],[4,5]], king = [3,3]
Output: [[2,2],[3,4],[4,4]]
Example 3:



Input: queens = [[5,6],[7,7],[2,1],[0,7],[1,6],[5,1],[3,7],[0,3],[4,0],[1,2],[6,3],[5,0],[0,4],[2,2],[1,1],[6,4],[5,4],[0,0],[2,6],[4,5],[5,2],[1,4],[7,5],[2,3],[0,5],[4,2],[1,0],[2,7],[0,1],[4,6],[6,1],[0,6],[4,3],[1,7]], king = [3,4]
Output: [[2,3],[1,4],[1,6],[3,7],[4,3],[5,4],[4,5]]
 

Constraints:

1 <= queens.length <= 63
queens[i].length == 2
0 <= queens[i][j] < 8
king.length == 2
0 <= king[0], king[1] < 8
At most one piece is allowed in a cell.

class Solution
{
public:
    vector<vector<int>> queensAttacktheKing(vector<vector<int>> &queens, vector<int> &king)
    {
        int seen[8][8] = {0};
        for (auto &queen : queens)
        {
            seen[queen[0]][queen[1]] = 1;
        }
        vector<vector<int>> res;
        for (int i = -1; i <= 1; ++i)
        {
            for (int j = -1; j <= 1; ++j)
            {
                if (i == 0 && j == 0) continue;
                int x = king[0] + i, y = king[1] + j;
                while (min(x, y) >= 0 && max(x, y) < 8)
                {
                    if (seen[x][y] == 1)
                    {
                        res.push_back({x, y});
                        break;
                    }
                    x += i, y += j;
                }
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/dice-roll-simulation/

A die simulator generates a random number from 1 to 6 for each roll. You introduced a constraint to the generator such that 
it cannot roll the number i more than rollMax[i] (1-indexed) consecutive times.

Given an array of integers rollMax and an integer n, return the number of distinct sequences that can be obtained with exact n rolls. 
Since the answer may be too large, return it modulo 109 + 7.

Two sequences are considered different if at least one element differs from each other.

 

Example 1:

Input: n = 2, rollMax = [1,1,2,2,2,3]
Output: 34
Explanation: There will be 2 rolls of die, if there are no constraints on the die, there are 6 * 6 = 36 possible combinations. In this case, looking at rollMax array, the numbers 1 and 2 appear at most once consecutively, therefore sequences (1,1) and (2,2) cannot occur, so the final answer is 36-2 = 34.
Example 2:

Input: n = 2, rollMax = [1,1,1,1,1,1]
Output: 30
Example 3:

Input: n = 3, rollMax = [1,1,1,2,2,3]
Output: 181
 

Constraints:

1 <= n <= 5000
rollMax.length == 6
1 <= rollMax[i] <= 15

class Solution
{
public:
    int dp[5001][7][16];
    vector<int> roll;
    int mod = 1e9 + 7;

    int dfs(int n, int prev, int count)
    {
        if(n == 0) return 1;
        if(dp[n][prev][count] != -1) return dp[n][prev][count];
        long long int res = 0;
        for(int i = 0; i < 6; i++)
        {
            if(i == prev && count >= roll[i]) continue;
            if(i == prev)
            {
                res = (res + dfs(n - 1, prev, count + 1)) % mod;
            }
            else res = (res + dfs(n - 1, i, 1)) % mod;
        }
        return dp[n][prev][count] = res;
    }

    int dieSimulator(int n, vector<int> &rollMax)
    {
        roll = rollMax;
        memset(dp, -1, sizeof(dp));
        return dfs(n, 6, 0);
    }
};


// Source https://leetcode.com/problems/maximum-equal-frequency/

Given an array nums of positive integers, return the longest possible length of an array prefix of nums, 
such that it is possible to remove exactly one element from this prefix so that every number that has appeared in it will have the same number of occurrences.

If after removing one element there are no remaining elements, it's still considered that every appeared number has the same number of ocurrences (0).

 

Example 1:

Input: nums = [2,2,1,1,5,3,3,5]
Output: 7
Explanation: For the subarray [2,2,1,1,5,3,3] of length 7, if we remove nums[4] = 5, we will get [2,2,1,1,3,3], so that each number will appear exactly twice.
Example 2:

Input: nums = [1,1,1,2,2,2,3,3,3,4,4,4,5]
Output: 13
 

Constraints:

2 <= nums.length <= 105
1 <= nums[i] <= 105

class Solution
{
public:
    int maxEqualFreq(vector<int> &nums)
    {
        int res = 0, mx = 0, n = nums.size();
        unordered_map<int, int> numCnt;
        unordered_map<int, int> freq;
        for (int i = 0; i < n; ++i)
        {
            int num = nums[i], cnt = numCnt[num];
            mx = max(mx, ++numCnt[num]);
            if (freq[cnt] > 0) --freq[cnt];
            ++freq[cnt + 1];
            // mx * freq[mx] == i 比如 2,2,1,1,5,3,3
            //                                      1,1,1,2,2,2,3,3,3,4,4,4,5
            // (mx - 1) * (freq[mx - 1] + 1) == i 比如 1,1,1,2,2
            //                                                   比如 10,2,8,9,3,8,1,5
            // mx == 1 比如 1, 2, 3, 4, 5, 6, 7, 8, 9
            if (mx == 1 || mx * freq[mx] == i || (mx - 1) * (freq[mx - 1] + 1) == i)
            {
                res = i + 1;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/the-dining-philosophers/

Five silent philosophers sit at a round table with bowls of spaghetti. Forks are placed between each pair of adjacent philosophers.

Each philosopher must alternately think and eat. However, a philosopher can only eat spaghetti when they have both left and right forks. 
Each fork can be held by only one philosopher and so a philosopher can use the fork only if it is not being used by another philosopher. 
After an individual philosopher finishes eating, they need to put down both forks so that the forks become available to others. 
A philosopher can take the fork on their right or the one on their left as they become available, but cannot start eating before getting both forks.

Eating is not limited by the remaining amounts of spaghetti or stomach space; an infinite supply and an infinite demand are assumed.

Design a discipline of behaviour (a concurrent algorithm) such that no philosopher will starve; 
i.e., each can forever continue to alternate between eating and thinking, assuming that no philosopher can know when others may want to eat or think.

5个哲学家，一张圆桌，5个叉子
Five silent philosophers sit at a round table with bowls of spaghetti. Forks are placed between each pair of adjacent philosophers.

The problem statement and the image above are taken from wikipedia.org

 
哲学家的ID按顺时针顺序从0到4编号

0号 ph   0号 fk   1号 ph   1号 fk   2号 ph   2号 fk   3号 ph   3号 fk   4号 ph   4号 fk

The philosophers' ids are numbered from 0 to 4 in a clockwise order. 
Implement the function void wantsToEat(philosopher, pickLeftFork, pickRightFork, eat, putLeftFork, putRightFork) where:

philosopher is the id of the philosopher who wants to eat.
pickLeftFork and pickRightFork are functions you can call to pick the corresponding forks of that philosopher.
eat is a function you can call to let the philosopher eat once he has picked both forks.
putLeftFork and putRightFork are functions you can call to put down the corresponding forks of that philosopher.
The philosophers are assumed to be thinking as long as they are not asking to eat (the function is not being called with their number).
Five threads, each representing a philosopher, will simultaneously use one object of your class to simulate the process. 
The function may be called for the same philosopher more than once, even before the last call ends.

 

Example 1:

Input: n = 1
Output: [[4,2,1],[4,1,1],[0,1,1],[2,2,1],[2,1,1],[2,0,3],[2,1,2],[2,2,2],[4,0,3],[4,1,2],[0,2,1],[4,2,2],[3,2,1],[3,1,1],[0,0,3],[0,1,2],[0,2,2],[1,2,1],[1,1,1],[3,0,3],[3,1,2],[3,2,2],[1,0,3],[1,1,2],[1,2,2]]
Explanation:
n is the number of times each philosopher will call the function.
The output array describes the calls you made to the functions controlling the forks and the eat function, its format is:
output[i] = [a, b, c] (three integers)
- a is the id of a philosopher.
- b specifies the fork: {1 : left, 2 : right}.
- c specifies the operation: {1 : pick, 2 : put, 3 : eat}.
 

Constraints:

1 <= n <= 60

class DiningPhilosophers
{
private:
    mutex m;
    vector<condition_variable> cond;
    vector<bool> isForkAvailable;

public:
    DiningPhilosophers() : cond(5)
    {
        for(int i = 0; i < 5; i++)
        {
            isForkAvailable.push_back(true);
        }
    }

    void wantsToEat(int philosopher,
                    function<void()> pickLeftFork,
                    function<void()> pickRightFork,
                    function<void()> eat,
                    function<void()> putLeftFork,
                    function<void()> putRightFork)
    {
        int rightFork = philosopher;
        int leftFork = philosopher - 1;
        if(leftFork < 0)
        {
            leftFork += 5;
        }
        int prevPhilosopher = philosopher - 1;
        if(prevPhilosopher < 0)
        {
            prevPhilosopher += 5;
        }
        int nextPhilosopher = philosopher + 1;
        nextPhilosopher %= 5;

        {
            std::unique_lock<std::mutex> lck(m);
            cond[philosopher].wait(lck, [this, leftFork, rightFork]()
            {
                return isForkAvailable[leftFork] && isForkAvailable[rightFork];
            });
            pickLeftFork();
            pickRightFork();
            isForkAvailable[leftFork] = false;
            isForkAvailable[rightFork] = false;
        }
        eat();
        {
            std::unique_lock<std::mutex> lck(m);
            putLeftFork();
            putRightFork();
            isForkAvailable[leftFork] = true;
            isForkAvailable[rightFork] = true;
        }
        cond[philosopher].notify_one();
        cond[prevPhilosopher].notify_one();
        cond[nextPhilosopher].notify_one();
    }
};


// Source https://leetcode.com/problems/airplane-seat-assignment-probability/

n passengers board an airplane with exactly n seats. The first passenger has lost the ticket and picks a seat randomly. But after that, the rest of the passengers will:

Take their own seat if it is still available, and
Pick other seats randomly when they find their seat occupied
Return the probability that the nth person gets his own seat.

 

Example 1:

Input: n = 1
Output: 1.00000
Explanation: The first person can only get the first seat.
Example 2:

Input: n = 2
Output: 0.50000
Explanation: The second person has a probability of 0.5 to get the second seat (when first person gets the first seat).
 

Constraints:

1 <= n <= 105

当第一个人正好选到了自己的座位时，这种情况的概率是 1/n，那么对于之后的所有人来说，自己的座位都是空的，可以直接坐，
那么每个人坐到自己位子的概率也就是第一个人坐到自己位置的概率，都为 1/n（包括第n个人）。

当第一个人直接坐到第n个座位上（概率是 1/n），那么不管中间的人怎么坐，第n个人都无法再坐到自己的位置上了，概率为0。

当第一个人坐到了范围 [2, n-1] 中的任意一个位置，共有n-2 个位置可供选择，到达这种情况的总概率是 (n-2)/n，但坐到每一个位子的概率还是 1/n = (n-2)/n * 1 / (n-2)。
若第一个人坐到了第二个位子，第二个人此时就有三种选择：
1）坐到第一个人的位子，则之后所有的人都可以坐到自己的位子了，包括第n个人。
2）坐到第n个座位，则第n个人就无法坐自己位子了，概率是0。
3）坐其他的座位，范围是 [3, n-1]
第二个人的三种情况其实变成了一个共 n-1 个座位的子问题，此时第二个人就相当于变成了第一个人
当第一个人坐到第三个位子的时候，那么第二个人就可以坐自己的位置，第三个人实际又面临相同的三个选择，此时就是共有 n-2 个座位的子问题，后面都是依次类推。

f(n) = 1/n + 0 + (n-2)/n * (1/(n-2) * f(n-1) + 1/(n-2) * f(n-2) + ... + 1/(n-2) * f(2))

化简一下可得：

f(n) = 1/n + 1/n * (f(n-1) + f(n-2) + ... + f(2))

n * f(n) = 1 + f(n-1) + f(n-2) + ... + f(2)

注意这是n大于2的情况，n等于2的时候，可以直接分析出来，就是 0.5

f(2) = 0.5

3 * f(3) = 1 + f(2) = 1.5
f(3) = 0.5

4 * f(4) = 1 + f(3) + f(2) = 2
f(4) = 0.5

5 * f(5) = 1 + f(4) + f(3) + f(2) = 2.5
f(5) = 0.5

n * f(n) = 1 + (n - 2) * 0.5 = n * 0.5
f(n) = 0.5
任何大于2的n的函数值都是 0.5

class Solution
{
public:
    double nthPersonGetsNthSeat(int n)
    {
        return n == 1 ? 1.0 : 0.5;
    }
};


// Source https://leetcode.com/problems/check-if-it-is-a-straight-line/

You are given an array coordinates, coordinates[i] = [x, y], where [x, y] represents the coordinate of a point. Check if these points make a straight line in the XY plane.

 

 

Example 1:



Input: coordinates = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]
Output: true
Example 2:



Input: coordinates = [[1,1],[2,2],[3,4],[4,5],[5,6],[7,7]]
Output: false
 

Constraints:

2 <= coordinates.length <= 1000
coordinates[i].length == 2
-10^4 <= coordinates[i][0], coordinates[i][1] <= 10^4
coordinates contains no duplicate point.

(y3 - y1) / (x3 - x1) != (y2 - y1) / (x2 - x1)
(y3 - y1) * (x2 - x1) != (y2 - y1) * (x3 - x1)

class Solution
{
public:
    bool checkStraightLine(vector<vector<int>> &coordinates)
    {
        int n = coordinates.size();
        int x1 = coordinates[0][0], y1 = coordinates[0][1];
        int x2 = coordinates[1][0], y2 = coordinates[1][1];
        for (int i = 2; i < n; ++i)
        {
            int x3 = coordinates[i][0], y3 = coordinates[i][1];
            if ((x2 - x1) * (y3 - y1) != (y2 - y1) * (x3 - x1)) return false;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/remove-sub-folders-from-the-filesystem/

Given a list of folders folder, return the folders after removing all sub-folders in those folders. You may return the answer in any order.

If a folder[i] is located within another folder[j], it is called a sub-folder of it.

The format of a path is one or more concatenated strings of the form: '/' followed by one or more lowercase English letters.

For example, "/leetcode" and "/leetcode/problems" are valid paths while an empty string and "/" are not.
 

Example 1:

Input: folder = ["/a","/a/b","/c/d","/c/d/e","/c/f"]
Output: ["/a","/c/d","/c/f"]
Explanation: Folders "/a/b" is a subfolder of "/a" and "/c/d/e" is inside of folder "/c/d" in our filesystem.
Example 2:

Input: folder = ["/a","/a/b/c","/a/b/d"]
Output: ["/a"]
Explanation: Folders "/a/b/c" and "/a/b/d" will be removed because they are subfolders of "/a".
Example 3:

Input: folder = ["/a/b/c","/a/b/ca","/a/b/d"]
Output: ["/a/b/c","/a/b/ca","/a/b/d"]
 

Constraints:

1 <= folder.length <= 4 * 104
2 <= folder[i].length <= 100
folder[i] contains only lowercase letters and '/'.
folder[i] always starts with the character '/'.
Each folder name is unique.

class Solution
{
public:
    struct TrieNode
    {
        TrieNode *children[27];
        int index;

        TrieNode()
        {
            for (int i = 0; i < 27; ++i)
            {
                children[i] = NULL;
            }
            index = -1;
        }
    };

    vector<string> bfs(vector<string> &folder, TrieNode *root)
    {
        vector<string> res;
        queue<TrieNode *> q;
        q.push(root);
        while (!q.empty())
        {
            TrieNode *node = q.front();
            q.pop();
            if (node->index >= 0) res.push_back(folder[node->index]);
            for (int i = 0; i < 27; ++i)
            {
                if (node->index >= 0 && i == 26) continue;
                if (node->children[i])
                {
                    q.push(node->children[i]);
                }
            }
        }
        return res;
    }

    vector<string> removeSubfolders(vector<string> &folder)
    {
        TrieNode *root = new TrieNode();
        for (int i = 0; i < folder.size(); ++i)
        {
            TrieNode *node = root;
            for (char c : folder[i])
            {
                int idx = (c == '/') ? 26 : c - 'a';
                if (!node->children[idx]) node->children[idx] = new TrieNode();
                node = node->children[idx];
            }
            node->index = i;
        }
        return bfs(folder, root);
    }
};


// Source https://leetcode.com/problems/replace-the-substring-for-balanced-string/

You are given a string s of length n containing only four kinds of characters: 'Q', 'W', 'E', and 'R'.

A string is said to be balanced if each of its characters appears n / 4 times where n is the length of the string.

Return the minimum length of the substring that can be replaced with any other string of the same length to make s balanced. If s is already balanced, return 0.

 

Example 1:

Input: s = "QWER"
Output: 0
Explanation: s is already balanced.
Example 2:

Input: s = "QQWE"
Output: 1
Explanation: We need to replace a 'Q' to 'R', so that "RQWE" (or "QRWE") is balanced.
Example 3:

Input: s = "QQQW"
Output: 2
Explanation: We can replace the first "QQ" to "ER". 
 

Constraints:

n == s.length
4 <= n <= 105
n is a multiple of 4.
s contains only 'Q', 'W', 'E', and 'R'.

若子串以外某个字母的个数超过了 n/4，则无论怎么替换子串内的字符，该字母个数也不会减少，永远无法达到平衡状态，所以只有当子串以外的每个字符的出现次数都小于等于 n/4，替换子串才可以达到平衡。

class Solution
{
public:
    int balancedString(string s)
    {
        int n = s.size();
        unordered_map<char, int> m;
        for (char c : s) ++m[c];
        int res = n, k = n / 4;
        int left = 0, i = 0;
        while (i < n)
        {
            --m[s[i]];
            while (left <= (i + 1) && m['Q'] <= k && m['W'] <= k && m['E'] <= k && m['R'] <= k)
            {
                res = min(res, i - left + 1);
                if (left == (i + 1)) break;
                ++m[s[left]];
                ++left;                    
            }
            if (res == 0) break;
            ++i;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/maximum-profit-in-job-scheduling/

We have n jobs, where every job is scheduled to be done from startTime[i] to endTime[i], obtaining a profit of profit[i].

You're given the startTime, endTime and profit arrays, return the maximum profit you can take such that there are no two jobs in the subset with overlapping time range.

If you choose a job that ends at time X you will be able to start another job that starts at time X.

 

Example 1:



Input: startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70]
Output: 120
Explanation: The subset chosen is the first and fourth job. 
Time range [1-3]+[3-6] , we get profit of 120 = 50 + 70.
Example 2:



Input: startTime = [1,2,3,4,6], endTime = [3,5,10,6,9], profit = [20,20,100,70,60]
Output: 150
Explanation: The subset chosen is the first, fourth and fifth job. 
Profit obtained 150 = 20 + 70 + 60.
Example 3:



Input: startTime = [1,1,1], endTime = [2,3,4], profit = [5,6,4]
Output: 6
 

Constraints:

1 <= startTime.length == endTime.length == profit.length <= 5 * 104
1 <= startTime[i] < endTime[i] <= 109
1 <= profit[i] <= 104

class Solution
{
public:
    int n;
    int dp[50005];

    int nextpos(int i, vector<array<int, 3>> &arr, int val)
    {
        int pos = n;
        int l = i;
        int r = n - 1;
        while(l <= r)
        {
            int mid = l + (r - l) / 2;
            if(arr[mid][0] >= val)
            {
                pos = mid;
                r = mid - 1;
            }
            else
            {
                l = mid + 1;
            }
        }
        return pos;
    }

    int find(vector<array<int, 3>> &events, int idx)
    {
        if(idx >= n) return 0;
        if(dp[idx] != -1) return dp[idx];
        int nextidx = nextpos(idx + 1, events, events[idx][1]);
        int a = events[idx][2] + find(events, nextidx);
        int b = find(events, idx + 1);
        int res = max(a, b);
        return dp[idx] = res;
    }
    
    int jobScheduling(vector<int> &startTime, vector<int> &endTime, vector<int> &profit)
    {
        n = startTime.size();
        memset(dp, -1, sizeof(dp));
        vector<array<int, 3>> events(n);
        for(int i = 0; i < n; i++)
        {
            events[i][0] = startTime[i];
            events[i][1] = endTime[i];
            events[i][2] = profit[i];
        }
        sort(events.begin(), events.end());
        return find(events, 0);
    }
};


// Source https://leetcode.com/problems/find-positive-integer-solution-for-a-given-equation/

Given a callable function f(x, y) with a hidden formula and a value z, reverse engineer the formula and return all positive integer pairs x and y where f(x,y) == z. 
You may return the pairs in any order.

While the exact formula is hidden, the function is monotonically increasing, i.e.:

f(x, y) < f(x + 1, y)
f(x, y) < f(x, y + 1)
The function interface is defined like this:

interface CustomFunction {
public:
  // Returns some positive integer f(x, y) for two positive integers x and y based on a formula.
  int f(int x, int y);
};
We will judge your solution as follows:

The judge has a list of 9 hidden implementations of CustomFunction, along with a way to generate an answer key of all valid pairs for a specific z.
The judge will receive two inputs: a function_id (to determine which implementation to test your code with), and the target z.
The judge will call your findSolution and compare your results with the answer key.
If your results match the answer key, your solution will be Accepted.
 

Example 1:

Input: function_id = 1, z = 5
Output: [[1,4],[2,3],[3,2],[4,1]]
Explanation: The hidden formula for function_id = 1 is f(x, y) = x + y.
The following positive integer values of x and y make f(x, y) equal to 5:
x=1, y=4 -> f(1, 4) = 1 + 4 = 5.
x=2, y=3 -> f(2, 3) = 2 + 3 = 5.
x=3, y=2 -> f(3, 2) = 3 + 2 = 5.
x=4, y=1 -> f(4, 1) = 4 + 1 = 5.
Example 2:

Input: function_id = 2, z = 5
Output: [[1,5],[5,1]]
Explanation: The hidden formula for function_id = 2 is f(x, y) = x * y.
The following positive integer values of x and y make f(x, y) equal to 5:
x=1, y=5 -> f(1, 5) = 1 * 5 = 5.
x=5, y=1 -> f(5, 1) = 5 * 1 = 5.
 

Constraints:

1 <= function_id <= 9
1 <= z <= 100
It is guaranteed that the solutions of f(x, y) == z will be in the range 1 <= x, y <= 1000.
It is also guaranteed that f(x, y) will fit in 32 bit signed integer if 1 <= x, y <= 1000.

函数在x和y参数上都是单调递增的，就是说x参数不变的话，y越大，返回值越大，同理，y不变的话，x越大，返回值也越大，当然，若x和y同时大，则返回值更大。
题目中给了x和y的取值范围 [1, 1000]，则x和y可以看作一个二维数组的行列坐标，并且这个数组的值是按行和列分别递增，题目就变成了找出所有值为z的位置坐标。

class Solution
{
public:
    vector<vector<int>> findSolution(CustomFunction &customfunction, int z)
    {
        vector<vector<int>> res;
        int x = 1000, y = 1;
        while (x > 0 && y <= 1000)
        {
            int val = customfunction.f(x, y);
            if (val > z) --x;
            else if (val < z) ++y;
            else res.push_back({x--, y++});
        }
        return res;
    }
};


// Source https://leetcode.com/problems/circular-permutation-in-binary-representation/

Given 2 integers n and start. Your task is return any permutation p of (0,1,2.....,2^n -1) such that :

p[0] = start
p[i] and p[i+1] differ by only one bit in their binary representation.
p[0] and p[2^n -1] must also differ by only one bit in their binary representation.
 

Example 1:

Input: n = 2, start = 3
Output: [3,2,0,1]
Explanation: The binary representation of the permutation is (11,10,00,01). 
All the adjacent element differ by one bit. Another valid permutation is [3,1,0,2]
Example 2:

Input: n = 3, start = 2
Output: [2,6,7,5,4,0,1,3]
Explanation: The binary representation of the permutation is (010,110,111,101,100,000,001,011).
 

Constraints:

1 <= n <= 16
0 <= start < 2 ^ n

i	i >> 1	i ^ (i >> 1)
0000	0000	0000
0001	0000	0001
0010	0001	0011
0011	0001	0010
0100	0010	0110
0101	0010	0111
0110	0011	0101
0111	0011	0100
1000	0100	1100
1001	0100	1101

class Solution
{
public:
    vector<int> circularPermutation(int n, int start)
    {
        int cnt = (1 << n);
        vector<int> temp(cnt);
        int ind = 0;
        for(int i = 0; i < cnt; i++)
        {
            temp[i] = i ^ (i >> 1);
            if(temp[i] == start)
            {
                ind = i;
            }
        }
        vector<int> ans(cnt);
        for(int i = 0; i < cnt; ++i)
        {
            ans[i] = temp[ind % cnt];
            ++ind;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/maximum-length-of-a-concatenated-string-with-unique-characters/

You are given an array of strings arr. A string s is formed by the concatenation of a subsequence of arr that has unique characters.

Return the maximum possible length of s.

A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:

Input: arr = ["un","iq","ue"]
Output: 4
Explanation: All the valid concatenations are:
- ""
- "un"
- "iq"
- "ue"
- "uniq" ("un" + "iq")
- "ique" ("iq" + "ue")
Maximum length is 4.
Example 2:

Input: arr = ["cha","r","act","ers"]
Output: 6
Explanation: Possible longest valid concatenations are "chaers" ("cha" + "ers") and "acters" ("act" + "ers").
Example 3:

Input: arr = ["abcdefghijklmnopqrstuvwxyz"]
Output: 26
Explanation: The only string in arr has all 26 characters.
 

Constraints:

1 <= arr.length <= 16
1 <= arr[i].length <= 26
arr[i] contains only lowercase English letters.

class Solution
{
public:
    int maxLength(vector<string> &arr)
    {
        vector<bitset<26>> all{bitset<26>()};
        int res = 0;
        for (string &word : arr)
        {
            bitset<26> cur;
            for (char c : word)
            {
                cur.set(c - 'a');
            }
            int n = cur.count();
            if (n < word.size()) continue;
            int sz = all.size();
            for (int i = sz - 1; i >= 0; --i)
            {
                bitset<26> t = all[i];
                if ((t & cur).any()) continue;
                all.push_back(t | cur);
                res = max(res, (int)t.count() + n);
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/tiling-a-rectangle-with-the-fewest-squares/

Given a rectangle of size n x m, return the minimum number of integer-sided squares that tile the rectangle.

 

Example 1:



Input: n = 2, m = 3
Output: 3
Explanation: 3 squares are necessary to cover the rectangle.
2 (squares of 1x1)
1 (square of 2x2)
Example 2:



Input: n = 5, m = 8
Output: 5
Example 3:



Input: n = 11, m = 13
Output: 6
 

Constraints:

1 <= n, m <= 13

         m
    --------------
    |n-i             |
 n |------------|
    | i |   m-i     |
    --------------

         m
    --------------
    |n-i |            |
 n |----             |
    | i   |   m-i    |
    --------------

         m
    ----------------
    |             |        |
 n |----------|    j   |
    |      |__ _ |_____|
    | i    |               |
    ----------------


class Solution
{
public:
    int dp[15][15];

    int helper(int n, int m)
    {
        if (n > m) swap(n, m);
        if (n == 0) return 0;
        if (n == m) return 1;
        if (n == 1) return m;
        if (dp[n][m] > 0) return dp[n][m];
        int res = INT_MAX;
        for (int i = 1; i <= n; ++i)
        {
            res = min(res, 1 + helper(n - i, m) + helper(i, m - i));
            res = min(res, 1 + helper(n, m - i) + helper(n - i, i));
            for (int j = n - i + 1; j < m - i && j < n; ++j)
            {
                res = min(res, 2 + helper(n - i, m - j) + helper(i + j - n, m - i - j) + helper(n - j, m - i));
            }
        }
        return dp[n][m] = res;
    }

    int tilingRectangle(int n, int m)
    {
        if (n > m) swap(n, m);
        memset(dp, 0, sizeof(dp));
        return helper(n, m);
    }
};


// Source https://leetcode.com/problems/minimum-swaps-to-make-strings-equal/

You are given two strings s1 and s2 of equal length consisting of letters "x" and "y" only. 
Your task is to make these two strings equal to each other. You can swap any two characters that belong to different strings, which means: swap s1[i] and s2[j].

Return the minimum number of swaps required to make s1 and s2 equal, or return -1 if it is impossible to do so.

 

Example 1:

Input: s1 = "xx", s2 = "yy"
Output: 1
Explanation: Swap s1[0] and s2[1], s1 = "yx", s2 = "yx".
Example 2:

Input: s1 = "xy", s2 = "yx"
Output: 2
Explanation: Swap s1[0] and s2[0], s1 = "yy", s2 = "xx".
Swap s1[0] and s2[1], s1 = "xy", s2 = "xy".
Note that you cannot swap s1[0] and s1[1] to make s1 equal to "yx", cause we can only swap chars in different strings.
Example 3:

Input: s1 = "xx", s2 = "xy"
Output: -1
 

Constraints:

1 <= s1.length, s2.length <= 1000
s1, s2 only contain 'x' or 'y'.

第一个例子，对应位置相同，都是x->y，只要对称交换一下，就可以都变成 yx，这种情况只要一次替换。
第二个例子，对应位置互为相反，一个是 x->y，另一个是 y->x，这种情况需要两次替换，先换成对应位置相同的情况，也就是第一个例子的情况，然后再替换一次，变为相等。
第三个例子，由于两组映射既不相等，也不对称，所以无论如何替换，都无法变为相等。

Input: s1 = "xxyyxyxyxx", s2 = "xyyxyxxxyx"
Output: 4

xxyyxyxyxx
xyyxyxxxyx

先移除字符相同的那些位置，就变成了 xyxyyx 和 yxyxxy，此时的策略是，能用第一个例子的替换方法时就尽量先用，因为其只需一次替换，实在不行了再用第二个例子的替换方式。

xyxyyx	-> yyxyxx   -> yxxyxx   -> yyxyxx
yxyxxy        yxxyxy        yyxyxy       yyxyxx

分别统计两种映射 x->y 和 y->x 的个数，这里的 x->y 映射有3个，y->x 映射也有3个。前面说了，应该先凑例子1的模式，则分别取出两个 x->y 和 两个 y->x 组成例子1的模式，总共消耗两次替换即可，
剩下了一个 x->y 和一个 y->x 映射，正好就是例子2的情况，需要两次替换，总共需要4次替换操作。

class Solution
{
public:
    int minimumSwap(string s1, string s2)
    {
        int res = 0, n = s1.size(), xy = 0, yx = 0;
        for (int i = 0; i < n; ++i)
        {
            if (s1[i] == 'x' && s2[i] == 'y') ++xy;
            else if (s1[i] == 'y' && s2[i] == 'x') ++yx;
        }
        return (xy % 2 != yx % 2) ? -1 : (xy / 2 + yx / 2 + (xy % 2) * 2);
    }
};


// Source https://leetcode.com/problems/count-number-of-nice-subarrays/

Given an array of integers nums and an integer k. A continuous subarray is called nice if there are k odd numbers on it.

Return the number of nice sub-arrays.

 

Example 1:

Input: nums = [1,1,2,1,1], k = 3
Output: 2
Explanation: The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1].
Example 2:

Input: nums = [2,4,6], k = 1
Output: 0
Explanation: There is no odd numbers in the array.
Example 3:

Input: nums = [2,2,2,1,2,2,1,2,2,2], k = 2
Output: 16
 

Constraints:

1 <= nums.length <= 50000
1 <= nums[i] <= 10^5
1 <= k <= nums.length

class Solution
{
public:
    int numberOfSubarrays(vector<int> &nums, int k)
    {
        int n = nums.size();
        int pre[n]; // pre[i] = the index of previous odd number
        int next[n]; //next[i] = the index of next odd number
        vector<int> odd; //stores the index of odd numbers
        odd.reserve(1000);
        int t = -1;
        // creating pre
        for(int i = 0; i < n; i++)
        {
            pre[i] = t;
            if(nums[i] % 2)
            {
                t = i;
                odd.push_back(i);
            }
        }
        t = n;
        // creating next
        for(int i = n - 1; i >= 0; i--)
        {
            next[i] = t;
            if(nums[i] % 2)
            {
                t = i;                
            }
        }
        int m = odd.size();
        int ans = 0;
        // taking a window of size k;
        for(int i = 0, j = k - 1; j < m; i++, j++)
        {
            int x = odd[i] - pre[odd[i]];
            int y = next[odd[j]] - odd[j];
            ans += (x * y);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/minimum-remove-to-make-valid-parentheses/

Given a string s of '(' , ')' and lowercase English characters.

Your task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string.

Formally, a parentheses string is valid if and only if:

It is the empty string, contains only lowercase characters, or
It can be written as AB (A concatenated with B), where A and B are valid strings, or
It can be written as (A), where A is a valid string.
 

Example 1:

Input: s = "lee(t(c)o)de)"
Output: "lee(t(c)o)de"
Explanation: "lee(t(co)de)" , "lee(t(c)ode)" would also be accepted.
Example 2:

Input: s = "a)b(c)d"
Output: "ab(c)d"
Example 3:

Input: s = "))(("
Output: ""
Explanation: An empty string is also valid.
 

Constraints:

1 <= s.length <= 105
s[i] is either'(' , ')', or lowercase English letter.

class Solution
{
public:
    string minRemoveToMakeValid(string s)
    {
        string res;
        stack<int> st;
        for (int i = 0; i < s.size(); ++i)
        {
            if (s[i] == '(') st.push(i);
            else if (s[i] == ')')
            {
                if (st.empty()) s[i] = '*';
                else st.pop();
            }
        }
        while (!st.empty())
        {
            s[st.top()] = '*';
            st.pop();
        }
        for (char c : s)
        {
            if (c != '*') res += c;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/check-if-it-is-a-good-array/

Given an array nums of positive integers. Your task is to select some subset of nums, multiply each element by an integer and add all these numbers. 
The array is said to be good if you can obtain a sum of 1 from the array by any possible subset and multiplicand.

Return True if the array is good otherwise return False.

 

Example 1:

Input: nums = [12,5,7,23]
Output: true
Explanation: Pick numbers 5 and 7.
5*3 + 7*(-2) = 1
Example 2:

Input: nums = [29,6,10]
Output: true
Explanation: Pick numbers 29, 6 and 10.
29*1 + 6*(-3) + 10*(-1) = 1
Example 3:

Input: nums = [3,6]
Output: false
 

Constraints:

1 <= nums.length <= 10^5
1 <= nums[i] <= 10^9

裴蜀定理（或贝祖定理）
对任何整数a、b和它们的最大公约数d，关于未知数x和y的线性不定方程（称为裴蜀等式）：
若a,b是整数,且gcd(a,b)=d，那么对于任意的整数x,y, ax+by都一定是d的倍数，特别地，一定存在整数x,y，使ax+by=d成立。
它的一个重要推论是：a,b互质的充分必要条件是存在整数x,y使ax+by=1.
只要找到任意两个数字的最大公约数是1即可
可以找整个数组的最大公约数（因为整个数组的最大公约数不会大于任意两个数字的最大公约数）

class Solution
{
public:
    bool isGoodArray(vector<int> &nums)
    {
        int res = nums[0];
        for (int num : nums)
        {
            res = gcd(res, num);
            if (res == 1) return true;
        }
        return false;
    }
};


// Source https://leetcode.com/problems/cells-with-odd-values-in-a-matrix/

There is an m x n matrix that is initialized to all 0's. There is also a 2D array indices where each indices[i] = [ri, ci] represents a 0-indexed location to perform some increment operations on the matrix.

For each location indices[i], do both of the following:

Increment all the cells on row ri.
Increment all the cells on column ci.
Given m, n, and indices, return the number of odd-valued cells in the matrix after applying the increment to all locations in indices.

 

Example 1:


Input: m = 2, n = 3, indices = [[0,1],[1,1]]
Output: 6
Explanation: Initial matrix = [[0,0,0],[0,0,0]].
After applying first increment it becomes [[1,2,1],[0,1,0]].
The final matrix is [[1,3,1],[1,3,1]], which contains 6 odd numbers.
Example 2:


Input: m = 2, n = 2, indices = [[1,1],[0,0]]
Output: 0
Explanation: Final matrix = [[2,2],[2,2]]. There are no odd numbers in the final matrix.
 

Constraints:

1 <= m, n <= 50
1 <= indices.length <= 100
0 <= ri < m
0 <= ci < n

class Solution
{
public:
    int oddCells(int m, int n, vector<vector<int>> &indices)
    {
        int res = 0;
        vector<int> rowCnt(m), colCnt(n);
        for (auto &idx : indices)
        {
            ++rowCnt[idx[0]];
            ++colCnt[idx[1]];
        }
        for (int i = 0; i < m; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                res += (rowCnt[i] + colCnt[j]) % 2;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/reconstruct-a-2-row-binary-matrix/

Given the following details of a matrix with n columns and 2 rows :

The matrix is a binary matrix, which means each element in the matrix can be 0 or 1.
The sum of elements of the 0-th(upper) row is given as upper.
The sum of elements of the 1-st(lower) row is given as lower.
The sum of elements in the i-th column(0-indexed) is colsum[i], where colsum is given as an integer array with length n.
Your task is to reconstruct the matrix with upper, lower and colsum.

Return it as a 2-D integer array.

If there are more than one valid solution, any of them will be accepted.

If no valid solution exists, return an empty 2-D array.

 

Example 1:

Input: upper = 2, lower = 1, colsum = [1,1,1]
Output: [[1,1,0],[0,0,1]]
Explanation: [[1,0,1],[0,1,0]], and [[0,1,1],[1,0,0]] are also correct answers.

110
001

Example 2:

Input: upper = 2, lower = 3, colsum = [2,2,1,1]
Output: []

1101
1110

Example 3:

Input: upper = 5, lower = 5, colsum = [2,1,2,0,1,0,1,2,0,1]
Output: [[1,1,1,0,1,0,0,1,0,0],[1,0,1,0,0,0,1,1,0,1]]

1110001100
1010100101

Constraints:

1 <= colsum.length <= 10^5
0 <= upper, lower <= colsum.length
0 <= colsum[i] <= 2

class Solution
{
public:

    vector<vector<int>> reconstructMatrix(int upper, int lower, vector<int> &colsum)
    {
        int n = colsum.size();
        vector<vector<int>> ans(2, vector<int>(n));
        vector<int> indexs;
        indexs.reserve(2048);
        for(int i = 0; i < n; i++)
        {
            if(colsum[i] == 2)
            {
                ans[0][i] = ans[1][i] = 1;
                --upper;
                --lower;
            }
            else if(colsum[i] == 1)
            {
                indexs.push_back(i);
            }
            if (upper < 0 || lower < 0) break;
        }
        if (upper < 0 || lower < 0) return {};
        if ((upper + lower) != indexs.size()) return {};
        for (int i = 0; i < indexs.size(); ++i)
        {
            if (i < upper) { ans[0][indexs[i]] = 1; }
            else { ans[1][indexs[i]] = 1; }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/number-of-closed-islands/

Given a 2D grid consists of 0s (land) and 1s (water).  An island is a maximal 4-directionally connected group of 0s and a closed island is an island totally 
(all left, top, right, bottom) surrounded by 1s.

Return the number of closed islands.

 

Example 1:



Input: grid = [[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],[1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]]
Output: 2
Explanation: 
Islands in gray are closed because they are completely surrounded by water (group of 1s).
Example 2:



Input: grid = [[0,0,1,0,0],[0,1,0,1,0],[0,1,1,1,0]]
Output: 1
Example 3:

Input: grid = [[1,1,1,1,1,1,1],
               [1,0,0,0,0,0,1],
               [1,0,1,1,1,0,1],
               [1,0,1,0,1,0,1],
               [1,0,1,1,1,0,1],
               [1,0,0,0,0,0,1],
               [1,1,1,1,1,1,1]]
Output: 2
 

Constraints:

1 <= grid.length, grid[0].length <= 100
0 <= grid[i][j] <=1

class Solution
{
public:
    int m, n;

    int closedIsland(vector<vector<int>> &grid)
    {
        m = grid.size();
        n = grid[0].size();
        for (int i = 0; i < m; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                if ((i == 0 || i == m - 1 || j == 0 || j == n - 1) && grid[i][j] == 0)
                {
                    dfs(grid, i, j);
                }
            }
        }
        int res = 0;
        for (int i = 0; i < m; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                if (grid[i][j] != 0) continue;
                dfs(grid, i, j);
                ++res;
            }
        }
        return res;
    }

    void dfs(vector<vector<int>> &grid, int i, int j)
    {
        if (i < 0 || i >= m || j < 0 || j >= n || grid[i][j] != 0) return;
        grid[i][j] = 2;
        dfs(grid, i + 1, j);
        dfs(grid, i - 1, j);
        dfs(grid, i, j + 1);
        dfs(grid, i, j - 1);
    }
};


// Source https://leetcode.com/problems/maximum-score-words-formed-by-letters/

Given a list of words, list of  single letters (might be repeating) and score of every character.

Return the maximum score of any valid set of words formed by using the given letters (words[i] cannot be used two or more times).

It is not necessary to use all characters in letters and each letter can only be used once. Score of letters 'a', 'b', 'c', ... ,'z' is given by score[0], score[1], ... , score[25] respectively.

 

Example 1:

Input: words = ["dog","cat","dad","good"], letters = ["a","a","c","d","d","d","g","o","o"], score = [1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0]
Output: 23
Explanation:
Score  a=1, c=9, d=5, g=3, o=2
Given letters, we can form the words "dad" (5+1+5) and "good" (3+2+2+5) with a score of 23.
Words "dad" and "dog" only get a score of 21.
Example 2:

Input: words = ["xxxz","ax","bx","cx"], letters = ["z","a","b","c","x","x","x"], score = [4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,10]
Output: 27
Explanation:
Score  a=4, b=4, c=4, x=5, z=10
Given letters, we can form the words "ax" (4+5), "bx" (4+5) and "cx" (4+5) with a score of 27.
Word "xxxz" only get a score of 25.
Example 3:

Input: words = ["leetcode"], letters = ["l","e","t","c","o","d"], score = [0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0]
Output: 0
Explanation:
Letter "e" can only be used once.
 

Constraints:

1 <= words.length <= 14
1 <= words[i].length <= 15
1 <= letters.length <= 100
letters[i].length == 1
score.length == 26
0 <= score[i] <= 10
words[i], letters[i] contains only lower case English letters.

class Solution
{
public:
    int maxScoreWords(vector<string> &words, vector<char> &letters, vector<int> &score)
    {
        int res = 0, n = words.size(), total = (1 << n);
        vector<int> count(26);
        for (char c : letters) ++count[c - 'a'];
        for (int mask = 0; mask < total; ++mask)
        {
            int sum = 0, isValid = 1;
            vector<int> cnt = count;
            for (int i = n - 1; i >= 0; --i)
            {
                if ((mask >> i) & 1)
                {
                    for (char c : words[i])
                    {
                        if (--cnt[c - 'a'] < 0)
                        {
                            isValid = 0;
                            break;
                        }
                        sum += score[c - 'a'];
                    }
                }
                if (!isValid) break;
            }
            if (isValid) res = max(res, sum);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/shift-2d-grid/

Given a 2D grid of size m x n and an integer k. You need to shift the grid k times.

In one shift operation:

Element at grid[i][j] moves to grid[i][j + 1].
Element at grid[i][n - 1] moves to grid[i + 1][0].
Element at grid[m - 1][n - 1] moves to grid[0][0].
Return the 2D grid after applying shift operation k times.

 

Example 1:


Input: grid = [[1,2,3],[4,5,6],[7,8,9]], k = 1
Output: [[9,1,2],[3,4,5],[6,7,8]]
Example 2:


Input: grid = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], k = 4
Output: [[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]]
Example 3:

Input: grid = [[1,2,3],[4,5,6],[7,8,9]], k = 9
Output: [[1,2,3],[4,5,6],[7,8,9]]
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m <= 50
1 <= n <= 50
-1000 <= grid[i][j] <= 1000
0 <= k <= 100

class Solution
{
public:
    vector<vector<int>> shiftGrid(vector<vector<int>> &grid, int k)
    {
        int m = grid.size(), n = grid[0].size(), len = m * n;
        vector<vector<int>> res(m, vector<int>(n));
        for (int i = 0; i < m; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                int idx = (i * n + j + k) % len;
                res[idx / n][idx % n] = grid[i][j];
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/find-elements-in-a-contaminated-binary-tree/

Given a binary tree with the following rules:

root.val == 0
If treeNode.val == x and treeNode.left != null, then treeNode.left.val == 2 * x + 1
If treeNode.val == x and treeNode.right != null, then treeNode.right.val == 2 * x + 2
Now the binary tree is contaminated, which means all treeNode.val have been changed to -1.

Implement the FindElements class:

FindElements(TreeNode* root) Initializes the object with a contaminated binary tree and recovers it.
bool find(int target) Returns true if the target value exists in the recovered binary tree.
 

Example 1:


Input
["FindElements","find","find"]
[[[-1,null,-1]],[1],[2]]
Output
[null,false,true]
Explanation
FindElements findElements = new FindElements([-1,null,-1]); 
findElements.find(1); // return False 
findElements.find(2); // return True 
Example 2:


Input
["FindElements","find","find","find"]
[[[-1,-1,-1,-1,-1]],[1],[3],[5]]
Output
[null,true,true,false]
Explanation
FindElements findElements = new FindElements([-1,-1,-1,-1,-1]);
findElements.find(1); // return True
findElements.find(3); // return True
findElements.find(5); // return False
Example 3:


Input
["FindElements","find","find","find","find"]
[[[-1,null,-1,-1,null,-1]],[2],[3],[4],[5]]
Output
[null,true,false,false,true]
Explanation
FindElements findElements = new FindElements([-1,null,-1,-1,null,-1]);
findElements.find(2); // return True
findElements.find(3); // return False
findElements.find(4); // return False
findElements.find(5); // return True
 

Constraints:

TreeNode.val == -1
The height of the binary tree is less than or equal to 20
The total number of nodes is between [1, 104]
Total calls of find() is between [1, 104]
0 <= target <= 106

class FindElements
{
public:
    TreeNode *root;
    unordered_map<int, int> mp;

    void recur(TreeNode *root, int pre, bool is_left)
    {
        if(!root) return;
        if(is_left)
        {
            root->val = 2 * pre + 1;
            mp[root->val]++;
            recur(root->left, root->val, true);
            recur(root->right, root->val, false);
        }
        else
        {
            root->val = 2 * pre + 2;
            mp[root->val]++;
            recur(root->left, root->val, true);
            recur(root->right, root->val, false);
        }
    }

    FindElements(TreeNode *root)
    {
        this->root = root;
        if(root != nullptr)
        {
            root->val = 0;
            mp[root->val] = 1;
            recur(root->left, root->val, true);
            recur(root->right, root->val, false);
        }
    }

    bool find(int target)
    {
        return mp.find(target) != mp.end();
    }
};


// Source https://leetcode.com/problems/greatest-sum-divisible-by-three/

Given an array nums of integers, we need to find the maximum possible sum of elements of the array such that it is divisible by three.

 

Example 1:

Input: nums = [3,6,5,1,8]
Output: 18
Explanation: Pick numbers 3, 6, 1 and 8 their sum is 18 (maximum sum divisible by 3).
Example 2:

Input: nums = [4]
Output: 0
Explanation: Since 4 is not divisible by 3, do not pick any number.
Example 3:

Input: nums = [1,2,3,4,4]
Output: 12
Explanation: Pick numbers 1, 3, 4 and 4 their sum is 12 (maximum sum divisible by 3).
 

Constraints:

1 <= nums.length <= 4 * 10^4
1 <= nums[i] <= 10^4

class Solution
{
public:
    int n;
    int dp[40001][4];

    int recur(vector<int> &nums, int i, int r)
    {
        if(i == n)
        {
            if(r == 0) return 0;
            return INT_MIN;
        }
        if(dp[i][r] != -1)  return dp[i][r];
        int sum1 = nums[i] + recur(nums, i + 1, (nums[i] + r) % 3);
        int sum2 = recur(nums, i + 1, r);
        return dp[i][r] = max(sum1, sum2);
    }

    int maxSumDivThree(vector<int> &nums)
    {
        n = nums.size();
        memset(dp, -1, sizeof(dp));
        return recur(nums, 0, 0);
    }
};


// Source https://leetcode.com/problems/minimum-moves-to-move-a-box-to-their-target-location/

A storekeeper is a game in which the player pushes boxes around in a warehouse trying to get them to target locations.

The game is represented by an m x n grid of characters grid where each element is a wall, floor, or box.

Your task is to move the box 'B' to the target position 'T' under the following rules:

The character 'S' represents the player. The player can move up, down, left, right in grid if it is a floor (empty cell).
The character '.' represents the floor which means a free cell to walk.
The character '#' represents the wall which means an obstacle (impossible to walk there).
There is only one box 'B' and one target cell 'T' in the grid.
The box can be moved to an adjacent free cell by standing next to the box and then moving in the direction of the box. This is a push.
The player cannot walk through the box.
Return the minimum number of pushes to move the box to the target. If there is no way to reach the target, return -1.

 

Example 1:


Input: grid = [["#","#","#","#","#","#"],
               ["#","T","#","#","#","#"],
               ["#",".",".","B",".","#"],
               ["#",".","#","#",".","#"],
               ["#",".",".",".","S","#"],
               ["#","#","#","#","#","#"]]
Output: 3
Explanation: We return only the number of times the box is pushed.
Example 2:

Input: grid = [["#","#","#","#","#","#"],
               ["#","T","#","#","#","#"],
               ["#",".",".","B",".","#"],
               ["#","#","#","#",".","#"],
               ["#",".",".",".","S","#"],
               ["#","#","#","#","#","#"]]
Output: -1
Example 3:

Input: grid = [["#","#","#","#","#","#"],
               ["#","T",".",".","#","#"],
               ["#",".","#","B",".","#"],
               ["#",".",".",".",".","#"],
               ["#",".",".",".","S","#"],
               ["#","#","#","#","#","#"]]
Output: 5
Explanation: push the box down, left, left, up and up.
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 20
grid contains only characters '.', '#', 'S', 'T', or 'B'.
There is only one character 'S', 'B', and 'T' in the grid.

class Solution
{
public:
    int m, n;

    bool valid(vector<vector<char>> &grid, int row, int col)
    {
        return row >= 0 && row < m && col >= 0 && col < n && grid[row][col] != '#';
    }

    bool canReach(vector<vector<char>> &grid, int box_row, int box_col, int src_row, int src_col, int dest_row, int dest_col)
    {
        queue<pair<int, int>> q;
        unordered_set<long> visited;
        vector<vector<int>> dir {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
        q.push( {src_row, src_col} );
        visited.insert( (src_row * 100) + src_col );
        while (!q.empty())
        {
            auto cur = q.front();
            q.pop();
            if (cur.first == dest_row && cur.second == dest_col) return true;
            for (auto &d : dir)
            {
                int row = cur.first + d[0];
                int col = cur.second + d[1];
                if (valid(grid, row, col) && !(row == box_row && col == box_col) &&
                        visited.find( (row * 100) + col ) == visited.end())
                {
                    q.push( {row, col} );
                    visited.insert( (row * 100) + col );
                }
            }
        }
        return false;
    }

    int minPushBox(vector<vector<char>> &grid)
    {
        m = grid.size();
        n = grid[0].size();
        vector<vector<int>> dir {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
        pair<int, int> person;
        pair<int ,int> box;
        pair<int, int> target;
        for (int i = 0; i < m; i++)
        {
            for (int j = 0; j < n; j++)
            {
                if (grid[i][j] == 'S')
                {
                    person = {i, j};
                }
                else if (grid[i][j] == 'B')
                {
                    box = {i, j};
                }
                else if (grid[i][j] == 'T')
                {
                    target = {i, j};
                }
            }
        }
        queue<pair<int, int>> q;
        unordered_set<long> visited;
        q.push( { (box.first * 100) + box.second, (person.first * 100) + person.second } );
        visited.insert( ((box.first * 100) + box.second) * 10000 + (person.first * 100) + person.second );
        int res = 0;
        while (!q.empty())
        {
            int sz = q.size();
            for (int i = 0; i < sz; ++i)
            {
                auto cur = q.front();
                q.pop();

                int box_x = cur.first / 100;
                int box_y = cur.first % 100;
                int person_x = cur.second / 100;
                int person_y = cur.second % 100;

                if (box_x == target.first && box_y == target.second) return res;
                for (auto &d : dir)
                {
                    int b_dest_row = box_x + d[0];
                    int b_dest_col = box_y + d[1];
                    int p_dest_row = box_x - d[0];
                    int p_dest_col = box_y - d[1];
                    if (valid(grid, b_dest_row, b_dest_col) && valid(grid, p_dest_row, p_dest_col))
                    {
                        if (canReach(grid, box_x, box_y, person_x, person_y, p_dest_row, p_dest_col) &&
                                visited.find( ((b_dest_row * 100) + b_dest_col) * 10000 + (box_x * 100) + box_y ) == visited.end())
                        {
                            q.push( { (b_dest_row * 100) + b_dest_col, (box_x * 100) + box_y } );
                            visited.insert( ((b_dest_row * 100) + b_dest_col) * 10000 + (box_x * 100) + box_y );
                        }
                    }
                }
            }
            res++;
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/minimum-time-visiting-all-points/

On a 2D plane, there are n points with integer coordinates points[i] = [xi, yi]. Return the minimum time in seconds to visit all the points in the order given by points.

You can move according to these rules:

In 1 second, you can either:
move vertically by one unit,
move horizontally by one unit, or
move diagonally sqrt(2) units (in other words, move one unit vertically then one unit horizontally in 1 second).
You have to visit the points in the same order as they appear in the array.
You are allowed to pass through points that appear later in the order, but these do not count as visits.
 

Example 1:


Input: points = [[1,1],[3,4],[-1,0]]
Output: 7
Explanation: One optimal path is [1,1] -> [2,2] -> [3,3] -> [3,4] -> [2,3] -> [1,2] -> [0,1] -> [-1,0]   
Time from [1,1] to [3,4] = 3 seconds 
Time from [3,4] to [-1,0] = 4 seconds
Total time = 7 seconds
Example 2:

Input: points = [[3,2],[-2,2]]
Output: 5
 

Constraints:

points.length == n
1 <= n <= 100
points[i].length == 2
-1000 <= points[i][0], points[i][1] <= 1000

class Solution
{
public:
    int minTimeToVisitAllPoints(vector<vector<int>> &points)
    {
        int count = 0;
        int x = points[0][0];
        int y = points[0][1];
        for(int i = 1; i < points.size(); ++i)
        {
            count += max(abs(points[i][0] - x), abs(points[i][1] - y));
            x = points[i][0];
            y = points[i][1];
        }
        return count;
    }
};


// Source https://leetcode.com/problems/count-servers-that-communicate/

You are given a map of a server center, represented as a m * n integer matrix grid, where 1 means that on that cell there is a server and 0 means that it is no server. 
Two servers are said to communicate if they are on the same row or on the same column.

Return the number of servers that communicate with any other server.

 

Example 1:



Input: grid = [[1,0],[0,1]]
Output: 0
Explanation: No servers can communicate with others.
Example 2:



Input: grid = [[1,0],[1,1]]
Output: 3
Explanation: All three servers can communicate with at least one other server.
Example 3:



Input: grid = [[1,1,0,0],[0,0,1,0],[0,0,1,0],[0,0,0,1]]
Output: 4
Explanation: The two servers in the first row can communicate with each other. The two servers in the third column can communicate with each other. The server at right bottom corner can't communicate with any other server.
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m <= 250
1 <= n <= 250
grid[i][j] == 0 or 1

class Solution
{
public:
    int countServers(vector<vector<int>> &grid)
    {
        int n = grid.size();
        int m = grid[0].size();
        int count = 0;
        vector<int> row_count(n);
        vector<int> col_count(m);
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                if(grid[i][j])
                {
                    row_count[i]++;
                    col_count[j]++;
                }
            }
        }

        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                if(grid[i][j] && (row_count[i] >= 2 || col_count[j] >= 2 ))
                {
                    count++;
                }
            }
        }

        return count;
    }
};

// Source https://leetcode.com/problems/search-suggestions-system/

You are given an array of strings products and a string searchWord.

Design a system that suggests at most three product names from products after each character of searchWord is typed. 
Suggested products should have common prefix with searchWord. If there are more than three products with a common prefix return the three lexicographically minimums products.

Return a list of lists of the suggested products after each character of searchWord is typed.

 

Example 1:

Input: products = ["mobile","mouse","moneypot","monitor","mousepad"], searchWord = "mouse"
Output: [
["mobile","moneypot","monitor"],
["mobile","moneypot","monitor"],
["mouse","mousepad"],
["mouse","mousepad"],
["mouse","mousepad"]
]
Explanation: products sorted lexicographically = ["mobile","moneypot","monitor","mouse","mousepad"]
After typing m and mo all products match and we show user ["mobile","moneypot","monitor"]
After typing mou, mous and mouse the system suggests ["mouse","mousepad"]
Example 2:

Input: products = ["havana"], searchWord = "havana"
Output: [["havana"],["havana"],["havana"],["havana"],["havana"],["havana"]]
Example 3:

Input: products = ["bags","baggage","banner","box","cloths"], searchWord = "bags"
Output: [["baggage","bags","banner"],["baggage","bags","banner"],["baggage","bags"],["bags"]]
 

Constraints:

1 <= products.length <= 1000
1 <= products[i].length <= 3000
1 <= sum(products[i].length) <= 2 * 104
All the strings of products are unique.
products[i] consists of lowercase English letters.
1 <= searchWord.length <= 1000
searchWord consists of lowercase English letters.

class Solution
{
private:
    struct TrieNode
    {
        TrieNode *children[26];
        bool isEnd;
        string word;

        TrieNode()
        {
            for (int i = 0; i < 26; ++i)
            {
                children[i] = NULL;
            }
            isEnd = false;
        }
    };

    TrieNode *buildTrie(vector<string> &product)
    {
        TrieNode *root = new TrieNode();
        for (auto str : product)
        {
            TrieNode *node = root;
            for (char c : str)
            {
                if (!node->children[c - 'a'])
                {
                    node->children[c - 'a'] = new TrieNode();
                }
                node = node->children[c - 'a'];
            }
            node->isEnd = true;
            node->word = std::move(str);
        }
        return root;
    }

    void dfs(TrieNode *node, vector<string> &item)
    {
        if (!node || item.size() == 3)
            return;

        if (node->isEnd)
            item.push_back(node->word);

        for (int i = 0; i < 26; i++)
            dfs(node->children[i], item);
    }

public:
    vector<vector<string>> suggestedProducts(vector<string> &products, string searchWord)
    {
        TrieNode *root = buildTrie(products);
        int n = searchWord.size();
        vector<vector<string>> res;
        TrieNode *node = root;
        for (int i = 0; i < n; i ++)
        {
            vector<string> item;
            if (node->children[searchWord[i] - 'a'] == nullptr)
            {
                for (; i < n; ++i)
               {
                    res.push_back(item);
               }
                return res;
            }
            else
            {
                node = node->children[searchWord[i] - 'a'];
                dfs(node, item);
                res.push_back(item);
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/number-of-ways-to-stay-in-the-same-place-after-some-steps/

You have a pointer at index 0 in an array of size arrLen. At each step, you can move 1 position to the left, 1 position to the right in the array, or stay in the same place 
(The pointer should not be placed outside the array at any time).

Given two integers steps and arrLen, return the number of ways such that your pointer still at index 0 after exactly steps steps. Since the answer may be too large, return it modulo 109 + 7.

 

Example 1:

Input: steps = 3, arrLen = 2
Output: 4
Explanation: There are 4 differents ways to stay at index 0 after 3 steps.
Right, Left, Stay
Stay, Right, Left
Right, Stay, Left
Stay, Stay, Stay
Example 2:

Input: steps = 2, arrLen = 4
Output: 2
Explanation: There are 2 differents ways to stay at index 0 after 2 steps
Right, Left
Stay, Stay
Example 3:

Input: steps = 4, arrLen = 2
Output: 8
 

Constraints:

1 <= steps <= 500
1 <= arrLen <= 106

class Solution
{
public:
    int n;
    int dp[505][505];
    const int mod = 1e9 + 7;

    int recur(int pos, int steps)
    {
        if (steps < pos) return 0;
        if(steps == pos) return 1;
        if(steps == pos + 1) return 1 + pos;
        if(dp[pos][steps] != -1) return dp[pos][steps];
        long ans = recur(pos, steps - 1);
        if(pos > 0)
        {
            ans = ans + recur(pos - 1, steps - 1);
        }
        if(pos < n - 1)
        {
            ans = ans + recur(pos + 1, steps - 1);
        }
        return dp[pos][steps] = ans % mod;
    }

    int numWays(int steps, int arrLen)
    {
        n = arrLen;
        memset(dp, -1, sizeof(dp));
        return recur(0, steps);
    }
};


// Source https://leetcode.com/problems/find-winner-on-a-tic-tac-toe-game/

Tic-tac-toe is played by two players A and B on a 3 x 3 grid. The rules of Tic-Tac-Toe are:

Players take turns placing characters into empty squares ' '.
The first player A always places 'X' characters, while the second player B always places 'O' characters.
'X' and 'O' characters are always placed into empty squares, never on filled ones.
The game ends when there are three of the same (non-empty) character filling any row, column, or diagonal.
The game also ends if all squares are non-empty.
No more moves can be played if the game is over.
Given a 2D integer array moves where moves[i] = [rowi, coli] indicates that the ith move will be played on grid[rowi][coli]. return the winner of the game if it exists (A or B). 
In case the game ends in a draw return "Draw". If there are still movements to play return "Pending".

You can assume that moves is valid (i.e., it follows the rules of Tic-Tac-Toe), the grid is initially empty, and A will play first.

 

Example 1:


Input: moves = [[0,0],[2,0],[1,1],[2,1],[2,2]]
Output: "A"
Explanation: A wins, they always play first.
Example 2:


Input: moves = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]
Output: "B"
Explanation: B wins.
Example 3:


Input: moves = [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]
Output: "Draw"
Explanation: The game ends in a draw since there are no moves to make.
 

Constraints:

1 <= moves.length <= 9
moves[i].length == 2
0 <= rowi, coli <= 2
There are no repeated elements on moves.
moves follow the rules of tic tac toe.

class Solution
{
public:
    string tictactoe(vector<vector<int>> &moves)
    {
        unordered_map<string, int> mp1, mp2;
        int n = moves.size();
        for (int i = 0; i < n; ++i)
        {
            if (i % 2 == 0)
            {
                if (moves[i][0] == moves[i][1])
                    ++mp1["diag1"];
                if ((moves[i][0] + moves[i][1]) == 2)
                    ++mp1["diag2"];
                if (moves[i][0] == 0)
                    ++mp1["row0"];
                else if (moves[i][0] == 1)
                    ++mp1["row1"];
                else if (moves[i][0] == 2)
                    ++mp1["row2"];

                if (moves[i][1] == 0)
                    ++mp1["col0"];
                else if (moves[i][1] == 1)
                    ++mp1["col1"];
                else if (moves[i][1] == 2)
                    ++mp1["col2"];
            }
            else
            {
                if (moves[i][0] == moves[i][1])
                    ++mp2["diag1"];
                if ((moves[i][0] + moves[i][1]) == 2)
                    ++mp2["diag2"];
                if (moves[i][0] == 0)
                    ++mp2["row0"];
                else if (moves[i][0] == 1)
                    ++mp2["row1"];
                else if (moves[i][0] == 2)
                    ++mp2["row2"];

                if (moves[i][1] == 0)
                    ++mp2["col0"];
                else if (moves[i][1] == 1)
                    ++mp2["col1"];
                else if (moves[i][1] == 2)
                    ++mp2["col2"];
            }
        }

        for (const auto &p : mp1)
        {
            if (p.second == 3)
                return "A";
        }
        for (const auto &p : mp2)
        {
            if (p.second == 3)
                return "B";
        }
        if (n == 9) return "Draw";
        return "Pending";
    }
};


// Source https://leetcode.com/problems/number-of-burgers-with-no-waste-of-ingredients/

Given two integers tomatoSlices and cheeseSlices. The ingredients of different burgers are as follows:

Jumbo Burger: 4 tomato slices and 1 cheese slice.
Small Burger: 2 Tomato slices and 1 cheese slice.
Return [total_jumbo, total_small] so that the number of remaining tomatoSlices equal to 0 and the number of remaining cheeseSlices equal to 0. 
If it is not possible to make the remaining tomatoSlices and cheeseSlices equal to 0 return [].

 

Example 1:

Input: tomatoSlices = 16, cheeseSlices = 7
Output: [1,6]
Explantion: To make one jumbo burger and 6 small burgers we need 4*1 + 2*6 = 16 tomato and 1 + 6 = 7 cheese.
There will be no remaining ingredients.
Example 2:

Input: tomatoSlices = 17, cheeseSlices = 4
Output: []
Explantion: There will be no way to use all ingredients to make small and jumbo burgers.
Example 3:

Input: tomatoSlices = 4, cheeseSlices = 17
Output: []
Explantion: Making 1 jumbo burger there will be 16 cheese remaining and making 2 small burgers there will be 15 cheese remaining.
 

Constraints:

0 <= tomatoSlices, cheeseSlices <= 107

4x + 2y = t
x + y = c

2x = t - 2c
t >= 2c
2y=4c - t
4c >= t
t必须是偶数

class Solution
{
public:
    vector<int> numOfBurgers(int tomatoSlices, int cheeseSlices)
    {
        if (tomatoSlices % 2) return {};
        if (tomatoSlices < (2 * cheeseSlices)) return {};
        if (tomatoSlices > (4 * cheeseSlices)) return {};
        int diff = tomatoSlices - (2 * cheeseSlices);
        int a = diff / 2;
        return {a, cheeseSlices - a};
    }
};


// Source https://leetcode.com/problems/count-square-submatrices-with-all-ones/

Given a m * n matrix of ones and zeros, return how many square submatrices have all ones.

 

Example 1:

Input: matrix =
[
  [0,1,1,1],
  [1,1,1,1],
  [0,1,1,1]
]
Output: 15
Explanation: 
There are 10 squares of side 1.
There are 4 squares of side 2.
There is  1 square of side 3.
Total number of squares = 10 + 4 + 1 = 15.
Example 2:

Input: matrix = 
[
  [1,0,1],
  [1,1,0],
  [1,1,0]
]
Output: 7
Explanation: 
There are 6 squares of side 1.  
There is 1 square of side 2. 
Total number of squares = 6 + 1 = 7.
 

Constraints:

1 <= arr.length <= 300
1 <= arr[0].length <= 300
0 <= arr[i][j] <= 1

class Solution
{
public:
    int countSquares(vector<vector<int>> &matrix)
    {
        int m = matrix.size();
        int n = matrix[0].size();
        int count = 0;
        for(int i = 0; i < n; ++i)
        {
            if(matrix[0][i] == 1) count++;
        }
        for(int i = 1; i < m; ++i)
        {
            if(matrix[i][0] == 1) count++;
        }
        for(int i = 1; i < m; ++i)
        {
            for(int j = 1; j < n; ++j)
            {
                if(matrix[i][j] == 1)
                {
                    count++;
                    int val = min(matrix[i - 1][j], min(matrix[i - 1][j - 1], matrix[i][j - 1]));
                    if (val >= 1)
                    {
                        matrix[i][j] += val;
                        count += val;
                    }
                }
            }
        }
        return count;
    }
};


// Source https://leetcode.com/problems/palindrome-partitioning-iii/

You are given a string s containing lowercase letters and an integer k. You need to :

First, change some characters of s to other lowercase English letters.
Then divide s into k non-empty disjoint substrings such that each substring is a palindrome.
Return the minimal number of characters that you need to change to divide the string.

 

Example 1:

Input: s = "abc", k = 2
Output: 1
Explanation: You can split the string into "ab" and "c", and change 1 character in "ab" to make it palindrome.
Example 2:

Input: s = "aabbc", k = 3
Output: 0
Explanation: You can split the string into "aa", "bb" and "c", all of them are palindrome.
Example 3:

Input: s = "leetcode", k = 8
Output: 0
 

Constraints:

1 <= k <= s.length <= 100.
s only contains lowercase English letters.

class Solution
{
public:
    int n;
    int cost[101][101];
    int dp[101][101];

    int palinCost(string &s, int i, int j)
    {
        if (i == j) return 0;
        if (i + 1 == j) return (s[i] == s[j] ? 0 : 1);
        if (cost[i][j] != -1) return cost[i][j];
        if (s[i] == s[j]) return cost[i][j] = palinCost(s, i + 1, j - 1);
        return cost[i][j] = 1 + palinCost(s, i + 1, j - 1);
    }

    int recur(string &s, int i, int k)
    {
        if (i == n) return 1e9;
        if (k == 1) return palinCost(s, i, n - 1);
        if (dp[i][k] != -1) return dp[i][k];
        int ret = 1e9;
        for (int j = i; j < n; j++)
        {
            ret = min(ret, palinCost(s, i, j) + recur(s, j + 1, k - 1));
        }
        return dp[i][k] = ret;
    }

    int palindromePartition(string s, int k)
    {
        n = s.length();
        memset(cost, -1, sizeof(cost));
        memset(dp, -1, sizeof(dp));
        return recur(s, 0, k);
    }
};


// Source https://leetcode.com/problems/subtract-the-product-and-sum-of-digits-of-an-integer/

Given an integer number n, return the difference between the product of its digits and the sum of its digits.
 

Example 1:

Input: n = 234
Output: 15 
Explanation: 
Product of digits = 2 * 3 * 4 = 24 
Sum of digits = 2 + 3 + 4 = 9 
Result = 24 - 9 = 15
Example 2:

Input: n = 4421
Output: 21
Explanation: 
Product of digits = 4 * 4 * 2 * 1 = 32 
Sum of digits = 4 + 4 + 2 + 1 = 11 
Result = 32 - 11 = 21
 

Constraints:

1 <= n <= 10^5

class Solution
{
public:
    int subtractProductAndSum(int n)
    {
        vector<int> digits;
        while(n > 0)
        {
            int digit = n % 10;
            digits.push_back(digit);
            n /= 10;
        }
        int mul = 1;
        int sum = 0;
        for(auto i : digits)
        {
            mul *= i;
            sum += i;
        }
        return (mul - sum);
    }
};


// Source https://leetcode.com/problems/group-the-people-given-the-group-size-they-belong-to/

There are n people that are split into some unknown number of groups. Each person is labeled with a unique ID from 0 to n - 1.

You are given an integer array groupSizes, where groupSizes[i] is the size of the group that person i is in. For example, if groupSizes[1] = 3, then person 1 must be in a group of size 3.

Return a list of groups such that each person i is in a group of size groupSizes[i].

Each person should appear in exactly one group, and every person must be in a group. If there are multiple answers, return any of them. It is guaranteed that there will be at least one valid solution for the given input.

 

Example 1:

Input: groupSizes = [3,3,3,3,3,1,3]
Output: [[5],[0,1,2],[3,4,6]]
Explanation: 
The first group is [5]. The size is 1, and groupSizes[5] = 1.
The second group is [0,1,2]. The size is 3, and groupSizes[0] = groupSizes[1] = groupSizes[2] = 3.
The third group is [3,4,6]. The size is 3, and groupSizes[3] = groupSizes[4] = groupSizes[6] = 3.
Other possible solutions are [[2,1,6],[5],[0,4,3]] and [[5],[0,6,2],[4,3,1]].
Example 2:

Input: groupSizes = [2,1,3,3,3,2]
Output: [[1],[0,5],[2,3,4]]
 

Constraints:

groupSizes.length == n
1 <= n <= 500
1 <= groupSizes[i] <= n

class Solution
{
public:
    vector<vector<int>> groupThePeople(vector<int> &groupSizes)
    {
        vector<vector<int>> ans;
        unordered_map<int, vector<int>> m;
        for(int i = 0; i < groupSizes.size(); i++)
        {
            m[groupSizes[i]].push_back(i);
            if(m[groupSizes[i]].size() == groupSizes[i])
            {
                ans.push_back(m[groupSizes[i]]);
                m[groupSizes[i]].clear();
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/find-the-smallest-divisor-given-a-threshold/

Given an array of integers nums and an integer threshold, we will choose a positive integer divisor, divide all the array by it, and sum the division's result. 
Find the smallest divisor such that the result mentioned above is less than or equal to threshold.

Each result of the division is rounded to the nearest integer greater than or equal to that element. (For example: 7/3 = 3 and 10/2 = 5).

The test cases are generated so that there will be an answer.

 

Example 1:

Input: nums = [1,2,5,9], threshold = 6
Output: 5
Explanation: We can get a sum to 17 (1+2+5+9) if the divisor is 1. 
If the divisor is 4 we can get a sum of 7 (1+1+2+3) and if the divisor is 5 the sum will be 5 (1+1+1+2). 
Example 2:

Input: nums = [44,22,33,11,1], threshold = 5
Output: 44
 

Constraints:

1 <= nums.length <= 5 * 104
1 <= nums[i] <= 106
nums.length <= threshold <= 106

class Solution
{
public:
    int smallestDivisor(vector<int> &nums, int t)
    {
        int low = 1;
        int high = *max_element(nums.begin(), nums.end());
        int ans = high;
        while(low <= high)
        {
            int mid = low + (high - low) / 2;
            if(isValid(nums, mid, t))
            {
                ans = mid;
                high = mid - 1;
            }
            else low = mid + 1;
        }
        return ans;
    }

    bool isValid(vector<int> &nums, int mid, int t)
    {
        int sum = 0;
        for(int val : nums)
        {
            sum += val / mid;
            if(val % mid != 0) sum++;
        }
        return sum <= t;
    }
};


// Source https://leetcode.com/problems/minimum-number-of-flips-to-convert-binary-matrix-to-zero-matrix/

Given a m x n binary matrix mat. In one step, you can choose one cell and flip it and all the four neighbors of it if they exist (Flip is changing 1 to 0 and 0 to 1). 
A pair of cells are called neighbors if they share one edge.

Return the minimum number of steps required to convert mat to a zero matrix or -1 if you cannot.

A binary matrix is a matrix with all cells equal to 0 or 1 only.

A zero matrix is a matrix with all cells equal to 0.

 

Example 1:


Input: mat = [[0,0],[0,1]]
Output: 3
Explanation: One possible solution is to flip (1, 0) then (0, 1) and finally (1, 1) as shown.
Example 2:

Input: mat = [[0]]
Output: 0
Explanation: Given matrix is a zero matrix. We do not need to change it.
Example 3:

Input: mat = [[1,0,0],[1,0,0]]
Output: -1
Explanation: Given matrix cannot be a zero matrix.
 

Constraints:

m == mat.length
n == mat[i].length
1 <= m, n <= 3
mat[i][j] is either 0 or 1.

class Solution
{
public:

    bitset<10> nextFlips(bitset<10> &bits, int x, int y, int m, int n)
    {
        bitset<10> res = bits;
        int index = x * 3 + y;
        res[index] = bits[index] ^ 1;
        if (x - 1 >= 0)
        {
            index = (x - 1) * 3 + y;
            res[index] = bits[index] ^ 1;
        }
        if (y - 1 >= 0)
        {
            index = x * 3 + (y - 1);
            res[index] = bits[index] ^ 1;
        }
        if (x + 1 < m)
        {
            index = (x + 1) * 3 + (y);
            res[index] = bits[index] ^ 1;
        }
        if (y + 1 < n)
        {
            index = x * 3 + (y + 1);
            res[index] = bits[index] ^ 1;
        }
        return res;
    }

    int minFlips(vector<vector<int>> &mat)
    {
        int m = mat.size();
        int n = mat[0].size();
        bitset<10> currentBitSet(0);
        for (int i = 0; i < m; i++)
        {
            for (int j = 0; j < n; j++)
            {
                int index = i * 3 + j;
                currentBitSet[index] = mat[i][j];
            }
        }
        using QEntry = tuple<bitset<10>, int>;
        queue<QEntry> q;
        unordered_set<bitset<10>> visited;
        q.push({currentBitSet, 0});
        visited.insert(currentBitSet);
        int res = INT_MAX;
        while (!q.empty())
        {
            auto [bits, cost] = q.front();
            q.pop();
            if (bits.to_ulong() == 0)
            {
                res = min(res, cost);
                break;
            }
            for (int i = 0; i < m; i++)
            {
                for (int j = 0; j < n; j++)
                {
                    bitset<10> nxt = nextFlips(bits, i, j, m, n);
                    if (visited.find(nxt) != visited.end()) continue;
                    visited.insert(nxt);
                    q.push({nxt, cost + 1});
                }
            }
        }
        return res == INT_MAX ? -1 : res;
    }
};


// Source https://leetcode.com/problems/iterator-for-combination/

Design the CombinationIterator class:

CombinationIterator(string characters, int combinationLength) Initializes the object with a string characters of sorted distinct lowercase English letters 
and a number combinationLength as arguments.
next() Returns the next combination of length combinationLength in lexicographical order.
hasNext() Returns true if and only if there exists a next combination.
 

Example 1:

Input
["CombinationIterator", "next", "hasNext", "next", "hasNext", "next", "hasNext"]
[["abc", 2], [], [], [], [], [], []]
Output
[null, "ab", true, "ac", true, "bc", false]

Explanation
CombinationIterator itr = new CombinationIterator("abc", 2);
itr.next();    // return "ab"
itr.hasNext(); // return True
itr.next();    // return "ac"
itr.hasNext(); // return True
itr.next();    // return "bc"
itr.hasNext(); // return False
 

Constraints:

1 <= combinationLength <= characters.length <= 15
All the characters of characters are unique.
At most 104 calls will be made to next and hasNext.
It is guaranteed that all calls of the function next are valid.

class CombinationIterator
{
public:
    vector<string> combinations;
    int i;

    void solve(string &s, int n, string &tmp, int idx)
    {
        if (idx + n > s.size()) return ;
        if(n == 0)
        {
            combinations.push_back(tmp);
            return;
        }
        for(int i = idx; i < s.size(); i++)
        {
            tmp.push_back(s[i]);
            solve(s, n - 1, tmp, i + 1);
            tmp.pop_back();
        }
    }

    CombinationIterator(string s, int n)
    {
        i = 0;
        string tmp = "";
        solve(s, n, tmp, 0);
    }

    string next()
    {
        i++;
        return combinations[i - 1];
    }

    bool hasNext()
    {
        return i < combinations.size();
    }
};


// Source https://leetcode.com/problems/element-appearing-more-than-25-in-sorted-array/

Given an integer array sorted in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time, return that integer.

 

Example 1:

Input: arr = [1,2,2,6,6,6,6,7,10]
Output: 6
Example 2:

Input: arr = [1,1]
Output: 1
 

Constraints:

1 <= arr.length <= 104
0 <= arr[i] <= 105

class Solution
{
public:
    int findSpecialInteger(vector<int> &arr)
    {
        int size = arr.size();
        unordered_map<int, int> freq;
        for(auto i : arr)
        {
            if (++freq[i] > size / 4) return i;
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/remove-covered-intervals/

Given an array intervals where intervals[i] = [li, ri] represent the interval [li, ri), remove all intervals that are covered by another interval in the list.

The interval [a, b) is covered by the interval [c, d) if and only if c <= a and b <= d.

Return the number of remaining intervals.

 

Example 1:

Input: intervals = [[1,4],[3,6],[2,8]]
Output: 2
Explanation: Interval [3,6] is covered by [2,8], therefore it is removed.
Example 2:

Input: intervals = [[1,4],[2,3]]
Output: 1
 

Constraints:

1 <= intervals.length <= 1000
intervals[i].length == 2
0 <= li < ri <= 105
All the given intervals are unique.

class Solution
{
public:
    int removeCoveredIntervals(vector<vector<int>> &intervals)
    {
        int c = 0;
        stack<array<int, 2>> s;
        sort(intervals.begin(), intervals.end());
        for(int i = 0; i < intervals.size(); i++)
        {
            if(s.empty())
            {
                s.push({intervals[i][0], intervals[i][1]});
            }
            else
            {
                auto top = s.top();
                if(top[0] <= intervals[i][0] && top[1] >= intervals[i][1])
                {
                    c++;
                }
                else if(top[0] == intervals[i][0] && top[1] <= intervals[i][1])
                {
                    c++;
                    s.pop();
                    s.push({intervals[i][0], intervals[i][1]});
                }
                else
                {
                    s.push({intervals[i][0], intervals[i][1]});
                }
            }
        }
        return intervals.size() - c;
    }
};


// Source https://leetcode.com/problems/minimum-falling-path-sum-ii/

Given an n x n integer matrix grid, return the minimum sum of a falling path with non-zero shifts.

A falling path with non-zero shifts is a choice of exactly one element from each row of grid such that no two elements chosen in adjacent rows are in the same column.

 

Example 1:


Input: arr = [[1,2,3],[4,5,6],[7,8,9]]
Output: 13
Explanation: 
The possible falling paths are:
[1,5,9], [1,5,7], [1,6,7], [1,6,8],
[2,4,8], [2,4,9], [2,6,7], [2,6,8],
[3,4,8], [3,4,9], [3,5,7], [3,5,9]
The falling path with the smallest sum is [1,5,7], so the answer is 13.
Example 2:

Input: grid = [[7]]
Output: 7
 

Constraints:

n == grid.length == grid[i].length
1 <= n <= 200
-99 <= grid[i][j] <= 99

class Solution
{
public:
    int minFallingPathSum(vector<vector<int>> &grid)
    {
        int m = grid.size();
        int n = grid[0].size();
        int dp[m][n];
        if(grid.size() == 1)
        {
            return grid[0][0];
        }
        for(int i = 0; i < m; i++)
        {
            dp[0][i] = grid[0][i];
        }
        for(int i = 1; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                int minVal = INT_MAX;
                for(int k = 0; k < n; k++)
                {
                    if(k == j)
                    {
                        continue;
                    }
                    else
                    {
                        minVal = min(minVal, dp[i - 1][k]);
                    }
                }
                dp[i][j] = grid[i][j] + minVal;
            }
        }
        int res = INT_MAX;
        for(int i = n - 1; i >= 0; i--)
        {
            res = min(res, dp[m - 1][i]);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/convert-binary-number-in-a-linked-list-to-integer/

Given head which is a reference node to a singly-linked list. The value of each node in the linked list is either 0 or 1. The linked list holds the binary representation of a number.

Return the decimal value of the number in the linked list.

 

Example 1:


Input: head = [1,0,1]
Output: 5
Explanation: (101) in base 2 = (5) in base 10
Example 2:

Input: head = [0]
Output: 0
 

Constraints:

The Linked List is not empty.
Number of nodes will not exceed 30.
Each node's value is either 0 or 1.

class Solution
{
public:
    int getDecimalValue(ListNode *head)
    {
        bitset<32> bs;
        unsigned idx = 31;
        while(head)
        {
            bs[idx] = head->val;
            idx--;
            head = head->next;
        }
        bs = (bs >> (idx + 1));
        return bs.to_ulong();
    }
};


// Source https://leetcode.com/problems/sequential-digits/

An integer has sequential digits if and only if each digit in the number is one more than the previous digit.

Return a sorted list of all the integers in the range [low, high] inclusive that have sequential digits.

 

Example 1:

Input: low = 100, high = 300
Output: [123,234]
Example 2:

Input: low = 1000, high = 13000
Output: [1234,2345,3456,4567,5678,6789,12345]
 

Constraints:

10 <= low <= high <= 10^9

class Solution
{
public:

    int createNum(int i, int len)
    {
        int num = 0;
        int val = i;
        for (int j = 0; j < len; j++)
        {
            num = (num * 10) + val;
            ++val;
        }
        return num;
    }

    void sequentialLen(vector<int> &ret, int len, int low, int high)
    {
        for (int i = 1; i <= 10 - len; i++)
        {
            int newNum = createNum(i, len);
            if (newNum >= low && newNum <= high) ret.push_back(newNum);
        }
    }

    vector<int> sequentialDigits(int low, int high)
    {
        int n = to_string(low).size();
        int N = to_string(high).size();
        vector<int> ret;
        for (int len = n; len <= N; len++)
        {
            sequentialLen(ret, len, low, high);
        }
        return ret;
    }
};


// Source https://leetcode.com/problems/maximum-side-length-of-a-square-with-sum-less-than-or-equal-to-threshold/

Given a m x n matrix mat and an integer threshold, return the maximum side-length of a square with a sum less than or equal to threshold or return 0 if there is no such square.

 

Example 1:


Input: mat = [[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3,2]], threshold = 4
Output: 2
Explanation: The maximum side length of square with sum less than 4 is 2 as shown.
Example 2:

Input: mat = [[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2]], threshold = 1
Output: 0
 

Constraints:

m == mat.length
n == mat[i].length
1 <= m, n <= 300
0 <= mat[i][j] <= 104
0 <= threshold <= 105

class Solution
{
public:
    int getSum(vector<vector<int>> &mat, int x1, int y1, int x2, int y2)
    {
        int sum = mat[x2][y2];
        if(x1 - 1 >= 0 && y1 - 1 >= 0)
        {
            sum += mat[x1 - 1][y1 - 1] - mat[x2][y1 - 1] - mat[x1 - 1][y2];
        }
        else if(x1 - 1 >= 0)
        {
            sum -= mat[x1 - 1][y2];
        }
        else if(y1 - 1 >= 0)
        {
            sum -= mat[x2][y1 - 1];
        }
        return sum;
    }

    int maxSideLength(vector<vector<int>> &mat, int threshold)
    {
        int i, j;
        int m = mat.size();
        int n = mat[0].size();

        for(i = 1; i < n; i++)
        {
            mat[0][i] += mat[0][i - 1];
        }
        for(i = 1; i < m; i++)
        {
            mat[i][0] += mat[i - 1][0];
        }
        for(i = 1; i < m; i++)
        {
            for(j = 1; j < n; j++)
            {
                mat[i][j] += mat[i - 1][j] + mat[i][j - 1] - mat[i - 1][j - 1];
            }
        }

        int ans = 0;
        int maxLen = min(m, n);

        for(i = 0; i < m; i++)
        {
            for(j = 0; j < n; j++)
            {
                while(i - ans >= 0 && j - ans >= 0 && getSum(mat, i - ans, j - ans, i, j) <= threshold)
                {
                    ans++;
                    if(ans == maxLen)
                    {
                        return ans;
                    }
                }
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/shortest-path-in-a-grid-with-obstacles-elimination/

You are given an m x n integer matrix grid where each cell is either 0 (empty) or 1 (obstacle). You can move up, down, left, or right from and to an empty cell in one step.

Return the minimum number of steps to walk from the upper left corner (0, 0) to the lower right corner (m - 1, n - 1) given that you can eliminate at most k obstacles. 
If it is not possible to find such walk return -1.

 

Example 1:


Input: grid = [[0,0,0],[1,1,0],[0,0,0],[0,1,1],[0,0,0]], k = 1
Output: 6
Explanation: 
The shortest path without eliminating any obstacle is 10.
The shortest path with one obstacle elimination at position (3,2) is 6. Such path is (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (3,2) -> (4,2).
Example 2:


Input: grid = [[0,1,1],[1,1,1],[1,0,0]], k = 1
Output: -1
Explanation: We need to eliminate at least two obstacles to find such a walk.
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 40
1 <= k <= m * n
grid[i][j] is either 0 or 1.
grid[0][0] == grid[m - 1][n - 1] == 0

class Solution
{
public:
    int shortestPath(vector<vector<int>> &grid, int k)
    {
        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> liv(m, vector<int>(n, -1));
        queue<array<int, 4>> q;
        q.push({0, 0, 0, k});
        int xx[4] = {-1, 0, 1, 0};
        int yy[4] = {0, 1, 0, -1};
        while(!q.empty())
        {
            auto t = q.front();
            q.pop();
            int i = t[0], j = t[1];
            if(i == m - 1 && j == n - 1) return t[2];
            for(int k = 0; k < 4; ++k)
            {
                int a = i + xx[k], b = j + yy[k];
                if(a >= 0 && a < m && b >= 0 && b < n && (grid[a][b] == 0 || t[3] > 0))
                {
                    if (grid[a][b] == 1 && liv[a][b] < t[3] - 1)
                    {
                        q.push({a, b, t[2] + 1, t[3] - 1});
                        liv[a][b] = t[3] - 1;
                    }
                    else if (grid[a][b] == 0 && liv[a][b] < t[3])
                    {
                        q.push({a, b, t[2] + 1, t[3]});
                        liv[a][b] = t[3];
                    }
                }
            }
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/find-numbers-with-even-number-of-digits/

Given an array nums of integers, return how many of them contain an even number of digits.

 

Example 1:

Input: nums = [12,345,2,6,7896]
Output: 2
Explanation: 
12 contains 2 digits (even number of digits). 
345 contains 3 digits (odd number of digits). 
2 contains 1 digit (odd number of digits). 
6 contains 1 digit (odd number of digits). 
7896 contains 4 digits (even number of digits). 
Therefore only 12 and 7896 contain an even number of digits.
Example 2:

Input: nums = [555,901,482,1771]
Output: 1 
Explanation: 
Only 1771 contains an even number of digits.
 

Constraints:

1 <= nums.length <= 500
1 <= nums[i] <= 105

class Solution
{
public:
    int findNumbers(vector<int> &nums)
    {
        int n = nums.size();
        int res = 0;
        for(int i = 0; i < n; ++i)
        {
            int val = nums[i];
            int cnt = 0;
            while(val > 0)
            {
                ++cnt;
                val = val / 10;
            }
            if(cnt % 2 == 0) ++res;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/

Given an array of integers nums and a positive integer k, check whether it is possible to divide this array into sets of k consecutive numbers.

Return true if it is possible. Otherwise, return false.

 

Example 1:

Input: nums = [1,2,3,3,4,4,5,6], k = 4
Output: true
Explanation: Array can be divided into [1,2,3,4] and [3,4,5,6].
Example 2:

Input: nums = [3,2,1,2,3,4,3,4,5,9,10,11], k = 3
Output: true
Explanation: Array can be divided into [1,2,3] , [2,3,4] , [3,4,5] and [9,10,11].
Example 3:

Input: nums = [1,2,3,4], k = 3
Output: false
Explanation: Each array should be divided in subarrays of size 3.
 

Constraints:

1 <= k <= nums.length <= 105
1 <= nums[i] <= 109

class Solution
{
public:
    bool isPossibleDivide(vector<int> &nums, int k)
    {
        multiset<int> s;
        for(int val : nums) s.insert(val);
        while(!s.empty())
        {
            int a = *s.begin();
            for(int i = a; i < a + k; i++)
            {
                auto itr = s.find(i);
                if(itr == s.end())  return false;
                s.erase(itr);
            }
        }
        return true;
    }
};


// Source https://leetcode.com/problems/maximum-number-of-occurrences-of-a-substring/

Given a string s, return the maximum number of ocurrences of any substring under the following rules:

The number of unique characters in the substring must be less than or equal to maxLetters.
The substring size must be between minSize and maxSize inclusive.
 

Example 1:

Input: s = "aababcaab", maxLetters = 2, minSize = 3, maxSize = 4
Output: 2
Explanation: Substring "aab" has 2 ocurrences in the original string.
It satisfies the conditions, 2 unique letters and size 3 (between minSize and maxSize).
Example 2:

Input: s = "aaaa", maxLetters = 1, minSize = 3, maxSize = 3
Output: 2
Explanation: Substring "aaa" occur 2 times in the string. It can overlap.
 

Constraints:

1 <= s.length <= 105
1 <= maxLetters <= 26
1 <= minSize <= maxSize <= min(26, s.length)
s consists of only lowercase English letters.

class Solution
{
public:
    int maxFreq(string s, int maxletters, int minSize, int maxSize)
    {
        int res = 0;
        unordered_map<string, int> subStrings;
        int letters[26] = {0};
        int unique = 0;
        string sub = "";
        int n = s.length();
        for (int i = 0; i < n; ++i)
        {
            sub += s[i];
            if (letters[s[i] - 'a']++ == 0) ++unique;
            if (sub.size() == minSize)
            {
                if (unique <= maxletters)
                {
                    res = max(res, ++subStrings[sub]);
                }
                if (--letters[sub[0] - 'a'] == 0) --unique;
                sub = sub.substr(1);
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/maximum-candies-you-can-get-from-boxes/

You have n boxes labeled from 0 to n - 1. You are given four arrays: status, candies, keys, and containedBoxes where:

status[i] is 1 if the ith box is open and 0 if the ith box is closed,
candies[i] is the number of candies in the ith box,
keys[i] is a list of the labels of the boxes you can open after opening the ith box.
containedBoxes[i] is a list of the boxes you found inside the ith box.
You are given an integer array initialBoxes that contains the labels of the boxes you initially have. 
You can take all the candies in any open box and you can use the keys in it to open new boxes and you also can use the boxes you find in it.

Return the maximum number of candies you can get following the rules above.

 

Example 1:

Input: status = [1,0,1,0], candies = [7,5,4,100], keys = [[],[],[1],[]], containedBoxes = [[1,2],[3],[],[]], initialBoxes = [0]
Output: 16
Explanation: You will be initially given box 0. You will find 7 candies in it and boxes 1 and 2.
Box 1 is closed and you do not have a key for it so you will open box 2. You will find 4 candies and a key to box 1 in box 2.
In box 1, you will find 5 candies and box 3 but you will not find a key to box 3 so box 3 will remain closed.
Total number of candies collected = 7 + 4 + 5 = 16 candy.
Example 2:

Input: status = [1,0,0,0,0,0], candies = [1,1,1,1,1,1], keys = [[1,2,3,4,5],[],[],[],[],[]], containedBoxes = [[1,2,3,4,5],[],[],[],[],[]], initialBoxes = [0]
Output: 6
Explanation: You have initially box 0. Opening it you can find boxes 1,2,3,4 and 5 and their keys.
The total number of candies will be 6.
 

Constraints:

n == status.length == candies.length == keys.length == containedBoxes.length
1 <= n <= 1000
status[i] is either 0 or 1.
1 <= candies[i] <= 1000
0 <= keys[i].length <= n
0 <= keys[i][j] < n
All values of keys[i] are unique.
0 <= containedBoxes[i].length <= n
0 <= containedBoxes[i][j] < n
All values of containedBoxes[i] are unique.
Each box is contained in one box at most.
0 <= initialBoxes.length <= n
0 <= initialBoxes[i] < n

class Solution
{
public:

    int maxCandies(vector<int> &status, vector<int> &candies, vector<vector<int>> &keys, vector<vector<int>> &containedBoxes, vector<int> &initialBoxes)
    {
        int n = status.size();
        vector<bool> vis(n, false);
        int ret = 0;
        queue<int> q;
        for(auto start : initialBoxes)
        {
            q.push(start);
            vis[start] = true;
        }
        while(!q.empty())
        {
            int sz = q.size();
            for (int i = 0; i < sz; ++i)
            {
                int curr = q.front();
                q.pop();
                if(status[curr])
                {
                    for(auto open : keys[curr])
                    {
                        if(!status[open])
                        {
                            status[open] = 1;
                            if(vis[open]) q.push(open);
                        }
                    }
                    for(auto child : containedBoxes[curr])
                    {
                        if(!vis[child])
                        {
                            q.push(child);
                            vis[child] = true;
                        }
                    }
                }
            }
        }
        for(int i = 0; i < n; ++i)
        {
            if(status[i] && vis[i]) ret += candies[i];
        }
        return ret;
    }
};


// Source https://leetcode.com/problems/replace-elements-with-greatest-element-on-right-side/

Given an array arr, replace every element in that array with the greatest element among the elements to its right, and replace the last element with -1.

After doing so, return the array.

 

Example 1:

Input: arr = [17,18,5,4,6,1]
Output: [18,6,6,6,1,-1]
Explanation: 
- index 0 --> the greatest element to the right of index 0 is index 1 (18).
- index 1 --> the greatest element to the right of index 1 is index 4 (6).
- index 2 --> the greatest element to the right of index 2 is index 4 (6).
- index 3 --> the greatest element to the right of index 3 is index 4 (6).
- index 4 --> the greatest element to the right of index 4 is index 5 (1).
- index 5 --> there are no elements to the right of index 5, so we put -1.
Example 2:

Input: arr = [400]
Output: [-1]
Explanation: There are no elements to the right of index 0.
 

Constraints:

1 <= arr.length <= 104
1 <= arr[i] <= 105

class Solution
{
public:
    vector<int> replaceElements(vector<int> &arr)
    {
        int n = arr.size();
        int greatest = arr[n - 1];
        arr[n - 1] = -1;
        for(int i = n - 2; i >= 0; i--)
        {
            int temp = arr[i];
            arr[i] = greatest;
            greatest = max(greatest, temp);
        }
        return arr;
    }
};


// Source https://leetcode.com/problems/sum-of-mutated-array-closest-to-target/

Given an integer array arr and a target value target, return the integer value such that when we change all the integers larger than value in the given array to be equal to value, 
the sum of the array gets as close as possible (in absolute difference) to target.

In case of a tie, return the minimum such integer.

Notice that the answer is not neccesarilly a number from arr.

 

Example 1:

Input: arr = [4,9,3], target = 10
Output: 3
Explanation: When using 3 arr converts to [3, 3, 3] which sums 9 and that's the optimal answer.
Example 2:

Input: arr = [2,3,5], target = 10
Output: 5
Example 3:

Input: arr = [60864,25176,27249,21296,20204], target = 56803
Output: 11361
 

Constraints:

1 <= arr.length <= 104
1 <= arr[i], target <= 105

class Solution
{
public:
    int findBestValue(vector<int> &arr, int target)
    {
        int left = 0, right = 0;
        for (auto num : arr)
        {
            right = max(right, num);
        }
        int res = INT_MAX, resv = -1;
        while (left <= right)
        {
            int mid = left + (right - left) / 2;
            int sum = 0;
            for (auto &num : arr)
            {
                sum += num < mid ? num : mid;
            }
            if (res > abs(target - sum))
            {
                res = abs(target - sum);
                resv = mid;
            }
            else if (res == abs(target - sum) && resv > mid)
            {
                resv = mid;
            }
            if (sum < target)
            {
                left = mid + 1;
            }
            else
            {
                right = mid - 1;
            }
        }
        return resv;
    }
};


// Source https://leetcode.com/problems/number-of-paths-with-max-score/

You are given a square board of characters. You can move on the board starting at the bottom right square marked with the character 'S'.

You need to reach the top left square marked with the character 'E'. The rest of the squares are labeled either with a numeric character 1, 2, ..., 9 or with an obstacle 'X'. 
In one move you can go up, left or up-left (diagonally) only if there is no obstacle there.

Return a list of two integers: the first integer is the maximum sum of numeric characters you can collect, 
and the second is the number of such paths that you can take to get that maximum sum, taken modulo 10^9 + 7.

In case there is no path, return [0, 0].

 

Example 1:

Input: board = ["E23","2X2","12S"]
Output: [7,1]
Example 2:

Input: board = ["E12","1X1","21S"]
Output: [4,2]
Example 3:

Input: board = ["E11","XXX","11S"]
Output: [0,0]
 

Constraints:

2 <= board.length == board[i].length <= 100

class Solution
{
public:
    int n;
    pair<int, int> dp[101][101];
    int dir[3][2] = {{0, -1}, {-1, 0}, {-1, -1}};
    const int mod = 1000000007;

    pair<int, int> recur(int i, int j, vector<string> &board)
    {
        if(i < 0 || j < 0 || board[i][j] == 'X') return {INT_MIN, 0};
        if(i == 0 && j == 0) return {0, 1};
        if(dp[i][j].first != -1) return dp[i][j];
        int val = board[i][j] == 'S' ? 0 : board[i][j] - '0';
        int res = INT_MIN, count = 0;
        for(int k = 0; k < 3; k++)
        {
            pair<int, int> p = recur(i + dir[k][0], j + dir[k][1], board);
            if (p.first == INT_MIN) continue;
            if(p.first + val > res)
            {
                res = p.first + val;
                count = p.second;
            }
            else if(p.first + val == res)
            {
                count = (count + p.second) % mod;
            }
        }
        return dp[i][j] = {res, count};
    }

    vector<int> pathsWithMaxScore(vector<string> &board)
    {
        n = board.size();
        for(int i = 0; i <= 100; i++)
        {
            for(int j = 0; j <= 100; j++)
            {
                dp[i][j] = {-1, 0};
            }
        }
        pair<int, int> p = recur(n - 1, n - 1, board);
        int sum = p.first;
        int paths = p.second;
        if(sum < 0) return {0, 0};
        return {sum, paths};
    }
};


// Source https://leetcode.com/problems/deepest-leaves-sum/

Given the root of a binary tree, return the sum of values of its deepest leaves.
 

Example 1:


Input: root = [1,2,3,4,5,null,6,7,null,null,null,null,8]
Output: 15
Example 2:

Input: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]
Output: 19
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
1 <= Node.val <= 100

class Solution
{
public:
    int deepestLeavesSum(TreeNode *root)
    {
        if(root == NULL) return 0;
        vector<int> ans;
        queue<TreeNode *> q;
        q.push(root);
        while(!q.empty())
        {
            int sz = q.size();
            int temp = 0;
            for(int i = 0; i < sz; i++)
            {
                TreeNode *node = q.front();
                q.pop();
                temp += node->val;
                if(node->left != NULL)
                {
                    q.push(node->left);
                }
                if(node->right != NULL)
                {
                    q.push(node->right);
                }
            }
            ans.push_back(temp);
        }
        return ans.back();
    }
};


// Source https://leetcode.com/problems/find-n-unique-integers-sum-up-to-zero/

Given an integer n, return any array containing n unique integers such that they add up to 0.

 

Example 1:

Input: n = 5
Output: [-7,-1,1,3,4]
Explanation: These arrays also are accepted [-5,-1,1,2,3] , [-3,-1,2,-2,4].
Example 2:

Input: n = 3
Output: [-1,0,1]
Example 3:

Input: n = 1
Output: [0]
 

Constraints:

1 <= n <= 1000

class Solution
{
public:
    vector<int> sumZero(int n)
    {
        vector<int> ans;
        if(n % 2) ans.push_back(0);
        for(int i = 1 ; ans.size() < n ; i++)
        {
            ans.push_back(-i);
            ans.push_back(i);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/all-elements-in-two-binary-search-trees/

Given two binary search trees root1 and root2, return a list containing all the integers from both trees sorted in ascending order.

 

Example 1:


Input: root1 = [2,1,4], root2 = [1,0,3]
Output: [0,1,1,2,3,4]
Example 2:


Input: root1 = [1,null,8], root2 = [8,1]
Output: [1,1,8,8]
 

Constraints:

The number of nodes in each tree is in the range [0, 5000].
-105 <= Node.val <= 105

class Solution
{
public:
    void inorder(TreeNode *node, vector<int> &v)
    {
        if(!node) return;
        inorder(node->left, v);
        v.push_back(node->val);
        inorder(node->right, v);
    }
    vector<int> getAllElements(TreeNode *root1, TreeNode *root2)
    {
        vector<int> v1;
        vector<int> v2;
        v1.reserve(2000);
        v2.reserve(2000);
        inorder(root1, v1);
        inorder(root2, v2);
        vector<int> ans(v1.size() + v2.size());
        merge(v1.begin(), v1.end(), v2.begin(), v2.end(), ans.begin());
        return ans;
    }
};


// Source https://leetcode.com/problems/jump-game-iii/

Given an array of non-negative integers arr, you are initially positioned at start index of the array. 
When you are at index i, you can jump to i + arr[i] or i - arr[i], check if you can reach to any index with value 0.

Notice that you can not jump outside of the array at any time.

 

Example 1:

Input: arr = [4,2,3,0,3,1,2], start = 5
Output: true
Explanation: 
All possible ways to reach at index 3 with value 0 are: 
index 5 -> index 4 -> index 1 -> index 3 
index 5 -> index 6 -> index 4 -> index 1 -> index 3 
Example 2:

Input: arr = [4,2,3,0,3,1,2], start = 0
Output: true 
Explanation: 
One possible way to reach at index 3 with value 0 is: 
index 0 -> index 4 -> index 1 -> index 3
Example 3:

Input: arr = [3,0,2,1,2], start = 2
Output: false
Explanation: There is no way to reach at index 1 with value 0.
 

Constraints:

1 <= arr.length <= 5 * 104
0 <= arr[i] < arr.length
0 <= start < arr.length

class Solution
{
public:
    bool canReach(vector<int> &nums, int start)
    {
        if(nums[start] == 0)
        {
            return true;
        }
        int n = nums.size();
        vector<int> visited(n, false);
        visited[start] = true;
        queue<int> q;
        q.push(start);
        while(!q.empty())
        {
            int index = q.front();
            q.pop();
            int j1 = index + nums[index];
            int j2 = index - nums[index];
            if(j1 >= 0 && j1 < n && visited[j1] == false)
            {
                if(nums[j1] == 0)
                {
                    return true;
                }
                q.push(j1);
                visited[j1] = true;
            }
            if(j2 >= 0 && j2 < n && visited[j2] == false)
            {
                if(nums[j2] == 0)
                {
                    return true;
                }
                q.push(j2);
                visited[j2] = true;
            }
        }
        return false;
    }
};


// Source https://leetcode.com/problems/verbal-arithmetic-puzzle/

Given an equation, represented by words on the left side and the result on the right side.

You need to check if the equation is solvable under the following rules:

Each character is decoded as one digit (0 - 9).
Every pair of different characters must map to different digits.
Each words[i] and result are decoded as one number without leading zeros.
Sum of numbers on the left side (words) will equal to the number on the right side (result).
Return true if the equation is solvable, otherwise return false.

 

Example 1:

Input: words = ["SEND","MORE"], result = "MONEY"
Output: true
Explanation: Map 'S'-> 9, 'E'->5, 'N'->6, 'D'->7, 'M'->1, 'O'->0, 'R'->8, 'Y'->'2'
Such that: "SEND" + "MORE" = "MONEY" ,  9567 + 1085 = 10652
Example 2:

Input: words = ["SIX","SEVEN","SEVEN"], result = "TWENTY"
Output: true
Explanation: Map 'S'-> 6, 'I'->5, 'X'->0, 'E'->8, 'V'->7, 'N'->2, 'T'->1, 'W'->'3', 'Y'->4
Such that: "SIX" + "SEVEN" + "SEVEN" = "TWENTY" ,  650 + 68782 + 68782 = 138214
Example 3:

Input: words = ["LEET","CODE"], result = "POINT"
Output: false
 

Constraints:

2 <= words.length <= 5
1 <= words[i].length, result.length <= 7
words[i], result contain only uppercase English letters.
The number of different characters used in the expression is at most 10.

class Solution
{
public:
    void backtrack(bool &res, int step, int carryFlag, vector<int> &map, vector<int> &optdig,
                   vector<string> &words, string &result)
    {
        if(step == result.size())
        {
            if(carryFlag == 0)
            {
                if ( !(result.length() != 1 && map[result[0] - 'A'] == 0) ) res = true;
            }

            return;
        }
        int ans = carryFlag;
        int spos;
        for(string &w : words)
        {
            spos = w.length() - 1 - step;
            if(spos < 0) continue;
            if(map[w[spos] - 'A'] != -1) ans += map[w[spos] - 'A'];
            else
            {
                for(int i = 0; i < 10; i++)
                {
                    if(w[spos] == w[0] && i == 0 && w.length() != 1) continue;
                    if(optdig[i] == 0) continue;
                    map[w[spos] - 'A'] = i;
                    optdig[i] = 0;//used, unavaliable
                    backtrack(res, step, carryFlag, map, optdig, words, result);
                    optdig[i] = 1;//can use, avaliable
                    map[w[spos] - 'A'] = -1;
                    if(res == true) return;
                }
                return;
            }
        }
        carryFlag = ans / 10;
        ans = ans % 10;
        spos = result.length() - 1 - step;
        if(map[result[spos] - 'A'] == ans)
        {
            backtrack(res, step + 1, carryFlag, map, optdig, words, result);
        }
        else if(map[result[spos] - 'A'] != -1 || optdig[ans] == 0)
        {
            return;
        }
        else if(result[spos] == result[0] && ans == 0 && result.length() != 1)
        {
            return;
        }
        else
        {
            map[result[spos] - 'A'] = ans;
            optdig[ans] = 0;//used, unavaliable
            backtrack(res, step + 1, carryFlag, map, optdig, words, result);
            optdig[ans] = 1;//can use, avaliable
            map[result[spos] - 'A'] = -1;
            if(res == true) return;
        }
        return;
    }
    bool isSolvable(vector<string> &words, string result)
    {
        bool res = false;
        vector<int> map(26, -1);
        vector<int> optdig(10, 1);
        for(string &w : words)
        {
            if(w.length() > result.length()) return false;
        }
        backtrack(res, 0, 0, map, optdig, words, result);
        return res;
    }
};



// Source https://leetcode.com/problems/decrypt-string-from-alphabet-to-integer-mapping/

You are given a string s formed by digits and '#'. We want to map s to English lowercase characters as follows:

Characters ('a' to 'i') are represented by ('1' to '9') respectively.
Characters ('j' to 'z') are represented by ('10#' to '26#') respectively.
Return the string formed after mapping.

The test cases are generated so that a unique mapping will always exist.

 

Example 1:

Input: s = "10#11#12"
Output: "jkab"
Explanation: "j" -> "10#" , "k" -> "11#" , "a" -> "1" , "b" -> "2".
Example 2:

Input: s = "1326#"
Output: "acz"
 

Constraints:

1 <= s.length <= 1000
s consists of digits and the '#' letter.
s will be a valid string such that mapping is always possible.

class Solution
{
public:
    string freqAlphabets(string s)
    {
        int n = s.length();
        string newStr = "";
        for(int i = 0; i < n; i++)
        {
            if((i < n - 2) && (s[i] != '#') && (s[i + 2] == '#'))
            {
                int x = (s[i] - '0') * 10;
                x += s[i + 1] - '0';
                newStr += char(96 + x);
                i += 2;
            }
            else
            {
                int x = s[i] - '0';
                newStr += char(96 + x);
            }
        }
        return newStr;
    }
};


// Source https://leetcode.com/problems/xor-queries-of-a-subarray/

You are given an array arr of positive integers. You are also given the array queries where queries[i] = [lefti, righti].

For each query i compute the XOR of elements from lefti to righti (that is, arr[lefti] XOR arr[lefti + 1] XOR ... XOR arr[righti] ).

Return an array answer where answer[i] is the answer to the ith query.

 

Example 1:

Input: arr = [1,3,4,8], queries = [[0,1],[1,2],[0,3],[3,3]]
Output: [2,7,14,8] 
Explanation: 
The binary representation of the elements in the array are:
1 = 0001 
3 = 0011 
4 = 0100 
8 = 1000 
The XOR values for queries are:
[0,1] = 1 xor 3 = 2 
[1,2] = 3 xor 4 = 7 
[0,3] = 1 xor 3 xor 4 xor 8 = 14 
[3,3] = 8
Example 2:

Input: arr = [4,8,2,10], queries = [[2,3],[1,3],[0,0],[0,3]]
Output: [8,0,4,4]
 

Constraints:

1 <= arr.length, queries.length <= 3 * 104
1 <= arr[i] <= 109
queries[i].length == 2
0 <= lefti <= righti < arr.length

class Solution
{
public:
    vector<int> xorQueries(vector<int> &arr, vector<vector<int>> &queries)
    {
        vector<int> store;
        int ans = arr[0];
        store.push_back(ans);
        for(int i = 1; i < arr.size(); i++)
        {
            ans ^= arr[i];
            store.push_back(ans);
        }
        vector<int> res;
        for(int i = 0; i < queries.size(); i++)
        {
            int l = queries[i][0];
            int r = queries[i][1];
            if(l != 0)
            {
                int val = (store[l - 1] ^ store[r]);
                res.push_back(val);
            }
            else
            {
                res.push_back(store[r]);
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/get-watched-videos-by-your-friends/

There are n people, each person has a unique id between 0 and n-1. Given the arrays watchedVideos and friends, 
where watchedVideos[i] and friends[i] contain the list of watched videos and the list of friends respectively for the person with id = i.

Level 1 of videos are all watched videos by your friends, level 2 of videos are all watched videos by the friends of your friends and so on. 
In general, the level k of videos are all watched videos by people with the shortest path exactly equal to k with you. 
Given your id and the level of videos, return the list of videos ordered by their frequencies (increasing). 
For videos with the same frequency order them alphabetically from least to greatest. 

 

Example 1:



Input: watchedVideos = [["A","B"],["C"],["B","C"],["D"]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 1
Output: ["B","C"] 
Explanation: 
You have id = 0 (green color in the figure) and your friends are (yellow color in the figure):
Person with id = 1 -> watchedVideos = ["C"] 
Person with id = 2 -> watchedVideos = ["B","C"] 
The frequencies of watchedVideos by your friends are: 
B -> 1 
C -> 2
Example 2:



Input: watchedVideos = [["A","B"],["C"],["B","C"],["D"]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 2
Output: ["D"]
Explanation: 
You have id = 0 (green color in the figure) and the only friend of your friends is the person with id = 3 (yellow color in the figure).
 

Constraints:

n == watchedVideos.length == friends.length
2 <= n <= 100
1 <= watchedVideos[i].length <= 100
1 <= watchedVideos[i][j].length <= 8
0 <= friends[i].length < n
0 <= friends[i][j] < n
0 <= id < n
1 <= level < n
if friends[i] contains j, then friends[j] contains i

class Solution
{
public:
    vector<string> watchedVideosByFriends(vector<vector<string>> &watchedVideos, vector<vector<int>> &friends, int id, int level)
    {
        int n = watchedVideos.size();
        vector<vector<int>> graph(n);
        for(int i = 0; i < n; i++)
        {
            for(auto f : friends[i])
            {
                graph[f].push_back(i);
                graph[i].push_back(f);
            }
        }
        vector<string> ans;
        vector<int>vis(n, 0);
        queue<int>q;
        q.push(id);
        int step = 0;
        while(!q.empty())
        {
            if(step == level)
            {
                unordered_map<string, int> mp;
                while(!q.empty())
                {
                    int t = q.front();
                    q.pop();
                    if(vis[t]) continue;
                    vis[t] = 1;
                    for(auto &str : watchedVideos[t]) mp[str]++;
                }
                set<pair<int, string>>st;
                for(auto &[str, cnt] : mp) st.insert({cnt, str});
                for(auto &p : st) ans.push_back(p.second);
                break;
            }
            int sz = q.size();
            for (int i = 0; i < sz; ++i)
            {
                int t = q.front();
                q.pop();
                if(vis[t]) continue;
                vis[t] = 1;
                for(auto x : graph[t])
                {
                    if(!vis[x]) q.push(x);
                }
            }
            ++step;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/minimum-insertion-steps-to-make-a-string-palindrome/

Given a string s. In one step you can insert any character at any index of the string.

Return the minimum number of steps to make s palindrome.

A Palindrome String is one that reads the same backward as well as forward.

 

Example 1:

Input: s = "zzazz"
Output: 0
Explanation: The string "zzazz" is already palindrome we don't need any insertions.
Example 2:

Input: s = "mbadm"
Output: 2
Explanation: String can be "mbdadbm" or "mdbabdm".
Example 3:

Input: s = "leetcode"
Output: 5
Explanation: Inserting 5 characters the string becomes "leetcodocteel".
 

Constraints:

1 <= s.length <= 500
s consists of lowercase English letters.

class Solution
{
public:
    int dp[505][505];

    int solve(string &s, int start, int end)
    {
        if(start >= end) return 0;
        if(dp[start][end] != -1) return dp[start][end];
        if(s[start] == s[end])
        {
            return dp[start][end] = solve(s, start + 1, end - 1);
        }
        else
        {
            int ans1 = solve(s, start, end - 1);
            int ans2 = solve(s, start + 1, end);
            return dp[start][end] = min(ans1, ans2) + 1;
        }
    }

    int minInsertions(string s)
    {
        int n = s.size();
        memset(dp, -1, sizeof(dp));
        return solve(s, 0, n - 1);
    }
};


// Source https://leetcode.com/problems/decompress-run-length-encoded-list/

We are given a list nums of integers representing a list compressed with run-length encoding.

Consider each adjacent pair of elements [freq, val] = [nums[2*i], nums[2*i+1]] (with i >= 0).  
For each such pair, there are freq elements with value val concatenated in a sublist. Concatenate all the sublists from left to right to generate the decompressed list.

Return the decompressed list.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [2,4,4,4]
Explanation: The first pair [1,2] means we have freq = 1 and val = 2 so we generate the array [2].
The second pair [3,4] means we have freq = 3 and val = 4 so we generate [4,4,4].
At the end the concatenation [2] + [4,4,4] is [2,4,4,4].
Example 2:

Input: nums = [1,1,2,3]
Output: [1,3,3]
 

Constraints:

2 <= nums.length <= 100
nums.length % 2 == 0
1 <= nums[i] <= 100

class Solution
{
public:
    vector<int> decompressRLElist(vector<int> &nums)
    {
        int n = nums.size();
        vector<int> ans;
        for (int i = 0; i < n - 1; i += 2)
        {
            int freq = nums[i], val = nums[i+1];
            for (int j = 0; j < freq; j++) ans.push_back(val);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/matrix-block-sum/

Given a m x n matrix mat and an integer k, return a matrix answer where each answer[i][j] is the sum of all elements mat[r][c] for:

i - k <= r <= i + k,
j - k <= c <= j + k, and
(r, c) is a valid position in the matrix.
 

Example 1:

Input: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 1
Output: [[12,21,16],[27,45,33],[24,39,28]]
Example 2:

Input: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 2
Output: [[45,45,45],[45,45,45],[45,45,45]]
 

Constraints:

m == mat.length
n == mat[i].length
1 <= m, n, k <= 100
1 <= mat[i][j] <= 100

class Solution
{
public:
    vector<vector<int>> matrixBlockSum(vector<vector<int>> &mat, int k)
    {
        int m = mat.size(), n = mat[0].size();
        for (int i = 1; i < n; ++i) mat[0][i] += mat[0][i - 1];
        for (int i = 1; i < m; ++i) mat[i][0] += mat[i-1][0];
        for(int i = 1; i < m; i++)
        {
            for(int j = 1; j < n; j++)
            {
                mat[i][j] += (mat[i - 1][j] + mat[i][j - 1] - mat[i - 1][j - 1]);
            }
        }
        vector<vector<int>> ans(m, vector<int>(n));
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                int r0 = max(0, i - k), c0 = max(0, j - k), r1 = min(m - 1, i + k), c1 = min(n - 1, j + k);
                ans[i][j] = mat[r1][c1];
                if(r0 > 0) ans[i][j] -= mat[r0 - 1][c1];
                if(c0 > 0) ans[i][j] -= mat[r1][c0 - 1];
                if(r0 > 0 && c0 > 0) ans[i][j] += mat[r0 - 1][c0 - 1];
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/sum-of-nodes-with-even-valued-grandparent/

Given the root of a binary tree, return the sum of values of nodes with an even-valued grandparent. If there are no nodes with an even-valued grandparent, return 0.

A grandparent of a node is the parent of its parent if it exists.

 

Example 1:


Input: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]
Output: 18
Explanation: The red nodes are the nodes with even-value grandparent while the blue nodes are the even-value grandparents.
Example 2:


Input: root = [1]
Output: 0
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
1 <= Node.val <= 100

class Solution
{
public:

    int sumEvenGrandparent(TreeNode *root)
    {
        queue<TreeNode *> q;
        int ans = 0;
        q.push(root);
        while(!q.empty())
        {
            TreeNode *t = q.front();
            q.pop();
            if(t->left)
            {
                if(t->left->left && (t->val & 1) == 0) ans += t->left->left->val;
                if(t->left->right && (t->val & 1) == 0) ans += t->left->right->val;
                q.push(t->left);
            }
            if(t->right)
            {
                if(t->right->left && (t->val & 1) == 0) ans += t->right->left->val;
                if(t->right->right && (t->val & 1) == 0) ans += t->right->right->val;
                q.push(t->right);
            }
        }
        return ans;
    }
};

// Source https://leetcode.com/problems/distinct-echo-substrings/

Return the number of distinct non-empty substrings of text that can be written as the concatenation of some string with itself (i.e. it can be written as a + a where a is some string).

 

Example 1:

Input: text = "abcabcabc"
Output: 3
Explanation: The 3 substrings are "abcabc", "bcabca" and "cabcab".
Example 2:

Input: text = "leetcodeleetcode"
Output: 2
Explanation: The 2 substrings are "ee" and "leetcodeleetcode".
 

Constraints:

1 <= text.length <= 2000
text has only lowercase English letters.

class Solution
{
public:
    int distinctEchoSubstrings(string text)
    {
        int len = text.size();
        unordered_set<string_view> count;
        const char *p = text.c_str();
        for (int i = 0; i < len; ++i)
        {
            int diff = min(i, len - i);
            int start = i - diff;
            for (int j = start; j < i; ++j)
            {
                int l = j;
                int r = i;
                while (l < i)
                {
                    if (p[l] == p[r])
                    {
                        ++l;
                        ++r;
                    }
                    else
                    {
                        break;
                    }
                }
                if (l == i)
                {
                    auto s = string_view(p + j, i - j);
                    if (count.count(s) == 0)
                    {
                        count.insert(s);
                    }
                    else
                    {
                        break;
                    }
                }
            }
        }
        return count.size();
    }
};


// Source https://leetcode.com/problems/convert-integer-to-the-sum-of-two-no-zero-integers/

No-Zero integer is a positive integer that does not contain any 0 in its decimal representation.

Given an integer n, return a list of two integers [A, B] where:

A and B are No-Zero integers.
A + B = n
The test cases are generated so that there is at least one valid solution. If there are many valid solutions you can return any of them.

 

Example 1:

Input: n = 2
Output: [1,1]
Explanation: A = 1, B = 1. A + B = n and both A and B do not contain any 0 in their decimal representation.
Example 2:

Input: n = 11
Output: [2,9]
 

Constraints:

2 <= n <= 104

class Solution
{
public:
    vector<int> getNoZeroIntegers(int n)
    {
        for(int i = 1; i < n; i++)
        {
            if(noZero(i) && noZero(n - i))
            {
                return {i, n - i};
            }
        }
        return {};
    }
    bool noZero(int n)
    {
        while(n > 0)
        {
            if(n % 10 == 0) return false;
            n = n / 10;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/minimum-flips-to-make-a-or-b-equal-to-c/

Given 3 positives numbers a, b and c. Return the minimum flips required in some bits of a and b to make ( a OR b == c ). (bitwise OR operation).
Flip operation consists of change any single bit 1 to 0 or change the bit 0 to 1 in their binary representation.

 

Example 1:



Input: a = 2, b = 6, c = 5
Output: 3
Explanation: After flips a = 1 , b = 4 , c = 5 such that (a OR b == c)
Example 2:

Input: a = 4, b = 2, c = 7
Output: 1
Example 3:

Input: a = 1, b = 2, c = 3
Output: 0
 

Constraints:

1 <= a <= 10^9
1 <= b <= 10^9
1 <= c <= 10^9

class Solution
{
public:
    int minFlips(int a, int b, int c)
    {
        bitset<32> a_bits(a);
        bitset<32> b_bits(b);
        bitset<32> c_bits(c);
        int count = 0;
        for(int i = 0; i < 32; i++)
        {
            if((a_bits[i] | b_bits[i]) == c_bits[i])
            {
                continue;
            }
            else
            {
                if(c_bits[i] == 1)
                {
                    count++;
                }
                else
                {
                    if(a_bits[i] != 0)
                    {
                        count++;
                    }
                    if(b_bits[i] != 0)
                    {
                        count++;
                    }
                }
            }
        }
        return count;
    }
};


// Source https://leetcode.com/problems/number-of-operations-to-make-network-connected/

There are n computers numbered from 0 to n - 1 connected by ethernet cables connections forming a network 
where connections[i] = [ai, bi] represents a connection between computers ai and bi. Any computer can reach any other computer directly or indirectly through the network.

You are given an initial computer network connections. You can extract certain cables between two directly connected computers, 
and place them between any pair of disconnected computers to make them directly connected.

Return the minimum number of times you need to do this in order to make all the computers connected. If it is not possible, return -1.

 

Example 1:


Input: n = 4, connections = [[0,1],[0,2],[1,2]]
Output: 1
Explanation: Remove cable between computer 1 and 2 and place between computers 1 and 3.
Example 2:


Input: n = 6, connections = [[0,1],[0,2],[0,3],[1,2],[1,3]]
Output: 2
Example 3:

Input: n = 6, connections = [[0,1],[0,2],[0,3],[1,2]]
Output: -1
Explanation: There are not enough cables.
 

Constraints:

1 <= n <= 105
1 <= connections.length <= min(n * (n - 1) / 2, 105)
connections[i].length == 2
0 <= ai, bi < n
ai != bi
There are no repeated connections.
No two computers are connected by more than one cable.

class Solution
{
public:
    vector<int> parent;
    vector<int> size;

    int find(int x)
    {
        if(parent[x] != x) parent[x] = find(parent[x]);
        return parent[x];
    }

    int join(int x, int y)
    {
        int root_x = find(x);
        int root_y = find(y);
        if (root_x == root_y) return 1;
        if (size[root_x] > size[root_y])
        {
            parent[root_y] = root_x;
            size[root_x] += size[root_y];
        }
        else
        {
            parent[root_x] = root_y;
            size[root_y] += size[root_x];
        }
        return 0;
    }

    int makeConnected(int n, vector<vector<int>> &connections)
    {
        parent = vector<int>(n);
        size = vector<int>(n, 1);
        for(int i = 0; i < n; i++) parent[i] = i;
        int cnt1 = 0;
        for(int i = 0; i < connections.size(); i++)
        {
            cnt1 += join(connections[i][0], connections[i][1]);
        }
        int cnt2 = 0;
        for(int i = 0; i < n; i++)
        {
            if(parent[i] == i) cnt2++;
        }
        if(cnt1 >= cnt2 - 1) return cnt2 - 1;
        return -1;
    }
};


// Source https://leetcode.com/problems/minimum-distance-to-type-a-word-using-two-fingers/

A	B	C	D	E	F
G	H	I	J	K	L
M	N	O	P	Q	R
S	T	U	V	W	X
Y	Z

You have a keyboard layout as shown above in the X-Y plane, where each English uppercase letter is located at some coordinate.

For example, the letter 'A' is located at coordinate (0, 0), the letter 'B' is located at coordinate (0, 1), the letter 'P' is located at coordinate (2, 3) and the letter 'Z' is located at coordinate (4, 1).
Given the string word, return the minimum total distance to type such string using only two fingers.

The distance between coordinates (x1, y1) and (x2, y2) is |x1 - x2| + |y1 - y2|.

Note that the initial positions of your two fingers are considered free so do not count towards your total distance, 
also your two fingers do not have to start at the first letter or the first two letters.

 

Example 1:

Input: word = "CAKE"
Output: 3
Explanation: Using two fingers, one optimal way to type "CAKE" is: 
Finger 1 on letter 'C' -> cost = 0 
Finger 1 on letter 'A' -> cost = Distance from letter 'C' to letter 'A' = 2 
Finger 2 on letter 'K' -> cost = 0 
Finger 2 on letter 'E' -> cost = Distance from letter 'K' to letter 'E' = 1 
Total distance = 3
Example 2:

Input: word = "HAPPY"
Output: 6
Explanation: Using two fingers, one optimal way to type "HAPPY" is:
Finger 1 on letter 'H' -> cost = 0
Finger 1 on letter 'A' -> cost = Distance from letter 'H' to letter 'A' = 2
Finger 2 on letter 'P' -> cost = 0
Finger 2 on letter 'P' -> cost = Distance from letter 'P' to letter 'P' = 0
Finger 1 on letter 'Y' -> cost = Distance from letter 'A' to letter 'Y' = 4
Total distance = 6
 

Constraints:

2 <= word.length <= 300
word consists of uppercase English letters.

class Solution
{
public:
    int n;
    int dp[305][30][30];

    int distance(char a, char b)
    {
        int x1 = (a - 'A') / 6, y1 = (a - 'A') % 6;
        int x2 = (b - 'A') / 6, y2 = (b - 'A') % 6;
        return abs(x1 - x2) + abs(y1 - y2);
    }

    int solve(string &word, int index, char first, char second)
    {
        int firstPos = first - 'A', secondPos = second - 'A';
        if(index == n) return 0;
        if(dp[index][firstPos][secondPos] != -1) return dp[index][firstPos][secondPos];
        int ans1 = distance(word[index], first) + solve(word, index + 1, word[index], second);
        int ans2 = distance(word[index], second) + solve(word, index + 1, first, word[index]);
        return dp[index][firstPos][secondPos] = min(ans1, ans2);
    }

    int minimumDistance(string word)
    {
        n = word.length();
        memset(dp, -1, sizeof(dp));
        int ans = INT_MAX;
        for(char c = 'A'; c <= 'Z'; c++)
        {
            ans = min(ans, solve(word, 0, word[0], c));
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/maximum-69-number/

You are given a positive integer num consisting only of digits 6 and 9.

Return the maximum number you can get by changing at most one digit (6 becomes 9, and 9 becomes 6).

 

Example 1:

Input: num = 9669
Output: 9969
Explanation: 
Changing the first digit results in 6669.
Changing the second digit results in 9969.
Changing the third digit results in 9699.
Changing the fourth digit results in 9666.
The maximum number is 9969.
Example 2:

Input: num = 9996
Output: 9999
Explanation: Changing the last digit 6 to 9 results in the maximum number.
Example 3:

Input: num = 9999
Output: 9999
Explanation: It is better not to apply any change.
 

Constraints:

1 <= num <= 104
num consists of only 6 and 9 digits.

class Solution
{
public:
    int maximum69Number (int num)
    {
        string str = to_string(num);
        int n = str.length();
        for(int i = 0; i < n; i++)
        {
            if(str[i] == '6')
            {
                str[i] = '9';
                break;
            }
        }
        int ans = stoi(str);
        return ans;
    }
};


// Source https://leetcode.com/problems/print-words-vertically/

Given a string s. Return all the words vertically in the same order in which they appear in s.
Words are returned as a list of strings, complete with spaces when is necessary. (Trailing spaces are not allowed).
Each word would be put on only one column and that in one column there will be only one word.

 

Example 1:

Input: s = "HOW ARE YOU"
Output: ["HAY","ORO","WEU"]
Explanation: Each word is printed vertically. 
 "HAY"
 "ORO"
 "WEU"
Example 2:

Input: s = "TO BE OR NOT TO BE"
Output: ["TBONTB","OEROOE","   T"]
Explanation: Trailing spaces is not allowed. 
"TBONTB"
"OEROOE"
"   T"
Example 3:

Input: s = "CONTEST IS COMING"
Output: ["CIC","OSO","N M","T I","E N","S G","T"]
 

Constraints:

1 <= s.length <= 200
s contains only upper case English letters.
It's guaranteed that there is only one space between 2 words.

class Solution
{
public:
    vector<string> printVertically(string s)
    {
        vector<string> words;
        vector<string> result;
        int max_len = 0;
        istringstream iss(s);
        string t;
        while (iss >> t)
        {
            words.push_back(t);
            max_len = max(max_len, (int)t.length());
        }
        int n = words.size();
        for (int i = 0; i < max_len; i++)
        {
            string str = "";
            for (int j = 0; j < n; j++)
            {
                char c;
                if (i >= words[j].length()) c = ' ';
                else c = words[j][i];
                str += c;
            }
            while (str.back() == ' ') str.pop_back();
            result.push_back(str);
        }
        return result;
    }
};



// Source https://leetcode.com/problems/delete-leaves-with-a-given-value/

Given a binary tree root and an integer target, delete all the leaf nodes with value target.

Note that once you delete a leaf node with value target, if its parent node becomes a leaf node and has the value target, 
it should also be deleted (you need to continue doing that until you cannot).

 

Example 1:



Input: root = [1,2,3,2,null,2,4], target = 2
Output: [1,null,3,null,4]
Explanation: Leaf nodes in green with value (target = 2) are removed (Picture in left). 
After removing, new nodes become leaf nodes with value (target = 2) (Picture in center).
Example 2:



Input: root = [1,3,3,3,2], target = 3
Output: [1,3,null,null,2]
Example 3:



Input: root = [1,2,null,2,null,2], target = 2
Output: [1]
Explanation: Leaf nodes in green with value (target = 2) are removed at each step.
 

Constraints:

The number of nodes in the tree is in the range [1, 3000].
1 <= Node.val, target <= 1000

class Solution
{
public:
    TreeNode *removeLeafNodes(TreeNode *root, int target)
    {
        if(!root) return nullptr;
        root->left = removeLeafNodes(root->left, target);
        root->right = removeLeafNodes(root->right, target);
        if(root->val == target && !root->left && !root->right) return nullptr;
        return root;
    }
};


// Source https://leetcode.com/problems/minimum-number-of-taps-to-open-to-water-a-garden/

There is a one-dimensional garden on the x-axis. The garden starts at the point 0 and ends at the point n. (i.e The length of the garden is n).

There are n + 1 taps located at points [0, 1, ..., n] in the garden.

Given an integer n and an integer array ranges of length n + 1 where ranges[i] (0-indexed) means the i-th tap can water the area [i - ranges[i], i + ranges[i]] if it was open.

Return the minimum number of taps that should be open to water the whole garden, If the garden cannot be watered return -1.

 

Example 1:


Input: n = 5, ranges = [3,4,1,1,0,0]
Output: 1
Explanation: The tap at point 0 can cover the interval [-3,3]
The tap at point 1 can cover the interval [-3,5]
The tap at point 2 can cover the interval [1,3]
The tap at point 3 can cover the interval [2,4]
The tap at point 4 can cover the interval [4,4]
The tap at point 5 can cover the interval [5,5]
Opening Only the second tap will water the whole garden [0,5]
Example 2:

Input: n = 3, ranges = [0,0,0,0]
Output: -1
Explanation: Even if you activate all the four taps you cannot water the whole garden.
 

Constraints:

1 <= n <= 104
ranges.length == n + 1
0 <= ranges[i] <= 100

class Solution
{
public:
    int minTaps(int n, vector<int> &ranges)
    {
        vector<int> dp(n + 1, 0);
        for(int i = 0; i <= n; i++)
        {
            int left = max(0, i - ranges[i]);
            int right = min(n, i + ranges[i]);
            dp[left] = max(dp[left], right);
        }
        int currMax = dp[0];
        int openedTap = 1;
        int nextMax = dp[0];
        for(int i = 1; i <= n; i++)
        {
            if (currMax == n) return openedTap;
            if (i > currMax) break;
            nextMax = max(nextMax, dp[i]);
            if(i == currMax)
            {
                openedTap++;
                currMax = nextMax;
            }
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/break-a-palindrome/

Given a palindromic string of lowercase English letters palindrome, replace exactly one character with any lowercase English letter so that the resulting string is not a palindrome 
and that it is the lexicographically smallest one possible.

Return the resulting string. If there is no way to replace a character to make it not a palindrome, return an empty string.

A string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, a has a character strictly smaller than the corresponding character in b. 
For example, "abcc" is lexicographically smaller than "abcd" because the first position they differ is at the fourth character, and 'c' is smaller than 'd'.

 

Example 1:

Input: palindrome = "abccba"
Output: "aaccba"
Explanation: There are many ways to make "abccba" not a palindrome, such as "zbccba", "aaccba", and "abacba".
Of all the ways, "aaccba" is the lexicographically smallest.
Example 2:

Input: palindrome = "a"
Output: ""
Explanation: There is no way to replace a single character to make "a" not a palindrome, so return an empty string.
 

Constraints:

1 <= palindrome.length <= 1000
palindrome consists of only lowercase English letters.

class Solution
{
public:
    string breakPalindrome(string &palindrome)
    {
        int n = palindrome.length();
        if (n <= 1)
        {
            return "";
        }
        for (int i = 0; i < n / 2; ++i)
        {
            if (palindrome[i] != 'a')
            {
                palindrome[i] = 'a';
                return palindrome;
            }
        }
        palindrome.back() = 'b';
        return palindrome;
    }
};


// Source https://leetcode.com/problems/sort-the-matrix-diagonally/

A matrix diagonal is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until reaching the matrix's end. 
For example, the matrix diagonal starting from mat[2][0], where mat is a 6 x 3 matrix, includes cells mat[2][0], mat[3][1], and mat[4][2].

Given an m x n matrix mat of integers, sort each matrix diagonal in ascending order and return the resulting matrix.

 

Example 1:


Input: mat = [[3,3,1,1],[2,2,1,2],[1,1,1,2]]
Output: [[1,1,1,1],[1,2,2,2],[1,2,3,3]]
Example 2:

Input: mat = [[11,25,66,1,69,7],[23,55,17,45,15,52],[75,31,36,44,58,8],[22,27,33,25,68,4],[84,28,14,11,5,50]]
Output: [[5,17,4,1,52,7],[11,11,25,45,8,69],[14,23,25,44,58,15],[22,27,31,36,50,66],[84,28,75,33,55,68]]
 

Constraints:

m == mat.length
n == mat[i].length
1 <= m, n <= 100
1 <= mat[i][j] <= 100

class Solution
{
public:
    vector<vector<int>> diagonalSort(vector<vector<int>> &mat)
    {
        int n = mat.size(), m = mat[0].size();
        priority_queue<int, vector<int>, greater<int>> pq;
        for(int i = n - 2; i >= 0; --i)
        {
            int k = i, j = 0;
            while(k < n && j < m)
            {
                pq.push(mat[k++][j++]);
            }
            k = i, j = 0;
            while(k < n && j < m)
            {
                mat[k++][j++] = pq.top();
                pq.pop();
            }
        }
        for(int j = 1; j < m - 1; ++j)
        {
            int i = 0, k = j;
            while(i < n && k < m)
            {
                pq.push(mat[i++][k++]);
            }
            i = 0, k = j;
            while(i < n && k < m)
            {
                mat[i++][k++] = pq.top();
                pq.pop();
            }
        }
        return mat;
    }
};


// Source https://leetcode.com/problems/reverse-subarray-to-maximize-array-value/

You are given an integer array nums. The value of this array is defined as the sum of |nums[i] - nums[i + 1]| for all 0 <= i < nums.length - 1.

You are allowed to select any subarray of the given array and reverse it. You can perform this operation only once.

Find maximum possible value of the final array.

 

Example 1:

Input: nums = [2,3,1,5,4]
Output: 10
Explanation: By reversing the subarray [3,1,5] the array becomes [2,5,1,3,4] whose value is 10.
Example 2:

Input: nums = [2,4,9,24,2,1,10]
Output: 68
 

Constraints:

1 <= nums.length <= 3 * 104
-105 <= nums[i] <= 105

c d e a b
a e d c b

a b c d e
a e d c b

a b o p q c d
a c q p o b d

数组 A[0]..., a, [b, ..., c], d, ...A[size-1]
子数组[b, ..., c]反转
从头开始的左数组：         A[0]~a,b...        ->   a~A[0],b...
反转前后的差值为：-abs(a-b) + abs(A[0]-b)
以最后元素结束的右数组：...a,b~A[size-1] -> ...a,A[size-1]~b
反转前后的差值为：-abs(a-b) + abs(a-A[size-1])
中间数组：                     ..., a, b, ..., c , d, ... -> ..., a, c, ..., b , d, ...  
反转前后的差值为：-(abs(a-b)+abs(c-d)) + (abs(a-c)+abs(b-d))
对于中间数组，我们分以下三种情况

1. [a,b] 和 [c,d] 有相交：
min(a,b)		max(a,b)
	min(c,d)			max(c,d)
1		6
	3			9
原先为5 + 6 = 11
1		3
	6			9
变为2 + 3 = 5

6		1
	9			3
原先为5 + 6 = 11
6		9
	1			3
变为2 + 3 = 5

1		6
	9			3
原先为5 + 6 = 11
1		9
	6			3
变为8+3=11

6		1
	3			9
原先为5 + 6 = 11
6		3
	1			9
变为8+3=11

反转并没有使得差值变大。

因此我们不选择将这段[b~c]进行反转。

2. [a,b] 和 [c,d] 有互相包含的关系：

min(a,b)				max(a,b)
	min(c,d)		max(c,d)
1				9
	3		6
原先为8 + 3 = 11
1				3
	9		6
变为2 + 3 = 5

9				1
	6		3
原先为8 + 3 = 11
9				6
	1		3
变为2 + 3 = 5

1				9
	6		3
原先为8 + 3 = 11
1				6
	9		3
变为5+6=11

9				1
	3		6
原先为8 + 3 = 11
9				3
	1		6
变为6+5=11

反转并没有使得差值变大。

因此我们不选择将这段[b~c]进行反转。

3. [a,b] 和 [c,d] 无相交：
min(a,b)				max(a,b)
	min(c,d)		max(c,d)
1				3
	6		9
原先为2 + 3 = 5
1				6
	3		9
变为5 + 6 = 11

3				1
	9		6
原先为2 + 3 = 5
3				9
	1		6
变为5 + 6 = 11

1				3
	9		6
原先为2 + 3 = 5
1				9
	3		6
变为8+3=11

3				1
	6		9
原先为2 + 3 = 5
3				6
	1		9
变为3+8=11

反转使得差值变大，增加了2 * (min(c,d) - max(a,b))。

class Solution
{
public:
    int maxValueAfterReverse(vector<int> &nums)
    {
        int sum = 0;
        int n = nums.size();
        for (int i = 1; i < n; i++)
        {
            sum += abs(nums[i] - nums[i - 1]);
        }

        int case1 = sum, case2 = sum;
        for (int i = 1; i < n; i++)
        {
            case1 = max(case1, sum - abs(nums[i] - nums[i - 1]) + abs(nums[i] - nums[0]));
            case2 = max(case2, sum - abs(nums[i] - nums[i - 1]) + abs(nums[i - 1] - nums[n-1]));
        }
        int res = max(sum, max(case1, case2));
        int left = INT_MAX, right = INT_MIN;
        for (int i = 1; i < n; i++)
        {
            left = min(left, max(nums[i], nums[i - 1]));
            right = max(right, min(nums[i], nums[i - 1]));
        }

        return max(res, sum + 2 * (right - left));
    }
};


// Source https://leetcode.com/problems/rank-transform-of-an-array/

Given an array of integers arr, replace each element with its rank.

The rank represents how large the element is. The rank has the following rules:

Rank is an integer starting from 1.
The larger the element, the larger the rank. If two elements are equal, their rank must be the same.
Rank should be as small as possible.
 

Example 1:

Input: arr = [40,10,20,30]
Output: [4,1,2,3]
Explanation: 40 is the largest element. 10 is the smallest. 20 is the second smallest. 30 is the third smallest.
Example 2:

Input: arr = [100,100,100]
Output: [1,1,1]
Explanation: Same elements share the same rank.
Example 3:

Input: arr = [37,12,28,9,100,56,80,5,12]
Output: [5,3,4,2,8,6,7,1,3]
 

Constraints:

0 <= arr.length <= 105
-109 <= arr[i] <= 109

class Solution
{
public:
    vector<int> arrayRankTransform(vector<int> &arr)
    {
        vector<int>v = arr;
        sort(v.begin(), v.end());
        int rank = 1;
        unordered_map<int, int>m;
        for(int i = 0; i < arr.size(); i++)
        {
            if(m.find(v[i]) == m.end())
                m[v[i]] = rank++;
        }
        for(int i = 0; i < arr.size(); i++)
        {
            arr[i] = m[arr[i]];
        }
        return arr;
    }
};


// Source https://leetcode.com/problems/remove-palindromic-subsequences/

You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.

Return the minimum number of steps to make the given string empty.

A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. 
Note that a subsequence does not necessarily need to be contiguous.

A string is called palindrome if is one that reads the same backward as well as forward.

 

Example 1:

Input: s = "ababa"
Output: 1
Explanation: s is already a palindrome, so its entirety can be removed in a single step.
Example 2:

Input: s = "abb"
Output: 2
Explanation: "abb" -> "bb" -> "". 
Remove palindromic subsequence "a" then "bb".
Example 3:

Input: s = "baabb"
Output: 2
Explanation: "baabb" -> "b" -> "". 
Remove palindromic subsequence "baab" then "b".
 

Constraints:

1 <= s.length <= 1000
s[i] is either 'a' or 'b'.

可以把s分成2个子序列，全部为a，全部为b

class Solution
{
public:
    int removePalindromeSub(string s)
    {
        string str = s;
        reverse(str.begin(), str.end());
        if (s == str)
        {
            return 1;
        }
        return 2;
    }
};


// Source https://leetcode.com/problems/filter-restaurants-by-vegan-friendly-price-and-distance/

Given the array restaurants where  restaurants[i] = [idi, ratingi, veganFriendlyi, pricei, distancei]. You have to filter the restaurants using three filters.

The veganFriendly filter will be either true (meaning you should only include restaurants with veganFriendlyi set to true) or false (meaning you can include any restaurant). 
In addition, you have the filters maxPrice and maxDistance which are the maximum value for price and distance of restaurants you should consider respectively.

Return the array of restaurant IDs after filtering, ordered by rating from highest to lowest. For restaurants with the same rating, order them by id from highest to lowest. 
For simplicity veganFriendlyi and veganFriendly take value 1 when it is true, and 0 when it is false.

 

Example 1:

Input: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 1, maxPrice = 50, maxDistance = 10
Output: [3,1,5] 
Explanation: 
The restaurants are:
Restaurant 1 [id=1, rating=4, veganFriendly=1, price=40, distance=10]
Restaurant 2 [id=2, rating=8, veganFriendly=0, price=50, distance=5]
Restaurant 3 [id=3, rating=8, veganFriendly=1, price=30, distance=4]
Restaurant 4 [id=4, rating=10, veganFriendly=0, price=10, distance=3]
Restaurant 5 [id=5, rating=1, veganFriendly=1, price=15, distance=1] 
After filter restaurants with veganFriendly = 1, maxPrice = 50 and maxDistance = 10 we have restaurant 3, restaurant 1 and restaurant 5 (ordered by rating from highest to lowest). 
Example 2:

Input: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 50, maxDistance = 10
Output: [4,3,2,1,5]
Explanation: The restaurants are the same as in example 1, but in this case the filter veganFriendly = 0, therefore all restaurants are considered.
Example 3:

Input: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 30, maxDistance = 3
Output: [4,5]
 

Constraints:

1 <= restaurants.length <= 10^4
restaurants[i].length == 5
1 <= idi, ratingi, pricei, distancei <= 10^5
1 <= maxPrice, maxDistance <= 10^5
veganFriendlyi and veganFriendly are 0 or 1.
All idi are distinct.

class Solution
{
public:
    vector<int> filterRestaurants(vector<vector<int>> &restaurants, int veganFriendly, int maxPrice, int maxDistance)
    {
        vector<array<int, 2>> v;
        for(auto i = 0; i < restaurants.size(); i++)
        {
            if(!restaurants[i][2] && veganFriendly) continue;
            if(restaurants[i][3] <= maxPrice and restaurants[i][4] <= maxDistance)
            {
                v.push_back({restaurants[i][1], restaurants[i][0]});
            }
        }
        sort(v.begin(), v.end(), [&](auto &v1, auto &v2)
        {
            if(v1[0] == v2[0]) return v1[1] > v2[1];
            return v1[0] > v2[0];
        });
        vector<int> res;
        for(int i = 0; i < v.size(); i++) res.push_back(v[i][1]);
        return res;
    }
};


// Source https://leetcode.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/

There are n cities numbered from 0 to n-1. Given the array edges where edges[i] = [fromi, toi, weighti] represents a bidirectional and weighted edge between cities fromi and toi, 
and given the integer distanceThreshold.

Return the city with the smallest number of cities that are reachable through some path and whose distance is at most distanceThreshold, 
If there are multiple such cities, return the city with the greatest number.

Notice that the distance of a path connecting cities i and j is equal to the sum of the edges' weights along that path.

 

Example 1:


Input: n = 4, edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], distanceThreshold = 4
Output: 3
Explanation: The figure above describes the graph. 
The neighboring cities at a distanceThreshold = 4 for each city are:
City 0 -> [City 1, City 2] 
City 1 -> [City 0, City 2, City 3] 
City 2 -> [City 0, City 1, City 3] 
City 3 -> [City 1, City 2] 
Cities 0 and 3 have 2 neighboring cities at a distanceThreshold = 4, but we have to return city 3 since it has the greatest number.
Example 2:


Input: n = 5, edges = [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]], distanceThreshold = 2
Output: 0
Explanation: The figure above describes the graph. 
The neighboring cities at a distanceThreshold = 2 for each city are:
City 0 -> [City 1] 
City 1 -> [City 0, City 4] 
City 2 -> [City 3, City 4] 
City 3 -> [City 2, City 4]
City 4 -> [City 1, City 2, City 3] 
The city 0 has 1 neighboring city at a distanceThreshold = 2.
 

Constraints:

2 <= n <= 100
1 <= edges.length <= n * (n - 1) / 2
edges[i].length == 3
0 <= fromi < toi < n
1 <= weighti, distanceThreshold <= 10^4
All pairs (fromi, toi) are distinct.

class Solution
{
public:
    int findTheCity(int n, vector<vector<int>> &edges, int distance)
    {
        vector<vector<int>> graph(n, vector<int>(n, 1e9));
        for (auto &v : edges)
        {
            graph[v[0]][v[1]] = v[2];
            graph[v[1]][v[0]] = v[2];
        }
        int k = 0;
        while (k < n)
        {
            for( int i = 0 ; i < n ; i++ )
            {
                for( int j = 0 ; j < n ; j++ )
                {
                    if(graph[i][k] + graph[k][j] < graph[i][j])
                    {
                        graph[i][j] = graph[i][k] + graph[k][j];
                    }
                }
            }
            k++;
        }
        int reachable = INT_MAX ;
        int ans;
        for(int i = n - 1 ; i >= 0 ; i--)
        {
            int count = 0;
            for(int j = 0 ; j < n ; j++)
            {
                if( i == j )
                {
                    continue;
                }
                if(graph[i][j] <= distance)
                {
                    count++;
                }
            }
            if(count < reachable)
            {
                ans = i;
                reachable = count ;
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/minimum-difficulty-of-a-job-schedule/

You want to schedule a list of jobs in d days. Jobs are dependent (i.e To work on the ith job, you have to finish all the jobs j where 0 <= j < i).

You have to finish at least one task every day. The difficulty of a job schedule is the sum of difficulties of each day of the d days. 
The difficulty of a day is the maximum difficulty of a job done on that day.

You are given an integer array jobDifficulty and an integer d. The difficulty of the ith job is jobDifficulty[i].

Return the minimum difficulty of a job schedule. If you cannot find a schedule for the jobs return -1.

 

Example 1:


Input: jobDifficulty = [6,5,4,3,2,1], d = 2
Output: 7
Explanation: First day you can finish the first 5 jobs, total difficulty = 6.
Second day you can finish the last job, total difficulty = 1.
The difficulty of the schedule = 6 + 1 = 7 
Example 2:

Input: jobDifficulty = [9,9,9], d = 4
Output: -1
Explanation: If you finish a job per day you will still have a free day. you cannot find a schedule for the given jobs.
Example 3:

Input: jobDifficulty = [1,1,1], d = 3
Output: 3
Explanation: The schedule is one job per day. total difficulty will be 3.
 

Constraints:

1 <= jobDifficulty.length <= 300
0 <= jobDifficulty[i] <= 1000
1 <= d <= 10

class Solution
{
public:
    int n;
    int dp[305][15];

    int solve(vector<int> &diff, int index, int d)
    {
        if(index >= n)
        {
            if(d == 0) return 0;
            else return 1e9;
        }
        if(d <= 0) return 1e9;
        if(dp[index][d] != -1) return dp[index][d];
        int ans = 1e9, mxVal = 0;
        for(int i = index; i < n; ++i)
        {
            mxVal = max(mxVal, diff[i]);
            ans = min(ans, mxVal + solve(diff, i + 1, d - 1));
        }
        return dp[index][d] = ans;
    }

    int minDifficulty(vector<int> &diff, int d)
    {
        n = diff.size();
        if(d > n) return -1;
        memset(dp, -1, sizeof(dp));
        return solve(diff, 0, d);
    }
};


// Source https://leetcode.com/problems/the-k-weakest-rows-in-a-matrix/

You are given an m x n binary matrix mat of 1's (representing soldiers) and 0's (representing civilians). 
The soldiers are positioned in front of the civilians. That is, all the 1's will appear to the left of all the 0's in each row.

A row i is weaker than a row j if one of the following is true:

The number of soldiers in row i is less than the number of soldiers in row j.
Both rows have the same number of soldiers and i < j.
Return the indices of the k weakest rows in the matrix ordered from weakest to strongest.

 

Example 1:

Input: mat = 
[[1,1,0,0,0],
 [1,1,1,1,0],
 [1,0,0,0,0],
 [1,1,0,0,0],
 [1,1,1,1,1]], 
k = 3
Output: [2,0,3]
Explanation: 
The number of soldiers in each row is: 
- Row 0: 2 
- Row 1: 4 
- Row 2: 1 
- Row 3: 2 
- Row 4: 5 
The rows ordered from weakest to strongest are [2,0,3,1,4].
Example 2:

Input: mat = 
[[1,0,0,0],
 [1,1,1,1],
 [1,0,0,0],
 [1,0,0,0]], 
k = 2
Output: [0,2]
Explanation: 
The number of soldiers in each row is: 
- Row 0: 1 
- Row 1: 4 
- Row 2: 1 
- Row 3: 1 
The rows ordered from weakest to strongest are [0,2,3,1].
 

Constraints:

m == mat.length
n == mat[i].length
2 <= n, m <= 100
1 <= k <= m
matrix[i][j] is either 0 or 1.

class Solution
{
public:
    vector<int> kWeakestRows(vector<vector<int>> &mat, int k)
    {
        vector<int> ans;
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        int m = mat.size(), n = mat[0].size();
        for(int i = 0; i < m; i++)
        {
            int count = 0;
            for(int j = 0; j < n; j++)
            {
                if(mat[i][j] == 1) count++;
            }
            pq.push({count, i});
        }
        while(!pq.empty() && k > 0)
        {
            ans.push_back(pq.top().second);
            pq.pop();
            --k;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/reduce-array-size-to-the-half/

You are given an integer array arr. You can choose a set of integers and remove all the occurrences of these integers in the array.

Return the minimum size of the set so that at least half of the integers of the array are removed.

 

Example 1:

Input: arr = [3,3,3,3,5,5,5,2,2,7]
Output: 2
Explanation: Choosing {3,7} will make the new array [5,5,5,2,2] which has size 5 (i.e equal to half of the size of the old array).
Possible sets of size 2 are {3,5},{3,2},{5,2}.
Choosing set {2,7} is not possible as it will make the new array [3,3,3,3,5,5,5] which has a size greater than half of the size of the old array.
Example 2:

Input: arr = [7,7,7,7,7,7]
Output: 1
Explanation: The only possible set you can choose is {7}. This will make the new array empty.
 

Constraints:

2 <= arr.length <= 105
arr.length is even.
1 <= arr[i] <= 105

class Solution
{
public:
    int minSetSize(vector<int> &nums)
    {
        int n = nums.size();
        unordered_map<int, int> mp;
        for(auto val : nums) mp[val]++;
        vector<int> freq;
        for(auto p : mp) freq.push_back(p.second);
        sort(freq.begin(), freq.end(), greater<int>());
        int ans = 0, idx = 0, cnt = n;
        while(cnt > n / 2)
        {
            cnt -= freq[idx];
            ++ans;
            ++idx;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/

Given the root of a binary tree, split the binary tree into two subtrees by removing one edge such that the product of the sums of the subtrees is maximized.

Return the maximum product of the sums of the two subtrees. Since the answer may be too large, return it modulo 109 + 7.

Note that you need to maximize the answer before taking the mod and not after taking it.

 

Example 1:


Input: root = [1,2,3,4,5,6]
Output: 110
Explanation: Remove the red edge and get 2 binary trees with sum 11 and 10. Their product is 110 (11*10)
Example 2:


Input: root = [1,null,2,3,4,null,null,5,6]
Output: 90
Explanation: Remove the red edge and get 2 binary trees with sum 15 and 6.Their product is 90 (15*6)
 

Constraints:

The number of nodes in the tree is in the range [2, 5 * 104].
1 <= Node.val <= 104

class Solution
{
public:
    long long totalSum = 0;
    long long mxVal = INT_MIN;
    const long long mod = 1e9 + 7;

    int recur(TreeNode *root)
    {
        if(!root) return 0;
        int leftSum = recur(root -> left);
        int rightSum = recur(root -> right);
        root->val += (leftSum + rightSum);
        return root->val;
    }

    void helper(TreeNode *root)
    {
        if(!root) return;
        long long curSum = root->val;
        long long temp = curSum * (totalSum - curSum);
        mxVal = max(mxVal, temp);
        helper(root->left);
        helper(root->right);
    }

    int maxProduct(TreeNode *root)
    {
        totalSum = recur(root);
        helper(root->left);
        helper(root->right);
        return mxVal % mod;
    }
};


// Source https://leetcode.com/problems/jump-game-v/

Given an array of integers arr and an integer d. In one step you can jump from index i to index:

i + x where: i + x < arr.length and 0 < x <= d.
i - x where: i - x >= 0 and 0 < x <= d.
In addition, you can only jump from index i to index j if arr[i] > arr[j] and arr[i] > arr[k] for all indices k between i and j (More formally min(i, j) < k < max(i, j)).

You can choose any index of the array and start jumping. Return the maximum number of indices you can visit.

Notice that you can not jump outside of the array at any time.

 

Example 1:


Input: arr = [6,4,14,6,8,13,9,7,10,6,12], d = 2
Output: 4
Explanation: You can start at index 10. You can jump 10 --> 8 --> 6 --> 7 as shown.
Note that if you start at index 6 you can only jump to index 7. You cannot jump to index 5 because 13 > 9. You cannot jump to index 4 because index 5 is between index 4 and 6 and 13 > 9.
Similarly You cannot jump from index 3 to index 2 or index 1.
Example 2:

Input: arr = [3,3,3,3,3], d = 3
Output: 1
Explanation: You can start at any index. You always cannot jump to any index.
Example 3:

Input: arr = [7,6,5,4,3,2,1], d = 1
Output: 7
Explanation: Start at index 0. You can visit all the indicies. 
 

Constraints:

1 <= arr.length <= 1000
1 <= arr[i] <= 105
1 <= d <= arr.length

class Solution
{
public:
    int n;
    int dp[1001];

    int solve(int i, vector<int> &arr, int d)
    {
        if(dp[i] != -1) return dp[i];
        int res = 1;
        for(int j = i + 1; j <= min(i + d, n - 1) && arr[j] < arr[i]; j++)
        {
            res = max(res, 1 + solve(j, arr, d));
        }
        for(int j = i - 1; j >= max(i - d, 0)   && arr[j] < arr[i]; j--)
        {
            res = max(res, 1 + solve(j, arr, d));
        }
        return dp[i] = res;
    }

    int maxJumps(vector<int> &arr, int d)
    {
        n = arr.size();
        memset(dp, -1, sizeof(dp));
        int ans = 1;
        for(int i = 0; i < n; i++)
        {
            ans = max(ans, solve(i, arr, d));
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/number-of-steps-to-reduce-a-number-to-zero/

Given an integer num, return the number of steps to reduce it to zero.

In one step, if the current number is even, you have to divide it by 2, otherwise, you have to subtract 1 from it.

 

Example 1:

Input: num = 14
Output: 6
Explanation: 
Step 1) 14 is even; divide by 2 and obtain 7. 
Step 2) 7 is odd; subtract 1 and obtain 6.
Step 3) 6 is even; divide by 2 and obtain 3. 
Step 4) 3 is odd; subtract 1 and obtain 2. 
Step 5) 2 is even; divide by 2 and obtain 1. 
Step 6) 1 is odd; subtract 1 and obtain 0.
Example 2:

Input: num = 8
Output: 4
Explanation: 
Step 1) 8 is even; divide by 2 and obtain 4. 
Step 2) 4 is even; divide by 2 and obtain 2. 
Step 3) 2 is even; divide by 2 and obtain 1. 
Step 4) 1 is odd; subtract 1 and obtain 0.
Example 3:

Input: num = 123
Output: 12
 

Constraints:

0 <= num <= 106

class Solution
{
public:
    int numberOfSteps(int num)
    {
        int ans = 0;
        while(num > 0)
        {
            if(num % 2 == 0)
            {
                num /= 2;
            }
            else num -= 1;
            ans++;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold/

Given an array of integers arr and two integers k and threshold, return the number of sub-arrays of size k and average greater than or equal to threshold.

 

Example 1:

Input: arr = [2,2,2,2,5,5,5,8], k = 3, threshold = 4
Output: 3
Explanation: Sub-arrays [2,5,5],[5,5,5] and [5,5,8] have averages 4, 5 and 6 respectively. All other sub-arrays of size 3 have averages less than 4 (the threshold).
Example 2:

Input: arr = [11,13,17,23,29,31,7,5,2,3], k = 3, threshold = 5
Output: 6
Explanation: The first 6 sub-arrays of size 3 have averages greater than 5. Note that averages are not integers.
 

Constraints:

1 <= arr.length <= 105
1 <= arr[i] <= 104
1 <= k <= arr.length
0 <= threshold <= 104

class Solution
{
public:

    int numOfSubarrays(vector<int> &arr, int k, int threshold)
    {
        int n = arr.size();
        int count = 0, sum = 0;
        for(int i = 0; i < k; ++i) sum += arr[i];
        if((sum / k) >= threshold) count++;
        for(int i = k; i < n; ++i)
        {
            sum -= arr[i - k];
            sum += arr[i];
            if((sum / k) >= threshold) count++;
        }
        return count;
    }
};


// Source https://leetcode.com/problems/angle-between-hands-of-a-clock/

Given two numbers, hour and minutes, return the smaller angle (in degrees) formed between the hour and the minute hand.

Answers within 10-5 of the actual value will be accepted as correct.

 

Example 1:


Input: hour = 12, minutes = 30
Output: 165
Example 2:


Input: hour = 3, minutes = 30
Output: 75
Example 3:


Input: hour = 3, minutes = 15
Output: 7.5
 

Constraints:

1 <= hour <= 12
0 <= minutes <= 59

class Solution
{
public:
    double angleClock(int hour, int minutes)
    {
        double v_hour = 30.0;
        double v_minute = 6.0;
        double time_hour = hour % 12;
        time_hour += (double)minutes / 60;
        double time_minutes = minutes;
        double res = abs(v_minute * time_minutes - v_hour * time_hour);
        if (res > 180)
        {
            return 360.0 - res;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/jump-game-iv/

Given an array of integers arr, you are initially positioned at the first index of the array.

In one step you can jump from index i to index:

i + 1 where: i + 1 < arr.length.
i - 1 where: i - 1 >= 0.
j where: arr[i] == arr[j] and i != j.
Return the minimum number of steps to reach the last index of the array.

Notice that you can not jump outside of the array at any time.

 

Example 1:

Input: arr = [100,-23,-23,404,100,23,23,23,3,404]
Output: 3
Explanation: You need three jumps from index 0 --> 4 --> 3 --> 9. Note that index 9 is the last index of the array.
Example 2:

Input: arr = [7]
Output: 0
Explanation: Start index is the last index. You do not need to jump.
Example 3:

Input: arr = [7,6,9,6,9,6,9,7]
Output: 1
Explanation: You can jump directly from index 0 to index 7 which is last index of the array.
 

Constraints:

1 <= arr.length <= 5 * 104
-108 <= arr[i] <= 108

class Solution
{
public:
    int minJumps(vector<int> &arr)
    {
        int n = arr.size();
        if (n == 1) return 0;
        unordered_map<int, vector<int>> mp;
        for (int i = 0; i < n; i++)
        {
            mp[arr[i]].push_back(i);
        }
        vector<bool> vis(n);
        vis[0] = true;
        queue<int> q;
        q.push(0);
        int step = 0;
        while (!q.empty())
        {
            int sz = q.size();
            for (int i = 0; i < sz; ++i)
            {
                int cur = q.front();
                q.pop();
                if (cur == n - 1) return step;
                for (auto idx : mp[arr[cur]])
                {
                    if (!vis[idx])
                    {
                        vis[idx] = true;
                        q.push(idx);
                    }
                }
                mp.erase(arr[cur]);
                for (auto idx : {cur + 1, cur - 1})
                {
                    if (idx >= 0 && idx < n && !vis[idx])
                    {
                        vis[idx] = true;
                        q.push(idx);
                    }
                }
            }
            ++step;
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/check-if-n-and-its-double-exist/

Given an array arr of integers, check if there exists two integers N and M such that N is the double of M ( i.e. N = 2 * M).

More formally check if there exists two indices i and j such that :

i != j
0 <= i, j < arr.length
arr[i] == 2 * arr[j]
 

Example 1:

Input: arr = [10,2,5,3]
Output: true
Explanation: N = 10 is the double of M = 5,that is, 10 = 2 * 5.
Example 2:

Input: arr = [7,1,14,11]
Output: true
Explanation: N = 14 is the double of M = 7,that is, 14 = 2 * 7.
Example 3:

Input: arr = [3,1,7,11]
Output: false
Explanation: In this case does not exist N and M, such that N = 2 * M.
 

Constraints:

2 <= arr.length <= 500
-10^3 <= arr[i] <= 10^3

class Solution
{
public:
    bool checkIfExist(vector<int> &arr)
    {
        unordered_map<float, int> mp;
        for (auto i : arr)
        {
            if (mp[(float)i / 2] || mp[(float)i * 2]) return true;
            ++mp[(float)i];
        }
        return false;
    }
};


// Source https://leetcode.com/problems/minimum-number-of-steps-to-make-two-strings-anagram/

You are given two strings of the same length s and t. In one step you can choose any character of t and replace it with another character.

Return the minimum number of steps to make t an anagram of s.

An Anagram of a string is a string that contains the same characters with a different (or the same) ordering.

 

Example 1:

Input: s = "bab", t = "aba"
Output: 1
Explanation: Replace the first 'a' in t with b, t = "bba" which is anagram of s.
Example 2:

Input: s = "leetcode", t = "practice"
Output: 5
Explanation: Replace 'p', 'r', 'a', 'i' and 'c' from t with proper characters to make t anagram of s.
Example 3:

Input: s = "anagram", t = "mangaar"
Output: 0
Explanation: "anagram" and "mangaar" are anagrams. 
 

Constraints:

1 <= s.length <= 5 * 104
s.length == t.length
s and t consist of lowercase English letters only.

class Solution
{
public:
    int minSteps(string s, string t)
    {
        int freq1[26] = {0};
        int freq2[26] = {0};
        for(int i = 0; i < s.length(); i++)
        {
            freq1[s[i] - 'a']++;
            freq2[t[i] - 'a']++;
        }
        int ans = 0;
        for(int i = 0; i < 26; i++)
        {
            ans += max(0, freq2[i] - freq1[i]);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/tweet-counts-per-frequency/

A social media company is trying to monitor activity on their site by analyzing the number of tweets that occur in select periods of time. 
These periods can be partitioned into smaller time chunks based on a certain frequency (every minute, hour, or day).

For example, the period [10, 10000] (in seconds) would be partitioned into the following time chunks with these frequencies:

Every minute (60-second chunks): [10,69], [70,129], [130,189], ..., [9970,10000]
Every hour (3600-second chunks): [10,3609], [3610,7209], [7210,10000]
Every day (86400-second chunks): [10,10000]
Notice that the last chunk may be shorter than the specified frequency's chunk size and will always end with the end time of the period (10000 in the above example).

Design and implement an API to help the company with their analysis.

Implement the TweetCounts class:

TweetCounts() Initializes the TweetCounts object.
void recordTweet(String tweetName, int time) Stores the tweetName at the recorded time (in seconds).
List<Integer> getTweetCountsPerFrequency(String freq, String tweetName, int startTime, int endTime)
Returns a list of integers representing the number of tweets with tweetName in each time chunk for the given period of time [startTime, endTime] (in seconds) and frequency freq.
freq is one of "minute", "hour", or "day" representing a frequency of every minute, hour, or day respectively.
 

Example:

Input
["TweetCounts","recordTweet","recordTweet","recordTweet","getTweetCountsPerFrequency","getTweetCountsPerFrequency","recordTweet","getTweetCountsPerFrequency"]
[[],["tweet3",0],["tweet3",60],["tweet3",10],["minute","tweet3",0,59],["minute","tweet3",0,60],["tweet3",120],["hour","tweet3",0,210]]

Output
[null,null,null,null,[2],[2,1],null,[4]]

Explanation
TweetCounts tweetCounts = new TweetCounts();
tweetCounts.recordTweet("tweet3", 0);                              // New tweet "tweet3" at time 0
tweetCounts.recordTweet("tweet3", 60);                             // New tweet "tweet3" at time 60
tweetCounts.recordTweet("tweet3", 10);                             // New tweet "tweet3" at time 10
tweetCounts.getTweetCountsPerFrequency("minute", "tweet3", 0, 59); // return [2]; chunk [0,59] had 2 tweets
tweetCounts.getTweetCountsPerFrequency("minute", "tweet3", 0, 60); // return [2,1]; chunk [0,59] had 2 tweets, chunk [60,60] had 1 tweet
tweetCounts.recordTweet("tweet3", 120);                            // New tweet "tweet3" at time 120
tweetCounts.getTweetCountsPerFrequency("hour", "tweet3", 0, 210);  // return [4]; chunk [0,210] had 4 tweets
 

Constraints:

0 <= time, startTime, endTime <= 109
0 <= endTime - startTime <= 104
There will be at most 104 calls in total to recordTweet and getTweetCountsPerFrequency.

class TweetCounts
{
private:
    map<string, multiset <int>> tweetTimeline;
    unordered_map<string, int> freqEnum;
public:
    TweetCounts()
    {
        freqEnum["minute"] = 60;
        freqEnum["hour"] = 3600;
        freqEnum["day"] = 86400;
    }

    void recordTweet(string tweetName, int time)
    {
        tweetTimeline[tweetName].insert(time);
    }

    vector<int> getTweetCountsPerFrequency(string freq, string tweetName, int startTime, int endTime)
    {
        int chunk = freqEnum[freq];
        int len = (endTime - startTime + 1);
        int cnt = (len + chunk - 1) / chunk;
        vector <int> tweetCountsPerFrequency(cnt, 0);

        auto itr = tweetTimeline[tweetName].lower_bound(startTime);
        auto itrEnd = tweetTimeline[tweetName].upper_bound(endTime);

        while (itr != itrEnd)
        {
            int idx = (*itr - startTime) / chunk;
            tweetCountsPerFrequency[idx]++;
            itr++;
        }

        return tweetCountsPerFrequency;
    }
};


// Source https://leetcode.com/problems/maximum-students-taking-exam/

Given a m * n matrix seats  that represent seats distributions in a classroom. If a seat is broken, it is denoted by '#' character otherwise it is denoted by a '.' character.

Students can see the answers of those sitting next to the left, right, upper left and upper right, but he cannot see the answers of the student sitting directly in front or behind him. 
Return the maximum number of students that can take the exam together without any cheating being possible..

Students must be placed in seats in good condition.

 

Example 1:


Input: seats = [["#",".","#","#",".","#"],
                [".","#","#","#","#","."],
                ["#",".","#","#",".","#"]]
Output: 4
Explanation: Teacher can place 4 students in available seats so they don't cheat on the exam. 
Example 2:

Input: seats = [[".","#"],
                ["#","#"],
                ["#","."],
                ["#","#"],
                [".","#"]]
Output: 3
Explanation: Place all students in available seats. 

Example 3:

Input: seats = [["#",".",".",".","#"],
                [".","#",".","#","."],
                [".",".","#",".","."],
                [".","#",".","#","."],
                ["#",".",".",".","#"]]
Output: 10
Explanation: Place students in available seats in column 1, 3 and 5.
 

Constraints:

seats contains only characters '.' and'#'.
m == seats.length
n == seats[i].length
1 <= m <= 8
1 <= n <= 8

class Solution
{
public:
    int m, n;
    int locations[10];
    int dp[10][300];

    int recur(vector<vector<char>> &seats, int row, int prevRowArrangement)
    {
        if(row >= m) return 0;
        if(dp[row][prevRowArrangement] != -1) return dp[row][prevRowArrangement];
        int ans = 0;
        for(int mask = 0; mask < (1 << n); ++mask)
        {
            if( ((locations[row] & mask) == mask) && !(mask & (mask << 1)) && !(mask & (mask >> 1)) )
            {
                if(row > 0)
                {
                    if(mask & (prevRowArrangement << 1)) continue;
                    if(mask & (prevRowArrangement >> 1)) continue;
                }
                ans = max(ans, recur(seats, row + 1, mask) + __builtin_popcount(mask));
            }
        }
        return dp[row][prevRowArrangement] = ans;
    }
    
    int maxStudents(vector<vector<char>> &seats)
    {
        m = seats.size();
        n = seats[0].size();
        memset(locations, 0, sizeof(locations));
        memset(dp, -1, sizeof(dp));
        for(int i = 0; i < m; i++)
        {
            int res = 0;
            for(int j = 0; j < n; ++j)
            {
                if (seats[i][j] == '.') res |= (1 << (n - 1 -j));
            }
            locations[i] = res;
        }
        return recur(seats, 0, 0);
    }
};


// Source https://leetcode.com/problems/count-negative-numbers-in-a-sorted-matrix/

Given a m x n matrix grid which is sorted in non-increasing order both row-wise and column-wise, return the number of negative numbers in grid.

 

Example 1:

Input: grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]
Output: 8
Explanation: There are 8 negatives number in the matrix.

4	3	2	-1
3	2	1	-1
1	1	-1	-2
-1	-1	-2	-3

Example 2:

Input: grid = [[3,2],[1,0]]
Output: 0
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 100
-100 <= grid[i][j] <= 100

class Solution
{
public:
    int countNegatives(vector<vector<int>> &grid)
    {
        int m = grid.size(), n = grid[0].size();
        int count = 0;
        for(int i = 0; i < m; i++)
        {
            int low = 0, high = n - 1;
            if(grid[i][low] < 0)
            {
                count += n;
                continue;
            }
            if(grid[i][high] >= 0) continue;
            int index;
            while(low <= high)
            {
                int mid = low + (high - low) / 2;
                if(grid[i][mid] < 0)
                {
                    index = mid;
                    high = mid - 1;
                }
                else low = mid + 1;
            }
            count += (n - index);
        }
        return count;
    }
};


// Source https://leetcode.com/problems/product-of-the-last-k-numbers/

Design an algorithm that accepts a stream of integers and retrieves the product of the last k integers of the stream.

Implement the ProductOfNumbers class:

ProductOfNumbers() Initializes the object with an empty stream.
void add(int num) Appends the integer num to the stream.
int getProduct(int k) Returns the product of the last k numbers in the current list. You can assume that always the current list has at least k numbers.
The test cases are generated so that, at any time, the product of any contiguous sequence of numbers will fit into a single 32-bit integer without overflowing.

 

Example:

Input
["ProductOfNumbers","add","add","add","add","add","getProduct","getProduct","getProduct","add","getProduct"]
[[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]]

Output
[null,null,null,null,null,null,20,40,0,null,32]

Explanation
ProductOfNumbers productOfNumbers = new ProductOfNumbers();
productOfNumbers.add(3);        // [3]
productOfNumbers.add(0);        // [3,0]
productOfNumbers.add(2);        // [3,0,2]
productOfNumbers.add(5);        // [3,0,2,5]
productOfNumbers.add(4);        // [3,0,2,5,4]
productOfNumbers.getProduct(2); // return 20. The product of the last 2 numbers is 5 * 4 = 20
productOfNumbers.getProduct(3); // return 40. The product of the last 3 numbers is 2 * 5 * 4 = 40
productOfNumbers.getProduct(4); // return 0. The product of the last 4 numbers is 0 * 2 * 5 * 4 = 0
productOfNumbers.add(8);        // [3,0,2,5,4,8]
productOfNumbers.getProduct(2); // return 32. The product of the last 2 numbers is 4 * 8 = 32 
 

Constraints:

0 <= num <= 100
1 <= k <= 4 * 104
At most 4 * 104 calls will be made to add and getProduct.
The product of the stream at any point in time will fit in a 32-bit integer.

class ProductOfNumbers
{
public:
    vector<int> arr;
    
    ProductOfNumbers()
    {
        arr.push_back(1);
    }

    void add(int num)
    {
        if(num)
        {
            arr.push_back(arr.back()*num);
        }
        else
        {
            arr.clear();
            arr.push_back(1);
        }
    }

    int getProduct(int k)
    {
        int n = arr.size();
        if (k >= n) return 0;
        return arr[n - 1] / arr[n - 1 - k];
    }
};


// Source https://leetcode.com/problems/maximum-number-of-events-that-can-be-attended/

You are given an array of events where events[i] = [startDayi, endDayi]. Every event i starts at startDayi and ends at endDayi.

You can attend an event i at any day d where startTimei <= d <= endTimei. You can only attend one event at any time d.

Return the maximum number of events you can attend.

 

Example 1:


Input: events = [[1,2],[2,3],[3,4]]
Output: 3
Explanation: You can attend all the three events.
One way to attend them all is as shown.
Attend the first event on day 1.
Attend the second event on day 2.
Attend the third event on day 3.
Example 2:

Input: events= [[1,2],[2,3],[3,4],[1,2]]
Output: 4
 

Constraints:

1 <= events.length <= 105
events[i].length == 2
1 <= startDayi <= endDayi <= 105

class Solution
{
public:
    int maxEvents(vector<vector<int>> &events)
    {
        sort(events.begin(), events.end(), [&](vector<int> &a, vector<int> &b)
        {
            if (a[0] == b[0]) return a[1] < b[1];
            return a[0] < b[0];
        });
        priority_queue<int, vector<int>, greater<int> > pq;
        int res = 0;
        int i = 0;
        for (int day = 1; day <= 1e5; day++)
        {
            while (i < events.size() && events[i][0] == day)
            {
                pq.push(events[i][1]);
                i++;
            }
            while (!pq.empty() && pq.top() < day)
            {
                pq.pop();
            }
            if (!pq.empty())
            {
                pq.pop();
                res++;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/construct-target-array-with-multiple-sums/

You are given an array target of n integers. From a starting array arr consisting of n 1's, you may perform the following procedure :

let x be the sum of all elements currently in your array.
choose index i, such that 0 <= i < n and set the value of arr at index i to x.
You may repeat this procedure as many times as needed.
Return true if it is possible to construct the target array from arr, otherwise, return false.

 

Example 1:

Input: target = [9,3,5]
Output: true
Explanation: Start with arr = [1, 1, 1] 
[1, 1, 1], sum = 3 choose index 1
[1, 3, 1], sum = 5 choose index 2
[1, 3, 5], sum = 9 choose index 0
[9, 3, 5] Done

9,3,5
1,3,5
1,3,1
1,1,1

Example 2:

Input: target = [1,1,1,2]
Output: false
Explanation: Impossible to create target array from [1,1,1,1].
Example 3:

Input: target = [8,5]
Output: true
 
8,5
3,5
3,2
1,2
1,1

9,2
7,2
5,2
3,2
1,2
1,1

1,5
1,4
1,3
1,2
1,1

Constraints:

n == target.length
1 <= n <= 5 * 104
1 <= target[i] <= 109

class Solution
{
public:
    bool isPossible(vector<int> &target)
    {
        int n = target.size();
        if (n == 1) return target[0] == 1;
        long long sum = 0;
        priority_queue<long long> pq;
        for (int i = 0; i < n; ++i)
        {
            sum += target[i];
            if (target[i] != 1)
            {
                pq.push(target[i]);
            }
        }
        if (sum == n) return true;
        while (!pq.empty())
        {
            long long largest = pq.top();
            pq.pop();
            long long rest = sum - largest;
            if (rest == 1)
            {
                return true;
            }
            if (largest <= rest) return false;
            long long temp = (largest / rest) * rest;
            long long x = largest - max(rest, temp);
            if (x < 1) return false;
            sum -= largest - x;
            if (x > 1)
            {
                pq.push(x);
            }
        }
        return true;
    }
};


// Source https://leetcode.com/problems/sort-integers-by-the-number-of-1-bits/

You are given an integer array arr. Sort the integers in the array in ascending order by the number of 1's in their binary representation 
and in case of two or more integers have the same number of 1's you have to sort them in ascending order.

Return the array after sorting it.

 

Example 1:

Input: arr = [0,1,2,3,4,5,6,7,8]
Output: [0,1,2,4,8,3,5,6,7]
Explantion: [0] is the only integer with 0 bits.
[1,2,4,8] all have 1 bit.
[3,5,6] have 2 bits.
[7] has 3 bits.
The sorted array by bits is [0,1,2,4,8,3,5,6,7]
Example 2:

Input: arr = [1024,512,256,128,64,32,16,8,4,2,1]
Output: [1,2,4,8,16,32,64,128,256,512,1024]
Explantion: All integers have 1 bit in the binary representation, you should just sort them in ascending order.
 

Constraints:

1 <= arr.length <= 500
0 <= arr[i] <= 104

class Solution
{
public:
    vector<int> sortByBits(vector<int> &arr)
    {
        sort(arr.begin(), arr.end(), [](int a, int b)
        {
            int cntA = __builtin_popcount(a);
            int cntB = __builtin_popcount(b);
            return cntA == cntB ? a < b : cntA < cntB;
        });
        return arr;
    }
};


// Source https://leetcode.com/problems/apply-discount-every-n-orders/

There is a supermarket that is frequented by many customers. The products sold at the supermarket are represented as two parallel integer arrays products and prices, 
where the ith product has an ID of products[i] and a price of prices[i].

When a customer is paying, their bill is represented as two parallel integer arrays product and amount, 
where the jth product they purchased has an ID of product[j], and amount[j] is how much of the product they bought. 
Their subtotal is calculated as the sum of each amount[j] * (price of the jth product).

The supermarket decided to have a sale. Every nth customer paying for their groceries will be given a percentage discount. 
The discount amount is given by discount, where they will be given discount percent off their subtotal. 
More formally, if their subtotal is bill, then they would actually pay bill * ((100 - discount) / 100).

Implement the Cashier class:

Cashier(int n, int discount, int[] products, int[] prices) Initializes the object with n, the discount, and the products and their prices.
double getBill(int[] product, int[] amount) Returns the final total of the bill with the discount applied (if any). Answers within 10-5 of the actual value will be accepted.
 

Example 1:

Input
["Cashier","getBill","getBill","getBill","getBill","getBill","getBill","getBill"]
[[3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]],[[1,2],[1,2]],[[3,7],[10,10]],[[1,2,3,4,5,6,7],[1,1,1,1,1,1,1]],[[4],[10]],[[7,3],[10,10]],[[7,5,3,1,6,4,2],[10,10,10,9,9,9,7]],[[2,3,5],[5,3,2]]]
Output
[null,500.0,4000.0,800.0,4000.0,4000.0,7350.0,2500.0]
Explanation
Cashier cashier = new Cashier(3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]);
cashier.getBill([1,2],[1,2]);                        // return 500.0. 1st customer, no discount.
                                                     // bill = 1 * 100 + 2 * 200 = 500.
cashier.getBill([3,7],[10,10]);                      // return 4000.0. 2nd customer, no discount.
                                                     // bill = 10 * 300 + 10 * 100 = 4000.
cashier.getBill([1,2,3,4,5,6,7],[1,1,1,1,1,1,1]);    // return 800.0. 3rd customer, 50% discount.
                                                     // Original bill = 1600
                                                     // Actual bill = 1600 * ((100 - 50) / 100) = 800.
cashier.getBill([4],[10]);                           // return 4000.0. 4th customer, no discount.
cashier.getBill([7,3],[10,10]);                      // return 4000.0. 5th customer, no discount.
cashier.getBill([7,5,3,1,6,4,2],[10,10,10,9,9,9,7]); // return 7350.0. 6th customer, 50% discount.
                                                     // Original bill = 14700, but with
                                                     // Actual bill = 14700 * ((100 - 50) / 100) = 7350.
cashier.getBill([2,3,5],[5,3,2]);                    // return 2500.0.  6th customer, no discount.
 

Constraints:

1 <= n <= 104
0 <= discount <= 100
1 <= products.length <= 200
prices.length == products.length
1 <= products[i] <= 200
1 <= prices[i] <= 1000
The elements in products are unique.
1 <= product.length <= products.length
amount.length == product.length
product[j] exists in products.
1 <= amount[j] <= 1000
The elements of product are unique.
At most 1000 calls will be made to getBill.
Answers within 10-5 of the actual value will be accepted.

class Cashier
{
public:
    int count;
    int n, discount;
    unordered_map<int, int> prodPrice;
    Cashier(int n, int discount, vector<int> &products, vector<int> &prices)
    {
        count = 0;
        this->n = n;
        this->discount = discount;
        for(int i = 0; i < products.size(); i++)
        {
            prodPrice[products[i]] = prices[i];
        }
    }

    double getBill(vector<int> prod, vector<int> amount)
    {
        count++;
        bool flag = 0;
        if(count % n == 0 )
        {
            flag = 1;
            count  = 0;
        }
        double cost = 0;
        for(int i = 0; i < prod.size(); i++)
        {
            cost += (prodPrice[prod[i]] * amount[i]);
        }
        if(!flag) return cost;
        return cost * (1.0 - (double)discount / 100);
    }
};


// Source https://leetcode.com/problems/number-of-substrings-containing-all-three-characters/

Given a string s consisting only of characters a, b and c.

Return the number of substrings containing at least one occurrence of all these characters a, b and c.

 

Example 1:

Input: s = "abcabc"
Output: 10
Explanation: The substrings containing at least one occurrence of the characters a, b and c are "abc", "abca", "abcab", "abcabc", "bca", "bcab", "bcabc", "cab", "cabc" and "abc" (again). 
Example 2:

Input: s = "aaacb"
Output: 3
Explanation: The substrings containing at least one occurrence of the characters a, b and c are "aaacb", "aacb" and "acb". 
Example 3:

Input: s = "abc"
Output: 1
 

Constraints:

3 <= s.length <= 5 x 10^4
s only consists of a, b or c characters.

class Solution
{
public:
    int numberOfSubstrings(string s)
    {
        int n = s.length();
        int i = 0, j = 0, count = 0, temp = 0;
        int arr[3] = {0};
        while(j < n)
        {
            if(arr[s[j] - 'a']++ == 0) temp++;
            while(temp == 3)
            {
                count += n - j;
                if(--arr[s[i] - 'a'] == 0) temp--;
                ++i;
            }
            ++j;
        }
        return count;
    }
};


// Source https://leetcode.com/problems/count-all-valid-pickup-and-delivery-options/

Given n orders, each order consist in pickup and delivery services. 

Count all valid pickup/delivery possible sequences such that delivery(i) is always after of pickup(i). 

Since the answer may be too large, return it modulo 10^9 + 7.

 

Example 1:

Input: n = 1
Output: 1
Explanation: Unique order (P1, D1), Delivery 1 always is after of Pickup 1.
Example 2:

Input: n = 2
Output: 6
Explanation: All possible orders: 
(P1,P2,D1,D2), (P1,P2,D2,D1), (P1,D1,P2,D2), (P2,P1,D1,D2), (P2,P1,D2,D1) and (P2,D2,P1,D1).
This is an invalid order (P1,D2,P2,D1) because Pickup 2 is after of Delivery 2.
Example 3:

Input: n = 3
Output: 90
 

Constraints:

1 <= n <= 500

1种
P1 D1
6种=1 + 2 + 3
P1 D1 P2 D2
P1 P2 D1 D2
P1 P2 D2 D1
P2 P1 D1 D2
P2 P1 D2 D1
P2 D2 P1 D1

If we have (i-1)th valid orders, how to make ith valid orders. Clearly, for a (i-1)th valid order, it contains 2 * (i - 1) + 1 slots from top to end.
So, we set Pi to one of the slot, and set Di after it. 

2 * (i - 1) + 1 = slot
2 * (i - 1)
...
1

等差数列求和公式（首项+末项）×项数/2

In this way, there are totally (slot + slot - 1 + ... + 1) = (slot * (slot + 1)) / 2 valid ith orders.

Finally, for k (i-1)th valid orders, we totally have k * (slot * (slot + 1)) / 2 ith orders.

Take n = 3 as an example:

n = 2, we have 6 possible orders. Just pick an n = 2 order, like P1D1P2D2, which has 5 slots ( _P1_D1_P2_D2_, _ represents a slot).

We pick one of these slots to set P3, then we can set D3 to all of slots after the slot we picked:

P3_P1_D1_P2_D2_
P1P3_D1_P2_D2_
P1D1P3_P2_D2_
P1D1P2P3_D2_
P1D1P2D2P3_
As shown above, we can insert D3 into all of _ slot. There are 15 (5 + 4 + 3 + 2 + 1 = 5 *6 / 2 = 15) possible orders.

So the total order = 6 * 15 = 90.

n = 1，1种
n = 2，1 * (3 + 2 + 1) = 6种
n = 3，6 * (5 + 4 + 3 + 2 + 1) = 90种
cnt[n] = cnt[n - 1] * (n + n - 1 + ... + 1) = cnt[n - 1] * (n * (n + 1) / 2)

class Solution
{
public:
    int countOrders(int n)
    {
        long ans = 1, mod = 1e9 + 7;
        for(int i = 1, slot = 3; i < n; i++, slot += 2)
            ans = (ans * (slot * (slot + 1)) / 2) % mod;
        return ans;
    }
};


// Source https://leetcode.com/problems/number-of-days-between-two-dates/

Write a program to count the number of days between two dates.

The two dates are given as strings, their format is YYYY-MM-DD as shown in the examples.

 

Example 1:

Input: date1 = "2019-06-29", date2 = "2019-06-30"
Output: 1
Example 2:

Input: date1 = "2020-01-15", date2 = "2019-12-31"
Output: 15
 

Constraints:

The given dates are valid dates between the years 1971 and 2100.

class Solution
{
public:

    bool isLeapYear(int year)
    {
        if (year % 400 == 0 || (year % 100 != 0 && year % 4 == 0)) return true;
        return false;
    }

    int fDate(string d)
    {
        string year = d.substr(0, 4);
        string mon = d.substr(5, 2);
        string date = d.substr(8, 2);

        int y = stoi(year);
        int m = stoi(mon);
        int da = stoi(date);

        int days = 0;
        for(int i = 1971; i < y; i++)
        {
            if(isLeapYear(i))
                days += 366;
            else
                days += 365;
        }
        for(int i = 1; i < m; i++)
        {
            if(i == 1 || i == 3 || i == 5 || i == 7 || i == 8 || i == 10 || i == 12)
                days += 31;
            else if(i == 4 || i == 6 || i == 9 || i == 11)
                days += 30;
            else if(i == 2)
            {
                if(isLeapYear(y))
                    days += 29;
                else
                    days += 28;
            }
        }

        days += da;
        return days;
    }

    int daysBetweenDates(string date1, string date2)
    {
        return abs(fDate(date1) - fDate(date2));
    }
};


// Source https://leetcode.com/problems/validate-binary-tree-nodes/

You have n binary tree nodes numbered from 0 to n - 1 where node i has two children leftChild[i] and rightChild[i], return true if and only if all the given nodes form exactly one valid binary tree.

If node i has no left child then leftChild[i] will equal -1, similarly for the right child.

Note that the nodes have no values and that we only use the node numbers in this problem.

 

Example 1:


Input: n = 4, leftChild = [1,-1,3,-1], rightChild = [2,-1,-1,-1]
Output: true
Example 2:


Input: n = 4, leftChild = [1,-1,3,-1], rightChild = [2,3,-1,-1]
Output: false
Example 3:


Input: n = 2, leftChild = [1,0], rightChild = [-1,-1]
Output: false
 

Constraints:

n == leftChild.length == rightChild.length
1 <= n <= 104
-1 <= leftChild[i], rightChild[i] <= n - 1

class Solution
{
public:
    bool validateBinaryTreeNodes(int n, vector<int> &leftChild, vector<int> &rightChild)
    {
        vector<int> inDegree(n, 0);
        for(int i = 0; i < n; i++)
        {
            if(leftChild[i] != -1)
                inDegree[leftChild[i]]++;
            if(rightChild[i] != -1)
                inDegree[rightChild[i]]++;
        }
        queue<int> q;
        int countZero = 0;
        for(int i = 0; i < n; i++)
        {
            if(inDegree[i] == 0)
            {
                if(countZero) return false;
                q.push(i);
                countZero++;
            }
        }
        if(countZero == 0) return false;
        vector<bool> isVisited(n, false);
        int count = 0;
        while(!q.empty())
        {
            int node = q.front();
            q.pop();
            if(isVisited[node]) return false;
            isVisited[node] = true;
            count++;
            if(leftChild[node] != -1)
                q.push(leftChild[node]);
            if(rightChild[node] != -1)
                q.push(rightChild[node]);
        }
        return count == n;
    }
};


// Source https://leetcode.com/problems/closest-divisors/

Given an integer num, find the closest two integers in absolute difference whose product equals num + 1 or num + 2.

Return the two integers in any order.

 

Example 1:

Input: num = 8
Output: [3,3]
Explanation: For num + 1 = 9, the closest divisors are 3 & 3, for num + 2 = 10, the closest divisors are 2 & 5, hence 3 & 3 is chosen.
Example 2:

Input: num = 123
Output: [5,25]
Example 3:

Input: num = 999
Output: [40,25]
 

Constraints:

1 <= num <= 10^9

class Solution
{
public:
    pair<int, int> fact(int n)
    {
        for (int i = sqrt(n); i > 1; i--)
        {
            if (n % i == 0) return {i, n / i};
        }
        return {1, n};
    }

    vector<int> closestDivisors(int num)
    {
        auto p1 = fact(num + 1);
        auto p2 = fact(num + 2);
        if (abs(p1.first - p1.second) < abs(p2.first - p2.second)) return {p1.first, p1.second};
        else return {p2.first, p2.second};
    }
};


// Source https://leetcode.com/problems/largest-multiple-of-three/

Given an array of digits digits, return the largest multiple of three that can be formed by concatenating some of the given digits in any order. If there is no answer return an empty string.

Since the answer may not fit in an integer data type, return the answer as a string. Note that the returning answer must not contain unnecessary leading zeros.

 

Example 1:

Input: digits = [8,1,9]
Output: "981"
Example 2:

Input: digits = [8,6,7,1,0]
Output: "8760"
Example 3:

Input: digits = [1]
Output: ""
 

Constraints:

1 <= digits.length <= 104
0 <= digits[i] <= 9

class Solution
{
public:
    string largestMultipleOfThree(vector<int> &digits)
    {
        vector<int>v1, v2;
        string res = "";
        int i, sum = 0, rem;
        for(i = 0; i < digits.size(); i++)
        {
            if(digits[i] % 3 == 0)
            {
                res.push_back(digits[i] + '0');
            }
            else if(digits[i] % 3 == 1)
            {
                v1.push_back(digits[i]);
            }
            else
            {
                v2.push_back(digits[i]);
            }
            sum = sum + digits[i];
        }
        sort(v1.begin(), v1.end(), greater<int>());
        sort(v2.begin(), v2.end(), greater<int>());
        rem = sum % 3;
        if(rem == 1)
        {
            if(v1.size() > 0)
            {
                v1.pop_back();
            }
            else if(v2.size() > 1)
            {
                v2.pop_back();
                v2.pop_back();
            }
        }
        else if(rem == 2)
        {
            if(v2.size() > 0)
            {
                v2.pop_back();
            }
            else if(v1.size() > 1)
            {
                v1.pop_back();
                v1.pop_back();
            }
        }
        for(i = 0; i < v1.size(); i++)
        {
            res.push_back(v1[i] + '0');
        }
        for(i = 0; i < v2.size(); i++)
        {
            res.push_back(v2[i] + '0');
        }
        sort(res.rbegin(), res.rend());
        if(res.size() > 1 && res[0] == '0')
        {
            return "0";
        }
        return res;
    }
};


// Source https://leetcode.com/problems/how-many-numbers-are-smaller-than-the-current-number/

Given the array nums, for each nums[i] find out how many numbers in the array are smaller than it. 
That is, for each nums[i] you have to count the number of valid j's such that j != i and nums[j] < nums[i].

Return the answer in an array.

 

Example 1:

Input: nums = [8,1,2,2,3]
Output: [4,0,1,1,3]
Explanation: 
For nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3). 
For nums[1]=1 does not exist any smaller number than it.
For nums[2]=2 there exist one smaller number than it (1). 
For nums[3]=2 there exist one smaller number than it (1). 
For nums[4]=3 there exist three smaller numbers than it (1, 2 and 2).
Example 2:

Input: nums = [6,5,4,8]
Output: [2,1,0,3]
Example 3:

Input: nums = [7,7,7,7]
Output: [0,0,0,0]
 

Constraints:

2 <= nums.length <= 500
0 <= nums[i] <= 100

class Solution
{
public:
    vector<int> smallerNumbersThanCurrent(vector<int> &nums)
    {
        int n = nums.size();
        vector<int> vec = nums;
        sort(vec.begin(), vec.end());
        unordered_map<int, int> mp;
        unordered_map<int, bool> found;
        for(int i = 0; i < n; i++)
        {
            if(found[vec[i]]) continue;
            mp[vec[i]] = i;
            found[vec[i]] = true;
        }
        for(int i = 0; i < n; i++)
        {
            nums[i] = mp[nums[i]];
        }
        return nums;
    }
};


// Source https://leetcode.com/problems/rank-teams-by-votes/

In a special ranking system, each voter gives a rank from highest to lowest to all teams participated in the competition.

The ordering of teams is decided by who received the most position-one votes. If two or more teams tie in the first position, we consider the second position to resolve the conflict, 
if they tie again, we continue this process until the ties are resolved. If two or more teams are still tied after considering all positions, we rank them alphabetically based on their team letter.

Given an array of strings votes which is the votes of all voters in the ranking systems. Sort all teams according to the ranking system described above.

Return a string of all teams sorted by the ranking system.

 

Example 1:

Input: votes = ["ABC","ACB","ABC","ACB","ACB"]
Output: "ACB"
Explanation: Team A was ranked first place by 5 voters. No other team was voted as first place so team A is the first team.
Team B was ranked second by 2 voters and was ranked third by 3 voters.
Team C was ranked second by 3 voters and was ranked third by 2 voters.
As most of the voters ranked C second, team C is the second team and team B is the third.
Example 2:

Input: votes = ["WXYZ","XYZW"]
Output: "XWYZ"
Explanation: X is the winner due to tie-breaking rule. X has same votes as W for the first position but X has one vote as second position while W doesn't have any votes as second position. 
Example 3:

Input: votes = ["ZMNAGUEDSJYLBOPHRQICWFXTVK"]
Output: "ZMNAGUEDSJYLBOPHRQICWFXTVK"
Explanation: Only one voter so his votes are used for the ranking.
 

Constraints:

1 <= votes.length <= 1000
1 <= votes[i].length <= 26
votes[i].length == votes[j].length for 0 <= i, j < votes.length.
votes[i][j] is an English uppercase letter.
All characters of votes[i] are unique.
All the characters that occur in votes[0] also occur in votes[j] where 1 <= j < votes.length.

class Solution
{
public:
    string rankTeams(vector<string> &votes)
    {
        int n = votes[0].size();
        vector<vector<int>> table(26, vector<int>(n, 0));
        for(int i = 0; i < votes.size(); i++)
        {
            for(int j = 0; j < n; j++)
            {
                char ch = votes[i][j];
                int idx = ch - 'A';
                table[idx][j]++;
            }
        }
        string res = votes[0];
        sort(res.begin(), res.end(), [&](char a, char b)
        {
            if(table[a - 'A'] != table[b - 'A'])
                return table[a - 'A'] > table[b - 'A'];
            return a < b;
        });
        return res;
    }
};


// Source https://leetcode.com/problems/linked-list-in-binary-tree/

Given a binary tree root and a linked list with head as the first node. 

Return True if all the elements in the linked list starting from the head correspond to some downward path connected in the binary tree otherwise return False.

In this context downward path means a path that starts at some node and goes downwards.

 

Example 1:



Input: head = [4,2,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]
Output: true
Explanation: Nodes in blue form a subpath in the binary Tree.  
Example 2:



Input: head = [1,4,2,6], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]
Output: true
Example 3:

Input: head = [1,4,2,6,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]
Output: false
Explanation: There is no path in the binary tree that contains all the elements of the linked list from head.
 

Constraints:

The number of nodes in the tree will be in the range [1, 2500].
The number of nodes in the list will be in the range [1, 100].
1 <= Node.val <= 100 for each node in the linked list and binary tree.

class Solution
{
public:
    bool recur(ListNode *head, TreeNode *root)
    {
        if (!head) return true;
        if (!root) return false;
        if (head->val != root->val) return false;
        return recur(head->next, root->left) || recur(head->next, root->right);
    }

    bool isSubPath(ListNode *head, TreeNode *root)
    {
        if (!root) return false;
        bool isFound = false;
        if (root->val == head->val)
        {
            isFound = recur(head, root);
        }
        if (isFound) return true;
        return isSubPath(head, root->left) || isSubPath(head, root->right);
    }
};


// Source https://leetcode.com/problems/minimum-cost-to-make-at-least-one-valid-path-in-a-grid/

Given an m x n grid. Each cell of the grid has a sign pointing to the next cell you should visit if you are currently in this cell. The sign of grid[i][j] can be:

1 which means go to the cell to the right. (i.e go from grid[i][j] to grid[i][j + 1])
2 which means go to the cell to the left. (i.e go from grid[i][j] to grid[i][j - 1])
3 which means go to the lower cell. (i.e go from grid[i][j] to grid[i + 1][j])
4 which means go to the upper cell. (i.e go from grid[i][j] to grid[i - 1][j])
Notice that there could be some signs on the cells of the grid that point outside the grid.

You will initially start at the upper left cell (0, 0). A valid path in the grid is a path that starts from the upper left cell (0, 0) and ends at the bottom-right cell (m - 1, n - 1) 
following the signs on the grid. The valid path does not have to be the shortest.

You can modify the sign on a cell with cost = 1. You can modify the sign on a cell one time only.

Return the minimum cost to make the grid have at least one valid path.

 

Example 1:


Input: grid = [[1,1,1,1],[2,2,2,2],[1,1,1,1],[2,2,2,2]]
Output: 3
Explanation: You will start at point (0, 0).
The path to (3, 3) is as follows. (0, 0) --> (0, 1) --> (0, 2) --> (0, 3) change the arrow to down with cost = 1 --> (1, 3) --> (1, 2) --> (1, 1) --> (1, 0) change the arrow to down with cost = 1 --> (2, 0) --> (2, 1) --> (2, 2) --> (2, 3) change the arrow to down with cost = 1 --> (3, 3)
The total cost = 3.
Example 2:


Input: grid = [[1,1,3],[3,2,2],[1,1,4]]
Output: 0
Explanation: You can follow the path from (0, 0) to (2, 2).
Example 3:


Input: grid = [[1,2],[4,3]]
Output: 1
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 100
1 <= grid[i][j] <= 4

class Solution
{
public:

    int minCost(vector<vector<int>> &grid)
    {
        int rows = grid.size(), cols = grid[0].size();
        int dir[5][2] = {{-1, -1}, {0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        vector<int> visited(rows * cols);
        vector<int> dist(rows * cols, INT_MAX);
        int src = 0;
        int target = (rows * cols - 1);
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        pq.push({0, src});
        dist[src] = 0;
        while(!pq.empty())
        {
            auto p = pq.top();
            pq.pop();
            if(p.second == target) return p.first;
            if(visited[p.second]) continue;
            visited[p.second] = 1;
            int row = p.second / cols, col = p.second % cols;
            for(int i = 1; i <= 4; i++)
            {
                int nr = row + dir[i][0], nc = col + dir[i][1];
                if(nr >= 0 && nc >= 0 && nr < rows && nc < cols)
                {
                    int pos = (nr * cols + nc);
                    if (grid[row][col] == i && dist[pos] > p.first)
                    {
                        pq.push( {p.first, pos} );
                    }
                    else if (grid[row][col] != i && dist[pos] > p.first + 1)
                    {
                        pq.push( {p.first + 1, pos} );
                    }
                }
            }
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/increasing-decreasing-string/

You are given a string s. Reorder the string using the following algorithm:

Pick the smallest character from s and append it to the result.
Pick the smallest character from s which is greater than the last appended character to the result and append it.
Repeat step 2 until you cannot pick more characters.
Pick the largest character from s and append it to the result.
Pick the largest character from s which is smaller than the last appended character to the result and append it.
Repeat step 5 until you cannot pick more characters.
Repeat the steps from 1 to 6 until you pick all characters from s.
In each step, If the smallest or the largest character appears more than once you can choose any occurrence and append it to the result.

Return the result string after sorting s with this algorithm.

 

Example 1:

Input: s = "aaaabbbbcccc"
Output: "abccbaabccba"
Explanation: After steps 1, 2 and 3 of the first iteration, result = "abc"
After steps 4, 5 and 6 of the first iteration, result = "abccba"
First iteration is done. Now s = "aabbcc" and we go back to step 1
After steps 1, 2 and 3 of the second iteration, result = "abccbaabc"
After steps 4, 5 and 6 of the second iteration, result = "abccbaabccba"
Example 2:

Input: s = "rat"
Output: "art"
Explanation: The word "rat" becomes "art" after re-ordering it with the mentioned algorithm.
 

Constraints:

1 <= s.length <= 500
s consists of only lowercase English letters.

class Solution
{
public:
    string sortString(string s)
    {
        int n = s.size();
        unordered_map<char, int>mp;
        for(auto c : s)
        {
            mp[c]++;
        }
        string ans = "";
        ans.reserve(n);
        while(ans.size() < n)
        {
            for(char c = 'a'; c <= 'z'; c++)
            {
                if(mp[c] > 0)
                {
                    ans += c;
                    mp[c]--;
                }
            }
            for(char c = 'z'; c >= 'a'; c--)
            {
                if(mp[c] > 0)
                {
                    ans += c;
                    mp[c]--;
                }
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/find-the-longest-substring-containing-vowels-in-even-counts/

Given the string s, return the size of the longest substring containing each vowel an even number of times. That is, 'a', 'e', 'i', 'o', and 'u' must appear an even number of times.

 

Example 1:

Input: s = "eleetminicoworoep"
Output: 13
Explanation: The longest substring is "leetminicowor" which contains two each of the vowels: e, i and o and zero of the vowels: a and u.
Example 2:

Input: s = "leetcodeisgreat"
Output: 5
Explanation: The longest substring is "leetc" which contains two e's.
Example 3:

Input: s = "bcbcbc"
Output: 6
Explanation: In this case, the given string "bcbcbc" is the longest because all vowels: a, e, i, o and u appear zero times.
 

Constraints:

1 <= s.length <= 5 x 10^5
s contains only lowercase English letters.

class Solution
{
public:
    int findTheLongestSubstring(string s)
    {
        int n = s.length();
        unordered_map<int, int> mp;
        int ans = 0;
        int mask = 0;
        mp[0] = -1;
        for(int i = 0; i < n; i++)
        {
            if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')
            {
                int pos = s[i] - 'a';
                mask = (mask ^ (1 << pos));
            }
            if(mp.count(mask))
                ans = max(ans, i - mp[mask]);
            else
                mp[mask] = i;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/longest-zigzag-path-in-a-binary-tree/

You are given the root of a binary tree.

A ZigZag path for a binary tree is defined as follow:

Choose any node in the binary tree and a direction (right or left).
If the current direction is right, move to the right child of the current node; otherwise, move to the left child.
Change the direction from right to left or from left to right.
Repeat the second and third steps until you can't move in the tree.
Zigzag length is defined as the number of nodes visited - 1. (A single node has a length of 0).

Return the longest ZigZag path contained in that tree.

 

Example 1:


Input: root = [1,null,1,1,1,null,null,1,1,null,1,null,null,null,1,null,1]
Output: 3
Explanation: Longest ZigZag path in blue nodes (right -> left -> right).
Example 2:


Input: root = [1,1,1,null,1,null,null,1,1,null,1]
Output: 4
Explanation: Longest ZigZag path in blue nodes (left -> right -> left -> right).
Example 3:

Input: root = [1]
Output: 0
 

Constraints:

The number of nodes in the tree is in the range [1, 5 * 104].
1 <= Node.val <= 100

class Solution
{
public:
    int ans;

    void longestZigZagPath(TreeNode *root, int prev, int sum)
    {
        if(root == nullptr)
        {
            ans = max(ans, sum - 1);
            return;
        }
        longestZigZagPath(root->left, 0, prev == 0 ? 1 : sum + 1);
        longestZigZagPath(root->right, 1, prev == 1 ? 1 : sum + 1);
    }

    int longestZigZag(TreeNode *root)
    {
        ans = 0;
        // 0 means left and 1 means right
        longestZigZagPath(root->left, 0, 1);
        longestZigZagPath(root->right, 1, 1);
        return ans;
    }
};


// Source https://leetcode.com/problems/maximum-sum-bst-in-binary-tree/

Given a binary tree root, return the maximum sum of all keys of any sub-tree which is also a Binary Search Tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
 

Example 1:



Input: root = [1,4,3,2,4,2,5,null,null,null,null,null,null,4,6]
Output: 20
Explanation: Maximum sum in a valid Binary search tree is obtained in root node with key equal to 3.
Example 2:



Input: root = [4,3,null,1,2]
Output: 2
Explanation: Maximum sum in a valid Binary search tree is obtained in a single root node with key equal to 2.
Example 3:

Input: root = [-4,-2,-5]
Output: 0
Explanation: All values are negatives. Return an empty BST.
 

Constraints:

The number of nodes in the tree is in the range [1, 4 * 104].
-4 * 104 <= Node.val <= 4 * 104

class Solution
{
public:
    struct bst
    {
        bool isbst;
        int max;
        int min;
        int sum;
    };

    bst recur(TreeNode *root)
    {
        if (root == nullptr)
        {
            bst bres;
            bres.isbst = true;
            bres.max = INT_MIN;
            bres.min = INT_MAX;
            bres.sum = 0;
            return bres;
        }
        bst l = recur(root->left);
        bst r = recur(root->right);
        bst ans;
        ans.max = max(root->val, max(l.max, r.max));
        ans.min = min(root->val, min(l.min, r.min));
        ans.isbst = l.isbst && r.isbst && (l.max < root->val && r.min > root->val);
        if(ans.isbst)
        {
            ans.sum = l.sum + r.sum + root->val;
        }
        else
        {
            ans.sum = max(l.sum, r.sum);
        }
        res = max(res, ans.sum);
        return ans;
    }

    int res = INT_MIN;
    int maxSumBST(TreeNode *root)
    {
        recur(root);
        return res > 0 ? res : 0;
    }
};


// Source https://leetcode.com/problems/generate-a-string-with-characters-that-have-odd-counts/

Given an integer n, return a string with n characters such that each character in such string occurs an odd number of times.

The returned string must contain only lowercase English letters. If there are multiples valid strings, return any of them.  

 

Example 1:

Input: n = 4
Output: "pppz"
Explanation: "pppz" is a valid string since the character 'p' occurs three times and the character 'z' occurs once. Note that there are many other valid strings such as "ohhh" and "love".
Example 2:

Input: n = 2
Output: "xy"
Explanation: "xy" is a valid string since the characters 'x' and 'y' occur once. Note that there are many other valid strings such as "ag" and "ur".
Example 3:

Input: n = 7
Output: "holasss"
 

Constraints:

1 <= n <= 500

class Solution
{
public:
    string generateTheString(int n)
    {
        return n % 2 == 0 ? string(n - 1, 'a') + 'b' : string(n, 'a');
    }
};


// Source https://leetcode.com/problems/number-of-times-binary-string-is-prefix-aligned/

You have a 1-indexed binary string of length n where all the bits are 0 initially. We will flip all the bits of this binary string (i.e., change them from 0 to 1) one by one. 
You are given a 1-indexed integer array flips where flips[i] indicates that the bit at index i will be flipped in the ith step.

A binary string is prefix-aligned if, after the ith step, all the bits in the inclusive range [1, i] are ones and all the other bits are zeros.

Return the number of times the binary string is prefix-aligned during the flipping process.

 

Example 1:

Input: flips = [3,2,4,1,5]
Output: 2
Explanation: The binary string is initially "00000".
After applying step 1: The string becomes "00100", which is not prefix-aligned.
After applying step 2: The string becomes "01100", which is not prefix-aligned.
After applying step 3: The string becomes "01110", which is not prefix-aligned.
After applying step 4: The string becomes "11110", which is prefix-aligned.
After applying step 5: The string becomes "11111", which is prefix-aligned.
We can see that the string was prefix-aligned 2 times, so we return 2.
Example 2:

Input: flips = [4,1,2,3]
Output: 1
Explanation: The binary string is initially "0000".
After applying step 1: The string becomes "0001", which is not prefix-aligned.
After applying step 2: The string becomes "1001", which is not prefix-aligned.
After applying step 3: The string becomes "1101", which is not prefix-aligned.
After applying step 4: The string becomes "1111", which is prefix-aligned.
We can see that the string was prefix-aligned 1 time, so we return 1.
 

Constraints:

n == flips.length
1 <= n <= 5 * 104
flips is a permutation of the integers in the range [1, n].

class Solution
{
public:
    int numTimesAllBlue(vector<int> &light)
    {
        int n = light.size();
        int maxSoFar = -1, res = 0;
        for(int i = 1; i <= n; ++i)
        {
            maxSoFar = max(maxSoFar, light[i-1]);
            if(maxSoFar == i) res++;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/time-needed-to-inform-all-employees/

A company has n employees with a unique ID for each employee from 0 to n - 1. The head of the company is the one with headID.

Each employee has one direct manager given in the manager array where manager[i] is the direct manager of the i-th employee, manager[headID] = -1. 
Also, it is guaranteed that the subordination relationships have a tree structure.

The head of the company wants to inform all the company employees of an urgent piece of news. 
He will inform his direct subordinates, and they will inform their subordinates, and so on until all employees know about the urgent news.

The i-th employee needs informTime[i] minutes to inform all of his direct subordinates (i.e., After informTime[i] minutes, all his direct subordinates can start spreading the news).

Return the number of minutes needed to inform all the employees about the urgent news.

 

Example 1:

Input: n = 1, headID = 0, manager = [-1], informTime = [0]
Output: 0
Explanation: The head of the company is the only employee in the company.
Example 2:


Input: n = 6, headID = 2, manager = [2,2,-1,2,2,2], informTime = [0,0,1,0,0,0]
Output: 1
Explanation: The head of the company with id = 2 is the direct manager of all the employees in the company and needs 1 minute to inform them all.
The tree structure of the employees in the company is shown.
 

Constraints:

1 <= n <= 105
0 <= headID < n
manager.length == n
0 <= manager[i] < n
manager[headID] == -1
informTime.length == n
0 <= informTime[i] <= 1000
informTime[i] == 0 if employee i has no subordinates.
It is guaranteed that all the employees can be informed.

class Solution
{
public:
    int numOfMinutes(int n, int headID, vector<int> &manager, vector<int> &informTime)
    {
        vector<vector<int>> adj_list(n);
        for(int i = 0; i < manager.size(); i++)
        {
            if(manager[i] != -1)
            {
                adj_list[manager[i]].push_back(i);
            }
        }
        int result = 0;
        queue<pair<int, int>> q;
        q.push({0, headID});
        while(!q.empty())
        {
            auto p = q.front();
            q.pop();
            int minutes = p.first;
            int ID = p.second;
            result = max(result, minutes);
            for(int i = 0; i < adj_list[ID].size(); i++)
            {
                int next = adj_list[ID][i];
                q.push({minutes + informTime[ID], next});
            }
        }
        return result;
    }
};


// Source https://leetcode.com/problems/frog-position-after-t-seconds/

Given an undirected tree consisting of n vertices numbered from 1 to n. A frog starts jumping from vertex 1. 
In one second, the frog jumps from its current vertex to another unvisited vertex if they are directly connected. 
The frog can not jump back to a visited vertex. In case the frog can jump to several vertices, it jumps randomly to one of them with the same probability. 
Otherwise, when the frog can not jump to any unvisited vertex, it jumps forever on the same vertex.

The edges of the undirected tree are given in the array edges, where edges[i] = [ai, bi] means that exists an edge connecting the vertices ai and bi.

Return the probability that after t seconds the frog is on the vertex target. Answers within 10-5 of the actual answer will be accepted.

 

Example 1:


Input: n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 2, target = 4
Output: 0.16666666666666666 
Explanation: The figure above shows the given graph. The frog starts at vertex 1, jumping with 1/3 probability to the vertex 2 after second 1 and then jumping with 1/2 probability to vertex 4 after second 2. Thus the probability for the frog is on the vertex 4 after 2 seconds is 1/3 * 1/2 = 1/6 = 0.16666666666666666. 
Example 2:


Input: n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 1, target = 7
Output: 0.3333333333333333
Explanation: The figure above shows the given graph. The frog starts at vertex 1, jumping with 1/3 = 0.3333333333333333 probability to the vertex 7 after second 1. 
 

Constraints:

1 <= n <= 100
edges.length == n - 1
edges[i].length == 2
1 <= ai, bi <= n
1 <= t <= 50
1 <= target <= n

class Solution
{
public:

    double bfs(int target, int t, vector<vector<int>> &adj, vector<int> &vis)
    {
        double res = 0;
        queue<pair<int, pair<int, double>>>q;
        q.push({1, {t, 1}});
        vis[1] = 1;
        while(!q.empty())
        {
            auto p = q.front();
            q.pop();
            int node = p.first;
            int time = p.second.first;
            double prob = p.second.second;
            int sz = 0;
            for(auto it : adj[node])
            {
                if(vis[it] == 0)
                    sz++;
            }
            if(node == target)
            {
                if(time == 0 || (time > 0 && sz == 0)) res += prob;
                continue;
            }
            for(auto x : adj[node])
            {
                if(vis[x] == 0)
                {
                    vis[x] = 1;
                    double x_prob = 1.0 / sz;
                    q.push({x, {time - 1, prob * x_prob}});
                }
            }
        }
        return res;
    }

    double frogPosition(int n, vector<vector<int>> &edges, int t, int target)
    {
        vector<vector<int>> adj(n + 1);
        vector<int> vis(n + 1);
        for(auto &v : edges)
        {
            adj[v[0]].push_back(v[1]);
            adj[v[1]].push_back(v[0]);
        }
        return bfs(target, t, adj, vis);
    }
};


// Source https://leetcode.com/problems/find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree/

Given two binary trees original and cloned and given a reference to a node target in the original tree.

The cloned tree is a copy of the original tree.

Return a reference to the same node in the cloned tree.

Note that you are not allowed to change any of the two trees or the target node and the answer must be a reference to a node in the cloned tree.

 

Example 1:


Input: tree = [7,4,3,null,null,6,19], target = 3
Output: 3
Explanation: In all examples the original and cloned trees are shown. The target node is a green node from the original tree. The answer is the yellow node from the cloned tree.
Example 2:


Input: tree = [7], target =  7
Output: 7
Example 3:


Input: tree = [8,null,6,null,5,null,4,null,3,null,2,null,1], target = 4
Output: 4
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
The values of the nodes of the tree are unique.
target node is a node from the original tree and is not null.

class Solution
{
public:
    bool recur(TreeNode *original, TreeNode *target, string &path)
    {
        if (!original) return false;
        if(original == target) return true;
        path.push_back('L');
        bool res = recur(original->left, target, path);
        if (res) return true;
        path.pop_back();
        path.push_back('R');
        res = recur(original->right, target, path);
        if (res) return true;
        path.pop_back();
        return false;
    }

    TreeNode *getTargetCopy(TreeNode *original, TreeNode *cloned, TreeNode *target)
    {
        string path;
        path.reserve(512);
        recur(original, target, path);
        TreeNode *node = cloned;
        int n = path.length();
        for (int i = 0; i < n; ++i)
        {
            if (path[i] == 'L') node = node->left;
            else node = node->right;
        }
        return node;
    };
};


// Source https://leetcode.com/problems/lucky-numbers-in-a-matrix/

Given an m x n matrix of distinct numbers, return all lucky numbers in the matrix in any order.

A lucky number is an element of the matrix such that it is the minimum element in its row and maximum in its column.

 

Example 1:

Input: matrix = [[3,7,8],[9,11,13],[15,16,17]]
Output: [15]
Explanation: 15 is the only lucky number since it is the minimum in its row and the maximum in its column.
Example 2:

Input: matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]
Output: [12]
Explanation: 12 is the only lucky number since it is the minimum in its row and the maximum in its column.
Example 3:

Input: matrix = [[7,8],[1,2]]
Output: [7]
Explanation: 7 is the only lucky number since it is the minimum in its row and the maximum in its column.
 

Constraints:

m == mat.length
n == mat[i].length
1 <= n, m <= 50
1 <= matrix[i][j] <= 105.
All elements in the matrix are distinct.

class Solution
{
public:
    vector<int> luckyNumbers(vector<vector<int>> &matrix)
    {
        int n = matrix.size(), m = matrix[0].size();
        vector<int> rowMin(n, INT_MAX);
        vector<int> colMax(m, INT_MIN);
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < m; j++)
            {
                rowMin[i] = min(rowMin[i], matrix[i][j]);
                colMax[j] = max(colMax[j], matrix[i][j]);
            }
        }
        vector<int> ans;
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < m; j++)
            {
                if (matrix[i][j] <= rowMin[i] && matrix[i][j] >= colMax[j])
                {
                    ans.push_back(matrix[i][j]);
                }
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/design-a-stack-with-increment-operation/

Design a stack which supports the following operations.

Implement the CustomStack class:

CustomStack(int maxSize) Initializes the object with maxSize which is the maximum number of elements in the stack or do nothing if the stack reached the maxSize.
void push(int x) Adds x to the top of the stack if the stack hasn't reached the maxSize.
int pop() Pops and returns the top of stack or -1 if the stack is empty.
void inc(int k, int val) Increments the bottom k elements of the stack by val. If there are less than k elements in the stack, just increment all the elements in the stack.
 

Example 1:

Input
["CustomStack","push","push","pop","push","push","push","increment","increment","pop","pop","pop","pop"]
[[3],[1],[2],[],[2],[3],[4],[5,100],[2,100],[],[],[],[]]
Output
[null,null,null,2,null,null,null,null,null,103,202,201,-1]
Explanation
CustomStack customStack = new CustomStack(3); // Stack is Empty []
customStack.push(1);                          // stack becomes [1]
customStack.push(2);                          // stack becomes [1, 2]
customStack.pop();                            // return 2 --> Return top of the stack 2, stack becomes [1]
customStack.push(2);                          // stack becomes [1, 2]
customStack.push(3);                          // stack becomes [1, 2, 3]
customStack.push(4);                          // stack still [1, 2, 3], Don't add another elements as size is 4
customStack.increment(5, 100);                // stack becomes [101, 102, 103]
customStack.increment(2, 100);                // stack becomes [201, 202, 103]
customStack.pop();                            // return 103 --> Return top of the stack 103, stack becomes [201, 202]
customStack.pop();                            // return 202 --> Return top of the stack 102, stack becomes [201]
customStack.pop();                            // return 201 --> Return top of the stack 101, stack becomes []
customStack.pop();                            // return -1 --> Stack is empty return -1.
 

Constraints:

1 <= maxSize <= 1000
1 <= x <= 1000
1 <= k <= 1000
0 <= val <= 100
At most 1000 calls will be made to each method of increment, push and pop each separately.

class CustomStack
{
public:
    stack<int> st;
    vector<int> increments;
    int size;

    CustomStack(int maxSize): size(maxSize), increments(maxSize, 0)
    {}

    void push(int x)
    {
        if(st.size() < size)
            st.push(x);
    }

    int pop()
    {
        if(st.size() > 0)
        {
            int total = st.size();
            int val = st.top() + increments[total - 1];
            if(total > 1)
            {
                increments[total - 2] += increments[total - 1];
            }
            increments[total - 1] = 0;
            st.pop();
            return val;
        }
        return -1;
    }

    void increment(int k, int val)
    {
        if(k > st.size())
            k = st.size();
        if(k > 0)
            increments[k - 1] += val;
    }
};


// Source https://leetcode.com/problems/balance-a-binary-search-tree/

Given the root of a binary search tree, return a balanced binary search tree with the same node values. If there is more than one answer, return any of them.

A binary search tree is balanced if the depth of the two subtrees of every node never differs by more than 1.

 

Example 1:


Input: root = [1,null,2,null,3,null,4,null,null]
Output: [2,1,3,null,null,null,4]
Explanation: This is not the only correct answer, [3,1,4,null,2] is also correct.
Example 2:


Input: root = [2,1,3]
Output: [2,1,3]
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
1 <= Node.val <= 105

class Solution
{
public:

    void inorder(TreeNode *root, vector<TreeNode *> &v)
    {
        if (!root) return;
        inorder(root->left, v);
        v.push_back(root);
        inorder(root->right, v);
    }

    TreeNode *build_tree(vector<TreeNode *> &v, int left, int right)
    {
        if(left > right) return nullptr;
        int mid = left + (right - left) / 2;
        TreeNode * root = v[mid];
        root-> left = build_tree(v, left, mid - 1);
        root-> right = build_tree(v, mid + 1, right);
        return root;
    }

    TreeNode *balanceBST(TreeNode *root)
    {
        vector<TreeNode *> v;
        v.reserve(2000);
        inorder(root, v);
        int n = v.size();
        return build_tree(v, 0, n - 1);
    }
};


// Source https://leetcode.com/problems/maximum-performance-of-a-team/

You are given two integers n and k and two integer arrays speed and efficiency both of length n. 
There are n engineers numbered from 1 to n. speed[i] and efficiency[i] represent the speed and efficiency of the ith engineer respectively.

Choose at most k different engineers out of the n engineers to form a team with the maximum performance.

The performance of a team is the sum of their engineers' speeds multiplied by the minimum efficiency among their engineers.

Return the maximum performance of this team. Since the answer can be a huge number, return it modulo 109 + 7.

 

Example 1:

Input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 2
Output: 60
Explanation: 
We have the maximum performance of the team by selecting engineer 2 (with speed=10 and efficiency=4) and engineer 5 (with speed=5 and efficiency=7). That is, performance = (10 + 5) * min(4, 7) = 60.
Example 2:

Input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 3
Output: 68
Explanation:
This is the same example as the first but k = 3. We can select engineer 1, engineer 2 and engineer 5 to get the maximum performance of the team. That is, performance = (2 + 10 + 5) * min(5, 4, 7) = 68.
Example 3:

Input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 4
Output: 72
 

Constraints:

1 <= k <= n <= 105
speed.length == n
efficiency.length == n
1 <= speed[i] <= 105
1 <= efficiency[i] <= 108

class Solution
{
public:
    int maxPerformance(int n, vector<int> &speed, vector<int> &efficiency, int k)
    {
        vector<pair<int, int>> vec(n);
        for(int i = 0; i < n; i++)
        {
            vec[i] = {efficiency[i], i};
        }
        sort(vec.begin(), vec.end(), greater<pair<int, int>>());
        priority_queue<int, vector<int>, greater<int>> pq;
        unsigned long long res = 0, sum_speed = 0;
        for(auto [val, idx] : vec)
        {
            sum_speed += speed[idx];
            pq.push(speed[idx]);
            if(pq.size() > k)
            {
                sum_speed -= pq.top();
                pq.pop();
            }
            res = max(res, (sum_speed * val));
        }
        return res % 1000000007;
    }
};


// Source https://leetcode.com/problems/find-the-distance-value-between-two-arrays/

Given two integer arrays arr1 and arr2, and the integer d, return the distance value between the two arrays.

The distance value is defined as the number of elements arr1[i] such that there is not any element arr2[j] where |arr1[i]-arr2[j]| <= d.

 

Example 1:

Input: arr1 = [4,5,8], arr2 = [10,9,1,8], d = 2
Output: 2
Explanation: 
For arr1[0]=4 we have: 
|4-10|=6 > d=2 
|4-9|=5 > d=2 
|4-1|=3 > d=2 
|4-8|=4 > d=2 
For arr1[1]=5 we have: 
|5-10|=5 > d=2 
|5-9|=4 > d=2 
|5-1|=4 > d=2 
|5-8|=3 > d=2
For arr1[2]=8 we have:
|8-10|=2 <= d=2
|8-9|=1 <= d=2
|8-1|=7 > d=2
|8-8|=0 <= d=2
Example 2:

Input: arr1 = [1,4,2,3], arr2 = [-4,-3,6,10,20,30], d = 3
Output: 2
Example 3:

Input: arr1 = [2,1,100,3], arr2 = [-5,-2,10,-3,7], d = 6
Output: 1
 

Constraints:

1 <= arr1.length, arr2.length <= 500
-1000 <= arr1[i], arr2[j] <= 1000
0 <= d <= 100

class Solution
{
public:

    int findTheDistanceValue(vector<int> &arr1, vector<int> &arr2, int d)
    {
        int res = 0;
        sort(arr2.begin(), arr2.end());
        for(auto val : arr1)
        {
            auto itr1 = lower_bound(arr2.begin(), arr2.end(), val - d);
            auto itr2 = upper_bound(arr2.begin(), arr2.end(), val + d);
            if (itr1 == itr2) ++res;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/cinema-seat-allocation/

A cinema has n rows of seats, numbered from 1 to n and there are ten seats in each row, labelled from 1 to 10 as shown in the figure above.

1 2 3	4 5 6 7	8 9 10
1 2 3	4 5 6 7	8 9 10
1 2 3	4 5 6 7	8 9 10
...
1 2 3	4 5 6 7	8 9 10

Given the array reservedSeats containing the numbers of seats already reserved, for example, reservedSeats[i] = [3,8] means the seat located in row 3 and labelled with 8 is already reserved.

Return the maximum number of four-person groups you can assign on the cinema seats. A four-person group occupies four adjacent seats in one single row. 
Seats across an aisle (such as [3,3] and [3,4]) are not considered to be adjacent, but there is an exceptional case on which an aisle split a four-person group, 
in that case, the aisle split a four-person group in the middle, which means to have two people on each side.

 

Example 1:



Input: n = 3, reservedSeats = [[1,2],[1,3],[1,8],[2,6],[3,1],[3,10]]
Output: 4
Explanation: The figure above shows the optimal allocation for four groups, where seats mark with blue are already reserved and contiguous seats mark with orange are for one group.
Example 2:

Input: n = 2, reservedSeats = [[2,1],[1,8],[2,6]]
Output: 2
Example 3:

Input: n = 4, reservedSeats = [[4,3],[1,4],[4,6],[1,7]]
Output: 4
 

Constraints:

1 <= n <= 10^9
1 <= reservedSeats.length <= min(10*n, 10^4)
reservedSeats[i].length == 2
1 <= reservedSeats[i][0] <= n
1 <= reservedSeats[i][1] <= 10
All reservedSeats[i] are distinct.

class Solution
{
public:
    int maxNumberOfFamilies(int n, vector<vector<int>> &reservedSeats)
    {
        int res = 0;
        unordered_map<int, int> rows;
        for (auto &reserved : reservedSeats)
        {
            rows[reserved[0]] |= (1 << (reserved[1] - 1));
        }
        for (auto [row, seats] : rows)
        {
            bool a = (~seats & 0b0000011110) == 0b0000011110;
            bool b = (~seats & 0b0001111000) == 0b0001111000;
            bool c = (~seats & 0b0111100000) == 0b0111100000;
            if (a && c) res += 2;
            else if (a || b || c) ++res;
        }
        res += 2 * (n - rows.size());
        return res;
    }
};


// Source https://leetcode.com/problems/sort-integers-by-the-power-value/

The power of an integer x is defined as the number of steps needed to transform x into 1 using the following steps:

if x is even then x = x / 2
if x is odd then x = 3 * x + 1
For example, the power of x = 3 is 7 because 3 needs 7 steps to become 1 (3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1).

Given three integers lo, hi and k. The task is to sort all integers in the interval [lo, hi] by the power value in ascending order, 
if two or more integers have the same power value sort them by ascending order.

Return the kth integer in the range [lo, hi] sorted by the power value.

Notice that for any integer x (lo <= x <= hi) it is guaranteed that x will transform into 1 using these steps and that the power of x is will fit in a 32-bit signed integer.

 

Example 1:

Input: lo = 12, hi = 15, k = 2
Output: 13
Explanation: The power of 12 is 9 (12 --> 6 --> 3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1)
The power of 13 is 9
The power of 14 is 17
The power of 15 is 17
The interval sorted by the power value [12,13,14,15]. For k = 2 answer is the second element which is 13.
Notice that 12 and 13 have the same power value and we sorted them in ascending order. Same for 14 and 15.
Example 2:

Input: lo = 7, hi = 11, k = 4
Output: 7
Explanation: The power array corresponding to the interval [7, 8, 9, 10, 11] is [16, 3, 19, 6, 14].
The interval sorted by power is [8, 10, 11, 7, 9].
The fourth number in the sorted array is 7.
 

Constraints:

1 <= lo <= hi <= 1000
1 <= k <= hi - lo + 1

class Solution
{
public:
    int dp[100001];

    int calc(int x)
    {
        if(x == 1) return 0;
        if(x <= 100000 && dp[x] != -1 ) return dp[x];
        int res = 0;
        if(x % 2) res = calc(3 * x + 1) + 1;
        else res = calc(x / 2) + 1;
        if (x <= 100000) dp[x] = res;
        return res;
    }

    int getKth(int lo, int hi, int k)
    {
        memset(dp, -1, sizeof(dp));
        priority_queue<pair<int, int>>pq;
        for(int i = lo; i <= hi; i++)
        {
            pq.push({calc(i), i});
            if(pq.size() > k) pq.pop();
        }
        return pq.top().second;
    }
};


// Source https://leetcode.com/problems/pizza-with-3n-slices/

There is a pizza with 3n slices of varying size, you and your friends will take slices of pizza as follows:

You will pick any pizza slice.
Your friend Alice will pick the next slice in the anti-clockwise direction of your pick.
Your friend Bob will pick the next slice in the clockwise direction of your pick.
Repeat until there are no more slices of pizzas.
Given an integer array slices that represent the sizes of the pizza slices in a clockwise direction, return the maximum possible sum of slice sizes that you can pick.

 

Example 1:


Input: slices = [1,2,3,4,5,6]
Output: 10
Explanation: Pick pizza slice of size 4, Alice and Bob will pick slices with size 3 and 5 respectively. Then Pick slices with size 6, finally Alice and Bob will pick slice of size 2 and 1 respectively. Total = 4 + 6.
Example 2:


Input: slices = [8,9,8,6,1,1]
Output: 16
Explanation: Pick pizza slice of size 8 in each turn. If you pick slice with size 9 your partners will pick slices of size 8.
 

Constraints:

3 * n == slices.length
1 <= slices.length <= 500
1 <= slices[i] <= 1000

class Solution
{
public:
    int n;
    int dp[501][170];

    int get(int i, int cnt, vector<int> &slices)
    {
        if(i >= n || cnt == 0) return 0;
        if(dp[i][cnt] != -1) return dp[i][cnt];
        int res1 = get(i + 1, cnt, slices);
        int res2 = slices[i] + get(i + 2, cnt - 1, slices);
        return dp[i][cnt] = max(res1, res2);
    }

    int maxSizeSlices(vector<int> &slices)
    {
        n = slices.size();
        memset(dp, -1, sizeof(dp));
        int p1 = get(1, n / 3, slices);
        memset(dp, -1, sizeof(dp));
        slices[n - 1] = 0;
        int p2 = get(0, n / 3, slices);
        return max(p1, p2);
    }
};


// Source https://leetcode.com/problems/create-target-array-in-the-given-order/

Given two arrays of integers nums and index. Your task is to create target array under the following rules:

Initially target array is empty.
From left to right read nums[i] and index[i], insert at index index[i] the value nums[i] in target array.
Repeat the previous step until there are no elements to read in nums and index.
Return the target array.

It is guaranteed that the insertion operations will be valid.

 

Example 1:

Input: nums = [0,1,2,3,4], index = [0,1,2,2,1]
Output: [0,4,1,3,2]
Explanation:
nums       index     target
0            0        [0]
1            1        [0,1]
2            2        [0,1,2]
3            2        [0,1,3,2]
4            1        [0,4,1,3,2]
Example 2:

Input: nums = [1,2,3,4,0], index = [0,1,2,3,0]
Output: [0,1,2,3,4]
Explanation:
nums       index     target
1            0        [1]
2            1        [1,2]
3            2        [1,2,3]
4            3        [1,2,3,4]
0            0        [0,1,2,3,4]
Example 3:

Input: nums = [1], index = [0]
Output: [1]
 

Constraints:

1 <= nums.length, index.length <= 100
nums.length == index.length
0 <= nums[i] <= 100
0 <= index[i] <= i

class Solution
{
public:
    vector<int> createTargetArray(vector<int> &nums, vector<int> &index)
    {
        int n = index.size();
        vector <int> target;
        for(int i = 0; i < n; i++)
        {
            target.insert(target.begin() + index[i], nums[i]);
        }
        return target;
    }
};


// Source https://leetcode.com/problems/four-divisors/

Given an integer array nums, return the sum of divisors of the integers in that array that have exactly four divisors. If there is no such integer in the array, return 0.

 

Example 1:

Input: nums = [21,4,7]
Output: 32
Explanation: 
21 has 4 divisors: 1, 3, 7, 21
4 has 3 divisors: 1, 2, 4
7 has 2 divisors: 1, 7
The answer is the sum of divisors of 21 only.
Example 2:

Input: nums = [21,21]
Output: 64
Example 3:

Input: nums = [1,2,3,4,5]
Output: 0
 

Constraints:

1 <= nums.length <= 104
1 <= nums[i] <= 105

class Solution
{
public:

    int sumFourDivisors(vector<int> &nums)
    {
        int finalSum = 0;
        for(int n : nums)
        {
            int sum = 0, div = 0;
            for(int i = 1; i * i <= n; i++)
            {
                if(n % i == 0)
                {
                    if(n / i == i)
                    {
                        div++;
                        sum += i;
                    }
                    else
                    {
                        div += 2;
                        sum += i + (n / i);
                    }
                }
                if(div > 4) break;
            }
            if(div == 4)
                finalSum += sum;
        }
        return finalSum;
    }
};


// Source https://leetcode.com/problems/check-if-there-is-a-valid-path-in-a-grid/

You are given an m x n grid. Each cell of grid represents a street. The street of grid[i][j] can be:

1 which means a street connecting the left cell and the right cell.
2 which means a street connecting the upper cell and the lower cell.
3 which means a street connecting the left cell and the lower cell.
4 which means a street connecting the right cell and the lower cell.
5 which means a street connecting the left cell and the upper cell.
6 which means a street connecting the right cell and the upper cell.

You will initially start at the street of the upper-left cell (0, 0). A valid path in the grid is a path that starts from the upper left cell (0, 0) and ends at the bottom-right cell (m - 1, n - 1). 
The path should only follow the streets.

Notice that you are not allowed to change any street.

Return true if there is a valid path in the grid or false otherwise.

 

Example 1:


Input: grid = [[2,4,3],[6,5,2]]
Output: true
Explanation: As shown you can start at cell (0, 0) and visit all the cells of the grid to reach (m - 1, n - 1).
Example 2:


Input: grid = [[1,2,1],[1,2,1]]
Output: false
Explanation: As shown you the street at cell (0, 0) is not connected with any street of any other cell and you will get stuck at cell (0, 0)
Example 3:

Input: grid = [[1,1,2]]
Output: false
Explanation: You will get stuck at cell (0, 1) and you cannot reach cell (0, 2).
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 300
1 <= grid[i][j] <= 6

class Solution
{
public:
    int n, m;
    vector<pair<int, int>> dirsAll[7];

    bool dfs(vector<vector<int>> &grid, int r, int c, vector<bool> &vis)
    {
        if(r == n - 1 && c == m - 1) return true;
        vis[r * m + c] = true;
        int type = grid[r][c];
        for (int k = 0; k < 2; k++)
        {
            int u = r + dirsAll[type][k].first, v = c + dirsAll[type][k].second;
            if (u >= 0 && u < n && v >= 0 && v < m && !vis[u * m + v])
            {
                int z = grid[u][v];
                int x1 = u + dirsAll[z][0].first;
                int y1 = v + dirsAll[z][0].second;
                int x2 = u + dirsAll[z][1].first;
                int y2 = v + dirsAll[z][1].second;
                if((r == x1 && c == y1) || (r == x2 && c == y2))
                {
                    if (dfs(grid, u, v, vis)) return true;
                }
            }
        }
        vis[r * m + c] = false;        
        return false;
    }

    bool hasValidPath(vector<vector<int>> &grid)
    {
        n = grid.size();
        m = grid[0].size();
        dirsAll[1] = {{0, -1}, {0, 1}};   // 向左 或 向右
        dirsAll[2] = {{-1, 0}, {1, 0}};   // 向上 或 向下
        dirsAll[3] = {{0, -1}, {1, 0}};   // 向左 或 向下
        dirsAll[4] = {{0, 1}, {1, 0}};    // 向右 或 向下
        dirsAll[5] = {{0, -1}, {-1, 0}}; // 向左 或 向上
        dirsAll[6] = {{0, 1}, {-1, 0}};  // 向右 或 向上
        vector<bool> vis(n * m);
        return dfs(grid, 0, 0, vis);
    }
};


// Source https://leetcode.com/problems/longest-happy-prefix/

A string is called a happy prefix if is a non-empty prefix which is also a suffix (excluding itself).

Given a string s, return the longest happy prefix of s. Return an empty string "" if no such prefix exists.

 

Example 1:

Input: s = "level"
Output: "l"
Explanation: s contains 4 prefix excluding itself ("l", "le", "lev", "leve"), and suffix ("l", "el", "vel", "evel"). The largest prefix which is also suffix is given by "l".
Example 2:

Input: s = "ababab"
Output: "abab"
Explanation: "abab" is the largest prefix which is also suffix. They can overlap in the original string.
 

Constraints:

1 <= s.length <= 105
s contains only lowercase English letters.

class Solution
{
public:
    string longestPrefix(string s)
    {
        int n = s.size();
        vector<int> v(n, 0);
        for(int i = 1, j = 0; i < n;)
        {
            if(s[j] == s[i])
            {
                v[i] = j + 1;
                j++;
                i++;
            }
            else
            {
                if(j > 0) j = v[j - 1];
                else
                {
                    i++;
                }
            }
        }
        int x = n - v[n - 1];
        return s.substr(x);
    }
};


// Source https://leetcode.com/problems/find-lucky-integer-in-an-array/

Given an array of integers arr, a lucky integer is an integer that has a frequency in the array equal to its value.

Return the largest lucky integer in the array. If there is no lucky integer return -1.

 

Example 1:

Input: arr = [2,2,3,4]
Output: 2
Explanation: The only lucky number in the array is 2 because frequency[2] == 2.
Example 2:

Input: arr = [1,2,2,3,3,3]
Output: 3
Explanation: 1, 2 and 3 are all lucky numbers, return the largest of them.
Example 3:

Input: arr = [2,2,2,3,3]
Output: -1
Explanation: There are no lucky numbers in the array.
 

Constraints:

1 <= arr.length <= 500
1 <= arr[i] <= 500

class Solution
{
public:
    int findLucky(vector<int> &arr)
    {
        unordered_map<int, int> freq;
        for(int x : arr) freq[x]++;
        int res = -1;
        for(auto [f, s] : freq)
        {
            if(f == s) res = max(res, f);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/count-number-of-teams/

There are n soldiers standing in a line. Each soldier is assigned a unique rating value.

You have to form a team of 3 soldiers amongst them under the following rules:

Choose 3 soldiers with index (i, j, k) with rating (rating[i], rating[j], rating[k]).
A team is valid if: (rating[i] < rating[j] < rating[k]) or (rating[i] > rating[j] > rating[k]) where (0 <= i < j < k < n).
Return the number of teams you can form given the conditions. (soldiers can be part of multiple teams).

 

Example 1:

Input: rating = [2,5,3,4,1]
Output: 3
Explanation: We can form three teams given the conditions. (2,3,4), (5,4,1), (5,3,1). 
Example 2:

Input: rating = [2,1,3]
Output: 0
Explanation: We can't form any team given the conditions.
Example 3:

Input: rating = [1,2,3,4]
Output: 4
 

Constraints:

n == rating.length
3 <= n <= 1000
1 <= rating[i] <= 105
All the integers in rating are unique.

class Solution
{
public:
    const int N = 100000;
    int BIT[100010];

    int lowbit(int x)
    {
        return x & -x;
    }

    void add(int x, int k)
    {
        for (int i = x; i <= N; i += lowbit(i)) BIT[i] += k;
    }

    int sum(int x)
    {
        int res = 0;
        for (int i = x; i > 0; i -= lowbit(i)) res += BIT[i];
        return res;
    }

    int numTeams(vector<int> &rating)
    {
        int n = rating.size();
        int left_great[1010], left_small[1010];
        memset(BIT, 0, sizeof(BIT));
        for (int i = 0; i < n; ++ i)
        {
            int y = rating[i];
            left_great[i] = sum(N) - sum(y);
            left_small[i] = sum(y - 1);
            add(y, 1);
        }
        memset(BIT, 0, sizeof(BIT));
        int res = 0;
        for (int i = n - 1; i >= 0; -- i)
        {
            int y = rating[i];
            res += left_great[i] * sum(y - 1);
            res += left_small[i] * (sum(N) - sum(y));
            add(y, 1);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/design-underground-system/

An underground railway system is keeping track of customer travel times between different stations. 
They are using this data to calculate the average time it takes to travel from one station to another.

Implement the UndergroundSystem class:

void checkIn(int id, string stationName, int t)
A customer with a card ID equal to id, checks in at the station stationName at time t.
A customer can only be checked into one place at a time.
void checkOut(int id, string stationName, int t)
A customer with a card ID equal to id, checks out from the station stationName at time t.
double getAverageTime(string startStation, string endStation)
Returns the average time it takes to travel from startStation to endStation.
The average time is computed from all the previous traveling times from startStation to endStation that happened directly, 
meaning a check in at startStation followed by a check out from endStation.
The time it takes to travel from startStation to endStation may be different from the time it takes to travel from endStation to startStation.
There will be at least one customer that has traveled from startStation to endStation before getAverageTime is called.
You may assume all calls to the checkIn and checkOut methods are consistent. If a customer checks in at time t1 then checks out at time t2, then t1 < t2. 
All events happen in chronological order.

 

Example 1:

Input
["UndergroundSystem","checkIn","checkIn","checkIn","checkOut","checkOut","checkOut","getAverageTime","getAverageTime","checkIn","getAverageTime","checkOut","getAverageTime"]
[[],[45,"Leyton",3],[32,"Paradise",8],[27,"Leyton",10],[45,"Waterloo",15],[27,"Waterloo",20],[32,"Cambridge",22],["Paradise","Cambridge"],["Leyton","Waterloo"],[10,"Leyton",24],["Leyton","Waterloo"],[10,"Waterloo",38],["Leyton","Waterloo"]]

Output
[null,null,null,null,null,null,null,14.00000,11.00000,null,11.00000,null,12.00000]

Explanation
UndergroundSystem undergroundSystem = new UndergroundSystem();
undergroundSystem.checkIn(45, "Leyton", 3);
undergroundSystem.checkIn(32, "Paradise", 8);
undergroundSystem.checkIn(27, "Leyton", 10);
undergroundSystem.checkOut(45, "Waterloo", 15);  // Customer 45 "Leyton" -> "Waterloo" in 15-3 = 12
undergroundSystem.checkOut(27, "Waterloo", 20);  // Customer 27 "Leyton" -> "Waterloo" in 20-10 = 10
undergroundSystem.checkOut(32, "Cambridge", 22); // Customer 32 "Paradise" -> "Cambridge" in 22-8 = 14
undergroundSystem.getAverageTime("Paradise", "Cambridge"); // return 14.00000. One trip "Paradise" -> "Cambridge", (14) / 1 = 14
undergroundSystem.getAverageTime("Leyton", "Waterloo");    // return 11.00000. Two trips "Leyton" -> "Waterloo", (10 + 12) / 2 = 11
undergroundSystem.checkIn(10, "Leyton", 24);
undergroundSystem.getAverageTime("Leyton", "Waterloo");    // return 11.00000
undergroundSystem.checkOut(10, "Waterloo", 38);  // Customer 10 "Leyton" -> "Waterloo" in 38-24 = 14
undergroundSystem.getAverageTime("Leyton", "Waterloo");    // return 12.00000. Three trips "Leyton" -> "Waterloo", (10 + 12 + 14) / 3 = 12
Example 2:

Input
["UndergroundSystem","checkIn","checkOut","getAverageTime","checkIn","checkOut","getAverageTime","checkIn","checkOut","getAverageTime"]
[[],[10,"Leyton",3],[10,"Paradise",8],["Leyton","Paradise"],[5,"Leyton",10],[5,"Paradise",16],["Leyton","Paradise"],[2,"Leyton",21],[2,"Paradise",30],["Leyton","Paradise"]]

Output
[null,null,null,5.00000,null,null,5.50000,null,null,6.66667]

Explanation
UndergroundSystem undergroundSystem = new UndergroundSystem();
undergroundSystem.checkIn(10, "Leyton", 3);
undergroundSystem.checkOut(10, "Paradise", 8); // Customer 10 "Leyton" -> "Paradise" in 8-3 = 5
undergroundSystem.getAverageTime("Leyton", "Paradise"); // return 5.00000, (5) / 1 = 5
undergroundSystem.checkIn(5, "Leyton", 10);
undergroundSystem.checkOut(5, "Paradise", 16); // Customer 5 "Leyton" -> "Paradise" in 16-10 = 6
undergroundSystem.getAverageTime("Leyton", "Paradise"); // return 5.50000, (5 + 6) / 2 = 5.5
undergroundSystem.checkIn(2, "Leyton", 21);
undergroundSystem.checkOut(2, "Paradise", 30); // Customer 2 "Leyton" -> "Paradise" in 30-21 = 9
undergroundSystem.getAverageTime("Leyton", "Paradise"); // return 6.66667, (5 + 6 + 9) / 3 = 6.66667
 

Constraints:

1 <= id, t <= 106
1 <= stationName.length, startStation.length, endStation.length <= 10
All strings consist of uppercase and lowercase English letters and digits.
There will be at most 2 * 104 calls in total to checkIn, checkOut, and getAverageTime.
Answers within 10-5 of the actual value will be accepted.

class UndergroundSystem
{
public:
    unordered_map<int, pair<string, int>> traveller;
    unordered_map<string, pair<int, int>> times;

    UndergroundSystem()
    {
    }

    void checkIn(int id, string stationName, int t)
    {
        traveller[id] = {stationName, t};
    }

    void checkOut(int id, string stationName, int t)
    {
        auto &p = traveller[id];
        string str = p.first + " " + stationName;
        if(times.find(str) != times.end())
        {
            auto &tp = times[str];
            tp.first += t - p.second;
            tp.second++;
        }
        else
        {
            times[str] = {t - p.second, 1};
        }
        traveller.erase(id);
    }

    double getAverageTime(string startStation, string endStation)
    {
        string str = startStation + " " + endStation;
        auto p = times[str];
        return double(p.first) / p.second;
    }
};


// Source https://leetcode.com/problems/find-all-good-strings/

Given the strings s1 and s2 of size n and the string evil, return the number of good strings.

A good string has size n, it is alphabetically greater than or equal to s1, it is alphabetically smaller than or equal to s2, and it does not contain the string evil as a substring. 
Since the answer can be a huge number, return this modulo 109 + 7.

 

Example 1:

Input: n = 2, s1 = "aa", s2 = "da", evil = "b"
Output: 51 
Explanation: There are 25 good strings starting with 'a': "aa","ac","ad",...,"az". Then there are 25 good strings starting with 'c': "ca","cc","cd",...,"cz" and finally there is one good string starting with 'd': "da". 
Example 2:

Input: n = 8, s1 = "leetcode", s2 = "leetgoes", evil = "leet"
Output: 0 
Explanation: All strings greater than or equal to s1 and smaller than or equal to s2 start with the prefix "leet", therefore, there is not any good string.
Example 3:

Input: n = 2, s1 = "gx", s2 = "gz", evil = "x"
Output: 2
 

Constraints:

s1.length == n
s2.length == n
s1 <= s2
1 <= n <= 500
1 <= evil.length <= 50
All strings consist of lowercase English letters.

class Solution
{
public:
    int lps[51];
    int m, n;
    string s1, s2, evil;
    int dp[501][51][2][2];
    const int mod = 1000000007;

    int solve(int i, int matched, int left, int right)
    {
        if(matched == m) return 0;
        if(i == n) return 1;
        if(dp[i][matched][left][right] != -1) return dp[i][matched][left][right];
        char from = left ? s1[i] : 'a';
        char to = right ? s2[i] : 'z';
        int res = 0;
        for(char c = from; c <= to; c++)
        {
            int j = matched;
            while(j > 0 && evil[j] != c) j = lps[j - 1];
            if(c == evil[j]) j++;
            res += solve(i + 1, j, left && (c == from), right && (c == to));
            res %= mod;
        }
        return dp[i][matched][left][right] = res;
    }

    int findGoodStrings(int n, string s1, string s2, string evil)
    {
        this->n = n;
        this->s1 = s1, this->s2 = s2, this->evil = evil;
        m = evil.size();
        memset(dp, -1, sizeof(dp));
        memset(lps, 0, sizeof(lps));
        int i = 1, j = 0;
        while(i < m)
        {
            if(evil[i] == evil[j])
            {
                lps[i] = j + 1;
                ++i;
                ++j;
            }
            else
            {
                if(j > 0) j = lps[j - 1];
                else i++;
            }
        }
        return solve(0, 0, 1, 1);
    }
};


// Source https://leetcode.com/problems/count-largest-group/

You are given an integer n.

Each number from 1 to n is grouped according to the sum of its digits.

Return the number of groups that have the largest size.

 

Example 1:

Input: n = 13
Output: 4
Explanation: There are 9 groups in total, they are grouped according sum of its digits of numbers from 1 to 13:
[1,10], [2,11], [3,12], [4,13], [5], [6], [7], [8], [9].
There are 4 groups with largest size.
Example 2:

Input: n = 2
Output: 2
Explanation: There are 2 groups [1], [2] of size 1.
 

Constraints:

1 <= n <= 104

class Solution
{
public:

    int sum_of_digits(int n)
    {
        int s = 0;
        while(n > 0)
        {
            s += (n % 10);
            n /= 10;
        }
        return s;
    }

    int countLargestGroup(int n)
    {
        unordered_map<int, int> mp;
        for(int i = 1; i <= n; i++)
        {
            mp[sum_of_digits(i)]++;
        }
        int max_cnt = INT_MIN;
        for(auto [sum, cnt] : mp)
        {
            max_cnt = max(max_cnt, cnt);
        }
        int res = 0;
        for(auto [sum, cnt] : mp)
        {
            if(cnt == max_cnt) ++res;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/construct-k-palindrome-strings/

Given a string s and an integer k, return true if you can use all the characters in s to construct k palindrome strings or false otherwise.

 

Example 1:

Input: s = "annabelle", k = 2
Output: true
Explanation: You can construct two palindromes using all characters in s.
Some possible constructions "anna" + "elble", "anbna" + "elle", "anellena" + "b"
Example 2:

Input: s = "leetcode", k = 3
Output: false
Explanation: It is impossible to construct 3 palindromes using all the characters of s.
Example 3:

Input: s = "true", k = 4
Output: true
Explanation: The only possible solution is to put each character in a separate string.
 

Constraints:

1 <= s.length <= 105
s consists of lowercase English letters.
1 <= k <= 105

class Solution
{
public:
    bool canConstruct(string s, int k)
    {
        int n = s.size();
        if(k > n) return false;
        unordered_map<char, int>mp;
        for(auto c : s) mp[c]++;
        int odd = 0;
        for(auto p : mp)
        {
            if(p.second % 2)
            {
                odd++;
            }
        }
        if(k < odd)
        {
            return false;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/circle-and-rectangle-overlapping/

You are given a circle represented as (radius, xCenter, yCenter) and an axis-aligned rectangle represented as (x1, y1, x2, y2), 
where (x1, y1) are the coordinates of the bottom-left corner, and (x2, y2) are the coordinates of the top-right corner of the rectangle.

Return true if the circle and rectangle are overlapped otherwise return false. In other words, check if there is any point (xi, yi) that belongs to the circle and the rectangle at the same time.

 

Example 1:


Input: radius = 1, xCenter = 0, yCenter = 0, x1 = 1, y1 = -1, x2 = 3, y2 = 1
Output: true
Explanation: Circle and rectangle share the point (1,0).
Example 2:

Input: radius = 1, xCenter = 1, yCenter = 1, x1 = 1, y1 = -3, x2 = 2, y2 = -1
Output: false
Example 3:


Input: radius = 1, xCenter = 0, yCenter = 0, x1 = -1, y1 = 0, x2 = 0, y2 = 1
Output: true
 

Constraints:

1 <= radius <= 2000
-104 <= xCenter, yCenter <= 104
-104 <= x1 < x2 <= 104
-104 <= y1 < y2 <= 104

class Solution
{
public:
    bool checkOverlap(int radius, int x_center, int y_center, int x1, int y1, int x2, int y2)
    {
        int xclose, yclose;
        if(x_center < x1) xclose = x1;
        else if(x_center > x2) xclose = x2;
        else xclose = x_center;

        if(y_center < y1) yclose = y1;
        else if(y_center > y2) yclose = y2;
        else yclose = y_center;

        return (x_center - xclose) * (x_center - xclose) + (y_center - yclose) * (y_center - yclose) <= radius * radius;
    }
};


// Source https://leetcode.com/problems/reducing-dishes/

A chef has collected data on the satisfaction level of his n dishes. Chef can cook any dish in 1 unit of time.

Like-time coefficient of a dish is defined as the time taken to cook that dish including previous dishes multiplied by its satisfaction level i.e. time[i] * satisfaction[i].

Return the maximum sum of like-time coefficient that the chef can obtain after dishes preparation.

Dishes can be prepared in any order and the chef can discard some dishes to get this maximum value.

 

Example 1:

Input: satisfaction = [-1,-8,0,5,-9]
Output: 14
Explanation: After Removing the second and last dish, the maximum total like-time coefficient will be equal to (-1*1 + 0*2 + 5*3 = 14).
Each dish is prepared in one unit of time.
Example 2:

Input: satisfaction = [4,3,2]
Output: 20
Explanation: Dishes can be prepared in any order, (2*1 + 3*2 + 4*3 = 20)
Example 3:

Input: satisfaction = [-1,-4,-5]
Output: 0
Explanation: People do not like the dishes. No dish is prepared.
 

Constraints:

n == satisfaction.length
1 <= n <= 500
-1000 <= satisfaction[i] <= 1000

class Solution
{
public:
    int maxSatisfaction(vector<int> &satisfaction)
    {
        vector<int> pos;
        vector<int> neg;

        for(auto x : satisfaction)
        {
            if(x < 0)
            {
                neg.push_back(x);
            }
            else
            {
                pos.push_back(x);
            }
        }

        sort(neg.begin(), neg.end(), greater<int>());
        sort(pos.begin(), pos.end());

        int curr = 0, score = 0;

        for(int i = 0; i < pos.size(); i++)
        {
            curr += pos[i];
            score += (i + 1) * pos[i];
        }

        for(int i = 0; i < neg.size(); i++)
        {
            if(neg[i] + curr > 0)
            {
                score += (neg[i] + curr);
                curr += neg[i];
            }
            else
            {
                break;
            }
        }

        return score;
    }
};


// Source https://leetcode.com/problems/minimum-subsequence-in-non-increasing-order/

Given the array nums, obtain a subsequence of the array whose sum of elements is strictly greater than the sum of the non included elements in such subsequence. 

If there are multiple solutions, return the subsequence with minimum size and if there still exist multiple solutions, return the subsequence with the maximum total sum of all its elements. 
A subsequence of an array can be obtained by erasing some (possibly zero) elements from the array. 

Note that the solution with the given constraints is guaranteed to be unique. Also return the answer sorted in non-increasing order.

 

Example 1:

Input: nums = [4,3,10,9,8]
Output: [10,9] 
Explanation: The subsequences [10,9] and [10,8] are minimal such that the sum of their elements is strictly greater than the sum of elements not included, however, the subsequence [10,9] has the maximum total sum of its elements. 
Example 2:

Input: nums = [4,4,7,6,7]
Output: [7,7,6] 
Explanation: The subsequence [7,7] has the sum of its elements equal to 14 which is not strictly greater than the sum of elements not included (14 = 4 + 4 + 6). Therefore, the subsequence [7,6,7] is the minimal satisfying the conditions. Note the subsequence has to returned in non-decreasing order.  
Example 3:

Input: nums = [6]
Output: [6]
 

Constraints:

1 <= nums.length <= 500
1 <= nums[i] <= 100

class Solution
{
public:
    vector<int> minSubsequence(vector<int> &nums)
    {
        int n = nums.size();
        if(n == 1) return  nums;
        int sum = 0;
        for(int i = 0; i < n; i++)
        {
            sum += nums[i];
        }
        sort(nums.begin(), nums.end());
        vector<int> v;
        int temp = 0;
        for(int i = n - 1; i >= 0; i--)
        {
            temp += nums[i];
            if((2 * temp) > sum)
            {
                v.push_back(nums[i]);
                return v;
            }
            else
            {
                v.push_back(nums[i]);
            }
        }
        return {};
    }
};


// Source https://leetcode.com/problems/number-of-steps-to-reduce-a-number-in-binary-representation-to-one/

Given the binary representation of an integer as a string s, return the number of steps to reduce it to 1 under the following rules:

If the current number is even, you have to divide it by 2.

If the current number is odd, you have to add 1 to it.

It is guaranteed that you can always reach one for all test cases.

 

Example 1:

Input: s = "1101"
Output: 6
Explanation: "1101" corressponds to number 13 in their decimal representation.
Step 1) 13 is odd, add 1 and obtain 14. 
Step 2) 14 is even, divide by 2 and obtain 7.
Step 3) 7 is odd, add 1 and obtain 8.
Step 4) 8 is even, divide by 2 and obtain 4.  
Step 5) 4 is even, divide by 2 and obtain 2. 
Step 6) 2 is even, divide by 2 and obtain 1.  
Example 2:

Input: s = "10"
Output: 1
Explanation: "10" corressponds to number 2 in their decimal representation.
Step 1) 2 is even, divide by 2 and obtain 1.  
Example 3:

Input: s = "1"
Output: 0
 

Constraints:

1 <= s.length <= 500
s consists of characters '0' or '1'
s[0] == '1'

class Solution
{
public:
    int numSteps(string s)
    {
        bitset<512>num(s);
        int count = 0;
        while(num != 1)
        {
            if(num[0] == 0) num = num >> 1;
            else
            {
                for(int i = 0; i < 512; i++)
                {
                    if(num[i] == 0)
                    {
                        num[i] = 1;
                        break;
                    }
                    else
                        num[i] = 0;
                }
            }
            count++;
        }
        return count;
    }
};


// Source https://leetcode.com/problems/longest-happy-string/

A string s is called happy if it satisfies the following conditions:

s only contains the letters 'a', 'b', and 'c'.
s does not contain any of "aaa", "bbb", or "ccc" as a substring.
s contains at most a occurrences of the letter 'a'.
s contains at most b occurrences of the letter 'b'.
s contains at most c occurrences of the letter 'c'.
Given three integers a, b, and c, return the longest possible happy string. If there are multiple longest happy strings, return any of them. If there is no such string, return the empty string "".

A substring is a contiguous sequence of characters within a string.

 

Example 1:

Input: a = 1, b = 1, c = 7
Output: "ccaccbcc"
Explanation: "ccbccacc" would also be a correct answer.
Example 2:

Input: a = 7, b = 1, c = 0
Output: "aabaa"
Explanation: It is the only correct answer in this case.
 

Constraints:

0 <= a, b, c <= 100
a + b + c > 0

class Solution
{
public:
    string longestDiverseString(int a, int b, int c)
    {
        priority_queue<pair<int, char>>pq;
        if(a != 0)
        {
            pq.push({a, 'a'});
        }
        if(b != 0)
        {
            pq.push({b, 'b'});
        }
        if(c != 0)
        {
            pq.push({c, 'c'});
        }
        string str;
        vector<int>cnt(3, 0); // cnt[0]表示str以字符a结尾时，向前有多少个连续的字符a
                                        // cnt[1]表示str以字符b结尾时，向前有多少个连续的字符b
                                        // cnt[2]表示str以字符c结尾时，向前有多少个连续的字符c
        while(!pq.empty())
        {
            auto x = pq.top();
            pq.pop();
            if(cnt[x.second - 'a'] == 2)
            {
                if(pq.empty())
                {
                    break;
                }
                auto y = pq.top();
                pq.pop();
                str.push_back(y.second);
                if(y.first > 1)
                {
                    pq.push({y.first - 1, y.second});
                }
                cnt[y.second - 'a'] = 1;
                cnt[((y.second - 'a') + 1) % 3] = 0;
                cnt[((y.second - 'a') + 2) % 3] = 0;
                pq.push(x);
            }
            else
            {
                str.push_back(x.second);
                if(x.first > 1)
                {
                    pq.push({x.first - 1, x.second});
                }
                cnt[x.second - 'a']++;
                cnt[((x.second - 'a') + 1) % 3] = 0;
                cnt[((x.second - 'a') + 2) % 3] = 0;
            }
        }
        return str;
    }
};


// Source https://leetcode.com/problems/stone-game-iii/

Alice and Bob continue their games with piles of stones. There are several stones arranged in a row, and each stone has an associated value which is an integer given in the array stoneValue.

Alice and Bob take turns, with Alice starting first. On each player's turn, that player can take 1, 2, or 3 stones from the first remaining stones in the row.

The score of each player is the sum of the values of the stones taken. The score of each player is 0 initially.

The objective of the game is to end with the highest score, and the winner is the player with the highest score and there could be a tie. 
The game continues until all the stones have been taken.

Assume Alice and Bob play optimally.

Return "Alice" if Alice will win, "Bob" if Bob will win, or "Tie" if they will end the game with the same score.

 

Example 1:

Input: values = [1,2,3,7]
Output: "Bob"
Explanation: Alice will always lose. Her best move will be to take three piles and the score become 6. Now the score of Bob is 7 and Bob wins.
Example 2:

Input: values = [1,2,3,-9]
Output: "Alice"
Explanation: Alice must choose all the three piles at the first move to win and leave Bob with negative score.
If Alice chooses one pile her score will be 1 and the next move Bob's score becomes 5. In the next move, Alice will take the pile with value = -9 and lose.
If Alice chooses two piles her score will be 3 and the next move Bob's score becomes 3. In the next move, Alice will take the pile with value = -9 and also lose.
Remember that both play optimally so here Alice will choose the scenario that makes her win.
Example 3:

Input: values = [1,2,3,6]
Output: "Tie"
Explanation: Alice cannot win this game. She can end the game in a draw if she decided to choose all the first three piles, otherwise she will lose.
 

Constraints:

1 <= stoneValue.length <= 5 * 104
-1000 <= stoneValue[i] <= 1000

class Solution
{
public:
    int n;
    int dp[50005];
    
    int recur(vector<int> &piles, int i, int sum)
    {
        if(i >= n) return 0;
        if(dp[i] != -1) return dp[i];
        int res = INT_MIN;
        int currsum = 0;
        for(int j = i; j < i + 3 && j < n; ++j)
        {
            currsum += piles[j];
            res = max(res, sum - recur(piles, j + 1, sum - currsum));
        }
        return dp[i] = res;
    }

    string stoneGameIII(vector<int> &piles)
    {
        n = piles.size();
        memset(dp, -1, sizeof(dp));
        int sum = accumulate(piles.begin(), piles.end(), 0);
        int x = recur(piles, 0, sum);
        if(2 * x > sum) return "Alice";
        if(2 * x < sum) return "Bob";
        return "Tie";
    }
};


// Source https://leetcode.com/problems/string-matching-in-an-array/

Given an array of string words. Return all strings in words which is substring of another word in any order. 

String words[i] is substring of words[j], if can be obtained removing some characters to left and/or right side of words[j].

 

Example 1:

Input: words = ["mass","as","hero","superhero"]
Output: ["as","hero"]
Explanation: "as" is substring of "mass" and "hero" is substring of "superhero".
["hero","as"] is also a valid answer.
Example 2:

Input: words = ["leetcode","et","code"]
Output: ["et","code"]
Explanation: "et", "code" are substring of "leetcode".
Example 3:

Input: words = ["blue","green","bu"]
Output: []
 

Constraints:

1 <= words.length <= 100
1 <= words[i].length <= 30
words[i] contains only lowercase English letters.
It's guaranteed that words[i] will be unique.

class Solution
{
public:
    vector<string> stringMatching(vector<string> &words)
    {
        sort(words.begin(), words.end(), [] (string & a, string & b)
        {
            return a.size() < b.size();
        });
        vector<string> res;
        int n = words.size();
        for(int i = 0; i < n; i++)
        {
            for(int j = i + 1; j < n; j++)
            {
                if(words[j].find(words[i]) != string::npos)
                {
                    res.push_back(words[i]);
                    break;
                }
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/queries-on-a-permutation-with-key/

Given the array queries of positive integers between 1 and m, you have to process all queries[i] (from i=0 to i=queries.length-1) according to the following rules:

In the beginning, you have the permutation P=[1,2,3,...,m].
For the current i, find the position of queries[i] in the permutation P (indexing from 0) and then move this at the beginning of the permutation P. 
Notice that the position of queries[i] in P is the result for queries[i].
Return an array containing the result for the given queries.

 

Example 1:

Input: queries = [3,1,2,1], m = 5
Output: [2,1,2,1] 
Explanation: The queries are processed as follow: 
For i=0: queries[i]=3, P=[1,2,3,4,5], position of 3 in P is 2, then we move 3 to the beginning of P resulting in P=[3,1,2,4,5]. 
For i=1: queries[i]=1, P=[3,1,2,4,5], position of 1 in P is 1, then we move 1 to the beginning of P resulting in P=[1,3,2,4,5]. 
For i=2: queries[i]=2, P=[1,3,2,4,5], position of 2 in P is 2, then we move 2 to the beginning of P resulting in P=[2,1,3,4,5]. 
For i=3: queries[i]=1, P=[2,1,3,4,5], position of 1 in P is 1, then we move 1 to the beginning of P resulting in P=[1,2,3,4,5]. 
Therefore, the array containing the result is [2,1,2,1].  
Example 2:

Input: queries = [4,1,2,2], m = 4
Output: [3,1,2,0]
Example 3:

Input: queries = [7,5,5,8,3], m = 8
Output: [6,5,0,7,5]
 

Constraints:

1 <= m <= 10^3
1 <= queries.length <= m
1 <= queries[i] <= m

class Solution
{
public:

    vector<int> processQueries(vector<int> &queries, int m)
    {
        vector<int> v;
        for(int i = m; i >= 1; i--) v.push_back(i);
        int n = queries.size();
        for(int i = 0; i < n; i++)
        {
            int val = queries[i];
            auto itr = find(v.begin(), v.end(), val);
            queries[i] = m - 1 - (itr - v.begin());
            v.erase(itr);
            v.push_back(val);
        }
        return queries;
    }
};


// Source https://leetcode.com/problems/html-entity-parser/

HTML entity parser is the parser that takes HTML code as input and replace all the entities of the special characters by the characters itself.

The special characters and their entities for HTML are:

Quotation Mark: the entity is &quot; and symbol character is ".
Single Quote Mark: the entity is &apos; and symbol character is '.
Ampersand: the entity is &amp; and symbol character is &.
Greater Than Sign: the entity is &gt; and symbol character is >.
Less Than Sign: the entity is &lt; and symbol character is <.
Slash: the entity is &frasl; and symbol character is /.
Given the input text string to the HTML parser, you have to implement the entity parser.

Return the text after replacing the entities by the special characters.

 

Example 1:

Input: text = "&amp; is an HTML entity but &ambassador; is not."
Output: "& is an HTML entity but &ambassador; is not."
Explanation: The parser will replace the &amp; entity by &
Example 2:

Input: text = "and I quote: &quot;...&quot;"
Output: "and I quote: \"...\""
 

Constraints:

1 <= text.length <= 105
The string may contain any possible characters out of all the 256 ASCII characters.

class Solution
{
public:
    string entityParser(string text)
    {
        string result = "";
        unordered_map<string, string> mp;
        mp["&quot;"] = "\"";
        mp["&apos;"] = "\'";
        mp["&amp;"] = "&";
        mp["&gt;"] = ">";
        mp["&lt;"] = "<";
        mp["&frasl;"] = "/";
        int n = text.size();
        for(int i = 0; i < n; i++)
        {
            if(text[i] == '&')
            {
                bool found_match = false;
                for(int k = 4; i + k <= n && k <= 7; k++)
                {
                    string extra = text.substr(i, k);
                    if(mp.count(extra))
                    {
                        result += mp[extra];
                        i += k - 1;
                        found_match = true;
                        break;
                    }
                }
                if(!found_match)
                {
                    result += text[i];
                }
            }
            else
            {
                result += text[i];
            }
        }
        return result;
    }
};


// Source https://leetcode.com/problems/number-of-ways-to-paint-n-3-grid/

You have a grid of size n x 3 and you want to paint each cell of the grid with exactly one of the three colors: Red, Yellow, or Green 
while making sure that no two adjacent cells have the same color (i.e., no two cells that share vertical or horizontal sides have the same color).

Given n the number of rows of the grid, return the number of ways you can paint this grid. As the answer may grow large, the answer must be computed modulo 109 + 7.

 

Example 1:


Input: n = 1
Output: 12
Explanation: There are 12 possible way to paint the grid as shown.
Example 2:

Input: n = 5000
Output: 30228214
 

Constraints:

n == grid.length
1 <= n <= 5000

for each state, the last row has two patterns: 121 and 123.
when the last row is pattern 121, the next row has 5 possibilities: 212, 213, 312, 313, 232, that is 3 pattern 121, 2 pattern 123.
when the last row is pattern 123, the next row has 4 possibilities: 212, 232, 312, 231, that is 2 pattern 121, 2 pattern 123
For each state n, consider the last row, the possibilities when last row is pattern 121 -> a, the possibilities when last row is pattern pattern 123 -> b, then for state n+1:
for 121, there will be 5a possibilities, 3a pattern 121, 2a pattern 123; for 123, there will be 4b possibilities, 2b pattern 121, 2b pattern 123
then the state n+1 will have 3a+2b pattern 121, 2a+2b pattern 123.
base case is n==1, 6 pattern 121, 6 pattern 123.

class Solution
{
public:
    int numOfWays(int n)
    {
        int mod = 1e9 + 7;
        pair<int64_t, int64_t> ans{6, 6};
        for(int i = 1; i < n; i ++)
        {
            auto [a, b] = ans;
            ans = {(a * 3 + b * 2) % mod, (a * 2 + b * 2) % mod};
        }
        return (ans.first + ans.second) % mod;
    }
};



// Source https://leetcode.com/problems/minimum-value-to-get-positive-step-by-step-sum/

Given an array of integers nums, you start with an initial positive value startValue.

In each iteration, you calculate the step by step sum of startValue plus elements in nums (from left to right).

Return the minimum positive value of startValue such that the step by step sum is never less than 1.

 

Example 1:

Input: nums = [-3,2,-3,4,2]
Output: 5
Explanation: If you choose startValue = 4, in the third iteration your step by step sum is less than 1.
step by step sum
startValue = 4 | startValue = 5 | nums
  (4 -3 ) = 1  | (5 -3 ) = 2    |  -3
  (1 +2 ) = 3  | (2 +2 ) = 4    |   2
  (3 -3 ) = 0  | (4 -3 ) = 1    |  -3
  (0 +4 ) = 4  | (1 +4 ) = 5    |   4
  (4 +2 ) = 6  | (5 +2 ) = 7    |   2
Example 2:

Input: nums = [1,2]
Output: 1
Explanation: Minimum start value should be positive. 
Example 3:

Input: nums = [1,-2,-3]
Output: 5
 

Constraints:

1 <= nums.length <= 100
-100 <= nums[i] <= 100

class Solution
{
public:
    int minStartValue(vector<int> &nums)
    {
        int temp = INT_MAX;
        int sum = 0;
        for(auto ele : nums)
        {
            sum += ele;
            temp = min(temp, sum);
        }
        if(temp >= 1)
        {
            return 1;
        }
        return abs(temp) + 1;
    }
};


// Source https://leetcode.com/problems/find-the-minimum-number-of-fibonacci-numbers-whose-sum-is-k/

Given an integer k, return the minimum number of Fibonacci numbers whose sum is equal to k. The same Fibonacci number can be used multiple times.

The Fibonacci numbers are defined as:

F1 = 1
F2 = 1
Fn = Fn-1 + Fn-2 for n > 2.
It is guaranteed that for the given constraints we can always find such Fibonacci numbers that sum up to k.
 

Example 1:

Input: k = 7
Output: 2 
Explanation: The Fibonacci numbers are: 1, 1, 2, 3, 5, 8, 13, ... 
For k = 7 we can use 2 + 5 = 7.
Example 2:

Input: k = 10
Output: 2 
Explanation: For k = 10 we can use 2 + 8 = 10.
Example 3:

Input: k = 19
Output: 3 
Explanation: For k = 19 we can use 1 + 5 + 13 = 19.
 

Constraints:

1 <= k <= 109

class Solution
{
public:
    vector<int> fib;

    void fill_fib(int n)
    {
        fib.push_back(1);
        fib.push_back(1);
        int i = 2;
        while(true)
        {
            fib.push_back(fib[i - 1] + fib[i - 2]);
            i += 1;
            if (fib.back() > n) { fib.pop_back(); break; }
        }
    }

    int findMinFibonacciNumbers(int k)
    {
        fill_fib(k);
        int ans = 0;
        int i = fib.size() - 1;
        while(k > 0)
        {
            k = k - fib[i];
            ans += 1;
            if (k == 0) break;
            while(fib[i] > k)
            {
                i--;
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/the-k-th-lexicographical-string-of-all-happy-strings-of-length-n/

A happy string is a string that:

consists only of letters of the set ['a', 'b', 'c'].
s[i] != s[i + 1] for all values of i from 1 to s.length - 1 (string is 1-indexed).
For example, strings "abc", "ac", "b" and "abcbabcbcb" are all happy strings and strings "aa", "baa" and "ababbc" are not happy strings.

Given two integers n and k, consider a list of all happy strings of length n sorted in lexicographical order.

Return the kth string of this list or return an empty string if there are less than k happy strings of length n.

 

Example 1:

Input: n = 1, k = 3
Output: "c"
Explanation: The list ["a", "b", "c"] contains all happy strings of length 1. The third string is "c".
Example 2:

Input: n = 1, k = 4
Output: ""
Explanation: There are only 3 happy strings of length 1.
Example 3:

Input: n = 3, k = 9
Output: "cab"
Explanation: There are 12 different happy string of length 3 ["aba", "abc", "aca", "acb", "bab", "bac", "bca", "bcb", "cab", "cac", "cba", "cbc"]. You will find the 9th string = "cab"
 

Constraints:

1 <= n <= 10
1 <= k <= 100

class Solution
{
public:
    string ans;

    void solve(int n, int &k, string curr)
    {
        if(k <= 0)
            return;
        if(curr.size() == n)
        {
            k--;
            if(k == 0)
                ans = curr;
            return;
        }
        if('a' != curr.back())
        {
            solve(n, k, curr + 'a');
        }
        if('b' != curr.back())
        {
            solve(n, k, curr + 'b');
        }
        if('c' != curr.back())
        {
            solve(n, k, curr + 'c');
        }
    }

    string getHappyString(int n, int k)
    {
        solve(n, k, "a");
        solve(n, k, "b");
        solve(n, k, "c");
        return ans;
    }
};


// Source https://leetcode.com/problems/restore-the-array/

A program was supposed to print an array of integers. The program forgot to print whitespaces and the array is printed as a string of digits s 
and all we know is that all integers in the array were in the range [1, k] and there are no leading zeros in the array.

Given the string s and the integer k, return the number of the possible arrays that can be printed as s using the mentioned program. 
Since the answer may be very large, return it modulo 109 + 7.

 

Example 1:

Input: s = "1000", k = 10000
Output: 1
Explanation: The only possible array is [1000]
Example 2:

Input: s = "1000", k = 10
Output: 0
Explanation: There cannot be an array that was printed this way and has all integer >= 1 and <= 10.
Example 3:

Input: s = "1317", k = 2000
Output: 8
Explanation: Possible arrays are [1317],[131,7],[13,17],[1,317],[13,1,7],[1,31,7],[1,3,17],[1,3,1,7]
 

Constraints:

1 <= s.length <= 105
s consists of only digits and does not contain leading zeros.
1 <= k <= 109

class Solution
{
public:
    int n;
    int dp[100005];
    const int mod = 1e9 + 7;

    int solver(string &s, int k, int i)
    {
        if(i == n) return 1;
        if(s[i] == '0') return 0;
        if(dp[i] != -1) return dp[i];
        int ans = 0;
        long nums = 0;
        for(int j = i; j < n && (nums * 10 + (s[j] - '0')) <= k; j++)
        {
            nums = nums * 10 + (s[j] - '0');
            ans = (ans + solver(s, k, j + 1)) % mod;
        }
        return dp[i] = ans;
    }

    int numberOfArrays(string s, int k)
    {
        n = s.length();
        memset(dp, -1, sizeof(dp));
        return solver(s, k, 0);
    }
};


// Source https://leetcode.com/problems/reformat-the-string/

You are given an alphanumeric string s. (Alphanumeric string is a string consisting of lowercase English letters and digits).

You have to find a permutation of the string where no letter is followed by another letter and no digit is followed by another digit. That is, no two adjacent characters have the same type.

Return the reformatted string or return an empty string if it is impossible to reformat the string.

 

Example 1:

Input: s = "a0b1c2"
Output: "0a1b2c"
Explanation: No two adjacent characters have the same type in "0a1b2c". "a0b1c2", "0a1b2c", "0c2a1b" are also valid permutations.
Example 2:

Input: s = "leetcode"
Output: ""
Explanation: "leetcode" has only characters so we cannot separate them by digits.
Example 3:

Input: s = "1229857369"
Output: ""
Explanation: "1229857369" has only digits so we cannot separate them by characters.
 

Constraints:

1 <= s.length <= 500
s consists of only lowercase English letters and/or digits.

class Solution
{
public:
    string reformat(string s)
    {
        int n = s.length();
        if (n == 1) return s;
        int digit = 0, letter = 0;
        vector<char>d;
        vector<char>l;
        for(int i = 0; i < n; i++)
        {
            if(isdigit(s[i]))
            {
                digit++;
                d.push_back(s[i]);
            }
            else
            {
                letter++;
                l.push_back(s[i]);
            }
        }
        if(abs(digit - letter) > 1) return "";
        string str = "";
        if(digit >= letter)
        {
            int i = 0;
            int cnt = min(d.size(), l.size());
            while(i < cnt)
            {
                str += d[i];
                str += l[i];
                i++;
            }
            if(i != d.size()) str += d[i];
        }
        else
        {
            int i = 0;
            int cnt = min(d.size(), l.size());
            while(i < cnt)
            {
                str += l[i];
                str += d[i];
                i++;
            }
            str += l[i];
        }
        return str;
    }
};


// Source https://leetcode.com/problems/display-table-of-food-orders-in-a-restaurant/

Given the array orders, which represents the orders that customers have done in a restaurant. 
More specifically orders[i]=[customerNamei,tableNumberi,foodItemi] 
where customerNamei is the name of the customer, tableNumberi is the table customer sit at, and foodItemi is the item customer orders.

Return the restaurant's “display table”. The “display table” is a table whose row entries denote how many of each food item each table ordered. 
The first column is the table number and the remaining columns correspond to each food item in alphabetical order. 
The first row should be a header whose first column is “Table”, followed by the names of the food items. 
Note that the customer names are not part of the table. Additionally, the rows should be sorted in numerically increasing order.

 

Example 1:

Input: orders = [["David","3","Ceviche"],["Corina","10","Beef Burrito"],["David","3","Fried Chicken"],["Carla","5","Water"],["Carla","5","Ceviche"],["Rous","3","Ceviche"]]
Output: [["Table","Beef Burrito","Ceviche","Fried Chicken","Water"],["3","0","2","1","0"],["5","0","1","0","1"],["10","1","0","0","0"]] 
Explanation:
The displaying table looks like:
Table,Beef Burrito,Ceviche,Fried Chicken,Water
3    ,0           ,2      ,1            ,0
5    ,0           ,1      ,0            ,1
10   ,1           ,0      ,0            ,0
For the table 3: David orders "Ceviche" and "Fried Chicken", and Rous orders "Ceviche".
For the table 5: Carla orders "Water" and "Ceviche".
For the table 10: Corina orders "Beef Burrito". 
Example 2:

Input: orders = [["James","12","Fried Chicken"],["Ratesh","12","Fried Chicken"],["Amadeus","12","Fried Chicken"],["Adam","1","Canadian Waffles"],["Brianna","1","Canadian Waffles"]]
Output: [["Table","Canadian Waffles","Fried Chicken"],["1","2","0"],["12","0","3"]] 
Explanation: 
For the table 1: Adam and Brianna order "Canadian Waffles".
For the table 12: James, Ratesh and Amadeus order "Fried Chicken".
Example 3:

Input: orders = [["Laura","2","Bean Burrito"],["Jhon","2","Beef Burrito"],["Melissa","2","Soda"]]
Output: [["Table","Bean Burrito","Beef Burrito","Soda"],["2","1","1","1"]]
 

Constraints:

1 <= orders.length <= 5 * 10^4
orders[i].length == 3
1 <= customerNamei.length, foodItemi.length <= 20
customerNamei and foodItemi consist of lowercase and uppercase English letters and the space character.
tableNumberi is a valid integer between 1 and 500.

class Solution
{
public:
    struct comp
    {
        bool operator()(string const &a, string const &b) const noexcept
        {
            if (a.size() == b.size()) return a < b;
            return a.size() < b.size();
        }
    };

    vector<vector<string>> displayTable(vector<vector<string>> &orders)
    {
        set<string> dishes;
        map<string, unordered_map<string, int>, comp>table;

        for(auto &v : orders)
        {
            dishes.insert(v[2]);
            table[v[1]][v[2]]++;
        }

        vector<vector<string>> res;
        res.push_back({"Table"});
        for(auto &d : dishes) res.back().push_back(d);

        for(auto &p : table)
        {
            res.push_back({p.first});
            for(auto &d : dishes)
            {
                if(p.second.count(d)) res.back().push_back(to_string(p.second[d]));
                else res.back().push_back("0");
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/minimum-number-of-frogs-croaking/

You are given the string croakOfFrogs, which represents a combination of the string "croak" from different frogs, that is, multiple frogs can croak at the same time, so multiple "croak" are mixed.

Return the minimum number of different frogs to finish all the croaks in the given string.

A valid "croak" means a frog is printing five letters 'c', 'r', 'o', 'a', and 'k' sequentially. The frogs have to print all five letters to finish a croak. 
If the given string is not a combination of a valid "croak" return -1.

 

Example 1:

Input: croakOfFrogs = "croakcroak"
Output: 1 
Explanation: One frog yelling "croak" twice.
Example 2:

Input: croakOfFrogs = "crcoakroak"
Output: 2 
Explanation: The minimum number of frogs is two. 
The first frog could yell "crcoakroak".
The second frog could yell later "crcoakroak".
Example 3:

Input: croakOfFrogs = "croakcrook"
Output: -1
Explanation: The given string is an invalid combination of "croak" from different frogs.
 

Constraints:

1 <= croakOfFrogs.length <= 105
croakOfFrogs is either 'c', 'r', 'o', 'a', or 'k'.

class Solution
{
public:
    int minNumberOfFrogs(string croakOfFrogs)
    {
        vector<int> count(5, 0);
        for (auto ch : croakOfFrogs)
        {
            switch(ch)
            {
            case 'c':
                count[0]++;
                if (count[4] != 0) count[4]--;
                break;
            case 'r':
                if (count[0] <= 0) return -1;
                count[1]++;
                count[0]--;
                break;
            case 'o':
                if (count[1] <= 0) return -1;
                count[2]++;
                count[1]--;
                break;
            case 'a':
                if (count[2] <= 0) return -1;
                count[3]++;
                count[2]--;
                break;
            case 'k':
                if (count[3] <= 0) return -1;
                count[4]++;
                count[3]--;
                break;
            default :
                return -1;
            }
        }
        for (int i = 0; i < 4; ++i)
        {
            if (count[i] != 0) return -1;
        }
        return count[4];
    }
};


// Source https://leetcode.com/problems/build-array-where-you-can-find-the-maximum-exactly-k-comparisons/

You are given three integers n, m and k. Consider the following algorithm to find the maximum element of an array of positive integers:

maximum_value = -1;
maximum_index = -1;
search_cost = 0;
n = arr.length;
for (i = 0; i < n; i++)
{
    if (maximum_value < arr[i])
    {
        maximum_value = arr[i];
        maximum_index = i;
        search_cost = search_cost + 1;
    }
}
return maximum_index;

You should build the array arr which has the following properties:

arr has exactly n integers.
1 <= arr[i] <= m where (0 <= i < n).
After applying the mentioned algorithm to arr, the value search_cost is equal to k.
Return the number of ways to build the array arr under the mentioned conditions. As the answer may grow large, the answer must be computed modulo 109 + 7.

 

Example 1:

Input: n = 2, m = 3, k = 1
Output: 6
Explanation: The possible arrays are [1, 1], [2, 1], [2, 2], [3, 1], [3, 2] [3, 3]
Example 2:

Input: n = 5, m = 2, k = 3
Output: 0
Explanation: There are no possible arrays that satisify the mentioned conditions.
Example 3:

Input: n = 9, m = 1, k = 1
Output: 1
Explanation: The only possible array is [1, 1, 1, 1, 1, 1, 1, 1, 1]
 

Constraints:

1 <= n <= 50
1 <= m <= 100
0 <= k <= n

class Solution
{
public:
    int n, m;
    int dp[51][101][51];
    const int mod = 1e9 + 7;

    int recur(int idx, int max, int k)
    {
        if (k > n - idx) return 0;
        if(k < 0) return 0;
        if(idx == n) return 1;
        if(dp[idx][max][k] != -1) return dp[idx][max][k];
        int ans = 0;
        for(int i = 1; i <= m; i++)
        {
            if(i > max)
            {
                ans = (ans + recur(idx + 1, i, k - 1)) % mod;
            }
            else
            {
                ans = (ans + recur(idx + 1, max, k)) % mod;
            }
        }
        return dp[idx][max][k] = ans;
    }

    int numOfArrays(int n, int m, int k)
    {
        this->n = n;
        this->m = m;
        memset(dp, -1, sizeof(dp));
        return recur(0, 0, k);
    }
};


// Source https://leetcode.com/problems/maximum-score-after-splitting-a-string/

Given a string s of zeros and ones, return the maximum score after splitting the string into two non-empty substrings (i.e. left substring and right substring).

The score after splitting a string is the number of zeros in the left substring plus the number of ones in the right substring.

 

Example 1:

Input: s = "011101"
Output: 5 
Explanation: 
All possible ways of splitting s into two non-empty substrings are:
left = "0" and right = "11101", score = 1 + 4 = 5 
left = "01" and right = "1101", score = 1 + 3 = 4 
left = "011" and right = "101", score = 1 + 2 = 3 
left = "0111" and right = "01", score = 1 + 1 = 2 
left = "01110" and right = "1", score = 2 + 1 = 3
Example 2:

Input: s = "00111"
Output: 5
Explanation: When left = "00" and right = "111", we get the maximum score = 2 + 3 = 5
Example 3:

Input: s = "1111"
Output: 3
 

Constraints:

2 <= s.length <= 500
The string s consists of characters '0' and '1' only.

class Solution
{
public:
    int maxScore(string s)
    {
        int n = s.length();
        vector<int> leftZero(n);
        vector<int> rightOne(n);
        for (int i = 1; i < n; ++i)
        {
            leftZero[i] = leftZero[i - 1];
            if (s[i - 1] == '0') leftZero[i]++;
        }
        for (int i = n - 2; i >= 0; --i)
        {
            rightOne[i] = rightOne[i + 1];
            if (s[i + 1] == '1') rightOne[i]++;
        }
        int res = 0;
        for (int i = 1; i < n; ++i) res = max(res, leftZero[i] + rightOne[i - 1]);
        return res;
    }
};


// Source https://leetcode.com/problems/maximum-points-you-can-obtain-from-cards/

There are several cards arranged in a row, and each card has an associated number of points. The points are given in the integer array cardPoints.

In one step, you can take one card from the beginning or from the end of the row. You have to take exactly k cards.

Your score is the sum of the points of the cards you have taken.

Given the integer array cardPoints and the integer k, return the maximum score you can obtain.

 

Example 1:

Input: cardPoints = [1,2,3,4,5,6,1], k = 3
Output: 12
Explanation: After the first step, your score will always be 1. However, choosing the rightmost card first will maximize your total score. The optimal strategy is to take the three cards on the right, giving a final score of 1 + 6 + 5 = 12.
Example 2:

Input: cardPoints = [2,2,2], k = 2
Output: 4
Explanation: Regardless of which two cards you take, your score will always be 4.
Example 3:

Input: cardPoints = [9,7,7,9,7,7,9], k = 7
Output: 55
Explanation: You have to take all the cards. Your score is the sum of points of all cards.
 

Constraints:

1 <= cardPoints.length <= 105
1 <= cardPoints[i] <= 104
1 <= k <= cardPoints.length

class Solution
{
public:

    int maxScore(vector<int> &cardPoints, int k)
    {
        int n = cardPoints.size();
        int pre[n];
        pre[0] = cardPoints[0];
        for(int i = 1; i < n; i++)
        {
            pre[i] = pre[i - 1] + cardPoints[i];
        }
        int suf[n];
        suf[n - 1] = cardPoints[n - 1];
        for(int i = n - 2; i >= 0; i--)
        {
            suf[i] = suf[i + 1] + cardPoints[i];
        }
        int res = 0;
        for(int i = 1; i < k; i++)
        {
            int sum = pre[i - 1] + suf[n - k + i];
            res = max(res, sum);
        }
        res = max({res, pre[k - 1], suf[n - k]});
        return res;
    }
};


// Source https://leetcode.com/problems/diagonal-traverse-ii/

Given a 2D integer array nums, return all elements of nums in diagonal order as shown in the below images.

 

Example 1:


Input: nums = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,4,2,7,5,3,8,6,9]
Example 2:


Input: nums = [[1,2,3,4,5],[6,7],[8],[9,10,11],[12,13,14,15,16]]
Output: [1,6,2,8,7,3,9,4,12,10,5,13,11,14,15,16]
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i].length <= 105
1 <= sum(nums[i].length) <= 105
1 <= nums[i][j] <= 105

class Solution
{
public:
    vector<int> findDiagonalOrder(vector<vector<int>> &nums)
    {
        vector<int>ans;
        int n = nums.size();
        queue<pair<int, int>>q;
        q.push({0, 0});
        while(!q.empty())
        {
            int sz = q.size();
            for(int i = 0; i < sz; i++)
            {
                auto p = q.front();
                q.pop();
                int r = p.first;
                int c = p.second;
                ans.push_back(nums[r][c]);
                if(r + 1 < n && c == 0)q.push({r + 1, c});
                if(c + 1 < nums[r].size()) q.push({r, c + 1});
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/constrained-subsequence-sum/

Given an integer array nums and an integer k, return the maximum sum of a non-empty subsequence of that array 
such that for every two consecutive integers in the subsequence, nums[i] and nums[j], where i < j, the condition j - i <= k is satisfied.

A subsequence of an array is obtained by deleting some number of elements (can be zero) from the array, leaving the remaining elements in their original order.

 

Example 1:

Input: nums = [10,2,-10,5,20], k = 2
Output: 37
Explanation: The subsequence is [10, 2, 5, 20].
Example 2:

Input: nums = [-1,-2,-3], k = 1
Output: -1
Explanation: The subsequence must be non-empty, so we choose the largest number.
Example 3:

Input: nums = [10,-2,-10,-5,20], k = 2
Output: 23
Explanation: The subsequence is [10, -2, -5, 20].
 

Constraints:

1 <= k <= nums.length <= 105
-104 <= nums[i] <= 104

class Solution
{
public:
    int constrainedSubsetSum(vector<int> &nums, int k)
    {
        int n = nums.size();
        vector<int> dp(n, INT_MIN);
        dp[0] = nums[0];
        deque<int> d;
        d.push_back(0);
        int res = dp[0];
        for(int i = 1; i < n; ++i)
        {
            while(!d.empty() && i - d.front() > k) d.pop_front();
            if(!d.empty()) dp[i] = nums[i] + dp[d.front()];
            dp[i] = max(nums[i], dp[i]);
            while(!d.empty() && dp[d.back()] <= dp[i]) d.pop_back();
            d.push_back(i);
            res = max(res, dp[i]);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/kids-with-the-greatest-number-of-candies/

There are n kids with candies. You are given an integer array candies, where each candies[i] represents the number of candies the ith kid has, 
and an integer extraCandies, denoting the number of extra candies that you have.

Return a boolean array result of length n, where result[i] is true if, after giving the ith kid all the extraCandies, they will have the greatest number of candies among all the kids, or false otherwise.

Note that multiple kids can have the greatest number of candies.

 

Example 1:

Input: candies = [2,3,5,1,3], extraCandies = 3
Output: [true,true,true,false,true] 
Explanation: If you give all extraCandies to:
- Kid 1, they will have 2 + 3 = 5 candies, which is the greatest among the kids.
- Kid 2, they will have 3 + 3 = 6 candies, which is the greatest among the kids.
- Kid 3, they will have 5 + 3 = 8 candies, which is the greatest among the kids.
- Kid 4, they will have 1 + 3 = 4 candies, which is not the greatest among the kids.
- Kid 5, they will have 3 + 3 = 6 candies, which is the greatest among the kids.
Example 2:

Input: candies = [4,2,1,1,2], extraCandies = 1
Output: [true,false,false,false,false] 
Explanation: There is only 1 extra candy.
Kid 1 will always have the greatest number of candies, even if a different kid is given the extra candy.
Example 3:

Input: candies = [12,1,12], extraCandies = 10
Output: [true,false,true]
 

Constraints:

n == candies.length
2 <= n <= 100
1 <= candies[i] <= 100
1 <= extraCandies <= 50

class Solution
{
public:
    vector<bool> kidsWithCandies(vector<int> &candies, int extraCandies)
    {
        int n = candies.size();
        int mxVal = candies[0];
        for(int i = 1; i < n; i++)
        {
            if(candies[i] > mxVal) mxVal = candies[i];
        }
        vector<bool>v;
        for(int i = 0; i < n; i++)
        {
            if(candies[i] + extraCandies >= mxVal)
                v.push_back(true);
            else
                v.push_back(false);
        }
        return v;
    }
};


// Source https://leetcode.com/problems/max-difference-you-can-get-from-changing-an-integer/

You are given an integer num. You will apply the following steps exactly two times:

Pick a digit x (0 <= x <= 9).
Pick another digit y (0 <= y <= 9). The digit y can be equal to x.
Replace all the occurrences of x in the decimal representation of num by y.
The new integer cannot have any leading zeros, also the new integer cannot be 0.
Let a and b be the results of applying the operations to num the first and second times, respectively.

Return the max difference between a and b.

 
123321
923329
103301

Example 1:

Input: num = 555
Output: 888
Explanation: The first time pick x = 5 and y = 9 and store the new integer in a.
The second time pick x = 5 and y = 1 and store the new integer in b.
We have now a = 999 and b = 111 and max difference = 888
Example 2:

Input: num = 9
Output: 8
Explanation: The first time pick x = 9 and y = 9 and store the new integer in a.
The second time pick x = 9 and y = 1 and store the new integer in b.
We have now a = 9 and b = 1 and max difference = 8
 

Constraints:

1 <= num <= 108

class Solution
{
public:

    int maxDiff(int num)
    {
        string str = to_string(num);
        int n = str.length();
        if (n == 1) return 8; // 9 - 1 = 8
        string a = str;
        string b = str;
        for(int i = 0; i < n; i++)
        {
            if(str[i] != '9')
            {
                replace(a.begin(), a.end(), str[i], '9');
                break;
            }
        }
        if (str[0] != '1')
        {
            replace(b.begin(), b.end(), str[0], '1');
        }
        else
        {
            for(int i = 1; i < n; i++)
            {
                if(str[i] != '0' && str[i] != '1')
                {
                    replace(b.begin(), b.end(), str[i], '0');
                    break;
                }
            }
        }
        return (stoi(a) - stoi(b));
    }
};


// Source https://leetcode.com/problems/check-if-a-string-can-break-another-string/

Given two strings: s1 and s2 with the same size, check if some permutation of string s1 can break some permutation of string s2 or vice-versa. In other words s2 can break s1 or vice-versa.

A string x can break string y (both of size n) if x[i] >= y[i] (in alphabetical order) for all i between 0 and n-1.

 

Example 1:

Input: s1 = "abc", s2 = "xya"
Output: true
Explanation: "ayx" is a permutation of s2="xya" which can break to string "abc" which is a permutation of s1="abc".
Example 2:

Input: s1 = "abe", s2 = "acd"
Output: false 
Explanation: All permutations for s1="abe" are: "abe", "aeb", "bae", "bea", "eab" and "eba" and all permutation for s2="acd" are: "acd", "adc", "cad", "cda", "dac" and "dca". However, there is not any permutation from s1 which can break some permutation from s2 and vice-versa.
Example 3:

Input: s1 = "leetcodee", s2 = "interview"
Output: true
 

Constraints:

s1.length == n
s2.length == n
1 <= n <= 10^5
All strings consist of lowercase English letters.

class Solution
{
public:
    bool checkIfCanBreak(string a, string b)
    {
        int n = a.length();
        sort(a.begin(), a.end());
        sort(b.begin(), b.end());
        int i;
        for (i = 0; i < n; i++)
        {
            if (a[i] < b[i])
                break;
        }
        if (i == n) return true;
        for (i = 0; i < n; i++)
        {
            if (b[i] < a[i])
                break;
        }
        if (i == n) return true;
        return false;
    }
};


// Source https://leetcode.com/problems/number-of-ways-to-wear-different-hats-to-each-other/

There are n people and 40 types of hats labeled from 1 to 40.

Given a 2D integer array hats, where hats[i] is a list of all hats preferred by the ith person.

Return the number of ways that the n people wear different hats to each other.

Since the answer may be too large, return it modulo 109 + 7.

 

Example 1:

Input: hats = [[3,4],[4,5],[5]]
Output: 1
Explanation: There is only one way to choose hats given the conditions. 
First person choose hat 3, Second person choose hat 4 and last one hat 5.
Example 2:

Input: hats = [[3,5,1],[3,5]]
Output: 4
Explanation: There are 4 ways to choose hats:
(3,5), (5,3), (1,3) and (1,5)
Example 3:

Input: hats = [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]
Output: 24
Explanation: Each person can choose hats labeled from 1 to 4.
Number of Permutations of (1,2,3,4) = 24.
 

Constraints:

n == hats.length
1 <= n <= 10
1 <= hats[i].length <= 40
1 <= hats[i][j] <= 40
hats[i] contains a list of unique integers.

class Solution
{
public:
    int n;
    int target;
    unordered_map<int, vector<int>> hatsInfo;
    int dp[41][1025];
    const int mod = 1e9 + 7;
    
    long long recur(int hat, int mask)
    {
        if (mask == target) return 1;
        if (hat == 41) return 0;
        if (dp[hat][mask] != -1) return dp[hat][mask];
        int ans = 0;
        for (int p : hatsInfo[hat])
        {
            if ((mask & (1 << p)) == 0)
            {
                ans += recur(hat + 1, mask | (1 << p));
                ans %= mod;
            }
        }
        ans += recur(hat + 1, mask);
        ans %= mod;
        return dp[hat][mask] = ans;
    }

    int numberWays(vector<vector<int>> &hats)
    {
        n = hats.size();
        target = ((1 << n) - 1);
        memset(dp, -1, sizeof(dp));
        for (int i = 0; i < n; i++)
        {
            for (int h : hats[i])
            {
                hatsInfo[h].push_back(i);
            }
        }
        return recur(1, 0);
    }
};


// Source https://leetcode.com/problems/destination-city/

You are given the array paths, where paths[i] = [cityAi, cityBi] means there exists a direct path going from cityAi to cityBi. 
Return the destination city, that is, the city without any path outgoing to another city.

It is guaranteed that the graph of paths forms a line without any loop, therefore, there will be exactly one destination city.

 

Example 1:

Input: paths = [["London","New York"],["New York","Lima"],["Lima","Sao Paulo"]]
Output: "Sao Paulo" 
Explanation: Starting at "London" city you will reach "Sao Paulo" city which is the destination city. Your trip consist of: "London" -> "New York" -> "Lima" -> "Sao Paulo".
Example 2:

Input: paths = [["B","C"],["D","B"],["C","A"]]
Output: "A"
Explanation: All possible trips are: 
"D" -> "B" -> "C" -> "A". 
"B" -> "C" -> "A". 
"C" -> "A". 
"A". 
Clearly the destination city is "A".
Example 3:

Input: paths = [["A","Z"]]
Output: "Z"
 

Constraints:

1 <= paths.length <= 100
paths[i].length == 2
1 <= cityAi.length, cityBi.length <= 10
cityAi != cityBi
All strings consist of lowercase and uppercase English letters and the space character.

class Solution
{
public:
    string destCity(vector<vector<string>> &paths)
    {
        string res = "";
        unordered_set<string> s;
        for (auto &v : paths)
        {
            s.insert(v[0]);
        }
        for (auto &v : paths)
        {
            if (s.find(v[1]) == s.end())
            {
                res = v[1];
                break;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/check-if-all-1s-are-at-least-length-k-places-away/

Given an binary array nums and an integer k, return true if all 1's are at least k places away from each other, otherwise return false.

 

Example 1:


Input: nums = [1,0,0,0,1,0,0,1], k = 2
Output: true
Explanation: Each of the 1s are at least 2 places away from each other.
Example 2:


Input: nums = [1,0,0,1,0,1], k = 2
Output: false
Explanation: The second 1 and third 1 are only one apart from each other.
 

Constraints:

1 <= nums.length <= 105
0 <= k <= nums.length
nums[i] is 0 or 1

class Solution
{
public:
    bool kLengthApart(vector<int> &nums, int k)
    {
        vector<int> pos;
        for(int i = 0; i < nums.size(); i++)
        {
            if(nums[i] == 1)
            {
                pos.push_back(i);
            }
        }
        int n = pos.size();
        if(n < 2) return true;
        for(int i = 0; i < n - 1; i++)
        {
            if(pos[i + 1] - pos[i] - 1 < k)
            {
                return false;
            }
        }
        return true;
    }
};


// Source https://leetcode.com/problems/longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit/

Given an array of integers nums and an integer limit, return the size of the longest non-empty subarray 
such that the absolute difference between any two elements of this subarray is less than or equal to limit.

 

Example 1:

Input: nums = [8,2,4,7], limit = 4
Output: 2 
Explanation: All subarrays are: 
[8] with maximum absolute diff |8-8| = 0 <= 4.
[8,2] with maximum absolute diff |8-2| = 6 > 4. 
[8,2,4] with maximum absolute diff |8-2| = 6 > 4.
[8,2,4,7] with maximum absolute diff |8-2| = 6 > 4.
[2] with maximum absolute diff |2-2| = 0 <= 4.
[2,4] with maximum absolute diff |2-4| = 2 <= 4.
[2,4,7] with maximum absolute diff |2-7| = 5 > 4.
[4] with maximum absolute diff |4-4| = 0 <= 4.
[4,7] with maximum absolute diff |4-7| = 3 <= 4.
[7] with maximum absolute diff |7-7| = 0 <= 4. 
Therefore, the size of the longest subarray is 2.
Example 2:

Input: nums = [10,1,2,4,7,2], limit = 5
Output: 4 
Explanation: The subarray [2,4,7,2] is the longest since the maximum absolute diff is |2-7| = 5 <= 5.
Example 3:

Input: nums = [4,2,2,2,4,4,2,2], limit = 0
Output: 3
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 109
0 <= limit <= 109

class Solution
{
public:
    int longestSubarray(vector<int> &nums, int limit)
    {
        int n = nums.size();
        int ans = 0;
        int start = 0, end = 0;
        map<int, int> mp;
        int maxOfWindow, minOfWindow;
        while(end < n)
        {
            mp[nums[end]]++;
            maxOfWindow = (--mp.end())->first;
            minOfWindow = mp.begin()->first;
            if(maxOfWindow - minOfWindow <= limit)
            {
                ans = max(ans, end - start + 1);
            }
            else
            {
                while(maxOfWindow - minOfWindow > limit)
                {
                    mp[nums[start]]--;
                    if(mp[nums[start]] == 0)
                    {
                        mp.erase(nums[start]);
                    }
                    start++;
                    maxOfWindow = (--mp.end())->first;
                    minOfWindow = mp.begin()->first;
                }
            }
            end++;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/find-the-kth-smallest-sum-of-a-matrix-with-sorted-rows/

You are given an m x n matrix mat that has its rows sorted in non-decreasing order and an integer k.

You are allowed to choose exactly one element from each row to form an array.

Return the kth smallest array sum among all possible arrays.

 

Example 1:

Input: mat = [[1,3,11],[2,4,6]], k = 5
Output: 7
Explanation: Choosing one element from each row, the first k smallest sum are:
[1,2], [1,4], [3,2], [3,4], [1,6]. Where the 5th sum is 7.
Example 2:

Input: mat = [[1,3,11],[2,4,6]], k = 9
Output: 17
Example 3:

Input: mat = [[1,10,10],[1,4,5],[2,3,6]], k = 7
Output: 9
Explanation: Choosing one element from each row, the first k smallest sum are:
[1,1,2], [1,1,3], [1,4,2], [1,4,3], [1,1,6], [1,5,2], [1,5,3]. Where the 7th sum is 9.  
 

Constraints:

m == mat.length
n == mat.length[i]
1 <= m, n <= 40
1 <= mat[i][j] <= 5000
1 <= k <= min(200, nm)
mat[i] is a non-decreasing array.

class Solution
{
public:
    int kthSmallest(vector<vector<int>> &mat, int k)
    {
        int m = mat.size();
        int n = mat[0].size();
        pair<int, vector<int>> p;
        set<pair<int, vector<int>>> s;
        for(int i = 0; i < m; i++)
        {
            p.second.push_back(0);
            p.first += mat[i][0];
        }
        s.insert(p);
        if(k == 1) return p.first;
        while(k > 1)
        {
            auto itr = s.begin();
            auto p = (*itr);
            s.erase(p);
            for(int i = 0; i < m; i++)
            {
                if(p.second[i] + 1 < n)
                {
                    p.first += mat[i][p.second[i] + 1] - mat[i][p.second[i]];
                    p.second[i]++;
                    s.insert(p);
                    p.second[i]--;
                    p.first += mat[i][p.second[i]] - mat[i][p.second[i] + 1];
                }
            }
            --k;
        }
        return s.begin()->first;
    }
};


// Source https://leetcode.com/problems/build-an-array-with-stack-operations/

You are given an array target and an integer n.

In each iteration, you will read a number from list = [1, 2, 3, ..., n].

Build the target array using the following operations:

"Push": Reads a new element from the beginning list, and pushes it in the array.
"Pop": Deletes the last element of the array.
If the target array is already built, stop reading more elements.
Return a list of the operations needed to build target. The test cases are generated so that the answer is unique.

 

Example 1:

Input: target = [1,3], n = 3
Output: ["Push","Push","Pop","Push"]
Explanation: 
Read number 1 and automatically push in the array -> [1]
Read number 2 and automatically push in the array then Pop it -> [1]
Read number 3 and automatically push in the array -> [1,3]
Example 2:

Input: target = [1,2,3], n = 3
Output: ["Push","Push","Push"]
Example 3:

Input: target = [1,2], n = 4
Output: ["Push","Push"]
Explanation: You only need to read the first 2 numbers and stop.
 

Constraints:

1 <= target.length <= 100
1 <= n <= 100
1 <= target[i] <= n
target is strictly increasing.

class Solution
{
public:
    vector<string> buildArray(vector<int> &target, int n)
    {
        vector<string> res;
        if(target.back() != n)
        {
            n = target.back();
        }
        int len = target.size();
        for(int i = 1, j = 0; i <= n && j < len; ++i)
        {
            if(target[j] == i)
            {
                res.push_back("Push");
                ++j;
            }
            else
            {
                res.push_back("Push");
                res.push_back("Pop");
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/count-triplets-that-can-form-two-arrays-of-equal-xor/

Given an array of integers arr.

We want to select three indices i, j and k where (0 <= i < j <= k < arr.length).

Let's define a and b as follows:

a = arr[i] ^ arr[i + 1] ^ ... ^ arr[j - 1]
b = arr[j] ^ arr[j + 1] ^ ... ^ arr[k]
Note that ^ denotes the bitwise-xor operation.

Return the number of triplets (i, j and k) Where a == b.

arr[i] ^ arr[i + 1] ^ ... ^ arr[j - 1] ^ arr[j] ^ arr[j + 1] ^ ... ^ arr[k] = 0

arr[i] ^ arr[i + 1] ^ ... ^ arr[k] = 0
k > i
j > i && j <= k
j的个数为k - i

Example 1:

Input: arr = [2,3,1,6,7]
Output: 4
Explanation: The triplets are (0,1,2), (0,2,2), (2,3,4) and (2,4,4)
Example 2:

Input: arr = [1,1,1,1,1]
Output: 10
 

Constraints:

1 <= arr.length <= 300
1 <= arr[i] <= 108

class Solution
{
public:
    int countTriplets(vector<int> &arr)
    {
        int n = arr.size();
        long long ans = 0;
        for(int i = 0; i < n; i++)
        {
            int val = arr[i];
            for(int k = i + 1; k < n; k++)
            {
                val = val ^ arr[k];
                if (val == 0)
                {
                    ans += ( k - i);
                }
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/minimum-time-to-collect-all-apples-in-a-tree/

Given an undirected tree consisting of n vertices numbered from 0 to n-1, which has some apples in their vertices. You spend 1 second to walk over one edge of the tree. 
Return the minimum time in seconds you have to spend to collect all apples in the tree, starting at vertex 0 and coming back to this vertex.

The edges of the undirected tree are given in the array edges, where edges[i] = [ai, bi] means that exists an edge connecting the vertices ai and bi. 
Additionally, there is a boolean array hasApple, where hasApple[i] = true means that vertex i has an apple; otherwise, it does not have any apple.

 

Example 1:


Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,true,true,false]
Output: 8 
Explanation: The figure above represents the given tree where red vertices have an apple. One optimal path to collect all apples is shown by the green arrows.  
Example 2:


Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,false,true,false]
Output: 6
Explanation: The figure above represents the given tree where red vertices have an apple. One optimal path to collect all apples is shown by the green arrows.  
Example 3:

Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,false,false,false,false,false]
Output: 0
 

Constraints:

1 <= n <= 105
edges.length == n - 1
edges[i].length == 2
0 <= ai < bi <= n - 1
fromi < toi
hasApple.length == n

class Solution
{
public:
    int result = 0;

    int minTime(int n, vector<vector<int>> &edges, vector<bool> &hasApple)
    {
        vector<vector<int>> adj(n);
        vector<int> visited(n);
        for (auto &v : edges)
        {
            adj[v[0]].push_back(v[1]);
            adj[v[1]].push_back(v[0]);
        }
        DFS(adj, visited, hasApple, 0);
        return result;
    }

    bool DFS(vector<vector<int>> &adj, vector<int> &visited, vector<bool> &hasApple, int current)
    {
        if(visited[current] == 1) return false;
        visited[current] = 1;
        bool path_contain_apple = false;
        for (auto next : adj[current])
        {
            bool is_apple_node = DFS(adj, visited, hasApple, next);
            if(is_apple_node)
            {
                result += 2;
                path_contain_apple = true;
            }
        }
        return hasApple[current] || path_contain_apple;
    }
};


// Source https://leetcode.com/problems/number-of-ways-of-cutting-a-pizza/

Given a rectangular pizza represented as a rows x cols matrix containing the following characters: 'A' (an apple) and '.' (empty cell) and given the integer k. 
You have to cut the pizza into k pieces using k-1 cuts. 

For each cut you choose the direction: vertical or horizontal, then you choose a cut position at the cell boundary and cut the pizza into two pieces. 
If you cut the pizza vertically, give the left part of the pizza to a person. If you cut the pizza horizontally, give the upper part of the pizza to a person. 
Give the last piece of pizza to the last person.

Return the number of ways of cutting the pizza such that each piece contains at least one apple. Since the answer can be a huge number, return this modulo 10^9 + 7.

 

Example 1:



Input: pizza = ["A..","AAA","..."], k = 3
Output: 3 
Explanation: The figure above shows the three ways to cut the pizza. Note that pieces must contain at least one apple.
Example 2:

Input: pizza = ["A..","AA.","..."], k = 3
Output: 1
Example 3:

Input: pizza = ["A..","A..","..."], k = 1
Output: 1
 

Constraints:

1 <= rows, cols <= 50
rows == pizza.length
cols == pizza[i].length
1 <= k <= 10
pizza consists of characters 'A' and '.' only.

class Solution
{
public:
    int m, n;
    int dp[51][51][11];
    int appleCnt[52][52];
    const int mod = 1e9 + 7;

    int recur(int r, int c, int k)
    {
        if (k == 1) return 1;
        if (dp[r][c][k] != -1) return dp[r][c][k];
        int ans = 0;
        for (int i = r + 1; appleCnt[i][c] > 0; i++)
        {
            if (appleCnt[r][c] - appleCnt[i][c] > 0)
            {
                ans = (ans + recur(i, c, k - 1)) % mod;
            }
        }
        for (int i = c + 1; appleCnt[r][i] > 0; i++)
        {
            if (appleCnt[r][c] - appleCnt[r][i] > 0)
            {
                ans = (ans + recur(r, i, k - 1)) % mod;
            }
        }
        return dp[r][c][k] = ans;
    }

    int ways(vector<string> &pizza, int k)
    {
        m = pizza.size();
        n = pizza[0].size();
        memset(dp, -1, sizeof(dp));
        memset(appleCnt, 0, sizeof(appleCnt));
        for (int i = m - 1; i >= 0; --i)
        {
            int t = 0;
            for (int j = n - 1; j >= 0; j--)
            {
                t += pizza[i][j] == 'A';
                appleCnt[i][j] = t + appleCnt[i + 1][j];
            }
        }
        return recur(0, 0, k);
    }
};


// Source https://leetcode.com/problems/consecutive-characters/

The power of the string is the maximum length of a non-empty substring that contains only one unique character.

Given a string s, return the power of s.

 

Example 1:

Input: s = "leetcode"
Output: 2
Explanation: The substring "ee" is of length 2 with the character 'e' only.
Example 2:

Input: s = "abbcccddddeeeeedcba"
Output: 5
Explanation: The substring "eeeee" is of length 5 with the character 'e' only.
 

Constraints:

1 <= s.length <= 500
s consists of only lowercase English letters.

class Solution
{
public:
    int maxPower(string s)
    {
        int n = s.length();
        int ans = 1, curr = 1;
        for(int i = 1; i < n; i++)
        {
            if(s[i] == s[i - 1])
            {
                curr++;
            }
            else
            {
                curr = 1;
            }
            ans = max(ans, curr);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/simplified-fractions/

Given an integer n, return a list of all simplified fractions between 0 and 1 (exclusive) such that the denominator is less-than-or-equal-to n. You can return the answer in any order.

 

Example 1:

Input: n = 2
Output: ["1/2"]
Explanation: "1/2" is the only unique fraction with a denominator less-than-or-equal-to 2.
Example 2:

Input: n = 3
Output: ["1/2","1/3","2/3"]
Example 3:

Input: n = 4
Output: ["1/2","1/3","1/4","2/3","3/4"]
Explanation: "2/4" is not a simplified fraction because it can be simplified to "1/2".
 

Constraints:

1 <= n <= 100

class Solution
{
public:
    vector<string> simplifiedFractions(int n)
    {
        vector<string> ans;
        for(int i = 2; i <= n; i++)
        {
            for(int j = 1; j < i; j++)
            {
                if(gcd(i, j) == 1)
                {
                    ans.push_back(to_string(j) + "/" + to_string(i));
                }
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/count-good-nodes-in-binary-tree/

Given a binary tree root, a node X in the tree is named good if in the path from root to X there are no nodes with a value greater than X.

Return the number of good nodes in the binary tree.

 

Example 1:



Input: root = [3,1,4,3,null,1,5]
Output: 4
Explanation: Nodes in blue are good.
Root Node (3) is always a good node.
Node 4 -> (3,4) is the maximum value in the path starting from the root.
Node 5 -> (3,4,5) is the maximum value in the path
Node 3 -> (3,1,3) is the maximum value in the path.
Example 2:



Input: root = [3,3,null,4,2]
Output: 3
Explanation: Node 2 -> (3, 3, 2) is not good, because "3" is higher than it.
Example 3:

Input: root = [1]
Output: 1
Explanation: Root is considered as good.
 

Constraints:

The number of nodes in the binary tree is in the range [1, 10^5].
Each node's value is between [-10^4, 10^4].

class Solution
{
public:
    int ans;

    void recur(TreeNode *root, int currMax)
    {
        if (!root) return;
        if (root->val >= currMax)
        {
            ++ans;
        }
        currMax = max(currMax, root->val);
        recur(root->left, currMax);
        recur(root->right, currMax);
    }

    int goodNodes(TreeNode *root)
    {
        ans = 0;
        recur(root, INT_MIN);
        return ans;
    }
};


// Source https://leetcode.com/problems/form-largest-integer-with-digits-that-add-up-to-target/

Given an array of integers cost and an integer target, return the maximum integer you can paint under the following rules:

The cost of painting a digit (i + 1) is given by cost[i] (0-indexed).
The total cost used must be equal to target.
The integer does not have 0 digits.
Since the answer may be very large, return it as a string. If there is no way to paint any integer given the condition, return "0".

 

Example 1:

Input: cost = [4,3,2,5,6,7,2,5,5], target = 9
Output: "7772"
Explanation: The cost to paint the digit '7' is 2, and the digit '2' is 3. Then cost("7772") = 2*3+ 3*1 = 9. You could also paint "977", but "7772" is the largest number.
Digit    cost
  1  ->   4
  2  ->   3
  3  ->   2
  4  ->   5
  5  ->   6
  6  ->   7
  7  ->   2
  8  ->   5
  9  ->   5
Example 2:

Input: cost = [7,6,5,5,5,6,8,7,8], target = 12
Output: "85"
Explanation: The cost to paint the digit '8' is 7, and the digit '5' is 5. Then cost("85") = 7 + 5 = 12.
Example 3:

Input: cost = [2,4,6,2,4,6,4,4,4], target = 5
Output: "0"
Explanation: It is impossible to paint any integer with total cost equal to target.
 

Constraints:

cost.length == 9
1 <= cost[i], target <= 5000

class Solution
{
public:
    string largestNumber(vector<int> &cost, int target)
    {
        int dp[target + 1];
        memset(dp, -1, sizeof(dp));
        dp[0] = 0;
        for(int i = 0; i < 9; i++)
        {
            for(int j = cost[i]; j <= target; j++)
            {
                if(dp[j - cost[i]] != -1)
                    dp[j] = max(dp[j], dp[j - cost[i]] + 1);
            }
        }
        if (dp[target] == -1) return "0";
        string res = "";
        for (int i = 8; i >= 0; --i)
        {
            while (target >= cost[i] && dp[target] == dp[target - cost[i]] + 1)
            {
                res.push_back('1' + i);
                target -= cost[i];
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/number-of-students-doing-homework-at-a-given-time/

Given two integer arrays startTime and endTime and given an integer queryTime.

The ith student started doing their homework at the time startTime[i] and finished it at time endTime[i].

Return the number of students doing their homework at time queryTime. 
More formally, return the number of students where queryTime lays in the interval [startTime[i], endTime[i]] inclusive.

 

Example 1:

Input: startTime = [1,2,3], endTime = [3,2,7], queryTime = 4
Output: 1
Explanation: We have 3 students where:
The first student started doing homework at time 1 and finished at time 3 and wasn't doing anything at time 4.
The second student started doing homework at time 2 and finished at time 2 and also wasn't doing anything at time 4.
The third student started doing homework at time 3 and finished at time 7 and was the only student doing homework at time 4.
Example 2:

Input: startTime = [4], endTime = [4], queryTime = 4
Output: 1
Explanation: The only student was doing their homework at the queryTime.
 

Constraints:

startTime.length == endTime.length
1 <= startTime.length <= 100
1 <= startTime[i] <= endTime[i] <= 1000
1 <= queryTime <= 1000

class Solution
{
public:
    int busyStudent(vector<int> &startTime, vector<int> &endTime, int queryTime)
    {
        int ans = 0;
        for (int i = 0; i < startTime.size(); i++)
        {
            if (queryTime >= startTime[i] && queryTime <= endTime[i])
                ans++;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/rearrange-words-in-a-sentence/

Given a sentence text (A sentence is a string of space-separated words) in the following format:

First letter is in upper case.
Each word in text are separated by a single space.
Your task is to rearrange the words in text such that all words are rearranged in an increasing order of their lengths. If two words have the same length, arrange them in their original order.

Return the new text following the format shown above.

 

Example 1:

Input: text = "Leetcode is cool"
Output: "Is cool leetcode"
Explanation: There are 3 words, "Leetcode" of length 8, "is" of length 2 and "cool" of length 4.
Output is ordered by length and the new first word starts with capital letter.
Example 2:

Input: text = "Keep calm and code on"
Output: "On and keep calm code"
Explanation: Output is ordered as follows:
"On" 2 letters.
"and" 3 letters.
"keep" 4 letters in case of tie order by position in original text.
"calm" 4 letters.
"code" 4 letters.
Example 3:

Input: text = "To be or not to be"
Output: "To be or to be not"
 

Constraints:

text begins with a capital letter and then contains lowercase letters and single space between words.
1 <= text.length <= 10^5

class Solution
{
public:

    string arrangeWords(string s)
    {
        s[0] = tolower(s[0]);
        vector<pair<string, int>> v;
        stringstream ss(s);
        string t;
        int i = 1;
        while(ss >> t)
        {
            v.push_back({t, i});
            i++;
        }
        sort(begin(v), end(v), [] (auto & p1, auto & p2)
        {
            if (p1.first.length() == p2.first.length()) return p1.second < p2.second;
            return p1.first.length() < p2.first.length();
        });
        string & temp = v[0].first;
        temp[0] = toupper(temp[0]);
        string res;
        for(auto &p : v)
        {
            res += p.first;
            res.push_back(' ');
        }
        res.pop_back();
        return res;
    }
};


// Source https://leetcode.com/problems/people-whose-list-of-favorite-companies-is-not-a-subset-of-another-list/

Given the array favoriteCompanies where favoriteCompanies[i] is the list of favorites companies for the ith person (indexed from 0).

Return the indices of people whose list of favorite companies is not a subset of any other list of favorites companies. You must return the indices in increasing order.

 

Example 1:

Input: favoriteCompanies = [["leetcode","google","facebook"],["google","microsoft"],["google","facebook"],["google"],["amazon"]]
Output: [0,1,4] 
Explanation: 
Person with index=2 has favoriteCompanies[2]=["google","facebook"] which is a subset of favoriteCompanies[0]=["leetcode","google","facebook"] corresponding to the person with index 0. 
Person with index=3 has favoriteCompanies[3]=["google"] which is a subset of favoriteCompanies[0]=["leetcode","google","facebook"] and favoriteCompanies[1]=["google","microsoft"]. 
Other lists of favorite companies are not a subset of another list, therefore, the answer is [0,1,4].
Example 2:

Input: favoriteCompanies = [["leetcode","google","facebook"],["leetcode","amazon"],["facebook","google"]]
Output: [0,1] 
Explanation: In this case favoriteCompanies[2]=["facebook","google"] is a subset of favoriteCompanies[0]=["leetcode","google","facebook"], therefore, the answer is [0,1].
Example 3:

Input: favoriteCompanies = [["leetcode"],["google"],["facebook"],["amazon"]]
Output: [0,1,2,3]
 

Constraints:

1 <= favoriteCompanies.length <= 100
1 <= favoriteCompanies[i].length <= 500
1 <= favoriteCompanies[i][j].length <= 20
All strings in favoriteCompanies[i] are distinct.
All lists of favorite companies are distinct, that is, If we sort alphabetically each list then favoriteCompanies[i] != favoriteCompanies[j].
All strings consist of lowercase English letters only.

class Solution
{
public:
    vector<int> peopleIndexes(vector<vector<string>> &favoriteCompanies)
    {
        int n = favoriteCompanies.size();
        unordered_map<string, bitset<100>> mp;
        for(int i = 0; i < n ; i++)
        {
            bitset<100> comp;
            comp.set(i);
            for(auto &str : favoriteCompanies[i]) mp[str] |= comp;
        }
        vector<int> answer;
        for(int i = 0; i < n; i++)
        {
            bitset<100> comp;
            comp.flip();
            for(auto &str : favoriteCompanies[i]) comp &= mp[str];
            if(comp.count() == 1) answer.push_back(i);
        }
        return answer;
    }
};


// Source https://leetcode.com/problems/maximum-number-of-darts-inside-of-a-circular-dartboard/

Alice is throwing n darts on a very large wall. You are given an array darts where darts[i] = [xi, yi] is the position of the ith dart that Alice threw on the wall.

Bob knows the positions of the n darts on the wall. He wants to place a dartboard of radius r on the wall so that the maximum number of darts that Alice throws lies on the dartboard.

Given the integer r, return the maximum number of darts that can lie on the dartboard.

 

Example 1:


Input: darts = [[-2,0],[2,0],[0,2],[0,-2]], r = 2
Output: 4
Explanation: Circle dartboard with center in (0,0) and radius = 2 contain all points.
Example 2:


Input: darts = [[-3,0],[3,0],[2,6],[5,4],[0,9],[7,8]], r = 5
Output: 5
Explanation: Circle dartboard with center in (0,4) and radius = 5 contain all points except the point (7,8).
 

Constraints:

1 <= darts.length <= 100
darts[i].length == 2
-104 <= xi, yi <= 104
1 <= r <= 5000

         center

A        mid               B

center为圆的中心点，A和B为圆边上的2个点，r为圆的半径
dist(center, A) = r
dist(center, B) = r
mid 为A与B的中位点
x3 = (x1 + x2) / 2
y3 = (y1 + y2) / 2
dist(A, mid) = t
dist(center, mid) = sqrt(r^2 - t^2)
A到B的连线与x坐标轴的夹角 = atan2(y1 - y2, x1 - x2)
A到B的连线与x坐标轴的夹角 = A到mid的连线与x坐标轴的夹角 
经过mid竖直画一条线L
A到mid的连线与x坐标轴的夹角 + A到mid的连线与L的夹角 = 90度
center到mid的连线与L的夹角 + A到mid的连线与L的夹角 = 90度
A到mid的连线与x坐标轴的夹角 = center到mid的连线与L的夹角

class Solution
{
public:

    struct Point
    {
        double x, y;
        Point(double tx, double ty)
        {
            x = tx;
            y = ty;
        }
    };

    double dist(Point &p1, Point &p2)
    {
        return sqrt(pow(p1.x - p2.x, 2) + pow(p1.y - p2.y, 2));
    }

    Point GetCircleCenter(Point &p1, Point &p2, int r)
    {
        Point mid = Point((p1.x + p2.x) / 2, (p1.y + p2.y) / 2);
        double angle = atan2(p1.y - p2.y, p2.x - p1.x);
        double d = sqrt(r * r - pow(dist(p1, mid), 2));
        return Point(mid.x + d * sin(angle), mid.y + d * cos(angle));
    }

    int numPoints(vector<vector<int>> &points, int r)
    {
        int n = points.size();
        int ans = 1;
        for(int i = 0; i < n; i++)
        {
            for(int j = i + 1; j < n; j++)
            {
                Point p1 = Point(points[i][0], points[i][1]);
                Point p2 = Point(points[j][0], points[j][1]);
                if(dist(p1, p2) > 2.0 * r) continue;
                Point center = GetCircleCenter(p1, p2, r);
                int cnt = 0;
                for(int k = 0; k < n; k++)
                {
                    Point pk = Point(points[k][0], points[k][1]);
                    if(dist(center, pk) < 1.0 * r + 1e-8) cnt++;
                }
                ans = max(ans, cnt);
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/check-if-a-word-occurs-as-a-prefix-of-any-word-in-a-sentence/

Given a sentence that consists of some words separated by a single space, and a searchWord, check if searchWord is a prefix of any word in sentence.

Return the index of the word in sentence (1-indexed) where searchWord is a prefix of this word. 
If searchWord is a prefix of more than one word, return the index of the first word (minimum index). If there is no such word return -1.

A prefix of a string s is any leading contiguous substring of s.

 

Example 1:

Input: sentence = "i love eating burger", searchWord = "burg"
Output: 4
Explanation: "burg" is prefix of "burger" which is the 4th word in the sentence.
Example 2:

Input: sentence = "this problem is an easy problem", searchWord = "pro"
Output: 2
Explanation: "pro" is prefix of "problem" which is the 2nd and the 6th word in the sentence, but we return 2 as it's the minimal index.
Example 3:

Input: sentence = "i am tired", searchWord = "you"
Output: -1
Explanation: "you" is not a prefix of any word in the sentence.
 

Constraints:

1 <= sentence.length <= 100
1 <= searchWord.length <= 10
sentence consists of lowercase English letters and spaces.
searchWord consists of lowercase English letters.

class Solution
{
public:
    int isPrefixOfWord(string sen, string sw)
    {
        vector<pair<string, int>> v;
        stringstream ss(sen);
        string t;
        int i = 1;
        while(ss >> t)
        {
            v.push_back({t, i});
            i++;
        }
        for(auto &p : v)
        {
            auto pos = p.first.find(sw);
            if (pos == 0)
            {
                return p.second;
            }
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/

Given a string s and an integer k, return the maximum number of vowel letters in any substring of s with length k.

Vowel letters in English are 'a', 'e', 'i', 'o', and 'u'.

 

Example 1:

Input: s = "abciiidef", k = 3
Output: 3
Explanation: The substring "iii" contains 3 vowel letters.
Example 2:

Input: s = "aeiou", k = 2
Output: 2
Explanation: Any substring of length 2 contains 2 vowels.
Example 3:

Input: s = "leetcode", k = 3
Output: 2
Explanation: "lee", "eet" and "ode" contain 2 vowels.
 

Constraints:

1 <= s.length <= 105
s consists of lowercase English letters.
1 <= k <= s.length


class Solution
{
public:

    int maxVowels(string s, int k)
    {
        int n = s.length();
        int count = 0;
        int flag[256] = {0};
        flag['a'] = 1;
        flag['e'] = 1;
        flag['i'] = 1;
        flag['o'] = 1;
        flag['u'] = 1;
        for(int i = 0; i < k; i++)
        {
            if(flag[s[i]]) count++;
        }
        int result = count;
        int start = 0;
        for(int i = k; i < n; i++)
        {
            if(flag[s[i]]) count++;
            if(flag[s[start]]) count--;
            result = max(result, count);
            start++;
        }
        return result;
    }
};


// Source https://leetcode.com/problems/pseudo-palindromic-paths-in-a-binary-tree/

Given a binary tree where node values are digits from 1 to 9. A path in the binary tree is said to be pseudo-palindromic 
if at least one permutation of the node values in the path is a palindrome.

Return the number of pseudo-palindromic paths going from the root node to leaf nodes.

 

Example 1:



Input: root = [2,3,1,3,1,null,1]
Output: 2 
Explanation: The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the red path [2,3,3], the green path [2,1,1], and the path [2,3,1]. Among these paths only red path and green path are pseudo-palindromic paths since the red path [2,3,3] can be rearranged in [3,2,3] (palindrome) and the green path [2,1,1] can be rearranged in [1,2,1] (palindrome).
Example 2:



Input: root = [2,1,1,1,3,null,null,null,null,null,1]
Output: 1 
Explanation: The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the green path [2,1,1], the path [2,1,3,1], and the path [2,1]. Among these paths only the green path is pseudo-palindromic since [2,1,1] can be rearranged in [1,2,1] (palindrome).
Example 3:

Input: root = [9]
Output: 1
 

Constraints:

The number of nodes in the tree is in the range [1, 105].
1 <= Node.val <= 9

class Solution
{
public:
    int ans;

    int pseudoPalindromicPaths (TreeNode *root)
    {
        ans = 0;
        vector<int> v(10);
        helper(root, v);
        return ans;
    }

    void helper(TreeNode *root, vector<int> &v)
    {
        if(!root) return;
        v[root->val]++;
        if(!root->left && !root->right)
        {
            int odd_cnt = 0;
            for(auto num : v)
            {
                if(num % 2) odd_cnt++;
            }
            if (odd_cnt <= 1) ++ans;
        }
        else
        {
            helper(root->left, v);
            helper(root->right, v);
        }
        v[root->val]--;
    }
};


// Source https://leetcode.com/problems/max-dot-product-of-two-subsequences/

Given two arrays nums1 and nums2.

Return the maximum dot product between non-empty subsequences of nums1 and nums2 with the same length.

A subsequence of a array is a new array which is formed from the original array by deleting some (can be none) of the characters 
without disturbing the relative positions of the remaining characters. (ie, [2,3,5] is a subsequence of [1,2,3,4,5] while [1,5,3] is not).

 

Example 1:

Input: nums1 = [2,1,-2,5], nums2 = [3,0,-6]
Output: 18
Explanation: Take subsequence [2,-2] from nums1 and subsequence [3,-6] from nums2.
Their dot product is (2*3 + (-2)*(-6)) = 18.
Example 2:

Input: nums1 = [3,-2], nums2 = [2,-6,7]
Output: 21
Explanation: Take subsequence [3] from nums1 and subsequence [7] from nums2.
Their dot product is (3*7) = 21.
Example 3:

Input: nums1 = [-1,-1], nums2 = [1,1]
Output: -1
Explanation: Take subsequence [-1] from nums1 and subsequence [1] from nums2.
Their dot product is -1.
 

Constraints:

1 <= nums1.length, nums2.length <= 500
-1000 <= nums1[i], nums2[i] <= 1000

class Solution
{
public:
    int n, m;
    int dp[505][505];

    int recur(int i, int j, vector<int> &a, vector<int> &b)
    {
        if(i == n || j == m) return -1e9;
        if(dp[i][j] != -1) return dp[i][j];
        int ans = -1e9;
        ans = max(ans, a[i] * b[j] + max(0, recur(i + 1, j + 1, a, b)));
        ans = max(ans, recur(i + 1, j, a, b));
        ans = max(ans, recur(i, j + 1, a, b));
        return dp[i][j] = ans;
    }

    int maxDotProduct(vector<int> &a, vector<int> &b)
    {
        n = a.size();
        m = b.size();
        memset(dp, -1, sizeof(dp));
        return recur(0, 0, a, b);
    }
};


// Source https://leetcode.com/problems/make-two-arrays-equal-by-reversing-sub-arrays/

You are given two integer arrays of equal length target and arr. In one step, you can select any non-empty sub-array of arr and reverse it. You are allowed to make any number of steps.

Return true if you can make arr equal to target or false otherwise.

 

Example 1:

Input: target = [1,2,3,4], arr = [2,4,1,3]
Output: true
Explanation: You can follow the next steps to convert arr to target:
1- Reverse sub-array [2,4,1], arr becomes [1,4,2,3]
2- Reverse sub-array [4,2], arr becomes [1,2,4,3]
3- Reverse sub-array [4,3], arr becomes [1,2,3,4]
There are multiple ways to convert arr to target, this is not the only way to do so.
Example 2:

Input: target = [7], arr = [7]
Output: true
Explanation: arr is equal to target without any reverses.
Example 3:

Input: target = [3,7,9], arr = [3,7,11]
Output: false
Explanation: arr does not have value 9 and it can never be converted to target.
 

Constraints:

target.length == arr.length
1 <= target.length <= 1000
1 <= target[i] <= 1000
1 <= arr[i] <= 1000

In one step, you can select any non-empty sub-array of arr and reverse it.
通过若干次操作，使得arr[0] = target[0]
通过若干次操作，使得arr[1] = target[1]
通过若干次操作，使得arr[2] = target[2]
...
通过若干次操作，使得arr[n-1] = target[n-1]

class Solution
{
public:
    bool canBeEqual(vector<int> &target, vector<int> &arr)
    {
        int n = arr.size();
        sort(target.begin(), target.end());
        sort(arr.begin(), arr.end());
        bool flag = true ;
        for(int i = 0; i < n; i++)
        {
            if(target[i] != arr[i])
            {
                flag = false ;
                break;
            }
        }
        return flag;
    }
};


// Source https://leetcode.com/problems/check-if-a-string-contains-all-binary-codes-of-size-k/

Given a binary string s and an integer k, return true if every binary code of length k is a substring of s. Otherwise, return false.

 

Example 1:

Input: s = "00110110", k = 2
Output: true
Explanation: The binary codes of length 2 are "00", "01", "10" and "11". They can be all found as substrings at indices 0, 1, 3 and 2 respectively.
Example 2:

Input: s = "0110", k = 1
Output: true
Explanation: The binary codes of length 1 are "0" and "1", it is clear that both exist as a substring. 
Example 3:

Input: s = "0110", k = 2
Output: false
Explanation: The binary code "00" is of length 2 and does not exist in the array.
 

Constraints:

1 <= s.length <= 5 * 105
s[i] is either '0' or '1'.
1 <= k <= 20

class Solution
{
public:
    bool hasAllCodes(string s, int k)
    {
        int total = (1 << k);
        int len = s.length();
        if(len < k + total - 1) return false;
        vector<int> present(total, false);
        int pow = k - 1;
        int value = 0;
        for(int i = 0; i < k; ++i)
        {
            value = value + ((s[i] - '0') * (1 << pow));
            pow--;
        }
        present[value] = true;
        int left = 0;
        for(int i = k; i < len; ++i)
        {
            value -= ((s[left] - '0') * (1 << (k - 1)));
            value *= 2;
            value += (s[i] - '0');
            present[value] = true;
            ++left;
        }
        for(int i = 0; i < total; ++i)
        {
            if(!present[i]) return false;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/course-schedule-iv/

There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites 
where prerequisites[i] = [ai, bi] indicates that you must take course ai first if you want to take course bi.

For example, the pair [0, 1] indicates that you have to take course 0 before you can take course 1.
Prerequisites can also be indirect. If course a is a prerequisite of course b, and course b is a prerequisite of course c, then course a is a prerequisite of course c.

You are also given an array queries where queries[j] = [uj, vj]. For the jth query, you should answer whether course uj is a prerequisite of course vj or not.

Return a boolean array answer, where answer[j] is the answer to the jth query.

 

Example 1:


Input: numCourses = 2, prerequisites = [[1,0]], queries = [[0,1],[1,0]]
Output: [false,true]
Explanation: The pair [1, 0] indicates that you have to take course 1 before you can take course 0.
Course 0 is not a prerequisite of course 1, but the opposite is true.
Example 2:

Input: numCourses = 2, prerequisites = [], queries = [[1,0],[0,1]]
Output: [false,false]
Explanation: There are no prerequisites, and each course is independent.
Example 3:


Input: numCourses = 3, prerequisites = [[1,2],[1,0],[2,0]], queries = [[1,0],[1,2]]
Output: [true,true]
 

Constraints:

2 <= numCourses <= 100
0 <= prerequisites.length <= (numCourses * (numCourses - 1) / 2)
prerequisites[i].length == 2
0 <= ai, bi <= n - 1
ai != bi
All the pairs [ai, bi] are unique.
The prerequisites graph has no cycles.
1 <= queries.length <= 104
0 <= ui, vi <= n - 1
ui != vi

class Solution
{
public:
    void bfs(vector<int> adj[], int n, int src, vector<vector<bool>> &reachable)
    {
        vector<bool> vis(n, false);
        vis[src] = true;
        queue<int> q;
        q.push(src);
        while(!q.empty())
        {
            int node = q.front();
            q.pop();
            for(int next : adj[node])
            {
                if(!vis[next])
                {
                    reachable[src][next] = true;
                    q.push(next);
                    vis[next] = true;
                }
            }
        }
    }

    vector<bool> checkIfPrerequisite(int n, vector<vector<int>> &prereq, vector<vector<int>> &q)
    {
        vector<int> adj[n];
        for(auto &v : prereq)
        {
            adj[v[0]].push_back(v[1]);
        }
        vector<vector<bool>> reachable(n, vector<bool>(n));
        for(int i = 0; i < n; i++)
        {
            bfs(adj, n, i, reachable);
        }
        vector<bool> ans;
        for(auto &v : q)
        {
            int a = v[0], b = v[1];
            ans.push_back(reachable[a][b]);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/cherry-pickup-ii/

You are given a rows x cols matrix grid representing a field of cherries where grid[i][j] represents the number of cherries that you can collect from the (i, j) cell.

You have two robots that can collect cherries for you:

Robot #1 is located at the top-left corner (0, 0), and
Robot #2 is located at the top-right corner (0, cols - 1).
Return the maximum number of cherries collection using both robots by following the rules below:

From a cell (i, j), robots can move to cell (i + 1, j - 1), (i + 1, j), or (i + 1, j + 1).
When any robot passes through a cell, It picks up all cherries, and the cell becomes an empty cell.
When both robots stay in the same cell, only one takes the cherries.
Both robots cannot move outside of the grid at any moment.
Both robots should reach the bottom row in grid.
 

Example 1:


Input: grid = [[3,1,1],[2,5,1],[1,5,5],[2,1,1]]
Output: 24
Explanation: Path of robot #1 and #2 are described in color green and blue respectively.
Cherries taken by Robot #1, (3 + 2 + 5 + 2) = 12.
Cherries taken by Robot #2, (1 + 5 + 5 + 1) = 12.
Total of cherries: 12 + 12 = 24.
Example 2:


Input: grid = [[1,0,0,0,0,0,1],[2,0,0,0,0,3,0],[2,0,9,0,0,0,0],[0,3,0,5,4,0,0],[1,0,2,3,0,0,6]]
Output: 28
Explanation: Path of robot #1 and #2 are described in color green and blue respectively.
Cherries taken by Robot #1, (1 + 9 + 5 + 2) = 17.
Cherries taken by Robot #2, (1 + 3 + 4 + 3) = 11.
Total of cherries: 17 + 11 = 28.
 

Constraints:

rows == grid.length
cols == grid[i].length
2 <= rows, cols <= 70
0 <= grid[i][j] <= 100

class Solution
{
public:
    int m, n;
    int dp[75][75][75];

    int recur(vector<vector<int>> &grid, int r1, int c1, int r2, int c2)
    {
        if(r1 >= m || r2 >= m || c1 < 0 || c2 < 0 || c1 >= n || c2 >= n) return 0;
        if(dp[r1][c1][c2] != -1) return dp[r1][c1][c2];
        int cherries = 0;
        if(r1 == r2 && c1 == c2)
        {
            cherries += grid[r1][c1];
        }
        else
        {
            cherries += grid[r1][c1];
            cherries += grid[r2][c2];
        }

        int path1 = recur(grid, r1 + 1, c1 - 1, r2 + 1, c2 - 1);
        int path2 = recur(grid, r1 + 1, c1 - 1, r2 + 1, c2);
        int path3 = recur(grid, r1 + 1, c1 - 1, r2 + 1, c2 + 1);
        int path4 = recur(grid, r1 + 1, c1, r2 + 1, c2 - 1);
        int path5 = recur(grid, r1 + 1, c1, r2 + 1, c2);
        int path6 = recur(grid, r1 + 1, c1, r2 + 1, c2 + 1);
        int path7 = recur(grid, r1 + 1, c1 + 1, r2 + 1, c2 - 1);
        int path8 = recur(grid, r1 + 1, c1 + 1, r2 + 1, c2);
        int path9 = recur(grid, r1 + 1, c1 + 1, r2 + 1, c2 + 1);

        cherries += max({path1, path2, path3, path4, path5, path6, path7, path8, path9});
        return dp[r1][c1][c2] = cherries;
    }

    int cherryPickup(vector<vector<int>> &grid)
    {
        m = grid.size();
        n = grid[0].size();
        memset(dp, -1, sizeof(dp));
        return recur(grid, 0, 0, 0, n - 1);
    }
};


// Source https://leetcode.com/problems/maximum-product-of-two-elements-in-an-array/

Given the array of integers nums, you will choose two different indices i and j of that array. Return the maximum value of (nums[i]-1)*(nums[j]-1).
 

Example 1:

Input: nums = [3,4,5,2]
Output: 12 
Explanation: If you choose the indices i=1 and j=2 (indexed from 0), you will get the maximum value, that is, (nums[1]-1)*(nums[2]-1) = (4-1)*(5-1) = 3*4 = 12. 
Example 2:

Input: nums = [1,5,4,5]
Output: 16
Explanation: Choosing the indices i=1 and j=3 (indexed from 0), you will get the maximum value of (5-1)*(5-1) = 16.
Example 3:

Input: nums = [3,7]
Output: 12
 

Constraints:

2 <= nums.length <= 500
1 <= nums[i] <= 10^3

class Solution
{
public:
    int maxProduct(vector<int> &nums)
    {
        priority_queue<int, vector<int>, greater<int>> pq;
        for (auto val : nums)
        {
            pq.push(val);
            if (pq.size() > 2) pq.pop();
        }
        int a = pq.top();
        pq.pop();
        int b = pq.top();
        return ((a - 1) * (b - 1));
    }
};


// Source https://leetcode.com/problems/maximum-area-of-a-piece-of-cake-after-horizontal-and-vertical-cuts/

You are given a rectangular cake of size h x w and two arrays of integers horizontalCuts and verticalCuts where:

horizontalCuts[i] is the distance from the top of the rectangular cake to the ith horizontal cut and similarly, and
verticalCuts[j] is the distance from the left of the rectangular cake to the jth vertical cut.
Return the maximum area of a piece of cake after you cut at each horizontal and vertical position provided in the arrays horizontalCuts and verticalCuts. 
Since the answer can be a large number, return this modulo 109 + 7.

 

Example 1:


Input: h = 5, w = 4, horizontalCuts = [1,2,4], verticalCuts = [1,3]
Output: 4 
Explanation: The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, the green piece of cake has the maximum area.
Example 2:


Input: h = 5, w = 4, horizontalCuts = [3,1], verticalCuts = [1]
Output: 6
Explanation: The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, the green and yellow pieces of cake have the maximum area.
Example 3:

Input: h = 5, w = 4, horizontalCuts = [3], verticalCuts = [3]
Output: 9
 

Constraints:

2 <= h, w <= 109
1 <= horizontalCuts.length <= min(h - 1, 105)
1 <= verticalCuts.length <= min(w - 1, 105)
1 <= horizontalCuts[i] < h
1 <= verticalCuts[i] < w
All the elements in horizontalCuts are distinct.
All the elements in verticalCuts are distinct.

class Solution
{
public:
    int maxArea(int h, int w, vector<int> &horizontalCuts, vector<int> &verticalCuts)
    {
        sort(horizontalCuts.begin(), horizontalCuts.end());
        sort(verticalCuts.begin(), verticalCuts.end());
        int n = horizontalCuts.size(), m = verticalCuts.size();
        vector<int> horizontalDiffs{horizontalCuts[0]}, verticalDiffs{verticalCuts[0]};
        horizontalDiffs.reserve(n + 1);
        verticalDiffs.reserve(m + 1);
        for (int i = 1; i < n; ++i)
        {
            horizontalDiffs.push_back(horizontalCuts[i] - horizontalCuts[i - 1]);
        }
        horizontalDiffs.push_back(h - horizontalCuts.back());
        for (int i = 1; i < m; ++i)
        {
            verticalDiffs.push_back(verticalCuts[i] - verticalCuts[i - 1]);
        }
        verticalDiffs.push_back(w - verticalCuts.back());
        long hMax = *max_element(horizontalDiffs.begin(), horizontalDiffs.end()) % 1000000007;
        long vMax = *max_element(verticalDiffs.begin(), verticalDiffs.end()) % 1000000007;
        return (hMax * vMax) % 1000000007;
    }
};


// Source https://leetcode.com/problems/reorder-routes-to-make-all-paths-lead-to-the-city-zero/

There are n cities numbered from 0 to n - 1 and n - 1 roads such that there is only one way to travel between two different cities (this network form a tree). 
Last year, The ministry of transport decided to orient the roads in one direction because they are too narrow.

Roads are represented by connections where connections[i] = [ai, bi] represents a road from city ai to city bi.

This year, there will be a big event in the capital (city 0), and many people want to travel to this city.

Your task consists of reorienting some roads such that each city can visit the city 0. Return the minimum number of edges changed.

It's guaranteed that each city can reach city 0 after reorder.

 

Example 1:


Input: n = 6, connections = [[0,1],[1,3],[2,3],[4,0],[4,5]]
Output: 3
Explanation: Change the direction of edges show in red such that each node can reach the node 0 (capital).
Example 2:


Input: n = 5, connections = [[1,0],[1,2],[3,2],[3,4]]
Output: 2
Explanation: Change the direction of edges show in red such that each node can reach the node 0 (capital).
Example 3:

Input: n = 3, connections = [[1,0],[2,0]]
Output: 0
 

Constraints:

2 <= n <= 5 * 104
connections.length == n - 1
connections[i].length == 2
0 <= ai, bi <= n - 1
ai != bi

class Solution
{
public:
    int ans;
    
    void dfs(int node, vector<pair<int, int>> graph[], vector<bool> &visited)
    {
        visited[node] = true;
        for(auto p : graph[node])
        {
            int next = p.first;
            int dir = p.second;
            if(visited[next] == false)
            {
                ans += dir;
                dfs(next, graph, visited);
            }
        }
        visited[node] = false;
    }

    int minReorder(int n, vector<vector<int>> &connections)
    {
        vector<pair<int, int>> graph[n];
        for (auto &v : connections)
        {
            graph[v[0]].push_back({v[1], 1});
            graph[v[1]].push_back({v[0], 0});
        }
        ans = 0;
        vector<bool> visited(n);
        dfs(0, graph, visited);
        return ans;
    }
};


// Source https://leetcode.com/problems/probability-of-a-two-boxes-having-the-same-number-of-distinct-balls/

Given 2n balls of k distinct colors. You will be given an integer array balls of size k where balls[i] is the number of balls of color i.

All the balls will be shuffled uniformly at random, then we will distribute the first n balls to the first box and the remaining n balls to the other box (Please read the explanation of the second example carefully).

Please note that the two boxes are considered different. For example, if we have two balls of colors a and b, and two boxes [] and (), then the distribution [a] (b) is considered different than the distribution [b] (a) (Please read the explanation of the first example carefully).

Return the probability that the two boxes have the same number of distinct balls. Answers within 10-5 of the actual value will be accepted as correct.

 

Example 1:

Input: balls = [1,1]
Output: 1.00000
Explanation: Only 2 ways to divide the balls equally:
- A ball of color 1 to box 1 and a ball of color 2 to box 2
- A ball of color 2 to box 1 and a ball of color 1 to box 2
In both ways, the number of distinct colors in each box is equal. The probability is 2/2 = 1
Example 2:

Input: balls = [2,1,1]
Output: 0.66667
Explanation: We have the set of balls [1, 1, 2, 3]
This set of balls will be shuffled randomly and we may have one of the 12 distinct shuffles with equal probability (i.e. 1/12):
[1,1 / 2,3], [1,1 / 3,2], [1,2 / 1,3], [1,2 / 3,1], [1,3 / 1,2], [1,3 / 2,1], [2,1 / 1,3], [2,1 / 3,1], [2,3 / 1,1], [3,1 / 1,2], [3,1 / 2,1], [3,2 / 1,1]
After that, we add the first two balls to the first box and the second two balls to the second box.
We can see that 8 of these 12 possible random distributions have the same number of distinct colors of balls in each box.
Probability is 8/12 = 0.66667
Example 3:

Input: balls = [1,2,1,2]
Output: 0.60000
Explanation: The set of balls is [1, 2, 2, 3, 4, 4]. It is hard to display all the 180 possible random shuffles of this set but it is easy to check that 108 of them will have the same number of distinct colors in each box.
Probability = 108 / 180 = 0.6
 

Constraints:

1 <= balls.length <= 8
1 <= balls[i] <= 6
sum(balls) is even.

class Solution
{
public:
    int n;
    int sum;
    long dp[25][50];

    long C(int a, int b)
    {
        if(a == b || a == 0) return 1;
        if(dp[a][b] > 0) return dp[a][b];
        dp[a][b] = C(a - 1, b - 1) + C(a, b - 1);
        return dp[a][b];
    }

    double getProbability(vector<int> &balls)
    {
        n = balls.size();
        memset(dp, 0, sizeof(dp));
        sum = 0;
        for(int ball : balls)
        {
            sum += ball;
        }
        long total = C(sum / 2, sum); //cnt of total cases
        long valid = dfs(balls, 0, 0, 0, 0, 0, 1); //cnt of valid cases
        return 1.0 * valid / total;
    }

    long dfs(vector<int> &balls, int pos, int suma, int sumb, int cnta, int cntb, long res)
    {
        if(suma > sum / 2 || sumb > sum / 2 ) return 0;
        if(pos == n) return cnta == cntb ? res : 0;
        long cnt = 0;
        cnt += dfs(balls, pos + 1, suma, sumb + balls[pos], cnta, cntb + 1, res * 1);
        cnt += dfs(balls, pos + 1, suma + balls[pos], sumb, cnta + 1, cntb, res * 1);
        for(int j = 1; j < balls[pos]; j++)
        {
            cnt += dfs(balls, pos + 1, suma + j, sumb + balls[pos] - j, cnta + 1, cntb + 1, res * C(j, balls[pos]));
        }
        return cnt;
    }
};


// Source https://leetcode.com/problems/shuffle-the-array/

Given the array nums consisting of 2n elements in the form [x1,x2,...,xn,y1,y2,...,yn].

Return the array in the form [x1,y1,x2,y2,...,xn,yn].

 

Example 1:

Input: nums = [2,5,1,3,4,7], n = 3
Output: [2,3,5,4,1,7] 
Explanation: Since x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 then the answer is [2,3,5,4,1,7].
Example 2:

Input: nums = [1,2,3,4,4,3,2,1], n = 4
Output: [1,4,2,3,3,2,4,1]
Example 3:

Input: nums = [1,1,2,2], n = 2
Output: [1,2,1,2]
 

Constraints:

1 <= n <= 500
nums.length == 2n
1 <= nums[i] <= 10^3

class Solution
{
public:
    vector<int> shuffle(vector<int> &nums, int n)
    {
        vector<int>v;
        for(int i = 0; i < n; i++)
        {
            v.push_back(nums[i]);
            v.push_back(nums[n + i]);
        }
        return v;
    }
};


// Source https://leetcode.com/problems/the-k-strongest-values-in-an-array/

Given an array of integers arr and an integer k.

A value arr[i] is said to be stronger than a value arr[j] if |arr[i] - m| > |arr[j] - m| where m is the median of the array.
If |arr[i] - m| == |arr[j] - m|, then arr[i] is said to be stronger than arr[j] if arr[i] > arr[j].

Return a list of the strongest k values in the array. return the answer in any arbitrary order.

Median is the middle value in an ordered integer list. More formally, if the length of the list is n, the median is the element in position ((n - 1) / 2) in the sorted list (0-indexed).

For arr = [6, -3, 7, 2, 11], n = 5 and the median is obtained by sorting the array arr = [-3, 2, 6, 7, 11] and the median is arr[m] where m = ((5 - 1) / 2) = 2. The median is 6.
For arr = [-7, 22, 17, 3], n = 4 and the median is obtained by sorting the array arr = [-7, 3, 17, 22] and the median is arr[m] where m = ((4 - 1) / 2) = 1. The median is 3.
 

Example 1:

Input: arr = [1,2,3,4,5], k = 2
Output: [5,1]
Explanation: Median is 3, the elements of the array sorted by the strongest are [5,1,4,2,3]. The strongest 2 elements are [5, 1]. [1, 5] is also accepted answer.
Please note that although |5 - 3| == |1 - 3| but 5 is stronger than 1 because 5 > 1.
Example 2:

Input: arr = [1,1,3,5,5], k = 2
Output: [5,5]
Explanation: Median is 3, the elements of the array sorted by the strongest are [5,5,1,1,3]. The strongest 2 elements are [5, 5].
Example 3:

Input: arr = [6,7,11,7,6,8], k = 5
Output: [11,8,6,6,7]
Explanation: Median is 7, the elements of the array sorted by the strongest are [11,8,6,6,7,7].
Any permutation of [11,8,6,6,7] is accepted.
 

Constraints:

1 <= arr.length <= 105
-105 <= arr[i] <= 105
1 <= k <= arr.length

class Solution
{
public:
    vector<int> getStrongest(vector<int> &arr, int k)
    {
       int n = arr.size();
        sort(arr.begin(), arr.end());
        int m = arr[(n - 1) / 2];
        int l = 0, r = n - 1;
        vector<int> ans;
        while(k > 0)
        {
            if(abs(arr[l] - m) > abs(arr[r] - m))
            {
                ans.push_back(arr[l]);
                l++;
            }
            else
            {
                ans.push_back(arr[r]);
                r--;
            }
            --k;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/design-browser-history/

You have a browser of one tab where you start on the homepage and you can visit another url, get back in the history number of steps or move forward in the history number of steps.

Implement the BrowserHistory class:

BrowserHistory(string homepage) Initializes the object with the homepage of the browser.
void visit(string url) Visits url from the current page. It clears up all the forward history.
string back(int steps) Move steps back in history. If you can only return x steps in the history and steps > x, you will return only x steps. 
Return the current url after moving back in history at most steps.
string forward(int steps) Move steps forward in history. If you can only forward x steps in the history and steps > x, you will forward only x steps. 
Return the current url after forwarding in history at most steps.
 

Example:

Input:
["BrowserHistory","visit","visit","visit","back","back","forward","visit","forward","back","back"]
[["leetcode.com"],["google.com"],["facebook.com"],["youtube.com"],[1],[1],[1],["linkedin.com"],[2],[2],[7]]
Output:
[null,null,null,null,"facebook.com","google.com","facebook.com",null,"linkedin.com","google.com","leetcode.com"]

Explanation:
BrowserHistory browserHistory = new BrowserHistory("leetcode.com");
browserHistory.visit("google.com");       // You are in "leetcode.com". Visit "google.com"
browserHistory.visit("facebook.com");     // You are in "google.com". Visit "facebook.com"
browserHistory.visit("youtube.com");      // You are in "facebook.com". Visit "youtube.com"
browserHistory.back(1);                   // You are in "youtube.com", move back to "facebook.com" return "facebook.com"
browserHistory.back(1);                   // You are in "facebook.com", move back to "google.com" return "google.com"
browserHistory.forward(1);                // You are in "google.com", move forward to "facebook.com" return "facebook.com"
browserHistory.visit("linkedin.com");     // You are in "facebook.com". Visit "linkedin.com"
browserHistory.forward(2);                // You are in "linkedin.com", you cannot move forward any steps.
browserHistory.back(2);                   // You are in "linkedin.com", move back two steps to "facebook.com" then to "google.com". return "google.com"
browserHistory.back(7);                   // You are in "google.com", you can move back only one step to "leetcode.com". return "leetcode.com"
 

Constraints:

1 <= homepage.length <= 20
1 <= url.length <= 20
1 <= steps <= 100
homepage and url consist of  '.' or lower case English letters.
At most 5000 calls will be made to visit, back, and forward.

class BrowserHistory
{
public:
    vector<string> history;
    int idx;

    BrowserHistory(string homepage)
    {
        history.push_back(homepage);
        idx = 0;
    }

    void visit(string url)
    {
        if (idx + 1 < history.size())
        {
            history.resize(idx + 1);
        }
        history.push_back(url);
        ++idx;
    }

    string back(int steps)
    {
        if (steps <= idx) idx -= steps;
        else idx = 0;
        return history[idx];
    }

    string forward(int steps)
    {
        if (idx + steps >= history.size()) idx = history.size() - 1;
        else idx += steps;
        return history[idx];
    }
};


// Source https://leetcode.com/problems/paint-house-iii/

There is a row of m houses in a small city, each house must be painted with one of the n colors (labeled from 1 to n), 
some houses that have been painted last summer should not be painted again.

A neighborhood is a maximal group of continuous houses that are painted with the same color.

For example: houses = [1,2,2,3,3,2,1,1] contains 5 neighborhoods [{1}, {2,2}, {3,3}, {2}, {1,1}].
Given an array houses, an m x n matrix cost and an integer target where:

houses[i]: is the color of the house i, and 0 if the house is not painted yet.
cost[i][j]: is the cost of paint the house i with the color j + 1.
Return the minimum cost of painting all the remaining houses in such a way that there are exactly target neighborhoods. If it is not possible, return -1.

 

Example 1:

Input: houses = [0,0,0,0,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3
Output: 9
Explanation: Paint houses of this way [1,2,2,1,1]
This array contains target = 3 neighborhoods, [{1}, {2,2}, {1,1}].
Cost of paint all houses (1 + 1 + 1 + 1 + 5) = 9.
Example 2:

Input: houses = [0,2,1,2,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3
Output: 11
Explanation: Some houses are already painted, Paint the houses of this way [2,2,1,2,2]
This array contains target = 3 neighborhoods, [{2,2}, {1}, {2,2}]. 
Cost of paint the first and last house (10 + 1) = 11.
Example 3:

Input: houses = [3,1,2,3], cost = [[1,1,1],[1,1,1],[1,1,1],[1,1,1]], m = 4, n = 3, target = 3
Output: -1
Explanation: Houses are already painted with a total of 4 neighborhoods [{3},{1},{2},{3}] different of target = 3.
 

Constraints:

m == houses.length == cost.length
n == cost[i].length
1 <= m <= 100
1 <= n <= 20
1 <= target <= m
0 <= houses[i] <= n
1 <= cost[i][j] <= 104

class Solution
{
public:
    int houseCnt, colorCnt, target;
    int dp[101][21][101];

    int recur(int i, int prevColor, int k, vector<int> &houses, vector<vector<int>> &cost)
    {
        if(k > target) return 1e9;
        if(i >= houseCnt)
        {
            if (k == target) return 0;
            else return 1e9;
        }
        if(dp[i][prevColor][k] != -1) return dp[i][prevColor][k];
        int ans = 1e9;
        if(houses[i] == 0)
        {
            for(int l = 1; l <= colorCnt; l++)
            {
                ans = min(ans, cost[i][l - 1] + recur(i + 1, l, k + (l != prevColor), houses, cost));
            }
        }
        else
        {
            ans = min(ans, recur(i + 1, houses[i], k + (houses[i] != prevColor), houses, cost));
        }
        return dp[i][prevColor][k] = ans;
    }

    int minCost(vector<int> &houses, vector<vector<int>> &cost, int m, int n, int target)
    {
        houseCnt = m;
        colorCnt = n;
        this->target = target;
        memset(dp, -1, sizeof(dp));
        int res = recur(0, 0, 0, houses, cost);
        if (res == 1e9) return -1;
        return res;
    }
};


// Source https://leetcode.com/problems/final-prices-with-a-special-discount-in-a-shop/

Given the array prices where prices[i] is the price of the ith item in a shop. There is a special discount for items in the shop, 
if you buy the ith item, then you will receive a discount equivalent to prices[j] where j is the minimum index such that j > i and prices[j] <= prices[i], 
otherwise, you will not receive any discount at all.

Return an array where the ith element is the final price you will pay for the ith item of the shop considering the special discount.

 

Example 1:

Input: prices = [8,4,6,2,3]
Output: [4,2,4,2,3]
Explanation: 
For item 0 with price[0]=8 you will receive a discount equivalent to prices[1]=4, therefore, the final price you will pay is 8 - 4 = 4. 
For item 1 with price[1]=4 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 4 - 2 = 2. 
For item 2 with price[2]=6 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 6 - 2 = 4. 
For items 3 and 4 you will not receive any discount at all.
Example 2:

Input: prices = [1,2,3,4,5]
Output: [1,2,3,4,5]
Explanation: In this case, for all items, you will not receive any discount at all.
Example 3:

Input: prices = [10,1,1,6]
Output: [9,0,1,6]
 

Constraints:

1 <= prices.length <= 500
1 <= prices[i] <= 10^3

class Solution
{
public:
    vector<int> finalPrices(vector<int> &prices)
    {
        int n = prices.size();
        vector<int> dis(n, -1);
        for(int i = 0; i < n ; i++)
        {
            for(int j = i + 1 ; j < n ; j++)
            {
                if(prices[j] <= prices[i])
                {
                    dis[i] = prices[j];
                    break;
                }
            }
        }
        for(int i = 0 ; i < n; i++)
        {
            if(dis[i] != -1)
            {
                prices[i] -= dis[i];
            }
        }
        return prices;
    }
};


// Source https://leetcode.com/problems/subrectangle-queries/

Implement the class SubrectangleQueries which receives a rows x cols rectangle as a matrix of integers in the constructor and supports two methods:

1. updateSubrectangle(int row1, int col1, int row2, int col2, int newValue)

Updates all values with newValue in the subrectangle whose upper left coordinate is (row1,col1) and bottom right coordinate is (row2,col2).
2. getValue(int row, int col)

Returns the current value of the coordinate (row,col) from the rectangle.
 

Example 1:

Input
["SubrectangleQueries","getValue","updateSubrectangle","getValue","getValue","updateSubrectangle","getValue","getValue"]
[[[[1,2,1],[4,3,4],[3,2,1],[1,1,1]]],[0,2],[0,0,3,2,5],[0,2],[3,1],[3,0,3,2,10],[3,1],[0,2]]
Output
[null,1,null,5,5,null,10,5]
Explanation
SubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,2,1],[4,3,4],[3,2,1],[1,1,1]]);  
// The initial rectangle (4x3) looks like:
// 1 2 1
// 4 3 4
// 3 2 1
// 1 1 1
subrectangleQueries.getValue(0, 2); // return 1
subrectangleQueries.updateSubrectangle(0, 0, 3, 2, 5);
// After this update the rectangle looks like:
// 5 5 5
// 5 5 5
// 5 5 5
// 5 5 5 
subrectangleQueries.getValue(0, 2); // return 5
subrectangleQueries.getValue(3, 1); // return 5
subrectangleQueries.updateSubrectangle(3, 0, 3, 2, 10);
// After this update the rectangle looks like:
// 5   5   5
// 5   5   5
// 5   5   5
// 10  10  10 
subrectangleQueries.getValue(3, 1); // return 10
subrectangleQueries.getValue(0, 2); // return 5
Example 2:

Input
["SubrectangleQueries","getValue","updateSubrectangle","getValue","getValue","updateSubrectangle","getValue"]
[[[[1,1,1],[2,2,2],[3,3,3]]],[0,0],[0,0,2,2,100],[0,0],[2,2],[1,1,2,2,20],[2,2]]
Output
[null,1,null,100,100,null,20]
Explanation
SubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,1,1],[2,2,2],[3,3,3]]);
subrectangleQueries.getValue(0, 0); // return 1
subrectangleQueries.updateSubrectangle(0, 0, 2, 2, 100);
subrectangleQueries.getValue(0, 0); // return 100
subrectangleQueries.getValue(2, 2); // return 100
subrectangleQueries.updateSubrectangle(1, 1, 2, 2, 20);
subrectangleQueries.getValue(2, 2); // return 20
 

Constraints:

There will be at most 500 operations considering both methods: updateSubrectangle and getValue.
1 <= rows, cols <= 100
rows == rectangle.length
cols == rectangle[i].length
0 <= row1 <= row2 < rows
0 <= col1 <= col2 < cols
1 <= newValue, rectangle[i][j] <= 10^9
0 <= row < rows
0 <= col < cols

class SubrectangleQueries
{
public:

    vector<vector<int>> v ; // to store updates
    vector<vector<int>> rect ; // to store the original rectangle

    SubrectangleQueries(vector<vector<int>> &rectangle)
    {
        v.clear() ;
        rect = rectangle ;
    }

    void updateSubrectangle(int row1, int col1, int row2, int col2, int newValue)
    {
        v.push_back({row1, col1, row2, col2, newValue}) ;
    }

    int getValue(int row, int col)
    {
        int n = v.size() ;
        for(int i = n - 1; i >= 0; i--)
        {
            if(row >= v[i][0] && row <= v[i][2] && col >= v[i][1] && col <= v[i][3])
                return v[i][4] ;
        }
        return rect[row][col] ;
    }
};


// Source https://leetcode.com/problems/find-two-non-overlapping-sub-arrays-each-with-target-sum/

You are given an array of integers arr and an integer target.

You have to find two non-overlapping sub-arrays of arr each with a sum equal target. 
There can be multiple answers so you have to find an answer where the sum of the lengths of the two sub-arrays is minimum.

Return the minimum sum of the lengths of the two required sub-arrays, or return -1 if you cannot find such two sub-arrays.

 

Example 1:

Input: arr = [3,2,2,4,3], target = 3
Output: 2
Explanation: Only two sub-arrays have sum = 3 ([3] and [3]). The sum of their lengths is 2.
Example 2:

Input: arr = [7,3,4,7], target = 7
Output: 2
Explanation: Although we have three non-overlapping sub-arrays of sum = 7 ([7], [3,4] and [7]), but we will choose the first and third sub-arrays as the sum of their lengths is 2.
Example 3:

Input: arr = [4,3,2,6,2,3,4], target = 6
Output: -1
Explanation: We have only one sub-array of sum = 6.
 

Constraints:

1 <= arr.length <= 105
1 <= arr[i] <= 1000
1 <= target <= 108

class Solution
{
public:
    int minSumOfLengths(vector<int> &nums, int target)
    {
        int n = nums.size();
        int  res = INT_MAX;
        vector<int> dp(n, INT_MAX);
        int len = INT_MAX, curr_len;
        int sum = 0;
        int start = 0, end = 0;
        while (end < n)
        {
            sum += nums[end];
            while(sum > target)
            {
                sum -= nums[start];
                ++start;
            }
            if(sum == target)
            {
                curr_len = (end - start + 1);
                if(start > 0 && dp[start - 1] != INT_MAX)
                {
                    res = min(res, dp[start - 1] + curr_len);
                }
                len = min(len, curr_len);
            }
            dp[end] = len;
            ++end;
        }
        if(res == INT_MAX) return -1;
        return res;
    }
};


// Source https://leetcode.com/problems/allocate-mailboxes/

Given the array houses where houses[i] is the location of the ith house along a street and an integer k, allocate k mailboxes in the street.

Return the minimum total distance between each house and its nearest mailbox.

The test cases are generated so that the answer fits in a 32-bit integer.

 

Example 1:


Input: houses = [1,4,8,10,20], k = 3
Output: 5
Explanation: Allocate mailboxes in position 3, 9 and 20.
Minimum total distance from each houses to nearest mailboxes is |3-1| + |4-3| + |9-8| + |10-9| + |20-20| = 5 
Example 2:


Input: houses = [2,3,5,12,18], k = 2
Output: 9
Explanation: Allocate mailboxes in position 3 and 14.
Minimum total distance from each houses to nearest mailboxes is |2-3| + |3-3| + |5-3| + |12-14| + |18-14| = 9.
 

Constraints:

1 <= k <= houses.length <= 100
1 <= houses[i] <= 104
All the integers of houses are unique.

问题等价于把n个house分成k组
每组房子的中间位置放邮箱
累加各组中的房子到对应邮箱的距离

class Solution
{
public:
    int n;
    int cost[101][101];
    int dp[101][101];

    int recur(int i, int k)
    {
        if(i == n && k == 0) return 0;
        if(i == n || k == 0) return 1e9;
        if(dp[i][k] != -1) return dp[i][k];
        int ans = 1e9;
        for(int j = i ; j <= n - k ; j++)
        {
            ans = min(ans, cost[i][j] + recur(j + 1, k - 1));
        }
        return dp[i][k] = ans;
    }

    int minDistance(vector<int>& houses, int k)
    {
        n = houses.size();
        memset(cost, 0, sizeof(cost));
        memset(dp, -1, sizeof(dp));
        sort(houses.begin(), houses.end());
        for(int i = 0; i < n; i++)
        {
            for(int j = i + 1; j < n; j++)
            {
                int l = i;
                int r = j;
                while(r > l)
                {
                    cost[i][j] += houses[r] - houses[l];
                    --r;
                    ++l;
                }
            }
        }
        return recur(0, k);
    }
};


// Source https://leetcode.com/problems/running-sum-of-1d-array/

Given an array nums. We define a running sum of an array as runningSum[i] = sum(nums[0]…nums[i]).

Return the running sum of nums.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [1,3,6,10]
Explanation: Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4].
Example 2:

Input: nums = [1,1,1,1,1]
Output: [1,2,3,4,5]
Explanation: Running sum is obtained as follows: [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1].
Example 3:

Input: nums = [3,1,2,10,1]
Output: [3,4,6,16,17]
 

Constraints:

1 <= nums.length <= 1000
-10^6 <= nums[i] <= 10^6

class Solution
{
public:
    vector<int> runningSum(vector<int> &nums)
    {
        int sum = 0;
        for(int i = 0; i < nums.size(); i++)
        {
            sum += nums[i];
            nums[i] = sum;
        }
        return nums;
    }
};


// Source https://leetcode.com/problems/least-number-of-unique-integers-after-k-removals/

Given an array of integers arr and an integer k. Find the least number of unique integers after removing exactly k elements.

 

Example 1:

Input: arr = [5,5,4], k = 1
Output: 1
Explanation: Remove the single 4, only 5 is left.
Example 2:
Input: arr = [4,3,1,1,3,3,2], k = 3
Output: 2
Explanation: Remove 4, 2 and either one of the two 1s or three 3s. 1 and 3 will be left.
 

Constraints:

1 <= arr.length <= 10^5
1 <= arr[i] <= 10^9
0 <= k <= arr.length

class Solution
{
public:
    int findLeastNumOfUniqueInts(vector<int> &arr, int k)
    {
        unordered_map<int, int> freq;
        for (auto num : arr)
        {
            ++freq[num];
        }
        priority_queue<int, vector<int>, greater<int>> minHeap;
        for (auto p : freq)
        {
            minHeap.push(p.second);
        }
        while (!minHeap.empty())
        {
            if (k < minHeap.top())
            {
                return minHeap.size();
            }
            k -= minHeap.top();
            minHeap.pop();
        }
        return minHeap.size();
    }
};


// Source https://leetcode.com/problems/minimum-number-of-days-to-make-m-bouquets/

You are given an integer array bloomDay, an integer m and an integer k.

You want to make m bouquets. To make a bouquet, you need to use k adjacent flowers from the garden.

The garden consists of n flowers, the ith flower will bloom in the bloomDay[i] and then can be used in exactly one bouquet.

Return the minimum number of days you need to wait to be able to make m bouquets from the garden. If it is impossible to make m bouquets return -1.

 

Example 1:

Input: bloomDay = [1,10,3,10,2], m = 3, k = 1
Output: 3
Explanation: Let us see what happened in the first three days. x means flower bloomed and _ means flower did not bloom in the garden.
We need 3 bouquets each should contain 1 flower.
After day 1: [x, _, _, _, _]   // we can only make one bouquet.
After day 2: [x, _, _, _, x]   // we can only make two bouquets.
After day 3: [x, _, x, _, x]   // we can make 3 bouquets. The answer is 3.
Example 2:

Input: bloomDay = [1,10,3,10,2], m = 3, k = 2
Output: -1
Explanation: We need 3 bouquets each has 2 flowers, that means we need 6 flowers. We only have 5 flowers so it is impossible to get the needed bouquets and we return -1.
Example 3:

Input: bloomDay = [7,7,7,7,12,7,7], m = 2, k = 3
Output: 12
Explanation: We need 2 bouquets each should have 3 flowers.
Here is the garden after the 7 and 12 days:
After day 7: [x, x, x, x, _, x, x]
We can make one bouquet of the first three flowers that bloomed. We cannot make another bouquet from the last three flowers that bloomed because they are not adjacent.
After day 12: [x, x, x, x, x, x, x]
It is obvious that we can make two bouquets in different ways.
 

Constraints:

bloomDay.length == n
1 <= n <= 105
1 <= bloomDay[i] <= 109
1 <= m <= 106
1 <= k <= n

class Solution
{
public:
    int minDays(vector<int> &bloomDay, int m, int k)
    {
        int n = bloomDay.size();
        int low = 1, high = 1000000000;
        int ans = -1;
        while(low <= high)
        {
            int mid = low + (high - low) / 2;
            int count = 0;
            for(int i = 0; i < n; i++)
            {
                int len = (m - count) * k;
                if (i + len > n) break;
                int j = i;
                for(; j < n && j < (i + k) && bloomDay[j] <= mid; j++);
                if(j == (i + k))
                    count++;
                if(count == m || j == n)
                    break;
                if(j == (i + k))
                    i = j - 1;
                else
                    i = j;
            }
            if(count == m)
            {
                ans = mid;
                high = mid - 1;
            }
            else
            {
                low = mid + 1;
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/kth-ancestor-of-a-tree-node/

You are given a tree with n nodes numbered from 0 to n - 1 in the form of a parent array parent where parent[i] is the parent of ith node. 
The root of the tree is node 0. Find the kth ancestor of a given node.

The kth ancestor of a tree node is the kth node in the path from that node to the root node.

Implement the TreeAncestor class:

TreeAncestor(int n, int[] parent) Initializes the object with the number of nodes in the tree and the parent array.
int getKthAncestor(int node, int k) return the kth ancestor of the given node node. If there is no such ancestor, return -1.
 

Example 1:


Input
["TreeAncestor", "getKthAncestor", "getKthAncestor", "getKthAncestor"]
[[7, [-1, 0, 0, 1, 1, 2, 2]], [3, 1], [5, 2], [6, 3]]
Output
[null, 1, 0, -1]

Explanation
TreeAncestor treeAncestor = new TreeAncestor(7, [-1, 0, 0, 1, 1, 2, 2]);
treeAncestor.getKthAncestor(3, 1); // returns 1 which is the parent of 3
treeAncestor.getKthAncestor(5, 2); // returns 0 which is the grandparent of 5
treeAncestor.getKthAncestor(6, 3); // returns -1 because there is no such ancestor
 

Constraints:

1 <= k <= n <= 5 * 104
parent.length == n
parent[0] == -1
0 <= parent[i] < n for all 0 < i < n
0 <= node < n
There will be at most 5 * 104 queries.

class TreeAncestor
{
public:
    vector<vector<int>> P; // P[i][node] 记录 [node] 's [2^i]th parent

    TreeAncestor(int n, vector<int> &parent)
    {
        P.resize(20, vector<int>(n, -1));

        // 2^0
        for(int node = 0; node < n; node++)
        {
            P[0][node] = parent[node];
        }

        // 2^i
        for(int i = 1; i < 20; i++)
        {
            for(int node = 0; node < n; node++)
            {
                int temp = P[i - 1][node];
                if(temp != -1) P[i][node] = P[i - 1][temp];
            }
        }
    }

    int getKthAncestor(int node, int k)
    {
        for(int i = 0; i < 20; i++)
        {
            if(k & (1 << i))
            {
                int temp = P[i][node];
                if(temp == -1) return -1;
                node = temp;
            }
        }
        return node;
    }
};


// Source https://leetcode.com/problems/xor-operation-in-an-array/

You are given an integer n and an integer start.

Define an array nums where nums[i] = start + 2 * i (0-indexed) and n == nums.length.

Return the bitwise XOR of all elements of nums.

 

Example 1:

Input: n = 5, start = 0
Output: 8
Explanation: Array nums is equal to [0, 2, 4, 6, 8] where (0 ^ 2 ^ 4 ^ 6 ^ 8) = 8.
Where "^" corresponds to bitwise XOR operator.
Example 2:

Input: n = 4, start = 3
Output: 8
Explanation: Array nums is equal to [3, 5, 7, 9] where (3 ^ 5 ^ 7 ^ 9) = 8.
 

Constraints:

1 <= n <= 1000
0 <= start <= 1000
n == nums.length

class Solution
{
public:
    int xorOperation(int n, int start)
    {
        int x = start;
        for(int i = 1; i < n; i++)
        {
            x ^= (start + (2 * i));
        }
        return x;
    }
};


// Source https://leetcode.com/problems/making-file-names-unique/

Given an array of strings names of size n. You will create n folders in your file system such that, at the ith minute, you will create a folder with the name names[i].

Since two files cannot have the same name, if you enter a folder name that was previously used, the system will have a suffix addition to its name in the form of (k), 
where, k is the smallest positive integer such that the obtained name remains unique.

Return an array of strings of length n where ans[i] is the actual name the system will assign to the ith folder when you create it.

 

Example 1:

Input: names = ["pes","fifa","gta","pes(2019)"]
Output: ["pes","fifa","gta","pes(2019)"]
Explanation: Let's see how the file system creates folder names:
"pes" --> not assigned before, remains "pes"
"fifa" --> not assigned before, remains "fifa"
"gta" --> not assigned before, remains "gta"
"pes(2019)" --> not assigned before, remains "pes(2019)"
Example 2:

Input: names = ["gta","gta(1)","gta","avalon"]
Output: ["gta","gta(1)","gta(2)","avalon"]
Explanation: Let's see how the file system creates folder names:
"gta" --> not assigned before, remains "gta"
"gta(1)" --> not assigned before, remains "gta(1)"
"gta" --> the name is reserved, system adds (k), since "gta(1)" is also reserved, systems put k = 2. it becomes "gta(2)"
"avalon" --> not assigned before, remains "avalon"
Example 3:

Input: names = ["onepiece","onepiece(1)","onepiece(2)","onepiece(3)","onepiece"]
Output: ["onepiece","onepiece(1)","onepiece(2)","onepiece(3)","onepiece(4)"]
Explanation: When the last folder is created, the smallest positive valid k is 4, and it becomes "onepiece(4)".
 

Constraints:

1 <= names.length <= 5 * 104
1 <= names[i].length <= 20
names[i] consists of lowercase English letters, digits, and/or round brackets.

class Solution
{
public:
    vector<string> getFolderNames(vector<string> &names)
    {
        unordered_map<string, int> mp;
        vector<string> ans;
        for(auto &s : names)
        {
            if(mp.find(s) == mp.end())
            {
                mp[s]++;
                ans.push_back(s);
            }
            else
            {
                string t = s;
                while(true)
                {
                    s += "(";
                    s += to_string(mp[t]);
                    s += ")";
                    if(mp.find(s) == mp.end()) break;
                    mp[t]++;
                    s = t;
                }
                ans.push_back(s);
                mp[t]++; //original string
                mp[s]++; //new string
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/avoid-flood-in-the-city/

Your country has an infinite number of lakes. Initially, all the lakes are empty, but when it rains over the nth lake, the nth lake becomes full of water. 
If it rains over a lake that is full of water, there will be a flood. Your goal is to avoid floods in any lake.

Given an integer array rains where:

rains[i] > 0 means there will be rains over the rains[i] lake.
rains[i] == 0 means there are no rains this day and you can choose one lake this day and dry it.
Return an array ans where:

ans.length == rains.length
ans[i] == -1 if rains[i] > 0.
ans[i] is the lake you choose to dry in the ith day if rains[i] == 0.
If there are multiple valid answers return any of them. If it is impossible to avoid flood return an empty array.

Notice that if you chose to dry a full lake, it becomes empty, but if you chose to dry an empty lake, nothing changes.

 

Example 1:

Input: rains = [1,2,3,4]
Output: [-1,-1,-1,-1]
Explanation: After the first day full lakes are [1]
After the second day full lakes are [1,2]
After the third day full lakes are [1,2,3]
After the fourth day full lakes are [1,2,3,4]
There's no day to dry any lake and there is no flood in any lake.
Example 2:

Input: rains = [1,2,0,0,2,1]
Output: [-1,-1,2,1,-1,-1]
Explanation: After the first day full lakes are [1]
After the second day full lakes are [1,2]
After the third day, we dry lake 2. Full lakes are [1]
After the fourth day, we dry lake 1. There is no full lakes.
After the fifth day, full lakes are [2].
After the sixth day, full lakes are [1,2].
It is easy that this scenario is flood-free. [-1,-1,1,2,-1,-1] is another acceptable scenario.
Example 3:

Input: rains = [1,2,0,1,2]
Output: []
Explanation: After the second day, full lakes are  [1,2]. We have to dry one lake in the third day.
After that, it will rain over lakes [1,2]. It's easy to prove that no matter which lake you choose to dry in the 3rd day, the other one will flood.
 

Constraints:

1 <= rains.length <= 105
0 <= rains[i] <= 109

class Solution
{
public:
    vector<int> avoidFlood(vector<int> &rains)
    {
        int n = rains.size();
        unordered_map<int, int> mp;
        set<int> days;
        for(int i = 0; i < n; i++)
        {
            if(rains[i])
            {
                if(mp.count(rains[i]))
                {
                    auto itr = days.upper_bound(mp[rains[i]]);
                    if(itr == days.end()) return {};
                    rains[*itr] = rains[i];
                    days.erase(itr);
                }
                mp[rains[i]] = i;
                rains[i] = -1;
            }
            else
            {
                days.insert(i);
                rains[i] = 1;
            }
        }
        return rains;
    }
};


// Source https://leetcode.com/problems/find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree/

Given a weighted undirected connected graph with n vertices numbered from 0 to n - 1, and an array edges 
where edges[i] = [ai, bi, weighti] represents a bidirectional and weighted edge between nodes ai and bi. 
A minimum spanning tree (MST) is a subset of the graph's edges that connects all vertices without cycles and with the minimum possible total edge weight.

Find all the critical and pseudo-critical edges in the given graph's minimum spanning tree (MST). 
An MST edge whose deletion from the graph would cause the MST weight to increase is called a critical edge. 
On the other hand, a pseudo-critical edge is that which can appear in some MSTs but not all.

Note that you can return the indices of the edges in any order.

 

Example 1:



Input: n = 5, edges = [[0,1,1],[1,2,1],[2,3,2],[0,3,2],[0,4,3],[3,4,3],[1,4,6]]
Output: [[0,1],[2,3,4,5]]
Explanation: The figure above describes the graph.
The following figure shows all the possible MSTs:

Notice that the two edges 0 and 1 appear in all MSTs, therefore they are critical edges, so we return them in the first list of the output.
The edges 2, 3, 4, and 5 are only part of some MSTs, therefore they are considered pseudo-critical edges. We add them to the second list of the output.
Example 2:



Input: n = 4, edges = [[0,1,1],[1,2,1],[2,3,1],[0,3,1]]
Output: [[],[0,1,2,3]]
Explanation: We can observe that since all 4 edges have equal weight, choosing any 3 edges from the given 4 will yield an MST. Therefore all 4 edges are pseudo-critical.
 

Constraints:

2 <= n <= 100
1 <= edges.length <= min(200, n * (n - 1) / 2)
edges[i].length == 3
0 <= ai < bi < n
1 <= weighti <= 1000
All pairs (ai, bi) are distinct.

class Solution
{
public:
    struct DSU
    {
        vector<int> parent;
        vector<int> size;

        DSU(int n)
        {
            parent = vector<int>(n);
            size = vector<int>(n, 1);
            for(int i = 0; i < n; i++)
            {
                parent[i] = i;
            }
        }

        int find(int x)
        {
            if(parent[x] != x) parent[x] = find(parent[x]);
            return parent[x];
        }

        bool join(int a, int b)
        {
            int root_a = find(a);
            int root_b = find(b);
            if (root_a == root_b) return false;
            if (size[root_a] > size[root_b])
            {
                parent[root_b] = root_a;
                size[root_a] += size[root_b];
            }
            else
            {
                parent[root_a] = root_b;
                size[root_b] += size[root_a];
            }
            return true;
        }
    };

    int MST(int n, vector<vector<int>> &edges, int del_edge, int add_edge)
    {
        DSU dsu(n);
        int res = 0, m = edges.size();
        if(add_edge != -1)
        {
            res += edges[add_edge][2];
            dsu.join(edges[add_edge][0], edges[add_edge][1]);
        }
        for(int i = 0; i < m; i++)
        {
            if(i == del_edge || i == add_edge)
                continue;
            if(dsu.join(edges[i][0], edges[i][1]))
            {
                res += edges[i][2];
            }
        }
        for(int i = 0; i < n; i++)
        {
            if(dsu.find(i) != dsu.find(0))
                return INT_MAX;
        }
        return res;
    }

    vector<vector<int>> findCriticalAndPseudoCriticalEdges(int n, vector<vector<int>> &edges)
    {
        int m = edges.size();
        for(int i = 0; i < m; i++)
            edges[i].push_back(i);
        sort(edges.begin(), edges.end(), [](vector<int> &a, vector<int> &b)
        {
            return a[2] < b[2];
        });
        int original = MST(n, edges, -1, -1);
        vector<int> critical, pseudo;
        for(int i = 0; i < m; i++)
        {
            int c1 = MST(n, edges, i, -1);
            if(c1 > original)
                critical.push_back(edges[i][3]);
            else
            {
                int c2 = MST(n, edges, -1, i);
                if(c2 == original)
                    pseudo.push_back(edges[i][3]);
            }
        }
        return {critical, pseudo};
    }
};


// Source https://leetcode.com/problems/average-salary-excluding-the-minimum-and-maximum-salary/

You are given an array of unique integers salary where salary[i] is the salary of the ith employee.

Return the average salary of employees excluding the minimum and maximum salary. Answers within 10-5 of the actual answer will be accepted.

 

Example 1:

Input: salary = [4000,3000,1000,2000]
Output: 2500.00000
Explanation: Minimum salary and maximum salary are 1000 and 4000 respectively.
Average salary excluding minimum and maximum salary is (2000+3000) / 2 = 2500
Example 2:

Input: salary = [1000,2000,3000]
Output: 2000.00000
Explanation: Minimum salary and maximum salary are 1000 and 3000 respectively.
Average salary excluding minimum and maximum salary is (2000) / 1 = 2000
 

Constraints:

3 <= salary.length <= 100
1000 <= salary[i] <= 106
All the integers of salary are unique.

class Solution
{
public:
    double average(vector<int> &salary)
    {
        sort(salary.begin(), salary.end());
        int n = salary.size();
        if(n == 2) return 0;
        double sum = 0;
        double avg;
        for(int i = 1; i < n - 1; i++)
        {
            sum = sum + salary[i];
        }
        avg = sum / (n - 2);
        return avg;
    }
};


// Source https://leetcode.com/problems/the-kth-factor-of-n/

You are given two positive integers n and k. A factor of an integer n is defined as an integer i where n % i == 0.

Consider a list of all factors of n sorted in ascending order, return the kth factor in this list or return -1 if n has less than k factors.

 

Example 1:

Input: n = 12, k = 3
Output: 3
Explanation: Factors list is [1, 2, 3, 4, 6, 12], the 3rd factor is 3.
Example 2:

Input: n = 7, k = 2
Output: 7
Explanation: Factors list is [1, 7], the 2nd factor is 7.
Example 3:

Input: n = 4, k = 4
Output: -1
Explanation: Factors list is [1, 2, 4], there is only 3 factors. We should return -1.
 

Constraints:

1 <= k <= n <= 1000

class Solution
{
public:
    int kthFactor(int n, int k)
    {
        vector<int> v;
        for(int i = 1; i <= n && v.size() < k; i++)
        {
            if(n % i == 0)
                v.push_back(i);
        }
        if(k <= v.size())
            return v[k - 1];
        else
            return -1;
    }
};


// Source https://leetcode.com/problems/longest-subarray-of-1s-after-deleting-one-element/

Given a binary array nums, you should delete one element from it.

Return the size of the longest non-empty subarray containing only 1's in the resulting array. Return 0 if there is no such subarray.

 

Example 1:

Input: nums = [1,1,0,1]
Output: 3
Explanation: After deleting the number in position 2, [1,1,1] contains 3 numbers with value of 1's.
Example 2:

Input: nums = [0,1,1,1,0,1,1,0,1]
Output: 5
Explanation: After deleting the number in position 4, [0,1,1,1,1,1,0,1] longest subarray with value of 1's is [1,1,1,1,1].
Example 3:

Input: nums = [1,1,1]
Output: 2
Explanation: You must delete one element.
 

Constraints:

1 <= nums.length <= 105
nums[i] is either 0 or 1.

class Solution
{
public:
    int longestSubarray(vector<int> &nums)
    {
        int n = nums.size();
        int ans = 0, z = 0;
        int i = 0, j = 0;
        while(j < n)
        {
            if(nums[j] == 0) z++;
            while(i < j && z > 1)
            {
                if(nums[i] == 0) z--;
                i++;
            }
            ans = max(ans, j - i);
            j++;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/parallel-courses-ii/

You are given an integer n, which indicates that there are n courses labeled from 1 to n. You are also given an array relations 
where relations[i] = [prevCoursei, nextCoursei], representing a prerequisite relationship between course prevCoursei and course nextCoursei: 
course prevCoursei has to be taken before course nextCoursei. Also, you are given the integer k.

In one semester, you can take at most k courses as long as you have taken all the prerequisites in the previous semesters for the courses you are taking.

Return the minimum number of semesters needed to take all courses. The testcases will be generated such that it is possible to take every course.

 

Example 1:



Input: n = 4, dependencies = [[2,1],[3,1],[1,4]], k = 2
Output: 3 
Explanation: The figure above represents the given graph.
In the first semester, you can take courses 2 and 3.
In the second semester, you can take course 1.
In the third semester, you can take course 4.
Example 2:



Input: n = 5, dependencies = [[2,1],[3,1],[4,1],[1,5]], k = 2
Output: 4 
Explanation: The figure above represents the given graph.
In the first semester, you can take courses 2 and 3 only since you cannot take more than two per semester.
In the second semester, you can take course 4.
In the third semester, you can take course 1.
In the fourth semester, you can take course 5.
Example 3:

Input: n = 11, dependencies = [], k = 2
Output: 6
 

Constraints:

1 <= n <= 15
1 <= k <= n
0 <= relations.length <= n * (n-1) / 2
relations[i].length == 2
1 <= prevCoursei, nextCoursei <= n
prevCoursei != nextCoursei
All the pairs [prevCoursei, nextCoursei] are unique.
The given graph is a directed acyclic graph.

class Solution
{
public:
    int N, K;
    vector<vector<int>> graph;
    int indegree[15];
    int finalBitMask;
    int dp[(1 << 15)];

    int recur(int bitMask)
    {
        if (bitMask == finalBitMask) return 0;
        if (dp[bitMask] != -1) return dp[bitMask];
        memset(indegree, 0, sizeof(indegree));
        for (int i = 0; i < N; i++)
        {
            if (!(bitMask & (1 << i)))
            {
                for (int v : graph[i])
                {
                    indegree[v]++;
                }
            }
        }
        int availMask = 0;
        for (int i = 0; i < N; i++)
        {
            if (!(bitMask & (1 << i)) && indegree[i] == 0) availMask |= (1 << i);
        }
        int curAns = N + 1;
        if (__builtin_popcount(availMask) <= K)
        {
            curAns = min(curAns, 1 + recur(bitMask | availMask));
        }
        else
        {
            for (int subMask = availMask; subMask > 0; subMask = (subMask - 1) & availMask)
            {
                if (__builtin_popcount(subMask) == K)
                {
                    curAns = min(curAns, 1 + recur(bitMask | subMask));
                }
            }
        }
        return dp[bitMask] = curAns;
    }

    int minNumberOfSemesters(int n, vector<vector<int>> &relations, int k)
    {
        N = n;
        K = k;
        graph.resize(N);

        for (auto &e : relations)
        {
            e[0]--;
            e[1]--;
            graph[e[0]].push_back(e[1]);
        }

        memset(dp, -1, sizeof(dp));
        finalBitMask = ((1 << N) - 1);
        return recur(0);
    }
};


// Source https://leetcode.com/problems/path-crossing/

Given a string path, where path[i] = 'N', 'S', 'E' or 'W', each representing moving one unit north, south, east, or west, respectively. 
You start at the origin (0, 0) on a 2D plane and walk on the path specified by path.

Return true if the path crosses itself at any point, that is, if at any time you are on a location you have previously visited. Return false otherwise.

 

Example 1:


Input: path = "NES"
Output: false 
Explanation: Notice that the path doesn't cross any point more than once.
Example 2:


Input: path = "NESWW"
Output: true
Explanation: Notice that the path visits the origin twice.
 

Constraints:

1 <= path.length <= 104
path[i] is either 'N', 'S', 'E', or 'W'.

class Solution
{
public:
    bool isPathCrossing(string path)
    {
        set<pair<int, int>>s;
        pair<int, int>a = {0, 0};
        s.insert({0, 0});
        for(int i = 0; i < path.size(); i++)
        {
            if(path[i] == 'N')
            {
                a.second++;
            }
            else if(path[i] == 'E')
            {
                a.first++;
            }
            else  if(path[i] == 'W')
            {
                a.first--;
            }
            else
            {
                a.second--;
            }
            if(s.find(a) == s.end())
                s.insert(a);
            else
                return true;
        }
        return false;
    }
};


// Source https://leetcode.com/problems/check-if-array-pairs-are-divisible-by-k/

Given an array of integers arr of even length n and an integer k.

We want to divide the array into exactly n / 2 pairs such that the sum of each pair is divisible by k.

Return true If you can find a way to do that or false otherwise.

 

Example 1:

Input: arr = [1,2,3,4,5,10,6,7,8,9], k = 5
Output: true
Explanation: Pairs are (1,9),(2,8),(3,7),(4,6) and (5,10).
Example 2:

Input: arr = [1,2,3,4,5,6], k = 7
Output: true
Explanation: Pairs are (1,6),(2,5) and(3,4).
Example 3:

Input: arr = [1,2,3,4,5,6], k = 10
Output: false
Explanation: You can try all possible pairs to see that there is no way to divide arr into 3 pairs each with sum divisible by 10.
 

Constraints:

arr.length == n
1 <= n <= 105
n is even.
-109 <= arr[i] <= 109
1 <= k <= 105

class Solution
{
public:
    bool canArrange(vector<int> &arr, int k)
    {
        unordered_map<int, int> mp;
        for (int x : arr) mp[(x % k + k ) % k]++;
        for (auto p : mp)
        {
            if (p.first == 0)
            {
                if (p.second % 2 == 1) return false;
            }
            else if (p.second != mp[k - p.first]) return false;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/number-of-subsequences-that-satisfy-the-given-sum-condition/

You are given an array of integers nums and an integer target.

Return the number of non-empty subsequences of nums such that the sum of the minimum and maximum element on it is less or equal to target. 
Since the answer may be too large, return it modulo 109 + 7.

 

Example 1:

Input: nums = [3,5,6,7], target = 9
Output: 4
Explanation: There are 4 subsequences that satisfy the condition.
[3] -> Min value + max value <= target (3 + 3 <= 9)
[3,5] -> (3 + 5 <= 9)
[3,5,6] -> (3 + 6 <= 9)
[3,6] -> (3 + 6 <= 9)
Example 2:

Input: nums = [3,3,6,8], target = 10
Output: 6
Explanation: There are 6 subsequences that satisfy the condition. (nums can have repeated numbers).
[3] , [3] , [3,3], [3,6] , [3,6] , [3,3,6]
Example 3:

Input: nums = [2,3,3,4,6,7], target = 12
Output: 61
Explanation: There are 63 non-empty subsequences, two of them do not satisfy the condition ([6,7], [7]).
Number of valid subsequences (63 - 2 = 61).
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 106
1 <= target <= 106

class Solution
{
public:
    int numSubseq(vector<int>A, int target)
    {
        const int mod = 1e9 + 7;
        int n = A.size();
        vector<int> pows(n, 1);
        for (int i = 1 ; i < n ; ++i)
        {
            pows[i] = pows[i - 1] * 2 % mod;
        }
        sort(A.begin(), A.end());
        int res = 0;
        int l = 0, r = n - 1;
        while (l <= r)
        {
            if (A[l] + A[r] > target)
            {
                r--;
            }
            else
            {
                res = (res + pows[r - l]) % mod; // A[l + 1] ... A[r] 每个元素可以选或不选，总共2^(r - l)种可能
                l++;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/max-value-of-equation/

You are given an array points containing the coordinates of points on a 2D plane, sorted by the x-values, 
where points[i] = [xi, yi] such that xi < xj for all 1 <= i < j <= points.length. You are also given an integer k.

Return the maximum value of the equation yi + yj + |xi - xj| where |xi - xj| <= k and 1 <= i < j <= points.length.

It is guaranteed that there exists at least one pair of points that satisfy the constraint |xi - xj| <= k.

 

Example 1:

Input: points = [[1,3],[2,0],[5,10],[6,-10]], k = 1
Output: 4
Explanation: The first two points satisfy the condition |xi - xj| <= 1 and if we calculate the equation we get 3 + 0 + |1 - 2| = 4. Third and fourth points also satisfy the condition and give a value of 10 + -10 + |5 - 6| = 1.
No other pairs satisfy the condition, so we return the max of 4 and 1.
Example 2:

Input: points = [[0,0],[3,0],[9,2]], k = 3
Output: 3
Explanation: Only the first two points have an absolute difference of 3 or less in the x-values, and give the value of 0 + 0 + |0 - 3| = 3.
 

Constraints:

2 <= points.length <= 105
points[i].length == 2
-108 <= xi, yi <= 108
0 <= k <= 2 * 108
xi < xj for all 1 <= i < j <= points.length
xi form a strictly increasing sequence.

yi + yj + |xi - xj| = yi + yj + xj - xi = (xj + yj) + (yi - xi)

class Solution
{
public:

    int findMaxValueOfEquation(vector<vector<int>> &points, int k)
    {
        int ans = INT_MIN;
        int n = points.size();
        priority_queue<pair<int, int>> pq;
        for(int i = 0 ; i < n; i++)
        {
            while(!pq.empty() && (points[i][0] - pq.top().second) > k) pq.pop();
            if(!pq.empty())
            {
                ans = max(ans, pq.top().first + points[i][0] + points[i][1]);
            }
            pq.push({points[i][1] - points[i][0], points[i][0]});
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/can-make-arithmetic-progression-from-sequence/

A sequence of numbers is called an arithmetic progression if the difference between any two consecutive elements is the same.

Given an array of numbers arr, return true if the array can be rearranged to form an arithmetic progression. Otherwise, return false.

 

Example 1:

Input: arr = [3,5,1]
Output: true
Explanation: We can reorder the elements as [1,3,5] or [5,3,1] with differences 2 and -2 respectively, between each consecutive elements.
Example 2:

Input: arr = [1,2,4]
Output: false
Explanation: There is no way to reorder the elements to obtain an arithmetic progression.
 

Constraints:

2 <= arr.length <= 1000
-106 <= arr[i] <= 106

class Solution
{
public:
    bool canMakeArithmeticProgression(vector<int> &arr)
    {
        int n = arr.size();
        sort(arr.begin(), arr.end());
        int diff = arr[0] - arr[1];
        for(int i = 1; i < n - 1; i++)
        {
            if(arr[i] - arr[i + 1] != diff)
                return false;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/last-moment-before-all-ants-fall-out-of-a-plank/

We have a wooden plank of the length n units. Some ants are walking on the plank, each ant moves with a speed of 1 unit per second. 
Some of the ants move to the left, the other move to the right.

When two ants moving in two different directions meet at some point, they change their directions and continue moving again. Assume changing directions does not take any additional time.

When an ant reaches one end of the plank at a time t, it falls out of the plank immediately.

Given an integer n and two integer arrays left and right, the positions of the ants moving to the left and the right, return the moment when the last ant(s) fall out of the plank.

 

Example 1:


Input: n = 4, left = [4,3], right = [0,1]
Output: 4
Explanation: In the image above:
-The ant at index 0 is named A and going to the right.
-The ant at index 1 is named B and going to the right.
-The ant at index 3 is named C and going to the left.
-The ant at index 4 is named D and going to the left.
The last moment when an ant was on the plank is t = 4 seconds. After that, it falls immediately out of the plank. (i.e., We can say that at t = 4.0000000001, there are no ants on the plank).
Example 2:


Input: n = 7, left = [], right = [0,1,2,3,4,5,6,7]
Output: 7
Explanation: All ants are going to the right, the ant at index 0 needs 7 seconds to fall.
Example 3:


Input: n = 7, left = [0,1,2,3,4,5,6,7], right = []
Output: 7
Explanation: All ants are going to the left, the ant at index 7 needs 7 seconds to fall.
 

Constraints:

1 <= n <= 104
0 <= left.length <= n + 1
0 <= left[i] <= n
0 <= right.length <= n + 1
0 <= right[i] <= n
1 <= left.length + right.length <= n + 1
All values of left and right are unique, and each value can appear only in one of the two arrays.

When two ants moving in two different directions meet at some point, they change their directions and continue moving again. Assume changing directions does not take any additional time.

两只蚂蚁交换方向再继续move 等价于 两只蚂蚁没有改变方向，而是穿过了对方

class Solution
{
public:
    int getLastMoment(int n, vector<int> &left, vector<int> &right)
    {
        int ans = 0;
        for(auto pos : left) ans = max(ans, pos);
        for(auto pos : right) ans = max(ans, n - pos);
        return ans;
    }
};


// Source https://leetcode.com/problems/count-submatrices-with-all-ones/

Given an m x n binary matrix mat, return the number of submatrices that have all ones.

 

Example 1:


Input: mat = [[1,0,1],[1,1,0],[1,1,0]]
Output: 13
Explanation: 
There are 6 rectangles of side 1x1.
There are 2 rectangles of side 1x2.
There are 3 rectangles of side 2x1.
There is 1 rectangle of side 2x2. 
There is 1 rectangle of side 3x1.
Total number of rectangles = 6 + 2 + 3 + 1 + 1 = 13.
Example 2:


Input: mat = [[0,1,1,0],[0,1,1,1],[1,1,1,0]]
Output: 24
Explanation: 
There are 8 rectangles of side 1x1.
There are 5 rectangles of side 1x2.
There are 2 rectangles of side 1x3. 
There are 4 rectangles of side 2x1.
There are 2 rectangles of side 2x2. 
There are 2 rectangles of side 3x1. 
There is 1 rectangle of side 3x2. 
Total number of rectangles = 8 + 5 + 2 + 4 + 2 + 2 + 1 = 24.
 

Constraints:

1 <= m, n <= 150
mat[i][j] is either 0 or 1.

class Solution
{
public:
    int numSubmat(vector<vector<int>> &mat)
    {
        int n = mat.size();
        int m = mat[0].size();
        int dp[n][m];
        for(int i = 0; i < n; i++)
        {
            int c = 0;
            for(int j = m - 1; j >= 0; j--)
            {
                if(mat[i][j]) c++;
                else c = 0;
                dp[i][j] = c;
            }
        }
        int ans = 0;
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                // 左上角为(i, j), 高度为k - i + 1，the number of submatrices that have all ones.
                int x = INT_MAX;
                for(int k = i; k < n && x > 0; k++)
                {
                    x = min(x, dp[k][j]);
                    ans += x;
                }
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/minimum-possible-integer-after-at-most-k-adjacent-swaps-on-digits/

You are given a string num representing the digits of a very large integer and an integer k. You are allowed to swap any two adjacent digits of the integer at most k times.

Return the minimum integer you can obtain also as a string.

 

Example 1:


Input: num = "4321", k = 4
Output: "1342"
Explanation: The steps to obtain the minimum integer from 4321 with 4 adjacent swaps are shown.
Example 2:

Input: num = "100", k = 1
Output: "010"
Explanation: It's ok for the output to have leading zeros, but the input is guaranteed not to have any leading zeros.
Example 3:

Input: num = "36789", k = 1000
Output: "36789"
Explanation: We can keep the number without any swaps.
 

Constraints:

1 <= num.length <= 3 * 104
num consists of only digits and does not contain leading zeros.
1 <= k <= 104

i ... m ... j
假设要把num[j]对应的数移动到num[i]（i < j 且 num[j] < num[i]）
如果之前已经有m个[i ... j]中间的数移动到了前方，则此时需要 j - i - m 次移动就可以把num[j]对应的数移动到num[i]
使用树状数组记录发生移动的坐标位置

class FenwickTree
{
private:
    vector<int> arr;

public:
    FenwickTree(int size) : arr(size + 1, 0)
    {
    }

    int get(int index)
    {
        ++index;
        int sum = 0;
        while (index > 0)
        {
            sum += arr[index];
            index -= index & (-index);
        }
        return sum;
    }

    void set(int index)
    {
        ++index;
        while (index < arr.size())
        {
            ++arr[index];
            index += index & (-index);
        }
    }
};

class Solution
{
public:
    string minInteger(string num, int k)
    {
        vector<deque<int>> indexes(10);
        for (int i = 0; i < num.size(); ++i)
        {
            indexes[num[i] - '0'].push_back(i);
        }
        string result;
        FenwickTree tree(num.size());
        for (int i = 0; i < num.size(); ++i)
        {
            auto digit = num[i] - '0';

            if (indexes[digit].empty() || indexes[digit].front() != i)
                continue;

            indexes[digit].pop_front();

            for (int d = 0; d < digit; ++d)
            {
                if (!indexes[d].empty() && indexes[d].front() > i)
                {
                    int temp = indexes[d].front() - i - tree.get(indexes[d].front()) + tree.get(i);
                    if (temp <= k)
                    {
                        k -= temp;
                        tree.set(indexes[d].front());
                        indexes[d].pop_front();
                        result += (char)(d + '0');
                        d--;
                    }
                }
            }
            result += num[i];
        }
        return result;
    }
};


// Source https://leetcode.com/problems/reformat-date/

Given a date string in the form Day Month Year, where:

Day is in the set {"1st", "2nd", "3rd", "4th", ..., "30th", "31st"}.
Month is in the set {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"}.
Year is in the range [1900, 2100].
Convert the date string to the format YYYY-MM-DD, where:

YYYY denotes the 4 digit year.
MM denotes the 2 digit month.
DD denotes the 2 digit day.
 

Example 1:

Input: date = "20th Oct 2052"
Output: "2052-10-20"
Example 2:

Input: date = "6th Jun 1933"
Output: "1933-06-06"
Example 3:

Input: date = "26th May 1960"
Output: "1960-05-26"
 

Constraints:

The given dates are guaranteed to be valid, so no error handling is necessary.

class Solution
{
public:

    string convert_mon(string s)
    {
        if (s == "Jan")
            return "01";

        if (s == "Feb")
            return "02";

        if (s == "Mar")
            return "03";

        if (s == "Apr")
            return "04";

        if (s == "May")
            return "05";

        if (s == "Jun")
            return "06";

        if (s == "Jul")
            return "07";

        if (s == "Aug")
            return "08";

        if (s == "Sep")
            return "09";

        if (s == "Oct")
            return "10";

        if (s == "Nov")
            return "11";

        if (s == "Dec")
            return "12";

        return "";
    }

    string convert_date(string s)
    {
        if (s.size() == 3)
        {
            string str;
            str += '0';
            str += s[0];
            return str;
        }

        string str;
        str += s[0];
        str += s[1];
        return str;
    }

    string reformatDate(string date)
    {
        vector<string> v;
        stringstream ss(date);
        string t;
        while (ss >> t)
        {
            v.emplace_back(t);
        }
        reverse(v.begin(), v.end());
        v[1] = convert_mon(v[1]);
        v[2] = convert_date(v[2]);
        date.clear();
        for (auto &str : v)
        {
            date += str + '-';
        }
        date.pop_back();
        return date;
    }
};


// Source https://leetcode.com/problems/range-sum-of-sorted-subarray-sums/

You are given the array nums consisting of n positive integers. You computed the sum of all non-empty continuous subarrays from the array 
and then sorted them in non-decreasing order, creating a new array of n * (n + 1) / 2 numbers.

Return the sum of the numbers from index left to index right (indexed from 1), inclusive, in the new array. Since the answer can be a huge number return it modulo 109 + 7.

 

Example 1:

Input: nums = [1,2,3,4], n = 4, left = 1, right = 5
Output: 13 
Explanation: All subarray sums are 1, 3, 6, 10, 2, 5, 9, 3, 7, 4. After sorting them in non-decreasing order we have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. 
The sum of the numbers from index le = 1 to ri = 5 is 1 + 2 + 3 + 3 + 4 = 13. 
Example 2:

Input: nums = [1,2,3,4], n = 4, left = 3, right = 4
Output: 6
Explanation: The given array is the same as example 1. We have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 3 to ri = 4 is 3 + 3 = 6.
Example 3:

Input: nums = [1,2,3,4], n = 4, left = 1, right = 10
Output: 50
 

Constraints:

n == nums.length
1 <= nums.length <= 1000
1 <= nums[i] <= 100
1 <= left <= right <= n * (n + 1) / 2

class Solution
{
public:

    int rangeSum(vector<int> &arr, int n, int left, int right)
    {
        int prefixSum[n];
        prefixSum[0] = arr[0];
        for(int i = 1; i < n; i++)
        {
            prefixSum[i] = arr[i] + prefixSum[i - 1];
        }
        vector<int> subSum;
        subSum.reserve(n * (n + 1) / 2);
        for(int i = 0; i < n; i++)
        {
            for(int j = i; j < n; j++)
            {
                int c = (i > 0) ? prefixSum[j] - prefixSum[i - 1] : prefixSum[j];
                subSum.push_back(c);
            }
        }
        sort(subSum.begin(), subSum.end());
        int i = left - 1;
        int j = right - 1;
        int sum = 0;
        const int mod = 1e9 + 7;
        while(i < j)
        {
            sum = (sum + subSum[i] + subSum[j]) % mod;
            i++;
            j--;
        }
        if(i == j)
        {
            sum = (sum + subSum[i]) % mod;
        }
        return sum;
    }
};


// Source https://leetcode.com/problems/minimum-difference-between-largest-and-smallest-value-in-three-moves/

You are given an integer array nums. In one move, you can choose one element of nums and change it by any value.

Return the minimum difference between the largest and smallest value of nums after performing at most three moves.

 

Example 1:

Input: nums = [5,3,2,4]
Output: 0
Explanation: Change the array [5,3,2,4] to [2,2,2,2].
The difference between the maximum and minimum is 2-2 = 0.
Example 2:

Input: nums = [1,5,0,10,14]
Output: 1
Explanation: Change the array [1,5,0,10,14] to [1,1,0,1,1]. 
The difference between the maximum and minimum is 1-0 = 1.
 

Constraints:

1 <= nums.length <= 105
-109 <= nums[i] <= 109

// choose 3 smallest element
// choose 1 largest and 2 smallest
// choose 2 largest and 1 smallest
// choose 3 largest element

class Solution
{
public:
    int minDifference(vector<int> &nums)
    {
        if(nums.size() <= 4) return 0;
        int ans = INT_MAX;
        int n = nums.size();
        sort(nums.begin(), nums.end());
        ans = min(ans, nums[n - 1] - nums[3]);
        ans = min(ans, nums[n - 2] - nums[2]);
        ans = min(ans, nums[n - 3] - nums[1]);
        ans = min(ans, nums[n - 4] - nums[0]);
        return ans;
    }
};


// Source https://leetcode.com/problems/stone-game-iv/

Alice and Bob take turns playing a game, with Alice starting first.

Initially, there are n stones in a pile. On each player's turn, that player makes a move consisting of removing any non-zero square number of stones in the pile.

Also, if a player cannot make a move, he/she loses the game.

Given a positive integer n, return true if and only if Alice wins the game otherwise return false, assuming both players play optimally.

 

Example 1:

Input: n = 1
Output: true
Explanation: Alice can remove 1 stone winning the game because Bob doesn't have any moves.
Example 2:

Input: n = 2
Output: false
Explanation: Alice can only remove 1 stone, after that Bob removes the last one winning the game (2 -> 1 -> 0).
Example 3:

Input: n = 4
Output: true
Explanation: n is already a perfect square, Alice can win with one move, removing 4 stones (4 -> 0).
 

Constraints:

1 <= n <= 105

class Solution
{
public:
    int dp[100005];

    int recur(int n)
    {
        if(n <= 0) return 0;
        if(dp[n] != -1) return dp[n];
        for(int i = 1; i * i <= n; i++)
        {
            if(!recur(n - i * i)) return dp[n] = 1;
        }
        return dp[n] = 0;
    }

    bool winnerSquareGame(int n)
    {
        memset(dp, -1, sizeof(dp));
        return recur(n);
    }
};


// Source https://leetcode.com/problems/number-of-good-pairs/

Given an array of integers nums, return the number of good pairs.

A pair (i, j) is called good if nums[i] == nums[j] and i < j.

 

Example 1:

Input: nums = [1,2,3,1,1,3]
Output: 4
Explanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.
Example 2:

Input: nums = [1,1,1,1]
Output: 6
Explanation: Each pair in the array are good.
Example 3:

Input: nums = [1,2,3]
Output: 0
 

Constraints:

1 <= nums.length <= 100
1 <= nums[i] <= 100

class Solution
{
public:
    int numIdenticalPairs(vector<int> &nums)
    {
        unordered_map<int, int> mp;
        int n = nums.size();
        int ans = 0;
        for(int i = 0; i < n; i++)
        {
            if(mp[nums[i]] > 0) ans += mp[nums[i]];
            mp[nums[i]]++;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/number-of-substrings-with-only-1s/

Given a binary string s, return the number of substrings with all characters 1's. Since the answer may be too large, return it modulo 109 + 7.

 

Example 1:

Input: s = "0110111"
Output: 9
Explanation: There are 9 substring in total with only 1's characters.
"1" -> 5 times.
"11" -> 3 times.
"111" -> 1 time.
Example 2:

Input: s = "101"
Output: 2
Explanation: Substring "1" is shown 2 times in s.
Example 3:

Input: s = "111111"
Output: 21
Explanation: Each substring contains only 1's characters.
 

Constraints:

1 <= s.length <= 105
s[i] is either '0' or '1'.

class Solution
{
public:
    int numSub(string s)
    {
        int n = s.size();
        int res = 0;
        int count = 0;
        const int mod = 1e9 + 7;
        for (int i = 0; i < n; ++i)
        {
            if (s[i] == '0')
            {
                count = 0;
                continue;
            }
            ++count;
            res = (res + count) % mod;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/path-with-maximum-probability/

You are given an undirected weighted graph of n nodes (0-indexed), represented by an edge list 
where edges[i] = [a, b] is an undirected edge connecting the nodes a and b with a probability of success of traversing that edge succProb[i].

Given two nodes start and end, find the path with the maximum probability of success to go from start to end and return its success probability.

If there is no path from start to end, return 0. Your answer will be accepted if it differs from the correct answer by at most 1e-5.

 

Example 1:



Input: n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.2], start = 0, end = 2
Output: 0.25000
Explanation: There are two paths from start to end, one having a probability of success = 0.2 and the other has 0.5 * 0.5 = 0.25.
Example 2:



Input: n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.3], start = 0, end = 2
Output: 0.30000
Example 3:



Input: n = 3, edges = [[0,1]], succProb = [0.5], start = 0, end = 2
Output: 0.00000
Explanation: There is no path between 0 and 2.
 

Constraints:

2 <= n <= 10^4
0 <= start, end < n
start != end
0 <= a, b < n
a != b
0 <= succProb.length == edges.length <= 2*10^4
0 <= succProb[i] <= 1
There is at most one edge between every two nodes.

class Solution
{
public:
    double maxProbability(int n, vector<vector<int>> &edges, vector<double> &succProb, int start, int end)
    {
        vector<vector<pair<double, int>>> adj(n);
        for(int i = 0; i < edges.size(); i++)
        {
            adj[edges[i][0]].push_back({succProb[i], edges[i][1]});
            adj[edges[i][1]].push_back({succProb[i], edges[i][0]});
        }
        priority_queue<pair<double, int>>pq;
        pq.push({1, start});
        vector<double> dist(n, 0);
        dist[start] = 1;
        vector<int> visited(n);
        while(!pq.empty())
        {
            auto p = pq.top();
            pq.pop();
            double currProb = p.first;
            int currNode = p.second;
            if (visited[currNode]) continue;
            visited[currNode] = 1;
            if (currNode == end) return currProb;
            for(auto [succProb, nextNode] : adj[currNode])
            {
                if (visited[nextNode]) continue;
                double nextProb = currProb * succProb;
                if(dist[nextNode] < nextProb)
                {
                    pq.push({nextProb, nextNode});
                    dist[nextNode] = nextProb;
                }
            }
        }
        return dist[end];
    }
};


// Source https://leetcode.com/problems/best-position-for-a-service-centre/

A delivery company wants to build a new service center in a new city. The company knows the positions of all the customers in this city on a 2D-Map 
and wants to build the new center in a position such that the sum of the euclidean distances to all customers is minimum.

Given an array positions where positions[i] = [xi, yi] is the position of the ith customer on the map, return the minimum sum of the euclidean distances to all customers.

In other words, you need to choose the position of the service center [xcentre, ycentre] such that the following formula is minimized:


Answers within 10-5 of the actual value will be accepted.

 

Example 1:


Input: positions = [[0,1],[1,0],[1,2],[2,1]]
Output: 4.00000
Explanation: As shown, you can see that choosing [xcentre, ycentre] = [1, 1] will make the distance to each customer = 1, the sum of all distances is 4 which is the minimum possible we can achieve.
Example 2:


Input: positions = [[1,1],[3,3]]
Output: 2.82843
Explanation: The minimum possible sum of distances = sqrt(2) + sqrt(2) = 2.82843
 

Constraints:

1 <= positions.length <= 50
positions[i].length == 2
0 <= xi, yi <= 100

class Solution
{
public:
    double dist(const vector<double> &center, vector<vector<int>> &points)
    {
        double sum = 0;
        for(auto &point : points)
        {
            sum += sqrt((point[0] - center[0]) * (point[0] - center[0]) +
                        (point[1] - center[1]) * (point[1] - center[1]));
        }
        return sum;
    };

    double getMinDistSum(vector<vector<int>> &positions)
    {
        constexpr double kDelta = 1e-6;
        int n = positions.size();
        vector<double> center(2, 0.0);
        for(auto &pos : positions)
        {
            center[0] += pos[0];
            center[1] += pos[1];
        }
        center[0] = center[0] / n;
        center[1] = center[1] / n;
        double minDist = dist(center, positions);
        double step = 1.0;
        while(step > kDelta)
        {
            bool reduceStep = true;
            for(int y = -1; y <= 1; y++)
            {
                for(int x = -1; x <= 1; x++)
                {
                    if (abs(y) + abs(x) != 1)
                        continue;

                    double curX = center[0] + x * step;
                    double curY = center[1] + y * step;
                    double newDist = dist({curX, curY}, positions);
                    if (newDist < minDist)
                    {
                        minDist = newDist;
                        reduceStep = false;
                        center[0] = curX;
                        center[1] = curY;
                    }
                }
            }
            if (reduceStep)
            {
                step /= 10.0;
            }
        }
        return minDist;
    }
};


// Source https://leetcode.com/problems/water-bottles/

There are numBottles water bottles that are initially full of water. You can exchange numExchange empty water bottles from the market with one full water bottle.

The operation of drinking a full water bottle turns it into an empty bottle.

Given the two integers numBottles and numExchange, return the maximum number of water bottles you can drink.

 

Example 1:


Input: numBottles = 9, numExchange = 3
Output: 13
Explanation: You can exchange 3 empty bottles to get 1 full water bottle.
Number of water bottles you can drink: 9 + 3 + 1 = 13.
Example 2:


Input: numBottles = 15, numExchange = 4
Output: 19
Explanation: You can exchange 4 empty bottles to get 1 full water bottle. 
Number of water bottles you can drink: 15 + 3 + 1 = 19.
 

Constraints:

1 <= numBottles <= 100
2 <= numExchange <= 100

class Solution
{
public:
    int numWaterBottles(int numBottles, int numExchange)
    {
        int drunk = 0, emptyBottles = 0;
        while(numBottles > 0)
        {
            drunk += numBottles;
            emptyBottles += numBottles;
            numBottles = emptyBottles / numExchange;
            emptyBottles %= numExchange;
        }
        return drunk;
    }
};


// Source https://leetcode.com/problems/number-of-nodes-in-the-sub-tree-with-the-same-label/

You are given a tree (i.e. a connected, undirected graph that has no cycles) consisting of n nodes numbered from 0 to n - 1 and exactly n - 1 edges. 
The root of the tree is the node 0, and each node of the tree has a label which is a lower-case character given in the string labels (i.e. The node with the number i has the label labels[i]).

The edges array is given on the form edges[i] = [ai, bi], which means there is an edge between nodes ai and bi in the tree.

Return an array of size n where ans[i] is the number of nodes in the subtree of the ith node which have the same label as node i.

A subtree of a tree T is the tree consisting of a node in T and all of its descendant nodes.

 

Example 1:


Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], labels = "abaedcd"
Output: [2,1,1,1,1,1,1]
Explanation: Node 0 has label 'a' and its sub-tree has node 2 with label 'a' as well, thus the answer is 2. Notice that any node is part of its sub-tree.
Node 1 has a label 'b'. The sub-tree of node 1 contains nodes 1,4 and 5, as nodes 4 and 5 have different labels than node 1, the answer is just 1 (the node itself).
Example 2:


Input: n = 4, edges = [[0,1],[1,2],[0,3]], labels = "bbbb"
Output: [4,2,1,1]
Explanation: The sub-tree of node 2 contains only node 2, so the answer is 1.
The sub-tree of node 3 contains only node 3, so the answer is 1.
The sub-tree of node 1 contains nodes 1 and 2, both have label 'b', thus the answer is 2.
The sub-tree of node 0 contains nodes 0, 1, 2 and 3, all with label 'b', thus the answer is 4.
Example 3:


Input: n = 5, edges = [[0,1],[0,2],[1,3],[0,4]], labels = "aabab"
Output: [3,2,1,1,1]
 

Constraints:

1 <= n <= 105
edges.length == n - 1
edges[i].length == 2
0 <= ai, bi < n
ai != bi
labels.length == n
labels is consisting of only of lowercase English letters.

class Solution
{
public:
    vector<int> ans;
    vector<vector<int>> graph;

    void dfs(int nodeId, int parentNodeId, string &labels, vector<int> &labelCount)
    {
        int nodeLabelId = labels[nodeId] - 'a';
        int before = labelCount[nodeLabelId];
        ++labelCount[nodeLabelId];
        for (auto nextNodeId : graph[nodeId])
        {
            if (nextNodeId == parentNodeId)
            {
                continue;
            }
            dfs(nextNodeId, nodeId, labels, labelCount);
        }
        ans[nodeId] = labelCount[nodeLabelId] - before;
    }

    vector<int> countSubTrees(int n, vector<vector<int>> &edges, string labels)
    {
        ans.resize(n);
        graph.resize(n);
        for (auto &edge : edges)
        {
            graph[edge[0]].push_back(edge[1]);
            graph[edge[1]].push_back(edge[0]);
        }
        vector<int> labelCount(26);
        dfs(0, -1, labels, labelCount);
        return ans;
    }
};



// Source https://leetcode.com/problems/maximum-number-of-non-overlapping-substrings/

Given a string s of lowercase letters, you need to find the maximum number of non-empty substrings of s that meet the following conditions:

The substrings do not overlap, that is for any two substrings s[i..j] and s[x..y], either j < x or i > y is true.
A substring that contains a certain character c must also contain all occurrences of c.
Find the maximum number of substrings that meet the above conditions. If there are multiple solutions with the same number of substrings, return the one with minimum total length. 
It can be shown that there exists a unique solution of minimum total length.

Notice that you can return the substrings in any order.

 

Example 1:

Input: s = "adefaddaccc"
Output: ["e","f","ccc"]
Explanation: The following are all the possible substrings that meet the conditions:
[
  "adefaddaccc"
  "adefadda",
  "ef",
  "e",
  "f",
  "ccc",
]
If we choose the first string, we cannot choose anything else and we'd get only 1. If we choose "adefadda", we are left with "ccc" which is the only one that doesn't overlap, thus obtaining 2 substrings. Notice also, that it's not optimal to choose "ef" since it can be split into two. Therefore, the optimal way is to choose ["e","f","ccc"] which gives us 3 substrings. No other solution of the same number of substrings exist.
Example 2:

Input: s = "abbaccd"
Output: ["d","bb","cc"]
Explanation: Notice that while the set of substrings ["d","abba","cc"] also has length 3, it's considered incorrect since it has larger total length.
 

Constraints:

1 <= s.length <= 105
s contains only lowercase English letters.

先找出26种字符各自出现位置的左边界，右边界
遍历26种字符的左边界，中间，右边界，根据这些字符，调整包含这些字符的子字符串的左右边界
再按照子字符串的左右边界进行排序，再分2种情况挑选这些子字符串
1种是优先保证子字符串的个数最多，1种是保证子字符串的总长度最小

class Solution
{
public:
    vector<string> maxNumOfSubstrings(string s)
    {
        vector<pair<int, int>> v(26, pair{1000000, -1});
        for(int i = 0; i < s.size(); i++)
        {
            auto& [l, r] = v[s[i] - 'a'];
            l = min(i, l), r = max(i, r);
        }
        auto u = v;
        for(char c = 'a'; c <= 'z'; c++)
        {
            auto& [l, r] = u[c - 'a'];
            if(r == -1) continue;
            for(int i = l, j = l; i <= r || j >= l;)
            {
                if(i <= r)
                {
                    auto [l1, r1] = v[s[i] - 'a'];
                    r = max(r, r1);
                    l = min(l, l1);
                    i++;
                }
                if(j >= l)
                {
                    auto [l1, r1] = v[s[j] - 'a'];
                    r = max(r, r1);
                    l = min(l, l1);
                    j--;
                }
            }
        }
        u.erase(remove(u.begin(), u.end(), pair{1000000, -1}), u.end());
        sort(u.begin(), u.end());
        vector<pair<int, int>> w1 = {u.front()};
        for(auto [l, r] : u)
        {
            auto& [l0, r0] = w1.back();
            if(l > r0) w1.push_back({l, r});
            else if(r <= r0) w1.back() = {l, r};
        }
        vector<pair<int, int>> w2 = {u.front()};
        for(auto [l, r] : u)
        {
            auto& [l0, r0] = w2.back();
            if(l > r0) w2.push_back({l, r});
            else if(r <= r0) w2.back() = {l, r};
            else
            {
                if ( (r -l) < (r0 - l0) ) w2.back() = {l, r};
            } 
        }
        vector<string> res;
        if (w1.size() > w2.size())
        {
            for(auto [l, r] : w1) res.push_back(s.substr(l, r - l + 1));
        }
        else
        {
            for(auto [l, r] : w2) res.push_back(s.substr(l, r - l + 1));
        }
        return res;
    }
};


// Source https://leetcode.com/problems/find-a-value-of-a-mysterious-function-closest-to-target/

func(arr, l, r)
{
    if (r < l)
    {
        return -1000000000;
    }
    ans = arr[l]
    for (i = l + 1; i <= r; i++)
    {
        ans = ans & arr[i]
    }
    return ans
}

Winston was given the above mysterious function func. He has an integer array arr and an integer target 
and he wants to find the values l and r that make the value |func(arr, l, r) - target| minimum possible.

Return the minimum possible value of |func(arr, l, r) - target|.

Notice that func should be called with the values l and r where 0 <= l, r < arr.length.

 

Example 1:

Input: arr = [9,12,3,7,15], target = 5
Output: 2
Explanation: Calling func with all the pairs of [l,r] = [[0,0],[1,1],[2,2],[3,3],[4,4],[0,1],[1,2],[2,3],[3,4],[0,2],[1,3],[2,4],[0,3],[1,4],[0,4]], Winston got the following results [9,12,3,7,15,8,0,3,7,0,0,3,0,0,0]. The value closest to 5 is 7 and 3, thus the minimum difference is 2.
Example 2:

Input: arr = [1000000,1000000,1000000], target = 1
Output: 999999
Explanation: Winston called the func with all possible values of [l,r] and he always got 1000000, thus the min difference is 999999.
Example 3:

Input: arr = [1,2,4,8,16], target = 0
Output: 0
 

Constraints:

1 <= arr.length <= 105
1 <= arr[i] <= 106
0 <= target <= 107

arr[i] & arr[i+1] <= arr[i]
arr[i] & arr[i+1] & arr[i+2] <= arr[i] & arr[i+1]
...
arr[i] & arr[i+1] ... arr[n-1] <= arr[i] & arr[i+1] ... arr[n-2]

st[i][j] 记录arr[i] & arr[i+1] ... arr[i+(2^j - 1)]的结果
st[i][j-1] = arr[i] & arr[i+1] ... arr[i+(2^(j-1) - 1)]
st[i+2^(j-1)][j-1] = arr[i+2^(j-1)] ... arr[i+(2^j - 1)]
st[i][j] = st[i][j-1] & st[i+2^(j-1)][j-1]

class sparseTable
{
public:
    int st[100001][17]; // 2 ^ 16 < 10^5, 2^17 > 10^5

    sparseTable(vector<int> &arr)
    {
        int n = arr.size();
        for(int i = 0; i < n; i++) st[i][0] = arr[i];
        for(int j = 1; j <= 16; j++)
        {
            for(int i = 0; i + (1 << j) - 1 < n; i++)
            {
                st[i][j] = (st[i][j - 1] & st[i + (1 << (j - 1))][j - 1]);
            }
        }
    }

    int query(int l, int r)
    {
        int len = r - l + 1;
        int j = log2(len);
        return (st[l][j] & st[r - (1 << j) + 1][j]);
    }
};

class Solution
{
public:
    int closestToTarget(vector<int> &arr, int target)
    {
        sparseTable st(arr);
        int n = arr.size();
        int ans = INT_MAX;
        for(int i = 0; i < n; i++)
        {
            int l = i, r = n - 1;
            while(l <= r)
            {
                int m = l + (r - l) / 2;
                int x = st.query(i, m);
                ans = min(ans, abs(target - x));
                if (x == target) return ans;
                else if(x < target) r = m - 1;
                else l = m + 1;
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/count-odd-numbers-in-an-interval-range/

Given two non-negative integers low and high. Return the count of odd numbers between low and high (inclusive).

 

Example 1:

Input: low = 3, high = 7
Output: 3
Explanation: The odd numbers between 3 and 7 are [3,5,7].
Example 2:

Input: low = 8, high = 10
Output: 1
Explanation: The odd numbers between 8 and 10 are [9].
 

Constraints:

0 <= low <= high <= 10^9

low 为奇数 high为奇数 (high - low) / 2 + 1
low 为奇数 high为偶数 (high - low) / 2 + 1
low 为偶数 high为奇数 (high - low) / 2 + 1
low 为偶数 high为偶数 (high - low) / 2

class Solution
{
public:
    int countOdds(int low, int high)
    {
        if(low % 2 == 0 && high % 2 == 0)  return (high - low) / 2;
        return  ((high - low) / 2) + 1;
    }
};


// Source https://leetcode.com/problems/number-of-sub-arrays-with-odd-sum/

Given an array of integers arr, return the number of subarrays with an odd sum.

Since the answer can be very large, return it modulo 109 + 7.

 

Example 1:

Input: arr = [1,3,5]
Output: 4
Explanation: All subarrays are [[1],[1,3],[1,3,5],[3],[3,5],[5]]
All sub-arrays sum are [1,4,9,3,8,5].
Odd sums are [1,9,3,5] so the answer is 4.
Example 2:

Input: arr = [2,4,6]
Output: 0
Explanation: All subarrays are [[2],[2,4],[2,4,6],[4],[4,6],[6]]
All sub-arrays sum are [2,6,12,4,10,6].
All sub-arrays have even sum and the answer is 0.
Example 3:

Input: arr = [1,2,3,4,5,6,7]
Output: 16
 

Constraints:

1 <= arr.length <= 105
1 <= arr[i] <= 100

class Solution
{
public:
    const int mod = 1000000007;

    int numOfSubarrays(vector<int> &arr)
    {
        int ans = 0;
        int sum = 0, odd = 0, even = 0;
        for(auto val : arr)
        {
            sum += val;
            if(sum % 2 == 0)
            {
                ans += odd; // 偶数 - 奇数 = 奇数
                ans %= mod;
                even++;
            }
            else
            {
                ans += even; // 奇数 - 偶数 = 奇数
                ans++;
                ans %= mod;
                odd++;
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/number-of-good-ways-to-split-a-string/

You are given a string s.

A split is called good if you can split s into two non-empty strings sleft and sright where their concatenation is equal to s (i.e., sleft + sright = s) 
and the number of distinct letters in sleft and sright is the same.

Return the number of good splits you can make in s.

 

Example 1:

Input: s = "aacaba"
Output: 2
Explanation: There are 5 ways to split "aacaba" and 2 of them are good. 
("a", "acaba") Left string and right string contains 1 and 3 different letters respectively.
("aa", "caba") Left string and right string contains 1 and 3 different letters respectively.
("aac", "aba") Left string and right string contains 2 and 2 different letters respectively (good split).
("aaca", "ba") Left string and right string contains 2 and 2 different letters respectively (good split).
("aacab", "a") Left string and right string contains 3 and 1 different letters respectively.
Example 2:

Input: s = "abcd"
Output: 1
Explanation: Split the string as follows ("ab", "cd").
 

Constraints:

1 <= s.length <= 105
s consists of only lowercase English letters.

class Solution
{
public:
    int numSplits(string s)
    {
        unordered_map<char, int> ml;
        unordered_map<char, int> mr;
        for (auto c : s) mr[c]++;
        int ans = 0;
        for (auto c : s) 
        {
            ml[c]++;
            mr[c]--;
            if(mr[c] == 0) mr.erase(c);
            if(ml.size() == mr.size()) ans++;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/minimum-number-of-increments-on-subarrays-to-form-a-target-array/

You are given an integer array target. You have an integer array initial of the same size as target with all elements initially zeros.

In one operation you can choose any subarray from initial and increment each value by one.

Return the minimum number of operations to form a target array from initial.

The test cases are generated so that the answer fits in a 32-bit integer.

 

Example 1:

Input: target = [1,2,3,2,1]
Output: 3
Explanation: We need at least 3 operations to form the target array from the initial array.
[0,0,0,0,0] increment 1 from index 0 to 4 (inclusive).
[1,1,1,1,1] increment 1 from index 1 to 3 (inclusive).
[1,2,2,2,1] increment 1 at index 2.
[1,2,3,2,1] target array is formed.
Example 2:

Input: target = [3,1,1,2]
Output: 4
Explanation: [0,0,0,0] -> [1,1,1,1] -> [1,1,1,2] -> [2,1,1,2] -> [3,1,1,2]
Example 3:

Input: target = [3,1,5,4,2]
Output: 7
Explanation: [0,0,0,0,0] -> [1,1,1,1,1] -> [2,1,1,1,1] -> [3,1,1,1,1] -> [3,1,2,2,2] -> [3,1,3,3,2] -> [3,1,4,4,2] -> [3,1,5,4,2].
 

Constraints:

1 <= target.length <= 105
1 <= target[i] <= 105

class Solution
{
public:
    int minNumberOperations(vector<int> &target)
    {
        int n = target.size();
        int ans = target[0];
        for(int i = 1; i < n; i++)
        {
            ans += max(0, target[i] - target[i - 1]);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/shuffle-string/

You are given a string s and an integer array indices of the same length. The string s will be shuffled such that the character at the ith position moves to indices[i] in the shuffled string.

Return the shuffled string.

 

Example 1:


Input: s = "codeleet", indices = [4,5,6,7,0,2,1,3]
Output: "leetcode"
Explanation: As shown, "codeleet" becomes "leetcode" after shuffling.
Example 2:

Input: s = "abc", indices = [0,1,2]
Output: "abc"
Explanation: After shuffling, each character remains in its position.
 

Constraints:

s.length == indices.length == n
1 <= n <= 100
s consists of only lowercase English letters.
0 <= indices[i] < n
All values of indices are unique.

class Solution
{
public:
    string restoreString(string s, vector<int> &indices)
    {
        int n = s.length();
        string ans = s;
        for(int i = 0; i < n; i++)
        {
            ans[indices[i]] = s[i];
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/minimum-suffix-flips/

You are given a 0-indexed binary string target of length n. You have another binary string s of length n that is initially set to all zeros. You want to make s equal to target.

In one operation, you can pick an index i where 0 <= i < n and flip all bits in the inclusive range [i, n - 1]. Flip means changing '0' to '1' and '1' to '0'.

Return the minimum number of operations needed to make s equal to target.

 

Example 1:

Input: target = "10111"
Output: 3
Explanation: Initially, s = "00000".
Choose index i = 2: "00000" -> "00111"
Choose index i = 0: "00111" -> "11000"
Choose index i = 1: "11000" -> "10111"
We need at least 3 flip operations to form target.

00000 -> 11111 -> 10000 -> 10111

Example 2:

Input: target = "101"
Output: 3
Explanation: Initially, s = "000".
Choose index i = 0: "000" -> "111"
Choose index i = 1: "111" -> "100"
Choose index i = 2: "100" -> "101"
We need at least 3 flip operations to form target.

000 -> 111 -> 100 -> 101

Example 3:

Input: target = "00000"
Output: 0
Explanation: We do not need any operations since the initial s already equals target.
 

Constraints:

n == target.length
1 <= n <= 105
target[i] is either '0' or '1'.

class Solution
{
public:
    int minFlips(string target)
    {
        int res = 0;
        char temp = '1';
        for (auto c : target)
        {
            if (c == temp) { ++res; temp = ('1' -  c) + '0'; }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/number-of-good-leaf-nodes-pairs/

You are given the root of a binary tree and an integer distance. A pair of two different leaf nodes of a binary tree is said to be good 
if the length of the shortest path between them is less than or equal to distance.

Return the number of good leaf node pairs in the tree.

 

Example 1:


Input: root = [1,2,3,null,4], distance = 3
Output: 1
Explanation: The leaf nodes of the tree are 3 and 4 and the length of the shortest path between them is 3. This is the only good pair.
Example 2:


Input: root = [1,2,3,4,5,6,7], distance = 3
Output: 2
Explanation: The good pairs are [4,5] and [6,7] with shortest path = 2. The pair [4,6] is not good because the length of ther shortest path between them is 4.
Example 3:

Input: root = [7,1,4,6,null,5,3,null,null,null,null,null,2], distance = 3
Output: 1
Explanation: The only good pair is [2,5].
 

Constraints:

The number of nodes in the tree is in the range [1, 210].
1 <= Node.val <= 100
1 <= distance <= 10

class Solution
{
public:
    int res;

    int countPairs(TreeNode *root, int distance)
    {
        res = 0;
        dfs(root, distance);
        return res;
    }

    vector<int> dfs(TreeNode *root, int distance)
    {
        vector<int> ans;
        if(!root) return ans;
        if(!root->left && !root->right)
        {
            ans.push_back(0);
            return ans;
        }
        vector<int> l = dfs(root->left, distance);
        vector<int> r = dfs(root->right, distance);
        for (auto leftD : l)
        {
            for (auto rightD : r)
            {
                if(leftD + rightD + 2 <= distance) res++;
            }
        }
        for (auto leftD : l)
        {
            if(leftD + 1 < distance) ans.push_back(leftD + 1);
        }
        for (auto rightD : r)
        {
            if(rightD + 1 < distance) ans.push_back(rightD + 1);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/string-compression-ii/

Run-length encoding is a string compression method that works by replacing consecutive identical characters (repeated 2 or more times) 
with the concatenation of the character and the number marking the count of the characters (length of the run). 
For example, to compress the string "aabccc" we replace "aa" by "a2" and replace "ccc" by "c3". Thus the compressed string becomes "a2bc3".

Notice that in this problem, we are not adding '1' after single characters.

Given a string s and an integer k. You need to delete at most k characters from s such that the run-length encoded version of s has minimum length.

Find the minimum length of the run-length encoded version of s after deleting at most k characters.

 

Example 1:

Input: s = "aaabcccd", k = 2
Output: 4
Explanation: Compressing s without deleting anything will give us "a3bc3d" of length 6. Deleting any of the characters 'a' or 'c' would at most decrease the length of the compressed string to 5, for instance delete 2 'a' then we will have s = "abcccd" which compressed is abc3d. Therefore, the optimal way is to delete 'b' and 'd', then the compressed version of s will be "a3c3" of length 4.
Example 2:

Input: s = "aabbaa", k = 2
Output: 2
Explanation: If we delete both 'b' characters, the resulting compressed string would be "a4" of length 2.
Example 3:

Input: s = "aaaaaaaaaaa", k = 0
Output: 3
Explanation: Since k is zero, we cannot delete anything. The compressed string is "a11" of length 3.
 

Constraints:

1 <= s.length <= 100
0 <= k <= s.length
s contains only lowercase English letters.

class Solution
{
public:
    int n;
    int dp[101][101];
    
    int recur(int index, string &s, int removeCnt)
    {
        if(index + removeCnt >= n) return 0;
        if(dp[index][removeCnt] != -1) return dp[index][removeCnt];
        int ans = 1e9;
        if (removeCnt > 0)
        {
            ans = recur(index + 1, s, removeCnt - 1);
        }
        int count = 0;
        int tempCnt = removeCnt;
        for (int j = index; j < n; ++j)
        {
            if (s[j] != s[index] && tempCnt == 0) break;
            if(s[j] == s[index]) ++count;
            else --tempCnt;
            ans = min(ans, recur(j + 1, s, tempCnt) + 1 + (count >= 100 ? 3 : count >= 10 ? 2 : count > 1 ? 1 : 0));
        }
        return dp[index][removeCnt] = ans;
    }

    int getLengthOfOptimalCompression(string s, int k)
    {
        n = s.length();
        memset(dp, -1, sizeof(dp));
        return recur(0, s, k);
    }
};


// Source https://leetcode.com/problems/count-good-triplets/

Given an array of integers arr, and three integers a, b and c. You need to find the number of good triplets.

A triplet (arr[i], arr[j], arr[k]) is good if the following conditions are true:

0 <= i < j < k < arr.length
|arr[i] - arr[j]| <= a
|arr[j] - arr[k]| <= b
|arr[i] - arr[k]| <= c
Where |x| denotes the absolute value of x.

Return the number of good triplets.

 

Example 1:

Input: arr = [3,0,1,1,9,7], a = 7, b = 2, c = 3
Output: 4
Explanation: There are 4 good triplets: [(3,0,1), (3,0,1), (3,1,1), (0,1,1)].
Example 2:

Input: arr = [1,1,2,2,3], a = 0, b = 0, c = 1
Output: 0
Explanation: No triplet satisfies all conditions.
 

Constraints:

3 <= arr.length <= 100
0 <= arr[i] <= 1000
0 <= a, b, c <= 1000

class Solution
{
public:
    int countGoodTriplets(vector<int> &arr, int a, int b, int c)
    {
        int n = arr.size();
        int count = 0;
        for(int i = 0; i < n - 2; i++)
        {
            for(int j = i + 1; j < n - 1; j++)
            {
                if(abs(arr[i]-arr[j]) > a) continue;
                for(int k = j + 1; k < n; k++)
                {
                    if(abs(arr[j] - arr[k]) <= b && abs(arr[i] - arr[k]) <= c)
                    {
                        count++;
                    }
                }
            }
        }
        return count;
    }
};


// Source https://leetcode.com/problems/find-the-winner-of-an-array-game/

Given an integer array arr of distinct integers and an integer k.

A game will be played between the first two elements of the array (i.e. arr[0] and arr[1]). In each round of the game, we compare arr[0] with arr[1], 
the larger integer wins and remains at position 0, and the smaller integer moves to the end of the array. The game ends when an integer wins k consecutive rounds.

Return the integer which will win the game.

It is guaranteed that there will be a winner of the game.

 

Example 1:

Input: arr = [2,1,3,5,4,6,7], k = 2
Output: 5
Explanation: Let's see the rounds of the game:
Round |       arr       | winner | win_count
  1   | [2,1,3,5,4,6,7] | 2      | 1
  2   | [2,3,5,4,6,7,1] | 3      | 1
  3   | [3,5,4,6,7,1,2] | 5      | 1
  4   | [5,4,6,7,1,2,3] | 5      | 2
So we can see that 4 rounds will be played and 5 is the winner because it wins 2 consecutive games.
Example 2:

Input: arr = [3,2,1], k = 10
Output: 3
Explanation: 3 will win the first 10 rounds consecutively.
 

Constraints:

2 <= arr.length <= 105
1 <= arr[i] <= 106
arr contains distinct integers.
1 <= k <= 109

class Solution
{
public:
    int getWinner(vector<int> &arr, int k)
    {
        int n = arr.size();
        int winCnt = 0;
        int biggestSoFar = arr[0];
        for(int i = 1; i < n; ++i)
        {
            if(biggestSoFar > arr[i])
            {
                winCnt++;
            }
            else
            {
                biggestSoFar = arr[i];
                winCnt = 1;
            }
            if(winCnt == k) return biggestSoFar;
        }
        return biggestSoFar;
    }
};


// Source https://leetcode.com/problems/minimum-swaps-to-arrange-a-binary-grid/

Given an n x n binary grid, in one step you can choose two adjacent rows of the grid and swap them.

A grid is said to be valid if all the cells above the main diagonal are zeros.

Return the minimum number of steps needed to make the grid valid, or -1 if the grid cannot be valid.

The main diagonal of a grid is the diagonal that starts at cell (1, 1) and ends at cell (n, n).

 

Example 1:


Input: grid = [[0,0,1],[1,1,0],[1,0,0]]
Output: 3
Example 2:


Input: grid = [[0,1,1,0],[0,1,1,0],[0,1,1,0],[0,1,1,0]]
Output: -1
Explanation: All rows are similar, swaps have no effect on the grid.
Example 3:


Input: grid = [[1,0,0],[1,1,0],[1,1,1]]
Output: 0
 

Constraints:

n == grid.length == grid[i].length
1 <= n <= 200
grid[i][j] is either 0 or 1

class Solution
{
public:
    int minSwaps(vector<vector<int>> &grid)
    {
        int n = grid.size();
        vector<int> curr(n);
        for(int i = 0; i < n; i++)
        {
            int cnt = 0;
            for(int j = grid[i].size() - 1; j >= 0 && grid[i][j] == 0; j--, cnt++);
            grid[i].push_back(cnt);
            curr[i] = cnt;
        }
        sort(curr.rbegin(), curr.rend());
        for(int i = 0; i < n; i++)
        {
            if (curr[i] < (n - 1 -i)) return -1;
        }
        int ans = 0;
        int zeroCnt = n - 1;
        for(int i = 0; i < n; i++)
        {
            if(grid[i].back() < zeroCnt)
            {
                for(int r = i + 1; r < n; r++)
                {
                    if(grid[r].back() >= zeroCnt)
                    {
                        for(int k = r; k > i; k--)
                        {
                            swap(grid[k], grid[k - 1]);
                            ans++;
                        }
                        break;
                    }
                }
            }
            zeroCnt--;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/get-the-maximum-score/

You are given two sorted arrays of distinct integers nums1 and nums2.

A valid path is defined as follows:

Choose array nums1 or nums2 to traverse (from index-0).
Traverse the current array from left to right.
If you are reading any value that is present in nums1 and nums2 you are allowed to change your path to the other array. (Only one repeated value is considered in the valid path).
The score is defined as the sum of uniques values in a valid path.

Return the maximum score you can obtain of all possible valid paths. Since the answer may be too large, return it modulo 109 + 7.

 

Example 1:


Input: nums1 = [2,4,5,8,10], nums2 = [4,6,8,9]
Output: 30
Explanation: Valid paths:
[2,4,5,8,10], [2,4,5,8,9], [2,4,6,8,9], [2,4,6,8,10],  (starting from nums1)
[4,6,8,9], [4,5,8,10], [4,5,8,9], [4,6,8,10]    (starting from nums2)
The maximum is obtained with the path in green [2,4,6,8,10].
Example 2:

Input: nums1 = [1,3,5,7,9], nums2 = [3,5,100]
Output: 109
Explanation: Maximum sum is obtained with the path [1,3,5,100].
Example 3:

Input: nums1 = [1,2,3,4,5], nums2 = [6,7,8,9,10]
Output: 40
Explanation: There are no common elements between nums1 and nums2.
Maximum sum is obtained with the path [6,7,8,9,10].
 

Constraints:

1 <= nums1.length, nums2.length <= 105
1 <= nums1[i], nums2[i] <= 107
nums1 and nums2 are strictly increasing.

class Solution
{
public:
    int maxSum(vector<int> &nums1, vector<int> &nums2)
    {
        const long mod = 1e9 + 7;
        int len1 = nums1.size();
        int len2 = nums2.size();
        long sum1 = 0, sum2 = 0, total = 0;
        int i = 0, j = 0;
        while(i < len1 && j < len2)
        {
            if(nums1[i] == nums2[j])
            {
                if(sum1 > sum2)
                {
                    total = (total + sum1 + nums1[i]) % mod;
                }
                else
                {
                    total = (total + sum2 + nums2[j]) % mod;
                }
                i++;
                j++;
                sum1 = 0;
                sum2 = 0;
            }
            else
            {
                if(nums1[i] > nums2[j])
                {
                    sum2 += nums2[j];
                    j++;
                }
                else
                {
                    sum1 += nums1[i];
                    i++;
                }
            }
        }
        if(i != len1)
        {
            while(i < len1)
                sum1 += nums1[i++];
        }
        if(j != len2)
        {
            while(j < len2)
                sum2 += nums2[j++];
        }
        if(i == len1 && j == len2)
        {
            if(sum1 > sum2)
                total = (total + sum1) % mod;
            else
                total = (total + sum2) % mod;
        }
        return total;
    }
};


// Source https://leetcode.com/problems/kth-missing-positive-number/

Given an array arr of positive integers sorted in a strictly increasing order, and an integer k.

Return the kth positive integer that is missing from this array.

 

Example 1:

Input: arr = [2,3,4,7,11], k = 5
Output: 9
Explanation: The missing positive integers are [1,5,6,8,9,10,12,13,...]. The 5th missing positive integer is 9.
Example 2:

Input: arr = [1,2,3,4], k = 2
Output: 6
Explanation: The missing positive integers are [5,6,7,...]. The 2nd missing positive integer is 6.
 

Constraints:

1 <= arr.length <= 1000
1 <= arr[i] <= 1000
1 <= k <= 1000
arr[i] < arr[j] for 1 <= i < j <= arr.length

class Solution
{
public:
    int findKthPositive(vector<int> &arr, int k)
    {
        int n = arr.size();
        int idx = -1;
        int l = 0;
        int r = n - 1;
        while (l <= r)
        {
            int m = l + (r - l) / 2;
            int currentMissing = arr[m] - m - 1;
            if (k <= currentMissing)
            {
                idx = m;
                r = m - 1;
            }
            else
            {
                l = m + 1;
            }
        }
        if (idx == -1) return k + n; // arr[n - 1] + (k - arr[n - 1] + n);
        if (idx == 0) return k;
        return k + idx; // arr[idx - 1] + (k - arr[idx - 1] + idx)
    }
};


// Source https://leetcode.com/problems/can-convert-string-in-k-moves/

Given two strings s and t, your goal is to convert s into t in k moves or less.

During the ith (1 <= i <= k) move you can:

Choose any index j (1-indexed) from s, such that 1 <= j <= s.length and j has not been chosen in any previous move, and shift the character at that index i times.
Do nothing.
Shifting a character means replacing it by the next letter in the alphabet (wrapping around so that 'z' becomes 'a'). Shifting a character by i means applying the shift operations i times.

Remember that any index j can be picked at most once.

Return true if it's possible to convert s into t in no more than k moves, otherwise return false.

 

Example 1:

Input: s = "input", t = "ouput", k = 9
Output: true
Explanation: In the 6th move, we shift 'i' 6 times to get 'o'. And in the 7th move we shift 'n' to get 'u'.
Example 2:

Input: s = "abc", t = "bcd", k = 10
Output: false
Explanation: We need to shift each character in s one time to convert it into t. We can shift 'a' to 'b' during the 1st move. However, there is no way to shift the other characters in the remaining moves to obtain t from s.
Example 3:

Input: s = "aab", t = "bbb", k = 27
Output: true
Explanation: In the 1st move, we shift the first 'a' 1 time to get 'b'. In the 27th move, we shift the second 'a' 27 times to get 'b'.
 

Constraints:

1 <= s.length, t.length <= 10^5
0 <= k <= 10^9
s, t contain only lowercase English letters.

class Solution
{
public:
    bool canConvertString(string s, string t, int k)
    {
        unordered_map<int, int> mp;
        int n = s.length(), m = t.length();
        if(n != m) return false;
        for(int i = 0; i < n; i++)
        {
            int diff = int(t[i]) - int(s[i]);
            if(diff < 0) diff = 26 + diff;
            if(diff > 0) mp[diff] += 1;
        }
        for(auto p : mp)
        {
            if(k < 26 * (p.second - 1) + p.first) return false;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/minimum-insertions-to-balance-a-parentheses-string/

Given a parentheses string s containing only the characters '(' and ')'. A parentheses string is balanced if:

Any left parenthesis '(' must have a corresponding two consecutive right parenthesis '))'.
Left parenthesis '(' must go before the corresponding two consecutive right parenthesis '))'.
In other words, we treat '(' as an opening parenthesis and '))' as a closing parenthesis.

For example, "())", "())(())))" and "(())())))" are balanced, ")()", "()))" and "(()))" are not balanced.
You can insert the characters '(' and ')' at any position of the string to balance it if needed.

Return the minimum number of insertions needed to make s balanced.

 

Example 1:

Input: s = "(()))"
Output: 1
Explanation: The second '(' has two matching '))', but the first '(' has only ')' matching. We need to add one more ')' at the end of the string to be "(())))" which is balanced.
Example 2:

Input: s = "())"
Output: 0
Explanation: The string is already balanced.
Example 3:

Input: s = "))())("
Output: 3
Explanation: Add '(' to match the first '))', Add '))' to match the last '('.
 

Constraints:

1 <= s.length <= 105
s consists of '(' and ')' only.

class Solution
{
public:

    int minInsertions(string s)
    {
        int n = s.size();
        int open = 0;
        int ans = 0;
        for(int i = 0; i < n; i++)
        {
            if(s[i] == '(')
            {
                open++;
            }
            else
            {
                if(open == 0)
                {
                    if(i + 1 < n && s[i + 1] == ')')
                    {
                        ans++;
                        i++;
                    }
                    else
                    {
                        ans += 2;
                    }
                }
                else
                {
                    open--;
                    if(i + 1 < n && s[i + 1] == ')')
                    {
                        i++;
                    }
                    else
                    {
                        ans++;
                    }
                }
            }
        }
        return ans + 2 * open;
    }
};


// Source https://leetcode.com/problems/find-longest-awesome-substring/

You are given a string s. An awesome substring is a non-empty substring of s such that we can make any number of swaps in order to make it a palindrome.

Return the length of the maximum length awesome substring of s.

 

Example 1:

Input: s = "3242415"
Output: 5
Explanation: "24241" is the longest awesome substring, we can form the palindrome "24142" with some swaps.
Example 2:

Input: s = "12345678"
Output: 1
Example 3:

Input: s = "213123"
Output: 6
Explanation: "213123" is the longest awesome substring, we can form the palindrome "231132" with some swaps.
 

Constraints:

1 <= s.length <= 105
s consists only of digits.

class Solution
{
public:
    int longestAwesome(string s)
    {
        int n = s.length();
        int pos[1024];
        int flag[1024];
        memset(pos, -1, sizeof(pos));
        memset(flag, 0, sizeof(flag));
        flag[0] = 1;
        int mask = 0, ans = 1;
        for(int i = 0; i < n; i++)
        {
            mask ^= (1 << (s[i] - '0'));
            if(flag[mask])
            {
                ans = max(ans, i - pos[mask]);
            }
            for(int j = 0; j < 10; j++)
            {
                int tmp_mask = mask ^ (1 << j);
                if(flag[tmp_mask])
                {
                    ans = max(ans, i - pos[tmp_mask]);
                }
            }
            if(flag[mask] == 0)
            {
                flag[mask] = 1;
                pos[mask] = i;
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/make-the-string-great/

Given a string s of lower and upper case English letters.

A good string is a string which doesn't have two adjacent characters s[i] and s[i + 1] where:

0 <= i <= s.length - 2
s[i] is a lower-case letter and s[i + 1] is the same letter but in upper-case or vice-versa.
To make the string good, you can choose two adjacent characters that make the string bad and remove them. You can keep doing this until the string becomes good.

Return the string after making it good. The answer is guaranteed to be unique under the given constraints.

Notice that an empty string is also good.

 

Example 1:

Input: s = "leEeetcode"
Output: "leetcode"
Explanation: In the first step, either you choose i = 1 or i = 2, both will result "leEeetcode" to be reduced to "leetcode".
Example 2:

Input: s = "abBAcC"
Output: ""
Explanation: We have many possible scenarios, and all lead to the same answer. For example:
"abBAcC" --> "aAcC" --> "cC" --> ""
"abBAcC" --> "abBA" --> "aA" --> ""
Example 3:

Input: s = "s"
Output: "s"
 

Constraints:

1 <= s.length <= 100
s contains only lower and upper case English letters.

class Solution
{
public:
    string makeGood(string s)
    {
        int n = s.length();
        string result;
        result.reserve(n);
        result.push_back(s[0]);
        for (int i = 1; i < n; i++)
        {
            if (result.size() > 0  && result.back() != s[i] && tolower(result.back()) == tolower(s[i]))
            {
                result.pop_back();
            }
            else
            {
                result.push_back(s[i]);
            }
        }
        return result;
    }
};


// Source https://leetcode.com/problems/find-kth-bit-in-nth-binary-string/

Given two positive integers n and k, the binary string Sn is formed as follows:

S1 = "0"
Si = Si - 1 + "1" + reverse(invert(Si - 1)) for i > 1
Where + denotes the concatenation operation, reverse(x) returns the reversed string x, and invert(x) inverts all the bits in x (0 changes to 1 and 1 changes to 0).

For example, the first four strings in the above sequence are:

S1 = "0"
S2 = "011"
S3 = "0111001"
S4 = "011100110110001"
Return the kth bit in Sn. It is guaranteed that k is valid for the given n.

 

Example 1:

Input: n = 3, k = 1
Output: "0"
Explanation: S3 is "0111001".
The 1st bit is "0".
Example 2:

Input: n = 4, k = 11
Output: "1"
Explanation: S4 is "011100110110001".
The 11th bit is "1".
 

Constraints:

1 <= n <= 20
1 <= k <= 2^n - 1

class Solution
{
public:

    string helper(string s)
    {
        for (auto &c : s)
        {
            c = ('1' - c) + '0';
        }
        reverse(s.begin(), s.end());
        return s;
    }

    void solve(string &s, int idx, int n)
    {
        if (idx == n) return;
        string t = helper(s);
        s = s + "1" + t;
        ++idx;
        solve(s, idx, n);
    }

    char findKthBit(int n, int k)
    {
        string ans = "0";
        if (n > 1) solve(ans, 1, n);
        return ans[k - 1];
    }
};


// Source https://leetcode.com/problems/maximum-number-of-non-overlapping-subarrays-with-sum-equals-target/

Given an array nums and an integer target, return the maximum number of non-empty non-overlapping subarrays such that the sum of values in each subarray is equal to target.

 

Example 1:

Input: nums = [1,1,1,1,1], target = 2
Output: 2
Explanation: There are 2 non-overlapping subarrays [1,1,1,1,1] with sum equals to target(2).
Example 2:

Input: nums = [-1,3,5,1,4,2,-9], target = 6
Output: 2
Explanation: There are 3 subarrays with sum equal to 6.
([5,1], [4,2], [3,5,1,4,2,-9]) but only the first 2 are non-overlapping.
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104
0 <= target <= 106

class Solution
{
public:
    int maxNonOverlapping(vector<int> &nums, int target)
    {
        int n = nums.size();
        vector<int>dp(n);
        dp[0] = (nums[0] == target) ? 1 : 0;
        int sum = nums[0];
        unordered_map<int, int>mp;
        mp[sum] = 0;
        for(int i = 1; i < n; i++)
        {
            sum += nums[i];
            dp[i] = dp[i - 1];
            if(sum == target) dp[i] = max(dp[i], 1);
            if(mp.count(sum - target))
            {
                int id = mp[sum - target];
                dp[i] = max(dp[id] + 1, dp[i]);
            }
            mp[sum] = i;
        }
        return dp[n - 1];
    }
};


// Source https://leetcode.com/problems/minimum-cost-to-cut-a-stick/

Given a wooden stick of length n units. The stick is labelled from 0 to n. For example, a stick of length 6 is labelled as follows:

0	1	2	3	4	5	6

Given an integer array cuts where cuts[i] denotes a position you should perform a cut at.

You should perform the cuts in order, you can change the order of the cuts as you wish.

The cost of one cut is the length of the stick to be cut, the total cost is the sum of costs of all cuts. 
When you cut a stick, it will be split into two smaller sticks (i.e. the sum of their lengths is the length of the stick before the cut). 
Please refer to the first example for a better explanation.

Return the minimum total cost of the cuts.

 

Example 1:


Input: n = 7, cuts = [1,3,4,5]
Output: 16
Explanation: Using cuts order = [1, 3, 4, 5] as in the input leads to the following scenario:

The first cut is done to a rod of length 7 so the cost is 7. The second cut is done to a rod of length 6 (i.e. the second part of the first cut), the third is done to a rod of length 4 and the last cut is to a rod of length 3. The total cost is 7 + 6 + 4 + 3 = 20.
Rearranging the cuts to be [3, 5, 1, 4] for example will lead to a scenario with total cost = 16 (as shown in the example photo 7 + 4 + 3 + 2 = 16).
Example 2:

Input: n = 9, cuts = [5,6,1,4,2]
Output: 22
Explanation: If you try the given cuts ordering the cost will be 25.
There are much ordering with total cost <= 25, for example, the order [4, 6, 5, 2, 1] has total cost = 22 which is the minimum possible.
 

Constraints:

2 <= n <= 106
1 <= cuts.length <= min(n - 1, 100)
1 <= cuts[i] <= n - 1
All the integers in cuts array are distinct.

class Solution
{
public:
    int dp[101][101];
    
    int recur(int leftPos, int rightPos, vector<int> &cuts, int i, int j)
    {
        if(i > j) return 0;
        if(dp[i][j] != -1) return dp[i][j];
        int ans = INT_MAX;
        for(int k = i; k <= j; k++)
        {
            ans = min(ans, recur(leftPos, cuts[k], cuts, i, k - 1) + 
                                    recur(cuts[k], rightPos, cuts, k + 1, j) + rightPos - leftPos);
        }
        return dp[i][j] = ans;
    }

    int minCost(int n, vector<int> &cuts)
    {
        memset(dp, -1, sizeof(dp));
        sort(cuts.begin(), cuts.end());
        return recur(0, n, cuts, 0, cuts.size() - 1);
    }
};

// Source https://leetcode.com/problems/three-consecutive-odds/

Given an integer array arr, return true if there are three consecutive odd numbers in the array. Otherwise, return false.
 

Example 1:

Input: arr = [2,6,4,1]
Output: false
Explanation: There are no three consecutive odds.
Example 2:

Input: arr = [1,2,34,3,4,5,7,23,12]
Output: true
Explanation: [5,7,23] are three consecutive odds.
 

Constraints:

1 <= arr.length <= 1000
1 <= arr[i] <= 1000

class Solution
{
public:
    bool threeConsecutiveOdds(vector<int> &arr)
    {
        int n = arr.size();
        for(int i = 0; i < n - 2; i++)
        {
            if( (arr[i] & 1) && (arr[i + 1] & 1) && (arr[i + 2] & 1) )
                return true;
        }
        return false;
    }
};


// Source https://leetcode.com/problems/minimum-operations-to-make-array-equal/

You have an array arr of length n where arr[i] = (2 * i) + 1 for all valid values of i (i.e., 0 <= i < n).

In one operation, you can select two indices x and y where 0 <= x, y < n and subtract 1 from arr[x] and add 1 to arr[y] (i.e., perform arr[x] -=1 and arr[y] += 1). 
The goal is to make all the elements of the array equal. It is guaranteed that all the elements of the array can be made equal using some operations.

Given an integer n, the length of the array, return the minimum number of operations needed to make all the elements of arr equal.

 

Example 1:

Input: n = 3
Output: 2
Explanation: arr = [1, 3, 5]
First operation choose x = 2 and y = 0, this leads arr to be [2, 3, 4]
In the second operation choose x = 2 and y = 0 again, thus arr = [3, 3, 3].
Example 2:

Input: n = 6
Output: 9
 

Constraints:

1 <= n <= 104

class Solution
{
public:
    int minOperations(int n)
    {
        int ans = 0;
        if(n == 1) return 0;
        if(n % 2)
        {
            int mid = 2 * (n / 2) + 1;
            for(int i = 0; i < n / 2; i++)
                ans += (mid - (2 * i + 1));
        }
        else
        {
            int mid = n;
            for(int i = 0; i < n / 2; i++)
            {
                ans += (mid - (2 * i + 1));
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/magnetic-force-between-two-balls/

In the universe Earth C-137, Rick discovered a special form of magnetic force between two balls if they are put in his new invented basket. 
Rick has n empty baskets, the ith basket is at position[i], Morty has m balls and needs to distribute the balls into the baskets 
such that the minimum magnetic force between any two balls is maximum.

Rick stated that magnetic force between two different balls at positions x and y is |x - y|.

Given the integer array position and the integer m. Return the required force.

 

Example 1:


Input: position = [1,2,3,4,7], m = 3
Output: 3
Explanation: Distributing the 3 balls into baskets 1, 4 and 7 will make the magnetic force between ball pairs [3, 3, 6]. The minimum magnetic force is 3. We cannot achieve a larger minimum magnetic force than 3.
Example 2:

Input: position = [5,4,3,2,1,1000000000], m = 2
Output: 999999999
Explanation: We can use baskets 1 and 1000000000.
 

Constraints:

n == position.length
2 <= n <= 105
1 <= position[i] <= 109
All integers in position are distinct.
2 <= m <= position.length

class Solution
{
public:

    bool check(vector<int> &position, int m, int dist)
    {
        int coordinate = position[0];
        int ball_count = 1;
        int n = position.size();
        for(int i = 1; i < n; i++)
        {
            if((position[i] - coordinate) >= dist)
            {
                ball_count += 1;
                coordinate = position[i];
                if(ball_count == m) return true;
            }
        }
        return false;
    }

    int maxDistance(vector<int> &position, int m)
    {
        sort(position.begin(), position.end());
        int n = position.size();
        int low = 1;
        int high = position[n - 1] - position[0];
        int res = 0;
        while(low <= high)
        {
            int mid = low + (high - low) / 2;
            if(check(position, m, mid))
            {
                res = mid;
                low = mid + 1;
            }
            else
                high = mid - 1;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/minimum-number-of-days-to-eat-n-oranges/

There are n oranges in the kitchen and you decided to eat some of these oranges every day as follows:

Eat one orange.
If the number of remaining oranges n is divisible by 2 then you can eat n / 2 oranges.
If the number of remaining oranges n is divisible by 3 then you can eat 2 * (n / 3) oranges.
You can only choose one of the actions per day.

Given the integer n, return the minimum number of days to eat n oranges.

 

Example 1:

Input: n = 10
Output: 4
Explanation: You have 10 oranges.
Day 1: Eat 1 orange,  10 - 1 = 9.  
Day 2: Eat 6 oranges, 9 - 2*(9/3) = 9 - 6 = 3. (Since 9 is divisible by 3)
Day 3: Eat 2 oranges, 3 - 2*(3/3) = 3 - 2 = 1. 
Day 4: Eat the last orange  1 - 1  = 0.
You need at least 4 days to eat the 10 oranges.
Example 2:

Input: n = 6
Output: 3
Explanation: You have 6 oranges.
Day 1: Eat 3 oranges, 6 - 6/2 = 6 - 3 = 3. (Since 6 is divisible by 2).
Day 2: Eat 2 oranges, 3 - 2*(3/3) = 3 - 2 = 1. (Since 3 is divisible by 3)
Day 3: Eat the last orange  1 - 1  = 0.
You need at least 3 days to eat the 6 oranges.
 

Constraints:

1 <= n <= 2 * 109

class Solution
{
public:
    unordered_map<int, int> mp;
    
    int recur(int n)
    {
        if(n == 0) return 0;
        if(n == 1) return 1;
        if(mp.find(n) != mp.end()) return mp[n];
        int ans = n;
        ans = min(ans, (n % 2) + 1 + recur(n/2));
        ans = min(ans, (n % 3) + 1 + recur(n/3));
        return mp[n] = ans;
    }

    int minDays(int n)
    {
        return recur(n);
    }
};

// Source https://leetcode.com/problems/thousand-separator/

Given an integer n, add a dot (".") as the thousands separator and return it in string format.

 

Example 1:

Input: n = 987
Output: "987"
Example 2:

Input: n = 1234
Output: "1.234"
 

Constraints:

0 <= n <= 231 - 1

class Solution
{
public:
    string thousandSeparator(int n)
    {
        string s = to_string(n);
        if(n < 1000) return s;
        int len = s.length();
        int cnt = (len - 1) / 3;
        string t;
        t.reserve(len + cnt);
        for(int i = len - 1, j = 0; i >= 0; --i, ++j)
        {
            if (j == 3) { t.push_back('.'); j = 0; }
            t.push_back(s[i]);
        }
        reverse(t.begin(), t.end());
        return t;
    }
};


// Source https://leetcode.com/problems/minimum-number-of-vertices-to-reach-all-nodes/

Given a directed acyclic graph, with n vertices numbered from 0 to n-1, and an array edges where edges[i] = [fromi, toi] represents a directed edge from node fromi to node toi.

Find the smallest set of vertices from which all nodes in the graph are reachable. It's guaranteed that a unique solution exists.

Notice that you can return the vertices in any order.

 

Example 1:



Input: n = 6, edges = [[0,1],[0,2],[2,5],[3,4],[4,2]]
Output: [0,3]
Explanation: It's not possible to reach all the nodes from a single vertex. From 0 we can reach [0,1,2,5]. From 3 we can reach [3,4,2,5]. So we output [0,3].
Example 2:



Input: n = 5, edges = [[0,1],[2,1],[3,1],[1,4],[2,4]]
Output: [0,2,3]
Explanation: Notice that vertices 0, 3 and 2 are not reachable from any other node, so we must include them. Also any of these vertices can reach nodes 1 and 4.
 

Constraints:

2 <= n <= 10^5
1 <= edges.length <= min(10^5, n * (n - 1) / 2)
edges[i].length == 2
0 <= fromi, toi < n
All pairs (fromi, toi) are distinct.

class Solution
{
public:
    vector<int> findSmallestSetOfVertices(int n, vector<vector<int>> &edges)
    {
        vector<int> indegree(n);
        vector<int> res;
        for (auto &v : edges) indegree[v[1]]++;
        for(int i = 0; i < n; i++)
        {
            if(indegree[i] == 0) res.push_back(i);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/minimum-numbers-of-function-calls-to-make-target-array/

You are given an integer array nums. You have an integer array arr of the same length with all values set to 0 initially. You also have the following modify function:

func modify(arr, op, idx)
{
    // add by 1 index idx
    if (op == 0)
    {
        arr[idx] = arr[idx] + 1
    }
    // multiply by 2 all elements
    if (op == 1)
    {
        for (i = 0; i < arr.length; i++)
        {
            arr[i] = arr[i] * 2
        }
    }
}

You want to use the modify function to covert arr to nums using the minimum number of calls.

Return the minimum number of function calls to make nums from arr.

The test cases are generated so that the answer fits in a 32-bit signed integer.

 

Example 1:

Input: nums = [1,5]
Output: 5
Explanation: Increment by 1 (second element): [0, 0] to get [0, 1] (1 operation).
Double all the elements: [0, 1] -> [0, 2] -> [0, 4] (2 operations).
Increment by 1 (both elements)  [0, 4] -> [1, 4] -> [1, 5] (2 operations).
Total of operations: 1 + 2 + 2 = 5.
Example 2:

Input: nums = [2,2]
Output: 3
Explanation: Increment by 1 (both elements) [0, 0] -> [0, 1] -> [1, 1] (2 operations).
Double all the elements: [1, 1] -> [2, 2] (1 operation).
Total of operations: 2 + 1 = 3.
Example 3:

Input: nums = [4,2,5]
Output: 6
Explanation: (initial)[0,0,0] -> [1,0,0] -> [1,0,1] -> [2,0,2] -> [2,1,2] -> [4,2,4] -> [4,2,5](nums).
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 109

find(num) 查找num的二进制最高位（通过数字1左移得到该最高位需要的次数）

class Solution
{
public:

    int find(int n)
    {
        for(int i = 31; i >= 0; i--)
        {
            if((1 << i)&n)
            {
                return i;
            }
        }
        return 0;
    }

    int minOperations(vector<int> &nums)
    {
        int n = nums.size();
        int len = 0;
        int count = 0;
        for(int i = 0; i < n; i++)
        {
            len = max(len, find(nums[i]));
            count += __builtin_popcount(nums[i]);
        }
        return len + count;
    }
};


// Source https://leetcode.com/problems/detect-cycles-in-2d-grid/

Given a 2D array of characters grid of size m x n, you need to find if there exists any cycle consisting of the same value in grid.

A cycle is a path of length 4 or more in the grid that starts and ends at the same cell. From a given cell, you can move to one of the cells adjacent to it - 
in one of the four directions (up, down, left, or right), if it has the same value of the current cell.

Also, you cannot move to the cell that you visited in your last move. For example, the cycle (1, 1) -> (1, 2) -> (1, 1) is invalid because from (1, 2) we visited (1, 1) which was the last visited cell.

Return true if any cycle of the same value exists in grid, otherwise, return false.

 

Example 1:



Input: grid = [["a","a","a","a"],["a","b","b","a"],["a","b","b","a"],["a","a","a","a"]]
Output: true
Explanation: There are two valid cycles shown in different colors in the image below:

Example 2:



Input: grid = [["c","c","c","a"],["c","d","c","c"],["c","c","e","c"],["f","c","c","c"]]
Output: true
Explanation: There is only one valid cycle highlighted in the image below:

Example 3:



Input: grid = [["a","b","b"],["b","z","b"],["b","b","a"]]
Output: false
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 500
grid consists only of lowercase English letters.

class Solution
{
public:
    int m, n;
    int dx[4] = {0, 1, 0, -1};
    int dy[4] = {1, 0, -1, 0};
    int vis[505][505];
    int flag[505][505];

    bool dfs(vector<vector<char>> &grid, int x, int y, int par_x, int par_y, char cur, int steps)
    {
        vis[x][y] = steps;
        for(int i = 0; i < 4; ++i)
        {
            int x1 = x + dx[i], y1 = y + dy[i];
            if(x1 < 0 || x1 >= m || y1 < 0 || y1 >= n || grid[x1][y1] != cur) continue;
            if(vis[x1][y1] > 0 && (x1 == par_x && y1 == par_y)) continue;
            if(vis[x1][y1] > 0 && (steps - vis[x1][y1] <= 2)) continue;
            if(vis[x1][y1] > 0) return true;
            if(dfs(grid, x1, y1, x, y, cur, steps + 1)) return true;
        }
        vis[x][y] = 0;
        flag[x][y] = 1;
        return false;
    }

    bool containsCycle(vector<vector<char>> &grid)
    {
        m = grid.size();
        n = grid[0].size();
        memset(vis, 0, sizeof(vis));
        memset(flag, 0, sizeof(flag));
        for(int i = 0; i < m; ++i)
        {
            for(int j = 0; j < n; ++j)
            {
                if(!flag[i][j])
                {
                    if(dfs(grid, i, j, -1, -1, grid[i][j], 1)) return true;
                }
            }
        }
        return false;
    }
};


// Source https://leetcode.com/problems/most-visited-sector-in-a-circular-track/

Given an integer n and an integer array rounds. We have a circular track which consists of n sectors labeled from 1 to n. 
A marathon will be held on this track, the marathon consists of m rounds. The ith round starts at sector rounds[i - 1] and ends at sector rounds[i]. 
For example, round 1 starts at sector rounds[0] and ends at sector rounds[1]

Return an array of the most visited sectors sorted in ascending order.

Notice that you circulate the track in ascending order of sector numbers in the counter-clockwise direction (See the first example).

 

Example 1:


Input: n = 4, rounds = [1,3,1,2]
Output: [1,2]
Explanation: The marathon starts at sector 1. The order of the visited sectors is as follows:
1 --> 2 --> 3 (end of round 1) --> 4 --> 1 (end of round 2) --> 2 (end of round 3 and the marathon)
We can see that both sectors 1 and 2 are visited twice and they are the most visited sectors. Sectors 3 and 4 are visited only once.
Example 2:

Input: n = 2, rounds = [2,1,2,1,2,1,2,1,2]
Output: [2]
Example 3:

Input: n = 7, rounds = [1,3,5,7]
Output: [1,2,3,4,5,6,7]
 

Constraints:

2 <= n <= 100
1 <= m <= 100
rounds.length == m + 1
1 <= rounds[i] <= n
rounds[i] != rounds[i + 1] for 0 <= i < m

rounds.length == m + 1
rounds[0]和rounds[m] 分别对应开始位置和结束位置
从rounds[0]到rounds[m] 中间可能会环绕若干圈，每环绕一圈，每个sector的访问次数都加1

class Solution
{
public:
    vector<int> mostVisited(int n, vector<int> &rounds)
    {
        int sz = rounds.size();
        int startSector = rounds[0];
        int endSector = rounds[sz - 1];
        vector<int> res;
        if(startSector == endSector)
        {
            res.push_back(startSector);
        }
        else if(startSector < endSector)
        {
            for(int i = startSector; i <= endSector; i++) res.push_back(i);
        }
        else
        {
            for(int i = 1; i <= endSector; i++) res.push_back(i);
            for(int i = startSector; i <= n; i++) res.push_back(i);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/maximum-number-of-coins-you-can-get/

There are 3n piles of coins of varying size, you and your friends will take piles of coins as follows:

In each step, you will choose any 3 piles of coins (not necessarily consecutive).
Of your choice, Alice will pick the pile with the maximum number of coins.
You will pick the next pile with the maximum number of coins.
Your friend Bob will pick the last pile.
Repeat until there are no more piles of coins.
Given an array of integers piles where piles[i] is the number of coins in the ith pile.

Return the maximum number of coins that you can have.

 

Example 1:

Input: piles = [2,4,1,2,7,8]
Output: 9
Explanation: Choose the triplet (2, 7, 8), Alice Pick the pile with 8 coins, you the pile with 7 coins and Bob the last one.
Choose the triplet (1, 2, 4), Alice Pick the pile with 4 coins, you the pile with 2 coins and Bob the last one.
The maximum number of coins which you can have are: 7 + 2 = 9.
On the other hand if we choose this arrangement (1, 2, 8), (2, 4, 7) you only get 2 + 4 = 6 coins which is not optimal.
Example 2:

Input: piles = [2,4,5]
Output: 4
Example 3:

Input: piles = [9,8,7,6,5,1,2,3,4]
Output: 18
 

Constraints:

3 <= piles.length <= 105
piles.length % 3 == 0
1 <= piles[i] <= 104

先对piles排序，再按照最小给Bob，最大给Alice，第二大给自己，不断pick

class Solution
{
public:
    int maxCoins(vector<int> &piles)
    {
        sort(piles.begin(), piles.end());
        int i = 0, j = piles.size() - 2;
        int coins = 0;
        while(i < j)
        {
            coins += piles[j];
            j -= 2;
            i++;
        }
        return coins;
    }
};


// Source https://leetcode.com/problems/find-latest-group-of-size-m/

Given an array arr that represents a permutation of numbers from 1 to n.

You have a binary string of size n that initially has all its bits set to zero. At each step i (assuming both the binary string and arr are 1-indexed) from 1 to n, the bit at position arr[i] is set to 1.

You are also given an integer m. Find the latest step at which there exists a group of ones of length m. 
A group of ones is a contiguous substring of 1's such that it cannot be extended in either direction.

Return the latest step at which there exists a group of ones of length exactly m. If no such group exists, return -1.

 

Example 1:

Input: arr = [3,5,1,2,4], m = 1
Output: 4
Explanation: 
Step 1: "00100", groups: ["1"]
Step 2: "00101", groups: ["1", "1"]
Step 3: "10101", groups: ["1", "1", "1"]
Step 4: "11101", groups: ["111", "1"]
Step 5: "11111", groups: ["11111"]
The latest step at which there exists a group of size 1 is step 4.
Example 2:

Input: arr = [3,1,5,4,2], m = 2
Output: -1
Explanation: 
Step 1: "00100", groups: ["1"]
Step 2: "10100", groups: ["1", "1"]
Step 3: "10101", groups: ["1", "1", "1"]
Step 4: "10111", groups: ["1", "111"]
Step 5: "11111", groups: ["11111"]
No group of size 2 exists during any step.
 

Constraints:

n == arr.length
1 <= m <= n <= 105
1 <= arr[i] <= n
All integers in arr are distinct.

class Solution
{
public:
    int find(int x, vector<int> &parent)
    {
        while(parent[x] != 0) x = parent[x];
        return x;
    }

    int findLatestStep(vector<int> &A, int m)
    {
        int n = A.size();
        if(m == n) return n;
        vector<int> parent(n + 2);
        vector<int> count(n + 2);
        int res = -1;
        for(int i = 0; i < n; i++)
        {
            int pos = A[i];
            int leftID = find(pos - 1, parent);
            int rightID = find(pos + 1, parent);
            if(count[leftID] == m || count[rightID] == m) res = i;
            if(count[leftID] > 0) parent[leftID] = pos;
            if(count[rightID] > 0) parent[rightID] = pos;
            count[pos] = count[leftID] + count[rightID] + 1;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/stone-game-v/

There are several stones arranged in a row, and each stone has an associated value which is an integer given in the array stoneValue.

In each round of the game, Alice divides the row into two non-empty rows (i.e. left row and right row), 
then Bob calculates the value of each row which is the sum of the values of all the stones in this row. 
Bob throws away the row which has the maximum value, and Alice's score increases by the value of the remaining row. 
If the value of the two rows are equal, Bob lets Alice decide which row will be thrown away. The next round starts with the remaining row.

The game ends when there is only one stone remaining. Alice's is initially zero.

Return the maximum score that Alice can obtain.

 

Example 1:

Input: stoneValue = [6,2,3,4,5,5]
Output: 18
Explanation: In the first round, Alice divides the row to [6,2,3], [4,5,5]. The left row has the value 11 and the right row has value 14. Bob throws away the right row and Alice's score is now 11.
In the second round Alice divides the row to [6], [2,3]. This time Bob throws away the left row and Alice's score becomes 16 (11 + 5).
The last round Alice has only one choice to divide the row which is [2], [3]. Bob throws away the right row and Alice's score is now 18 (16 + 2). The game ends because only one stone is remaining in the row.
Example 2:

Input: stoneValue = [7,7,7,7,7,7,7]
Output: 28
Example 3:

Input: stoneValue = [4]
Output: 0
 

Constraints:

1 <= stoneValue.length <= 500
1 <= stoneValue[i] <= 106

class Solution
{
public:
    int n;
    vector<int> sums;
    int dp[501][501];

    int recur(int l, int r)
    {
        if (l == r) return 0;
        if (dp[l][r] != -1) return dp[l][r];
        int ans = INT_MIN;
        for (int leftEnd = l; leftEnd < r; ++leftEnd)
        {
            int leftScore = sums[leftEnd] - (l - 1 >= 0 ? sums[l - 1] : 0);
            int rightScore = sums[r] - sums[leftEnd];
            if (leftScore < rightScore)
            {
                ans = max(ans, recur(l, leftEnd) + leftScore);
            }
            else if(leftScore > rightScore)
            {
                ans = max(ans, recur(leftEnd + 1, r) + rightScore);
            }
            else
            {
                ans = max(ans, max(recur(l, leftEnd), recur(leftEnd + 1, r)) + rightScore);
            }
        }
        return dp[l][r] = ans;
    }

    int stoneGameV(vector<int> &stoneValue)
    {
        n = stoneValue.size();
        sums = vector<int>(n, 0);
        sums[0] = stoneValue[0];
        for (int i = 1; i < n; ++i)
            sums[i] = sums[i - 1] + stoneValue[i];
        memset(dp, -1, sizeof(dp));
        return recur(0, n - 1);
    }
};


// Source https://leetcode.com/problems/detect-pattern-of-length-m-repeated-k-or-more-times/

Given an array of positive integers arr, find a pattern of length m that is repeated k or more times.

A pattern is a subarray (consecutive sub-sequence) that consists of one or more values, repeated multiple times consecutively without overlapping. 
A pattern is defined by its length and the number of repetitions.

Return true if there exists a pattern of length m that is repeated k or more times, otherwise return false.

 

Example 1:

Input: arr = [1,2,4,4,4,4], m = 1, k = 3
Output: true
Explanation: The pattern (4) of length 1 is repeated 4 consecutive times. Notice that pattern can be repeated k or more times but not less.
Example 2:

Input: arr = [1,2,1,2,1,1,1,3], m = 2, k = 2
Output: true
Explanation: The pattern (1,2) of length 2 is repeated 2 consecutive times. Another valid pattern (2,1) is also repeated 2 times.
Example 3:

Input: arr = [1,2,1,2,1,3], m = 2, k = 3
Output: false
Explanation: The pattern (1,2) is of length 2 but is repeated only 2 times. There is no pattern of length 2 that is repeated 3 or more times.
 

Constraints:

2 <= arr.length <= 100
1 <= arr[i] <= 100
1 <= m <= 100
2 <= k <= 100

class Solution
{
public:
    bool containsPattern(vector<int> &arr, int m, int k)
    {
        int n = arr.size();
        for(int i = 0; i < n - m;)
        {
            if(arr[i] == arr[i + m])
            {
                int count = 0;
                int repeatCnt = 1;
                while(i < n - m && arr[i] == arr[i + m])
                {
                    count++;
                    if(count == m)
                    {
                        count = 0;
                        repeatCnt++;
                        if(repeatCnt == k)
                        {
                            return true;
                        }
                    }
                    i++;
                }
            }
            else
            {
                i++;
            }
        }
        return false;
    }
};


// Source https://leetcode.com/problems/maximum-length-of-subarray-with-positive-product/

Given an array of integers nums, find the maximum length of a subarray where the product of all its elements is positive.

A subarray of an array is a consecutive sequence of zero or more values taken out of that array.

Return the maximum length of a subarray with positive product.

 

Example 1:

Input: nums = [1,-2,-3,4]
Output: 4
Explanation: The array nums already has a positive product of 24.
Example 2:

Input: nums = [0,1,-2,-3,-4]
Output: 3
Explanation: The longest subarray with positive product is [1,-2,-3] which has a product of 6.
Notice that we cannot include 0 in the subarray since that'll make the product 0 which is not positive.
Example 3:

Input: nums = [-1,-2,-3,0,1]
Output: 2
Explanation: The longest subarray with positive product is [-1,-2] or [-2,-3].
 

Constraints:

1 <= nums.length <= 105
-109 <= nums[i] <= 109

class Solution
{
public:
    int getMaxLen(vector<int> &nums)
    {
        int n = nums.size();
        vector<int> pos_dp(n, 0);
        vector<int> neg_dp(n, 0);
        if(nums[0] > 0) pos_dp[0] = 1;
        if(nums[0] < 0) neg_dp[0] = 1;
        int res = pos_dp[0];
        for(int i = 1; i < n; i++)
        {
            if(nums[i] == 0) continue;
            else if(nums[i] > 0)
            {
                pos_dp[i] = 1 + pos_dp[i - 1];
                neg_dp[i] = (neg_dp[i - 1] == 0) ? 0 : 1 + neg_dp[i - 1];
            }
            else
            {
                pos_dp[i] = (neg_dp[i - 1] == 0) ? 0 : 1 + neg_dp[i - 1];
                neg_dp[i] = 1 + pos_dp[i - 1];
            }
            res = max(res, pos_dp[i]);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/minimum-number-of-days-to-disconnect-island/

You are given an m x n binary grid grid where 1 represents land and 0 represents water. An island is a maximal 4-directionally (horizontal or vertical) connected group of 1's.

The grid is said to be connected if we have exactly one island, otherwise is said disconnected.

In one day, we are allowed to change any single land cell (1) into a water cell (0).

Return the minimum number of days to disconnect the grid.

 

Example 1:


Input: grid = [[0,1,1,0],[0,1,1,0],[0,0,0,0]]

Output: 2
Explanation: We need at least 2 days to get a disconnected grid.
Change land grid[1][1] and grid[0][2] to water and get 2 disconnected island.
Example 2:


Input: grid = [[1,1]]
Output: 2
Explanation: Grid of full water is also disconnected ([[1,1]] -> [[0,0]]), 0 islands.
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 30
grid[i][j] is either 0 or 1.

Convert the grid into a graph.
If there is only one 1, then you need to remove it (because connected definition says only 1 island)
Find number of connected components
If connected components>1 return 0
Find articulation point
If articulation point is present, then return 1, else return 2

class Solution
{
public:
    vector<int> adj[901];
    vector<int> v;
    int vis[901];
    vector<int> in, low;
    int n, m;
    int timer;

    void dfsArticulation(int node, int par)
    {
        vis[node] = 1;
        in[node] = low[node] = timer;
        ++timer;
        int children = 0;
        for (auto next : adj[node])
        {
            if (next == par) continue;
            if (vis[next])
            {
                low[node] = min(low[node], in[next]);
            }
            else
            {
                dfsArticulation(next, node);
                low[node] = min(low[node], low[next]);
                if (low[next] >= in[node] && par != -1)
                    v.push_back(node);
                ++children;
            }
        }
        if(par == -1 && children > 1)
            v.push_back(node);
    }

    void dfs(int node)
    {
        vis[node] = 1;
        for(auto next : adj[node])
        {
            if(!vis[next]) dfs(next);
        }
    }

    int minDays(vector<vector<int>> &grid)
    {
        n = grid.size();
        m = grid[0].size();
        int dx[4] = {0, 1, 0, -1};
        int dy[4] = {1, 0, -1, 0};
        int l = 1;
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                if(grid[i][j] == 1)
                {
                    grid[i][j] = l;
                    l++;
                }
            }
        }
        if(l == 2) return 1;
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                for(int k = 0; k < 4; k++)
                {
                    int nx = i + dx[k];
                    int ny = j + dy[k];
                    if(nx < 0 || ny < 0 || nx >= n || ny >= m) continue;
                    if(grid[i][j] && grid[nx][ny])
                    {
                        adj[grid[i][j]].push_back(grid[nx][ny]);
                    }
                }
            }
        }
        memset(vis, 0, sizeof(vis));
        int c = 0;
        for(int i = 1; i < l; i++)
        {
            if(!vis[i])
            {
                dfs(i);
                c++;
            }
        }
        if(c > 1 || c == 0) return 0;
        memset(vis, 0, sizeof(vis));
        in.resize(l, -1);
        low.resize(l, -1);
        timer = 0;
        for (int i = 1; i < l; ++i)
        {
            if (!vis[i])
                dfsArticulation (i, -1);
        }
        if(v.size() > 0) return 1;
        return 2;
    }
};


// Source https://leetcode.com/problems/number-of-ways-to-reorder-array-to-get-same-bst/

Given an array nums that represents a permutation of integers from 1 to n. We are going to construct a binary search tree (BST) 
by inserting the elements of nums in order into an initially empty BST. Find the number of different ways to reorder nums 
so that the constructed BST is identical to that formed from the original array nums.

For example, given nums = [2,1,3], we will have 2 as the root, 1 as a left child, and 3 as a right child. The array [2,3,1] also yields the same BST but [3,2,1] yields a different BST.
Return the number of ways to reorder nums such that the BST formed is identical to the original BST formed from nums.

Since the answer may be very large, return it modulo 109 + 7.

 

Example 1:


Input: nums = [2,1,3]
Output: 1
Explanation: We can reorder nums to be [2,3,1] which will yield the same BST. There are no other ways to reorder nums which will yield the same BST.
Example 2:


Input: nums = [3,4,5,1,2]
Output: 5
Explanation: The following 5 arrays will yield the same BST: 
[3,1,2,4,5]
[3,1,4,2,5]
[3,1,4,5,2]
[3,4,1,2,5]
[3,4,1,5,2]
Example 3:


Input: nums = [1,2,3]
Output: 0
Explanation: There are no other orderings of nums that will yield the same BST.
 

Constraints:

1 <= nums.length <= 1000
1 <= nums[i] <= nums.length
All integers in nums are distinct.

class Solution
{
public:
    long dp[1001][1001];
    const long mod = 1e9 + 7;

    long combination(long m, long n)
    {
        if(n == m) return 1;
        else if(n == 0) return 1;
        if(dp[m][n] != 0) return dp[m][n];
        long res = (combination(m - 1, n) + combination(m - 1, n - 1)) % mod;
        return dp[m][n] = res;
    }

    long helper(vector<int> &nums)
    {
        if(nums.size() <= 2) return 1;
        int root = nums[0];
        vector<int> smaller, bigger;
        for(int i = 1; i < nums.size(); ++i)
        {
            if(nums[i] < root)
            {
                smaller.push_back(nums[i]);
            }
            else
            {
                bigger.push_back(nums[i]);
            }
        }
        long left = helper(smaller);
        long right = helper(bigger);
        int m = smaller.size() + bigger.size();
        int n = smaller.size() < bigger.size() ? smaller.size() : bigger.size();
        long c = combination(m, n);
        long res = (left * right) % mod;
        res = (res * c) % mod;
        return res;
    }

    int numOfWays(vector<int> &nums)
    {
        return helper(nums) - 1;
    }
};


// Source https://leetcode.com/problems/matrix-diagonal-sum/

Given a square matrix mat, return the sum of the matrix diagonals.

Only include the sum of all the elements on the primary diagonal and all the elements on the secondary diagonal that are not part of the primary diagonal.

 

Example 1:


Input: mat = [[1,2,3],
              [4,5,6],
              [7,8,9]]
Output: 25
Explanation: Diagonals sum: 1 + 5 + 9 + 3 + 7 = 25
Notice that element mat[1][1] = 5 is counted only once.
Example 2:

Input: mat = [[1,1,1,1],
              [1,1,1,1],
              [1,1,1,1],
              [1,1,1,1]]
Output: 8
Example 3:

Input: mat = [[5]]
Output: 5
 

Constraints:

n == mat.length == mat[i].length
1 <= n <= 100
1 <= mat[i][j] <= 100

class Solution
{
public:
    int diagonalSum(vector<vector<int>> &mat)
    {
        int n = mat.size();
        int sum = 0;
        for(int r = 0, c = 0; r < n; r++, c++)
        {
            sum += mat[r][c] ;
        }
        for(int r = 0, c = n - 1; r < n; r++, c--)
        {
            sum += mat[r][c] ;
        }
        if(n & 1) sum -= mat[n / 2][n / 2];
        return sum;
    }
};


// Source https://leetcode.com/problems/number-of-ways-to-split-a-string/

Given a binary string s, you can split s into 3 non-empty strings s1, s2, and s3 where s1 + s2 + s3 = s.

Return the number of ways s can be split such that the number of ones is the same in s1, s2, and s3. Since the answer may be too large, return it modulo 109 + 7.

 

Example 1:

Input: s = "10101"
Output: 4
Explanation: There are four ways to split s in 3 parts where each part contain the same number of letters '1'.
"1|010|1"
"1|01|01"
"10|10|1"
"10|1|01"
Example 2:

Input: s = "1001"
Output: 0
Example 3:

Input: s = "0000"
Output: 3
Explanation: There are three ways to split s in 3 parts.
"0|0|00"
"0|00|0"
"00|0|0"
 

Constraints:

3 <= s.length <= 105
s[i] is either '0' or '1'.

class Solution
{
public:
    int numWays(string s)
    {
        long ones = 0;
        for(auto ch : s)
        {
            if(ch == '1') ones++;
        }
        if(ones % 3 != 0) return 0;
        int n = s.length();
        if(ones == 0) return (long(n - 2) * (n - 1) / 2) % 1000000007;
        int target = ones / 3;
        long z1 = 1, z2 = 1;
        int i = 0, j = target;
        while(j)
        {
            if(s[i] == '1') j--;
            ++i;
        }
        while(s[i] == '0') i++, z1++;
        j = target;
        while(j)
        {
            if(s[i] == '1') j--;
            ++i;
        }
        while(s[i] == '0') i++, z2++;
        return long(z1) * z2 % 1000000007;
    }
};


// Source https://leetcode.com/problems/shortest-subarray-to-be-removed-to-make-array-sorted/

Given an integer array arr, remove a subarray (can be empty) from arr such that the remaining elements in arr are non-decreasing.

Return the length of the shortest subarray to remove.

A subarray is a contiguous subsequence of the array.

 

Example 1:

Input: arr = [1,2,3,10,4,2,3,5]
Output: 3
Explanation: The shortest subarray we can remove is [10,4,2] of length 3. The remaining elements after that will be [1,2,3,3,5] which are sorted.
Another correct solution is to remove the subarray [3,10,4].
Example 2:

Input: arr = [5,4,3,2,1]
Output: 4
Explanation: Since the array is strictly decreasing, we can only keep a single element. Therefore we need to remove a subarray of length 4, either [5,4,3,2] or [4,3,2,1].
Example 3:

Input: arr = [1,2,3]
Output: 0
Explanation: The array is already non-decreasing. We do not need to remove any elements.
 

Constraints:

1 <= arr.length <= 105
0 <= arr[i] <= 109

class Solution
{
public:
    int findLengthOfShortestSubarray(vector<int> &arr)
    {
        int n = arr.size();
        vector<int> left;
        int prev = 0;
        int l = 0;
        while(l < n && arr[l] >= prev)
        {
            left.push_back(arr[l]);
            prev = arr[l];
            l++;
        }
        vector<int> right;
        l = n - 1;
        prev = INT_MAX;
        while(l >= 0 && arr[l] <= prev)
        {
            right.push_back(arr[l]);
            prev = arr[l];
            l--;
        }
        if(left.size() == n) return 0;
        int ans = 0;
        ans = max(left.size(), right.size());
        for(int i = 0; i < right.size(); i++)
        {
            int pos = upper_bound(left.begin(), left.end(), right[i]) - left.begin();
            ans = max(ans, pos + i + 1);
        }
        return n - ans;
    }
};


// Source https://leetcode.com/problems/count-all-possible-routes/

You are given an array of distinct positive integers locations where locations[i] represents the position of city i. 
You are also given integers start, finish and fuel representing the starting city, ending city, and the initial amount of fuel you have, respectively.

At each step, if you are at city i, you can pick any city j such that j != i and 0 <= j < locations.length and move to city j. 
Moving from city i to city j reduces the amount of fuel you have by |locations[i] - locations[j]|. Please notice that |x| denotes the absolute value of x.

Notice that fuel cannot become negative at any point in time, and that you are allowed to visit any city more than once (including start and finish).

Return the count of all possible routes from start to finish. Since the answer may be too large, return it modulo 109 + 7.

 

Example 1:

Input: locations = [2,3,6,8,4], start = 1, finish = 3, fuel = 5
Output: 4
Explanation: The following are all possible routes, each uses 5 units of fuel:
1 -> 3
1 -> 2 -> 3
1 -> 4 -> 3
1 -> 4 -> 2 -> 3
Example 2:

Input: locations = [4,3,1], start = 1, finish = 0, fuel = 6
Output: 5
Explanation: The following are all possible routes:
1 -> 0, used fuel = 1
1 -> 2 -> 0, used fuel = 5
1 -> 2 -> 1 -> 0, used fuel = 5
1 -> 0 -> 1 -> 0, used fuel = 3
1 -> 0 -> 1 -> 0 -> 1 -> 0, used fuel = 5
Example 3:

Input: locations = [5,2,1], start = 0, finish = 2, fuel = 3
Output: 0
Explanation: It is impossible to get from 0 to 2 using only 3 units of fuel since the shortest route needs 4 units of fuel.
 

Constraints:

2 <= locations.length <= 100
1 <= locations[i] <= 109
All integers in locations are distinct.
0 <= start, finish < locations.length
1 <= fuel <= 200

class Solution
{
public:
    int n;
    int dp[101][205];

    int recur(vector<int> &locations, int now, int finish, int fuel)
    {
        if(dp[now][fuel] != -1) return dp[now][fuel];
        int ans = 0;
        if(now == finish) ans++;
        for(int i = 0; i < n; i++)
        {
            if(i != now && abs(locations[i] - locations[now]) <= fuel)
            {
                ans += recur(locations, i, finish, fuel - abs(locations[i] - locations[now]));
                ans %= 1000000007;
            }
        }
        return dp[now][fuel] = ans;
    }

    int countRoutes(vector<int> &locations, int start, int finish, int fuel)
    {
        n = locations.size();
        memset(dp, -1, sizeof(dp));
        return recur(locations, start, finish, fuel);
    }
};


// Source https://leetcode.com/problems/replace-all-s-to-avoid-consecutive-repeating-characters/

Given a string s containing only lowercase English letters and the '?' character, convert all the '?' characters into lowercase letters 
such that the final string does not contain any consecutive repeating characters. You cannot modify the non '?' characters.

It is guaranteed that there are no consecutive repeating characters in the given string except for '?'.

Return the final string after all the conversions (possibly zero) have been made. If there is more than one solution, return any of them. 
It can be shown that an answer is always possible with the given constraints.

 

Example 1:

Input: s = "?zs"
Output: "azs"
Explanation: There are 25 solutions for this problem. From "azs" to "yzs", all are valid. Only "z" is an invalid modification as the string will consist of consecutive repeating characters in "zzs".
Example 2:

Input: s = "ubv?w"
Output: "ubvaw"
Explanation: There are 24 solutions for this problem. Only "v" and "w" are invalid modifications as the strings will consist of consecutive repeating characters in "ubvvw" and "ubvww".
 

Constraints:

1 <= s.length <= 100
s consist of lowercase English letters and '?'.

class Solution
{
public:
    string modifyString(string s)
    {
        int n = s.length();
        if (n == 1)
        {
            if (s[0] == '?') s[0] = 'a';
            return s;
        }
        for(int i = 0; i < n; i++)
        {
            if(s[i] == '?')
            {
                char x = 'a';
                if(i == 0)
                {
                    while(x == s[i + 1])
                    {
                        x++;
                    }
                }
                else if(i == n - 1)
                {
                    while(x == s[i - 1])
                    {
                        x++;
                    }
                }
                else
                {
                    while(x == s[i - 1] || x == s[i + 1])
                    {
                        x++;
                    }
                }
                s[i] = x;
            }
        }
        return s;
    }
};


// Source https://leetcode.com/problems/number-of-ways-where-square-of-number-is-equal-to-product-of-two-numbers/

Given two arrays of integers nums1 and nums2, return the number of triplets formed (type 1 and type 2) under the following rules:

Type 1: Triplet (i, j, k) if nums1[i]^2 == nums2[j] * nums2[k] where 0 <= i < nums1.length and 0 <= j < k < nums2.length.
Type 2: Triplet (i, j, k) if nums2[i]^2 == nums1[j] * nums1[k] where 0 <= i < nums2.length and 0 <= j < k < nums1.length.
 

Example 1:

Input: nums1 = [7,4], nums2 = [5,2,8,9]
Output: 1
Explanation: Type 1: (1, 1, 2), nums1[1]2 = nums2[1] * nums2[2]. (42 = 2 * 8). 
Example 2:

Input: nums1 = [1,1], nums2 = [1,1,1]
Output: 9
Explanation: All Triplets are valid, because 12 = 1 * 1.
Type 1: (0,0,1), (0,0,2), (0,1,2), (1,0,1), (1,0,2), (1,1,2).  nums1[i]2 = nums2[j] * nums2[k].
Type 2: (0,0,1), (1,0,1), (2,0,1). nums2[i]2 = nums1[j] * nums1[k].
Example 3:

Input: nums1 = [7,7,8,3], nums2 = [1,2,9,7]
Output: 2
Explanation: There are 2 valid triplets.
Type 1: (3,0,2).  nums1[3]2 = nums2[0] * nums2[2].
Type 2: (3,0,1).  nums2[3]2 = nums1[0] * nums1[1].
 

Constraints:

1 <= nums1.length, nums2.length <= 1000
1 <= nums1[i], nums2[i] <= 105

class Solution
{
public:
    int numTriplets(vector<int> &nums1, vector<int> &nums2)
    {
        unordered_map<long, int> squares1;
        unordered_map<long, int> squares2;
        for(long i : nums1)
            ++squares1[i * i];
        for(long i : nums2)
            ++squares2[i * i];
        int n1 = nums1.size();
        int n2 = nums2.size();
        int res = 0;
        for(int i = 0; i < n1; ++i)
        {
            for(int j = i + 1; j < n1; ++j)
            {
                auto it = squares2.find(long(nums1[i]) * nums1[j]);
                if(it != squares2.end())
                    res += it->second;
            }
        }
        for(int i = 0; i < n2; ++i)
        {
            for(int j = i + 1; j < n2; ++j)
            {
                auto it = squares1.find(long(nums2[i]) * nums2[j]);
                if(it != squares1.end())
                    res += it->second;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/minimum-time-to-make-rope-colorful/

Alice has n balloons arranged on a rope. You are given a 0-indexed string colors where colors[i] is the color of the ith balloon.

Alice wants the rope to be colorful. She does not want two consecutive balloons to be of the same color, so she asks Bob for help. 
Bob can remove some balloons from the rope to make it colorful. 
You are given a 0-indexed integer array neededTime where neededTime[i] is the time (in seconds) that Bob needs to remove the ith balloon from the rope.

Return the minimum time Bob needs to make the rope colorful.

 

Example 1:


Input: colors = "abaac", neededTime = [1,2,3,4,5]
Output: 3
Explanation: In the above image, 'a' is blue, 'b' is red, and 'c' is green.
Bob can remove the blue balloon at index 2. This takes 3 seconds.
There are no longer two consecutive balloons of the same color. Total time = 3.
Example 2:


Input: colors = "abc", neededTime = [1,2,3]
Output: 0
Explanation: The rope is already colorful. Bob does not need to remove any balloons from the rope.
Example 3:


Input: colors = "aabaa", neededTime = [1,2,3,4,1]
Output: 2
Explanation: Bob will remove the ballons at indices 0 and 4. Each ballon takes 1 second to remove.
There are no longer two consecutive balloons of the same color. Total time = 1 + 1 = 2.
 

Constraints:

n == colors.length == neededTime.length
1 <= n <= 105
1 <= neededTime[i] <= 104
colors contains only lowercase English letters.

class Solution
{
public:
    int minCost(string colors, vector<int> &neededTime)
    {
        int n = neededTime.size();
        int res = 0;
        stack<int> st;
        for(int i = 0; i < n; i++)
        {
            if(!st.empty() && colors[st.top()] == colors[i])
            {
                res += min(neededTime[st.top()], neededTime[i]);
                if(neededTime[st.top()] < neededTime[i])
                {
                    st.pop();
                    st.push(i);
                }                    
                continue;
            }
            st.push(i);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/remove-max-number-of-edges-to-keep-graph-fully-traversable/

Alice and Bob have an undirected graph of n nodes and 3 types of edges:

Type 1: Can be traversed by Alice only.
Type 2: Can be traversed by Bob only.
Type 3: Can by traversed by both Alice and Bob.
Given an array edges where edges[i] = [typei, ui, vi] represents a bidirectional edge of type typei between nodes ui and vi, 
find the maximum number of edges you can remove so that after removing the edges, the graph can still be fully traversed by both Alice and Bob. 
The graph is fully traversed by Alice and Bob if starting from any node, they can reach all other nodes.

Return the maximum number of edges you can remove, or return -1 if it's impossible for the graph to be fully traversed by Alice and Bob.

 

Example 1:



Input: n = 4, edges = [[3,1,2],[3,2,3],[1,1,3],[1,2,4],[1,1,2],[2,3,4]]
Output: 2
Explanation: If we remove the 2 edges [1,1,2] and [1,1,3]. The graph will still be fully traversable by Alice and Bob. Removing any additional edge will not make it so. So the maximum number of edges we can remove is 2.
Example 2:



Input: n = 4, edges = [[3,1,2],[3,2,3],[1,1,4],[2,1,4]]
Output: 0
Explanation: Notice that removing any edge will not make the graph fully traversable by Alice and Bob.
Example 3:



Input: n = 4, edges = [[3,2,3],[1,1,2],[2,3,4]]
Output: -1
Explanation: In the current graph, Alice cannot reach node 4 from the other nodes. Likewise, Bob cannot reach 1. Therefore it's impossible to make the graph fully traversable.
 

 

Constraints:

1 <= n <= 10^5
1 <= edges.length <= min(10^5, 3 * n * (n-1) / 2)
edges[i].length == 3
1 <= edges[i][0] <= 3
1 <= edges[i][1] < edges[i][2] <= n
All tuples (typei, ui, vi) are distinct.

class Solution
{
public:
    struct DSU
    {
        vector<int> parent;
        vector<int> size;

        DSU(int n)
        {
            parent = vector<int>(n);
            size = vector<int>(n, 1);
            for(int i = 0; i < n; i++)
            {
                parent[i] = i;
            }
        }

        int find(int x)
        {
            if(parent[x] != x) parent[x] = find(parent[x]);
            return parent[x];
        }

        bool join(int a, int b)
        {
            int root_a = find(a);
            int root_b = find(b);
            if (root_a == root_b) return false;
            if (size[root_a] > size[root_b])
            {
                parent[root_b] = root_a;
                size[root_a] += size[root_b];
            }
            else
            {
                parent[root_a] = root_b;
                size[root_b] += size[root_a];
            }
            return true;
        }

        int count(int x)
        {
            return size[x];
        }
    };

    int maxNumEdgesToRemove(int n, vector<vector<int>> &edges)
    {
        vector<pair<int, int>> alice, bob, both;
        for(int i = 0; i < edges.size(); i++)
        {
            int t = edges[i][0];
            int x = edges[i][1] - 1;
            int y = edges[i][2] - 1;
            if(t == 3)
            {
                both.push_back({x, y});
            }
            else if(t == 2)
            {
                bob.push_back({x, y});
            }
            else
            {
                alice.push_back({x, y});
            }
        }

        DSU a(n), b(n);
        int ans = 0;
        for(auto p : both)
        {
            ans += a.join(p.first, p.second);
            b.join(p.first, p.second);
        }
        for (auto p : alice)
        {
            ans += a.join(p.first, p.second);
        }
        for (auto p : bob)
        {
            ans += b.join(p.first, p.second);
        }
        if(a.count(a.find(0)) < n || b.count(b.find(0)) < n) return -1;
        return edges.size() - ans;
    }
};


// Source https://leetcode.com/problems/special-positions-in-a-binary-matrix/

Given an m x n binary matrix mat, return the number of special positions in mat.

A position (i, j) is called special if mat[i][j] == 1 and all other elements in row i and column j are 0 (rows and columns are 0-indexed).

 

Example 1:


Input: mat = [[1,0,0],[0,0,1],[1,0,0]]
Output: 1
Explanation: (1, 2) is a special position because mat[1][2] == 1 and all other elements in row 1 and column 2 are 0.
Example 2:


Input: mat = [[1,0,0],[0,1,0],[0,0,1]]
Output: 3
Explanation: (0, 0), (1, 1) and (2, 2) are special positions.
 

Constraints:

m == mat.length
n == mat[i].length
1 <= m, n <= 100
mat[i][j] is either 0 or 1.

class Solution
{
public:
    int numSpecial(vector<vector<int>> &mat)
    {
        int m = mat.size(), n = mat[0].size();
        vector<int> row(m, 0);
        vector<int> col(n, 0);
        for(int i = 0; i < m ; i++ )
        {
            for(int j = 0; j < n ; j++)
            {
                if(mat[i][j] == 1)
                {
                    row[i]++;
                    col[j]++;
                }
            }
        }
        int ans = 0;
        for(int i = 0; i < m ; i++ )
        {
            for(int j = 0; j < n ; j++)
            {
                if(mat[i][j] == 1 && row[i] == 1 && col[j] == 1)
                {
                    ans++;
                }
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/count-unhappy-friends/

You are given a list of preferences for n friends, where n is always even.

For each person i, preferences[i] contains a list of friends sorted in the order of preference. In other words, a friend earlier in the list is more preferred than a friend later in the list. 
Friends in each list are denoted by integers from 0 to n-1.

All the friends are divided into pairs. The pairings are given in a list pairs, where pairs[i] = [xi, yi] denotes xi is paired with yi and yi is paired with xi.

However, this pairing may cause some of the friends to be unhappy. A friend x is unhappy if x is paired with y and there exists a friend u who is paired with v but:

x prefers u over y, and
u prefers x over v.
Return the number of unhappy friends.

 

Example 1:

Input: n = 4, preferences = [[1, 2, 3], [3, 2, 0], [3, 1, 0], [1, 2, 0]], pairs = [[0, 1], [2, 3]]
Output: 2
Explanation:
Friend 1 is unhappy because:
- 1 is paired with 0 but prefers 3 over 0, and
- 3 prefers 1 over 2.
Friend 3 is unhappy because:
- 3 is paired with 2 but prefers 1 over 2, and
- 1 prefers 3 over 0.
Friends 0 and 2 are happy.
Example 2:

Input: n = 2, preferences = [[1], [0]], pairs = [[1, 0]]
Output: 0
Explanation: Both friends 0 and 1 are happy.
Example 3:

Input: n = 4, preferences = [[1, 3, 2], [2, 3, 0], [1, 3, 0], [0, 2, 1]], pairs = [[1, 3], [0, 2]]
Output: 4
 

Constraints:

2 <= n <= 500
n is even.
preferences.length == n
preferences[i].length == n - 1
0 <= preferences[i][j] <= n - 1
preferences[i] does not contain i.
All values in preferences[i] are unique.
pairs.length == n/2
pairs[i].length == 2
xi != yi
0 <= xi, yi <= n - 1
Each person is contained in exactly one pair.

在 x 与 y 配对且 u 与 v 配对的情况下，如果同时满足下述两个条件，x 就会不开心：

x 与 u 的亲近程度胜过 x 与 y，且
u 与 x 的亲近程度胜过 u 与 v

实际上u也会不开心

u 与 x 的亲近程度胜过 u 与 v，且
x 与 u 的亲近程度胜过 x 与 y

// The key point is to define/quantify the problem.
// Using match[x][y] : stands for the matching perferences/points between friend x and friend y
// In other words, for any two pairs x1->x2, y1->y2. if match[x1][y1] > match[x1][x2] && match[y1][x1] > match[y1][y2],
// then x1 and y1 are unhappy friends. Use hashtable to store the friends, since there can be duplicate.

class Solution
{
public:
    int unhappyFriends(int n, vector<vector<int>> &preferences, vector<vector<int>> &pairs)
    {
        int match[n][n];
        memset(match, 0, sizeof(match));
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < preferences[i].size(); j++)
            {
                match[i][preferences[i][j]] = n - 1 - j;
            }
        }
        unordered_set<int> st;
        int len = pairs.size();
        for (int i = 1; i < len; i++)
        {
            for (int j = 0; j < i; j++)
            {
                int x = pairs[i][0], x_cur = pairs[i][1];
                int y = pairs[j][0], y_cur = pairs[j][1];
                if (match[x][y] > match[x][x_cur] && match[y][x] > match[y][y_cur])
                    st.insert(x), st.insert(y);
                if (match[x][y_cur] > match[x][x_cur] && match[y_cur][x] > match[y_cur][y])
                    st.insert(x), st.insert(y_cur);
                if (match[x_cur][y_cur] > match[x_cur][x] && match[y_cur][x_cur] > match[y_cur][y])
                    st.insert(x_cur), st.insert(y_cur);
                if (match[x_cur][y] > match[x_cur][x] && match[y][x_cur] > match[y][y_cur])
                    st.insert(x_cur), st.insert(y);
            }
        }
        return st.size();
    }
};


// Source https://leetcode.com/problems/min-cost-to-connect-all-points/

You are given an array points representing integer coordinates of some points on a 2D-plane, where points[i] = [xi, yi].

The cost of connecting two points [xi, yi] and [xj, yj] is the manhattan distance between them: |xi - xj| + |yi - yj|, where |val| denotes the absolute value of val.

Return the minimum cost to make all points connected. All points are connected if there is exactly one simple path between any two points.

 

Example 1:


Input: points = [[0,0],[2,2],[3,10],[5,2],[7,0]]
Output: 20
Explanation: 

We can connect the points as shown above to get the minimum cost of 20.
Notice that there is a unique path between every pair of points.
Example 2:

Input: points = [[3,12],[-2,5],[-4,1]]
Output: 18
 

Constraints:

1 <= points.length <= 1000
-106 <= xi, yi <= 106
All pairs (xi, yi) are distinct.

class Solution
{
public:
    int manhattanDist(vector<int> &a, vector<int> &b)
    {
        return (abs(a[0] - b[0]) + abs(a[1] - b[1]));
    }
    int minCostConnectPoints(vector<vector<int>> &points)
    {
        int n = points.size();
        vector<vector<pair<int, int>>> graph(n);
        for(int i = 0; i < n; i++)
        {
            for(int j = i + 1; j < n; j++)
            {
                int dist = manhattanDist(points[i], points[j]);
                graph[i].push_back({dist, j});
                graph[j].push_back({dist, i});
            }
        }
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        pq.push({0, 0});
        int minCost = 0;
        vector<int> vis(n);
        while(!pq.empty())
        {
            auto p = pq.top();
            pq.pop();
            int wt = p.first;
            int node = p.second;
            if(!vis[node])
            {
                minCost += wt;
                vis[node] = 1;
                for(auto nbr : graph[node])
                {
                    if(!vis[nbr.second])
                    {
                        pq.push(nbr);
                    }
                }
            }
        }
        return minCost;
    }
};


// Source https://leetcode.com/problems/check-if-string-is-transformable-with-substring-sort-operations/

Given two strings s and t, transform string s into string t using the following operation any number of times:

Choose a non-empty substring in s and sort it in place so the characters are in ascending order.
For example, applying the operation on the underlined substring in "14234" results in "12344".
                                                                                                           _____                    _____
Return true if it is possible to transform s into t. Otherwise, return false.

A substring is a contiguous sequence of characters within a string.

 

Example 1:

Input: s = "84532", t = "34852"
Output: true
Explanation: You can transform s into t using the following sort operations:
"84532" (from index 2 to 3) -> "84352"
"84352" (from index 0 to 2) -> "34852"
Example 2:

Input: s = "34521", t = "23415"
Output: true
Explanation: You can transform s into t using the following sort operations:
"34521" -> "23451"
"23451" -> "23415"
Example 3:

Input: s = "12345", t = "12435"
Output: false
 

Constraints:

s.length == t.length
1 <= s.length <= 105
s and t consist of only digits.

// Sorting can move smaller digits to the left and greater digits to the right
// So we can always move a digit to the left until we encounter any digit smaller than that.
// So the solution approach is to create 10 queue for each digit which store indices of digits in S and after that check if any smaller digit is there in front of the digit we are checking

排序后，数字小的字符会向左移动（不会向右移动），数字大的字符会向右移动（不会向左移动）

数字j小 ... 数字k大 不可能变成 数字k大 ... 数字j小

class Solution
{
public:
    bool isTransformable(string s, string t)
    {
        int n = s.size();
        vector<queue<int>> v(10);
        for(int i = 0; i < n; i++)
        {
            v[s[i] - '0'].push(i);
        }
        for(int i = 0; i < n; i++)
        {
            int k = t[i] - '0';
            if(v[k].empty()) return false;
            for(int j = 0; j < k; j++)
            {
                if(!v[j].empty() && v[j].front() < v[k].front())
                    return false;
            }
            v[k].pop();
        }
        return true;
    }
};


// Source https://leetcode.com/problems/sum-of-all-odd-length-subarrays/

Given an array of positive integers arr, return the sum of all possible odd-length subarrays of arr.

A subarray is a contiguous subsequence of the array.

 

Example 1:

Input: arr = [1,4,2,5,3]
Output: 58
Explanation: The odd-length subarrays of arr and their sums are:
[1] = 1
[4] = 4
[2] = 2
[5] = 5
[3] = 3
[1,4,2] = 7
[4,2,5] = 11
[2,5,3] = 10
[1,4,2,5,3] = 15
If we add all these together we get 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58
Example 2:

Input: arr = [1,2]
Output: 3
Explanation: There are only 2 subarrays of odd length, [1] and [2]. Their sum is 3.
Example 3:

Input: arr = [10,11,12]
Output: 66
 

Constraints:

1 <= arr.length <= 100
1 <= arr[i] <= 1000

class Solution
{
public:
    int sumOddLengthSubarrays(vector<int> &arr)
    {
        int n = arr.size();
        if (n == 1) return arr[0];
        int res = arr[0] + arr[1];
        vector<int> dp(n);
        dp[0] = arr[0];
        dp[1] = arr[1];
        for (int i = 2; i < n; ++i)
        {
            dp[i] = dp[i - 2] + (arr[i] + arr[i - 1]) * (i / 2) + arr[i];
            res += dp[i];
        }
        return res;
    }
};


// Source https://leetcode.com/problems/maximum-sum-obtained-of-any-permutation/

We have an array of integers, nums, and an array of requests where requests[i] = [starti, endi]. The ith request asks for the sum of nums[starti] + nums[starti + 1] + ... + nums[endi - 1] + nums[endi]. 
Both starti and endi are 0-indexed.

Return the maximum total sum of all requests among all permutations of nums.

Since the answer may be too large, return it modulo 109 + 7.

 

Example 1:

Input: nums = [1,2,3,4,5], requests = [[1,3],[0,1]]
Output: 19
Explanation: One permutation of nums is [2,1,3,4,5] with the following result: 
requests[0] -> nums[1] + nums[2] + nums[3] = 1 + 3 + 4 = 8
requests[1] -> nums[0] + nums[1] = 2 + 1 = 3
Total sum: 8 + 3 = 11.
A permutation with a higher total sum is [3,5,4,2,1] with the following result:
requests[0] -> nums[1] + nums[2] + nums[3] = 5 + 4 + 2 = 11
requests[1] -> nums[0] + nums[1] = 3 + 5  = 8
Total sum: 11 + 8 = 19, which is the best that you can do.
Example 2:

Input: nums = [1,2,3,4,5,6], requests = [[0,1]]
Output: 11
Explanation: A permutation with the max total sum is [6,5,4,3,2,1] with request sums [11].
Example 3:

Input: nums = [1,2,3,4,5,10], requests = [[0,2],[1,3],[1,1]]
Output: 47
Explanation: A permutation with the max total sum is [4,10,5,3,2,1] with request sums [19,18,10].
 

Constraints:

n == nums.length
1 <= n <= 105
0 <= nums[i] <= 105
1 <= requests.length <= 105
requests[i].length == 2
0 <= starti <= endi < n

class Solution
{
public:
    int maxSumRangeQuery(vector<int> &nums, vector<vector<int>> &requests)
    {
        int n = nums.size();
        vector<int> difference(n + 1);
        for (auto &request : requests)
        {
            int start = request[0];
            int end = request[1];
            difference[start]++;
            difference[end + 1]--;
        }
        for (int i = 1; i <= n; ++i )
            difference[i] += difference[i - 1];
        sort(nums.begin(), nums.end(), greater<int>());
        sort(difference.begin(), difference.end(), greater<int>());
        long res = 0;
        const int mod = 1e9 + 7;
        for (int i = 0; i < n; ++i )
        {
            if (difference[i] == 0) break;
            res = (res + (long(nums[i]) * difference[i]) % mod) % mod;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/make-sum-divisible-by-p/

Given an array of positive integers nums, remove the smallest subarray (possibly empty) such that the sum of the remaining elements is divisible by p. 
It is not allowed to remove the whole array.

Return the length of the smallest subarray that you need to remove, or -1 if it's impossible.

A subarray is defined as a contiguous block of elements in the array.

 

Example 1:

Input: nums = [3,1,4,2], p = 6
Output: 1
Explanation: The sum of the elements in nums is 10, which is not divisible by 6. We can remove the subarray [4], and the sum of the remaining elements is 6, which is divisible by 6.
Example 2:

Input: nums = [6,3,5,2], p = 9
Output: 2
Explanation: We cannot remove a single element to get a sum divisible by 9. The best way is to remove the subarray [5,2], leaving us with [6,3] with sum 9.
Example 3:

Input: nums = [1,2,3], p = 3
Output: 0
Explanation: Here the sum is 6. which is already divisible by 3. Thus we do not need to remove anything.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 109
1 <= p <= 109

class Solution
{
public:
    int minSubarray(vector<int> &nums, int p)
    {
        long total_sum = 0;
        for (long num : nums)
        {
            total_sum += num % p;
        }
        if (total_sum % p == 0)
        {
            return 0;
        }
        long rest = total_sum % p;
        int ans = INT_MAX;
        int n = nums.size();
        long sum = 0;
        unordered_map<long, int> mp;
        mp[0] = -1;
        for (int i = 0; i < n; ++i)
        {
            sum += nums[i];
            long r = (sum % p - rest + p) % p;
            if (mp.count(r))
            {
                ans = min(ans, i - mp[r]);
            }
            mp[sum % p] = i;
        }
        if (ans == INT_MAX || ans == n)
        {
            return -1;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/strange-printer-ii/

There is a strange printer with the following two special requirements:

On each turn, the printer will print a solid rectangular pattern of a single color on the grid. This will cover up the existing colors in the rectangle.
Once the printer has used a color for the above operation, the same color cannot be used again.
You are given a m x n matrix targetGrid, where targetGrid[row][col] is the color in the position (row, col) of the grid.

Return true if it is possible to print the matrix targetGrid, otherwise, return false.

 

Example 1:


Input: targetGrid = [[1,1,1,1],[1,2,2,1],[1,2,2,1],[1,1,1,1]]
Output: true
Example 2:


Input: targetGrid = [[1,1,1,1],[1,1,3,3],[1,1,3,4],[5,5,1,4]]
Output: true
Example 3:

Input: targetGrid = [[1,2,1],[2,1,2],[1,2,1]]
Output: false
Explanation: It is impossible to form targetGrid because it is not allowed to print the same color in different turns.
 

Constraints:

m == targetGrid.length
n == targetGrid[i].length
1 <= m, n <= 60
1 <= targetGrid[row][col] <= 60

class Solution
{
public:
    struct Color
    {
        int minh;
        int maxh;
        int minw;
        int maxw;
    };
    int n, m;
    unordered_map<int, Color>color;
    vector<vector<int>>grid;

    bool isrect(int c)
    {
        int a = color[c].minh;
        int b = color[c].minw;
        int cn = color[c].maxh;
        int cm = color[c].maxw;
        for(int i = a; i <= cn; i++)
        {
            for(int j = b; j <= cm; j++)
            {
                if(grid[i][j] == c || grid[i][j] == 0) continue;
                return false;
            }
        }
        return true;
    }

    void setzero(int c)
    {
        int a = color[c].minh;
        int b = color[c].minw;
        int cn = color[c].maxh;
        int cm = color[c].maxw;
        for(int i = a; i <= cn; i++)
        {
            for(int j = b; j <= cm; j++)
            {
                grid[i][j] = 0;
            }
        }
    }

    void getcolor()
    {
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                if(color.find(grid[i][j]) == color.end())
                {
                    Color t;
                    t.minh = i;
                    t.maxh = i;
                    t.minw = j;
                    t.maxw = j;
                    color[grid[i][j]] = t;
                }
                else
                {
                    color[grid[i][j]].minw = min(color[grid[i][j]].minw, j);
                    color[grid[i][j]].maxw = max(color[grid[i][j]].maxw, j);
                    color[grid[i][j]].minh = min(color[grid[i][j]].minh, i);
                    color[grid[i][j]].maxh = max(color[grid[i][j]].maxh, i);
                }
            }
        }
    }

    bool isPrintable(vector<vector<int>> &targetGrid)
    {
        grid = targetGrid;
        n = grid.size();
        m = grid[0].size();
        getcolor();
        queue<int>q;
        for(auto &p : color)
        {
            if(isrect(p.first))
            {
                q.push(p.first);
            }
        }
        vector<bool>visited(61);
        while(!q.empty())
        {
            int curr = q.front();
            q.pop();
            if(visited[curr]) continue;
            setzero(curr);
            visited[curr] = true;
            for(auto &p : color)
            {
                if(isrect(p.first)) q.push(p.first);
            }
        }
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                if(grid[i][j] != 0) return false;
            }
        }
        return true;
    }
};


// Source https://leetcode.com/problems/rearrange-spaces-between-words/

You are given a string text of words that are placed among some number of spaces. Each word consists of one or more lowercase English letters and are separated by at least one space. 
It's guaranteed that text contains at least one word.

Rearrange the spaces so that there is an equal number of spaces between every pair of adjacent words and that number is maximized. 
If you cannot redistribute all the spaces equally, place the extra spaces at the end, meaning the returned string should be the same length as text.

Return the string after rearranging the spaces.

 

Example 1:

Input: text = "  this   is  a sentence "
Output: "this   is   a   sentence"
Explanation: There are a total of 9 spaces and 4 words. We can evenly divide the 9 spaces between the words: 9 / (4-1) = 3 spaces.
Example 2:

Input: text = " practice   makes   perfect"
Output: "practice   makes   perfect "
Explanation: There are a total of 7 spaces and 3 words. 7 / (3-1) = 3 spaces plus 1 extra space. We place this extra space at the end of the string.
 

Constraints:

1 <= text.length <= 100
text consists of lowercase English letters and ' '.
text contains at least one word.

class Solution
{
public:
    string reorderSpaces(string text)
    {
        int n = text.size(), blank = 0, word = 0;
        vector<string> v;
        istringstream in(text);
        string t;
        while (in >> t)
        {
            ++word;
            v.push_back(t);
        }
        for (int i = 0; i < n; ++i)
        {
            if (text[i] == ' ')
                ++blank;
        }
        string res = "";
        if (word == 1)
        {
            res += v[0];
            res.append(blank, ' ');
            return res;
        }
        int r = blank % (word - 1);
        blank /= (word - 1);
        for (int i = 0; i < v.size(); ++i)
        {
            res += v[i];
            if (i == v.size() - 1) break;
            res.append(blank, ' ');
        }
        res.append(r, ' ');
        return res;
    }
};


// Source https://leetcode.com/problems/split-a-string-into-the-max-number-of-unique-substrings/

Given a string s, return the maximum number of unique substrings that the given string can be split into.

You can split string s into any list of non-empty substrings, where the concatenation of the substrings forms the original string. 
However, you must split the substrings such that all of them are unique.

A substring is a contiguous sequence of characters within a string.

 

Example 1:

Input: s = "ababccc"
Output: 5
Explanation: One way to split maximally is ['a', 'b', 'ab', 'c', 'cc']. Splitting like ['a', 'b', 'a', 'b', 'c', 'cc'] is not valid as you have 'a' and 'b' multiple times.
Example 2:

Input: s = "aba"
Output: 2
Explanation: One way to split maximally is ['a', 'ba'].
Example 3:

Input: s = "aa"
Output: 1
Explanation: It is impossible to split the string any further.
 

Constraints:

1 <= s.length <= 16

s contains only lower case English letters.

class Solution
{
public:
    int n;
    int ans = 0;
    unordered_set<string>st;
    
    void dfs(string &s, int idx)
    {
        if(idx == n)
        {
            ans = max(ans, (int)st.size());
            return;
        }

        for(int i = idx; i < n; i++)
        {
            string temp = s.substr(idx, i - idx + 1);
            if(st.count(temp) != 0) continue;
            st.insert(temp);
            dfs(s, i + 1);
            st.erase(temp);
        }
        return;
    }

    int maxUniqueSplit(string s)
    {
        n = s.length();
        dfs(s, 0);
        return ans;
    }
};


// Source https://leetcode.com/problems/maximum-non-negative-product-in-a-matrix/

You are given a m x n matrix grid. Initially, you are located at the top-left corner (0, 0), and in each step, you can only move right or down in the matrix.

Among all possible paths starting from the top-left corner (0, 0) and ending in the bottom-right corner (m - 1, n - 1), find the path with the maximum non-negative product. 
The product of a path is the product of all integers in the grid cells visited along the path.

Return the maximum non-negative product modulo 109 + 7. If the maximum product is negative, return -1.

Notice that the modulo is performed after getting the maximum product.

 

Example 1:


Input: grid = [[-1,-2,-3],[-2,-3,-3],[-3,-3,-2]]
Output: -1
Explanation: It is not possible to get non-negative product in the path from (0, 0) to (2, 2), so return -1.
Example 2:


Input: grid = [[1,-2,1],[1,-2,1],[3,-4,1]]
Output: 8
Explanation: Maximum non-negative product is shown (1 * 1 * -2 * -4 * 1 = 8).
Example 3:


Input: grid = [[1,3],[0,-4]]
Output: 0
Explanation: Maximum non-negative product is shown (1 * 0 * -4 = 0).
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 15
-4 <= grid[i][j] <= 4

class Solution
{
public:
    int m, n;
    const int mod = 1e9 + 7;
    
    int maxProductPath(vector<vector<int>> &grid)
    {
        m = grid.size(), n = grid[0].size();
        long dp_max[m][n], dp_min[m][n];
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(i == 0 && j == 0)
                    dp_max[i][j] = dp_min[i][j] = grid[i][j];
                else
                {
                    long up_min = i > 0 ? dp_min[i - 1][j] : dp_min[i][j - 1];
                    long left_min = j > 0 ? dp_min[i][j - 1] : dp_min[i - 1][j];

                    long up_max = i > 0 ? dp_max[i - 1][j] : dp_max[i][j - 1];
                    long left_max = j > 0 ? dp_max[i][j - 1] : dp_max[i - 1][j];

                    long a = max(up_max, left_max);
                    long b = min(up_min, left_min);

                    dp_max[i][j] = max(a * grid[i][j], b * grid[i][j]);
                    dp_min[i][j] = min(a * grid[i][j], b * grid[i][j]);
                }
            }
        }
        return dp_max[m - 1][n - 1] < 0 ? -1 : dp_max[m - 1][n - 1] % mod;
    }
};


// Source https://leetcode.com/problems/minimum-cost-to-connect-two-groups-of-points/

You are given two groups of points where the first group has size1 points, the second group has size2 points, and size1 >= size2.

The cost of the connection between any two points are given in an size1 x size2 matrix where cost[i][j] is the cost of connecting point i of the first group and point j of the second group. 
The groups are connected if each point in both groups is connected to one or more points in the opposite group. 
In other words, each point in the first group must be connected to at least one point in the second group, 
and each point in the second group must be connected to at least one point in the first group.

Return the minimum cost it takes to connect the two groups.

 

Example 1:


Input: cost = [[15, 96], [36, 2]]
Output: 17
Explanation: The optimal way of connecting the groups is:
1--A
2--B
This results in a total cost of 17.
Example 2:


Input: cost = [[1, 3, 5], [4, 1, 1], [1, 5, 3]]
Output: 4
Explanation: The optimal way of connecting the groups is:
1--A
2--B
2--C
3--A
This results in a total cost of 4.
Note that there are multiple points connected to point 2 in the first group and point A in the second group. This does not matter as there is no limit to the number of points that can be connected. We only care about the minimum total cost.
Example 3:

Input: cost = [[2, 5, 1], [3, 4, 7], [8, 1, 2], [6, 2, 4], [3, 8, 8]]
Output: 10
 

Constraints:

size1 == cost.length
size2 == cost[i].length
1 <= size1, size2 <= 12
size1 >= size2
0 <= cost[i][j] <= 100

class Solution
{
public:
    int n, m;
    int dp[13][4096];
    int mn[13];

    int recur(int i, int mask, vector<vector<int>> &cost)
    {
        if(i == n)
        {
            int extra = 0;
            for(int j = 0; j < m; j++)
            {
                if((mask & (1 << j)) == 0)
                    extra += mn[j];
            }
            return extra;
        }
        if(dp[i][mask] != -1) return dp[i][mask];
        int ans = 1e9;
        for(int j = 0; j < m; j++)
        {
            ans = min(ans, cost[i][j] + recur(i + 1, mask | (1 << j), cost));
        }
        return dp[i][mask] = ans;
    }

    int connectTwoGroups(vector<vector<int>> &cost)
    {
        n = cost.size();
        m = cost[0].size();
        for(int j = 0; j < 13; j++) mn[j] = 1e9;
        for(int j = 0; j < m; j++)
        {
            for(int i = 0; i < n; i++)
            {
                mn[j] = min(mn[j], cost[i][j]);
            }
        }
        memset(dp, -1, sizeof(dp));
        return recur(0, 0, cost);
    }
};


// Source https://leetcode.com/problems/crawler-log-folder/

The Leetcode file system keeps a log each time some user performs a change folder operation.

The operations are described below:

"../" : Move to the parent folder of the current folder. (If you are already in the main folder, remain in the same folder).
"./" : Remain in the same folder.
"x/" : Move to the child folder named x (This folder is guaranteed to always exist).
You are given a list of strings logs where logs[i] is the operation performed by the user at the ith step.

The file system starts in the main folder, then the operations in logs are performed.

Return the minimum number of operations needed to go back to the main folder after the change folder operations.

 

Example 1:



Input: logs = ["d1/","d2/","../","d21/","./"]
Output: 2
Explanation: Use this change folder operation "../" 2 times and go back to the main folder.
Example 2:



Input: logs = ["d1/","d2/","./","d3/","../","d31/"]
Output: 3
Example 3:

Input: logs = ["d1/","../","../","../"]
Output: 0
 

Constraints:

1 <= logs.length <= 103
2 <= logs[i].length <= 10
logs[i] contains lowercase English letters, digits, '.', and '/'.
logs[i] follows the format described in the statement.
Folder names consist of lowercase English letters and digits.

class Solution
{
public:
    int minOperations(vector<string> &logs)
    {
        int count = 0;
        for (auto &log : logs)
        {
            if(log == "../")
            {
                if(count > 0) count--;
            }
            else if(log == "./") continue;
            else count++;
        }
        return count;
    }
};


// Source https://leetcode.com/problems/maximum-profit-of-operating-a-centennial-wheel/

You are the operator of a Centennial Wheel that has four gondolas, and each gondola has room for up to four people. 
You have the ability to rotate the gondolas counterclockwise, which costs you runningCost dollars.

You are given an array customers of length n where customers[i] is the number of new customers arriving just before the ith rotation (0-indexed). 
This means you must rotate the wheel i times before the customers[i] customers arrive. You cannot make customers wait if there is room in the gondola. 
Each customer pays boardingCost dollars when they board on the gondola closest to the ground and will exit once that gondola reaches the ground again.

You can stop the wheel at any time, including before serving all customers. If you decide to stop serving customers, all subsequent rotations are free in order to get all the customers down safely. 
Note that if there are currently more than four customers waiting at the wheel, only four will board the gondola, and the rest will wait for the next rotation.

Return the minimum number of rotations you need to perform to maximize your profit. If there is no scenario where the profit is positive, return -1.

 

Example 1:


Input: customers = [8,3], boardingCost = 5, runningCost = 6
Output: 3
Explanation: The numbers written on the gondolas are the number of people currently there.
1. 8 customers arrive, 4 board and 4 wait for the next gondola, the wheel rotates. Current profit is 4 * $5 - 1 * $6 = $14.
2. 3 customers arrive, the 4 waiting board the wheel and the other 3 wait, the wheel rotates. Current profit is 8 * $5 - 2 * $6 = $28.
3. The final 3 customers board the gondola, the wheel rotates. Current profit is 11 * $5 - 3 * $6 = $37.
The highest profit was $37 after rotating the wheel 3 times.
Example 2:

Input: customers = [10,9,6], boardingCost = 6, runningCost = 4
Output: 7
Explanation:
1. 10 customers arrive, 4 board and 6 wait for the next gondola, the wheel rotates. Current profit is 4 * $6 - 1 * $4 = $20.
2. 9 customers arrive, 4 board and 11 wait (2 originally waiting, 9 newly waiting), the wheel rotates. Current profit is 8 * $6 - 2 * $4 = $40.
3. The final 6 customers arrive, 4 board and 13 wait, the wheel rotates. Current profit is 12 * $6 - 3 * $4 = $60.
4. 4 board and 9 wait, the wheel rotates. Current profit is 16 * $6 - 4 * $4 = $80.
5. 4 board and 5 wait, the wheel rotates. Current profit is 20 * $6 - 5 * $4 = $100.
6. 4 board and 1 waits, the wheel rotates. Current profit is 24 * $6 - 6 * $4 = $120.
7. 1 boards, the wheel rotates. Current profit is 25 * $6 - 7 * $4 = $122.
The highest profit was $122 after rotating the wheel 7 times.
Example 3:

Input: customers = [3,4,0,5,1], boardingCost = 1, runningCost = 92
Output: -1
Explanation:
1. 3 customers arrive, 3 board and 0 wait, the wheel rotates. Current profit is 3 * $1 - 1 * $92 = -$89.
2. 4 customers arrive, 4 board and 0 wait, the wheel rotates. Current profit is 7 * $1 - 2 * $92 = -$177.
3. 0 customers arrive, 0 board and 0 wait, the wheel rotates. Current profit is 7 * $1 - 3 * $92 = -$269.
4. 5 customers arrive, 4 board and 1 waits, the wheel rotates. Current profit is 11 * $1 - 4 * $92 = -$357.
5. 1 customer arrives, 2 board and 0 wait, the wheel rotates. Current profit is 13 * $1 - 5 * $92 = -$447.
The profit was never positive, so return -1.
 

Constraints:

n == customers.length
1 <= n <= 105
0 <= customers[i] <= 50
1 <= boardingCost, runningCost <= 100

class Solution
{
public:
    int minOperationsMaxProfit(vector<int> &customers, int boardingCost, int runningCost)
    {
        int x = runningCost / boardingCost;
        if(x >= 4) return -1;
        int wait = 0, profit = 0, maxProfit = INT_MIN, ans = -1;
        int r = 0;
        int n = customers.size();
        while(true)
        {
            if(r < n) wait += customers[r];
            int board = min(wait, 4);
            wait -= board;
            profit += board * boardingCost - runningCost;
            if(profit > 0 && profit > maxProfit)
            {
                ans = r + 1;
                maxProfit = profit;
            }
            if(r >= n && wait == 0) break;
            r++;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/throne-inheritance/

A kingdom consists of a king, his children, his grandchildren, and so on. Every once in a while, someone in the family dies or a child is born.

The kingdom has a well-defined order of inheritance that consists of the king as the first member. Let's define the recursive function Successor(x, curOrder), 
which given a person x and the inheritance order so far, returns who should be the next person after x in the order of inheritance.

Successor(x, curOrder):
    if x has no children or all of x's children are in curOrder:
        if x is the king return null
        else return Successor(x's parent, curOrder)
    else return x's oldest child who's not in curOrder
For example, assume we have a kingdom that consists of the king, his children Alice and Bob (Alice is older than Bob), and finally Alice's son Jack.

In the beginning, curOrder will be ["king"].
Calling Successor(king, curOrder) will return Alice, so we append to curOrder to get ["king", "Alice"].
Calling Successor(Alice, curOrder) will return Jack, so we append to curOrder to get ["king", "Alice", "Jack"].
Calling Successor(Jack, curOrder) will return Bob, so we append to curOrder to get ["king", "Alice", "Jack", "Bob"].
Calling Successor(Bob, curOrder) will return null. Thus the order of inheritance will be ["king", "Alice", "Jack", "Bob"].
Using the above function, we can always obtain a unique order of inheritance.

Implement the ThroneInheritance class:

ThroneInheritance(string kingName) Initializes an object of the ThroneInheritance class. The name of the king is given as part of the constructor.
void birth(string parentName, string childName) Indicates that parentName gave birth to childName.
void death(string name) Indicates the death of name. The death of the person doesn't affect the Successor function nor the current inheritance order. 
You can treat it as just marking the person as dead.
string[] getInheritanceOrder() Returns a list representing the current order of inheritance excluding dead people.
 

Example 1:

Input
["ThroneInheritance", "birth", "birth", "birth", "birth", "birth", "birth", "getInheritanceOrder", "death", "getInheritanceOrder"]
[["king"], ["king", "andy"], ["king", "bob"], ["king", "catherine"], ["andy", "matthew"], ["bob", "alex"], ["bob", "asha"], [null], ["bob"], [null]]
Output
[null, null, null, null, null, null, null, ["king", "andy", "matthew", "bob", "alex", "asha", "catherine"], null, ["king", "andy", "matthew", "alex", "asha", "catherine"]]

Explanation
ThroneInheritance t= new ThroneInheritance("king"); // order: king
t.birth("king", "andy"); // order: king > andy
t.birth("king", "bob"); // order: king > andy > bob
t.birth("king", "catherine"); // order: king > andy > bob > catherine
t.birth("andy", "matthew"); // order: king > andy > matthew > bob > catherine
t.birth("bob", "alex"); // order: king > andy > matthew > bob > alex > catherine
t.birth("bob", "asha"); // order: king > andy > matthew > bob > alex > asha > catherine
t.getInheritanceOrder(); // return ["king", "andy", "matthew", "bob", "alex", "asha", "catherine"]
t.death("bob"); // order: king > andy > matthew > bob > alex > asha > catherine
t.getInheritanceOrder(); // return ["king", "andy", "matthew", "alex", "asha", "catherine"]
 

Constraints:

1 <= kingName.length, parentName.length, childName.length, name.length <= 15
kingName, parentName, childName, and name consist of lowercase English letters only.
All arguments childName and kingName are distinct.
All name arguments of death will be passed to either the constructor or as childName to birth first.
For each call to birth(parentName, childName), it is guaranteed that parentName is alive.
At most 105 calls will be made to birth and death.
At most 10 calls will be made to getInheritanceOrder.

class ThroneInheritance
{
public:
    struct Node
    {
        string name;
        bool is_live;
        vector<Node *> inher;
        Node(string n)
        {
            name = n, is_live = true;
        }
    };
    Node *root;
    unordered_map <string, Node *> table;

    ThroneInheritance(string kingName)
    {
        root = new Node(kingName);
        table[kingName] = root;
    }

    void birth(string parentName, string childName)
    {
        Node *child = new Node(childName);
        table[childName] = child;
        table[parentName]->inher.push_back(child);
    }

    void death(string name)
    {
        table[name]->is_live = false;
    }

    vector<string> getInheritanceOrder()
    {
        vector<string> ans;
        dfs(ans, root);
        return ans;
    }

    void dfs(vector<string> &ans, Node *node)
    {
        if(node->is_live) ans.push_back(node->name);
        for(auto child : node->inher) dfs(ans, child);
    }
};


// Source https://leetcode.com/problems/maximum-number-of-achievable-transfer-requests/

We have n buildings numbered from 0 to n - 1. Each building has a number of employees. It's transfer season, and some employees want to change the building they reside in.

You are given an array requests where requests[i] = [fromi, toi] represents an employee's request to transfer from building fromi to building toi.

All buildings are full, so a list of requests is achievable only if for each building, the net change in employee transfers is zero. 
This means the number of employees leaving is equal to the number of employees moving in. 
For example if n = 3 and two employees are leaving building 0, one is leaving building 1, and one is leaving building 2, 
there should be two employees moving to building 0, one employee moving to building 1, and one employee moving to building 2.

Return the maximum number of achievable requests.

 

Example 1:


Input: n = 5, requests = [[0,1],[1,0],[0,1],[1,2],[2,0],[3,4]]
Output: 5
Explantion: Let's see the requests:
From building 0 we have employees x and y and both want to move to building 1.
From building 1 we have employees a and b and they want to move to buildings 2 and 0 respectively.
From building 2 we have employee z and they want to move to building 0.
From building 3 we have employee c and they want to move to building 4.
From building 4 we don't have any requests.
We can achieve the requests of users x and b by swapping their places.
We can achieve the requests of users y, a and z by swapping the places in the 3 buildings.
Example 2:


Input: n = 3, requests = [[0,0],[1,2],[2,1]]
Output: 3
Explantion: Let's see the requests:
From building 0 we have employee x and they want to stay in the same building 0.
From building 1 we have employee y and they want to move to building 2.
From building 2 we have employee z and they want to move to building 1.
We can achieve all the requests. 
Example 3:

Input: n = 4, requests = [[0,3],[3,1],[1,2],[2,0]]
Output: 4
 

Constraints:

1 <= n <= 20
1 <= requests.length <= 16
requests[i].length == 2
0 <= fromi, toi < n

class Solution
{
public:
    int ans;
    int visit[21];

    void helper(int i, int c, vector<vector<int>> &requests)
    {
        if(i == requests.size())
        {
            bool flag = true;
            for(auto x : visit)
            {
                if(x != 0)
                {
                    flag = false;
                    break;
                }
            }
            if (flag) ans = max(ans, c);
            return;
        }
        helper(i + 1, c, requests);
        visit[requests[i][0]]--;
        visit[requests[i][1]]++;
        helper(i + 1, c + 1, requests);
        visit[requests[i][0]]++;
        visit[requests[i][1]]--;
    }

    int maximumRequests(int n, vector<vector<int>> &requests)
    {
        ans = 0;
        memset(visit, 0, sizeof(visit));
        helper(0, 0, requests);
        return ans;
    }
};


// Source https://leetcode.com/problems/design-parking-system/

Design a parking system for a parking lot. The parking lot has three kinds of parking spaces: big, medium, and small, with a fixed number of slots for each size.

Implement the ParkingSystem class:

ParkingSystem(int big, int medium, int small) Initializes object of the ParkingSystem class. The number of slots for each parking space are given as part of the constructor.
bool addCar(int carType) Checks whether there is a parking space of carType for the car that wants to get into the parking lot. 
carType can be of three kinds: big, medium, or small, which are represented by 1, 2, and 3 respectively. 
A car can only park in a parking space of its carType. If there is no space available, return false, else park the car in that size space and return true.
 

Example 1:

Input
["ParkingSystem", "addCar", "addCar", "addCar", "addCar"]
[[1, 1, 0], [1], [2], [3], [1]]
Output
[null, true, true, false, false]

Explanation
ParkingSystem parkingSystem = new ParkingSystem(1, 1, 0);
parkingSystem.addCar(1); // return true because there is 1 available slot for a big car
parkingSystem.addCar(2); // return true because there is 1 available slot for a medium car
parkingSystem.addCar(3); // return false because there is no available slot for a small car
parkingSystem.addCar(1); // return false because there is no available slot for a big car. It is already occupied.
 

Constraints:

0 <= big, medium, small <= 1000
carType is 1, 2, or 3
At most 1000 calls will be made to addCar

class ParkingSystem
{
public:
    unordered_map<int, int >slot;

    ParkingSystem(int big, int medium, int small)
    {
        slot[1] = big;
        slot[2] = medium;
        slot[3] = small;
    }

    bool addCar(int carType)
    {
        if(slot.find(carType) != slot.end() && slot[carType] > 0)
        {
            slot[carType]--;
            return true;
        }
        return false;
    }
};


// Source https://leetcode.com/problems/alert-using-same-key-card-three-or-more-times-in-a-one-hour-period/

LeetCode company workers use key-cards to unlock office doors. Each time a worker uses their key-card, the security system saves the worker's name and the time when it was used. 
The system emits an alert if any worker uses the key-card three or more times in a one-hour period.

You are given a list of strings keyName and keyTime where [keyName[i], keyTime[i]] corresponds to a person's name and the time when their key-card was used in a single day.

Access times are given in the 24-hour time format "HH:MM", such as "23:51" and "09:49".

Return a list of unique worker names who received an alert for frequent keycard use. Sort the names in ascending order alphabetically.

Notice that "10:00" - "11:00" is considered to be within a one-hour period, while "22:51" - "23:52" is not considered to be within a one-hour period.

 

Example 1:

Input: keyName = ["daniel","daniel","daniel","luis","luis","luis","luis"], keyTime = ["10:00","10:40","11:00","09:00","11:00","13:00","15:00"]
Output: ["daniel"]
Explanation: "daniel" used the keycard 3 times in a one-hour period ("10:00","10:40", "11:00").
Example 2:

Input: keyName = ["alice","alice","alice","bob","bob","bob","bob"], keyTime = ["12:01","12:00","18:00","21:00","21:20","21:30","23:00"]
Output: ["bob"]
Explanation: "bob" used the keycard 3 times in a one-hour period ("21:00","21:20", "21:30").
 

Constraints:

1 <= keyName.length, keyTime.length <= 105
keyName.length == keyTime.length
keyTime[i] is in the format "HH:MM".
[keyName[i], keyTime[i]] is unique.
1 <= keyName[i].length <= 10
keyName[i] contains only lowercase English letters.

class Solution
{
public:
    int convertToMinutes(string &s)
    {
        return stoi(s.substr(0, 2)) * 60 + stoi(s.substr(3));
    }

    vector<string> alertNames(vector<string> &keyName, vector<string> &keyTime)
    {
        int n = keyTime.size();
        vector<pair<string, int>> accesses;
        accesses.reserve(n);
        for (int i = 0; i < n; ++i)
        {
            accesses.push_back({keyName[i], convertToMinutes(keyTime[i])});
        }
        sort(accesses.begin(), accesses.end(), [](auto & p1, auto & p2)
        {
            return p1.second < p2.second;
        });
        deque<pair<string, int>> dq;
        unordered_map<string, int> userInWindow;
        set<string> ans;
        for (auto &p : accesses)
        {
            while (!dq.empty() && p.second - dq.front().second > 60)
            {
                --userInWindow[dq.front().first];
                dq.pop_front();
            }
            dq.push_back(p);
            ++userInWindow[p.first];
            if (userInWindow[p.first] >= 3)
            {
                ans.insert(p.first);
            }
        }
        return vector<string>(ans.begin(), ans.end());
    }
};


// Source https://leetcode.com/problems/find-valid-matrix-given-row-and-column-sums/

You are given two arrays rowSum and colSum of non-negative integers where rowSum[i] is the sum of the elements in the ith row 
and colSum[j] is the sum of the elements of the jth column of a 2D matrix. In other words, you do not know the elements of the matrix, but you do know the sums of each row and column.

Find any matrix of non-negative integers of size rowSum.length x colSum.length that satisfies the rowSum and colSum requirements.

Return a 2D array representing any matrix that fulfills the requirements. It's guaranteed that at least one matrix that fulfills the requirements exists.

 

Example 1:

Input: rowSum = [3,8], colSum = [4,7]
Output: [[3,0],
         [1,7]]
Explanation: 
0th row: 3 + 0 = 3 == rowSum[0]
1st row: 1 + 7 = 8 == rowSum[1]
0th column: 3 + 1 = 4 == colSum[0]
1st column: 0 + 7 = 7 == colSum[1]
The row and column sums match, and all matrix elements are non-negative.
Another possible matrix is: [[1,2],
                             [3,5]]
Example 2:

Input: rowSum = [5,7,10], colSum = [8,6,8]
Output: [[0,5,0],
         [6,1,0],
         [2,0,8]]
 
[5, 0, 0]
[3, 4, 0]
[0, 2, 8]

Constraints:

1 <= rowSum.length, colSum.length <= 500
0 <= rowSum[i], colSum[i] <= 108
sum(rows) == sum(columns)

class Solution
{
public:
    vector<vector<int>> restoreMatrix(vector<int> &rowSum, vector<int> &colSum)
    {
        int n = rowSum.size(), m = colSum.size();
        vector<vector<int>> result(n, vector<int>(m));
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                if(rowSum[i] == 0 || colSum[j] == 0)
                    continue;

                result[i][j] = min(rowSum[i], colSum[j]);

                rowSum[i] -= result[i][j];
                colSum[j] -= result[i][j];
            }
        }
        return result;
    }
};


// Source https://leetcode.com/problems/find-servers-that-handled-most-number-of-requests/

You have k servers numbered from 0 to k-1 that are being used to handle multiple requests simultaneously. 
Each server has infinite computational capacity but cannot handle more than one request at a time. The requests are assigned to servers according to a specific algorithm:

The ith (0-indexed) request arrives.
If all servers are busy, the request is dropped (not handled at all).
If the (i % k)th server is available, assign the request to that server.
Otherwise, assign the request to the next available server (wrapping around the list of servers and starting from 0 if necessary). 
For example, if the ith server is busy, try to assign the request to the (i+1)th server, then the (i+2)th server, and so on.
You are given a strictly increasing array arrival of positive integers, where arrival[i] represents the arrival time of the ith request, 
and another array load, where load[i] represents the load of the ith request (the time it takes to complete). 
Your goal is to find the busiest server(s). A server is considered busiest if it handled the most number of requests successfully among all the servers.

Return a list containing the IDs (0-indexed) of the busiest server(s). You may return the IDs in any order.

 

Example 1:


Input: k = 3, arrival = [1,2,3,4,5], load = [5,2,3,3,3] 
Output: [1] 
Explanation: 
All of the servers start out available.
The first 3 requests are handled by the first 3 servers in order.
Request 3 comes in. Server 0 is busy, so it's assigned to the next available server, which is 1.
Request 4 comes in. It cannot be handled since all servers are busy, so it is dropped.
Servers 0 and 2 handled one request each, while server 1 handled two requests. Hence server 1 is the busiest server.
Example 2:

Input: k = 3, arrival = [1,2,3,4], load = [1,2,1,2]
Output: [0]
Explanation: 
The first 3 requests are handled by first 3 servers.
Request 3 comes in. It is handled by server 0 since the server is available.
Server 0 handled two requests, while servers 1 and 2 handled one request each. Hence server 0 is the busiest server.
Example 3:

Input: k = 3, arrival = [1,2,3], load = [10,12,11]
Output: [0,1,2]
Explanation: Each server handles a single request, so they are all considered the busiest.
 

Constraints:

1 <= k <= 105
1 <= arrival.length, load.length <= 105
arrival.length == load.length
1 <= arrival[i], load[i] <= 109
arrival is strictly increasing.

class Solution
{
public:
    vector<int> busiestServers(int k, vector<int> &arrival, vector<int> &load)
    {
        set<int> servers;
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        unordered_map<int, int> busy;
        int n = arrival.size();
        for(int i = 0; i < k; i++) servers.insert(i);
        for(int i = 0; i < n; i++)
        {
            int start = arrival[i], end = arrival[i] + load[i];
            while(!pq.empty() && pq.top().first <= start)
            {
                auto it = pq.top();
                pq.pop();
                servers.insert(it.second);
            }
            if(servers.empty())
                continue;
            auto ser = servers.lower_bound(i % k);
            if(ser == servers.end())
                ser = servers.begin();

            int serverNo = *ser;
            pq.push({end, serverNo});
            busy[serverNo]++;
            servers.erase(ser);
        }
        int maxBusy = 0;
        for(auto p : busy)
            maxBusy = max(maxBusy, p.second);
        vector<int> res;
        for(auto p : busy)
        {
            if(p.second == maxBusy)
                res.push_back(p.first);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/special-array-with-x-elements-greater-than-or-equal-x/

You are given an array nums of non-negative integers. nums is considered special if there exists a number x such that there are exactly x numbers in nums that are greater than or equal to x.

Notice that x does not have to be an element in nums.

Return x if the array is special, otherwise, return -1. It can be proven that if nums is special, the value for x is unique.

 

Example 1:

Input: nums = [3,5]
Output: 2
Explanation: There are 2 values (3 and 5) that are greater than or equal to 2.
Example 2:

Input: nums = [0,0]
Output: -1
Explanation: No numbers fit the criteria for x.
If x = 0, there should be 0 numbers >= x, but there are 2.
If x = 1, there should be 1 number >= x, but there are 0.
If x = 2, there should be 2 numbers >= x, but there are 0.
x cannot be greater since there are only 2 numbers in nums.
Example 3:

Input: nums = [0,4,3,0,4]
Output: 3
Explanation: There are 3 values that are greater than or equal to 3.
 

Constraints:

1 <= nums.length <= 100
0 <= nums[i] <= 1000

class Solution
{
public:
    int specialArray(vector<int> &nums)
    {
        sort(nums.begin(), nums.end());
        int mx = nums.back();
        for(int i = 1; i <= mx; ++i)
        {
            auto it = lower_bound(nums.begin(), nums.end(), i);
            auto d = distance(it, nums.end());
            if(d == i)
                return d;
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/even-odd-tree/

A binary tree is named Even-Odd if it meets the following conditions:

The root of the binary tree is at level index 0, its children are at level index 1, their children are at level index 2, etc.
For every even-indexed level, all nodes at the level have odd integer values in strictly increasing order (from left to right).
For every odd-indexed level, all nodes at the level have even integer values in strictly decreasing order (from left to right).
Given the root of a binary tree, return true if the binary tree is Even-Odd, otherwise return false.

 

Example 1:


Input: root = [1,10,4,3,null,7,9,12,8,6,null,null,2]
Output: true
Explanation: The node values on each level are:
Level 0: [1]
Level 1: [10,4]
Level 2: [3,7,9]
Level 3: [12,8,6,2]
Since levels 0 and 2 are all odd and increasing and levels 1 and 3 are all even and decreasing, the tree is Even-Odd.
Example 2:


Input: root = [5,4,2,3,3,7]
Output: false
Explanation: The node values on each level are:
Level 0: [5]
Level 1: [4,2]
Level 2: [3,3,7]
Node values in level 2 must be in strictly increasing order, so the tree is not Even-Odd.
Example 3:


Input: root = [5,9,1,3,5,7]
Output: false
Explanation: Node values in the level 1 should be even integers.
 

Constraints:

The number of nodes in the tree is in the range [1, 105].
1 <= Node.val <= 106

class Solution
{
public:
    bool isEvenOddTree(TreeNode *root)
    {
        queue<TreeNode *> q;
        bool isOdd = true;
        q.push(root);
        while (!q.empty())
        {
            int sz = q.size();
            int prevVal = isOdd ? 0 : INT_MAX;
            for (int i = 0; i < sz; ++i)
            {
                TreeNode *curr = q.front();
                q.pop();
                if (curr->val == prevVal) return false;
                if (isOdd != (curr->val > prevVal)) return false;
                if (isOdd != (curr->val % 2 == 1)) return false;
                prevVal = curr->val;
                if (curr->left) q.push(curr->left);
                if (curr->right) q.push(curr->right);
            }
            isOdd = !isOdd;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/maximum-number-of-visible-points/

You are given an array points, an integer angle, and your location, where location = [posx, posy] and points[i] = [xi, yi] both denote integral coordinates on the X-Y plane.

Initially, you are facing directly east from your position. You cannot move from your position, but you can rotate. In other words, posx and posy cannot be changed. 
Your field of view in degrees is represented by angle, determining how wide you can see from any given view direction. 
Let d be the amount in degrees that you rotate counterclockwise. Then, your field of view is the inclusive range of angles [d - angle/2, d + angle/2].


You can see some set of points if, for each point, the angle formed by the point, your position, and the immediate east direction from your position is in your field of view.

There can be multiple points at one coordinate. There may be points at your location, and you can always see these points regardless of your rotation. 
Points do not obstruct your vision to other points.

Return the maximum number of points you can see.

 

Example 1:


Input: points = [[2,1],[2,2],[3,3]], angle = 90, location = [1,1]
Output: 3
Explanation: The shaded region represents your field of view. All points can be made visible in your field of view, including [3,3] even though [2,2] is in front and in the same line of sight.
Example 2:

Input: points = [[2,1],[2,2],[3,4],[1,1]], angle = 90, location = [1,1]
Output: 4
Explanation: All points can be made visible in your field of view, including the one at your location.
Example 3:


Input: points = [[1,0],[2,1]], angle = 13, location = [1,1]
Output: 1
Explanation: You can only see one of the two points, as shown above.
 

Constraints:

1 <= points.length <= 105
points[i].length == 2
location.length == 2
0 <= angle < 360
0 <= posx, posy, xi, yi <= 100

cout << atan2(0, 1) * 180 / M_PI << endl;
cout << atan2(1, 1) * 180 / M_PI << endl;
cout << atan2(1, 0) * 180 / M_PI << endl;
cout << atan2(1, -1) * 180 / M_PI << endl;
cout << atan2(0, -1) * 180 / M_PI << endl;
cout << atan2(-1, -1) * 180 / M_PI << endl;
cout << atan2(-1, 0) * 180 / M_PI << endl;
cout << atan2(-1, 1) * 180 / M_PI << endl;

0
45
90
135
180
-135
-90
-45

class Solution
{
public:
    int visiblePoints(vector<vector<int>> &points, int angle, vector<int> &location)
    {
        int inplace = 0;
        vector<double> thetas;

        for (const auto &p : points)
        {
            if (p == location)
            {
                ++inplace;
            }
            else
            {
                auto v = atan2((double)p[1] - location[1], (double)p[0] - location[0]) * 180 / M_PI;
                thetas.push_back(v < 0 ? v + 360 : v);
            }
        }
        int n = thetas.size();
        for (int i = 0; i < n; ++i)
        {
            thetas.push_back(thetas[i] + 360);
        }
        sort(thetas.begin(), thetas.end());
        int maxPoints = 0;
        int i = 0, j = 0;
        n = thetas.size();
        while (j < n)
        {
            while (i <= j && thetas[j] - thetas[i] > angle)
            {
                ++i;
            }
            maxPoints = max(maxPoints, j - i + 1);
            ++j;
        }
        return inplace + maxPoints;
    }
};


// Source https://leetcode.com/problems/minimum-one-bit-operations-to-make-integers-zero/

Given an integer n, you must transform it into 0 using the following operations any number of times:

Change the rightmost (0th) bit in the binary representation of n.
Change the ith bit in the binary representation of n if the (i-1)th bit is set to 1 and the (i-2)th through 0th bits are set to 0.
Return the minimum number of operations to transform n into 0.

 

Example 1:

Input: n = 3
Output: 2
Explanation: The binary representation of 3 is "11".
"11" -> "01" with the 2nd operation since the 0th bit is 1.
"01" -> "00" with the 1st operation.
Example 2:

Input: n = 6
Output: 4
Explanation: The binary representation of 6 is "110".
"110" -> "010" with the 2nd operation since the 1st bit is 1 and 0th through 0th bits are 0.
"010" -> "011" with the 1st operation.
"011" -> "001" with the 2nd operation since the 0th bit is 1.
"001" -> "000" with the 1st operation.
 

Constraints:

0 <= n <= 109

10 -> 11 -> 01 -> 00
100 -> 101 -> 111 -> 110 -> 010 -> 011 -> 001 -> 000
1000 -> 1001 -> 1011 -> 1010 -> 1110 -> 1111 -> 1101 -> 1100 -> 0100 -> 0101 -> 0111 -> 0110 -> 0010 -> 0011 -> 0001 -> 0000
10000 -> 10001 -> 10011 -> 10010 -> 10110 -> 10111 -> 10101 -> 10100 -> 11100 -> 11101 -> 11111 -> 11110 -> 11010 -> 11011 -> 11001 -> 11000->
01000 -> 01001 -> 01011 -> 01010 -> 01110 -> 01111 -> 01101 -> 01100 -> 00100 -> 00101 -> 00111 -> 00110 -> 00010 -> 00011 -> 00001 -> 00000

对于任意n，它一定要先变成形如1100...0的数，才能继续变为0。
这是因为要将n变为0，必须其中某一步是将最高位变为0，而最高位变为0必须要得到形如1100...0的数才能做。
如果n = 2^k，最少需要2^(k+1) - 1步
当k = 0时，成立
当k > 0时，由于10...0先要变成110...0，对于任意的能把10...0变成110...0的最短的操作序列，都不会改动最高位的1（如果改变了的话，说明中途已经到了110...0了，与最短矛盾），
所以把10...0变成110...0的最短的操作序列其实就是把0变为10...0的操作序列（即只考虑除了最高位1的剩余数字）。
而题目的两个操作实际上是可逆的（可以观察上面的3个例子），所以把0变为10...0的最短操作序列的逆序就是把10...0变为0的最短操作序列，
总共步数就是2*(2^k - 1) + 1 = 2^(k+1) - 1。

10 -> 00 等于 00 -> 10 最少需要 3
110 -> 000  等于 000 -> 110 最少需要 7 - 3
10110 -> 00000  等于 00000 -> 10110 最少需要 31 - 7 + 3 = 27

1 -> 0 等于 0 -> 1 最少需要 1
1001 -> 0000  等于 0000 -> 1001 最少需要 15 - 1
101001 -> 000000  等于 000000 -> 101001 最少需要 63 - 15 + 1
1101001 -> 0000000 等于 0000000 -> 1101001 最少需要 127-63+15-1 = 78

class Solution
{
public:
    int minimumOneBitOperations(int n)
    {
        int ans = 0, mul = 1;
        for(int i = 30; i >= 0; i--)
        {
            if(n & (1 << i))
            {
                ans += mul * ((1 << (i + 1)) - 1);
                mul *= -1;
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/maximum-nesting-depth-of-the-parentheses/

A string is a valid parentheses string (denoted VPS) if it meets one of the following:

It is an empty string "", or a single character not equal to "(" or ")",
It can be written as AB (A concatenated with B), where A and B are VPS's, or
It can be written as (A), where A is a VPS.
We can similarly define the nesting depth depth(S) of any VPS S as follows:

depth("") = 0
depth(C) = 0, where C is a string with a single character not equal to "(" or ")".
depth(A + B) = max(depth(A), depth(B)), where A and B are VPS's.
depth("(" + A + ")") = 1 + depth(A), where A is a VPS.
For example, "", "()()", and "()(()())" are VPS's (with nesting depths 0, 1, and 2), and ")(" and "(()" are not VPS's.

Given a VPS represented as string s, return the nesting depth of s.

 

Example 1:

Input: s = "(1+(2*3)+((8)/4))+1"
Output: 3
Explanation: Digit 8 is inside of 3 nested parentheses in the string.
Example 2:

Input: s = "(1)+((2))+(((3)))"
Output: 3
 

Constraints:

1 <= s.length <= 100
s consists of digits 0-9 and characters '+', '-', '*', '/', '(', and ')'.
It is guaranteed that parentheses expression s is a VPS.

class Solution
{
public:
    int maxDepth(string s)
    {
        int open = 0;
        int ans = 0;
        for(auto c : s)
        {
            if(c != '(' && c != ')')
                continue;
            if(c == '(')
            {
                open++;
            }
            else
            {
                open--;
            }
            ans = max(ans, open);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/maximal-network-rank/

There is an infrastructure of n cities with some number of roads connecting these cities. Each roads[i] = [ai, bi] indicates that there is a bidirectional road between cities ai and bi.

The network rank of two different cities is defined as the total number of directly connected roads to either city. If a road is directly connected to both cities, it is only counted once.

The maximal network rank of the infrastructure is the maximum network rank of all pairs of different cities.

Given the integer n and the array roads, return the maximal network rank of the entire infrastructure.

 

Example 1:



Input: n = 4, roads = [[0,1],[0,3],[1,2],[1,3]]
Output: 4
Explanation: The network rank of cities 0 and 1 is 4 as there are 4 roads that are connected to either 0 or 1. The road between 0 and 1 is only counted once.
Example 2:



Input: n = 5, roads = [[0,1],[0,3],[1,2],[1,3],[2,3],[2,4]]
Output: 5
Explanation: There are 5 roads that are connected to cities 1 or 2.
Example 3:

Input: n = 8, roads = [[0,1],[1,2],[2,3],[2,4],[5,6],[5,7]]
Output: 5
Explanation: The network rank of 2 and 5 is 5. Notice that all the cities do not have to be connected.
 

Constraints:

2 <= n <= 100
0 <= roads.length <= n * (n - 1) / 2
roads[i].length == 2
0 <= ai, bi <= n-1
ai != bi
Each pair of cities has at most one road connecting them.

class Solution
{
public:
    int maximalNetworkRank(int n, vector<vector<int>> &roads)
    {
        vector<vector<int>>graph(n, vector<int>(n, 0));
        vector<int>degree(n, 0);
        for(int i = 0; i < roads.size(); i++)
        {
            int u = roads[i][0];
            int v = roads[i][1];
            degree[u]++;
            degree[v]++;
            graph[u][v] = 1;
            graph[v][u] = 1;
        }
        int ans = 0;
        for(int i = 0; i < graph.size(); i++)
        {
            for(int j = 0; j < graph.size(); j++)
            {
                if(j != i)
                {
                    int rank = degree[i] + degree[j] - graph[i][j];
                    ans = max(ans, rank);
                }
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/split-two-strings-to-make-palindrome/

You are given two strings a and b of the same length. Choose an index and split both strings at the same index, 
splitting a into two strings: aprefix and asuffix where a = aprefix + asuffix, and splitting b into two strings: bprefix and bsuffix where b = bprefix + bsuffix. 
Check if aprefix + bsuffix or bprefix + asuffix forms a palindrome.

When you split a string s into sprefix and ssuffix, either ssuffix or sprefix is allowed to be empty. For example, if s = "abc", then "" + "abc", "a" + "bc", "ab" + "c" , and "abc" + "" are valid splits.

Return true if it is possible to form a palindrome string, otherwise return false.

Notice that x + y denotes the concatenation of strings x and y.

 

Example 1:

Input: a = "x", b = "y"
Output: true
Explaination: If either a or b are palindromes the answer is true since you can split in the following way:
aprefix = "", asuffix = "x"
bprefix = "", bsuffix = "y"
Then, aprefix + bsuffix = "" + "y" = "y", which is a palindrome.
Example 2:

Input: a = "xbdef", b = "xecab"
Output: false
Example 3:

Input: a = "ulacfd", b = "jizalu"
Output: true
Explaination: Split them at index 3:
aprefix = "ula", asuffix = "cfd"
bprefix = "jiz", bsuffix = "alu"
Then, aprefix + bsuffix = "ula" + "alu" = "ulaalu", which is a palindrome.
 

Constraints:

1 <= a.length, b.length <= 105
a.length == b.length
a and b consist of lowercase English letters

class Solution
{
public:
    bool checkPalindromeFormation(string a, string b)
    {
        int n = a.length();
        int i = 0, j = n - 1;
        while(i < j)
        {
            if(a[i] != b[j])
                break;
            else
            {
                i++;
                j--;
            }
        }
        if(checkPalindrome(a, i, j))
            return true;
        if(checkPalindrome(b, i, j))
            return true;
        i = 0, j = n - 1;
        while(i < j)
        {
            if(b[i] != a[j])
                break;
            else
            {
                i++;
                j--;
            }
        }
        if(checkPalindrome(a, i, j))
            return true;
        if(checkPalindrome(b, i, j))
            return true;
        return false;
    }
    bool checkPalindrome(string str, int i, int j)
    {
        while(i < j)
        {
            if(str[i] != str[j]) return false;
            ++i;
            --j;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/count-subtrees-with-max-distance-between-cities/

There are n cities numbered from 1 to n. You are given an array edges of size n-1, where edges[i] = [ui, vi] represents a bidirectional edge between cities ui and vi. 
There exists a unique path between each pair of cities. In other words, the cities form a tree.

A subtree is a subset of cities where every city is reachable from every other city in the subset, where the path between each pair passes through only the cities from the subset. 
Two subtrees are different if there is a city in one subtree that is not present in the other.

For each d from 1 to n-1, find the number of subtrees in which the maximum distance between any two cities in the subtree is equal to d.

Return an array of size n-1 where the dth element (1-indexed) is the number of subtrees in which the maximum distance between any two cities is equal to d.

Notice that the distance between the two cities is the number of edges in the path between them.

 

Example 1:



Input: n = 4, edges = [[1,2],[2,3],[2,4]]
Output: [3,4,0]
Explanation:
The subtrees with subsets {1,2}, {2,3} and {2,4} have a max distance of 1.
The subtrees with subsets {1,2,3}, {1,2,4}, {2,3,4} and {1,2,3,4} have a max distance of 2.
No subtree has two nodes where the max distance between them is 3.
Example 2:

Input: n = 2, edges = [[1,2]]
Output: [1]
Example 3:

Input: n = 3, edges = [[1,2],[2,3]]
Output: [2,1]
 

Constraints:

2 <= n <= 15
edges.length == n-1
edges[i].length == 2
1 <= ui, vi <= n
All pairs (ui, vi) are distinct.

A subtree is a subset of cities where every city is reachable from every other city in the subset, where the path between each pair passes through only the cities from the subset. 
Two subtrees are different if there is a city in one subtree that is not present in the other.

class Solution
{
public:

    vector<int> countSubgraphsForEachDiameter(int n, vector<vector<int>> &edges)
    {
        vector<int> result(n - 1, 0);
        vector<vector<int>> tree(n + 1);
        vector<bool> visited(n + 1, false);

        for (auto &edge : edges)
        {
            tree[edge[0]].push_back(edge[1]);
            tree[edge[1]].push_back(edge[0]);
        }

        computeDiameters(tree, 1, visited, result);
        return result;
    }

    struct SubTreeInfo
    {
        int depth;
        int diameter;
        SubTreeInfo(int depth, int diameter) : depth(depth), diameter(diameter) {}
    };

    vector<SubTreeInfo> computeDiameters(vector<vector<int>> &tree, int nodeIdx, vector<bool> &visited,
                                         vector<int> &result)
    {
        visited[nodeIdx] = true;
        vector<SubTreeInfo> subTrees;
        subTrees.push_back(SubTreeInfo(0, 0));
        for (int childIdx : tree[nodeIdx])
        {
            if (visited[childIdx]) continue;
            auto childSubTrees = computeDiameters(tree, childIdx, visited, result);
            int numSubTrees = subTrees.size();
            for (auto &childSubTree : childSubTrees)
            {
                for (int i = 0; i < numSubTrees; ++i)
                {
                    auto &subTree = subTrees[i];
                    SubTreeInfo newSubTree(-1, -1);
                    newSubTree.depth = max(subTree.depth, 1 + childSubTree.depth);
                    newSubTree.diameter = max(max(subTree.diameter, 1 + childSubTree.depth +
                                                  subTree.depth), childSubTree.diameter);

                    result[newSubTree.diameter - 1]++;
                    subTrees.push_back(newSubTree);
                }
            }
        }
        return subTrees;
    }
};


// Source https://leetcode.com/problems/mean-of-array-after-removing-some-elements/

Given an integer array arr, return the mean of the remaining integers after removing the smallest 5% and the largest 5% of the elements.

Answers within 10-5 of the actual answer will be considered accepted.

 

Example 1:

Input: arr = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3]
Output: 2.00000
Explanation: After erasing the minimum and the maximum values of this array, all elements are equal to 2, so the mean is 2.
Example 2:

Input: arr = [6,2,7,5,1,2,0,3,10,2,5,0,5,5,0,8,7,6,8,0]
Output: 4.00000
Example 3:

Input: arr = [6,0,7,0,7,5,7,8,3,4,0,7,8,1,6,8,1,1,2,4,8,1,9,5,4,3,8,5,10,8,6,6,1,0,6,10,8,2,3,4]
Output: 4.77778
 

Constraints:

20 <= arr.length <= 1000
arr.length is a multiple of 20.
0 <= arr[i] <= 105

class Solution
{
public:
    double trimMean(vector<int> &arr)
    {
        int remove = 0.05 * arr.size();
        sort(arr.begin(), arr.end());
        arr.erase(arr.begin(), arr.begin() + remove);
        arr.erase(arr.end() - remove, arr.end());
        double sum = 0;
        for(int i = 0; i < arr.size(); i++)
        {
            sum += arr[i];
        }
        return (sum / arr.size());
    }
};


// Source https://leetcode.com/problems/coordinate-with-maximum-network-quality/

You are given an array of network towers towers, where towers[i] = [xi, yi, qi] denotes the ith network tower with location (xi, yi) and quality factor qi. 
All the coordinates are integral coordinates on the X-Y plane, and the distance between the two coordinates is the Euclidean distance.

You are also given an integer radius where a tower is reachable if the distance is less than or equal to radius. Outside that distance, the signal becomes garbled, and the tower is not reachable.

The signal quality of the ith tower at a coordinate (x, y) is calculated with the formula ⌊qi / (1 + d)⌋, where d is the distance between the tower and the coordinate. 
The network quality at a coordinate is the sum of the signal qualities from all the reachable towers.

Return the array [cx, cy] representing the integral coordinate (cx, cy) where the network quality is maximum. 
If there are multiple coordinates with the same network quality, return the lexicographically minimum non-negative coordinate.

Note:

A coordinate (x1, y1) is lexicographically smaller than (x2, y2) if either:
x1 < x2, or
x1 == x2 and y1 < y2.
⌊val⌋ is the greatest integer less than or equal to val (the floor function).
 

Example 1:


Input: towers = [[1,2,5],[2,1,7],[3,1,9]], radius = 2
Output: [2,1]
Explanation: At coordinate (2, 1) the total quality is 13.
- Quality of 7 from (2, 1) results in ⌊7 / (1 + sqrt(0)⌋ = ⌊7⌋ = 7
- Quality of 5 from (1, 2) results in ⌊5 / (1 + sqrt(2)⌋ = ⌊2.07⌋ = 2
- Quality of 9 from (3, 1) results in ⌊9 / (1 + sqrt(1)⌋ = ⌊4.5⌋ = 4
No other coordinate has a higher network quality.
Example 2:

Input: towers = [[23,11,21]], radius = 9
Output: [23,11]
Explanation: Since there is only one tower, the network quality is highest right at the tower's location.
Example 3:

Input: towers = [[1,2,13],[2,1,7],[0,1,9]], radius = 2
Output: [1,2]
Explanation: Coordinate (1, 2) has the highest network quality.
 

Constraints:

1 <= towers.length <= 50
towers[i].length == 3
0 <= xi, yi, qi <= 50
1 <= radius <= 50

class Solution
{
public:
    vector<int> v{0, 0};
    double ans = 0;

    double dist(int x1, int y1, int x2, int y2)
    {
        return sqrt( (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) );
    }

    vector<int> bestCoordinate(vector<vector<int>> &towers, int radius)
    {
        queue<pair<int, int>> q;

        for(int i = 0; i < towers.size(); i++)
        {
            q.push({towers[i][0], towers[i][1]});
        }

        while(!q.empty())
        {
            pair<int, int> p = q.front();
            q.pop();

            double temp = 0;

            for(int i = 0; i < towers.size(); i++)
            {
                if(dist(towers[i][0], towers[i][1], p.first, p.second) > radius)
                    continue;

                temp += floor(towers[i][2] / (1 + dist(towers[i][0], towers[i][1], p.first, p.second)));
            }

            if(temp > ans)
            {
                ans = temp;
                v = {p.first, p.second};

                q.push({p.first - 1, p.second - 1});
                q.push({p.first - 1, p.second + 1});
                q.push({p.first - 1, p.second});
                q.push({p.first + 1, p.second - 1});
                q.push({p.first + 1, p.second + 1});
                q.push({p.first + 1, p.second});
                q.push({p.first, p.second - 1});
                q.push({p.first, p.second + 1});
            }
            else if(temp == ans)
            {
                if(v[0] > p.first || (v[0] == p.first and v[1] > p.second))
                {
                    v = {p.first, p.second};
                    q.push({p.first - 1, p.second - 1});
                    q.push({p.first - 1, p.second + 1});
                    q.push({p.first - 1, p.second});
                    q.push({p.first + 1, p.second - 1});
                    q.push({p.first + 1, p.second + 1});
                    q.push({p.first + 1, p.second});
                    q.push({p.first, p.second - 1});
                    q.push({p.first, p.second + 1});
                }
            }
        }
        return v;
    }
};


// Source https://leetcode.com/problems/number-of-sets-of-k-non-overlapping-line-segments/

Given n points on a 1-D plane, where the ith point (from 0 to n-1) is at x = i, find the number of ways we can draw exactly k non-overlapping line segments 
such that each segment covers two or more points. The endpoints of each segment must have integral coordinates. 
The k line segments do not have to cover all n points, and they are allowed to share endpoints.

Return the number of ways we can draw k non-overlapping line segments. Since this number can be huge, return it modulo 109 + 7.

 

Example 1:


Input: n = 4, k = 2
Output: 5
Explanation: The two line segments are shown in red and blue.
The image above shows the 5 different ways {(0,2),(2,3)}, {(0,1),(1,3)}, {(0,1),(2,3)}, {(1,2),(2,3)}, {(0,1),(1,2)}.

0	1	2	3	4

C(5, 4)

Example 2:

Input: n = 3, k = 1
Output: 3
Explanation: The 3 ways are {(0,1)}, {(0,2)}, {(1,2)}.
Example 3:

Input: n = 30, k = 7
Output: 796297179
Explanation: The total number of possible ways to draw 7 line segments is 3796297200. Taking this number modulo 109 + 7 gives us 796297179.
 

Constraints:

2 <= n <= 1000
1 <= k <= n-1

// We need k segments.
// Every segment needs two points.
// We have total n points.
// Problem statement says, end points can be shared. Let's modify it.
// Seprate every shared end point, in order to do so, you'll have to add one point while seprating any pair of segments.
/// Hence, total number of point become n+k-1.
// Now, problem statement is pretty simple, count combination of 2k points from n+k-1 available points.

// Therefore, final solution is: C(n+k-1, 2k)

n + k - 1 -2k = n -k -1

C(n+k-1, 2k) = (n + k - 1) * ... * (n - k) / 2k * ... * 1

class Solution
{
public:
    unordered_map<int, vector<int>> factorMap;
    const int mod = 1000000007;

    vector<int> getFactors(int n)
    {
        vector<int> res;
        for (int i = 2; i * i <= n; ++i)
        {
            if (n % i != 0) continue;
            vector<int> v = getFactors(n / i);
            res = std::move(v);
            res.insert(res.begin(), i);
            return res;
        }
        res.push_back(n);
        return res;
    }

    vector<int> getFactorsFromMap(int n)
    {
        if (factorMap.count(n)) return factorMap[n];
        vector<int> res = getFactors(n);
        factorMap[n] = res;
        return res;
    }

    int numberOfSets(int n, int k)
    {
        map<int, int> aMap;
        map<int, int> bMap;

        for (int i = (n - k); i <= (n + k - 1); ++i)
        {
            auto vec = getFactorsFromMap(i);
            for (int t : vec)
            {
                aMap[t]++;
            }
        }

        for (int i = 1; i <= (2*k); ++i)
        {
            auto vec = getFactorsFromMap(i);
            for (int t : vec)
            {
                bMap[t]++;
            }
        }

        for (auto &p : bMap)
        {
            int val = aMap[p.first];
            if (val >= p.second)
            {
                aMap[p.first] = val - p.second;
            }
        }
        long res = 1;
        for (auto &p : aMap)
        {
            int cnt = p.second;
            while (cnt-- > 0)
            {
                res = (res * p.first) % mod;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/fancy-sequence/

Write an API that generates fancy sequences using the append, addAll, and multAll operations.

Implement the Fancy class:

Fancy() Initializes the object with an empty sequence.
void append(val) Appends an integer val to the end of the sequence.
void addAll(inc) Increments all existing values in the sequence by an integer inc.
void multAll(m) Multiplies all existing values in the sequence by an integer m.
int getIndex(idx) Gets the current value at index idx (0-indexed) of the sequence modulo 109 + 7. If the index is greater or equal than the length of the sequence, return -1.
 

Example 1:

Input
["Fancy", "append", "addAll", "append", "multAll", "getIndex", "addAll", "append", "multAll", "getIndex", "getIndex", "getIndex"]
[[], [2], [3], [7], [2], [0], [3], [10], [2], [0], [1], [2]]
Output
[null, null, null, null, null, 10, null, null, null, 26, 34, 20]

Explanation
Fancy fancy = new Fancy();
fancy.append(2);   // fancy sequence: [2]
fancy.addAll(3);   // fancy sequence: [2+3] -> [5]
fancy.append(7);   // fancy sequence: [5, 7]
fancy.multAll(2);  // fancy sequence: [5*2, 7*2] -> [10, 14]
fancy.getIndex(0); // return 10
fancy.addAll(3);   // fancy sequence: [10+3, 14+3] -> [13, 17]
fancy.append(10);  // fancy sequence: [13, 17, 10]
fancy.multAll(2);  // fancy sequence: [13*2, 17*2, 10*2] -> [26, 34, 20]
fancy.getIndex(0); // return 26
fancy.getIndex(1); // return 34
fancy.getIndex(2); // return 20
 

Constraints:

1 <= val, inc, m <= 100
0 <= idx <= 105
At most 105 calls total will be made to append, addAll, multAll, and getIndex.

If we know the accumulated operation before idx is added is (a, b), and current accumulated operation is (c, d),

假设在idx加入序列之后，先乘以x1，再加y1，再乘以x2，再加y2
(vals[idx] * x1 + y1) * x2 + y2 = vals[idx] * x1 * x2 + y1 * x2 + y2 = vals[idx] * x + y
x = x1 * x2
y = y1 * x2 + y2

(a, b) * x1 => (a * x1, b * x1)
(a * x1, b * x1) + y1 => (a * x1, b * x1 + y1)
(a * x1, b * x1 + y1) * x2 => (a * x1 * x2, b * x1 * x2 + y1 * x2)
(a * x1 * x2, b * x1 * x2 + y1 * x2) + y2 => (a * x1 * x2, b * x1 * x2 + y1 * x2 + y2) = (c, d)
a * x1 * x2 = c
a * x  = c   => x = (c * inverse(a))
b * x1 * x2 + y1 * x2 + y2 = d
b * x + y = d => y = d - b * x;

费马小定理(Fermat's little theorem)是数论中的一个重要定理，在1636年提出。
如果p是一个质数，而整数a不是p的倍数（也就是a和p的最大公约数为1），则有a^(p-1) ≡ 1 (mod p)。
a * a^(p-2) ≡ 1 (mod p) -> a的乘法逆元是a^(p-2)  (mod p)

class Fancy
{
public:
    vector<pair<int, int>> ops; // accumulated operation history
    vector<int> prevop; // record previous accumulated ops size
    vector<int> vals;
    int last_op_at = 0;
    const int mod = 1e9 + 7;

    Fancy()
    {
    }

    void append(int val)
    {
        vals.push_back(val);
        prevop.push_back(ops.size());
    }

    void addAll(int inc)
    {
        if(vals.empty()) return;
        if(last_op_at != vals.size())
        {
            ops.push_back(ops.empty() ? make_pair(1, 0) : ops.back());
            last_op_at = vals.size();
        }
        ops.back().second = (1ll * inc + ops.back().second) % mod;
    }

    void multAll(int x)
    {
        if(vals.empty()) return;
        if(last_op_at != vals.size())
        {
            ops.push_back(ops.empty() ? make_pair(1, 0) : ops.back());
            last_op_at = vals.size();
        }
        ops.back().first = (1ll * x * ops.back().first) % mod;
        ops.back().second = (1ll * x * ops.back().second) % mod;
    }

    int power(int a, int b)
    {
        if(b <= 0) return 1;
        if(b == 1) return a;

        long x = power(a, b / 2);
        x = (x * x) % mod;

        if(b & 1) return (a * x) % mod;
        return x;
    }

    int inverse(int x)
    {
        return power(x, mod - 2);
    }

    int getIndex(int idx)
    {
        int res;

        if(idx >= vals.size()) return -1;
        else if(last_op_at <= idx) return vals[idx];
        else if(prevop[idx] == 0)
        {
            res = (1ll * ops.back().first * vals[idx] + ops.back().second) % mod;
        }
        else
        {
            pair<int, int> p1 = ops[prevop[idx] - 1];
            pair<int, int> p2 = ops.back();
            int xx = (1ll * p2.first * inverse(p1.first)) % mod;
            int yy = (1ll * p2.second - 1ll * xx * p1.second) % mod;
            res = (1ll * xx * vals[idx] + yy) % mod;
        }

        if(res < 0) res += mod;
        return res ;
    }
};


// Source https://leetcode.com/problems/largest-substring-between-two-equal-characters/

Given a string s, return the length of the longest substring between two equal characters, excluding the two characters. If there is no such substring return -1.

A substring is a contiguous sequence of characters within a string.

 

Example 1:

Input: s = "aa"
Output: 0
Explanation: The optimal substring here is an empty substring between the two 'a's.
Example 2:

Input: s = "abca"
Output: 2
Explanation: The optimal substring here is "bc".
Example 3:

Input: s = "cbzxy"
Output: -1
Explanation: There are no characters that appear twice in s.
 

Constraints:

1 <= s.length <= 300
s contains only lowercase English letters.

class Solution
{
public:
    int maxLengthBetweenEqualCharacters(string s)
    {
        int ans = -1;
        vector<int>dict(26, -1);
        for(int i = 0; i < s.size(); ++i)
        {
            if(dict[s[i] - 'a'] != -1)
            {
                ans = max(ans, i - dict[s[i] - 'a'] - 1);
            }
            else
            {
                dict[s[i] - 'a'] = i;
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/lexicographically-smallest-string-after-applying-operations/

You are given a string s of even length consisting of digits from 0 to 9, and two integers a and b.

You can apply either of the following two operations any number of times and in any order on s:

Add a to all odd indices of s (0-indexed). Digits post 9 are cycled back to 0. For example, if s = "3456" and a = 5, s becomes "3951".
Rotate s to the right by b positions. For example, if s = "3456" and b = 1, s becomes "6345".
Return the lexicographically smallest string you can obtain by applying the above operations any number of times on s.

A string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, 
string a has a letter that appears earlier in the alphabet than the corresponding letter in b. 
For example, "0158" is lexicographically smaller than "0190" because the first position they differ is at the third letter, and '5' comes before '9'.

 

Example 1:

Input: s = "5525", a = 9, b = 2
Output: "2050"
Explanation: We can apply the following operations:
Start:  "5525"
Rotate: "2555"
Add:    "2454"
Add:    "2353"
Rotate: "5323"
Add:    "5222"
Add:    "5121"
Rotate: "2151"
​​​​​​​Add:    "2050"​​​​​​​​​​​​
There is no way to obtain a string that is lexicographically smaller then "2050".
Example 2:

Input: s = "74", a = 5, b = 1
Output: "24"
Explanation: We can apply the following operations:
Start:  "74"
Rotate: "47"
​​​​​​​Add:    "42"
​​​​​​​Rotate: "24"​​​​​​​​​​​​
There is no way to obtain a string that is lexicographically smaller then "24".
Example 3:

Input: s = "0011", a = 4, b = 2
Output: "0011"
Explanation: There are no sequence of operations that will give us a lexicographically smaller string than "0011".
 

Constraints:

2 <= s.length <= 100
s.length is even.
s consists of digits from 0 to 9 only.
1 <= a <= 9
1 <= b <= s.length - 1

class Solution
{
public:
    string findLexSmallestString(string s, int a, int b)
    {
        int n = s.size();
        string res = s;
        queue<string>q;
        q.push(s);
        unordered_set<string>vis;
        vis.insert(s);
        while(!q.empty())
        {
            s = q.front();
            q.pop();
            if(s < res)
                res = s;
            //operation 1;
            string x = s;
            for(int i = 0; i < n; i++)
            {
                if(i % 2)
                {
                    int c = ((s[i] - '0') + a) % 10;
                    x[i] = (c + '0');
                }
            }
            if(vis.find(x) == vis.end())
            {
                vis.insert(x);
                q.push(x);
            }
            //operation 2;
            x = s.substr(n - b, b);
            for(int i = 0; i < n - b; i++)
                x += s[i];
            if(vis.find(x) == vis.end())
            {
                vis.insert(x);
                q.push(x);
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/best-team-with-no-conflicts/

You are the manager of a basketball team. For the upcoming tournament, you want to choose the team with the highest overall score. 
The score of the team is the sum of scores of all the players in the team.

However, the basketball team is not allowed to have conflicts. A conflict exists if a younger player has a strictly higher score than an older player. 
A conflict does not occur between players of the same age.

Given two lists, scores and ages, where each scores[i] and ages[i] represents the score and age of the ith player, respectively, return the highest overall score of all possible basketball teams.

 

Example 1:

Input: scores = [1,3,5,10,15], ages = [1,2,3,4,5]
Output: 34
Explanation: You can choose all the players.
Example 2:

Input: scores = [4,5,6,5], ages = [2,1,2,1]
Output: 16
Explanation: It is best to choose the last 3 players. Notice that you are allowed to choose multiple people of the same age.
Example 3:

Input: scores = [1,2,3,5], ages = [8,9,10,1]
Output: 6
Explanation: It is best to choose the first 3 players. 
 

Constraints:

1 <= scores.length, ages.length <= 1000
scores.length == ages.length
1 <= scores[i] <= 106
1 <= ages[i] <= 1000

class Solution
{
public:
    int bestTeamScore(vector<int> &scores, vector<int> &ages)
    {
        vector<pair<int, int>> v;
        int n = scores.size();
        for(int i = 0; i < n; i++)
        {
            v.push_back({ages[i], scores[i]});
        }
        sort(v.begin(), v.end());
        vector<int> dp(n);
        dp[0] = v[0].second;
        for(int i = 1; i < n; i++)
        {
            dp[i] = v[i].second;
            for(int j = 0; j < i; j++)
            {
                if(v[j].second <= v[i].second)
                {
                    dp[i] = max(dp[i], v[i].second + dp[j]);
                }
            }
        }
        return *max_element(dp.begin(), dp.end());
    }
};


// Source https://leetcode.com/problems/graph-connectivity-with-threshold/

We have n cities labeled from 1 to n. Two different cities with labels x and y are directly connected by a bidirectional road 
if and only if x and y share a common divisor strictly greater than some threshold. 
More formally, cities with labels x and y have a road between them if there exists an integer z such that all of the following are true:

x % z == 0,
y % z == 0, and
z > threshold.
Given the two integers, n and threshold, and an array of queries, you must determine for each queries[i] = [ai, bi] if cities ai and bi are connected directly or indirectly. 
(i.e. there is some path between them).

Return an array answer, where answer.length == queries.length and answer[i] is true if for the ith query, there is a path between ai and bi, or answer[i] is false if there is no path.

 

Example 1:


Input: n = 6, threshold = 2, queries = [[1,4],[2,5],[3,6]]
Output: [false,false,true]
Explanation: The divisors for each number:
1:   1
2:   1, 2
3:   1, 3
4:   1, 2, 4
5:   1, 5
6:   1, 2, 3, 6
Using the underlined divisors above the threshold, only cities 3 and 6 share a common divisor, so they are the
only ones directly connected. The result of each query:
[1,4]   1 is not connected to 4
[2,5]   2 is not connected to 5
[3,6]   3 is connected to 6 through path 3--6
Example 2:


Input: n = 6, threshold = 0, queries = [[4,5],[3,4],[3,2],[2,6],[1,3]]
Output: [true,true,true,true,true]
Explanation: The divisors for each number are the same as the previous example. However, since the threshold is 0,
all divisors can be used. Since all numbers share 1 as a divisor, all cities are connected.
Example 3:


Input: n = 5, threshold = 1, queries = [[4,5],[4,5],[3,2],[2,3],[3,4]]
Output: [false,false,false,false,false]
Explanation: Only cities 2 and 4 share a common divisor 2 which is strictly greater than the threshold 1, so they are the only ones directly connected.
Please notice that there can be multiple queries for the same pair of nodes [x, y], and that the query [x, y] is equivalent to the query [y, x].
 

Constraints:

2 <= n <= 104
0 <= threshold <= n
1 <= queries.length <= 105
queries[i].length == 2
1 <= ai, bi <= cities
ai != bi

class Solution
{
public:

    struct DSU
    {
        vector<int> parent;
        vector<int> size;

        DSU(int n)
        {
            parent = vector<int>(n);
            size = vector<int>(n, 1);
            for(int i = 0; i < n; i++)
            {
                parent[i] = i;
            }
        }

        int find(int x)
        {
            if(parent[x] != x) parent[x] = find(parent[x]);
            return parent[x];
        }

        bool join(int a, int b)
        {
            int root_a = find(a);
            int root_b = find(b);
            if (root_a == root_b) return false;
            if (size[root_a] > size[root_b])
            {
                parent[root_b] = root_a;
                size[root_a] += size[root_b];
            }
            else
            {
                parent[root_a] = root_b;
                size[root_b] += size[root_a];
            }
            return true;
        }

        int count(int x)
        {
            return size[x];
        }
    };

    vector<bool> areConnected(int n, int threshold, vector<vector<int>> &queries)
    {
        DSU dsu(n + 1);
        for(int i = 1; i <= n; ++i)
        {
            for(int j = 1; j * j <= i; ++j)
            {
                if(i % j == 0)
                {
                    if(j > threshold) dsu.join(i, j);
                    if((i / j) > threshold) dsu.join(i, i / j);
                }
            }
        }
        vector<bool> ans;
        ans.reserve(n);
        for(int i = 0; i < queries.size(); ++i)
        {
            if(dsu.find(queries[i][0]) == dsu.find(queries[i][1])) ans.push_back(true);
            else ans.push_back(false);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/slowest-key/

A newly designed keypad was tested, where a tester pressed a sequence of n keys, one at a time.

You are given a string keysPressed of length n, where keysPressed[i] was the ith key pressed in the testing sequence, and a sorted list releaseTimes, 
where releaseTimes[i] was the time the ith key was released. Both arrays are 0-indexed. 
The 0th key was pressed at the time 0, and every subsequent key was pressed at the exact time the previous key was released.

The tester wants to know the key of the keypress that had the longest duration. The ith keypress had a duration of releaseTimes[i] - releaseTimes[i - 1], 
and the 0th keypress had a duration of releaseTimes[0].

Note that the same key could have been pressed multiple times during the test, and these multiple presses of the same key may not have had the same duration.

Return the key of the keypress that had the longest duration. If there are multiple such keypresses, return the lexicographically largest key of the keypresses.

 

Example 1:

Input: releaseTimes = [9,29,49,50], keysPressed = "cbcd"
Output: "c"
Explanation: The keypresses were as follows:
Keypress for 'c' had a duration of 9 (pressed at time 0 and released at time 9).
Keypress for 'b' had a duration of 29 - 9 = 20 (pressed at time 9 right after the release of the previous character and released at time 29).
Keypress for 'c' had a duration of 49 - 29 = 20 (pressed at time 29 right after the release of the previous character and released at time 49).
Keypress for 'd' had a duration of 50 - 49 = 1 (pressed at time 49 right after the release of the previous character and released at time 50).
The longest of these was the keypress for 'b' and the second keypress for 'c', both with duration 20.
'c' is lexicographically larger than 'b', so the answer is 'c'.
Example 2:

Input: releaseTimes = [12,23,36,46,62], keysPressed = "spuda"
Output: "a"
Explanation: The keypresses were as follows:
Keypress for 's' had a duration of 12.
Keypress for 'p' had a duration of 23 - 12 = 11.
Keypress for 'u' had a duration of 36 - 23 = 13.
Keypress for 'd' had a duration of 46 - 36 = 10.
Keypress for 'a' had a duration of 62 - 46 = 16.
The longest of these was the keypress for 'a' with duration 16.
 

Constraints:

releaseTimes.length == n
keysPressed.length == n
2 <= n <= 1000
1 <= releaseTimes[i] <= 109
releaseTimes[i] < releaseTimes[i+1]
keysPressed contains only lowercase English letters.

class Solution
{
public:
    char slowestKey(vector<int> &releaseTimes, string keysPressed)
    {
        int maxDuration = releaseTimes[0];
        char letter = keysPressed[0];
        int n = keysPressed.size();
        for (int i = 1; i < n; ++i)
        {
            if ((releaseTimes[i] - releaseTimes[i - 1]) < maxDuration) continue;
            if ((releaseTimes[i] - releaseTimes[i - 1]) == maxDuration)
            {
                if ((keysPressed[i] - 'a') > (letter - 'a')) letter = keysPressed[i];
            }
            else
            {
                letter = keysPressed[i];
                maxDuration = (releaseTimes[i] - releaseTimes[i - 1]);
            }
        }
        return letter;
    }
};


// Source https://leetcode.com/problems/arithmetic-subarrays/

A sequence of numbers is called arithmetic if it consists of at least two elements, and the difference between every two consecutive elements is the same. 
More formally, a sequence s is arithmetic if and only if s[i+1] - s[i] == s[1] - s[0] for all valid i.

For example, these are arithmetic sequences:

1, 3, 5, 7, 9
7, 7, 7, 7
3, -1, -5, -9
The following sequence is not arithmetic:

1, 1, 2, 5, 7
You are given an array of n integers, nums, and two arrays of m integers each, l and r, representing the m range queries, where the ith query is the range [l[i], r[i]]. All the arrays are 0-indexed.

Return a list of boolean elements answer, where answer[i] is true if the subarray nums[l[i]], nums[l[i]+1], ... , nums[r[i]] can be rearranged to form an arithmetic sequence, and false otherwise.

 

Example 1:

Input: nums = [4,6,5,9,3,7], l = [0,0,2], r = [2,3,5]
Output: [true,false,true]
Explanation:
In the 0th query, the subarray is [4,6,5]. This can be rearranged as [6,5,4], which is an arithmetic sequence.
In the 1st query, the subarray is [4,6,5,9]. This cannot be rearranged as an arithmetic sequence.
In the 2nd query, the subarray is [5,9,3,7]. This can be rearranged as [3,5,7,9], which is an arithmetic sequence.
Example 2:

Input: nums = [-12,-9,-3,-12,-6,15,20,-25,-20,-15,-10], l = [0,1,6,4,8,7], r = [4,4,9,7,9,10]
Output: [false,true,false,false,true,true]
 

Constraints:

n == nums.length
m == l.length
m == r.length
2 <= n <= 500
1 <= m <= 500
0 <= l[i] < r[i] < n
-105 <= nums[i] <= 105

class Solution
{
public:
    vector<bool> checkArithmeticSubarrays(vector<int> &nums, vector<int> &l, vector<int> &r)
    {
        int m = l.size();
        vector<bool> ans;
        ans.reserve(m);
        for (int i = 0; i < m; ++i)
        {
            int len = r[i] - l[i] + 1;
            int min_val = INT_MAX;
            int max_val = INT_MIN;
            for (int j = l[i]; j <= r[i]; ++j)
            {
                min_val = min(min_val, nums[j]);
                max_val = max(max_val, nums[j]);
            }
            if ((max_val - min_val) % (len - 1))
            {
                ans.push_back(false);
                continue;
            }
            int d = (max_val - min_val) / (len - 1);
            if (d == 0)
            {
                ans.push_back(true);
                continue;
            }
            unordered_set st(nums.begin() + l[i], nums.begin() + r[i] + 1);
            if (st.size() != len)
            {
                ans.push_back(false);
            }
            else
            {
                bool ok = true;
                for (int j = 0; j < len; ++j)
                {
                    if (st.count(min_val + j * d) == 0)
                    {
                        ok = false;
                        break;
                    }
                }
                ans.push_back(ok);
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/path-with-minimum-effort/

You are a hiker preparing for an upcoming hike. You are given heights, a 2D array of size rows x columns, where heights[row][col] represents the height of cell (row, col). 
You are situated in the top-left cell, (0, 0), and you hope to travel to the bottom-right cell, (rows-1, columns-1) (i.e., 0-indexed). 
You can move up, down, left, or right, and you wish to find a route that requires the minimum effort.

A route's effort is the maximum absolute difference in heights between two consecutive cells of the route.

Return the minimum effort required to travel from the top-left cell to the bottom-right cell.

 

Example 1:



Input: heights = [[1,2,2],[3,8,2],[5,3,5]]
Output: 2
Explanation: The route of [1,3,5,3,5] has a maximum absolute difference of 2 in consecutive cells.
This is better than the route of [1,2,2,2,5], where the maximum absolute difference is 3.
Example 2:



Input: heights = [[1,2,3],[3,8,4],[5,3,5]]
Output: 1
Explanation: The route of [1,2,3,4,5] has a maximum absolute difference of 1 in consecutive cells, which is better than route [1,3,5,3,5].
Example 3:


Input: heights = [[1,2,1,1,1],[1,2,1,2,1],[1,2,1,2,1],[1,2,1,2,1],[1,1,1,2,1]]
Output: 0
Explanation: This route does not require any effort.
 

Constraints:

rows == heights.length
columns == heights[i].length
1 <= rows, columns <= 100
1 <= heights[i][j] <= 106

class Solution
{
public:
    int dx[4] = {-1, 0, 1, 0};
    int dy[4] = {0, 1, 0, -1};

    int minimumEffortPath(vector<vector<int>> &heights)
    {
        int m = heights.size(), n = heights[0].size();
        priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, greater<pair<int, pair<int, int>>>> pq;
        vector<vector<int>> eff(m, vector<int>(n, 1e9));
        eff[0][0] = 0;
        pq.push({eff[0][0], {0, 0}});
        while(!pq.empty())
        {
            auto p = pq.top();
            int effort = p.first;
            int x = p.second.first;
            int y = p.second.second;
            pq.pop();
            if(x == m - 1 && y == n - 1) return effort;
            for(int k = 0; k < 4; k++)
            {
                int i = x + dx[k];
                int j = y + dy[k];
                if(i >= 0 && i < m && j >= 0 && j < n)
                {
                    int val = max(effort, abs(heights[i][j] - heights[x][y]));
                    if(val < eff[i][j])
                    {
                        eff[i][j] = val;
                        pq.push({val, {i, j}});
                    }
                }
            }
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/rank-transform-of-a-matrix/

Given an m x n matrix, return a new matrix answer where answer[row][col] is the rank of matrix[row][col].

The rank is an integer that represents how large an element is compared to other elements. It is calculated using the following rules:

The rank is an integer starting from 1.
If two elements p and q are in the same row or column, then:
If p < q then rank(p) < rank(q)
If p == q then rank(p) == rank(q)
If p > q then rank(p) > rank(q)
The rank should be as small as possible.
The test cases are generated so that answer is unique under the given rules.

 

Example 1:


Input: matrix = [[1,2],[3,4]]
Output: [[1,2],[2,3]]
Explanation:
The rank of matrix[0][0] is 1 because it is the smallest integer in its row and column.
The rank of matrix[0][1] is 2 because matrix[0][1] > matrix[0][0] and matrix[0][0] is rank 1.
The rank of matrix[1][0] is 2 because matrix[1][0] > matrix[0][0] and matrix[0][0] is rank 1.
The rank of matrix[1][1] is 3 because matrix[1][1] > matrix[0][1], matrix[1][1] > matrix[1][0], and both matrix[0][1] and matrix[1][0] are rank 2.
Example 2:


Input: matrix = [[7,7],[7,7]]
Output: [[1,1],[1,1]]
Example 3:


Input: matrix = [[20,-21,14],[-19,4,19],[22,-47,24],[-19,4,19]]
Output: [[4,2,3],[1,3,4],[5,1,6],[1,3,4]]
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 500
-109 <= matrix[row][col] <= 109

class Solution
{
public:

    struct DSU
    {
        vector<int> parent;
        vector<int> size;

        DSU(int n)
        {
            parent = vector<int>(n);
            size = vector<int>(n, 1);
            for(int i = 0; i < n; i++)
            {
                parent[i] = i;
            }
        }

        int find(int x)
        {
            if(parent[x] != x) parent[x] = find(parent[x]);
            return parent[x];
        }

        bool join(int a, int b)
        {
            int root_a = find(a);
            int root_b = find(b);
            if (root_a == root_b) return false;
            if (size[root_a] > size[root_b])
            {
                parent[root_b] = root_a;
                size[root_a] += size[root_b];
            }
            else
            {
                parent[root_a] = root_b;
                size[root_b] += size[root_a];
            }
            return true;
        }

        int count(int x)
        {
            return size[x];
        }
    };

    vector<vector<int>> matrixRankTransform(vector<vector<int>> &matrix)
    {
        int m = matrix.size(), n = matrix[0].size();
        DSU same_rank_dsu(m * n);
        vector<pair<int, int>> nums(n);
        auto cmp = [] (const pair<int, int> &lhs, const pair<int, int> &rhs)
        {
            return lhs.first < rhs.first;
        };
        vector<pair<int, int>> directed_edges;
        for (int i = 0; i < m; ++i)
        {
            for (int j = 0; j < n; ++j) nums[j] = {matrix[i][j], j};
            sort(nums.begin(), nums.end(), cmp);
            for (int j = 1; j < n; ++j)
            {
                int curr_id = i * n + nums[j - 1].second;
                int next_id = i * n + nums[j].second;
                if (nums[j].first == nums[j - 1].first)
                {
                    same_rank_dsu.join(curr_id, next_id);
                    continue;
                }
                directed_edges.push_back({curr_id, next_id});
            }
        }
        nums = vector<pair<int, int>>(m);
        for (int j = 0; j < n; ++j)
        {
            for (int i = 0; i < m; ++i) nums[i] = {matrix[i][j], i};
            sort(nums.begin(), nums.end(), cmp);
            for (int i = 1; i < m; ++i)
            {
                int curr_id = nums[i - 1].second * n + j;
                int next_id = nums[i].second * n + j;
                if (nums[i].first == nums[i - 1].first)
                {
                    same_rank_dsu.join(curr_id, next_id);
                    continue;
                }
                directed_edges.push_back({curr_id, next_id});
            }
        }
        vector<vector<int>> num2next(m * n);
        vector<int> num2indegree(m * n, 0);
        for (const auto &edge : directed_edges)
        {
            int root1 = same_rank_dsu.find(edge.first);
            int root2 = same_rank_dsu.find(edge.second);
            num2next[root1].push_back(root2);
            ++num2indegree[root2];
        }
        vector<vector<int>> root2ids(m * n);
        unordered_set<int> removed_roots;
        for (int i = 0; i < m; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                int id = i * n + j;
                int root = same_rank_dsu.find(id);
                root2ids[root].push_back(id);
                if (num2indegree[root] == 0)
                {
                    removed_roots.insert(root);
                }
            }
        }
        vector<vector<int>> ans(m, vector<int>(n));
        int rank = 1, marked = 0;
        while (marked < m * n)
        {
            unordered_set<int> new_removed_roots;
            for (int root : removed_roots)
            {
                for (int id : root2ids[root])
                {
                    ans[id / n][id % n] = rank;
                    ++marked;
                }
                for (int next_root : num2next[root])
                {
                    --num2indegree[next_root];
                    if (num2indegree[next_root] == 0) new_removed_roots.insert(next_root);
                }
            }
            ++rank;
            swap(new_removed_roots, removed_roots);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/sort-array-by-increasing-frequency/

Given an array of integers nums, sort the array in increasing order based on the frequency of the values. If multiple values have the same frequency, sort them in decreasing order.

Return the sorted array.

 

Example 1:

Input: nums = [1,1,2,2,2,3]
Output: [3,1,1,2,2,2]
Explanation: '3' has a frequency of 1, '1' has a frequency of 2, and '2' has a frequency of 3.
Example 2:

Input: nums = [2,3,1,3,2]
Output: [1,3,3,2,2]
Explanation: '2' and '3' both have a frequency of 2, so they are sorted in decreasing order.
Example 3:

Input: nums = [-1,1,-6,4,5,-6,1,4,1]
Output: [5,-1,4,4,-6,-6,1,1,1]
 

Constraints:

1 <= nums.length <= 100
-100 <= nums[i] <= 100

class Solution
{
public:
    vector<int> frequencySort(vector<int> &nums)
    {
        unordered_map<int, int>mp;
        for(auto val : nums)
        {
            mp[val]++;
        }
        vector<pair<int, int>>arr;
        for(auto p : mp)
        {
            arr.push_back(p);
        }
        sort(arr.begin(), arr.end(), [](const auto & p1, const auto & p2)
        {
            if(p1.second == p2.second)
            {
                return p1.first > p2.first;
            }
            else
            {
                return p1.second < p2.second;
            }
        });
        vector<int> ans;
        for(auto p : arr)
        {
            int cnt = p.second;
            while(cnt > 0)
            {
                ans.push_back(p.first);
                --cnt;
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/widest-vertical-area-between-two-points-containing-no-points/

Given n points on a 2D plane where points[i] = [xi, yi], Return the widest vertical area between two points such that no points are inside the area.

A vertical area is an area of fixed-width extending infinitely along the y-axis (i.e., infinite height). The widest vertical area is the one with the maximum width.

Note that points on the edge of a vertical area are not considered included in the area.

 

Example 1:

​
Input: points = [[8,7],[9,9],[7,4],[9,7]]
Output: 1
Explanation: Both the red and the blue area are optimal.
Example 2:

Input: points = [[3,1],[9,0],[1,0],[1,4],[5,3],[8,8]]
Output: 3
 

Constraints:

n == points.length
2 <= n <= 105
points[i].length == 2
0 <= xi, yi <= 109

class Solution
{
public:
    int maxWidthOfVerticalArea(vector<vector<int>> &points)
    {
        unordered_set<int> st;
        for(int i = 0 ; i < points.size(); i++)
        {
            st.insert(points[i][0]);
        }
        vector<int> vec(st.begin(), st.end());
        sort(vec.begin(), vec.end());
        int n = vec.size();
        int res = 0;
        for (int i = 1; i < n; ++i) res = max(res, vec[i] - vec[i - 1]);
        return res;
    }
};


// Source https://leetcode.com/problems/count-substrings-that-differ-by-one-character/

Given two strings s and t, find the number of ways you can choose a non-empty substring of s and replace a single character by a different character 
such that the resulting substring is a substring of t. In other words, find the number of substrings in s that differ from some substring in t by exactly one character.

For example, the underlined substrings in "computer" and "computation" only differ by the 'e'/'a', so this is a valid way.
                                                                  _________            _________
Return the number of substrings that satisfy the condition above.

A substring is a contiguous sequence of characters within a string.

 

Example 1:

Input: s = "aba", t = "baba"
Output: 6
Explanation: The following are the pairs of substrings from s and t that differ by exactly 1 character:
("aba", "baba")
("aba", "baba")
("aba", "baba")
("aba", "baba")
("aba", "baba")
("aba", "baba")
The underlined portions are the substrings that are chosen from s and t.
​​Example 2:
Input: s = "ab", t = "bb"
Output: 3
Explanation: The following are the pairs of substrings from s and t that differ by 1 character:
("ab", "bb")
("ab", "bb")
("ab", "bb")
​​​​The underlined portions are the substrings that are chosen from s and t.
 

Constraints:

1 <= s.length, t.length <= 100
s and t consist of lowercase English letters only.

class Solution
{
public:
    int countSubstrings(string s, string t)
    {
        int n = s.length();
        int m = t.length();
        int ans = 0;
        for(int i = 0 ; i < n ; ++i)
        {
            for(int j = 0 ; j < m ; j++)
            {
                int x = i, y = j;
                int diff = 0;
                while(x < n && y < m)
                {
                    if(s[x] != t[y]) diff++;
                    if(diff == 1) ans++;
                    if(diff == 2) break;
                    x++;
                    y++;
                }
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/number-of-ways-to-form-a-target-string-given-a-dictionary/

You are given a list of strings of the same length words and a string target.

Your task is to form target using the given words under the following rules:

target should be formed from left to right.
To form the ith character (0-indexed) of target, you can choose the kth character of the jth string in words if target[i] = words[j][k].
Once you use the kth character of the jth string of words, you can no longer use the xth character of any string in words where x <= k. 
In other words, all characters to the left of or at index k become unusuable for every string.
Repeat the process until you form the string target.
Notice that you can use multiple characters from the same string in words provided the conditions above are met.

Return the number of ways to form target from words. Since the answer may be too large, return it modulo 109 + 7.

 

Example 1:

Input: words = ["acca","bbbb","caca"], target = "aba"
Output: 6
Explanation: There are 6 ways to form target.
"aba" -> index 0 ("acca"), index 1 ("bbbb"), index 3 ("caca")
"aba" -> index 0 ("acca"), index 2 ("bbbb"), index 3 ("caca")
"aba" -> index 0 ("acca"), index 1 ("bbbb"), index 3 ("acca")
"aba" -> index 0 ("acca"), index 2 ("bbbb"), index 3 ("acca")
"aba" -> index 1 ("caca"), index 2 ("bbbb"), index 3 ("acca")
"aba" -> index 1 ("caca"), index 2 ("bbbb"), index 3 ("caca")
Example 2:

Input: words = ["abba","baab"], target = "bab"
Output: 4
Explanation: There are 4 ways to form target.
"bab" -> index 0 ("baab"), index 1 ("baab"), index 2 ("abba")
"bab" -> index 0 ("baab"), index 1 ("baab"), index 3 ("baab")
"bab" -> index 0 ("baab"), index 2 ("baab"), index 3 ("baab")
"bab" -> index 1 ("abba"), index 2 ("baab"), index 3 ("baab")
 

Constraints:

1 <= words.length <= 1000
1 <= words[i].length <= 1000
All strings in words have the same length.
1 <= target.length <= 1000
words[i] and target contain only lowercase English letters.

class Solution
{
public:
    int n, m;
    int v[1001][26];
    int dp[1001][1001];
    const int mod = 1e9 + 7;

    int recur(int i, int k, string &t)
    {
        if(i >= m) return 1;
        if(k >= n) return 0;
        if(dp[i][k] != -1) return dp[i][k];
        int res = 0;
        long cnt = v[k][t[i] - 'a'];
        if (cnt > 0) res = (res + cnt * recur(i + 1, k + 1, t)) % mod;
        res = (res + recur(i, k + 1, t)) % mod;
        return dp[i][k] = res;
    }

    int numWays(vector<string> &words, string target)
    {
        memset(dp, -1, sizeof(dp));
        memset(v, 0, sizeof(v));
        n = words[0].size();
        m = target.size();
        for(auto &w : words)
        {
            for(int i = 0; i < n; i++)
            {
                v[i][w[i] - 'a']++;
            }
        }
        return recur(0, 0, target);
    }
};


// Source https://leetcode.com/problems/check-array-formation-through-concatenation/

You are given an array of distinct integers arr and an array of integer arrays pieces, where the integers in pieces are distinct. 
Your goal is to form arr by concatenating the arrays in pieces in any order. However, you are not allowed to reorder the integers in each array pieces[i].

Return true if it is possible to form the array arr from pieces. Otherwise, return false.

 

Example 1:

Input: arr = [15,88], pieces = [[88],[15]]
Output: true
Explanation: Concatenate [15] then [88]
Example 2:

Input: arr = [49,18,16], pieces = [[16,18,49]]
Output: false
Explanation: Even though the numbers match, we cannot reorder pieces[0].
Example 3:

Input: arr = [91,4,64,78], pieces = [[78],[4,64],[91]]
Output: true
Explanation: Concatenate [91] then [4,64] then [78]
 

Constraints:

1 <= pieces.length <= arr.length <= 100
sum(pieces[i].length) == arr.length
1 <= pieces[i].length <= arr.length
1 <= arr[i], pieces[i][j] <= 100
The integers in arr are distinct.
The integers in pieces are distinct (i.e., If we flatten pieces in a 1D array, all the integers in this array are distinct).

class Solution
{
public:
    bool canFormArray(vector<int> &arr, vector<vector<int>> &pieces)
    {
        unordered_map<int, int> mp;
        for (int i = 0; i < arr.size(); i++)
        {
            mp[arr[i]] = i;
        }
        int n = arr.size();
        for (int i = 0; i < pieces.size(); i++)
        {
            auto itr = mp.find(pieces[i][0]);
            if (itr == mp.end()) return false;
            int idx = itr->second;
            int m = pieces[i].size();
            if (idx > (n - m))  return false;
            for (int j = 0; j < m; j++)
            {
                if (arr[idx + j] != pieces[i][j]) return false;
            }
        }
        return true;
    }
};


// Source https://leetcode.com/problems/count-sorted-vowel-strings/

Given an integer n, return the number of strings of length n that consist only of vowels (a, e, i, o, u) and are lexicographically sorted.

A string s is lexicographically sorted if for all valid i, s[i] is the same as or comes before s[i+1] in the alphabet.

 

Example 1:

Input: n = 1
Output: 5
Explanation: The 5 sorted strings that consist of vowels only are ["a","e","i","o","u"].
Example 2:

Input: n = 2
Output: 15
Explanation: The 15 sorted strings that consist of vowels only are
["aa","ae","ai","ao","au","ee","ei","eo","eu","ii","io","iu","oo","ou","uu"].
Note that "ea" is not a valid string since 'e' comes after 'a' in the alphabet.
Example 3:

Input: n = 33
Output: 66045
 

Constraints:

1 <= n <= 50 

class Solution
{
public:
    int countVowelStrings(int n)
    {
        int a = 1, e = 1, i = 1, o = 1, u = 1;
        for(int j = 2; j <= n; j++)
        {
            e += a;
            i += e;
            o += i;
            u += o;
        }
        return a + e + i + o + u;
    }
};


// Source https://leetcode.com/problems/furthest-building-you-can-reach/

You are given an integer array heights representing the heights of buildings, some bricks, and some ladders.

You start your journey from building 0 and move to the next building by possibly using bricks or ladders.

While moving from building i to building i+1 (0-indexed),

If the current building's height is greater than or equal to the next building's height, you do not need a ladder or bricks.
If the current building's height is less than the next building's height, you can either use one ladder or (h[i+1] - h[i]) bricks.
Return the furthest building index (0-indexed) you can reach if you use the given ladders and bricks optimally.

 

Example 1:


Input: heights = [4,2,7,6,9,14,12], bricks = 5, ladders = 1
Output: 4
Explanation: Starting at building 0, you can follow these steps:
- Go to building 1 without using ladders nor bricks since 4 >= 2.
- Go to building 2 using 5 bricks. You must use either bricks or ladders because 2 < 7.
- Go to building 3 without using ladders nor bricks since 7 >= 6.
- Go to building 4 using your only ladder. You must use either bricks or ladders because 6 < 9.
It is impossible to go beyond building 4 because you do not have any more bricks or ladders.
Example 2:

Input: heights = [4,12,2,7,3,18,20,3,19], bricks = 10, ladders = 2
Output: 7
Example 3:

Input: heights = [14,3,19,3], bricks = 17, ladders = 0
Output: 3
 

Constraints:

1 <= heights.length <= 105
1 <= heights[i] <= 106
0 <= bricks <= 109
0 <= ladders <= heights.length

优先把梯子分配给diff较大的那些位置

class Solution
{
public:
    int furthestBuilding(vector<int> &heights, int bricks, int ladders)
    {
        int n = heights.size();
        vector<int> diff = {0};
        for(int i = 1; i < n; i++)
        {
            diff.push_back(max(heights[i] - heights[i - 1], 0));
        }
        priority_queue<int, vector<int>, greater<int>> pq;
        long cur_sum = 0, p_sum = 0;
        for(int i = 0; i < n; i++)
        {
            if (diff[i] == 0) continue;
            cur_sum += diff[i];
            if(ladders > 0 && pq.size() < ladders)
            {
                pq.push(diff[i]);
                p_sum += diff[i];
            }
            else
            {
                if(!pq.empty() && diff[i] > pq.top())
                {
                    p_sum -= pq.top();
                    pq.pop();
                    pq.push(diff[i]);
                    p_sum += diff[i];
                    if(cur_sum - p_sum > bricks) return i - 1;
                }
                else
                {
                    if(cur_sum - p_sum > bricks) return i - 1;
                }
            }
        }
        return n - 1;
    }
};


// Source https://leetcode.com/problems/kth-smallest-instructions/

Bob is standing at cell (0, 0), and he wants to reach destination: (row, column). He can only travel right and down. You are going to help Bob by providing instructions for him to reach destination.

The instructions are represented as a string, where each character is either:

'H', meaning move horizontally (go right), or
'V', meaning move vertically (go down).
Multiple instructions will lead Bob to destination. For example, if destination is (2, 3), both "HHHVV" and "HVHVH" are valid instructions.

However, Bob is very picky. Bob has a lucky number k, and he wants the kth lexicographically smallest instructions that will lead him to destination. k is 1-indexed.

Given an integer array destination and an integer k, return the kth lexicographically smallest instructions that will take Bob to destination.

 

Example 1:



Input: destination = [2,3], k = 1
Output: "HHHVV"
Explanation: All the instructions that reach (2, 3) in lexicographic order are as follows:
["HHHVV", "HHVHV", "HHVVH", "HVHHV", "HVHVH", "HVVHH", "VHHHV", "VHHVH", "VHVHH", "VVHHH"].
Example 2:



Input: destination = [2,3], k = 2
Output: "HHVHV"
Example 3:



Input: destination = [2,3], k = 3
Output: "HHVVH"
 

Constraints:

destination.length == 2
1 <= row, column <= 15
1 <= k <= nCr(row + column, row), where nCr(a, b) denotes a choose b​​​​​.

C(29, 15) = 6761440164390912000 / 87178291200 = 77,558,760

class Solution
{
public:
    long dp[25][50];

    long C(int a, int b)
    {
        if(a == b || a == 0) return 1;
        if(dp[a][b] > 0) return dp[a][b];
        dp[a][b] = C(a - 1, b - 1) + C(a, b - 1);
        return dp[a][b];
    }

    string kthSmallestPath(vector<int> &destination, int k)
    {
        memset(dp, 0, sizeof(dp));
        // m个V，n个H
        int m = destination[0], n = destination[1];
        string ans = "";
        while(n >0 && m > 0)
        {
            int cnt = C(m, m + n - 1);
            if(k <= cnt)
            {
                ans += "H";
                n--;
            }
            else
            {
                ans += "V";
                m--;
                k -= cnt;
            }
        }
        while (n > 0)
        {
            ans += "H";
            n--;
        }
        while (m > 0)
        {
            ans += "V";
            m--;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/get-maximum-in-generated-array/

You are given an integer n. A 0-indexed integer array nums of length n + 1 is generated in the following way:

nums[0] = 0
nums[1] = 1
nums[2 * i] = nums[i] when 2 <= 2 * i <= n
nums[2 * i + 1] = nums[i] + nums[i + 1] when 2 <= 2 * i + 1 <= n
Return the maximum integer in the array nums​​​.

 

Example 1:

Input: n = 7
Output: 3
Explanation: According to the given rules:
  nums[0] = 0
  nums[1] = 1
  nums[(1 * 2) = 2] = nums[1] = 1
  nums[(1 * 2) + 1 = 3] = nums[1] + nums[2] = 1 + 1 = 2
  nums[(2 * 2) = 4] = nums[2] = 1
  nums[(2 * 2) + 1 = 5] = nums[2] + nums[3] = 1 + 2 = 3
  nums[(3 * 2) = 6] = nums[3] = 2
  nums[(3 * 2) + 1 = 7] = nums[3] + nums[4] = 2 + 1 = 3
Hence, nums = [0,1,1,2,1,3,2,3], and the maximum is max(0,1,1,2,1,3,2,3) = 3.
Example 2:

Input: n = 2
Output: 1
Explanation: According to the given rules, nums = [0,1,1]. The maximum is max(0,1,1) = 1.
Example 3:

Input: n = 3
Output: 2
Explanation: According to the given rules, nums = [0,1,1,2]. The maximum is max(0,1,1,2) = 2.
 

Constraints:

0 <= n <= 100

class Solution
{
public:
    int getMaximumGenerated(int n)
    {
        if(n == 0 || n == 1) return n;
        int arr[n + 1];
        arr[0] = 0;
        arr[1] = 1;
        int mxVal = 1;
        for(int i = 2; i <= n; ++i)
        {
            if(i % 2 == 0)
            {
                arr[i] = arr[i / 2];
            }
            else
            {
                arr[i] = arr[i / 2] + arr[i / 2 + 1];
            }
            mxVal = max(mxVal, arr[i]);
        }
        return mxVal;
    }
};


// Source https://leetcode.com/problems/minimum-deletions-to-make-character-frequencies-unique/

A string s is called good if there are no two different characters in s that have the same frequency.

Given a string s, return the minimum number of characters you need to delete to make s good.

The frequency of a character in a string is the number of times it appears in the string. For example, in the string "aab", the frequency of 'a' is 2, while the frequency of 'b' is 1.

 

Example 1:

Input: s = "aab"
Output: 0
Explanation: s is already good.
Example 2:

Input: s = "aaabbbcc"
Output: 2
Explanation: You can delete two 'b's resulting in the good string "aaabcc".
Another way it to delete one 'b' and one 'c' resulting in the good string "aaabbc".
Example 3:

Input: s = "ceabaacb"
Output: 2
Explanation: You can delete both 'c's resulting in the good string "eabaab".
Note that we only care about characters that are still in the string at the end (i.e. frequency of 0 is ignored).
 

Constraints:

1 <= s.length <= 105
s contains only lowercase English letters.

class Solution
{
public:
    int minDeletions(string s)
    {
        int freq[26] = {0};
        for(char c : s) freq[c - 'a']++;
        priority_queue<int> pq;
        for(int i = 0 ; i < 26 ; i++)
        {
            if(freq[i] > 0) pq.push(freq[i]);
        }
        int res = 0;
        while(pq.size() > 1)
        {
            int mxFreq = pq.top();
            pq.pop();
            if(mxFreq == pq.top())
            {
                res++;
                mxFreq--;
                if(mxFreq > 0) pq.push(mxFreq);
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/sell-diminishing-valued-colored-balls/

You have an inventory of different colored balls, and there is a customer that wants orders balls of any color.

The customer weirdly values the colored balls. Each colored ball's value is the number of balls of that color you currently have in your inventory. 
For example, if you own 6 yellow balls, the customer would pay 6 for the first yellow ball. 
After the transaction, there are only 5 yellow balls left, so the next yellow ball is then valued at 5 (i.e., the value of the balls decreases as you sell more to the customer).

You are given an integer array, inventory, where inventory[i] represents the number of balls of the ith color that you initially own. 
You are also given an integer orders, which represents the total number of balls that the customer wants. You can sell the balls in any order.

Return the maximum total value that you can attain after selling orders colored balls. As the answer may be too large, return it modulo 109 + 7.

 

Example 1:


Input: inventory = [2,5], orders = 4
Output: 14
Explanation: Sell the 1st color 1 time (2) and the 2nd color 3 times (5 + 4 + 3).
The maximum total value is 2 + 5 + 4 + 3 = 14.
Example 2:

Input: inventory = [3,5], orders = 6
Output: 19
Explanation: Sell the 1st color 2 times (3 + 2) and the 2nd color 4 times (5 + 4 + 3 + 2).
The maximum total value is 3 + 2 + 5 + 4 + 3 + 2 = 19.
 

Constraints:

1 <= inventory.length <= 105
1 <= inventory[i] <= 109
1 <= orders <= min(sum(inventory[i]), 109)

Input: inventory = [2,8,4,10,6], orders = 20
Output: 110

阶段一：[10, 8, 6, 4, 2] orders = 20
最大值10，次最大值8，有1个最大值。因此1种球卖2次，利润为1 * (10 + 9) = 19。
阶段二：[8, 8, 6, 4, 2] orders = 18
最大值8，次最大值6，有2个最大值。因此2种球分别卖2次，利润为2 * (8 + 7) = 30。
阶段三：[6, 6, 6, 4, 2] orders = 14
最大值6，次最大值4，有3个最大值。因此3种球分别卖2次，利润为3 * (6 + 5) = 33。
阶段四：[4, 4, 4, 4, 2] orders = 8
最大值4， 次最大值2，有4个最大值。因此4种球分别卖2次，利润为4 * (4 + 3) = 28。
总利润为110。

// Formulas:

// 1 + 2 + ... + n = n * (n+1) / 2
// k + (k+1) + ... + n = [n * (n+1) / 2] - [(k-1) * k / 2]

class Solution
{
public:
    const long mod = 1e9 + 7;

    long summation(long n)
    {
        return (n * (n + 1) / 2);
    }

    int maxProfit(vector<int> &inventory, int orders)
    {
        long n = inventory.size(), i = 0, ans = 0;
        inventory.push_back(0);
        sort(inventory.rbegin(), inventory.rend());
        while(orders > 0 && i < n)
        {
            if(inventory[i] == inventory[i + 1])
            {
                ++i;
                continue;
            }
            long width = i + 1, h = inventory[i] - inventory[i + 1];
            long available = width * h, gain = 0;
            if(available <= orders)
            {
                orders -= available;
                gain = (width * (summation(inventory[i]) - summation(inventory[i + 1]))) % mod;
                ans = (ans + gain) % mod;
                ++i;
            }
            else
            {
                long q = orders / width, r = orders % width;
                gain = (width * (summation(inventory[i]) - summation(inventory[i] - q))) % mod;
                gain = (gain + r * (inventory[i] - q)) % mod;
                orders = 0;
                ans = (ans + gain) % mod;
                break;
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/create-sorted-array-through-instructions/

Given an integer array instructions, you are asked to create a sorted array from the elements in instructions. 
You start with an empty container nums. For each element from left to right in instructions, insert it into nums. The cost of each insertion is the minimum of the following:

The number of elements currently in nums that are strictly less than instructions[i].
The number of elements currently in nums that are strictly greater than instructions[i].
For example, if inserting element 3 into nums = [1,2,3,5], the cost of insertion is min(2, 1) (elements 1 and 2 are less than 3, element 5 is greater than 3) and nums will become [1,2,3,3,5].

Return the total cost to insert all elements from instructions into nums. Since the answer may be large, return it modulo 109 + 7

 

Example 1:

Input: instructions = [1,5,6,2]
Output: 1
Explanation: Begin with nums = [].
Insert 1 with cost min(0, 0) = 0, now nums = [1].
Insert 5 with cost min(1, 0) = 0, now nums = [1,5].
Insert 6 with cost min(2, 0) = 0, now nums = [1,5,6].
Insert 2 with cost min(1, 2) = 1, now nums = [1,2,5,6].
The total cost is 0 + 0 + 0 + 1 = 1.
Example 2:

Input: instructions = [1,2,3,6,5,4]
Output: 3
Explanation: Begin with nums = [].
Insert 1 with cost min(0, 0) = 0, now nums = [1].
Insert 2 with cost min(1, 0) = 0, now nums = [1,2].
Insert 3 with cost min(2, 0) = 0, now nums = [1,2,3].
Insert 6 with cost min(3, 0) = 0, now nums = [1,2,3,6].
Insert 5 with cost min(3, 1) = 1, now nums = [1,2,3,5,6].
Insert 4 with cost min(3, 2) = 2, now nums = [1,2,3,4,5,6].
The total cost is 0 + 0 + 0 + 0 + 1 + 2 = 3.
Example 3:

Input: instructions = [1,3,3,3,2,4,2,1,2]
Output: 4
Explanation: Begin with nums = [].
Insert 1 with cost min(0, 0) = 0, now nums = [1].
Insert 3 with cost min(1, 0) = 0, now nums = [1,3].
Insert 3 with cost min(1, 0) = 0, now nums = [1,3,3].
Insert 3 with cost min(1, 0) = 0, now nums = [1,3,3,3].
Insert 2 with cost min(1, 3) = 1, now nums = [1,2,3,3,3].
Insert 4 with cost min(5, 0) = 0, now nums = [1,2,3,3,3,4].
​​​​​​​Insert 2 with cost min(1, 4) = 1, now nums = [1,2,2,3,3,3,4].
​​​​​​​Insert 1 with cost min(0, 6) = 0, now nums = [1,1,2,2,3,3,3,4].
​​​​​​​Insert 2 with cost min(2, 4) = 2, now nums = [1,1,2,2,2,3,3,3,4].
The total cost is 0 + 0 + 0 + 0 + 1 + 0 + 1 + 0 + 2 = 4.
 

Constraints:

1 <= instructions.length <= 105
1 <= instructions[i] <= 105

class FenwickTree
{
private:
    vector<int> arr;

public:
    FenwickTree(int size) : arr(size, 0)
    {
    }

    int get(int index)
    {
        int sum = 0;
        while (index > 0)
        {
            sum += arr[index];
            index -= index & (-index);
        }
        return sum;
    }

    void set(int index)
    {
        while (index < arr.size())
        {
            ++arr[index];
            index += index & (-index);
        }
    }
};

class Solution
{
public:
    int createSortedArray(vector<int> &ins)
    {
        FenwickTree bit(*max_element(ins.begin(), ins.end()) + 1);
        const int mod = 1e9 + 7;
        int cost = 0;
        for( int i = 0; i < ins.size(); i++ )
        {
            cost += min(bit.get(ins[i] - 1), i - bit.get(ins[i]));
            cost %= mod;
            bit.set(ins[i]);
        }
        return cost;
    }
};


// Source https://leetcode.com/problems/defuse-the-bomb/

You have a bomb to defuse, and your time is running out! Your informer will provide you with a circular array code of length of n and a key k.

To decrypt the code, you must replace every number. All the numbers are replaced simultaneously.

If k > 0, replace the ith number with the sum of the next k numbers.
If k < 0, replace the ith number with the sum of the previous k numbers.
If k == 0, replace the ith number with 0.
As code is circular, the next element of code[n-1] is code[0], and the previous element of code[0] is code[n-1].

Given the circular array code and an integer key k, return the decrypted code to defuse the bomb!

 

Example 1:

Input: code = [5,7,1,4], k = 3
Output: [12,10,16,13]
Explanation: Each number is replaced by the sum of the next 3 numbers. The decrypted code is [7+1+4, 1+4+5, 4+5+7, 5+7+1]. Notice that the numbers wrap around.
Example 2:

Input: code = [1,2,3,4], k = 0
Output: [0,0,0,0]
Explanation: When k is zero, the numbers are replaced by 0. 
Example 3:

Input: code = [2,4,9,3], k = -2
Output: [12,5,6,13]
Explanation: The decrypted code is [3+9, 2+3, 4+2, 9+4]. Notice that the numbers wrap around again. If k is negative, the sum is of the previous numbers.
 

Constraints:

n == code.length
1 <= n <= 100
1 <= code[i] <= 100
-(n - 1) <= k <= n - 1

class Solution
{
public:
    vector<int> decrypt(vector<int> &code, int k)
    {
        int n = code.size();
        vector<int> d(n, 0);
        if (k > 0)
        {
            for (int i = 0; i < n; i++)
            {
                int sum = 0;
                for (int j = i + 1; j <= i + k; j++)
                {
                    sum += code[j % n];
                }
                d[i] = sum;
            }
        }
        else if (k < 0)
        {
            for (int i = 0; i < n; i++)
            {
                int sum = 0;
                for (int j = i + k; j <= i - 1; j++)
                {
                    int idx = j;
                    if (idx < 0) idx += n;
                    sum += code[idx];
                }
                d[i] = sum;
            }
        }
        return d;
    }
};


// Source https://leetcode.com/problems/minimum-deletions-to-make-string-balanced/

You are given a string s consisting only of characters 'a' and 'b'​​​​.

You can delete any number of characters in s to make s balanced. s is balanced if there is no pair of indices (i,j) such that i < j and s[i] = 'b' and s[j]= 'a'.

Return the minimum number of deletions needed to make s balanced.

 

Example 1:

Input: s = "aababbab"
Output: 2
Explanation: You can either:
Delete the characters at 0-indexed positions 2 and 6 ("aababbab" -> "aaabbb"), or
Delete the characters at 0-indexed positions 3 and 6 ("aababbab" -> "aabbbb").
Example 2:

Input: s = "bbaaaaabb"
Output: 2
Explanation: The only solution is to delete the first two characters.
 

Constraints:

1 <= s.length <= 105
s[i] is 'a' or 'b'​​.

// You can remove only all the 'a' after a certain point and the 'b' before that point.
// So you are supposed to find the minimum among all those possible value.

class Solution
{
public:
    int minimumDeletions(string s)
    {
        int cntA = 0;
        for(auto c : s)
        {
            if(c == 'a') cntA++;
        }
        int n = s.length();
        int ans = cntA;
        int a = 0, b = 0;
        for(int i = 0; i < n; i++)
        {
            if(s[i] == 'a') a++;
            else b++;
            ans = min(ans, cntA - a + b);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/minimum-jumps-to-reach-home/

A certain bug's home is on the x-axis at position x. Help them get there from position 0.

The bug jumps according to the following rules:

It can jump exactly a positions forward (to the right).
It can jump exactly b positions backward (to the left).
It cannot jump backward twice in a row.
It cannot jump to any forbidden positions.
The bug may jump forward beyond its home, but it cannot jump to positions numbered with negative integers.

Given an array of integers forbidden, where forbidden[i] means that the bug cannot jump to the position forbidden[i], and integers a, b, and x, 
return the minimum number of jumps needed for the bug to reach its home. If there is no possible sequence of jumps that lands the bug on position x, return -1.

 

Example 1:

Input: forbidden = [14,4,18,1,15], a = 3, b = 15, x = 9
Output: 3
Explanation: 3 jumps forward (0 -> 3 -> 6 -> 9) will get the bug home.
Example 2:

Input: forbidden = [8,3,16,6,12,20], a = 15, b = 13, x = 11
Output: -1
Example 3:

Input: forbidden = [1,6,2,14,5,17,4], a = 16, b = 9, x = 7
Output: 2
Explanation: One jump forward (0 -> 16) then one jump backward (16 -> 7) will get the bug home.
 

Constraints:

1 <= forbidden.length <= 1000
1 <= a, b, forbidden[i] <= 2000
0 <= x <= 2000
All the elements in forbidden are distinct.
Position x is not forbidden.

class Solution
{
public:
    int forbidden[8000];
    int seen[8000][2];

    int minimumJumps(vector<int> &forb, int a, int b, int x)
    {
        memset(forbidden, 0, sizeof(forbidden));
        memset(seen, 0, sizeof(seen));
        for (auto x : forb) forbidden[x] = 1;
        queue<pair<int, bool>> q;
        q.push({0, false});
        seen[0][0] = 1;
        int jumps = 0;
        while (!q.empty())
        {
            int sz = q.size();
            for (int i = 0; i < sz; ++i)
            {
                auto [pos, isBackward] = q.front();
                q.pop();
                if (pos == x)
                {
                    return jumps;
                }
                // Go forward
                if (!seen[pos + a][0] && pos < 4000 && !forbidden[pos + a])
                {
                    seen[pos + a][0] = 1;
                    q.push({pos + a, false});
                }
                // Go backward
                if (!isBackward && pos - b >= 0 && !seen[pos - b][1] && !forbidden[pos - b])
                {
                    seen[pos - b][1] = 1;
                    q.push({pos - b, true});
                }
            }
            ++jumps;
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/distribute-repeating-integers/

You are given an array of n integers, nums, where there are at most 50 unique values in the array. 
You are also given an array of m customer order quantities, quantity, where quantity[i] is the amount of integers the ith customer ordered. 
Determine if it is possible to distribute nums such that:

The ith customer gets exactly quantity[i] integers,
The integers the ith customer gets are all equal, and
Every customer is satisfied.
Return true if it is possible to distribute nums according to the above conditions.

 

Example 1:

Input: nums = [1,2,3,4], quantity = [2]
Output: false
Explanation: The 0th customer cannot be given two different integers.
Example 2:

Input: nums = [1,2,3,3], quantity = [2]
Output: true
Explanation: The 0th customer is given [3,3]. The integers [1,2] are not used.
Example 3:

Input: nums = [1,1,2,2], quantity = [2,2]
Output: true
Explanation: The 0th customer is given [1,1], and the 1st customer is given [2,2].
 

Constraints:

n == nums.length
1 <= n <= 105
1 <= nums[i] <= 1000
m == quantity.length
1 <= m <= 10
1 <= quantity[i] <= 105
There are at most 50 unique values in nums.

class Solution
{
public:

    static inline vector<int> doFrequencyStatistics(const vector<int> &nums)
    {
        unordered_map<int, int> freqMap;
        for (auto a : nums)
        {
            ++freqMap[a];
        }
        vector<int> freqs;
        for (auto [i, freq] : freqMap)
        {
            freqs.emplace_back(freq);
        }
        sort(freqs.begin(), freqs.end(), greater<>());
        return freqs;
    }

    bool canDistribute(vector<int> &nums, vector<int> &quantity)
    {
        // sort the demands descendingly
        sort(quantity.begin(), quantity.end(), greater<>());
        // do a frequency statistics over the numbers.
        auto freqDesc = doFrequencyStatistics(nums);
        // remove the useless entries from freqDesc
        while (!freqDesc.empty() && freqDesc.back() < quantity.back())
        {
            freqDesc.pop_back();
        }
        if (freqDesc.empty())
        {
            return false;
        }
        multiset<int> supplies(freqDesc.begin(), freqDesc.end());
        // greedy: find the exact matches, and remove them
        vector<int> demands;
        demands.reserve(quantity.size());
        for (auto d : quantity)
        {
            if (auto iter = supplies.find(d); iter != supplies.end())
            {
                supplies.erase(iter);
            }
            else
            {
                demands.emplace_back(d);
            }
        }
        if (demands.empty())
        {
            return true;
        }
        // dfs ie backtracking
        return dfs(supplies, demands, 0);
    }

    /// dfs from i-th distinct number and c-th customer
    bool dfs(multiset<int> &supplies, const vector<int> &demands, int c)
    {
        int currDemand = demands[c];
        if (c == demands.size() - 1)   // the last customer
        {
            if (!supplies.empty() && *supplies.rbegin() >= currDemand)
            {
                return true;
            }
            return false;
        }
        auto supp2 = supplies;
        int prevSupply = -1;
        for (auto iter = supplies.rbegin(); iter != supplies.rend() && *iter >= currDemand;
                ++iter)
        {
            if (*iter == prevSupply)
            {
                continue; // skip duplicated counts
            }
            prevSupply = *iter;

            supp2.erase(supp2.find(*iter));
            if (*iter > currDemand)
            {
                supp2.insert(*iter - currDemand);
            }
            if (dfs(supp2, demands, c + 1))
            {
                return true;
            }
            // restore supp2
            supp2.insert(*iter);
            if (*iter > currDemand)
            {
                supp2.erase(supp2.find(*iter - currDemand));
            }
        }
        return false;
    }
};


// Source https://leetcode.com/problems/design-an-ordered-stream/

There is a stream of n (idKey, value) pairs arriving in an arbitrary order, where idKey is an integer between 1 and n and value is a string. No two pairs have the same id.

Design a stream that returns the values in increasing order of their IDs by returning a chunk (list) of values after each insertion. 
The concatenation of all the chunks should result in a list of the sorted values.

Implement the OrderedStream class:

OrderedStream(int n) Constructs the stream to take n values.
String[] insert(int idKey, String value) Inserts the pair (idKey, value) into the stream, then returns the largest possible chunk of currently inserted values that appear next in the order.
 

Example:



Input
["OrderedStream", "insert", "insert", "insert", "insert", "insert"]
[[5], [3, "ccccc"], [1, "aaaaa"], [2, "bbbbb"], [5, "eeeee"], [4, "ddddd"]]
Output
[null, [], ["aaaaa"], ["bbbbb", "ccccc"], [], ["ddddd", "eeeee"]]

Explanation
// Note that the values ordered by ID is ["aaaaa", "bbbbb", "ccccc", "ddddd", "eeeee"].
OrderedStream os = new OrderedStream(5);
os.insert(3, "ccccc"); // Inserts (3, "ccccc"), returns [].
os.insert(1, "aaaaa"); // Inserts (1, "aaaaa"), returns ["aaaaa"].
os.insert(2, "bbbbb"); // Inserts (2, "bbbbb"), returns ["bbbbb", "ccccc"].
os.insert(5, "eeeee"); // Inserts (5, "eeeee"), returns [].
os.insert(4, "ddddd"); // Inserts (4, "ddddd"), returns ["ddddd", "eeeee"].
// Concatentating all the chunks returned:
// [] + ["aaaaa"] + ["bbbbb", "ccccc"] + [] + ["ddddd", "eeeee"] = ["aaaaa", "bbbbb", "ccccc", "ddddd", "eeeee"]
// The resulting order is the same as the order above.
 

Constraints:

1 <= n <= 1000
1 <= id <= n
value.length == 5
value consists only of lowercase letters.
Each call to insert will have a unique id.
Exactly n calls will be made to insert.

class OrderedStream
{
public:
    vector<string> data;
    int N;
    int ptr;

    OrderedStream(int n) : data(n), N{n}, ptr{1}
    {
    }

    vector<string> insert(int id, string value)
    {
        data[id - 1] = std::move(value);
        vector<string> ret;
        if(ptr != id) return ret;
        while(ptr <= N)
        {
            if(data[ptr - 1] == "")
                break;
            ret.emplace_back(data[ptr - 1]);
            ++ptr;
        }
        return ret;
    }
};


// Source https://leetcode.com/problems/determine-if-two-strings-are-close/

Two strings are considered close if you can attain one from the other using the following operations:

Operation 1: Swap any two existing characters.
For example, abcde -> aecdb
Operation 2: Transform every occurrence of one existing character into another existing character, and do the same with the other character.
For example, aacabb -> bbcbaa (all a's turn into b's, and all b's turn into a's)
You can use the operations on either string as many times as necessary.

Given two strings, word1 and word2, return true if word1 and word2 are close, and false otherwise.

 

Example 1:

Input: word1 = "abc", word2 = "bca"
Output: true
Explanation: You can attain word2 from word1 in 2 operations.
Apply Operation 1: "abc" -> "acb"
Apply Operation 1: "acb" -> "bca"
Example 2:

Input: word1 = "a", word2 = "aa"
Output: false
Explanation: It is impossible to attain word2 from word1, or vice versa, in any number of operations.
Example 3:

Input: word1 = "cabbba", word2 = "abbccc"
Output: true
Explanation: You can attain word2 from word1 in 3 operations.
Apply Operation 1: "cabbba" -> "caabbb"
Apply Operation 2: "caabbb" -> "baaccc"
Apply Operation 2: "baaccc" -> "abbccc"
 

Constraints:

1 <= word1.length, word2.length <= 105
word1 and word2 contain only lowercase English letters.

class Solution
{
public:
    bool closeStrings(string word1, string word2)
    {
        int mp[26] = {0};
        int mp2[26] = {0};
        for(auto ch : word2) mp[ch - 'a']++;
        for(auto ch : word1) mp2[ch - 'a']++;
        vector<int> a, b;
        set<int> c, d;
        for (int i = 0; i < 26; ++i)
        {
            if (mp[i] == 0) continue;
            a.push_back(mp[i]);
            c.insert(i);
        }
        for (int i = 0; i < 26; ++i)
        {
            if (mp2[i] == 0) continue;
            b.push_back(mp2[i]);
            d.insert(i);
        }
        if (c != d) return false;
        sort(a.begin(), a.end());
        sort(b.begin(), b.end());
        return a == b;
    }
};


// Source https://leetcode.com/problems/minimum-operations-to-reduce-x-to-zero/

You are given an integer array nums and an integer x. In one operation, you can either remove the leftmost or the rightmost element from the array nums and subtract its value from x. 
Note that this modifies the array for future operations.

Return the minimum number of operations to reduce x to exactly 0 if it is possible, otherwise, return -1.

 

Example 1:

Input: nums = [1,1,4,2,3], x = 5
Output: 2
Explanation: The optimal solution is to remove the last two elements to reduce x to zero.
Example 2:

Input: nums = [5,6,7,8,9], x = 4
Output: -1
Example 3:

Input: nums = [3,2,20,1,1,3], x = 10
Output: 5
Explanation: The optimal solution is to remove the last three elements and the first two elements (5 operations in total) to reduce x to zero.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 104
1 <= x <= 109

class Solution
{
public:
    int minOperations(vector<int> &nums, int x)
    {
        int total = accumulate(nums.begin(), nums.end(), 0);
        if (total < x) return -1;
        int n = nums.size();
        int target = total - x;
        int res = INT_MIN;
        int i = 0, j = 0;
        int sum = 0;
        while(j < n)
        {
            sum += nums[j];
            while(sum > target)
            {
                sum = sum - nums[i];
                i++;
            }
            if(sum == target)
            {
                res = max(res, j - i + 1);
            }
            j++;
        }
        if(res == INT_MIN) return -1;
        return n - res;
    }
};


// Source https://leetcode.com/problems/maximize-grid-happiness/

You are given four integers, m, n, introvertsCount, and extrovertsCount. You have an m x n grid, and there are two types of people: introverts and extroverts. 
There are introvertsCount introverts and extrovertsCount extroverts.

You should decide how many people you want to live in the grid and assign each of them one grid cell. Note that you do not have to have all the people living in the grid.

The happiness of each person is calculated as follows:

Introverts start with 120 happiness and lose 30 happiness for each neighbor (introvert or extrovert).
Extroverts start with 40 happiness and gain 20 happiness for each neighbor (introvert or extrovert).
Neighbors live in the directly adjacent cells north, east, south, and west of a person's cell.

The grid happiness is the sum of each person's happiness. Return the maximum possible grid happiness.

 

Example 1:


Input: m = 2, n = 3, introvertsCount = 1, extrovertsCount = 2
Output: 240
Explanation: Assume the grid is 1-indexed with coordinates (row, column).
We can put the introvert in cell (1,1) and put the extroverts in cells (1,3) and (2,3).
- Introvert at (1,1) happiness: 120 (starting happiness) - (0 * 30) (0 neighbors) = 120
- Extrovert at (1,3) happiness: 40 (starting happiness) + (1 * 20) (1 neighbor) = 60
- Extrovert at (2,3) happiness: 40 (starting happiness) + (1 * 20) (1 neighbor) = 60
The grid happiness is 120 + 60 + 60 = 240.
The above figure shows the grid in this example with each person's happiness. The introvert stays in the light green cell while the extroverts live on the light purple cells.
Example 2:

Input: m = 3, n = 1, introvertsCount = 2, extrovertsCount = 1
Output: 260
Explanation: Place the two introverts in (1,1) and (3,1) and the extrovert at (2,1).
- Introvert at (1,1) happiness: 120 (starting happiness) - (1 * 30) (1 neighbor) = 90
- Extrovert at (2,1) happiness: 40 (starting happiness) + (2 * 20) (2 neighbors) = 80
- Introvert at (3,1) happiness: 120 (starting happiness) - (1 * 30) (1 neighbor) = 90
The grid happiness is 90 + 80 + 90 = 260.
Example 3:

Input: m = 2, n = 2, introvertsCount = 4, extrovertsCount = 0
Output: 240
 

Constraints:

1 <= m, n <= 5
0 <= introvertsCount, extrovertsCount <= min(m * n, 6)

dp[i][j][n_in][n_ex][mask_in][mask_ex] 表示当前剩余[i][j] ... [m-1][n-1]，要处理的位置为[i][j]，当前内向剩余n_in人，外向剩余n_ex人，
[i-1][j] ... [i][j-1] 内向，外向位置的分布情况分别为mask_in和mask_ex，剩余位置可以得到的the maximum possible happiness

class Solution
{
public:
    int m, n;
    int dp[5][5][7][7][1 << 5][1 << 5];

    int getcost(int j, int type, int mask_in, int mask_ex)
    {
        int res = 0;
        int selfdiff = (type == 0 ? -30 : 20);
        // deal with up
        if ((mask_in >> j) & 1)
        {
            res -= 30;
            res += selfdiff;
        }
        if ((mask_ex >> j) & 1)
        {
            res += 20;
            res += selfdiff;
        }
        // deal with left
        if (j > 0 && ((mask_in >> (j - 1)) & 1))
        {
            res -= 30;
            res += selfdiff;
        }
        if (j > 0 && ((mask_ex >> (j - 1)) & 1))
        {
            res += 20;
            res += selfdiff;
        }
        return res;
    }

    int dfs(int i, int j, int n_in, int n_ex, int mask_in, int mask_ex)
    {
        if (j == n)   // adjust index
        {
            j = 0;
            i++;
        }
        if (i == m)
        {
            return 0;
        }

        if (dp[i][j][n_in][n_ex][mask_in][mask_ex] > 0)
        {
            return dp[i][j][n_in][n_ex][mask_in][mask_ex];
        }
        int res = 0;
        // 不放内向，也不放外向
        res = dfs(i, j + 1, n_in, n_ex, (mask_in ^ (((mask_in >> j) & 1) << j)),
                  (mask_ex ^ (((mask_ex >> j) & 1) << j)));
        // 放内向
        if (n_in)
        {
            int cost = getcost(j, 0, mask_in, mask_ex);
            res = max(res, 120 + cost + dfs(i, j + 1, n_in - 1, n_ex, (mask_in | (1 << j)),
                                            (mask_ex ^ (((mask_ex >> j) & 1) << j))));
        }
        // 放外向
        if (n_ex)
        {
            int cost = getcost(j, 1, mask_in, mask_ex);
            res = max(res, 40 + cost + dfs(i, j + 1, n_in, n_ex - 1, (mask_in ^ (((mask_in >> j) & 1) << j)),
                                           (mask_ex | (1 << j))));
        }
        return dp[i][j][n_in][n_ex][mask_in][mask_ex] = res;
    }

    int getMaxGridHappiness(int m, int n, int introvertsCount, int extrovertsCount)
    {
        this->m = m;
        this->n = n;
        memset(dp, 0, sizeof(dp));
        return dfs(0, 0, introvertsCount, extrovertsCount, 0, 0);
    }
};


// Source https://leetcode.com/problems/check-if-two-string-arrays-are-equivalent/

Given two string arrays word1 and word2, return true if the two arrays represent the same string, and false otherwise.

A string is represented by an array if the array elements concatenated in order forms the string.

 

Example 1:

Input: word1 = ["ab", "c"], word2 = ["a", "bc"]
Output: true
Explanation:
word1 represents string "ab" + "c" -> "abc"
word2 represents string "a" + "bc" -> "abc"
The strings are the same, so return true.
Example 2:

Input: word1 = ["a", "cb"], word2 = ["ab", "c"]
Output: false
Example 3:

Input: word1  = ["abc", "d", "defg"], word2 = ["abcddefg"]
Output: true
 

Constraints:

1 <= word1.length, word2.length <= 103
1 <= word1[i].length, word2[i].length <= 103
1 <= sum(word1[i].length), sum(word2[i].length) <= 103
word1[i] and word2[i] consist of lowercase letters.

class Solution
{
public:
    bool arrayStringsAreEqual(vector<string> &word1, vector<string> &word2)
    {
        string s1 = "", s2 = "";

        for(int i = 0; i < word1.size(); i++)
        {
            s1 = s1 + word1[i];
        }

        for(int i = 0; i < word2.size(); i++)
        {
            s2 = s2 + word2[i];
        }

        if(s1.compare(s2) == 0)
            return true;
        else
            return false;
    }
};


// Source https://leetcode.com/problems/smallest-string-with-a-given-numeric-value/

The numeric value of a lowercase character is defined as its position (1-indexed) in the alphabet, so the numeric value of a is 1, the numeric value of b is 2, the numeric value of c is 3, and so on.

The numeric value of a string consisting of lowercase characters is defined as the sum of its characters' numeric values. 
For example, the numeric value of the string "abe" is equal to 1 + 2 + 5 = 8.

You are given two integers n and k. Return the lexicographically smallest string with length equal to n and numeric value equal to k.

Note that a string x is lexicographically smaller than string y if x comes before y in dictionary order, that is, either x is a prefix of y, 
or if i is the first position such that x[i] != y[i], then x[i] comes before y[i] in alphabetic order.

 

Example 1:

Input: n = 3, k = 27
Output: "aay"
Explanation: The numeric value of the string is 1 + 1 + 25 = 27, and it is the smallest string with such a value and length equal to 3.
Example 2:

Input: n = 5, k = 73
Output: "aaszz"
 
Constraints:

1 <= n <= 105
n <= k <= 26 * n

class Solution
{
public:
    string getSmallestString(int n, int k)
    {
        string res(n, 'a');
        k = k - n;
        int ptr = n - 1;
        while (k > 0)
        {
            res[ptr] += min(k, 25);
            k -= min(k, 25);
            --ptr;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/ways-to-make-a-fair-array/

You are given an integer array nums. You can choose exactly one index (0-indexed) and remove the element. Notice that the index of the elements may change after the removal.

For example, if nums = [6,1,7,4,1]:

Choosing to remove index 1 results in nums = [6,7,4,1].
Choosing to remove index 2 results in nums = [6,1,4,1].
Choosing to remove index 4 results in nums = [6,1,7,4].
An array is fair if the sum of the odd-indexed values equals the sum of the even-indexed values.

Return the number of indices that you could choose such that after the removal, nums is fair.

 

Example 1:

Input: nums = [2,1,6,4]
Output: 1
Explanation:
Remove index 0: [1,6,4] -> Even sum: 1 + 4 = 5. Odd sum: 6. Not fair.
Remove index 1: [2,6,4] -> Even sum: 2 + 4 = 6. Odd sum: 6. Fair.
Remove index 2: [2,1,4] -> Even sum: 2 + 4 = 6. Odd sum: 1. Not fair.
Remove index 3: [2,1,6] -> Even sum: 2 + 6 = 8. Odd sum: 1. Not fair.
There is 1 index that you can remove to make nums fair.
Example 2:

Input: nums = [1,1,1]
Output: 3
Explanation: You can remove any index and the remaining array is fair.
Example 3:

Input: nums = [1,2,3]
Output: 0
Explanation: You cannot make a fair array after removing any index.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 104

class Solution
{
public:
    int waysToMakeFair(vector<int> &nums)
    {
        int n = nums.size(), odd_sum = 0;
        for (int i = 0; i < n; ++i)
        {
            if (i % 2 == 1) odd_sum += nums[i];
        }
        int total_sum = accumulate(nums.begin(), nums.end(), 0);
        int ways = 0, even_sum = 0;
        for (int i = 0; i < n; i++)
        {
            if (i % 2 == 1) odd_sum -= nums[i];
            int temp = even_sum + odd_sum;
            ways += (temp * 2 == total_sum - nums[i]);
            if (i % 2 == 0) even_sum += nums[i];
        }
        return ways;
    }
};


// Source https://leetcode.com/problems/minimum-initial-energy-to-finish-tasks/

You are given an array tasks where tasks[i] = [actuali, minimumi]:

actuali is the actual amount of energy you spend to finish the ith task.
minimumi is the minimum amount of energy you require to begin the ith task.
For example, if the task is [10, 12] and your current energy is 11, you cannot start this task. 
However, if your current energy is 13, you can complete this task, and your energy will be 3 after finishing it.

You can finish the tasks in any order you like.

Return the minimum initial amount of energy you will need to finish all the tasks.

 

Example 1:

Input: tasks = [[1,2],[2,4],[4,8]]
Output: 8
Explanation:
Starting with 8 energy, we finish the tasks in the following order:
    - 3rd task. Now energy = 8 - 4 = 4.
    - 2nd task. Now energy = 4 - 2 = 2.
    - 1st task. Now energy = 2 - 1 = 1.
Notice that even though we have leftover energy, starting with 7 energy does not work because we cannot do the 3rd task.
Example 2:

[1,3] [2, 4] [10, 12] [8, 9] [10, 11]
3      + 2     + 10    + 7   + 10 

[10, 12] [2, 4] [1, 3] [10, 11] [8, 9]
12 + 2 + 1 + 9 + 8

Input: tasks = [[1,3],[2,4],[10,11],[10,12],[8,9]]
Output: 32
Explanation:
Starting with 32 energy, we finish the tasks in the following order:
    - 1st task. Now energy = 32 - 1 = 31.
    - 2nd task. Now energy = 31 - 2 = 29.
    - 3rd task. Now energy = 29 - 10 = 19.
    - 4th task. Now energy = 19 - 10 = 9.
    - 5th task. Now energy = 9 - 8 = 1.
Example 3:

[1,7] [2,8] [3,9] [4,10] [5,11] [6,12]
7 + 2 + 3 + 4 + 5 + 6

Input: tasks = [[1,7],[2,8],[3,9],[4,10],[5,11],[6,12]]
Output: 27
Explanation:
Starting with 27 energy, we finish the tasks in the following order:
    - 5th task. Now energy = 27 - 5 = 22.
    - 2nd task. Now energy = 22 - 2 = 20.
    - 3rd task. Now energy = 20 - 3 = 17.
    - 1st task. Now energy = 17 - 1 = 16.
    - 4th task. Now energy = 16 - 4 = 12.
    - 6th task. Now energy = 12 - 6 = 6.
 

Constraints:

1 <= tasks.length <= 105
1 <= actual​i <= minimumi <= 104

class Solution
{
public:
    int minimumEffort(vector<vector<int>> &tasks)
    {
        sort(tasks.begin(), tasks.end(), [](const vector<int> &a, const vector<int> &b)
        {
            return a[1] - a[0] > b[1] - b[0];
        });
        int curr = 0, req = 0;
        for(int i = 0; i < tasks.size(); i++)
        {
            if(curr < tasks[i][1])
            {
                req += (tasks[i][1] - curr);
                curr = tasks[i][1] - tasks[i][0];
            }
            else
            {
                curr = curr - tasks[i][0];
            }
        }
        return req;
    }
};


// Source https://leetcode.com/problems/maximum-repeating-substring/

For a string sequence, a string word is k-repeating if word concatenated k times is a substring of sequence. 
The word's maximum k-repeating value is the highest value k where word is k-repeating in sequence. If word is not a substring of sequence, word's maximum k-repeating value is 0.

Given strings sequence and word, return the maximum k-repeating value of word in sequence.

 

Example 1:

Input: sequence = "ababc", word = "ab"
Output: 2
Explanation: "abab" is a substring in "ababc".
Example 2:

Input: sequence = "ababc", word = "ba"
Output: 1
Explanation: "ba" is a substring in "ababc". "baba" is not a substring in "ababc".
Example 3:

Input: sequence = "ababc", word = "ac"
Output: 0
Explanation: "ac" is not a substring in "ababc". 
 

Constraints:

1 <= sequence.length <= 100
1 <= word.length <= 100
sequence and word contains only lowercase English letters.

class Solution
{
public:
    int maxRepeating(string sequence, string word)
    {
        int cnt = 0;
        string res = "";
        int n = sequence.size();
        while(res.size() + word.size() <= n)
        {
            res += word;
            if(sequence.find(res) == string::npos) break;
            cnt++;
        }
        return cnt;
    }
};


// Source https://leetcode.com/problems/merge-in-between-linked-lists/

You are given two linked lists: list1 and list2 of sizes n and m respectively.

Remove list1's nodes from the ath node to the bth node, and put list2 in their place.

The blue edges and nodes in the following figure indicate the result:


Build the result list and return its head.

 

Example 1:


Input: list1 = [0,1,2,3,4,5], a = 3, b = 4, list2 = [1000000,1000001,1000002]
Output: [0,1,2,1000000,1000001,1000002,5]
Explanation: We remove the nodes 3 and 4 and put the entire list2 in their place. The blue edges and nodes in the above figure indicate the result.
Example 2:


Input: list1 = [0,1,2,3,4,5,6], a = 2, b = 5, list2 = [1000000,1000001,1000002,1000003,1000004]
Output: [0,1,1000000,1000001,1000002,1000003,1000004,6]
Explanation: The blue edges and nodes in the above figure indicate the result.
 

Constraints:

3 <= list1.length <= 104
1 <= a <= b < list1.length - 1
1 <= list2.length <= 104

class Solution
{
public:
    ListNode *mergeInBetween(ListNode *list1, int a, int b, ListNode *list2)
    {
        ListNode *node1, *node2;
        int count = 0;
        ListNode *temp = list1;
        while(temp)
        {
            if(count == a - 1) node1 = temp;
            if(count == b + 1)
            {
                node2 = temp;
                break;
            }
            count++;
            temp = temp->next;
        }
        ListNode *delNode = node1->next;
        while(delNode != node2)
        {
            ListNode *next = delNode->next;
            delete delNode;
            delNode = next;
        }
        temp = list2;
        while(temp->next) temp = temp->next;
        temp->next = node2;
        node1->next = list2;
        return list1;
    }
};


// Source https://leetcode.com/problems/design-front-middle-back-queue/

Design a queue that supports push and pop operations in the front, middle, and back.

Implement the FrontMiddleBack class:

FrontMiddleBack() Initializes the queue.
void pushFront(int val) Adds val to the front of the queue.
void pushMiddle(int val) Adds val to the middle of the queue.
void pushBack(int val) Adds val to the back of the queue.
int popFront() Removes the front element of the queue and returns it. If the queue is empty, return -1.
int popMiddle() Removes the middle element of the queue and returns it. If the queue is empty, return -1.
int popBack() Removes the back element of the queue and returns it. If the queue is empty, return -1.
Notice that when there are two middle position choices, the operation is performed on the frontmost middle position choice. For example:

Pushing 6 into the middle of [1, 2, 3, 4, 5] results in [1, 2, 6, 3, 4, 5].
Popping the middle from [1, 2, 3, 4, 5, 6] returns 3 and results in [1, 2, 4, 5, 6].
 

Example 1:

Input:
["FrontMiddleBackQueue", "pushFront", "pushBack", "pushMiddle", "pushMiddle", "popFront", "popMiddle", "popMiddle", "popBack", "popFront"]
[[], [1], [2], [3], [4], [], [], [], [], []]
Output:
[null, null, null, null, null, 1, 3, 4, 2, -1]

Explanation:
FrontMiddleBackQueue q = new FrontMiddleBackQueue();
q.pushFront(1);   // [1]
q.pushBack(2);    // [1, 2]
q.pushMiddle(3);  // [1, 3, 2]
q.pushMiddle(4);  // [1, 4, 3, 2]
q.popFront();     // return 1 -> [4, 3, 2]
q.popMiddle();    // return 3 -> [4, 2]
q.popMiddle();    // return 4 -> [2]
q.popBack();      // return 2 -> []
q.popFront();     // return -1 -> [] (The queue is empty)
 

Constraints:

1 <= val <= 109
At most 1000 calls will be made to pushFront, pushMiddle, pushBack, popFront, popMiddle, and popBack.

class FrontMiddleBackQueue
{
public:
    deque<int> dq;

    FrontMiddleBackQueue()
    {
    }

    void pushFront(int val)
    {
        dq.push_front(val);
    }

    void pushMiddle(int val)
    {
        int m = dq.size() / 2;
        dq.insert(dq.begin() + m, val);
    }

    void pushBack(int val)
    {
        dq.push_back(val);
    }

    int popFront()
    {
        if (dq.empty())
        {
            return -1;
        }
        int res = dq.front();
        dq.pop_front();
        return res;
    }

    int popMiddle()
    {
        if (dq.empty())
        {
            return -1;
        }
        int m = dq.size() / 2;
        if (dq.size() % 2 == 0)
        {
            m--;
        }
        int res = *(dq.begin() + m);
        dq.erase(dq.begin() + m);
        return res;
    }

    int popBack()
    {
        if (dq.empty())
        {
            return -1;
        }
        int res = dq.back();
        dq.pop_back();
        return res;
    }
};


// Source https://leetcode.com/problems/minimum-number-of-removals-to-make-mountain-array/

You may recall that an array arr is a mountain array if and only if:

arr.length >= 3
There exists some index i (0-indexed) with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
Given an integer array nums​​​, return the minimum number of elements to remove to make nums​​​ a mountain array.

 

Example 1:

Input: nums = [1,3,1]
Output: 0
Explanation: The array itself is a mountain array so we do not need to remove any elements.
Example 2:

Input: nums = [2,1,1,5,6,2,3,1]
Output: 3
Explanation: One solution is to remove the elements at indices 0, 1, and 5, making the array nums = [1,5,6,3,1].
 

Constraints:

3 <= nums.length <= 1000
1 <= nums[i] <= 109
It is guaranteed that you can make a mountain array out of nums.

class Solution
{
public:
    int minimumMountainRemovals(vector<int> &nums)
    {
        int n = nums.size();
        vector<int>LIS(n, 1);
        vector<int>LDS(n, 1);
        for(int i = 1; i < n; i++)
        {
            for(int j = 0; j < i; j++)
            {
                if(nums[i] > nums[j]) LIS[i] = max(LIS[i], LIS[j] + 1);
            }
        }
        for(int i = n - 2; i >= 0; i--)
        {
            for(int j = n - 1; j > i; j--)
            {
                if(nums[i] > nums[j]) LDS[i] = max(LDS[i], LDS[j] + 1);
            }
        }
        int res = 0;
        for(int i = 0; i < n; i++)
        {
            if(LIS[i] > 1 && LDS[i] > 1)
                res = max(res, LIS[i] + LDS[i] - 1);
        }
        return n - res;
    }
};


// Source https://leetcode.com/problems/richest-customer-wealth/

You are given an m x n integer grid accounts where accounts[i][j] is the amount of money the i​​​​​​​​​​​th​​​​ customer has in the j​​​​​​​​​​​th​​​​ bank. Return the wealth that the richest customer has.

A customer's wealth is the amount of money they have in all their bank accounts. The richest customer is the customer that has the maximum wealth.

 

Example 1:

Input: accounts = [[1,2,3],[3,2,1]]
Output: 6
Explanation:
1st customer has wealth = 1 + 2 + 3 = 6
2nd customer has wealth = 3 + 2 + 1 = 6
Both customers are considered the richest with a wealth of 6 each, so return 6.
Example 2:

Input: accounts = [[1,5],[7,3],[3,5]]
Output: 10
Explanation: 
1st customer has wealth = 6
2nd customer has wealth = 10 
3rd customer has wealth = 8
The 2nd customer is the richest with a wealth of 10.
Example 3:

Input: accounts = [[2,8,7],[7,1,3],[1,9,5]]
Output: 17
 

Constraints:

m == accounts.length
n == accounts[i].length
1 <= m, n <= 50
1 <= accounts[i][j] <= 100

class Solution
{
public:
    int maximumWealth(vector<vector<int>> &accounts)
    {
        int res = INT_MIN ;
        for(auto &v : accounts)
        {
            int sum = 0;
            for(auto num : v)
            {
                sum += num;
            }
            res = max(res, sum);
        }
        return res ;
    }
};


// Source https://leetcode.com/problems/find-the-most-competitive-subsequence/

Given an integer array nums and a positive integer k, return the most competitive subsequence of nums of size k.

An array's subsequence is a resulting sequence obtained by erasing some (possibly zero) elements from the array.

We define that a subsequence a is more competitive than a subsequence b (of the same length) if in the first position where a and b differ, 
subsequence a has a number less than the corresponding number in b. For example, [1,3,4] is more competitive than [1,3,5] because the first position they differ is at the final number, 
and 4 is less than 5.

 

Example 1:

Input: nums = [3,5,2,6], k = 2
Output: [2,6]
Explanation: Among the set of every possible subsequence: {[3,5], [3,2], [3,6], [5,2], [5,6], [2,6]}, [2,6] is the most competitive.
Example 2:

Input: nums = [2,4,3,3,5,4,9,6], k = 4
Output: [2,3,3,4]
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 109
1 <= k <= nums.length

class Solution
{
public:
    vector<int> mostCompetitive(vector<int> &nums, int k)
    {
        int n = nums.size();
        int removeCnt = n - k;
        vector<int> ans;
        for(auto val : nums)
        {
            while(ans.size() > 0 && ans.back() > val && removeCnt > 0)
            {
                ans.pop_back();
                removeCnt--;
            }
            ans.push_back(val);
        }
        while(removeCnt > 0)
        {
            ans.pop_back();
            removeCnt--;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/minimum-moves-to-make-array-complementary/

You are given an integer array nums of even length n and an integer limit. In one move, you can replace any integer from nums with another integer between 1 and limit, inclusive.

The array nums is complementary if for all indices i (0-indexed), nums[i] + nums[n - 1 - i] equals the same number. 
For example, the array [1,2,3,4] is complementary because for all indices i, nums[i] + nums[n - 1 - i] = 5.

Return the minimum number of moves required to make nums complementary.

 

Example 1:

Input: nums = [1,2,4,3], limit = 4
Output: 1
Explanation: In 1 move, you can change nums to [1,2,2,3] (underlined elements are changed).
nums[0] + nums[3] = 1 + 3 = 4.
nums[1] + nums[2] = 2 + 2 = 4.
nums[2] + nums[1] = 2 + 2 = 4.
nums[3] + nums[0] = 3 + 1 = 4.
Therefore, nums[i] + nums[n-1-i] = 4 for every i, so nums is complementary.
Example 2:

Input: nums = [1,2,2,1], limit = 2
Output: 2
Explanation: In 2 moves, you can change nums to [2,2,2,2]. You cannot change any number to 3 since 3 > limit.
Example 3:

Input: nums = [1,2,1,2], limit = 2
Output: 0
Explanation: nums is already complementary.
 

Constraints:

n == nums.length
2 <= n <= 105
1 <= nums[i] <= limit <= 105
n is even.

给定一个长度为偶数的数组，对于每一位nums[i]，都可以更改为[1, limit]，limit为给定值。问使整个数组每对nums[i]+nums[n-i-1]的和相等，最少需要更改几次。

假设a和b为一对，即a = min(nums[i], nums[n - i - 1]), b = max(nums[i], nums[n - i - 1])

[2, a]，要改2次；同时缩小a和b
[a+1,a+b-1]，要改1次；只缩小b
a+b，要改0次；a和b不变
[a+b+1,limit+b]，要改1次；只增大a
最后[limit+b+1, 2*limit]要改2次。同时增大a和b

class Solution
{
public:
    int minMoves(vector<int> &nums, int limit)
    {
        vector<int> diff(limit * 2 + 1);
        int n = nums.size();
        int mxVal = limit * 2;
        for(int i = 0; i < n / 2; i++)
        {
            int a = min(nums[i], nums[n - 1 - i]);
            int b = max(nums[i], nums[n - 1 - i]);
            diff[2] += 2;
            diff[a + 1] -= 1;
            diff[a + b] -= 1;
            if (a < limit)
            {
                diff[a + 1 + b] += 1;
                if (b < limit) diff[limit + b + 1] += 1;
            }
        }
        int ans = INT_MAX;
        int sum = 0;
        for(int i = 2; i <= mxVal; i++)
        {
            sum += diff[i];
            ans = min(ans, sum);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/minimize-deviation-in-array/

You are given an array nums of n positive integers.

You can perform two types of operations on any element of the array any number of times:

If the element is even, divide it by 2.
For example, if the array is [1,2,3,4], then you can do this operation on the last element, and the array will be [1,2,3,2].
If the element is odd, multiply it by 2.
For example, if the array is [1,2,3,4], then you can do this operation on the first element, and the array will be [2,2,3,4].
The deviation of the array is the maximum difference between any two elements in the array.

Return the minimum deviation the array can have after performing some number of operations.

 

Example 1:

Input: nums = [1,2,3,4]
Output: 1
Explanation: You can transform the array to [1,2,3,2], then to [2,2,3,2], then the deviation will be 3 - 2 = 1.
[2,2,6,4]
2 2 3 4
2 2 3 2
Example 2:

Input: nums = [4,1,5,20,3]
Output: 3
Explanation: You can transform the array after two operations to [4,2,5,5,3], then the deviation will be 5 - 2 = 3.

4 2 10 20 6
4 2 10 10 6
4 2 5 10 6
4 2 5 5 6
4 2 5 5 3

Example 3:

Input: nums = [2,10,8]
Output: 3

2 5 8
2 5 4


Constraints:

n == nums.length
2 <= n <= 5 * 104
1 <= nums[i] <= 109

class Solution
{
public:
    int minimumDeviation(vector<int> &nums)
    {
        int mn = INT_MAX, mx = INT_MIN;
        for(int i = 0; i < nums.size(); i++)
        {
            if(nums[i] % 2 != 0)
            {
                nums[i] *= 2;
            }
            mn = min(mn, nums[i]);
            mx = max(mx, nums[i]);
        }
        int res = mx - mn;
        priority_queue<int> pq;
        for(int i = 0; i < nums.size(); i++)
        {
            pq.push(nums[i]);
        }
        while(pq.top() % 2 == 0)
        {
            int temp = pq.top();
            pq.pop();
            temp /= 2;
            mn = min(mn, temp);
            pq.push(temp);
            res = min(res, pq.top() - mn);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/goal-parser-interpretation/

You own a Goal Parser that can interpret a string command. The command consists of an alphabet of "G", "()" and/or "(al)" in some order. 
The Goal Parser will interpret "G" as the string "G", "()" as the string "o", and "(al)" as the string "al". The interpreted strings are then concatenated in the original order.

Given the string command, return the Goal Parser's interpretation of command.

 

Example 1:

Input: command = "G()(al)"
Output: "Goal"
Explanation: The Goal Parser interprets the command as follows:
G -> G
() -> o
(al) -> al
The final concatenated result is "Goal".
Example 2:

Input: command = "G()()()()(al)"
Output: "Gooooal"
Example 3:

Input: command = "(al)G(al)()()G"
Output: "alGalooG"
 

Constraints:

1 <= command.length <= 100
command consists of "G", "()", and/or "(al)" in some order.

class Solution
{
public:
    string interpret(string command)
    {
        string s = "";
        for(int i = 0; i < command.size(); i++)
        {
            if(command[i] == '(' && command[i + 1] == ')')
            {
                s += "o";
                i++;
            }
            else if(command[i] == '(' && command[i + 1] == 'a')
            {
                s += "a";
                s += "l";
                i += 3;
            }
            else s += "G";
        }
        return s;
    }
};


// Source https://leetcode.com/problems/max-number-of-k-sum-pairs/

You are given an integer array nums and an integer k.

In one operation, you can pick two numbers from the array whose sum equals k and remove them from the array.

Return the maximum number of operations you can perform on the array.

 

Example 1:

Input: nums = [1,2,3,4], k = 5
Output: 2
Explanation: Starting with nums = [1,2,3,4]:
- Remove numbers 1 and 4, then nums = [2,3]
- Remove numbers 2 and 3, then nums = []
There are no more pairs that sum up to 5, hence a total of 2 operations.
Example 2:

Input: nums = [3,1,3,4,3], k = 6
Output: 1
Explanation: Starting with nums = [3,1,3,4,3]:
- Remove the first two 3's, then nums = [1,4,3]
There are no more pairs that sum up to 6, hence a total of 1 operation.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 109
1 <= k <= 109


class Solution
{
public:
    int maxOperations(vector<int> &nums, int k)
    {
        sort(nums.begin(), nums.end());
        int n = nums.size();
        int i = 0;
        int j = n - 1;
        int ans = 0;
        while(i < j)
        {
            int sum = nums[i] + nums[j];
            if(sum == k)
            {
                ans++;
                i++;
                j--;
            }
            else if(sum < k)
            {
                i++;
            }
            else
            {
                j--;
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/concatenation-of-consecutive-binary-numbers/

Given an integer n, return the decimal value of the binary string formed by concatenating the binary representations of 1 to n in order, modulo 109 + 7.

 

Example 1:

Input: n = 1
Output: 1
Explanation: "1" in binary corresponds to the decimal value 1. 
Example 2:

Input: n = 3
Output: 27
Explanation: In binary, 1, 2, and 3 corresponds to "1", "10", and "11".
After concatenating them, we have "11011", which corresponds to the decimal value 27.
Example 3:

Input: n = 12
Output: 505379714
Explanation: The concatenation results in "1101110010111011110001001101010111100".
The decimal value of that is 118505380540.
After modulo 109 + 7, the result is 505379714.
 

Constraints:

1 <= n <= 105

__builtin_clz(x)	计算x前导0的个数。x=0时结果未定义
__builtin_ctz(x)	计算x末尾0的个数。x=0时结果未定义
__builtin_popcount(x)	计算x中1的个数

class Solution
{
public:
    int concatenatedBinary(int n)
    {
        int64_t ans = 0;
        const int64_t mod = 1e9 + 7; 
        for (int i = 1; i <= n; i++)
        {
            int bits = 32 - __builtin_clz(i);
            ans = (ans << bits | i) % mod;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/minimum-incompatibility/

You are given an integer array nums​​​ and an integer k. You are asked to distribute this array into k subsets of equal size such that there are no two equal elements in the same subset.

A subset's incompatibility is the difference between the maximum and minimum elements in that array.

Return the minimum possible sum of incompatibilities of the k subsets after distributing the array optimally, or return -1 if it is not possible.

A subset is a group integers that appear in the array with no particular order.

 

Example 1:

Input: nums = [1,2,1,4], k = 2
Output: 4
Explanation: The optimal distribution of subsets is [1,2] and [1,4].
The incompatibility is (2-1) + (4-1) = 4.
Note that [1,1] and [2,4] would result in a smaller sum, but the first subset contains 2 equal elements.
Example 2:

Input: nums = [6,3,8,1,3,1,2,2], k = 4
Output: 6
Explanation: The optimal distribution of subsets is [1,2], [2,3], [6,8], and [1,3].
The incompatibility is (2-1) + (3-2) + (8-6) + (3-1) = 6.
Example 3:

Input: nums = [5,3,3,6,3,3], k = 3
Output: -1
Explanation: It is impossible to distribute nums into 3 subsets where no two elements are equal in the same subset.
 

Constraints:

1 <= k <= nums.length <= 16
nums.length is divisible by k
1 <= nums[i] <= nums.length

class Solution
{
public:

    vector<pair<int, int>> getMap(vector<int> &nums, int m)
    {
        int n = nums.size();
        vector<pair<int, int>> ans;
        for (int mask = 0; mask < (1 << n); ++mask)
        {
            if (__builtin_popcount(mask) != m) continue;
            int vis = 0;
            int mx = INT_MIN, mn = INT_MAX;
            bool is_good = true;
            for (int i = 0; i < n; ++i)
            {
                if ((mask & (1 << i)) == 0) continue;
                if (vis & (1 << nums[i]))
                {
                    is_good = false;
                    break;
                }
                vis |= (1 << nums[i]);
                mx = max(mx, nums[i]);
                mn = min(mn, nums[i]);
            }
            if (is_good) ans.emplace_back(mask, mx - mn);
        }
        return ans;
    }

    int minimumIncompatibility(vector<int> &nums, int k)
    {
        int n = nums.size(), m = n / k;
        vector<pair<int, int>> vec = getMap(nums, m);
        vector<int> dp(1 << n, -1);
        dp[0] = 0;
        for (int mask = 0; mask < (1 << n); ++mask)
        {
            if (__builtin_popcount(mask) % m != 0) continue;
            for (auto [tempMask, val] : vec)
            {
                if (tempMask > mask) break;
                if ((tempMask & mask) != tempMask) continue;
                if (dp[mask - tempMask] == -1) continue;
                if (dp[mask] == -1) dp[mask] = dp[mask - tempMask] + val;
                else dp[mask] = min(dp[mask], dp[mask - tempMask] + val);
            }
        }
        return dp.back();
    }
};


// Source https://leetcode.com/problems/count-the-number-of-consistent-strings/

You are given a string allowed consisting of distinct characters and an array of strings words. A string is consistent if all characters in the string appear in the string allowed.

Return the number of consistent strings in the array words.

 

Example 1:

Input: allowed = "ab", words = ["ad","bd","aaab","baa","badab"]
Output: 2
Explanation: Strings "aaab" and "baa" are consistent since they only contain characters 'a' and 'b'.
Example 2:

Input: allowed = "abc", words = ["a","b","c","ab","ac","bc","abc"]
Output: 7
Explanation: All strings are consistent.
Example 3:

Input: allowed = "cad", words = ["cc","acd","b","ba","bac","bad","ac","d"]
Output: 4
Explanation: Strings "cc", "acd", "ac", and "d" are consistent.
 

Constraints:

1 <= words.length <= 104
1 <= allowed.length <= 26
1 <= words[i].length <= 10
The characters in allowed are distinct.
words[i] and allowed contain only lowercase English letters.

class Solution
{
public:
    int countConsistentStrings(string allowed, vector<string> &words)
    {
        int res = 0;
        int allow[26] = {0};
        for (auto ch : allowed) allow[ch - 'a'] = 1;
        for (auto &w : words)
        {
            int cnt = 0;
            for (auto ch : w)
            {
                if (!allow[ch - 'a']) break;
                ++cnt;
            }
            if(cnt == w.size())
            {
                res++;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/sum-of-absolute-differences-in-a-sorted-array/

You are given an integer array nums sorted in non-decreasing order.

Build and return an integer array result with the same length as nums such that result[i] is equal to the summation of absolute differences between nums[i] and all the other elements in the array.

In other words, result[i] is equal to sum(|nums[i]-nums[j]|) where 0 <= j < nums.length and j != i (0-indexed).

 

Example 1:

Input: nums = [2,3,5]
Output: [4,3,5]
Explanation: Assuming the arrays are 0-indexed, then
result[0] = |2-2| + |2-3| + |2-5| = 0 + 1 + 3 = 4,
result[1] = |3-2| + |3-3| + |3-5| = 1 + 0 + 2 = 3,
result[2] = |5-2| + |5-3| + |5-5| = 3 + 2 + 0 = 5.
Example 2:

Input: nums = [1,4,6,8,10]
Output: [24,15,13,15,21]
 

Constraints:

2 <= nums.length <= 105
1 <= nums[i] <= nums[i + 1] <= 104

class Solution
{
public:
    vector<int> getSumAbsoluteDifferences(vector<int> &nums)
    {
        int n = nums.size();
        vector<int> answer(n);
        int sumR = accumulate(nums.begin(), nums.end(), 0), sumL = 0;
        for(int i = 0, rightCnt = n - 1; i < n; i++, rightCnt--)
        {
            sumR -= nums[i];
            answer[i] = nums[i] * (i - rightCnt) - sumL + sumR;
            sumL += nums[i];
        }
        return answer;
    }
};


// Source https://leetcode.com/problems/stone-game-vi/

Alice and Bob take turns playing a game, with Alice starting first.

There are n stones in a pile. On each player's turn, they can remove a stone from the pile and receive points based on the stone's value. Alice and Bob may value the stones differently.

You are given two integer arrays of length n, aliceValues and bobValues. Each aliceValues[i] and bobValues[i] represents how Alice and Bob, respectively, value the ith stone.

The winner is the person with the most points after all the stones are chosen. If both players have the same amount of points, the game results in a draw. 
Both players will play optimally. Both players know the other's values.

Determine the result of the game, and:

If Alice wins, return 1.
If Bob wins, return -1.
If the game results in a draw, return 0.
 

Example 1:

Input: aliceValues = [1,3], bobValues = [2,1]
Output: 1
Explanation:
If Alice takes stone 1 (0-indexed) first, Alice will receive 3 points.
Bob can only choose stone 0, and will only receive 2 points.
Alice wins.
Example 2:

Input: aliceValues = [1,2], bobValues = [3,1]
Output: 0
Explanation:
If Alice takes stone 0, and Bob takes stone 1, they will both have 1 point.
Draw.
Example 3:

Input: aliceValues = [2,4,3], bobValues = [1,6,7]
Output: -1
Explanation:
Regardless of how Alice plays, Bob will be able to have more points than Alice.
For example, if Alice takes stone 1, Bob can take stone 2, and Alice takes stone 0, Alice will have 6 points to Bob's 7.
Bob wins.
 

Constraints:

n == aliceValues.length == bobValues.length
1 <= n <= 105
1 <= aliceValues[i], bobValues[i] <= 100

自己选大的或阻止对方选大的

class Solution
{
public:
    int stoneGameVI(vector<int> &aliceValues, vector<int> &bobValues)
    {
        priority_queue<pair<int, pair<int, int>>> pq;
        for(int i = 0; i < aliceValues.size(); i++)
        {
            pq.push({aliceValues[i] + bobValues[i], {aliceValues[i], bobValues[i]}});
        }
        bool flag = true;
        int A = 0, B = 0;
        while(!pq.empty())
        {
            if(flag)
            {
                A += pq.top().second.first;
                pq.pop();
                flag = false;
            }
            else
            {
                B += pq.top().second.second;
                pq.pop();
                flag = true;
            }
        }
        if(A == B)return 0;
        if(A > B)return 1;
        return -1;
    }
};


// Source https://leetcode.com/problems/delivering-boxes-from-storage-to-ports/

You have the task of delivering some boxes from storage to their ports using only one ship. However, this ship has a limit on the number of boxes and the total weight that it can carry.

You are given an array boxes, where boxes[i] = [ports​​i​, weighti], and three integers portsCount, maxBoxes, and maxWeight.

ports​​i is the port where you need to deliver the ith box and weightsi is the weight of the ith box.
portsCount is the number of ports.
maxBoxes and maxWeight are the respective box and weight limits of the ship.
The boxes need to be delivered in the order they are given. The ship will follow these steps:

The ship will take some number of boxes from the boxes queue, not violating the maxBoxes and maxWeight constraints.
For each loaded box in order, the ship will make a trip to the port the box needs to be delivered to and deliver it. 
If the ship is already at the correct port, no trip is needed, and the box can immediately be delivered.
The ship then makes a return trip to storage to take more boxes from the queue.
The ship must end at storage after all the boxes have been delivered.

Return the minimum number of trips the ship needs to make to deliver all boxes to their respective ports.

 

Example 1:

Input: boxes = [[1,1],[2,1],[1,1]], portsCount = 2, maxBoxes = 3, maxWeight = 3
Output: 4
Explanation: The optimal strategy is as follows: 
- The ship takes all the boxes in the queue, goes to port 1, then port 2, then port 1 again, then returns to storage. 4 trips.
So the total number of trips is 4.
Note that the first and third boxes cannot be delivered together because the boxes need to be delivered in order (i.e. the second box needs to be delivered at port 2 before the third box).
Example 2:

Input: boxes = [[1,2],[3,3],[3,1],[3,1],[2,4]], portsCount = 3, maxBoxes = 3, maxWeight = 6
Output: 6
Explanation: The optimal strategy is as follows: 
- The ship takes the first box, goes to port 1, then returns to storage. 2 trips.
- The ship takes the second, third and fourth boxes, goes to port 3, then returns to storage. 2 trips.
- The ship takes the fifth box, goes to port 3, then returns to storage. 2 trips.
So the total number of trips is 2 + 2 + 2 = 6.
Example 3:

Input: boxes = [[1,4],[1,2],[2,1],[2,1],[3,2],[3,4]], portsCount = 3, maxBoxes = 6, maxWeight = 7
Output: 6
Explanation: The optimal strategy is as follows:
- The ship takes the first and second boxes, goes to port 1, then returns to storage. 2 trips.
- The ship takes the third and fourth boxes, goes to port 2, then returns to storage. 2 trips.
- The ship takes the fifth and sixth boxes, goes to port 3, then returns to storage. 2 trips.
So the total number of trips is 2 + 2 + 2 = 6.
 

Constraints:

1 <= boxes.length <= 105
1 <= portsCount, maxBoxes, maxWeight <= 105
1 <= ports​​i <= portsCount
1 <= weightsi <= maxWeight

dp[i] 表示把前i个boxes搬到对应的ports， the minimum number of trips
dp[j] 表示把前j个boxes搬到对应的ports， the minimum number of trips

dp[i] = dp[j] + cost(第j+1个 ... 第i个)
第j+1个 ... 第i个作为同一批由ship进行运输，且要满足maxBoxes和maxWeight的限制
cost(第j+1个 ... 第i个) = 2 + cnt(第j+1个 ... 第i个)
2 = 1 + 1
把第j+1个运到对应port算1次，把船开回storage算1次
cnt(第j+1个 ... 第i个) 表示相邻两个箱子port不同的次数(第j+1个与第j+2个 ... 第i-1个与第i个)
deque<int> dq 单调递增

class Solution
{
public:
    int boxDelivering(vector<vector<int>> &boxes, int portsCount, int maxBoxes, int maxWeight)
    {
        int n = boxes.size();
        vector<int> cnt(n);
        for(int i = 1; i < n; i++)
        {
            cnt[i] = cnt[i - 1];
            if(boxes[i][0] != boxes[i - 1][0]) cnt[i]++;
        }
        vector<int> dp(n + 1);
        dp[0] = 0;
        deque<int> dq;
        int i = 0, j = 0;
        int weight = 0;
        while(i < n)
        {
            weight += boxes[i][1];
            while(j < i && (weight > maxWeight || (i - j + 1) > maxBoxes))
            {
                weight -= boxes[j][1];
                ++j;
            }
            while(!dq.empty() && dq.front() < j) dq.pop_front();
            while(!dq.empty() && dp[dq.back()] - cnt[dq.back()] > dp[i] - cnt[i]) dq.pop_back();
            dq.push_back(i);
            dp[i+1] = cnt[i] + dp[dq.front()] - cnt[dq.front()] + 2;
            ++i;
        }
        return dp[n];
    }
};


// Source https://leetcode.com/problems/count-of-matches-in-tournament/

You are given an integer n, the number of teams in a tournament that has strange rules:

If the current number of teams is even, each team gets paired with another team. A total of n / 2 matches are played, and n / 2 teams advance to the next round.
If the current number of teams is odd, one team randomly advances in the tournament, and the rest gets paired. 
A total of (n - 1) / 2 matches are played, and (n - 1) / 2 + 1 teams advance to the next round.
Return the number of matches played in the tournament until a winner is decided.

 

Example 1:

Input: n = 7
Output: 6
Explanation: Details of the tournament: 
- 1st Round: Teams = 7, Matches = 3, and 4 teams advance.
- 2nd Round: Teams = 4, Matches = 2, and 2 teams advance.
- 3rd Round: Teams = 2, Matches = 1, and 1 team is declared the winner.
Total number of matches = 3 + 2 + 1 = 6.
Example 2:

Input: n = 14
Output: 13
Explanation: Details of the tournament:
- 1st Round: Teams = 14, Matches = 7, and 7 teams advance.
- 2nd Round: Teams = 7, Matches = 3, and 4 teams advance.
- 3rd Round: Teams = 4, Matches = 2, and 2 teams advance.
- 4th Round: Teams = 2, Matches = 1, and 1 team is declared the winner.
Total number of matches = 7 + 3 + 2 + 1 = 13.
 

Constraints:

1 <= n <= 200

In Each match 1 team gets eliminated, Then to decide winner in n teams we need to eliminate n-1 teams
so the one line answer will be return n-1

class Solution
{
public:
    int numberOfMatches(int n)
    {
        return n - 1;
    }
};


// Source https://leetcode.com/problems/partitioning-into-minimum-number-of-deci-binary-numbers/

A decimal number is called deci-binary if each of its digits is either 0 or 1 without any leading zeros. For example, 101 and 1100 are deci-binary, while 112 and 3001 are not.

Given a string n that represents a positive decimal integer, return the minimum number of positive deci-binary numbers needed so that they sum up to n.

 

Example 1:

Input: n = "32"
Output: 3
Explanation: 10 + 11 + 11 = 32
Example 2:

Input: n = "82734"
Output: 8
Example 3:

Input: n = "27346209830709182346"
Output: 9
 

Constraints:

1 <= n.length <= 105
n consists of only digits.
n does not contain any leading zeros and represents a positive integer.

class Solution
{
public:
    int minPartitions(string n)
    {
        int res = 0;
        for(int i = 0 ; i < n.size() ; i ++)
        {
            res = max(res, n[i] - '0');
        }
        return res;
    }
};


// Source https://leetcode.com/problems/stone-game-vii/

Alice and Bob take turns playing a game, with Alice starting first.

There are n stones arranged in a row. On each player's turn, they can remove either the leftmost stone or the rightmost stone from the row 
and receive points equal to the sum of the remaining stones' values in the row. The winner is the one with the higher score when there are no stones left to remove.

Bob found that he will always lose this game (poor Bob, he always loses), so he decided to minimize the score's difference. Alice's goal is to maximize the difference in the score.

Given an array of integers stones where stones[i] represents the value of the ith stone from the left, return the difference in Alice and Bob's score if they both play optimally.

 

Example 1:

Input: stones = [5,3,1,4,2]
Output: 6
Explanation: 
- Alice removes 2 and gets 5 + 3 + 1 + 4 = 13 points. Alice = 13, Bob = 0, stones = [5,3,1,4].
- Bob removes 5 and gets 3 + 1 + 4 = 8 points. Alice = 13, Bob = 8, stones = [3,1,4].
- Alice removes 3 and gets 1 + 4 = 5 points. Alice = 18, Bob = 8, stones = [1,4].
- Bob removes 1 and gets 4 points. Alice = 18, Bob = 12, stones = [4].
- Alice removes 4 and gets 0 points. Alice = 18, Bob = 12, stones = [].
The score difference is 18 - 12 = 6.
Example 2:

Input: stones = [7,90,5,1,100,10,10,2]
Output: 122
 

Constraints:

n == stones.length
2 <= n <= 1000
1 <= stones[i] <= 1000

class Solution
{
public:
    int dp[1001][1001];

    int solve(int i, int j, int sum, vector<int> &stones)
    {
        if(i >= j) return 0;
        if(i + 1 == j) return max(stones[i], stones[j]);
        if(dp[i][j] != -1) return dp[i][j];
        int diff1 = sum - stones[i] - solve(i + 1, j, sum - stones[i], stones);
        int diff2 = sum - stones[j] - solve(i, j - 1, sum - stones[j], stones);
        return dp[i][j] = max(diff1, diff2);
    }

    int stoneGameVII(vector<int> &stones)
    {
        int sum = accumulate(stones.begin(), stones.end(), 0);
        int n = stones.size();
        memset(dp, -1, sizeof(dp));
        return solve(0, n - 1, sum, stones);
    }
};


// Source https://leetcode.com/problems/maximum-height-by-stacking-cuboids/

Given n cuboids where the dimensions of the ith cuboid is cuboids[i] = [widthi, lengthi, heighti] (0-indexed). Choose a subset of cuboids and place them on each other.

You can place cuboid i on cuboid j if widthi <= widthj and lengthi <= lengthj and heighti <= heightj. You can rearrange any cuboid's dimensions by rotating it to put it on another cuboid.

Return the maximum height of the stacked cuboids.

 

Example 1:



Input: cuboids = [[50,45,20],[95,37,53],[45,23,12]]
Output: 190
Explanation:
Cuboid 1 is placed on the bottom with the 53x37 side facing down with height 95.
Cuboid 0 is placed next with the 45x20 side facing down with height 50.
Cuboid 2 is placed next with the 23x12 side facing down with height 45.
The total height is 95 + 50 + 45 = 190.
Example 2:

Input: cuboids = [[38,25,45],[76,35,3]]
Output: 76
Explanation:
You can't place any of the cuboids on the other.
We choose cuboid 1 and rotate it so that the 35x3 side is facing down and its height is 76.
Example 3:

Input: cuboids = [[7,11,17],[7,17,11],[11,7,17],[11,17,7],[17,7,11],[17,11,7]]
Output: 102
Explanation:
After rearranging the cuboids, you can see that all cuboids have the same dimension.
You can place the 11x7 side down on all cuboids so their heights are 17.
The maximum height of stacked cuboids is 6 * 17 = 102.
 

Constraints:

n == cuboids.length
1 <= n <= 100
1 <= widthi, lengthi, heighti <= 100

class Solution
{
public:
    int n;
    int dp[101][101];

    int recurs(vector<vector<int>> &cuboids, int i, int prev)
    {
        if(i >= n) return 0;
        if(dp[i][prev] != -1) return dp[i][prev];
        bool flag = true;
        for(int j = 0; j < 3; j++)
        {
            if(cuboids[i][j] > cuboids[prev][j])
            {
                flag = false;
                break;
            }
        }
        int res = INT_MIN;
        if(flag) res = max(res, recurs(cuboids, i + 1, i) + cuboids[i][2]);
        res = max(res, recurs(cuboids, i + 1, prev));
        return dp[i][prev] = res;
    }

    int maxHeight(vector<vector<int>> &cuboids)
    {
        n = cuboids.size();
        memset(dp, -1, sizeof(dp));
        for(int i = 0; i < n; i++)
        {
            sort(cuboids[i].begin(), cuboids[i].end());
        }
        sort(cuboids.rbegin(), cuboids.rend());
        int ans = 0;
        for(int i = 0; i < n; i++)
        {
            ans = max(ans, recurs(cuboids, i + 1, i) + cuboids[i][2]);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/reformat-phone-number/

You are given a phone number as a string number. number consists of digits, spaces ' ', and/or dashes '-'.

You would like to reformat the phone number in a certain manner. Firstly, remove all spaces and dashes. 
Then, group the digits from left to right into blocks of length 3 until there are 4 or fewer digits. The final digits are then grouped as follows:

2 digits: A single block of length 2.
3 digits: A single block of length 3.
4 digits: Two blocks of length 2 each.
The blocks are then joined by dashes. Notice that the reformatting process should never produce any blocks of length 1 and produce at most two blocks of length 2.

Return the phone number after formatting.

 

Example 1:

Input: number = "1-23-45 6"
Output: "123-456"
Explanation: The digits are "123456".
Step 1: There are more than 4 digits, so group the next 3 digits. The 1st block is "123".
Step 2: There are 3 digits remaining, so put them in a single block of length 3. The 2nd block is "456".
Joining the blocks gives "123-456".
Example 2:

Input: number = "123 4-567"
Output: "123-45-67"
Explanation: The digits are "1234567".
Step 1: There are more than 4 digits, so group the next 3 digits. The 1st block is "123".
Step 2: There are 4 digits left, so split them into two blocks of length 2. The blocks are "45" and "67".
Joining the blocks gives "123-45-67".
Example 3:

Input: number = "123 4-5678"
Output: "123-456-78"
Explanation: The digits are "12345678".
Step 1: The 1st block is "123".
Step 2: The 2nd block is "456".
Step 3: There are 2 digits left, so put them in a single block of length 2. The 3rd block is "78".
Joining the blocks gives "123-456-78".
 

Constraints:

2 <= number.length <= 100
number consists of digits and the characters '-' and ' '.
There are at least two digits in number.

class Solution
{
public:
    string reformatNumber(string number)
    {
        string nums;
        nums.reserve(100);
        for (auto ch : number)
        {
            if (isdigit(ch)) nums.push_back(ch);
        }
        int n = nums.length();
        string ans;
        if (n == 4)
        {
            for (int i = 0; i < n; i++)
            {
                ans.push_back(nums[i]);
                if (i == 1) ans.push_back('-');
            }
            return ans;
        }
        int count = 0;
        for (int i = 0; i < n; i++)
        {
            ans.push_back(nums[i]);
            count++;
            if (count == 3 && i < n - 1)
            {
                ans.push_back('-');
                count = 0;
                if ((n % 3 == 1) && (i + 4 == n - 1))
                {
                    ans.push_back(nums[i + 1]);
                    ans.push_back(nums[i + 2]);
                    ans.push_back('-');
                    ans.push_back(nums[i + 3]);
                    ans.push_back(nums[i + 4]);
                    return ans;
                }
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/maximum-erasure-value/

You are given an array of positive integers nums and want to erase a subarray containing unique elements. The score you get by erasing the subarray is equal to the sum of its elements.

Return the maximum score you can get by erasing exactly one subarray.

An array b is called to be a subarray of a if it forms a contiguous subsequence of a, that is, if it is equal to a[l],a[l+1],...,a[r] for some (l,r).

 

Example 1:

Input: nums = [4,2,4,5,6]
Output: 17
Explanation: The optimal subarray here is [2,4,5,6].
Example 2:

Input: nums = [5,2,1,2,5,2,1,2,5]
Output: 8
Explanation: The optimal subarray here is [5,2,1] or [1,2,5].
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 104

class Solution
{
public:
    int maximumUniqueSubarray(vector<int> &nums)
    {
        int n = nums.size();
        int i = 0, j = 0;
        unordered_map<int, int> mp;
        int curr = 0;
        int res = 0;
        while(j < n)
        {
            while(mp.count(nums[j]))
            {
                curr -= nums[i];
                mp.erase(nums[i]);
                ++i;
            }
            curr += nums[j];
            mp[nums[j]]++;
            res = max(res, curr);
            ++j;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/jump-game-vi/

You are given a 0-indexed integer array nums and an integer k.

You are initially standing at index 0. In one move, you can jump at most k steps forward without going outside the boundaries of the array. 
That is, you can jump from index i to any index in the range [i + 1, min(n - 1, i + k)] inclusive.

You want to reach the last index of the array (index n - 1). Your score is the sum of all nums[j] for each index j you visited in the array.

Return the maximum score you can get.

 

Example 1:

Input: nums = [1,-1,-2,4,-7,3], k = 2
Output: 7
Explanation: You can choose your jumps forming the subsequence [1,-1,4,3] (underlined above). The sum is 7.
Example 2:

Input: nums = [10,-5,-2,4,0,3], k = 3
Output: 17
Explanation: You can choose your jumps forming the subsequence [10,4,3] (underlined above). The sum is 17.
Example 3:

Input: nums = [1,-5,-20,4,-1,3,-6,-3], k = 2
Output: 0
 

Constraints:

1 <= nums.length, k <= 105
-104 <= nums[i] <= 104

class Solution
{
public:
    int maxResult(vector<int> &nums, int k)
    {
        int n = nums.size();
        vector<int> dp(n);
        dp[0] = nums[0];
        priority_queue<pair<int, int>> pq;
        pq.push({dp[0], 0});
        for(int i = 1; i < n; i++)
        {
            while(i - pq.top().second > k)
            {
                pq.pop();
            }
            dp[i] = pq.top().first + nums[i];
            pq.push({dp[i], i});
        }
        return dp[n - 1];
    }
};


// Source https://leetcode.com/problems/checking-existence-of-edge-length-limited-paths/

An undirected graph of n nodes is defined by edgeList, where edgeList[i] = [ui, vi, disi] denotes an edge between nodes ui and vi with distance disi. 
Note that there may be multiple edges between two nodes.

Given an array queries, where queries[j] = [pj, qj, limitj], your task is to determine for each queries[j] whether there is a path between pj and qj 
such that each edge on the path has a distance strictly less than limitj .

Return a boolean array answer, where answer.length == queries.length and the jth value of answer is true if there is a path for queries[j] is true, and false otherwise.

 

Example 1:


Input: n = 3, edgeList = [[0,1,2],[1,2,4],[2,0,8],[1,0,16]], queries = [[0,1,2],[0,2,5]]
Output: [false,true]
Explanation: The above figure shows the given graph. Note that there are two overlapping edges between 0 and 1 with distances 2 and 16.
For the first query, between 0 and 1 there is no path where each distance is less than 2, thus we return false for this query.
For the second query, there is a path (0 -> 1 -> 2) of two edges with distances less than 5, thus we return true for this query.
Example 2:


Input: n = 5, edgeList = [[0,1,10],[1,2,5],[2,3,9],[3,4,13]], queries = [[0,4,14],[1,4,13]]
Output: [true,false]
Exaplanation: The above figure shows the given graph.
 

Constraints:

2 <= n <= 105
1 <= edgeList.length, queries.length <= 105
edgeList[i].length == 3
queries[j].length == 3
0 <= ui, vi, pj, qj <= n - 1
ui != vi
pj != qj
1 <= disi, limitj <= 109
There may be multiple edges between two nodes.

class Solution
{
public:

    struct DSU
    {
        vector<int> parent;
        vector<int> size;

        DSU(int n)
        {
            parent = vector<int>(n);
            size = vector<int>(n, 1);
            for(int i = 0; i < n; i++)
            {
                parent[i] = i;
            }
        }

        int find(int x)
        {
            if(parent[x] != x) parent[x] = find(parent[x]);
            return parent[x];
        }

        bool join(int a, int b)
        {
            int root_a = find(a);
            int root_b = find(b);
            if (root_a == root_b) return false;
            if (size[root_a] > size[root_b])
            {
                parent[root_b] = root_a;
                size[root_a] += size[root_b];
            }
            else
            {
                parent[root_a] = root_b;
                size[root_b] += size[root_a];
            }
            return true;
        }

        int count(int x)
        {
            return size[x];
        }
    };

    vector<bool> distanceLimitedPathsExist(int n, vector<vector<int>> &nums, vector<vector<int>> &q)
    {
        DSU dsu(n);
        sort(nums.begin(), nums.end(), [](auto & a, auto & b)
        {
            return a[2] < b[2];
        });
        for(int i = 0; i < q.size(); i++)
        {
            q[i].push_back(i);
        }
        sort(q.begin(), q.end(), [](auto & a, auto & b)
        {
            return a[2] < b[2];
        });
        int i = 0;
        int len = nums.size();
        vector<bool> ans(q.size());
        for(auto &v : q)
        {
            while(i < len && nums[i][2] < v[2])
            {
                dsu.join(nums[i][0], nums[i][1]);
                i++;
            }
            if (dsu.find(v[0]) == dsu.find(v[1])) ans[v[3]] = true;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/number-of-students-unable-to-eat-lunch/

The school cafeteria offers circular and square sandwiches at lunch break, referred to by numbers 0 and 1 respectively. 
All students stand in a queue. Each student either prefers square or circular sandwiches.

The number of sandwiches in the cafeteria is equal to the number of students. The sandwiches are placed in a stack. At each step:

If the student at the front of the queue prefers the sandwich on the top of the stack, they will take it and leave the queue.
Otherwise, they will leave it and go to the queue's end.
This continues until none of the queue students want to take the top sandwich and are thus unable to eat.

You are given two integer arrays students and sandwiches where sandwiches[i] is the type of the i​​​​​​th sandwich in the stack (i = 0 is the top of the stack) 
and students[j] is the preference of the j​​​​​​th student in the initial queue (j = 0 is the front of the queue). Return the number of students that are unable to eat.

 

Example 1:

Input: students = [1,1,0,0], sandwiches = [0,1,0,1]
Output: 0 
Explanation:
- Front student leaves the top sandwich and returns to the end of the line making students = [1,0,0,1].
- Front student leaves the top sandwich and returns to the end of the line making students = [0,0,1,1].
- Front student takes the top sandwich and leaves the line making students = [0,1,1] and sandwiches = [1,0,1].
- Front student leaves the top sandwich and returns to the end of the line making students = [1,1,0].
- Front student takes the top sandwich and leaves the line making students = [1,0] and sandwiches = [0,1].
- Front student leaves the top sandwich and returns to the end of the line making students = [0,1].
- Front student takes the top sandwich and leaves the line making students = [1] and sandwiches = [1].
- Front student takes the top sandwich and leaves the line making students = [] and sandwiches = [].
Hence all students are able to eat.
Example 2:

Input: students = [1,1,1,0,0,1], sandwiches = [1,0,0,0,1,1]
Output: 3
 

Constraints:

1 <= students.length, sandwiches.length <= 100
students.length == sandwiches.length
sandwiches[i] is 0 or 1.
students[i] is 0 or 1.

class Solution
{
public:
    int countStudents(vector<int> &students, vector<int> &sandwiches)
    {
        int n = students.size();
        queue<int> q;
        for(int i = 0; i < n; i++) q.push(students[i]);
        for(int i = 0; i < n; i++)
        {
            int sz = q.size();
            while(sandwiches[i] != q.front())
            {
                q.push(q.front());
                q.pop();
                sz--;
                if(sz == 0) return q.size();
            }
            q.pop();
        }
        return 0;
    }
};


// Source https://leetcode.com/problems/average-waiting-time/

There is a restaurant with a single chef. You are given an array customers, where customers[i] = [arrivali, timei]:

arrivali is the arrival time of the ith customer. The arrival times are sorted in non-decreasing order.
timei is the time needed to prepare the order of the ith customer.
When a customer arrives, he gives the chef his order, and the chef starts preparing it once he is idle. 
The customer waits till the chef finishes preparing his order. The chef does not prepare food for more than one customer at a time. 
The chef prepares food for customers in the order they were given in the input.

Return the average waiting time of all customers. Solutions within 10-5 from the actual answer are considered accepted.

 

Example 1:

Input: customers = [[1,2],[2,5],[4,3]]
Output: 5.00000
Explanation:
1) The first customer arrives at time 1, the chef takes his order and starts preparing it immediately at time 1, and finishes at time 3, so the waiting time of the first customer is 3 - 1 = 2.
2) The second customer arrives at time 2, the chef takes his order and starts preparing it at time 3, and finishes at time 8, so the waiting time of the second customer is 8 - 2 = 6.
3) The third customer arrives at time 4, the chef takes his order and starts preparing it at time 8, and finishes at time 11, so the waiting time of the third customer is 11 - 4 = 7.
So the average waiting time = (2 + 6 + 7) / 3 = 5.
Example 2:

Input: customers = [[5,2],[5,4],[10,3],[20,1]]
Output: 3.25000
Explanation:
1) The first customer arrives at time 5, the chef takes his order and starts preparing it immediately at time 5, and finishes at time 7, so the waiting time of the first customer is 7 - 5 = 2.
2) The second customer arrives at time 5, the chef takes his order and starts preparing it at time 7, and finishes at time 11, so the waiting time of the second customer is 11 - 5 = 6.
3) The third customer arrives at time 10, the chef takes his order and starts preparing it at time 11, and finishes at time 14, so the waiting time of the third customer is 14 - 10 = 4.
4) The fourth customer arrives at time 20, the chef takes his order and starts preparing it immediately at time 20, and finishes at time 21, so the waiting time of the fourth customer is 21 - 20 = 1.
So the average waiting time = (2 + 6 + 4 + 1) / 4 = 3.25.
 

Constraints:

1 <= customers.length <= 105
1 <= arrivali, timei <= 104
arrivali <= arrivali+1

class Solution
{
public:
    double averageWaitingTime(vector<vector<int>> &customers)
    {
        int sum = customers[0][0] + customers[0][1];
        double time = (double) customers[0][1];
        for (int i = 1; i < customers.size(); i++)
        {
            if (sum > customers[i][0])
            {
                time += (sum - customers[i][0]);
                sum += customers[i][1];
                time += customers[i][1];
            }
            else
            {
                sum = customers[i][0] + customers[i][1];
                time += customers[i][1];
            }
        }
        return time / customers.size();
    }
};


// Source https://leetcode.com/problems/maximum-binary-string-after-change/

You are given a binary string binary consisting of only 0's or 1's. You can apply each of the following operations any number of times:

Operation 1: If the number contains the substring "00", you can replace it with "10".
For example, "00010" -> "10010"
Operation 2: If the number contains the substring "10", you can replace it with "01".
For example, "00010" -> "00001"
Return the maximum binary string you can obtain after any number of operations. 
Binary string x is greater than binary string y if x's decimal representation is greater than y's decimal representation.

 

Example 1:

Input: binary = "000110"
Output: "111011"
Explanation: A valid transformation sequence can be:
"000110" -> "000101" 
"000101" -> "100101" 
"100101" -> "110101" 
"110101" -> "110011" 
"110011" -> "111011"
Example 2:

Input: binary = "01"
Output: "01"
Explanation: "01" cannot be transformed any further.
 

Constraints:

1 <= binary.length <= 105
binary consist of '0' and '1'.

00 -> 10
010 -> 001 -> 101
0110 -> 0101 -> 0011 -> 1011
01110 -> 01101 -> 01011 -> 00111 -> 10111
011110 -> 011101 -> 011011 -> 010111 -> 001111 -> 101111
000 -> 110
0000 -> 1110
101 -> 101
01 -> 01

字符串中如果只有 1 个’0’， 我们没法变得更大
字符串中如果有 2 个’0’, 分别在 s[i], s[j], 且 i < j, 那我们可以做 s[i] = ‘1’, s[j] = ‘1’, s[i+1] = ‘0’
字符串中如果有多个’0’, 那可以重复步骤 2, 因为进行变换之后，实际上是处于 s[i]的’0’移动到了 s[i+1]的位置上, 而 s[j]处的’0’转换成了’1’
整个过程就是字符串中第一批0中的最后那个0不断后移，后移过程中会把后面的0变成1，后移的次数就是后面出现的0的个数

class Solution
{
public:
    string maximumBinaryString(string b)
    {
        int n = b.length();
        int i = 0;
        while(i < n && b[i] == '1')
            i++;
        if(i == n)
            return b;
        while(i < n && b[i] == '0')
            i++;
        int pos = i - 1, c = 0;
        while(i < n)
        {
            if(b[i] == '0')
                c++;
            i++;
        }
        for(int j = 0; j < n; j++)
        {
            if(j == pos + c)
                b[j] = '0';
            else
                b[j] = '1';
        }
        return b;
    }
};


// Source https://leetcode.com/problems/minimum-adjacent-swaps-for-k-consecutive-ones/

You are given an integer array, nums, and an integer k. nums comprises of only 0's and 1's. In one move, you can choose two adjacent indices and swap their values.

Return the minimum number of moves required so that nums has k consecutive 1's.

 

Example 1:

Input: nums = [1,0,0,1,0,1], k = 2
Output: 1
Explanation: In 1 move, nums could be [1,0,0,0,1,1] and have 2 consecutive 1's.
Example 2:

Input: nums = [1,0,0,0,0,0,1,1], k = 3
Output: 5
Explanation: In 5 moves, the leftmost 1 can be shifted right until nums = [0,0,0,0,0,1,1,1].
Example 3:

Input: nums = [1,1,0,1], k = 2
Output: 0
Explanation: nums already has 2 consecutive 1's.
 

Constraints:

1 <= nums.length <= 105
nums[i] is 0 or 1.
1 <= k <= sum(nums)

保存所有值为1对应的下标，滑动窗口大小为k，左边界为left，右边界为right，中间点为(left + right) / 2，滑动窗口内的1向中间点靠拢
当k为奇数时，中间点只有1个

窗口滑动前总代价为

cost[l, r] =

p[r] - p[l] + p[r - 1] - p[l + 1] + ... + p[m + 1] - p[m - 1] =

(p[r] + p[r - 1] + ... + p[m + 1]) - (p[l] + p[l + 1] + ... + p[m - 1])

窗口滑动后，区间变成了[l + 1, r + 1]，中心则变为m + 1，那么此时的代价为

cost[l + 1, r + 1] =

p[r + 1] - p[l + 1] + p[r] - p[l + 2] + ... + p[m + 2] - p[m] =

(p[r + 1] + p[r] + ... + p[m + 2]) - (p[l + 1] + p[l + 2] + ... + p[m])

对比滑动前后，可以发现

cost[l + 1, r + 1] = cost[l, r] + p[r + 1] - p[m + 1] + p[l] - p[m]

当k为偶数时，中间点有2个，取坐标小的那个

窗口滑动前总代价为

cost[l, r] =

p[r] - p[l] + p[r - 1] - p[l + 1] + ... + p[m + 2] - p[m-1] + p[m + 1] - p[m] = 

(p[r] + p[r - 1] + ... + p[m + 2] + p[m+1]) - (p[l] + p[l + 1] + ... + p[m - 1] + p[m])

窗口滑动后，区间变成了[l + 1, r + 1]，中心则变为m + 1，那么此时的代价为

cost[l + 1, r + 1] =

p[r + 1] - p[l + 1] + p[r] - p[l + 2] + ... + p[m + 3] - p[m] + p[m +2] - p[m+1] =

(p[r + 1] + p[r] + ... + p[m + 3] + p[m + 2]) - (p[l + 1] + p[l + 2] + ... + p[m] + p[m+1])

对比滑动前后，可以发现

cost[l + 1, r + 1] = cost[l, r] + p[r + 1] - p[m+1] + p[l] - p[m+1]

class Solution
{
public:
    int minMoves(vector<int> &nums, int k)
    {
        if(k == 1) return 0;
        vector<int> ind;
        for(int i = 0; i < nums.size(); i++)
        {
            if(nums[i] == 1)
            {
                ind.push_back(i);
            }
        }
        int n = ind.size();
        int left = 0, right = k - 1;
        int mid = (left + right) / 2;
        int res = 0;
        for(int i = left; i <= right; i++)
        {
            res += abs(ind[mid] - (mid - i) - ind[i]);
        }
        int ans = res;
        while(right < n - 1)
        {
            res += (ind[left] - ind[mid]);
            if(k % 2 == 0)
            {
                res += ind[mid] - ind[mid + 1];
            }
            res += ind[right + 1] - ind[mid + 1];
            if(res < ans)
            {
                ans = res;
            }
            left++;
            right++;
            mid++;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/determine-if-string-halves-are-alike/

You are given a string s of even length. Split this string into two halves of equal lengths, and let a be the first half and b be the second half.

Two strings are alike if they have the same number of vowels ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'). Notice that s contains uppercase and lowercase letters.

Return true if a and b are alike. Otherwise, return false.

 

Example 1:

Input: s = "book"
Output: true
Explanation: a = "bo" and b = "ok". a has 1 vowel and b has 1 vowel. Therefore, they are alike.
Example 2:

Input: s = "textbook"
Output: false
Explanation: a = "text" and b = "book". a has 1 vowel whereas b has 2. Therefore, they are not alike.
Notice that the vowel o is counted twice.
 

Constraints:

2 <= s.length <= 1000
s.length is even.
s consists of uppercase and lowercase letters.

class Solution
{
public:

    bool halvesAreAlike(string s)
    {
        int n = s.length();
        int n1 = 0, n2 = 0;
        for(int i = 0; i < n / 2; i++)
        {
            if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || 
               s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')
                ++n1;
        }
        for(int i = n / 2; i < n; i++)
        {
            if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || 
               s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')
                ++n2;
        }
        return n1 == n2;
    }
};


// Source https://leetcode.com/problems/maximum-number-of-eaten-apples/

There is a special kind of apple tree that grows apples every day for n days. On the ith day, the tree grows apples[i] apples that will rot after days[i] days, 
that is on day i + days[i] the apples will be rotten and cannot be eaten. On some days, the apple tree does not grow any apples, which are denoted by apples[i] == 0 and days[i] == 0.

You decided to eat at most one apple a day (to keep the doctors away). Note that you can keep eating after the first n days.

Given two integer arrays days and apples of length n, return the maximum number of apples you can eat.

 

Example 1:

Input: apples = [1,2,3,5,2], days = [3,2,1,4,2]
Output: 7
Explanation: You can eat 7 apples:
- On the first day, you eat an apple that grew on the first day.
- On the second day, you eat an apple that grew on the second day.
- On the third day, you eat an apple that grew on the second day. After this day, the apples that grew on the third day rot.
- On the fourth to the seventh days, you eat apples that grew on the fourth day.
Example 2:

Input: apples = [3,0,0,0,0,2], days = [3,0,0,0,0,2]
Output: 5
Explanation: You can eat 5 apples:
- On the first to the third day you eat apples that grew on the first day.
- Do nothing on the fouth and fifth days.
- On the sixth and seventh days you eat apples that grew on the sixth day.
 

Constraints:

n == apples.length == days.length
1 <= n <= 2 * 104
0 <= apples[i], days[i] <= 2 * 104
days[i] = 0 if and only if apples[i] = 0.

class Solution
{
public:
    struct apple_t
    {
        int value, expired;
        apple_t(int v, int e) : value(v), expired(e) {}
        bool operator<(const apple_t &apple) const
        {
            return expired < apple.expired;
        }
        bool operator>(const apple_t &apple) const
        {
            return expired > apple.expired;
        }
    };

    int eatenApples(vector<int> &apples, vector<int> &days)
    {
        priority_queue<apple_t, vector<apple_t>, greater<apple_t>> pq;
        int i = 0, n = days.size(), res = 0;
        while (i < n || !pq.empty())
        {
            if (i < n && apples[i] > 0)
                pq.emplace(apples[i], i + days[i]);

            while (!pq.empty() && pq.top().expired <= i) pq.pop();

            if (!pq.empty())
            {
                auto apple = pq.top();
                pq.pop();
                apple.value -= 1, res += 1;
                if (apple.value > 0) pq.emplace(apple);
            }

            i++;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/where-will-the-ball-fall/

You have a 2-D grid of size m x n representing a box, and you have n balls. The box is open on the top and bottom sides.

Each cell in the box has a diagonal board spanning two corners of the cell that can redirect a ball to the right or to the left.

A board that redirects the ball to the right spans the top-left corner to the bottom-right corner and is represented in the grid as 1.
A board that redirects the ball to the left spans the top-right corner to the bottom-left corner and is represented in the grid as -1.
We drop one ball at the top of each column of the box. Each ball can get stuck in the box or fall out of the bottom. 
A ball gets stuck if it hits a "V" shaped pattern between two boards or if a board redirects the ball into either wall of the box.

Return an array answer of size n where answer[i] is the column that the ball falls out of at the bottom after dropping the ball from the ith column at the top, or -1 if the ball gets stuck in the box.

 

Example 1:



Input: grid = [[1,1,1,-1,-1],[1,1,1,-1,-1],[-1,-1,-1,1,1],[1,1,1,1,-1],[-1,-1,-1,-1,-1]]
Output: [1,-1,-1,-1,-1]
Explanation: This example is shown in the photo.
Ball b0 is dropped at column 0 and falls out of the box at column 1.
Ball b1 is dropped at column 1 and will get stuck in the box between column 2 and 3 and row 1.
Ball b2 is dropped at column 2 and will get stuck on the box between column 2 and 3 and row 0.
Ball b3 is dropped at column 3 and will get stuck on the box between column 2 and 3 and row 0.
Ball b4 is dropped at column 4 and will get stuck on the box between column 2 and 3 and row 1.
Example 2:

Input: grid = [[-1]]
Output: [-1]
Explanation: The ball gets stuck against the left wall.
Example 3:

Input: grid = [[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1],[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1]]
Output: [0,1,2,3,4,-1]
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 100
grid[i][j] is 1 or -1.

class Solution
{
public:
    int n, m;

    int helper(vector<vector<int>> &grid, int r, int c)
    {
        for(int i = 0; i < n; i++)
        {
            if(grid[r][c] == 1)
            {
                if(c == m - 1) return -1;
                else if(grid[r][c + 1] == -1) return -1;
                else
                {
                    r++;
                    c++;
                }
            }
            else
            {
                if(c == 0) return -1;
                else if(grid[r][c - 1] == 1) return -1;
                else
                {
                    r++;
                    c--;
                }
            }
        }
        return c;
    }

    vector<int> findBall(vector<vector<int>> &grid)
    {
        n = grid.size(), m = grid[0].size();
        vector<int>res;
        for(int i = 0; i < m; i++)
        {
            res.push_back(helper(grid, 0, i));
        }
        return res;
    }
};


// Source https://leetcode.com/problems/maximum-xor-with-an-element-from-array/

You are given an array nums consisting of non-negative integers. You are also given a queries array, where queries[i] = [xi, mi].

The answer to the ith query is the maximum bitwise XOR value of xi and any element of nums that does not exceed mi. 
In other words, the answer is max(nums[j] XOR xi) for all j such that nums[j] <= mi. If all elements in nums are larger than mi, then the answer is -1.

Return an integer array answer where answer.length == queries.length and answer[i] is the answer to the ith query.

 

Example 1:

Input: nums = [0,1,2,3,4], queries = [[3,1],[1,3],[5,6]]
Output: [3,3,7]
Explanation:
1) 0 and 1 are the only two integers not greater than 1. 0 XOR 3 = 3 and 1 XOR 3 = 2. The larger of the two is 3.
2) 1 XOR 2 = 3.
3) 5 XOR 2 = 7.
Example 2:

Input: nums = [5,2,4,6,6,3], queries = [[12,4],[8,1],[6,3]]
Output: [15,-1,5]
 

Constraints:

1 <= nums.length, queries.length <= 105
queries[i].length == 2
0 <= nums[j], xi, mi <= 109

struct Query
{
    int idx;
    int x;
    int m;
};

struct Node
{
    int children[2];
} nodes[1 << 22];

class Solution
{
public:
    int nodes_label;

    vector<int> maximizeXor(vector<int> &nums, vector<vector<int>> &queries)
    {
        vector<Query> qs;
        qs.reserve(queries.size());
        transform(queries.begin(), queries.end(), back_inserter(qs), [&qs](auto & q) -> Query
        {
            return {
                .idx = (int) qs.size(),
                .x = q.front(),
                .m = q.back(),
            };
        });
        sort(qs.begin(), qs.end(), [](auto & lhs, auto & rhs)
        {
            return lhs.m < rhs.m;
        });

        nodes[0].children[0] = nodes[0].children[1] = 0;
        nodes_label = 1;

        sort(nums.begin(), nums.end());
        nums.resize(unique(nums.begin(), nums.end()) - nums.begin());

        vector<int> ans(qs.size(), -1);
        int qs_resolved_idx = 0;
        for (int num : nums)
        {
            while (qs_resolved_idx < qs.size() && qs[qs_resolved_idx].m < num)
            {
                Query &q = qs[qs_resolved_idx];
                ans[q.idx] = resolve(q);
                ++qs_resolved_idx;
            }

            Node *curr = &nodes[0];
            for (int b_idx = 30; b_idx >= 0; --b_idx)
            {
                int b = (num >> b_idx) & 1;
                int &next_idx = curr->children[b];
                if (next_idx == 0)
                {
                    next_idx = nodes_label;
                    nodes[next_idx].children[0] = nodes[next_idx].children[1] = 0;
                    ++nodes_label;
                }
                curr = &nodes[next_idx];
            }
        }
        while (qs_resolved_idx < qs.size())
        {
            Query &q = qs[qs_resolved_idx];
            ans[q.idx] = resolve(q);
            ++qs_resolved_idx;
        }
        return ans;
    }

    int resolve(Query &q)
    {
        if (nodes_label == 1)
            return -1;

        int pair_num = 0;

        Node *curr = &nodes[0];
        for (int b_idx = 30; b_idx >= 0; --b_idx)
        {
            int b = (q.x >> b_idx) & 1;
            int attmpt_next_idx = curr->children[b ^ 1];
            if (attmpt_next_idx == 0)
            {
                attmpt_next_idx = curr->children[b];
                pair_num |= b << b_idx;
            }
            else
            {
                pair_num |= (b ^ 1) << b_idx;
            }
            curr = &nodes[attmpt_next_idx];
        }
        return pair_num ^ q.x;
    }
};


// Source https://leetcode.com/problems/maximum-units-on-a-truck/

You are assigned to put some amount of boxes onto one truck. You are given a 2D array boxTypes, where boxTypes[i] = [numberOfBoxesi, numberOfUnitsPerBoxi]:

numberOfBoxesi is the number of boxes of type i.
numberOfUnitsPerBoxi is the number of units in each box of the type i.
You are also given an integer truckSize, which is the maximum number of boxes that can be put on the truck. 
You can choose any boxes to put on the truck as long as the number of boxes does not exceed truckSize.

Return the maximum total number of units that can be put on the truck.

 

Example 1:

Input: boxTypes = [[1,3],[2,2],[3,1]], truckSize = 4
Output: 8
Explanation: There are:
- 1 box of the first type that contains 3 units.
- 2 boxes of the second type that contain 2 units each.
- 3 boxes of the third type that contain 1 unit each.
You can take all the boxes of the first and second types, and one box of the third type.
The total number of units will be = (1 * 3) + (2 * 2) + (1 * 1) = 8.
Example 2:

Input: boxTypes = [[5,10],[2,5],[4,7],[3,9]], truckSize = 10
Output: 91
 

Constraints:

1 <= boxTypes.length <= 1000
1 <= numberOfBoxesi, numberOfUnitsPerBoxi <= 1000
1 <= truckSize <= 106

class Solution
{
public:

    int maximumUnits(vector<vector<int>> &boxTypes, int truckSize)
    {
        int n = boxTypes.size();
        sort(boxTypes.begin(), boxTypes.end(), [](const vector<int> &a, const vector<int> &b)
        {
            return a[1] > b[1];
        });
        int res = 0;
        for(int i = 0; i < n; i++)
        {
            int boxes = boxTypes[i][0];
            int unitsPer = boxTypes[i][1];
            if(truckSize > boxes)
            {
                truckSize -= boxes;
                res += boxes * unitsPer;
            }
            else
            {
                res += (truckSize) * unitsPer;
                break;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/count-good-meals/

A good meal is a meal that contains exactly two different food items with a sum of deliciousness equal to a power of two.

You can pick any two different foods to make a good meal.

Given an array of integers deliciousness where deliciousness[i] is the deliciousness of the i​​​​​​th​​​​​​​​ item of food, return the number of different good meals you can make from this list modulo 109 + 7.

Note that items with different indices are considered different even if they have the same deliciousness value.

 

Example 1:

Input: deliciousness = [1,3,5,7,9]
Output: 4
Explanation: The good meals are (1,3), (1,7), (3,5) and, (7,9).
Their respective sums are 4, 8, 8, and 16, all of which are powers of 2.
Example 2:

Input: deliciousness = [1,1,1,3,3,3,7]
Output: 15
Explanation: The good meals are (1,1) with 3 ways, (1,3) with 9 ways, and (1,7) with 3 ways.
 

Constraints:

1 <= deliciousness.length <= 105
0 <= deliciousness[i] <= 220

class Solution
{
public:
    int countPairs(vector<int> &deliciousness)
    {
        if (deliciousness.size() < 2) return 0;
        long res = 0;
        const int mod = 1e9 + 7;
        sort(deliciousness.begin(), deliciousness.end());
        int maxTwo = ceil(log2(deliciousness[deliciousness.size() - 1] + deliciousness[deliciousness.size() - 2]));
        unordered_map<int, int>mp;
        mp[deliciousness[0]]++;
        for(int i = 1; i < deliciousness.size(); i++)
        {
            int num = deliciousness[i];
            for(int j = 0; j <= maxTwo; j++)
            {
                int power = pow(2, j);
                int req = (power - num);
                if(mp.find(req) != mp.end())
                {
                    res += mp[req];
                }
            }
            mp[num]++;
        }
        return res % mod;
    }
};


// Source https://leetcode.com/problems/ways-to-split-array-into-three-subarrays/

A split of an integer array is good if:

The array is split into three non-empty contiguous subarrays - named left, mid, right respectively from left to right.
The sum of the elements in left is less than or equal to the sum of the elements in mid, and the sum of the elements in mid is less than or equal to the sum of the elements in right.
Given nums, an array of non-negative integers, return the number of good ways to split nums. As the number may be too large, return it modulo 109 + 7.

 

Example 1:

Input: nums = [1,1,1]
Output: 1
Explanation: The only good way to split nums is [1] [1] [1].
Example 2:

Input: nums = [1,2,2,2,5,0]
Output: 3
Explanation: There are three good ways of splitting nums:
[1] [2] [2,2,5,0]
[1] [2,2] [2,5,0]
[1,2] [2,2] [5,0]
Example 3:

Input: nums = [3,2,1]
Output: 0
Explanation: There is no good way to split nums.
 

Constraints:

3 <= nums.length <= 105
0 <= nums[i] <= 104

class Solution
{
public:

    int left_bound( int start, int end, int i, vector<int> &nums)
    {
        int bound = end + 1;
        while(start <= end)
        {
            int mid = start + (end - start) / 2 ;
            if( (nums[mid] - nums[i]) < nums[i] ) start = mid + 1;
            else
            {
                bound = mid ;
                end = mid - 1;
            }
        }
        return bound;
    }

    int right_bound( int start, int end, int j, vector<int> &nums)
    {
        int bound = start - 1;
        int n = nums.size();
        while(start <= end)
        {
            int mid = start + (end - start) / 2;
            if( (nums[n - 1] - nums[mid]) < (nums[mid] - nums[j]) ) end = mid - 1;
            else
            {
                bound  = mid ;
                start = mid + 1;
            }
        }
        return bound ;
    }

    int waysToSplit(vector<int> &nums)
    {
        for( int i = 1 ; i < nums.size() ; i++)
        {
            nums[i] += nums[i - 1];
        }
        const int mod = 1e9 + 7 ;
        int n = nums.size() ;
        int ans = 0 ;
        for( int i = 0 ; i < n - 2 ; i++)
        {
            int left_side =  left_bound(i + 1, n - 2, i, nums);
            int right_side = right_bound(i + 1, n - 2, i, nums);
            if(right_side >= left_side)
            {
                ans = ans + (right_side - left_side + 1) % mod;
                ans = ans % mod;
            }
        }
        return ans;
    }
};



// Source https://leetcode.com/problems/minimum-operations-to-make-a-subsequence/

You are given an array target that consists of distinct integers and another integer array arr that can have duplicates.

In one operation, you can insert any integer at any position in arr. For example, if arr = [1,4,1,2], you can add 3 in the middle and make it [1,4,3,1,2]. 
Note that you can insert the integer at the very beginning or end of the array.

Return the minimum number of operations needed to make target a subsequence of arr.

A subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order. 
For example, [2,7,4] is a subsequence of [4,2,3,7,2,1,4] (the underlined elements), while [2,4,2] is not.

 

Example 1:

Input: target = [5,1,3], arr = [9,4,2,3,4]
Output: 2
Explanation: You can add 5 and 1 in such a way that makes arr = [5,9,4,1,2,3,4], then target will be a subsequence of arr.
Example 2:

Input: target = [6,4,8,1,3,2], arr = [4,7,6,2,3,8,6,1]
Output: 3
 

Constraints:

1 <= target.length, arr.length <= 105
1 <= target[i], arr[i] <= 109
target contains no duplicates.

1 2 8 3 2 5 6 7 9 6 5 8 9
1 2 3 5 6 7 8 9

class Solution
{
public:

    int LIS(vector<int> &nums)
    {
        vector<int> seq;
        for(int i = 0; i < nums.size(); ++i)
        {
            auto itr = lower_bound(seq.begin(), seq.end(), nums[i]);
            if (itr == seq.end()) seq.push_back(nums[i]);
            else *itr = nums[i];
        }
        return seq.size();
    }

    int minOperations(vector<int> &target, vector<int> &arr)
    {
        unordered_map<int, int> mp;
        for(int i = 0; i < target.size(); ++i) mp[target[i]] = i;
        vector<int> nums;
        nums.reserve(10000);
        for(int i = 0 ; i < arr.size() ; ++i )
        {
            if(mp.find(arr[i]) != mp.end()) nums.push_back(mp[arr[i]]);
        }
        return target.size() - LIS(nums);
    }
};


// Source https://leetcode.com/problems/calculate-money-in-leetcode-bank/

Hercy wants to save money for his first car. He puts money in the Leetcode bank every day.

He starts by putting in $1 on Monday, the first day. Every day from Tuesday to Sunday, he will put in $1 more than the day before. 
On every subsequent Monday, he will put in $1 more than the previous Monday.
Given n, return the total amount of money he will have in the Leetcode bank at the end of the nth day.

 

Example 1:

Input: n = 4
Output: 10
Explanation: After the 4th day, the total is 1 + 2 + 3 + 4 = 10.
Example 2:

Input: n = 10
Output: 37
Explanation: After the 10th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4) = 37. Notice that on the 2nd Monday, Hercy only puts in $2.
Example 3:

Input: n = 20
Output: 96
Explanation: After the 20th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4 + 5 + 6 + 7 + 8) + (3 + 4 + 5 + 6 + 7 + 8) = 96.
 

Constraints:

1 <= n <= 1000

class Solution
{
public:
    int totalMoney(int n)
    {
        if(n < 8) return (n * (n + 1)) / 2;
        int ans = 0;
        int a = 1;
        while(n > 0)
        {
            if (n >= 7)
            {
                int temp = a + 6;
                ans += (temp * (temp + 1)) / 2 - ((a - 1) * a) / 2;
                n -= 7;
                a++;
            }
            else
            {
                int temp = a;
                while (n > 0)
                {
                    ans += temp;
                    ++temp;
                    --n;
                }
                break;
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/maximum-score-from-removing-substrings/

You are given a string s and two integers x and y. You can perform two types of operations any number of times.

Remove substring "ab" and gain x points.
For example, when removing "ab" from "cabxbae" it becomes "cxbae".
Remove substring "ba" and gain y points.
For example, when removing "ba" from "cabxbae" it becomes "cabxe".
Return the maximum points you can gain after applying the above operations on s.

 

Example 1:

Input: s = "cdbcbbaaabab", x = 4, y = 5
Output: 19
Explanation:
- Remove the "ba" underlined in "cdbcbbaaabab". Now, s = "cdbcbbaaab" and 5 points are added to the score.
- Remove the "ab" underlined in "cdbcbbaaab". Now, s = "cdbcbbaa" and 4 points are added to the score.
- Remove the "ba" underlined in "cdbcbbaa". Now, s = "cdbcba" and 5 points are added to the score.
- Remove the "ba" underlined in "cdbcba". Now, s = "cdbc" and 5 points are added to the score.
Total score = 5 + 4 + 5 + 5 = 19.
Example 2:

Input: s = "aabbaaxybbaabb", x = 5, y = 4
Output: 20
 

Constraints:

1 <= s.length <= 105
1 <= x, y <= 104
s consists of lowercase English letters.

一个大的字符串分解成若干个只有'a'和’b‘组成的子字符串

bbaaabab 3个ba + 1个ab 或者 2个ba + 2个ab
abaaabba 2个ba + 1个ab 或者 1个ba + 2个ab

每个只有'a'和’b‘组成的子字符串可以配对的a和b由出现次数较少的字符确定
如果x < y，优先配对ba
如果x > y，优先配对ab

class Solution
{
public:
    int maximumGain(string s, int x, int y)
    {
        int n = s.size();
        int ans = 0;
        int lim = n, del = 1, init = 0; // 优先配对ab
        if(x < y)
        {
            lim = -1;
            del = -1;
            init = n - 1;
            swap(x, y); // 优先配对ba
        }
        int a = 0, b = 0;
        for(int i = init; i != lim; i += del)
        {
            if(s[i] == 'a')
                a++;
            else if(s[i] == 'b')
            {
                if(a)
                {
                    ans += x;
                    a--;
                }
                else
                    b++;
            }
            else
            {
                ans += min(a, b) * y;
                a = 0;
                b = 0;
            }
        };
        return ans + min(a, b) * y;
    }
};


// Source https://leetcode.com/problems/construct-the-lexicographically-largest-valid-sequence/

Given an integer n, find a sequence that satisfies all of the following:

The integer 1 occurs once in the sequence.
Each integer between 2 and n occurs twice in the sequence.
For every integer i between 2 and n, the distance between the two occurrences of i is exactly i.
The distance between two numbers on the sequence, a[i] and a[j], is the absolute difference of their indices, |j - i|.

Return the lexicographically largest sequence. It is guaranteed that under the given constraints, there is always a solution.

A sequence a is lexicographically larger than a sequence b (of the same length) if in the first position where a and b differ, sequence a has a number greater than the corresponding number in b. 
For example, [0,1,9,0] is lexicographically larger than [0,1,5,6] because the first position they differ is at the third number, and 9 is greater than 5.

 

Example 1:

Input: n = 3
Output: [3,1,2,3,2]
Explanation: [2,3,2,1,3] is also a valid sequence, but [3,1,2,3,2] is the lexicographically largest valid sequence.
Example 2:

Input: n = 5
Output: [5,3,1,4,3,5,2,4,2]
 

Constraints:

1 <= n <= 20

class Solution
{
public:
    int n;

    bool dfs(int idx, vector<int> &seen, vector<int> &ans)
    {
        if(idx == ans.size()) return true;
        if(ans[idx] > 0) return dfs(idx + 1, seen, ans);
        for(int i = n; i >= 1; i--)
        {
            if(seen[i]) continue;
            if(i != 1 && (i + idx >= ans.size() || ans[i + idx] > 0)) continue;
            seen[i] = 1;
            ans[idx] = i;
            if(i != 1) ans[idx + i] = i;
            if(dfs(idx + 1, seen, ans)) return true;
            seen[i] = 0;
            ans[idx] = 0;
            if(i != 1) ans[idx + i] = 0;
        }
        return false;
    }
    
    vector<int> constructDistancedSequence(int n)
    {
        this->n = n;
        vector<int> seen(n + 1);
        vector<int> ans (2 * n - 1);
        dfs(0, seen, ans);
        return ans;
    }
};


// Source https://leetcode.com/problems/number-of-ways-to-reconstruct-a-tree/

You are given an array pairs, where pairs[i] = [xi, yi], and:

There are no duplicates.
xi < yi
Let ways be the number of rooted trees that satisfy the following conditions:

The tree consists of nodes whose values appeared in pairs.
A pair [xi, yi] exists in pairs if and only if xi is an ancestor of yi or yi is an ancestor of xi.
Note: the tree does not have to be a binary tree.
Two ways are considered to be different if there is at least one node that has different parents in both ways.

Return:

0 if ways == 0
1 if ways == 1
2 if ways > 1
A rooted tree is a tree that has a single root node, and all edges are oriented to be outgoing from the root.

An ancestor of a node is any node on the path from the root to that node (excluding the node itself). The root has no ancestors.

 

Example 1:


Input: pairs = [[1,2],[2,3]]
Output: 1
Explanation: There is exactly one valid rooted tree, which is shown in the above figure.
Example 2:


Input: pairs = [[1,2],[2,3],[1,3]]
Output: 2
Explanation: There are multiple valid rooted trees. Three of them are shown in the above figures.
Example 3:

Input: pairs = [[1,2],[2,3],[2,4],[1,5]]
Output: 0
Explanation: There are no valid rooted trees.
 

Constraints:

1 <= pairs.length <= 105
1 <= xi < yi <= 500
The elements in pairs are unique.

[xi, yi] 表示 xi, yi是一条路径上的两个点，如何确定哪个是祖先节点，哪个是后代节点
统计xi, yi在pairs中出现的次数degreeX, degreeY
如果degreeX > degreeY，则说明xi是祖先节点，yi是后代节点
如果degreeX < degreeY，则说明yi是祖先节点，xi是后代节点
祖先节点中的哪个节点刚好是父亲节点？degree刚好大于等于当前节点的祖先节点就是父亲节点

class Solution
{
public:
    int checkWays(vector<vector<int>> &pairs)
    {
        unordered_map<int, unordered_set<int>> adj;
        for(int i = 0; i < pairs.size(); i++)
        {
            adj[pairs[i][0]].insert(pairs[i][1]);
            adj[pairs[i][1]].insert(pairs[i][0]);
        }
        int totalNodes = adj.size();
        int result = 1;
        priority_queue<pair<int, int>> pq;
        for(auto &[node, neighbours] : adj)
        {
            pq.push( {neighbours.size(), node} );
        }
        unordered_set<int> visited;
        // 从根节点开始，也就是从上到下
        while(!pq.empty())
        {
            auto p = pq.top();
            pq.pop();
            int degree = p.first;
            int currNode = p.second;

            int parent = -1;
            int parentDegree = INT_MAX;
            for(auto neighbour : adj[currNode])
            {
                if(visited.count(neighbour) && adj[neighbour].size() < parentDegree && adj[neighbour].size() >= degree)
                {
                    parent = neighbour;
                    parentDegree = adj[neighbour].size();
                }
            }

            visited.insert(currNode);

            // 如果没找到parent，检查当前节点是否是root节点
            if(parent == -1)
            {
                if(degree != totalNodes - 1) return 0;
                continue;
            }
            // 如果当前节点不是root节点，检查当前节点的neighbour是否也出现在parent节点的neighbour中
            for(auto neighbour : adj[currNode])
            {
                if(neighbour == parent) continue;
                if(!adj[parent].count(neighbour)) return 0;
            }
            // 如果parent节点的degree与当前节点的degree相同，则parent与当前节点其实可以互换位置
            if(degree == parentDegree)
                result = 2;
        }
        return result;
    }
};


// Source https://leetcode.com/problems/decode-xored-array/

There is a hidden integer array arr that consists of n non-negative integers.

It was encoded into another integer array encoded of length n - 1, such that encoded[i] = arr[i] XOR arr[i + 1]. For example, if arr = [1,0,2,1], then encoded = [1,2,3].

You are given the encoded array. You are also given an integer first, that is the first element of arr, i.e. arr[0].

Return the original array arr. It can be proved that the answer exists and is unique.

 

Example 1:

Input: encoded = [1,2,3], first = 1
Output: [1,0,2,1]
Explanation: If arr = [1,0,2,1], then first = 1 and encoded = [1 XOR 0, 0 XOR 2, 2 XOR 1] = [1,2,3]
Example 2:

Input: encoded = [6,2,7,3], first = 4
Output: [4,2,0,7,4]
 

Constraints:

2 <= n <= 104
encoded.length == n - 1
0 <= encoded[i] <= 105
0 <= first <= 105

class Solution
{
public:
    vector<int> decode(vector<int> &encoded, int first)
    {
        vector<int> ans(encoded.size() + 1);
        ans[0] = first;
        for(int i = 0; i < encoded.size(); i++)
        {
            ans[i + 1] = encoded[i] ^ ans[i];
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/swapping-nodes-in-a-linked-list/

You are given the head of a linked list, and an integer k.

Return the head of the linked list after swapping the values of the kth node from the beginning and the kth node from the end (the list is 1-indexed).

 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [1,4,3,2,5]
Example 2:

Input: head = [7,9,6,6,7,8,3,0,9,5], k = 5
Output: [7,9,6,6,8,7,3,0,9,5]
 

Constraints:

The number of nodes in the list is n.
1 <= k <= n <= 105
0 <= Node.val <= 100

class Solution
{
public:
    ListNode *swapNodes(ListNode *head, int k)
    {
        ListNode *node =  head;
        for(int i = 0; i < k - 1; i++)
        {
            node = node->next;
        }
        ListNode *beginNode = node;
        ListNode *endNode = head;
        while(node->next != NULL)
        {
            node = node->next;
            endNode = endNode->next;
        }
        swap(beginNode->val, endNode->val);
        return head;
    }
};


// Source https://leetcode.com/problems/minimize-hamming-distance-after-swap-operations/

You are given two integer arrays, source and target, both of length n. You are also given an array allowedSwaps 
where each allowedSwaps[i] = [ai, bi] indicates that you are allowed to swap the elements at index ai and index bi (0-indexed) of array source. 
Note that you can swap elements at a specific pair of indices multiple times and in any order.

The Hamming distance of two arrays of the same length, source and target, is the number of positions where the elements are different. 
Formally, it is the number of indices i for 0 <= i <= n-1 where source[i] != target[i] (0-indexed).

Return the minimum Hamming distance of source and target after performing any amount of swap operations on array source.

 

Example 1:

Input: source = [1,2,3,4], target = [2,1,4,5], allowedSwaps = [[0,1],[2,3]]
Output: 1
Explanation: source can be transformed the following way:
- Swap indices 0 and 1: source = [2,1,3,4]
- Swap indices 2 and 3: source = [2,1,4,3]
The Hamming distance of source and target is 1 as they differ in 1 position: index 3.
Example 2:

Input: source = [1,2,3,4], target = [1,3,2,4], allowedSwaps = []
Output: 2
Explanation: There are no allowed swaps.
The Hamming distance of source and target is 2 as they differ in 2 positions: index 1 and index 2.
Example 3:

Input: source = [5,1,2,4,3], target = [1,5,4,2,3], allowedSwaps = [[0,4],[4,2],[1,3],[1,4]]
Output: 0
 

Constraints:

n == source.length == target.length
1 <= n <= 105
1 <= source[i], target[i] <= 105
0 <= allowedSwaps.length <= 105
allowedSwaps[i].length == 2
0 <= ai, bi <= n - 1
ai != bi

class Solution
{
public:

    struct DSU
    {
        vector<int> parent;
        vector<int> size;

        DSU(int n)
        {
            parent = vector<int>(n);
            size = vector<int>(n, 1);
            for(int i = 0; i < n; i++)
            {
                parent[i] = i;
            }
        }

        int find(int x)
        {
            if(parent[x] != x) parent[x] = find(parent[x]);
            return parent[x];
        }

        bool join(int a, int b)
        {
            int root_a = find(a);
            int root_b = find(b);
            if (root_a == root_b) return false;
            if (size[root_a] > size[root_b])
            {
                parent[root_b] = root_a;
                size[root_a] += size[root_b];
            }
            else
            {
                parent[root_a] = root_b;
                size[root_b] += size[root_a];
            }
            return true;
        }

        int count(int x)
        {
            return size[x];
        }
    };

    int minimumHammingDistance(vector<int> &source, vector<int> &target, vector<vector<int>> &allowedSwaps)
    {
        int n = source.size();
        DSU dsu(n);
        for(auto &v : allowedSwaps) dsu.join(v[0], v[1]);
        unordered_map<int, unordered_multiset<int>> valueGroups;
        for(int i = 0; i < n; ++i)
        {
            valueGroups[dsu.find(i)].insert(source[i]);
        }
        int res = 0;
        for(int i = 0; i < n; ++i)
        {
            int tmpP = dsu.find(i);
            auto itr = valueGroups[tmpP].find(target[i]);
            if(itr == valueGroups[tmpP].end()) ++res;
            else
                valueGroups[tmpP].erase(itr);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/find-minimum-time-to-finish-all-jobs/

You are given an integer array jobs, where jobs[i] is the amount of time it takes to complete the ith job.

There are k workers that you can assign jobs to. Each job should be assigned to exactly one worker. 
The working time of a worker is the sum of the time it takes to complete all jobs assigned to them. 
Your goal is to devise an optimal assignment such that the maximum working time of any worker is minimized.

Return the minimum possible maximum working time of any assignment.

 

Example 1:

Input: jobs = [3,2,3], k = 3
Output: 3
Explanation: By assigning each person one job, the maximum time is 3.
Example 2:

Input: jobs = [1,2,4,7,8], k = 2
Output: 11
Explanation: Assign the jobs the following way:
Worker 1: 1, 2, 8 (working time = 1 + 2 + 8 = 11)
Worker 2: 4, 7 (working time = 4 + 7 = 11)
The maximum working time is 11.
 

Constraints:

1 <= k <= jobs.length <= 12
1 <= jobs[i] <= 107

Input: jobs = [5,5,4,4,4], k = 5
5个job分配给5个worker，有5^5=625*5=3125种分配方案，其中有很多方案是等价的，
分给2个worker[5,5], [4,4,4]，有5 * 4 = 20种方案，这些方案是等价的
分给3个worker[5,5], [4,4], [4]，有5 * 4 * 3 = 60种方案，这些方案是等价的

vec[i] += jobs[idx];
递归调用
vec[i] -= jobs[idx];
vec[i] 重新变为0时之所以要break，是因为接下来对vec[i+1] += jobs[idx]实际上是重复先前的vec[i] += jobs[idx]等一系列过程，并不会使得ans更小

class Solution
{
public:

    bool check(vector<int> &jobs, vector<long long> &vec, int idx, long long val)
    {
        if(idx >= jobs.size()) return true;
        long long cur = jobs[idx];
        for(int i = 0; i < vec.size(); i++)
        {
            if((vec[i] + cur) <= val)
            {
                vec[i] += cur;
                if(check(jobs, vec, idx + 1, val)) return true;
                vec[i] -= cur;
                if(vec[i] == 0) break;
            }
        }
        return false;
    }

    int minimumTimeRequired(vector<int> &jobs, int k)
    {
        long long l = *max_element(jobs.begin(), jobs.end());
        long long r = accumulate(jobs.begin(), jobs.end(), 0);
        while(l < r)
        {
            long long mid = l + (r - l) / 2;
            vector<long long>vec(k, 0);
            if(check(jobs, vec, 0, mid))
            {
                r = mid;
            }
            else
                l = mid + 1;
        }
        return l;
    }
};


// Source https://leetcode.com/problems/number-of-rectangles-that-can-form-the-largest-square/

You are given an array rectangles where rectangles[i] = [li, wi] represents the ith rectangle of length li and width wi.

You can cut the ith rectangle to form a square with a side length of k if both k <= li and k <= wi. 
For example, if you have a rectangle [4,6], you can cut it to get a square with a side length of at most 4.

Let maxLen be the side length of the largest square you can obtain from any of the given rectangles.

Return the number of rectangles that can make a square with a side length of maxLen.

 

Example 1:

Input: rectangles = [[5,8],[3,9],[5,12],[16,5]]
Output: 3
Explanation: The largest squares you can get from each rectangle are of lengths [5,3,5,5].
The largest possible square is of length 5, and you can get it out of 3 rectangles.
Example 2:

Input: rectangles = [[2,3],[3,7],[4,3],[3,7]]
Output: 3
 

Constraints:

1 <= rectangles.length <= 1000
rectangles[i].length == 2
1 <= li, wi <= 109
li != wi

class Solution
{
public:
    int countGoodRectangles(vector<vector<int>> &rectangles)
    {
        int n = rectangles.size();
        vector<int> minVec;
        minVec.reserve(1000);
        for (auto &v : rectangles)
        {
            minVec.push_back(min(v[0], v[1]));
        }
        int res = 0;
        int mxVal = 0;
        for (auto val : minVec)
        {
            if (val > mxVal) { mxVal = val; res = 1; }
            else if (val == mxVal) { ++res; }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/tuple-with-same-product/

Given an array nums of distinct positive integers, return the number of tuples (a, b, c, d) such that a * b = c * d where a, b, c, and d are elements of nums, and a != b != c != d.

 

Example 1:

Input: nums = [2,3,4,6]
Output: 8
Explanation: There are 8 valid tuples:
(2,6,3,4) , (2,6,4,3) , (6,2,3,4) , (6,2,4,3)
(3,4,2,6) , (4,3,2,6) , (3,4,6,2) , (4,3,6,2)
Example 2:

Input: nums = [1,2,4,5,10]
Output: 16
Explanation: There are 16 valid tuples:
(1,10,2,5) , (1,10,5,2) , (10,1,2,5) , (10,1,5,2)
(2,5,1,10) , (2,5,10,1) , (5,2,1,10) , (5,2,10,1)
(2,10,4,5) , (2,10,5,4) , (10,2,4,5) , (10,2,5,4)
(4,5,2,10) , (4,5,10,2) , (5,4,2,10) , (5,4,10,2)
 

Constraints:

1 <= nums.length <= 1000
1 <= nums[i] <= 104
All elements in nums are distinct.

每个 (a, b, c, d) 有7个等价的组合
 (a, b, c, d)  (a, b, d, c)  (b, a, c, d)  (b, a, d, c) 
 (c, d, a, b)  (c, d, b, a) (d, c, a, b) (d, c, b, a) 

freq[m] = n 表示有n对(i, j) 满足nums[i] * nums[j] = m
从n对中随机选择2对组成 (a, b, c, d) ，共有C(n, 2)种，也等于(n - 1) + (n - 2) + ... + 2 + 1 = (n - 1) * n / 2

class Solution
{
public:
    int tupleSameProduct(vector<int> &nums)
    {
        int count = 0;
        int n = nums.size();
        unordered_map<int, int> freq;
        for(int i = 0; i < n; i++)
        {
            for(int j = i + 1; j < n; j++)
            {
                freq[nums[i]*nums[j]]++;
            }
        }
        for(auto x : freq)
        {
            count += (8 * ( ((x.second - 1) * x.second) / 2 ));
        }
        return count;
    }
};


// Source https://leetcode.com/problems/largest-submatrix-with-rearrangements/

You are given a binary matrix matrix of size m x n, and you are allowed to rearrange the columns of the matrix in any order.

Return the area of the largest submatrix within matrix where every element of the submatrix is 1 after reordering the columns optimally.

 

Example 1:


Input: matrix = [[0,0,1],[1,1,1],[1,0,1]]
Output: 4
Explanation: You can rearrange the columns as shown above.
The largest submatrix of 1s, in bold, has an area of 4.
Example 2:


Input: matrix = [[1,0,1,0,1]]
Output: 3
Explanation: You can rearrange the columns as shown above.
The largest submatrix of 1s, in bold, has an area of 3.
Example 3:

Input: matrix = [[1,1,0],[1,0,1]]
Output: 2
Explanation: Notice that you must rearrange entire columns, and there is no way to make a submatrix of 1s larger than an area of 2.
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m * n <= 105
matrix[i][j] is either 0 or 1.

matrix[i][j] 保存从[i][j]向上连续为1的个数

class Solution
{
public:
    int largestSubmatrix(vector<vector<int>> &matrix)
    {
        int n = matrix.size(), m = matrix[0].size();
        for(int i = 1; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                if(matrix[i][j] != 0)
                    matrix[i][j] += matrix[i - 1][j];
            }
        }
        int res = 0;
        for(int i = 0; i < n; i++)
        {
            sort(matrix[i].begin(), matrix[i].end(), greater<int>());
            for(int j = 0; j < m; j++)
            {
                res = max(res, (j + 1) * matrix[i][j]);
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/cat-and-mouse-ii/

A game is played by a cat and a mouse named Cat and Mouse.

The environment is represented by a grid of size rows x cols, where each element is a wall, floor, player (Cat, Mouse), or food.

Players are represented by the characters 'C'(Cat),'M'(Mouse).
Floors are represented by the character '.' and can be walked on.
Walls are represented by the character '#' and cannot be walked on.
Food is represented by the character 'F' and can be walked on.
There is only one of each character 'C', 'M', and 'F' in grid.
Mouse and Cat play according to the following rules:

Mouse moves first, then they take turns to move.
During each turn, Cat and Mouse can jump in one of the four directions (left, right, up, down). They cannot jump over the wall nor outside of the grid.
catJump, mouseJump are the maximum lengths Cat and Mouse can jump at a time, respectively. Cat and Mouse can jump less than the maximum length.
Staying in the same position is allowed.
Mouse can jump over Cat.
The game can end in 4 ways:

If Cat occupies the same position as Mouse, Cat wins.
If Cat reaches the food first, Cat wins.
If Mouse reaches the food first, Mouse wins.
If Mouse cannot get to the food within 1000 turns, Cat wins.
Given a rows x cols matrix grid and two integers catJump and mouseJump, return true if Mouse can win the game if both Cat and Mouse play optimally, otherwise return false.

 

Example 1:


Input: grid = ["####F","#C...","M...."], catJump = 1, mouseJump = 2
Output: true
Explanation: Cat cannot catch Mouse on its turn nor can it get the food before Mouse.
Example 2:


Input: grid = ["M.C...F"], catJump = 1, mouseJump = 4
Output: true
Example 3:

Input: grid = ["M.C...F"], catJump = 1, mouseJump = 3
Output: false
 

Constraints:

rows == grid.length
cols = grid[i].length
1 <= rows, cols <= 8
grid[i][j] consist only of characters 'C', 'M', 'F', '.', and '#'.
There is only one of each character 'C', 'M', and 'F' in grid.
1 <= catJump, mouseJump <= 8

class Solution
{
public:
    struct Node
    {
        int mouseX, mouseY, catX, catY, turn;
        Node(int mx, int my, int cx, int cy, int t) : mouseX(mx), mouseY(my), catX(cx), catY(cy), turn(t) {}
    };

    bool canMouseWin(vector<string> &grid, int catJump, int mouseJump)
    {
        int m = grid.size(), n = grid[0].size();
        bool dp[2][m][n][m][n];
        memset(dp, 0, sizeof(dp));
        int mr, mc, cr, cc, fr, fc;
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(grid[i][j] == 'M')
                {
                    mr = i;
                    mc = j;
                }
                else if(grid[i][j] == 'C')
                {
                    cr = i;
                    cc = j;
                }
                else if(grid[i][j] == 'F')
                {
                    fr = i;
                    fc = j;
                }
            }
        }
        queue<Node> q;
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(grid[i][j] != 'F' && grid[i][j] != '#')
                {
                    dp[1][fr][fc][i][j] = true;
                    q.push(Node(fr, fc, i, j, 1));
                }
            }
        }
        int out_degree[m][n][m][n];
        int cat_degree[m][n][m][n];
        memset(out_degree, 0, sizeof(out_degree));
        memset(cat_degree, 0, sizeof(cat_degree));
        vector<vector<int>> moves{{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        for(int mx = 0; mx < m; mx++)
        {
            for(int my = 0; my < n; my++)
            {
                if(grid[mx][my] == '#') continue;
                for(int cx = 0; cx < m; cx++)
                {
                    for(int cy = 0; cy < n; cy++)
                    {
                        if(grid[cx][cy] == '#') continue;
                        cat_degree[mx][my][cx][cy] = 1;    // stay in the same position
                        for(auto &dir : moves)
                        {
                            for(int step = 1; step <= catJump; step++)
                            {
                                int r = cx + step * dir[0];
                                int c = cy + step * dir[1];
                                if (r < 0 || r >= m || c < 0 || c >= n) break;
                                if(grid[r][c] == '#') break; // reach a wall, stop!
                                cat_degree[mx][my][cx][cy] += 1;  
                            }
                        }
                    }
                }
            }
        }
        int d = 0;
        while(!q.empty() && d < 1000)
        {
            int sz = q.size();
            while(sz-- > 0)
            {
                auto node = q.front();
                q.pop();
                if(node.turn == 1)
                {
                    if(!(node.mouseX == fr && node.mouseY == fc))
                    {
                        if(!dp[0][node.mouseX][node.mouseY][node.catX][node.catY])
                        {
                            dp[0][node.mouseX][node.mouseY][node.catX][node.catY] = true;
                            q.push(Node(node.mouseX, node.mouseY, node.catX, node.catY, 0));
                        }
                    }
                    for(auto &dir : moves)
                    {
                        for(int step = 1; step <= mouseJump; step++)
                        {
                            int r = node.mouseX + step * dir[0];
                            int c = node.mouseY + step * dir[1];
                            if (r < 0 || r >= m || c < 0 || c >= n) break;
                            if (grid[r][c] == '#') break;
                            if(!(r == node.catX && c == node.catY) && !dp[0][r][c][node.catX][node.catY])
                            {
                                dp[0][r][c][node.catX][node.catY] = true;
                                q.push(Node(r, c, node.catX, node.catY, 0));
                            }
                        }
                    }
                }
                else
                {
                    ++out_degree[node.mouseX][node.mouseY][node.catX][node.catY];
                    if(out_degree[node.mouseX][node.mouseY][node.catX][node.catY] == cat_degree[node.mouseX][node.mouseY][node.catX][node.catY])
                    {
                        dp[1][node.mouseX][node.mouseY][node.catX][node.catY] = true;
                        q.push(Node(node.mouseX, node.mouseY, node.catX, node.catY, 1));
                    }
                    for(auto &dir : moves)
                    {
                        for(int step = 1; step <= catJump; step++)
                        {
                            int r = node.catX + step * dir[0];
                            int c = node.catY + step * dir[1];
                            if (r < 0 || r >= m || c < 0 || c >= n) break;
                            if (grid[r][c] == '#') break;
                            ++out_degree[node.mouseX][node.mouseY][r][c];
                            if(!(r == node.mouseX && c == node.mouseY) && out_degree[node.mouseX][node.mouseY][r][c] == cat_degree[node.mouseX][node.mouseY][r][c])
                            {
                                dp[1][node.mouseX][node.mouseY][r][c] = true;
                                q.push(Node(node.mouseX, node.mouseY, r, c, 1));
                            }
                        }
                    }
                }
            }
            ++d;
        }
        return dp[0][mr][mc][cr][cc];
    }
};


// Source https://leetcode.com/problems/find-the-highest-altitude/

There is a biker going on a road trip. The road trip consists of n + 1 points at different altitudes. The biker starts his trip on point 0 with altitude equal 0.

You are given an integer array gain of length n where gain[i] is the net gain in altitude between points i​​​​​​ and i + 1 for all (0 <= i < n). Return the highest altitude of a point.

 

Example 1:

Input: gain = [-5,1,5,0,-7]
Output: 1
Explanation: The altitudes are [0,-5,-4,1,1,-6]. The highest is 1.
Example 2:

Input: gain = [-4,-3,-2,-1,4,3,2]
Output: 0
Explanation: The altitudes are [0,-4,-7,-9,-10,-6,-3,-1]. The highest is 0.
 

Constraints:

n == gain.length
1 <= n <= 100
-100 <= gain[i] <= 100

class Solution
{
public:
    int largestAltitude(vector<int> &gain)
    {
        int sum = 0, res = 0;
        for(auto diff : gain)
        {
            sum += diff;
            res = max(res, sum);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/minimum-number-of-people-to-teach/

On a social network consisting of m users and some friendships between users, two users can communicate with each other if they know a common language.

You are given an integer n, an array languages, and an array friendships where:

There are n languages numbered 1 through n,
languages[i] is the set of languages the i​​​​​​th​​​​ user knows, and
friendships[i] = [u​​​​​​i​​​, v​​​​​​i] denotes a friendship between the users u​​​​​​​​​​​i​​​​​ and vi.
You can choose one language and teach it to some users so that all friends can communicate with each other. Return the minimum number of users you need to teach.

Note that friendships are not transitive, meaning if x is a friend of y and y is a friend of z, this doesn't guarantee that x is a friend of z.
 

Example 1:

Input: n = 2, languages = [[1],[2],[1,2]], friendships = [[1,2],[1,3],[2,3]]
Output: 1
Explanation: You can either teach user 1 the second language or user 2 the first language.
Example 2:

Input: n = 3, languages = [[2],[1,3],[1,2],[3]], friendships = [[1,4],[1,2],[3,4],[2,3]]
Output: 2
Explanation: Teach the third language to users 1 and 3, yielding two users to teach.

Constraints:

2 <= n <= 500
languages.length == m
1 <= m <= 500
1 <= languages[i].length <= n
1 <= languages[i][j] <= n
1 <= u​​​​​​i < v​​​​​​i <= languages.length
1 <= friendships.length <= 500
All tuples (u​​​​​i, v​​​​​​i) are unique
languages[i] contains only unique values

class Solution
{
public:

    int minimumTeachings(int n, vector<vector<int>>& languages, vector<vector<int>>& friendships)
    {
        int m = languages.size();
        vector<bitset<500>> vec;
        for(auto &v : languages)
        {
            bitset<500> tmp;
            for(auto idx : v) tmp.set(idx - 1);
            vec.push_back(tmp);
        }
        vector<int> vis(m);
        vector<int> toTeach(n);
        for(auto &v : friendships)
        {
            if((vec[v[0] - 1] & vec[v[1] - 1]).count())
            {
                // they can talk
            }
            else
            {
                for(int i = 0; i < n; i++)
                {
                    if(!(vec[v[0] - 1].test(i)) && !vis[v[0] - 1]) toTeach[i]++;
                    if(!(vec[v[1] - 1].test(i)) && !vis[v[1] - 1]) toTeach[i]++;
                }
                vis[v[0] - 1] = 1, vis[v[1] - 1] = 1;
            }
        }
        int res = INT_MAX;
        for(int i = 0; i < n; i++) res = min(res, toTeach[i]);
        return res;
    }
};


// Source https://leetcode.com/problems/decode-xored-permutation/

There is an integer array perm that is a permutation of the first n positive integers, where n is always odd.

It was encoded into another integer array encoded of length n - 1, such that encoded[i] = perm[i] XOR perm[i + 1]. For example, if perm = [1,3,2], then encoded = [2,1].

Given the encoded array, return the original array perm. It is guaranteed that the answer exists and is unique.

 

Example 1:

Input: encoded = [3,1]
Output: [1,2,3]
Explanation: If perm = [1,2,3], then encoded = [1 XOR 2,2 XOR 3] = [3,1]
Example 2:

Input: encoded = [6,5,4,6]
Output: [2,4,1,5,3]
 

Constraints:

3 <= n < 105
n is odd.
encoded.length == n - 1

假设n = 5
(perm[0] XOR perm[1] XOR perm[2] XOR perm[3] XOR perm[4]) XOR (encoded[1] XOR encoded[3]) = perm[0]

encoded[1] = perm[1] XOR perm[2]
encoded[3] = perm[3] XOR perm[4]

class Solution
{
public:
    vector<int> decode(vector<int> &e)
    {
        int n = e.size() + 1;
        vector<int> p(n);
        for (int i = 1; i <= n; i++) p[0] ^= i;
        for (int i = 1; i < e.size(); i += 2) p[0] ^= e[i];
        for (int i = 0; i < e.size(); i++) p[i + 1] = p[i] ^ e[i];
        return p;
    }
};


// Source https://leetcode.com/problems/count-ways-to-make-array-with-product/

You are given a 2D integer array, queries. For each queries[i], where queries[i] = [ni, ki], find the number of different ways you can place positive integers into an array of size ni 
such that the product of the integers is ki. As the number of ways may be too large, the answer to the ith query is the number of ways modulo 109 + 7.

Return an integer array answer where answer.length == queries.length, and answer[i] is the answer to the ith query.

Example 1:

Input: queries = [[2,6],[5,1],[73,660]]
Output: [4,1,50734910]
Explanation: Each query is independent.
[2,6]: There are 4 ways to fill an array of size 2 that multiply to 6: [1,6], [2,3], [3,2], [6,1].
[5,1]: There is 1 way to fill an array of size 5 that multiply to 1: [1,1,1,1,1].
[73,660]: There are 1050734917 ways to fill an array of size 73 that multiply to 660. 1050734917 modulo 109 + 7 = 50734910.

660 = 2 * 2 * 3 * 5 * 11
          2个2，1个3，1个5，1个11

          C(74,2) * C(73,1)  * C(73,1)  * C(73,1) 
          37 * 73 * 73 * 73 * 73 = 1050734917

2个2，分成73组，有多少种分法？C(74,2) = C(73,2) + C(73,1) = (73 * 36) + 73 = 73 * 37
72根小棒把2个数分成73组

Example 2:

Input: queries = [[1,1],[2,2],[3,3],[4,4],[5,5]]
Output: [1,2,3,10,5]

4 = 2 * 2
       C(5,2) = 10 = C(4,2) + C(4,1)

Constraints:

1 <= queries.length <= 104
1 <= ni, ki <= 104

10块巧克力，分给5位小朋友，有多少种分法?
4根小棒，10块巧克力，我们发现，通过交换小棒和巧克力的顺序，我们就能得到所有可能的情况C(14,4)
4根小棒把10块巧克力分成5组

i个数，分成n组，有多少种分法？C(n-1 + i, n-1) = C(n - 1 + i , i)
n-1根小棒把i个数分成n组

class Combination
{
public:
    using ll = long long;
    Combination(int size) : factorial(size)
    {
        factorial[0] = 1;
        for(int i = 1; i < size; i++) factorial[i] = i * factorial[i - 1] % mod;
    }

    ll power(ll a, ll b)
    {
        ll x = 1, y = a % mod;
        while (b > 0)
        {
            if (b % 2) x = x * y % mod;
            y = y * y % mod;
            b /= 2;
        }
        return x % mod;
    }

    ll modular_inverse(ll n)
    {
        return power(n, mod - 2);
    }

    ll nCr(ll n, ll k)
    {
        return factorial[n] * modular_inverse(factorial[k] * factorial[n - k]) % mod;
    }

    vector<ll> factorial;
    static constexpr ll mod = 1e9 + 7;
};

class Solution
{
public:
    vector<int> waysToFillArray(vector<vector<int>> &queries)
    {
        init();
        Combination cb(20001);
        vector<int> res;
        for(auto &q : queries)
        {
            int n = q[0], k = q[1];
            auto factors = numFactor(k);
            long cnt = 1;
            for(auto i : factors)
            {
                cnt *= cb.nCr(i + n - 1, n - 1);
                cnt %= mod;
            }
            res.push_back(cnt);
        }
        return res;
    }

    void init()
    {
        for(int i = 2; i < 110; i++)
        {
            bool flag = true;
            for (auto val : vprime)
            {
                if (i % val == 0) { flag = false; break; }
            }
            if (flag) vprime.push_back(i);
        }
    }

    vector<int> numFactor(int x)
    {
        vector<int> res;
        int sq = 1 + sqrt(x);
        for(auto p : vprime)
        {
            if(p > sq) break;
            int cnt = 0;
            while(x % p == 0)
            {
                x /= p;
                cnt++;
            }
            if(cnt > 0) res.push_back(cnt);
        }
        if(x > 1) res.push_back(1);
        return res;
    }

    vector<int> vprime;
    const long mod = 1e9 + 7;
};


// Source https://leetcode.com/problems/latest-time-by-replacing-hidden-digits/

You are given a string time in the form of hh:mm, where some of the digits in the string are hidden (represented by ?).

The valid times are those inclusively between 00:00 and 23:59.

Return the latest valid time you can get from time by replacing the hidden digits.

 

Example 1:

Input: time = "2?:?0"
Output: "23:50"
Explanation: The latest hour beginning with the digit '2' is 23 and the latest minute ending with the digit '0' is 50.
Example 2:

Input: time = "0?:3?"
Output: "09:39"
Example 3:

Input: time = "1?:22"
Output: "19:22"
 

Constraints:

time is in the format hh:mm.
It is guaranteed that you can produce a valid time from the given string.

class Solution
{
public:
    string maximumTime(string time)
    {
        if(time[0] == '?')
        {
            if(time[1] == '?')
            {
                time[0] = '2';
                time[1] = '3';
            }
            else if(time[1] >= '4' && time[1] <= '9')
            {
                time[0] = '1';
            }
            else
            {
                time[0] = '2';
            }
        }
        else if(time[1] == '?')
        {
            if(time[0] == '0' || time[0] == '1')
            {
                time[1] = '9';
            }
            else if(time[0] == '2')
            {
                time[1] = '3';
            }
        }
        if(time[3] == '?')
        {
            time[3] = '5';
        }
        if(time[4] == '?')
        {
            time[4] = '9';
        }
        return time;
    }
};


// Source https://leetcode.com/problems/change-minimum-characters-to-satisfy-one-of-three-conditions/

You are given two strings a and b that consist of lowercase letters. In one operation, you can change any character in a or b to any lowercase letter.

Your goal is to satisfy one of the following three conditions:

Every letter in a is strictly less than every letter in b in the alphabet.
Every letter in b is strictly less than every letter in a in the alphabet.
Both a and b consist of only one distinct letter.
Return the minimum number of operations needed to achieve your goal.

 

Example 1:

Input: a = "aba", b = "caa"
Output: 2
Explanation: Consider the best way to make each condition true:
1) Change b to "ccc" in 2 operations, then every letter in a is less than every letter in b.
2) Change a to "bbb" and b to "aaa" in 3 operations, then every letter in b is less than every letter in a.
3) Change a to "aaa" and b to "aaa" in 2 operations, then a and b consist of one distinct letter.
The best way was done in 2 operations (either condition 1 or condition 3).
Example 2:

Input: a = "dabadd", b = "cda"
Output: 3
Explanation: The best way is to make condition 1 true by changing b to "eee".
 

Constraints:

1 <= a.length, b.length <= 105
a and b consist only of lowercase letters.

字符串a其他的字符都变成出现次数最多的字符，字符串b其他的字符都变成出现次数最多的字符
字符串a大于某个字符(不包括字符z)的其他字符都变成这个字符，字符串b小于等于这个字符的其他字符都变成大于这个字符的字符
字符串b大于某个字符(不包括字符z)的其他字符都变成这个字符，字符串a小于等于这个字符的其他字符都变成大于这个字符的字符

class Solution
{
public:

    int minCharacters(string a, string b)
    {
        int fa[26] = {0};
        int fb[26] = {0};
        int mxa = 0, mxb = 0;
        for(auto c : a)
        {
            fa[c - 'a']++;
            mxa = max(mxa, fa[c - 'a']);
        }
        for(auto c : b)
        {
            fb[c - 'a']++;
            mxb = max(mxb, fb[c - 'a']);
        }
        int ans = (a.length() - mxa) + (b.length() - mxb);
        for(int i = 1; i < 26; i++)
        {
            fa[i] += fa[i - 1];
            fb[i] += fb[i - 1];
        }
        for(int i = 0; i < 25; i++)
        {
            int ca = fa[25] - fa[i], cb = fb[i];
            ans = min(ans, ca + cb);
            ca = fa[i], cb = fb[25] - fb[i];
            ans = min(ans, ca + cb);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/find-kth-largest-xor-coordinate-value/

You are given a 2D matrix of size m x n, consisting of non-negative integers. You are also given an integer k.

The value of coordinate (a, b) of the matrix is the XOR of all matrix[i][j] where 0 <= i <= a < m and 0 <= j <= b < n (0-indexed).

Find the kth largest value (1-indexed) of all the coordinates of matrix.

 

Example 1:

Input: matrix = [[5,2],[1,6]], k = 1
Output: 7
Explanation: The value of coordinate (0,1) is 5 XOR 2 = 7, which is the largest value.
Example 2:

Input: matrix = [[5,2],[1,6]], k = 2
Output: 5
Explanation: The value of coordinate (0,0) is 5 = 5, which is the 2nd largest value.
Example 3:

Input: matrix = [[5,2],[1,6]], k = 3
Output: 4
Explanation: The value of coordinate (1,0) is 5 XOR 1 = 4, which is the 3rd largest value.
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 1000
0 <= matrix[i][j] <= 106
1 <= k <= m * n

class Solution
{
public:
    int kthLargestValue(vector<vector<int>> &matrix, int k)
    {
        int n = matrix.size(), m = matrix[0].size();
        priority_queue<int, vector<int>, greater<int>> pq;
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                if(i)
                    matrix[i][j] ^= matrix[i - 1][j];
                if(j)
                    matrix[i][j] ^= matrix[i][j - 1];
                if(i && j)
                    matrix[i][j] ^= matrix[i - 1][j - 1];
                pq.push(matrix[i][j]);
                if(pq.size() > k)
                    pq.pop();
            }
        }
        return pq.top();
    }
};


// Source https://leetcode.com/problems/building-boxes/

You have a cubic storeroom where the width, length, and height of the room are all equal to n units. 
You are asked to place n boxes in this room where each box is a cube of unit side length. There are however some rules to placing the boxes:

You can place the boxes anywhere on the floor.
If box x is placed on top of the box y, then each side of the four vertical sides of the box y must either be adjacent to another box or to a wall.
Given an integer n, return the minimum possible number of boxes touching the floor.

 

Example 1:



Input: n = 3
Output: 3
Explanation: The figure above is for the placement of the three boxes.
These boxes are placed in the corner of the room, where the corner is on the left side.
Example 2:



Input: n = 4
Output: 3
Explanation: The figure above is for the placement of the four boxes.
These boxes are placed in the corner of the room, where the corner is on the left side.
Example 3:



Input: n = 10
Output: 6
Explanation: The figure above is for the placement of the ten boxes.
These boxes are placed in the corner of the room, where the corner is on the back side.
 

Constraints:

1 <= n <= 109

1
1+2 =3
1+2+3=6
1+2+3+4=10
1+2+3+4+5=15
1+2+3+4+5+6=21
1+2+3+4+5+6+7=28
1+2+3+4+5+6+7+8=36

边长为2的正方形沿着对角线分成2块，1块包含对角线为3，一块不包含对角线为1
边长为3的正方形沿着对角线分成2块，1块包含对角线为6，一块不包含对角线为3
边长为4的正方形沿着对角线分成2块，1块包含对角线为10，一块不包含对角线为6
边长为5的正方形沿着对角线分成2块，1块包含对角线为15，一块不包含对角线为10
边长为6的正方形沿着对角线分成2块，1块包含对角线为21，一块不包含对角线为15
边长为7的正方形沿着对角线分成2块，1块包含对角线为28，一块不包含对角线为21
边长为8的正方形沿着对角线分成2块，1块包含对角线为36，一块不包含对角线为28

10个box可以这样放
最底层：1块包含对角线为6 + 上一层：1块包含对角线为3 + 再上一层：1

class Solution
{
public:
    int minimumBoxes(int n)
    {
        int curr_bottom = 1;
        int curr_tot = 1;
        int prev_bottom = 0;
        int prev_tot = 0;
        for(int i = 2; ; i++)
        {
            if(n <= curr_tot)
            {
                break;
            }
            prev_bottom = curr_bottom;
            prev_tot = curr_tot;
            curr_bottom = (i + 1) * i / 2;
            curr_tot = prev_tot + curr_bottom;
        }
        if(n == curr_tot) return curr_bottom;
        int req = n - prev_tot;
        int need = 1;
        // prev_bottom 对应最底层，最底层加need个，上一层可加need-1个，再上一层可加need-2个，... ，最后可加1
        // need + need - 1 + need - 2 + ... + 1 = need * (need+1) / 2
        while(true)
        {
            if( need * (need + 1) / 2 >= req)break;
            need++;
        }
        return need + prev_bottom ;
    }
};


// Source https://leetcode.com/problems/maximum-number-of-balls-in-a-box/

You are working in a ball factory where you have n balls numbered from lowLimit up to highLimit inclusive (i.e., n == highLimit - lowLimit + 1), 
and an infinite number of boxes numbered from 1 to infinity.

Your job at this factory is to put each ball in the box with a number equal to the sum of digits of the ball's number. 
For example, the ball number 321 will be put in the box number 3 + 2 + 1 = 6 and the ball number 10 will be put in the box number 1 + 0 = 1.

Given two integers lowLimit and highLimit, return the number of balls in the box with the most balls.

 

Example 1:

Input: lowLimit = 1, highLimit = 10
Output: 2
Explanation:
Box Number:  1 2 3 4 5 6 7 8 9 10 11 ...
Ball Count:  2 1 1 1 1 1 1 1 1 0  0  ...
Box 1 has the most number of balls with 2 balls.
Example 2:

Input: lowLimit = 5, highLimit = 15
Output: 2
Explanation:
Box Number:  1 2 3 4 5 6 7 8 9 10 11 ...
Ball Count:  1 1 1 1 2 2 1 1 1 0  0  ...
Boxes 5 and 6 have the most number of balls with 2 balls in each.
Example 3:

Input: lowLimit = 19, highLimit = 28
Output: 2
Explanation:
Box Number:  1 2 3 4 5 6 7 8 9 10 11 12 ...
Ball Count:  0 1 1 1 1 1 1 1 1 2  0  0  ...
Box 10 has the most number of balls with 2 balls.
 

Constraints:

1 <= lowLimit <= highLimit <= 105

class Solution
{
public:
    int countBalls(int l, int h)
    {
        int ans = 0;
        unordered_map<int, int > boxes;
        for(int i = l; i <= h; i++)
        {
            int temp = 0, p = i;
            while(p > 0)
            {
                temp += p % 10;
                p = p / 10;
            }
            boxes[temp]++;
        }
        for( auto x : boxes)
        {
            ans = max(ans, x.second);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/restore-the-array-from-adjacent-pairs/

There is an integer array nums that consists of n unique elements, but you have forgotten it. However, you do remember every pair of adjacent elements in nums.

You are given a 2D integer array adjacentPairs of size n - 1 where each adjacentPairs[i] = [ui, vi] indicates that the elements ui and vi are adjacent in nums.

It is guaranteed that every adjacent pair of elements nums[i] and nums[i+1] will exist in adjacentPairs, either as [nums[i], nums[i+1]] or [nums[i+1], nums[i]]. The pairs can appear in any order.

Return the original array nums. If there are multiple solutions, return any of them.

 

Example 1:

Input: adjacentPairs = [[2,1],[3,4],[3,2]]
Output: [1,2,3,4]
Explanation: This array has all its adjacent pairs in adjacentPairs.
Notice that adjacentPairs[i] may not be in left-to-right order.
Example 2:

Input: adjacentPairs = [[4,-2],[1,4],[-3,1]]
Output: [-2,4,1,-3]
Explanation: There can be negative numbers.
Another solution is [-3,1,4,-2], which would also be accepted.
Example 3:

Input: adjacentPairs = [[100000,-100000]]
Output: [100000,-100000]
 

Constraints:

nums.length == n
adjacentPairs.length == n - 1
adjacentPairs[i].length == 2
2 <= n <= 105
-105 <= nums[i], ui, vi <= 105
There exists some nums that has adjacentPairs as its pairs.

class Solution
{
public:
    vector<int> restoreArray(vector<vector<int>> &adjacentPairs)
    {
        vector<int> ans;
        unordered_map<int, vector<int>> mp;
        for(auto &pair : adjacentPairs)
        {
            mp[pair[0]].push_back(pair[1]);
            mp[pair[1]].push_back(pair[0]);
        }
        int src;
        for(auto &[val, vec] : mp)
        {
            if(vec.size() == 1)
            {
                src = val;
                break;
            }
        }
        queue<int> q;
        unordered_set<int> visited;
        q.push(src);
        visited.insert(src);
        while(!q.empty())
        {
            int ele = q.front();
            q.pop();
            ans.push_back(ele);
            for(auto val : mp[ele])
            {
                if(visited.find(val) == visited.end())
                {
                    q.push(val);
                    visited.insert(val);
                }
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/can-you-eat-your-favorite-candy-on-your-favorite-day/

You are given a (0-indexed) array of positive integers candiesCount where candiesCount[i] represents the number of candies of the ith type you have. 
You are also given a 2D array queries where queries[i] = [favoriteTypei, favoriteDayi, dailyCapi].

You play a game with the following rules:

You start eating candies on day 0.
You cannot eat any candy of type i unless you have eaten all candies of type i - 1.
You must eat at least one candy per day until you have eaten all the candies.
Construct a boolean array answer such that answer.length == queries.length and answer[i] is true if you can eat a candy of type favoriteTypei on day favoriteDayi 
without eating more than dailyCapi candies on any day, and false otherwise. Note that you can eat different types of candy on the same day, provided that you follow rule 2.

Return the constructed array answer.

 

Example 1:

Input: candiesCount = [7,4,5,3,8], queries = [[0,2,2],[4,2,4],[2,13,1000000000]]
Output: [true,false,true]
Explanation:
1- If you eat 2 candies (type 0) on day 0 and 2 candies (type 0) on day 1, you will eat a candy of type 0 on day 2.
2- You can eat at most 4 candies each day.
   If you eat 4 candies every day, you will eat 4 candies (type 0) on day 0 and 4 candies (type 0 and type 1) on day 1.
   On day 2, you can only eat 4 candies (type 1 and type 2), so you cannot eat a candy of type 4 on day 2.
3- If you eat 1 candy each day, you will eat a candy of type 2 on day 13.
Example 2:

Input: candiesCount = [5,2,6,4,1], queries = [[3,1,2],[4,10,3],[3,10,100],[4,100,30],[1,3,1]]
Output: [false,true,true,false,false]
 

Constraints:

1 <= candiesCount.length <= 105
1 <= candiesCount[i] <= 105
1 <= queries.length <= 105
queries[i].length == 3
0 <= favoriteTypei < candiesCount.length
0 <= favoriteDayi <= 109
1 <= dailyCapi <= 109

You start eating candies on day 0.
You cannot eat any candy of type i unless you have eaten all candies of type i - 1.
You must eat at least one candy per day until you have eaten all the candies.

sum[queries[i][0]] 表示小于等于favoriteTypei的糖果数量

class Solution
{
public:
    vector<bool> canEat(vector<int> &candiesCount, vector<vector<int>> &queries)
    {
        int n = candiesCount.size();
        vector<long long> sum(n);
        sum[0] = candiesCount[0];
        for(int i = 1; i < n; i++)
        {
            sum[i] = candiesCount[i] + sum[i - 1];
        }
        vector<bool> ans(queries.size());
        for(int i = 0; i < queries.size(); i++)
        {
            if(queries[i][1] >= sum[queries[i][0]])
            {
                ans[i] = false;
                continue;
            }
            if(queries[i][0] == 0)
            {
                ans[i] = true;
                continue;
            }
            long long g = sum[queries[i][0] - 1];
            if(g / queries[i][2] <= queries[i][1])
            {
                ans[i] = true;
                continue;
            }
            ans[i] = false;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/palindrome-partitioning-iv/

Given a string s, return true if it is possible to split the string s into three non-empty palindromic substrings. Otherwise, return false.​​​​​

A string is said to be palindrome if it the same string when reversed.

 

Example 1:

Input: s = "abcbdd"
Output: true
Explanation: "abcbdd" = "a" + "bcb" + "dd", and all three substrings are palindromes.
Example 2:

Input: s = "bcbddxy"
Output: false
Explanation: s cannot be split into 3 palindromes.
 

Constraints:

3 <= s.length <= 2000
s​​​​​​ consists only of lowercase English letters.

class Solution
{
public:
    bool checkPartitioning(string s)
    {
        int n = s.size();
        vector<vector<int>> dp(n, vector<int>(n));
        for (int len = 1; len <= n; ++len)
        {
            for (int i = 0; i + len <= n; ++i)
            {
                int j = i + len - 1;
                if (s[i] != s[j]) dp[i][j] = 0;
                else
                {
                    if ((i + 1) >= (j - 1)) dp[i][j] = 1;
                    else dp[i][j] = dp[i + 1][j - 1];
                }
            }
        }
        for(int i = 1 ; i < n - 1; i++)
        {
            for(int j = i; j < n - 1; j++)
            {
                if(dp[0][i - 1] && dp[i][j] && dp[j + 1][n - 1])
                    return true;
            }
        }
        return false;
    }
};


// Source https://leetcode.com/problems/sum-of-unique-elements/

You are given an integer array nums. The unique elements of an array are the elements that appear exactly once in the array.

Return the sum of all the unique elements of nums.

 

Example 1:

Input: nums = [1,2,3,2]
Output: 4
Explanation: The unique elements are [1,3], and the sum is 4.
Example 2:

Input: nums = [1,1,1,1,1]
Output: 0
Explanation: There are no unique elements, and the sum is 0.
Example 3:

Input: nums = [1,2,3,4,5]
Output: 15
Explanation: The unique elements are [1,2,3,4,5], and the sum is 15.
 

Constraints:

1 <= nums.length <= 100
1 <= nums[i] <= 100

class Solution
{
public:
    int sumOfUnique(vector<int> &nums)
    {
        int mp[101] = {0};
        for(int i = 0; i < nums.size(); i++)
        {
            mp[nums[i]]++;
        }
        int res = 0;
        for (int i = 1; i <= 100; ++i)
        {
            if(mp[i] == 1)
            {
                res += i;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/maximum-absolute-sum-of-any-subarray/

You are given an integer array nums. The absolute sum of a subarray [numsl, numsl+1, ..., numsr-1, numsr] is abs(numsl + numsl+1 + ... + numsr-1 + numsr).

Return the maximum absolute sum of any (possibly empty) subarray of nums.

Note that abs(x) is defined as follows:

If x is a negative integer, then abs(x) = -x.
If x is a non-negative integer, then abs(x) = x.
 

Example 1:

Input: nums = [1,-3,2,3,-4]
Output: 5
Explanation: The subarray [2,3] has absolute sum = abs(2+3) = abs(5) = 5.
Example 2:

Input: nums = [2,-5,1,-4,3,-2]
Output: 8
Explanation: The subarray [-5,1,-4] has absolute sum = abs(-5+1-4) = abs(-8) = 8.
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104

class Solution
{
public:
    int maxAbsoluteSum(vector<int> &nums)
    {
        int maxEndingHere = 0, minEndingHere = 0;
        int res = 0;
        for(int i = 0; i < nums.size(); ++i)
        {
            maxEndingHere = max(maxEndingHere + nums[i], nums[i]);
            minEndingHere = min(minEndingHere + nums[i], nums[i]);
            res = max(res, abs(maxEndingHere));
            res = max(res, abs(minEndingHere));
        }
        return res;
    }
};


// Source https://leetcode.com/problems/minimum-length-of-string-after-deleting-similar-ends/

Given a string s consisting only of characters 'a', 'b', and 'c'. You are asked to apply the following algorithm on the string any number of times:

Pick a non-empty prefix from the string s where all the characters in the prefix are equal.
Pick a non-empty suffix from the string s where all the characters in this suffix are equal.
The prefix and the suffix should not intersect at any index.
The characters from the prefix and suffix must be the same.
Delete both the prefix and the suffix.
Return the minimum length of s after performing the above operation any number of times (possibly zero times).

 

Example 1:

Input: s = "ca"
Output: 2
Explanation: You can't remove any characters, so the string stays as is.
Example 2:

Input: s = "cabaabac"
Output: 0
Explanation: An optimal sequence of operations is:
- Take prefix = "c" and suffix = "c" and remove them, s = "abaaba".
- Take prefix = "a" and suffix = "a" and remove them, s = "baab".
- Take prefix = "b" and suffix = "b" and remove them, s = "aa".
- Take prefix = "a" and suffix = "a" and remove them, s = "".
Example 3:

Input: s = "aabccabba"
Output: 3
Explanation: An optimal sequence of operations is:
- Take prefix = "aa" and suffix = "a" and remove them, s = "bccabb".
- Take prefix = "b" and suffix = "bb" and remove them, s = "cca".
 

Constraints:

1 <= s.length <= 105
s only consists of characters 'a', 'b', and 'c'.

class Solution
{
public:
    int minimumLength(string s)
    {
        int n = s.length();
        if(n < 2) return n;
        int left = 0, right = n - 1;
        while(left < right && s[left] == s[right])
        {
            char ch = s[left];
            int endLeft = left + 1;
            while(endLeft < right && s[endLeft] == ch) endLeft++;
            --endLeft;
            int beginRight = right - 1;
            while(beginRight > endLeft && s[beginRight] == ch) beginRight--;
            ++beginRight;
            left = endLeft + 1;
            right = beginRight - 1;
        }
        return (right - left + 1);
    }
};


// Source https://leetcode.com/problems/maximum-number-of-events-that-can-be-attended-ii/

You are given an array of events where events[i] = [startDayi, endDayi, valuei]. The ith event starts at startDayi and ends at endDayi, and if you attend this event, you will receive a value of valuei. 
You are also given an integer k which represents the maximum number of events you can attend.

You can only attend one event at a time. If you choose to attend an event, you must attend the entire event. 
Note that the end day is inclusive: that is, you cannot attend two events where one of them starts and the other ends on the same day.

Return the maximum sum of values that you can receive by attending events.

 

Example 1:



Input: events = [[1,2,4],[3,4,3],[2,3,1]], k = 2
Output: 7
Explanation: Choose the green events, 0 and 1 (0-indexed) for a total value of 4 + 3 = 7.
Example 2:



Input: events = [[1,2,4],[3,4,3],[2,3,10]], k = 2
Output: 10
Explanation: Choose event 2 for a total value of 10.
Notice that you cannot attend any other event as they overlap, and that you do not have to attend k events.
Example 3:



Input: events = [[1,1,1],[2,2,2],[3,3,3],[4,4,4]], k = 3
Output: 9
Explanation: Although the events do not overlap, you can only attend 3 events. Pick the highest valued three.
 

Constraints:

1 <= k <= events.length
1 <= k * events.length <= 106
1 <= startDayi <= endDayi <= 109
1 <= valuei <= 106

class Solution
{
public:
    int n;
    vector<vector<int>> dp;
    vector<int> next;

    int solve(vector<vector<int>> &events, int index, int k)
    {
        if (index >= n) return 0;
        if (k == 0) return 0;
        if(dp[index][k] != -1) return dp[index][k];
        int ans = INT_MIN;
        for(int i = index; i < n; i++)
        {
            ans = max(ans, events[i][2] + solve(events, next[i], k - 1));
        }
        return dp[index][k] = ans;
    }

    int maxValue(vector<vector<int>> &events, int k)
    {
        sort(events.begin(), events.end());
        n = events.size();
        next = vector<int>(n, n);
        for(int i = 0; i < n; i++)
        {
            for(int j = i + 1; j < n; j++)
            {
                if(events[j][0] > events[i][1])
                {
                    next[i] = j;
                    break;
                }
            }
        }
        dp = vector<vector<int>>(n, vector<int>(k + 1, -1));
        return solve(events, 0, k);
    }
};


// Source https://leetcode.com/problems/check-if-array-is-sorted-and-rotated/

Given an array nums, return true if the array was originally sorted in non-decreasing order, then rotated some number of positions (including zero). Otherwise, return false.

There may be duplicates in the original array.

Note: An array A rotated by x positions results in an array B of the same length such that A[i] == B[(i+x) % A.length], where % is the modulo operation.

 

Example 1:

Input: nums = [3,4,5,1,2]
Output: true
Explanation: [1,2,3,4,5] is the original sorted array.
You can rotate the array by x = 3 positions to begin on the the element of value 3: [3,4,5,1,2].
Example 2:

Input: nums = [2,1,3,4]
Output: false
Explanation: There is no sorted array once rotated that can make nums.
Example 3:

Input: nums = [1,2,3]
Output: true
Explanation: [1,2,3] is the original sorted array.
You can rotate the array by x = 0 positions (i.e. no rotation) to make nums.
 

Constraints:

1 <= nums.length <= 100
1 <= nums[i] <= 100

class Solution
{
public:
    bool check(vector<int> &nums)
    {
        int count = 0;
        int n = nums.size();
        for (int i = 0; i < n - 1; i++)
        {
            if (nums[i] > nums[i + 1])
                count++;
        }
        if (nums[n - 1] > nums[0])
            count++;
        return count <= 1;
    }
};


// Source https://leetcode.com/problems/maximum-score-from-removing-stones/

You are playing a solitaire game with three piles of stones of sizes a​​​​​​, b,​​​​​​ and c​​​​​​ respectively. 
Each turn you choose two different non-empty piles, take one stone from each, and add 1 point to your score. 
The game stops when there are fewer than two non-empty piles (meaning there are no more available moves).

Given three integers a​​​​​, b,​​​​​ and c​​​​​, return the maximum score you can get.

 

Example 1:

Input: a = 2, b = 4, c = 6
Output: 6
Explanation: The starting state is (2, 4, 6). One optimal set of moves is:
- Take from 1st and 3rd piles, state is now (1, 4, 5)
- Take from 1st and 3rd piles, state is now (0, 4, 4)
- Take from 2nd and 3rd piles, state is now (0, 3, 3)
- Take from 2nd and 3rd piles, state is now (0, 2, 2)
- Take from 2nd and 3rd piles, state is now (0, 1, 1)
- Take from 2nd and 3rd piles, state is now (0, 0, 0)
There are fewer than two non-empty piles, so the game ends. Total: 6 points.
Example 2:

Input: a = 4, b = 4, c = 6
Output: 7
Explanation: The starting state is (4, 4, 6). One optimal set of moves is:
- Take from 1st and 2nd piles, state is now (3, 3, 6)
- Take from 1st and 3rd piles, state is now (2, 3, 5)
- Take from 1st and 3rd piles, state is now (1, 3, 4)
- Take from 1st and 3rd piles, state is now (0, 3, 3)
- Take from 2nd and 3rd piles, state is now (0, 2, 2)
- Take from 2nd and 3rd piles, state is now (0, 1, 1)
- Take from 2nd and 3rd piles, state is now (0, 0, 0)
There are fewer than two non-empty piles, so the game ends. Total: 7 points.
Example 3:

Input: a = 1, b = 8, c = 8
Output: 8
Explanation: One optimal set of moves is to take from the 2nd and 3rd piles for 8 turns until they are empty.
After that, there are fewer than two non-empty piles, so the game ends.
 

Constraints:

1 <= a, b, c <= 105

three piles of stones按照从少到多排序
假设a 为最小，b为中间，c为最大
当 a + b > c 时，从 a、b 中取石子；
再从 b、c 中取石子；
再从 a、c 中取石子。

a = 6 b = 7 c = 8 -> a = 4 b = 5 c = 8 -> a = 1 b = 0 c = 0
a = 5 b = 7 c = 8 -> a = 3 b = 5 c = 8 -> a = 0 b = 0 c = 0
a = 4 b = 7 c = 8 -> a = 3 b = 6 c = 8 -> a = 1 b = 0 c = 0
a = 3 b = 7 c = 8 -> a = 2 b = 6 c = 8 -> a = 0 b = 0 c = 0
a = 2 b = 7 c = 8 -> a = 1 b = 0 c = 0
a = 1 b = 7 c = 8 -> a = 0 b = 0 c = 0

class Solution
{
public:
    int maximumScore(int a, int b, int c)
    {
        vector<int> v{a, b, c};
        sort(v.begin(), v.end());
        if (v[0] + v[1] <= v[2]) return v[0] + v[1];
        int result = 0;
        int diff = v[0] + v[1] - v[2];
        result += diff / 2;
        v[0] -= diff / 2;
        v[1] -= diff / 2;
        v[2] -= v[1];
        result += v[1];
        result += min(v[0], v[2]);
        return result;
    }
};


// Source https://leetcode.com/problems/largest-merge-of-two-strings/

You are given two strings word1 and word2. You want to construct a string merge in the following way: while either word1 or word2 are non-empty, choose one of the following options:

If word1 is non-empty, append the first character in word1 to merge and delete it from word1.
For example, if word1 = "abc" and merge = "dv", then after choosing this operation, word1 = "bc" and merge = "dva".
If word2 is non-empty, append the first character in word2 to merge and delete it from word2.
For example, if word2 = "abc" and merge = "", then after choosing this operation, word2 = "bc" and merge = "a".
Return the lexicographically largest merge you can construct.

A string a is lexicographically larger than a string b (of the same length) if in the first position where a and b differ, a has a character strictly larger than the corresponding character in b. 
For example, "abcd" is lexicographically larger than "abcc" because the first position they differ is at the fourth character, and d is greater than c.

 

Example 1:

Input: word1 = "cabaa", word2 = "bcaaa"
Output: "cbcabaaaaa"
Explanation: One way to get the lexicographically largest merge is:
- Take from word1: merge = "c", word1 = "abaa", word2 = "bcaaa"
- Take from word2: merge = "cb", word1 = "abaa", word2 = "caaa"
- Take from word2: merge = "cbc", word1 = "abaa", word2 = "aaa"
- Take from word1: merge = "cbca", word1 = "baa", word2 = "aaa"
- Take from word1: merge = "cbcab", word1 = "aa", word2 = "aaa"
- Append the remaining 5 a's from word1 and word2 at the end of merge.
Example 2:

Input: word1 = "abcabc", word2 = "abdcaba"
Output: "abdcabcabcaba"
 

Constraints:

1 <= word1.length, word2.length <= 3000
word1 and word2 consist only of lowercase English letters.

class Solution
{
public:

    string largestMerge(string word1, string word2)
    {
        string merge = "";
        int i = 0;
        int j = 0;
        while(i < word1.size() && j < word2.size())
        {
            if(word1[i] > word2[j])
            {
                merge.push_back(word1[i]);
                i++;
            }
            else if(word1[i] < word2[j])
            {
                merge.push_back(word2[j]);
                j++;
            }
            else
            {
                string a = word1.substr(i);
                string b = word2.substr(j);
                if(a > b)
                {
                    merge.push_back(word1[i]);
                    i++;
                }
                else
                {
                    merge.push_back(word2[j]);
                    j++;
                }
            }
        }
        while(i < word1.size())
        {
            merge.push_back(word1[i]);
            i++;
        }
        while(j < word2.size())
        {
            merge.push_back(word2[j]);
            j++;
        }
        return merge;
    }
};


// Source https://leetcode.com/problems/closest-subsequence-sum/

You are given an integer array nums and an integer goal.

You want to choose a subsequence of nums such that the sum of its elements is the closest possible to goal. 
That is, if the sum of the subsequence's elements is sum, then you want to minimize the absolute difference abs(sum - goal).

Return the minimum possible value of abs(sum - goal).

Note that a subsequence of an array is an array formed by removing some elements (possibly all or none) of the original array.

 

Example 1:

Input: nums = [5,-7,3,5], goal = 6
Output: 0
Explanation: Choose the whole array as a subsequence, with a sum of 6.
This is equal to the goal, so the absolute difference is 0.
Example 2:

Input: nums = [7,-9,15,-2], goal = -5
Output: 1
Explanation: Choose the subsequence [7,-9,-2], with a sum of -4.
The absolute difference is abs(-4 - (-5)) = abs(1) = 1, which is the minimum.
Example 3:

Input: nums = [1,2,3], goal = -7
Output: 7
 

Constraints:

1 <= nums.length <= 40
-107 <= nums[i] <= 107
-109 <= goal <= 109

class Solution
{
public:
    void find(vector<int> &v, int i, int e, int sum, vector<int> &sumv)
    {
        if(i == e)
        {
            sumv.push_back(sum);
            return;
        }
        find(v, i + 1, e, sum + v[i], sumv);
        find(v, i + 1, e, sum, sumv);
    }


    int minAbsDifference(vector<int> &nums, int goal)
    {
        int n = nums.size();

        //Step 1: Divide nums into 2 subarrays of size n/2 and n-n/2

        vector<int>A, B;
        A.reserve(n / 2);
        B.reserve(n - n / 2);
        for(int i = 0; i < n / 2; i++)
            A.push_back(nums[i]);
        for(int i = n / 2; i < n; i++)
            B.push_back(nums[i]);

        //Step 2: Find all possible subset sums of A and B

        vector<int>sumA, sumB;
        sumA.reserve(pow(2, n/2));
        sumB.reserve(pow(2, n - n/2));

        find(A, 0, A.size(), 0, sumA);
        find(B, 0, B.size(), 0, sumB);

        sort(sumA.begin(), sumA.end());
        sort(sumB.begin(), sumB.end());

        //Step 3: Find combinations from sumA & sumB such that abs(sum-goal) is minimized

        int ans = INT_MAX;
        for(int i = 0; i < sumA.size(); i++)
        {
            int s = sumA[i];
            int l = 0;
            int r = sumB.size() - 1;
            while(l <= r)
            {
                int mid = l + (r - l) / 2;
                int sum = s + sumB[mid];
                if(sum == goal)
                    return 0;
                ans = min(ans, abs(sum - goal));
                if(sum > goal)
                {
                    r = mid - 1;
                }
                else
                {
                    l = mid + 1;
                }
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/minimum-changes-to-make-alternating-binary-string/

You are given a string s consisting only of the characters '0' and '1'. In one operation, you can change any '0' to '1' or vice versa.

The string is called alternating if no two adjacent characters are equal. For example, the string "010" is alternating, while the string "0100" is not.

Return the minimum number of operations needed to make s alternating.

 

Example 1:

Input: s = "0100"
Output: 1
Explanation: If you change the last character to '1', s will be "0101", which is alternating.
Example 2:

Input: s = "10"
Output: 0
Explanation: s is already alternating.
Example 3:

Input: s = "1111"
Output: 2
Explanation: You need two operations to reach "0101" or "1010".
 

Constraints:

1 <= s.length <= 104
s[i] is either '0' or '1'.

class Solution
{
public:
    int minOperations(string s)
    {
        int n = s.length();
        int i = 0;
        int count0 = 0;
        int count1 = 0;
        while(i < n)
        {
            if(i % 2 == 0 && s[i] != '0')
            {
                count0++;
            }
            if(i % 2 == 1 && s[i] != '1')
            {
                count0++;
            }
            if(i % 2 == 0 && s[i] != '1')
            {
                count1++;
            }
            if(i % 2 == 1 && s[i] != '0')
            {
                count1++;
            }
            ++i;
        }
        return min(count0, count1);
    }
};


// Source https://leetcode.com/problems/count-number-of-homogenous-substrings/

Given a string s, return the number of homogenous substrings of s. Since the answer may be too large, return it modulo 109 + 7.

A string is homogenous if all the characters of the string are the same.

A substring is a contiguous sequence of characters within a string.

 

Example 1:

Input: s = "abbcccaa"
Output: 13
Explanation: The homogenous substrings are listed as below:
"a"   appears 3 times.
"aa"  appears 1 time.
"b"   appears 2 times.
"bb"  appears 1 time.
"c"   appears 3 times.
"cc"  appears 2 times.
"ccc" appears 1 time.
3 + 1 + 2 + 1 + 3 + 2 + 1 = 13.
Example 2:

Input: s = "xy"
Output: 2
Explanation: The homogenous substrings are "x" and "y".
Example 3:

Input: s = "zzzzz"
Output: 15
 

Constraints:

1 <= s.length <= 105
s consists of lowercase letters.

class Solution
{
public:

    int countHomogenous(string s)
    {
        const long mod = 1e9 + 7;
        int n = s.length();
        int count = 1;
        long res = 1;
        for (int i = 1; i < n; ++i)
        {
            if (s[i] == s[i - 1]) ++count;
            else count = 1;
            res += count;
        }
        return res % mod;
    }
};


// Source https://leetcode.com/problems/minimum-limit-of-balls-in-a-bag/

You are given an integer array nums where the ith bag contains nums[i] balls. You are also given an integer maxOperations.

You can perform the following operation at most maxOperations times:

Take any bag of balls and divide it into two new bags with a positive number of balls.
For example, a bag of 5 balls can become two new bags of 1 and 4 balls, or two new bags of 2 and 3 balls.
Your penalty is the maximum number of balls in a bag. You want to minimize your penalty after the operations.

Return the minimum possible penalty after performing the operations.

 

Example 1:

Input: nums = [9], maxOperations = 2
Output: 3
Explanation: 
- Divide the bag with 9 balls into two bags of sizes 6 and 3. [9] -> [6,3].
- Divide the bag with 6 balls into two bags of sizes 3 and 3. [6,3] -> [3,3,3].
The bag with the most number of balls has 3 balls, so your penalty is 3 and you should return 3.
Example 2:

Input: nums = [2,4,8,2], maxOperations = 4
Output: 2
Explanation:
- Divide the bag with 8 balls into two bags of sizes 4 and 4. [2,4,8,2] -> [2,4,4,4,2].
- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,4,4,4,2] -> [2,2,2,4,4,2].
- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,2,2,4,4,2] -> [2,2,2,2,2,4,2].
- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,2,2,2,2,4,2] -> [2,2,2,2,2,2,2,2].
The bag with the most number of balls has 2 balls, so your penalty is 2 an you should return 2.
Example 3:

Input: nums = [7,17], maxOperations = 2
Output: 7
 

Constraints:

1 <= nums.length <= 105
1 <= maxOperations, nums[i] <= 109

一个bag有9个ball，要使得the maximum number of balls in a bag为3，可以这样分2次 9 = (3) + (3) + 3
一个bag有10个ball，要使得the maximum number of balls in a bag为3，可以这样分3次 10 = (3) + (3) + (3) + 1
一个bag有11个ball，要使得the maximum number of balls in a bag为3，可以这样分3次 11 = (3) + (3) + (3) + 2

class Solution
{
public:

    int check(vector<int> &nums, int k)
    {
        int ans = 0;
        for(auto n : nums)
        {
            ans += (n / k - 1);
            if (n % k) ++ans;
        }
        return ans;
    }

    int minimumSize(vector<int> &nums, int maxOperations)
    {
        int res;
        int l = 1;
        int r = *max_element(nums.begin(), nums.end());
        while(l <= r)
        {
            int mid = l + (r - l) / 2;
            if(check(nums, mid) > maxOperations) l = mid + 1;
            else
            {
                res = mid;
                r = mid - 1;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/minimum-degree-of-a-connected-trio-in-a-graph/

You are given an undirected graph. You are given an integer n which is the number of nodes in the graph and an array edges, 
where each edges[i] = [ui, vi] indicates that there is an undirected edge between ui and vi.

A connected trio is a set of three nodes where there is an edge between every pair of them.

The degree of a connected trio is the number of edges where one endpoint is in the trio, and the other is not.

Return the minimum degree of a connected trio in the graph, or -1 if the graph has no connected trios.

 

Example 1:


Input: n = 6, edges = [[1,2],[1,3],[3,2],[4,1],[5,2],[3,6]]
Output: 3
Explanation: There is exactly one trio, which is [1,2,3]. The edges that form its degree are bolded in the figure above.
Example 2:


Input: n = 7, edges = [[1,3],[4,1],[4,3],[2,5],[5,6],[6,7],[7,5],[2,6]]
Output: 0
Explanation: There are exactly three trios:
1) [1,4,3] with degree 0.
2) [2,5,6] with degree 2.
3) [5,6,7] with degree 2.
 

Constraints:

2 <= n <= 400
edges[i].length == 2
1 <= edges.length <= n * (n-1) / 2
1 <= ui, vi <= n
ui != vi
There are no repeated edges.

class Solution
{
public:
    int minTrioDegree(int n, vector<vector<int>> &edges)
    {
        vector<vector<int>> adj(n + 1, vector<int>(n + 1));
        vector<int> freq(n + 1);
        for (auto &v : edges)
        {
            adj[min(v[0], v[1])][max(v[0], v[1])] = 1;
            freq[v[0]]++;
            freq[v[1]]++;
        }
        int res = INT_MAX;
        for(int i = 1; i <= n; i++)
        {
            for(int j = i + 1; j <= n; j++)
            {
                if(adj[i][j])
                {
                    for(int k = j + 1; k <= n; k++)
                    {
                        if(adj[i][k] && adj[j][k])
                        {
                            res = min(res, freq[i] + freq[j] + freq[k] - 6);
                        }
                    }
                }
            }
        }
        return res == INT_MAX ? -1 : res;
    }
};


// Source https://leetcode.com/problems/longest-nice-substring/

A string s is nice if, for every letter of the alphabet that s contains, it appears both in uppercase and lowercase. 
For example, "abABB" is nice because 'A' and 'a' appear, and 'B' and 'b' appear. However, "abA" is not because 'b' appears, but 'B' does not.

Given a string s, return the longest substring of s that is nice. If there are multiple, return the substring of the earliest occurrence. If there are none, return an empty string.

 

Example 1:

Input: s = "YazaAay"
Output: "aAa"
Explanation: "aAa" is a nice string because 'A/a' is the only letter of the alphabet in s, and both 'A' and 'a' appear.
"aAa" is the longest nice substring.
Example 2:

Input: s = "Bb"
Output: "Bb"
Explanation: "Bb" is a nice string because both 'B' and 'b' appear. The whole string is a substring.
Example 3:

Input: s = "c"
Output: ""
Explanation: There are no nice substrings.
 

Constraints:

1 <= s.length <= 100
s consists of uppercase and lowercase English letters.

class Solution
{
public:
    string longestNiceSubstring(string s)
    {
        int n = s.length();
        string res;
        for(int i = 0; i < n; i++)
        {
            int mismatches = 0;
            vector<bool> vec(52, false);
            for(int j = i; j < n; j++)
            {
                int index = (islower(s[j])) ? s[j] - 'a' : s[j] - 'A' + 26;
                int otherIndex = index < 26 ? index + 26 : index - 26;

                if(!vec[index])
                {
                    if(vec[otherIndex]) mismatches--;
                    else mismatches++;
                    vec[index] = true;
                }

                if(mismatches == 0 && j - i + 1 > res.length())
                    res = s.substr(i, j - i + 1);
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/form-array-by-concatenating-subarrays-of-another-array/

You are given a 2D integer array groups of length n. You are also given an integer array nums.

You are asked if you can choose n disjoint subarrays from the array nums such that the ith subarray is equal to groups[i] (0-indexed), 
and if i > 0, the (i-1)th subarray appears before the ith subarray in nums (i.e. the subarrays must be in the same order as groups).

Return true if you can do this task, and false otherwise.

Note that the subarrays are disjoint if and only if there is no index k such that nums[k] belongs to more than one subarray. A subarray is a contiguous sequence of elements within an array.

 

Example 1:

Input: groups = [[1,-1,-1],[3,-2,0]], nums = [1,-1,0,1,-1,-1,3,-2,0]
Output: true
Explanation: You can choose the 0th subarray as [1,-1,0,1,-1,-1,3,-2,0] and the 1st one as [1,-1,0,1,-1,-1,3,-2,0].
These subarrays are disjoint as they share no common nums[k] element.
Example 2:

Input: groups = [[10,-2],[1,2,3,4]], nums = [1,2,3,4,10,-2]
Output: false
Explanation: Note that choosing the subarrays [1,2,3,4,10,-2] and [1,2,3,4,10,-2] is incorrect because they are not in the same order as in groups.
[10,-2] must come before [1,2,3,4].
Example 3:

Input: groups = [[1,2,3],[3,4]], nums = [7,7,1,2,3,4,7,7]
Output: false
Explanation: Note that choosing the subarrays [7,7,1,2,3,4,7,7] and [7,7,1,2,3,4,7,7] is invalid because they are not disjoint.
They share a common elements nums[4] (0-indexed).
 

Constraints:

groups.length == n
1 <= n <= 103
1 <= groups[i].length, sum(groups[i].length) <= 103
1 <= nums.length <= 103
-107 <= groups[i][j], nums[k] <= 107

class Solution
{
public:
    bool canChoose(vector<vector<int>> &groups, vector<int> &nums)
    {
        auto beginItr = nums.begin();
        for (auto &group : groups)
        {
            auto itr = search(beginItr, nums.end(), group.begin(), group.end());
            if(itr == nums.end()) return false;
            itr += group.size();
            beginItr = itr;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/map-of-highest-peak/

You are given an integer matrix isWater of size m x n that represents a map of land and water cells.

If isWater[i][j] == 0, cell (i, j) is a land cell.
If isWater[i][j] == 1, cell (i, j) is a water cell.
You must assign each cell a height in a way that follows these rules:

The height of each cell must be non-negative.
If the cell is a water cell, its height must be 0.
Any two adjacent cells must have an absolute height difference of at most 1. A cell is adjacent to another cell if the former is directly north, east, south, or west of the latter 
(i.e., their sides are touching).
Find an assignment of heights such that the maximum height in the matrix is maximized.

Return an integer matrix height of size m x n where height[i][j] is cell (i, j)'s height. If there are multiple solutions, return any of them.

 

Example 1:



Input: isWater = [[0,1],[0,0]]
Output: [[1,0],[2,1]]
Explanation: The image shows the assigned heights of each cell.
The blue cell is the water cell, and the green cells are the land cells.
Example 2:



Input: isWater = [[0,0,1],[1,0,0],[0,0,0]]
Output: [[1,1,0],[0,1,1],[1,2,2]]
Explanation: A height of 2 is the maximum possible height of any assignment.
Any height assignment that has a maximum height of 2 while still meeting the rules will also be accepted.
 

Constraints:

m == isWater.length
n == isWater[i].length
1 <= m, n <= 1000
isWater[i][j] is 0 or 1.
There is at least one water cell.

以water cell为起始点，进行层序遍历，water cell的level为0，其他cell的level随着层序遍历不断增加

class Solution
{
public:
    vector<vector<int>> highestPeak(vector<vector<int>> &grid)
    {
        int m = grid.size(), n = grid[0].size();
        queue<pair<int, int>> q;
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(grid[i][j] == 1) q.push({i, j});
                grid[i][j] = INT_MAX;
            }
        }
        int level = 0;
        while(!q.empty())
        {
            int sz = q.size();
            while(sz-- > 0)
            {
                auto [row, col] = q.front();
                q.pop();
                if(grid[row][col] != INT_MAX) continue;
                grid[row][col] = level;
                if(row > 0 && grid[row - 1][col] == INT_MAX) q.push({row - 1, col});
                if(row < (m-1) && grid[row + 1][col] == INT_MAX) q.push({row + 1, col});
                if(col > 0 && grid[row][col - 1] == INT_MAX) q.push({row, col - 1});
                if(col < (n-1) && grid[row][col + 1] == INT_MAX) q.push({row, col + 1});
            }
            ++level;
        }
        return grid;
    }
};


// Source https://leetcode.com/problems/tree-of-coprimes/

There is a tree (i.e., a connected, undirected graph that has no cycles) consisting of n nodes numbered from 0 to n - 1 and exactly n - 1 edges. 
Each node has a value associated with it, and the root of the tree is node 0.

To represent this tree, you are given an integer array nums and a 2D array edges. Each nums[i] represents the ith node's value, 
and each edges[j] = [uj, vj] represents an edge between nodes uj and vj in the tree.

Two values x and y are coprime if gcd(x, y) == 1 where gcd(x, y) is the greatest common divisor of x and y.

An ancestor of a node i is any other node on the shortest path from node i to the root. A node is not considered an ancestor of itself.

Return an array ans of size n, where ans[i] is the closest ancestor to node i such that nums[i] and nums[ans[i]] are coprime, or -1 if there is no such ancestor.

 

Example 1:



Input: nums = [2,3,3,2], edges = [[0,1],[1,2],[1,3]]
Output: [-1,0,0,1]
Explanation: In the above figure, each node's value is in parentheses.
- Node 0 has no coprime ancestors.
- Node 1 has only one ancestor, node 0. Their values are coprime (gcd(2,3) == 1).
- Node 2 has two ancestors, nodes 1 and 0. Node 1's value is not coprime (gcd(3,3) == 3), but node 0's
  value is (gcd(2,3) == 1), so node 0 is the closest valid ancestor.
- Node 3 has two ancestors, nodes 1 and 0. It is coprime with node 1 (gcd(3,2) == 1), so node 1 is its
  closest valid ancestor.
Example 2:



Input: nums = [5,6,10,2,3,6,15], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]]
Output: [-1,0,-1,0,0,0,-1]
 

Constraints:

nums.length == n
1 <= nums[i] <= 50
1 <= n <= 105
edges.length == n - 1
edges[j].length == 2
0 <= uj, vj < n
uj != vj

class Solution
{
public:
    unordered_map<int, unordered_set<int>> coprimeCache;

    struct Node
    {
        int val;
        vector<int> children;
    };

    struct Info
    {
        int nodeIdx;
        int depth;
        Info(int nodeIdx, int depth) : nodeIdx(nodeIdx), depth(depth) {}
    };

    void findCoprimes(vector<Node> &tree, vector<int> &ans,
                      vector<stack<Info>> &coprimeToInfo, unordered_set<int> &visited,
                      int nodeIdx, int depth)
    {
        visited.insert(nodeIdx);
        auto &node = tree[nodeIdx];
        if (coprimeCache.find(node.val) != coprimeCache.end())
        {
            auto &coprimes = coprimeCache[node.val];
            int closest = -1, closestDepth = -1;
            for (auto it = coprimes.begin(); it != coprimes.end(); ++it)
            {
                int val = *it;
                if (coprimeToInfo[val].empty()) continue;
                auto &info = coprimeToInfo[val].top();
                if (closestDepth == -1 || info.depth > closestDepth)
                {
                    closest = info.nodeIdx;
                    closestDepth = info.depth;
                }
            }
            ans[nodeIdx] = closest;
        }
        coprimeToInfo[node.val].push(Info(nodeIdx, depth));
        for (int childIdx : node.children)
        {
            if (visited.find(childIdx) != visited.end()) continue;
            findCoprimes(tree, ans, coprimeToInfo, visited, childIdx, depth + 1);
        }
        coprimeToInfo[node.val].pop();
    }

    vector<int> getCoprimes(vector<int> &nums, vector<vector<int>> &edges)
    {
        int n = nums.size();
        for (int i = 1; i <= 50; ++i)
        {
            for (int j = i + 1; j <= 50; ++j)
            {
                if(gcd(i, j) == 1)
                {
                    coprimeCache[i].insert(j);
                    coprimeCache[j].insert(i);
                }
            }
        }
        coprimeCache[1].insert(1);
        vector<Node> tree(n);
        for (int i = 0; i < n; ++i)
        {
            tree[i].val = nums[i];
        }
        for (int i = 0; i < n - 1; ++i)
        {
            tree[edges[i][0]].children.push_back(edges[i][1]);
            tree[edges[i][1]].children.push_back(edges[i][0]);
        }
        vector<int> ans(n, -1);
        unordered_set<int> visited;
        vector<stack<Info>> coprimeToInfo(51);
        findCoprimes(tree, ans, coprimeToInfo, visited, 0, 0);
        return ans;
    }
};


// Source https://leetcode.com/problems/merge-strings-alternately/

You are given two strings word1 and word2. Merge the strings by adding letters in alternating order, starting with word1. 
If a string is longer than the other, append the additional letters onto the end of the merged string.

Return the merged string.

 

Example 1:

Input: word1 = "abc", word2 = "pqr"
Output: "apbqcr"
Explanation: The merged string will be merged as so:
word1:  a   b   c
word2:    p   q   r
merged: a p b q c r
Example 2:

Input: word1 = "ab", word2 = "pqrs"
Output: "apbqrs"
Explanation: Notice that as word2 is longer, "rs" is appended to the end.
word1:  a   b 
word2:    p   q   r   s
merged: a p b q   r   s
Example 3:

Input: word1 = "abcd", word2 = "pq"
Output: "apbqcd"
Explanation: Notice that as word1 is longer, "cd" is appended to the end.
word1:  a   b   c   d
word2:    p   q 
merged: a p b q c   d
 

Constraints:

1 <= word1.length, word2.length <= 100
word1 and word2 consist of lowercase English letters.

class Solution
{
public:
    string mergeAlternately(string word1, string word2)
    {
        int i = 0;
        int j = 0;
        int l1 = word1.length();
        int l2 = word2.length();
        string str(l1+l2, 'a');
        if(l1 > l2)
        {
            for(; i < l2; i++, j += 2)
            {
                str[j] = word1[i];
                str[j+1] = word2[i];
            }
            for (; i < l1; i++, j++) str[j] = word1[i];
        }
        else if(l2 > l1)
        {
            for(; i < l1; i++, j += 2)
            {
                str[j] = word1[i];
                str[j+1] = word2[i];
            }
            for (; i < l2; i++, j++) str[j] = word2[i];
        }
        else
        {
            for(; i < l1; i++, j += 2)
            {
                str[j] = word1[i];
                str[j+1] = word2[i];
            }
        }
        return str;
    }
};


// Source https://leetcode.com/problems/minimum-number-of-operations-to-move-all-balls-to-each-box/

You have n boxes. You are given a binary string boxes of length n, where boxes[i] is '0' if the ith box is empty, and '1' if it contains one ball.

In one operation, you can move one ball from a box to an adjacent box. Box i is adjacent to box j if abs(i - j) == 1. Note that after doing so, there may be more than one ball in some boxes.

Return an array answer of size n, where answer[i] is the minimum number of operations needed to move all the balls to the ith box.

Each answer[i] is calculated considering the initial state of the boxes.

 

Example 1:

Input: boxes = "110"
Output: [1,1,3]
Explanation: The answer for each box is as follows:
1) First box: you will have to move one ball from the second box to the first box in one operation.
2) Second box: you will have to move one ball from the first box to the second box in one operation.
3) Third box: you will have to move one ball from the first box to the third box in two operations, and move one ball from the second box to the third box in one operation.
Example 2:

Input: boxes = "001011"
Output: [11,8,5,4,3,4]
 

Constraints:

n == boxes.length
1 <= n <= 2000
boxes[i] is either '0' or '1'.

// First, I have calculated all the operations which is needed to move '1' to the first place.
// Then as we move rightward, we have to subtract the operations needed to move '1' that is on the right
// and add the operation that we needed to move from left.

class Solution
{
public:
    vector<int> minOperations(string boxes)
    {
        int n = boxes.size();
        vector<int> v(n, 0);
        int left = 0, right = 0;
        if(boxes[0] == '1')
        {
            left++;
        }
        for(int i = n - 1; i > 0; i--)
        {
            if(boxes[i] == '1')
            {
                right++;
                v[0] += i;
            }
        }
        for(int i = 1; i < n; i++)
        {
            v[i] = v[i - 1] - right + left;
            if(boxes[i] == '1')
            {
                left++;
                right--;
            }
        }
        return v;
    }
};


// Source https://leetcode.com/problems/maximum-score-from-performing-multiplication-operations/

You are given two integer arrays nums and multipliers of size n and m respectively, where n >= m. The arrays are 1-indexed.

You begin with a score of 0. You want to perform exactly m operations. On the ith operation (1-indexed), you will:

Choose one integer x from either the start or the end of the array nums.
Add multipliers[i] * x to your score.
Remove x from the array nums.
Return the maximum score after performing m operations.

 

Example 1:

Input: nums = [1,2,3], multipliers = [3,2,1]
Output: 14
Explanation: An optimal solution is as follows:
- Choose from the end, [1,2,3], adding 3 * 3 = 9 to the score.
- Choose from the end, [1,2], adding 2 * 2 = 4 to the score.
- Choose from the end, [1], adding 1 * 1 = 1 to the score.
The total score is 9 + 4 + 1 = 14.
Example 2:

Input: nums = [-5,-3,-3,-2,7,1], multipliers = [-10,-5,3,4,6]
Output: 102
Explanation: An optimal solution is as follows:
- Choose from the start, [-5,-3,-3,-2,7,1], adding -5 * -10 = 50 to the score.
- Choose from the start, [-3,-3,-2,7,1], adding -3 * -5 = 15 to the score.
- Choose from the start, [-3,-2,7,1], adding -3 * 3 = -9 to the score.
- Choose from the end, [-2,7,1], adding 1 * 4 = 4 to the score.
- Choose from the end, [-2,7], adding 7 * 6 = 42 to the score. 
The total score is 50 + 15 - 9 + 4 + 42 = 102.
 

Constraints:

n == nums.length
m == multipliers.length
1 <= m <= 103
m <= n <= 105
-1000 <= nums[i], multipliers[i] <= 1000

class Solution
{
public:
    int n, m;
    int dp[1000][1000];

    int recur(vector<int> &nums, vector<int> &multi, int i, int l, int r)
    {
        if(i == m) return 0;
        if(dp[i][l] != 0x7f7f7f7f) return dp[i][l];
        int first = multi[i] * nums[l] + recur(nums, multi, i + 1, l + 1, r);
        int last = multi[i] * nums[r] + recur(nums, multi, i + 1, l, r - 1);
        return dp[i][l] = max(first, last);
    }

    int maximumScore(vector<int> &nums, vector<int> &multi)
    {
        n = nums.size();
        m = multi.size();
        memset(dp, 0x7f7f7f7f, sizeof(dp)); 
        return recur(nums, multi, 0, 0, n - 1);
    }
};


// Source https://leetcode.com/problems/maximize-palindrome-length-from-subsequences/

You are given two strings, word1 and word2. You want to construct a string in the following manner:

Choose some non-empty subsequence subsequence1 from word1.
Choose some non-empty subsequence subsequence2 from word2.
Concatenate the subsequences: subsequence1 + subsequence2, to make the string.
Return the length of the longest palindrome that can be constructed in the described manner. If no palindromes can be constructed, return 0.

A subsequence of a string s is a string that can be made by deleting some (possibly none) characters from s without changing the order of the remaining characters.

A palindrome is a string that reads the same forward as well as backward.

 

Example 1:

Input: word1 = "cacb", word2 = "cbba"
Output: 5
Explanation: Choose "ab" from word1 and "cba" from word2 to make "abcba", which is a palindrome.
Example 2:

Input: word1 = "ab", word2 = "ab"
Output: 3
Explanation: Choose "ab" from word1 and "a" from word2 to make "aba", which is a palindrome.
Example 3:

Input: word1 = "aa", word2 = "bb"
Output: 0
Explanation: You cannot construct a palindrome from the described method, so return 0.
 

Constraints:

1 <= word1.length, word2.length <= 1000
word1 and word2 consist of lowercase English letters.

class Solution
{
public:
    short pal[2000][2000];

    int longestPalindrome(string word1, string word2)
    {
        string s = word1 + word2;
        int n = s.length();
        for (int len = 1; len <= n; ++len)
        {
            for (int i = 0; i + len <= n; ++i)
            {
                int j = i + len - 1;
                if (s[i] == s[j])
                {
                    if (i + 2 >= j) pal[i][j] = (j - i + 1);
                    else pal[i][j] = 2 + pal[i + 1][j - 1];
                }
                else
                {
                    pal[i][j] = max(pal[i + 1][j], pal[i][j - 1]);
                }
            }
        }
        int ans = 0;
        for(int i = 0; i < word1.length(); i++)
        {
            for(int j = 0; j < word2.length(); j++)
            {
                if(word1[i] == word2[j])
                    ans = max(ans, (int)pal[i][word1.length() + j]);
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/count-items-matching-a-rule/

You are given an array items, where each items[i] = [typei, colori, namei] describes the type, color, and name of the ith item. 
You are also given a rule represented by two strings, ruleKey and ruleValue.

The ith item is said to match the rule if one of the following is true:

ruleKey == "type" and ruleValue == typei.
ruleKey == "color" and ruleValue == colori.
ruleKey == "name" and ruleValue == namei.
Return the number of items that match the given rule.

 

Example 1:

Input: items = [["phone","blue","pixel"],["computer","silver","lenovo"],["phone","gold","iphone"]], ruleKey = "color", ruleValue = "silver"
Output: 1
Explanation: There is only one item matching the given rule, which is ["computer","silver","lenovo"].
Example 2:

Input: items = [["phone","blue","pixel"],["computer","silver","phone"],["phone","gold","iphone"]], ruleKey = "type", ruleValue = "phone"
Output: 2
Explanation: There are only two items matching the given rule, which are ["phone","blue","pixel"] and ["phone","gold","iphone"]. Note that the item ["computer","silver","phone"] does not match.
 

Constraints:

1 <= items.length <= 104
1 <= typei.length, colori.length, namei.length, ruleValue.length <= 10
ruleKey is equal to either "type", "color", or "name".
All strings consist only of lowercase letters.

class Solution
{
public:
    int countMatches(vector<vector<string>> &items, string ruleKey, string ruleValue)
    {
        int count = 0;
        for(int i = 0; i < items.size(); i++)
        {
            if((ruleKey == "type") && (items[i][0] == ruleValue)) count++;
            else if((ruleKey == "color") && (items[i][1] == ruleValue)) count++;
            else if((ruleKey == "name") && (items[i][2] == ruleValue)) count++;
        }
        return count;
    }
};


// Source https://leetcode.com/problems/closest-dessert-cost/

You would like to make dessert and are preparing to buy the ingredients. You have n ice cream base flavors and m types of toppings to choose from. 
You must follow these rules when making your dessert:

There must be exactly one ice cream base.
You can add one or more types of topping or have no toppings at all.
There are at most two of each type of topping.
You are given three inputs:

baseCosts, an integer array of length n, where each baseCosts[i] represents the price of the ith ice cream base flavor.
toppingCosts, an integer array of length m, where each toppingCosts[i] is the price of one of the ith topping.
target, an integer representing your target price for dessert.
You want to make a dessert with a total cost as close to target as possible.

Return the closest possible cost of the dessert to target. If there are multiple, return the lower one.

 

Example 1:

Input: baseCosts = [1,7], toppingCosts = [3,4], target = 10
Output: 10
Explanation: Consider the following combination (all 0-indexed):
- Choose base 1: cost 7
- Take 1 of topping 0: cost 1 x 3 = 3
- Take 0 of topping 1: cost 0 x 4 = 0
Total: 7 + 3 + 0 = 10.
Example 2:

Input: baseCosts = [2,3], toppingCosts = [4,5,100], target = 18
Output: 17
Explanation: Consider the following combination (all 0-indexed):
- Choose base 1: cost 3
- Take 1 of topping 0: cost 1 x 4 = 4
- Take 2 of topping 1: cost 2 x 5 = 10
- Take 0 of topping 2: cost 0 x 100 = 0
Total: 3 + 4 + 10 + 0 = 17. You cannot make a dessert with a total cost of 18.
Example 3:

Input: baseCosts = [3,10], toppingCosts = [2,5], target = 9
Output: 8
Explanation: It is possible to make desserts with cost 8 and 10. Return 8 as it is the lower cost.
 

Constraints:

n == baseCosts.length
m == toppingCosts.length
1 <= n, m <= 10
1 <= baseCosts[i], toppingCosts[i] <= 104
1 <= target <= 104

class Solution
{
public:
    int diff;
    int res;

    void recur(vector<int> &toppingCosts, int idx, int target, int cur)
    {
        if(idx >= toppingCosts.size())
        {
            if(abs(cur - target) == diff)
            {
                res = min(res, cur);
            }
            else if(abs(cur - target) < diff)
            {
                diff = abs(cur - target);
                res = cur;
            }
            return;
        }
        if(cur > target && abs(cur - target) > diff) return;
        recur(toppingCosts, idx + 1, target, cur);
        recur(toppingCosts, idx + 1, target, cur + toppingCosts[idx]);
        recur(toppingCosts, idx + 1, target, cur + 2 * toppingCosts[idx]);
    }

    int closestCost(vector<int> &baseCosts, vector<int> &toppingCosts, int target)
    {
        res = diff = INT_MAX;
        for(int i = 0; i < baseCosts.size(); i++)
        {
            recur(toppingCosts, 0, target, baseCosts[i]);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/equal-sum-arrays-with-minimum-number-of-operations/

You are given two arrays of integers nums1 and nums2, possibly of different lengths. The values in the arrays are between 1 and 6, inclusive.

In one operation, you can change any integer's value in any of the arrays to any value between 1 and 6, inclusive.

Return the minimum number of operations required to make the sum of values in nums1 equal to the sum of values in nums2. 
Return -1​​​​​ if it is not possible to make the sum of the two arrays equal.

 

Example 1:

Input: nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2]
Output: 3
Explanation: You can make the sums of nums1 and nums2 equal with 3 operations. All indices are 0-indexed.
- Change nums2[0] to 6. nums1 = [1,2,3,4,5,6], nums2 = [6,1,2,2,2,2].
- Change nums1[5] to 1. nums1 = [1,2,3,4,5,1], nums2 = [6,1,2,2,2,2].
- Change nums1[2] to 2. nums1 = [1,2,2,4,5,1], nums2 = [6,1,2,2,2,2].
Example 2:

Input: nums1 = [1,1,1,1,1,1,1], nums2 = [6]
Output: -1
Explanation: There is no way to decrease the sum of nums1 or to increase the sum of nums2 to make them equal.
Example 3:

Input: nums1 = [6,6], nums2 = [1]
Output: 3
Explanation: You can make the sums of nums1 and nums2 equal with 3 operations. All indices are 0-indexed. 
- Change nums1[0] to 2. nums1 = [2,6], nums2 = [1].
- Change nums1[1] to 2. nums1 = [2,2], nums2 = [1].
- Change nums2[0] to 4. nums1 = [2,2], nums2 = [4].
 

Constraints:

1 <= nums1.length, nums2.length <= 105
1 <= nums1[i], nums2[i] <= 6

sum1为 两个数组the sum of values较大的，对应nums1
sum2为 两个数组the sum of values较小的，对应nums2
nums1中的数要缩小，每个元素变化量最大为nums1[i] - 1（从nums1[i]变为1）
nums2中的数要增大，每个元素变化量最大为6-nums1[i]（从nums1[i]变为6）
按照变化量从大到小对ans进行排序

class Solution
{
public:
    int minOperations(vector<int> &nums1, vector<int> &nums2)
    {
        if(nums1.size() > 6 * nums2.size() || nums1.size() * 6 < nums2.size())
        {
            return -1;
        }
        int sum1 = accumulate(nums1.begin(), nums1.end(), 0);
        int sum2 = accumulate(nums2.begin(), nums2.end(), 0);
        if(sum1 == sum2)
        {
            return 0;
        }
        if(sum1 < sum2)
        {
            swap(nums1, nums2);
            swap(sum1, sum2);
        }
        int diff = sum1 - sum2;
        vector<int> vec;
        vec.reserve(nums1.size() + nums2.size());
        for(int i = 0; i < nums1.size(); i++)
        {
            vec.push_back(nums1[i] - 1);
        }
        for(int i = 0; i < nums2.size(); i++)
        {
            vec.push_back(6 - nums2[i]);
        }
        sort(vec.rbegin(), vec.rend());
        int count = 0;
        for (auto val : vec)
        {
            count++;
            diff -= val;
            if(diff <= 0)
            {
                return count;
            }
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/car-fleet-ii/

There are n cars traveling at different speeds in the same direction along a one-lane road. You are given an array cars of length n, where cars[i] = [positioni, speedi] represents:

positioni is the distance between the ith car and the beginning of the road in meters. It is guaranteed that positioni < positioni+1.
speedi is the initial speed of the ith car in meters per second.
For simplicity, cars can be considered as points moving along the number line. Two cars collide when they occupy the same position. 
Once a car collides with another car, they unite and form a single car fleet. The cars in the formed fleet will have the same position and the same speed, 
which is the initial speed of the slowest car in the fleet.

Return an array answer, where answer[i] is the time, in seconds, at which the ith car collides with the next car, or -1 if the car does not collide with the next car. 
Answers within 10-5 of the actual answers are accepted.

 

Example 1:

Input: cars = [[1,2],[2,1],[4,3],[7,2]]
Output: [1.00000,-1.00000,3.00000,-1.00000]
Explanation: After exactly one second, the first car will collide with the second car, and form a car fleet with speed 1 m/s. After exactly 3 seconds, the third car will collide with the fourth car, and form a car fleet with speed 2 m/s.
Example 2:

Input: cars = [[3,4],[5,4],[6,3],[9,1]]
Output: [3.00000,1.00000,1.50000,-1.00000]
 
Constraints:

1 <= cars.length <= 105
1 <= positioni, speedi <= 106
positioni < positioni+1

collision_idx[i] = j 表示cars[i] 第一次碰撞是与cars[j]碰撞，碰撞后cars[i]速度减小，
如果i与j之间还有其他cars，则说明其他cars先与cars[j]碰撞后减速，然后在cars[i]碰撞cars[j]时，同时也碰撞到这些cars
collision_idx[i] = n 表示cars[i] 不会与其他cars发生碰撞，从而减速

class Solution
{
public:
    vector<double> getCollisionTimes(vector<vector<int>> &cars)
    {
        int n = cars.size();
        vector<int> collision_idx(n, n);
        vector<double> times(n, -1.0);
        for (int i = n - 2; i >= 0; i--)
        {
            int idx = i + 1;
            for (; idx < n; )
            {
                if (cars[i][1] <= cars[idx][1])
                {
                    idx = collision_idx[idx];
                    continue;
                }
                double t = double(cars[idx][0] - cars[i][0]) / (cars[i][1] - cars[idx][1]);
                if (collision_idx[idx] == n || t <= times[idx])
                {
                    times[i] = t;
                    collision_idx[i] = idx;
                    break;
                }
                idx = collision_idx[idx];
            }
        }
        return times;
    }
};


// Source https://leetcode.com/problems/find-nearest-point-that-has-the-same-x-or-y-coordinate/

You are given two integers, x and y, which represent your current location on a Cartesian grid: (x, y). 
You are also given an array points where each points[i] = [ai, bi] represents that a point exists at (ai, bi). 
A point is valid if it shares the same x-coordinate or the same y-coordinate as your location.

Return the index (0-indexed) of the valid point with the smallest Manhattan distance from your current location. 
If there are multiple, return the valid point with the smallest index. If there are no valid points, return -1.

The Manhattan distance between two points (x1, y1) and (x2, y2) is abs(x1 - x2) + abs(y1 - y2).

 

Example 1:

Input: x = 3, y = 4, points = [[1,2],[3,1],[2,4],[2,3],[4,4]]
Output: 2
Explanation: Of all the points, only [3,1], [2,4] and [4,4] are valid. Of the valid points, [2,4] and [4,4] have the smallest Manhattan distance from your current location, with a distance of 1. [2,4] has the smallest index, so return 2.
Example 2:

Input: x = 3, y = 4, points = [[3,4]]
Output: 0
Explanation: The answer is allowed to be on the same location as your current location.
Example 3:

Input: x = 3, y = 4, points = [[2,3]]
Output: -1
Explanation: There are no valid points.
 

Constraints:

1 <= points.length <= 104
points[i].length == 2
1 <= x, y, ai, bi <= 104

class Solution
{
public:
    int nearestValidPoint(int x, int y, vector<vector<int>> &points)
    {
        int minDist = INT_MAX;
        int minInd = INT_MAX;
        bool found = false;
        for(int i = 0; i < points.size(); i++)
        {
            if(points[i][0] == x || points[i][1] == y)
            {
                found = true;
                int dist = abs(x - points[i][0]) + abs(y - points[i][1]);
                if(dist < minDist)
                {
                    minDist = dist;
                    minInd = i;
                }
            }
        }
        if (!found) return -1;
        return minInd;
    }
};


// Source https://leetcode.com/problems/check-if-number-is-a-sum-of-powers-of-three/

Given an integer n, return true if it is possible to represent n as the sum of distinct powers of three. Otherwise, return false.

An integer y is a power of three if there exists an integer x such that y == 3x.

 

Example 1:

Input: n = 12
Output: true
Explanation: 12 = 3^1 + 3^2
Example 2:

Input: n = 91
Output: true
Explanation: 91 = 30 + 32 + 34
Example 3:

Input: n = 21
Output: false
 

Constraints:

1 <= n <= 107

问题等价于问n的三进制表示是不是每一位都不是2。

x0 * 3^0 + x1 * 3^1 + x2 * 3^2 + ... + xm * 3^m = n
x0, x1, x2, ... , xm只能为0或1

class Solution
{
public:
    bool checkPowersOfThree(int n)
    {
        if(n == 1) return true;
        if(n % 3 == 0) return checkPowersOfThree(n / 3);
        if(n % 3 == 1) return checkPowersOfThree((n - 1)/3);
        return false;
    }
};


// Source https://leetcode.com/problems/sum-of-beauty-of-all-substrings/

The beauty of a string is the difference in frequencies between the most frequent and least frequent characters.

For example, the beauty of "abaacc" is 3 - 1 = 2.
Given a string s, return the sum of beauty of all of its substrings.

 

Example 1:

Input: s = "aabcb"
Output: 5
Explanation: The substrings with non-zero beauty are ["aab","aabc","aabcb","abcb","bcb"], each with beauty equal to 1.
Example 2:

Input: s = "aabcbaa"
Output: 17
 

Constraints:

1 <= s.length <= 500
s consists of only lowercase English letters.

class Solution
{
public:

    int beautySum(string s)
    {
        int beauty = 0;
        int n = s.length();
        for (int i = 0; i < n; i++)
        {
            int mp[26] = {0};
            for (int j = i; j < n; j++)
            {
                mp[s[j] - 'a']++;
                int lFreq = INT_MAX;
                int mFreq = INT_MIN;
                for (auto f : mp)
                {
                    if (f == 0) continue;
                    lFreq = min(lFreq, f);
                    mFreq = max(mFreq, f);
                }
                beauty += (mFreq - lFreq);
            }
        }
        return beauty;
    }
};


// Source https://leetcode.com/problems/count-pairs-of-nodes/

You are given an undirected graph defined by an integer n, the number of nodes, and a 2D integer array edges, the edges in the graph, 
where edges[i] = [ui, vi] indicates that there is an undirected edge between ui and vi. You are also given an integer array queries.

Let incident(a, b) be defined as the number of edges that are connected to either node a or b.

The answer to the jth query is the number of pairs of nodes (a, b) that satisfy both of the following conditions:

a < b
incident(a, b) > queries[j]
Return an array answers such that answers.length == queries.length and answers[j] is the answer of the jth query.

Note that there can be multiple edges between the same two nodes.

 

Example 1:


Input: n = 4, edges = [[1,2],[2,4],[1,3],[2,3],[2,1]], queries = [2,3]
Output: [6,5]
Explanation: The calculations for incident(a, b) are shown in the table above.
The answers for each of the queries are as follows:
- answers[0] = 6. All the pairs have an incident(a, b) value greater than 2.
- answers[1] = 5. All the pairs except (3, 4) have an incident(a, b) value greater than 3.
Example 2:

Input: n = 5, edges = [[1,5],[1,5],[3,4],[2,5],[1,3],[5,1],[2,3],[2,5]], queries = [1,2,3,4,5]
Output: [10,10,9,8,6]
 

Constraints:

2 <= n <= 2 * 104
1 <= edges.length <= 105
1 <= ui, vi <= n
ui != vi
1 <= queries.length <= 20
0 <= queries[j] < edges.length

Answer for each query is: total pairs of (u,v) such that degree[u] + degree[v] - edgeCount(u,v) > query

edge = {u,v}
mp[edge] 保存edgeCount(u,v)
count[u]，count[v] 保存degree[u]，degree[v]
freqDegree 记录每个degree对应的节点数

class Solution
{
public:
    vector<int> countPairs(int n, vector<vector<int>> &edges, vector<int> &queries)
    {
        map<pair<int, int>, int> mp;
        vector<int> count(n + 1, 0);
        for(auto &v : edges)
        {
            mp[{max(v[0], v[1]), min(v[0], v[1])}]++;
            count[v[0]]++;
            count[v[1]]++;
        }
        map<int, int> freqDegree;
        for(int i = 1; i <= n; i++)
        {
            freqDegree[count[i]]++;
        }
        int n2 = edges.size();
        vector<int> ans(2 * n2 + 5, 0);
        for(auto it = freqDegree.begin(); it != freqDegree.end(); it++)
        {
            ans[it->first * 2] += (it->second * (it->second - 1)) / 2;
            auto it2 = it;
            it2++;
            for(; it2 != freqDegree.end(); it2++)
            {
                ans[it->first + it2->first] += ((it->second) * (it2->second));
            }
        }
        for(auto [p, edgeCount] : mp)
        {
            ans[count[p.first] + count[p.second]]--;
            ans[count[p.first] + count[p.second] - edgeCount]++;
        }
        for(int i = 1; i <= 2 * n2; i++)
        {
            ans[i] += ans[i - 1];
        }
        vector<int> res;
        int x = ans[2 * n2];
        for(int i : queries)
        {
            res.push_back(x - ans[i]);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/check-if-binary-string-has-at-most-one-segment-of-ones/

Given a binary string s ​​​​​without leading zeros, return true​​​ if s contains at most one contiguous segment of ones. Otherwise, return false.

 

Example 1:

Input: s = "1001"
Output: false
Explanation: The ones do not form a contiguous segment.
Example 2:

Input: s = "110"
Output: true
 

Constraints:

1 <= s.length <= 100
s[i]​​​​ is either '0' or '1'.
s[0] is '1'.

class Solution
{
public:
    bool checkOnesSegment(string s)
    {
        int n = s.length();
        int count = 0;
        for (int i = 0; i < n; )
        {
            if (s[i] == '1')
            {
                ++count;
                if (count > 1) return false;
                while (i < n && s[i] == '1') ++i;
            }
            else ++i;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/minimum-elements-to-add-to-form-a-given-sum/

You are given an integer array nums and two integers limit and goal. The array nums has an interesting property that abs(nums[i]) <= limit.

Return the minimum number of elements you need to add to make the sum of the array equal to goal. The array must maintain its property that abs(nums[i]) <= limit.

Note that abs(x) equals x if x >= 0, and -x otherwise.

 

Example 1:

Input: nums = [1,-1,1], limit = 3, goal = -4
Output: 2
Explanation: You can add -2 and -3, then the sum of the array will be 1 - 1 + 1 - 2 - 3 = -4.
Example 2:

Input: nums = [1,-10,9,1], limit = 100, goal = 0
Output: 1
 

Constraints:

1 <= nums.length <= 105
1 <= limit <= 106
-limit <= nums[i] <= limit
-109 <= goal <= 109

class Solution
{
public:
    int minElements(vector<int> &nums, int limit, int goal)
    {
        long long diff = (long long)goal - accumulate(nums.begin(), nums.end(), 0ll);
        return (abs(diff) + limit - 1) / limit;
    }
};


// Source https://leetcode.com/problems/number-of-restricted-paths-from-first-to-last-node/

There is an undirected weighted connected graph. You are given a positive integer n which denotes that the graph has n nodes labeled from 1 to n, 
and an array edges where each edges[i] = [ui, vi, weighti] denotes that there is an edge between nodes ui and vi with weight equal to weighti.

A path from node start to node end is a sequence of nodes [z0, z1, z2, ..., zk] such that z0 = start and zk = end and there is an edge between zi and zi+1 where 0 <= i <= k-1.

The distance of a path is the sum of the weights on the edges of the path. Let distanceToLastNode(x) denote the shortest distance of a path between node n and node x. 
A restricted path is a path that also satisfies that distanceToLastNode(zi) > distanceToLastNode(zi+1) where 0 <= i <= k-1.

Return the number of restricted paths from node 1 to node n. Since that number may be too large, return it modulo 109 + 7.

 

Example 1:


Input: n = 5, edges = [[1,2,3],[1,3,3],[2,3,1],[1,4,2],[5,2,2],[3,5,1],[5,4,10]]
Output: 3
Explanation: Each circle contains the node number in black and its distanceToLastNode value in blue. The three restricted paths are:
1) 1 --> 2 --> 5
2) 1 --> 2 --> 3 --> 5
3) 1 --> 3 --> 5
Example 2:


Input: n = 7, edges = [[1,3,1],[4,1,2],[7,3,4],[2,5,3],[5,6,1],[6,7,2],[7,5,3],[2,6,4]]
Output: 1
Explanation: Each circle contains the node number in black and its distanceToLastNode value in blue. The only restricted path is 1 --> 3 --> 7.
 

Constraints:

1 <= n <= 2 * 104
n - 1 <= edges.length <= 4 * 104
edges[i].length == 3
1 <= ui, vi <= n
ui != vi
1 <= weighti <= 105
There is at most one edge between any two nodes.
There is at least one path between any two nodes.

class Solution
{
public:
    int n;
    const int mod = 1e9 + 7;

    vector<long long> dijkstra(int src, vector<vector<pair<int, long long>>> &adj)
    {
        vector<long long> dist(n, LLONG_MAX);
        dist[src] = 0;
        priority_queue<pair<long long, int>, vector<pair<long long, int>>, greater<pair<long long, int>>> pq;
        pq.push({0, src});
        vector<int> visited(n);
        while(!pq.empty())
        {
            auto [currDist, currNode] = pq.top();
            pq.pop();
            if (visited[currNode]) continue;
            visited[currNode] = 1;
            for(auto [adjNode, weight] : adj[currNode])
            {
                if(currDist + weight < dist[adjNode])
                {
                    dist[adjNode] = currDist + weight;
                    pq.push({dist[adjNode], adjNode});
                }
            }
        }
        return dist;
    }

    int recur(int currNode, vector<long long> &distanceToLastFrom, vector<int> &dp, vector<vector<pair<int, long long>>> &adj)
    {
        if(currNode == n - 1) return 1;
        if(dp[currNode] != -1) return dp[currNode];
        int res = 0;
        for(auto [adjNode, weight] : adj[currNode])
        {
            if(distanceToLastFrom[adjNode] < distanceToLastFrom[currNode])
            {
                res = (res + recur(adjNode, distanceToLastFrom, dp, adj)) % mod;
            }
        }
        return dp[currNode] = res;
    }

    int countRestrictedPaths(int n, vector<vector<int>> &edges)
    {
        this->n = n;
        vector<vector<pair<int, long long>>> adj(n);
        for(auto &e : edges)
        {
            int u = e[0] - 1;
            int v = e[1] - 1;
            long long w = e[2];
            adj[u].push_back({v, w});
            adj[v].push_back({u, w});
        }
        int src = n - 1;
        vector<long long> distanceToLastFrom = dijkstra(src, adj);
        vector<int> dp(n, -1);
        return recur(0, distanceToLastFrom, dp, adj);
    }
};


// Source https://leetcode.com/problems/make-the-xor-of-all-segments-equal-to-zero/

You are given an array nums​​​ and an integer k​​​​​. The XOR of a segment [left, right] where left <= right is the XOR of all the elements with indices between left and right, inclusive: 
nums[left] XOR nums[left+1] XOR ... XOR nums[right].

Return the minimum number of elements to change in the array such that the XOR of all segments of size k​​​​​​ is equal to zero.

 

Example 1:

Input: nums = [1,2,0,3,0], k = 1
Output: 3
Explanation: Modify the array from [1,2,0,3,0] to from [0,0,0,0,0].
Example 2:

Input: nums = [3,4,5,2,1,7,3,4,7], k = 3
Output: 3
Explanation: Modify the array from [3,4,5,2,1,7,3,4,7] to [3,4,7,3,4,7,3,4,7].
Example 3:

Input: nums = [1,2,4,1,2,5,1,2,6], k = 3
Output: 3
Explanation: Modify the array from [1,2,4,1,2,5,1,2,6] to [1,2,3,1,2,3,1,2,3].
 

Constraints:

1 <= k <= nums.length <= 2000
​​​​​​0 <= nums[i] < 2^10

所有长度为 k 的区间异或结果等于零，可推出得到的数组满足：

a1 = ak+1 = a2k+1 = …
a2 = ak+2 = a2k+2 = …
...
ai = ak+i = a2k+i = ...

a1 xor a2 xor ... xor ak = 0
ak+1 xor ak+2 xor ... xor ak+k = 0
...
ak*x+1 xor ak*x + 2 xor ... xor ak*x+k = 0


v[0] xor v[1] ... xor v[i] = j
v[k] xor v[k+1] ... xor v[k+i] = j
...
v[k*x + 0] xor v[k * x + 1] ... xor v[k * x + i] = j
v[0] = v[k] = ... = v[k * x + 0]
...
v[i] = v[k+i] = ... = v[k * x + i]

freq[i][x] = frequency of the number x at position i where i in [0, k - 1]，i 对应 下标i + k * x，x in [0, 1, 2, ... ]，and (i + k * x) < n
dp[i][j] = minimum total number of elements we need to change from index 0 to i
so that the xor of the subarray from index 0 to i is equal to j，i 对应 下标i + k * x，x in [0, 1, 2, ... ]，and (i + k * x) < n
numsAtPosition[i] = set of unique numbers at position i where i in [0, k - 1]，i 对应 下标i + k * x，x in [0, 1, 2, ... ]，and (i + k * x) < n

class Solution
{
public:
    int minChanges(vector<int> &v, int k)
    {
        int n = v.size();
        vector<vector<int>> freq(k, vector<int>(1024, 0));
        vector<vector<int>> dp(k, vector<int>(1024, n + 1));
        unordered_set<int> numsAtPosition[k];
        for(int i = 0; i < n; i++)
        {
            int position = i % k;
            freq[position][v[i]]++;
            numsAtPosition[position].insert(v[i]);
        }
        int bestUptoLast = 0;
        for(int i = 0; i < k; i++)
        {
            int cntOfPos = n / k + (((n % k) > i) ? 1 : 0);
            int bestAti = n + 1;
            for(int j = 0; j < 1024; j++)
            {
                if(i == 0)
                {
                    // freq[i][j] 可能为0或者不为0
                    dp[i][j] = cntOfPos - freq[i][j];
                }
                else
                {
                    // j = (j ^ x) ^ x
                    // freq[i][x] 不为0
                    for(auto x : numsAtPosition[i])
                    {
                        dp[i][j] = min(dp[i][j], dp[i - 1][j ^ x] + cntOfPos - freq[i][x]);
                    }
                    // freq[i][x] 为0
                    // dp[i - 1][j ^ x] + cntOfPos - freq[i][x] -> dp[i - 1][j ^ x] + cntOfPos
                    // min(dp[i - 1][j ^ x] + cntOfPos) = min(dp[i - 1][j ^ x]) + cntOfPos
                    dp[i][j] = min(dp[i][j], bestUptoLast + cntOfPos);
                }
                bestAti = min(bestAti, dp[i][j]);
            }
            bestUptoLast = bestAti;
        }
        return dp[k - 1][0];
    }
};


// Source https://leetcode.com/problems/check-if-one-string-swap-can-make-strings-equal/

You are given two strings s1 and s2 of equal length. A string swap is an operation where you choose two indices in a string (not necessarily different) and swap the characters at these indices.

Return true if it is possible to make both strings equal by performing at most one string swap on exactly one of the strings. Otherwise, return false.

 

Example 1:

Input: s1 = "bank", s2 = "kanb"
Output: true
Explanation: For example, swap the first character with the last character of s2 to make "bank".
Example 2:

Input: s1 = "attack", s2 = "defend"
Output: false
Explanation: It is impossible to make them equal with one string swap.
Example 3:

Input: s1 = "kelb", s2 = "kelb"
Output: true
Explanation: The two strings are already equal, so no string swap operation is required.
 

Constraints:

1 <= s1.length, s2.length <= 100
s1.length == s2.length
s1 and s2 consist of only lowercase English letters.

class Solution
{
public:
    bool areAlmostEqual(string s1, string s2)
    {
        int res = 0;
        vector<int> r1, r2;
        for (int i = 0; i < s1.size(); ++i)
        {
            if (s1[i] != s2[i])
            {
                r1.push_back(s1[i]);
                r2.push_back(s2[i]);
            }
            if (r1.size() > 2)
            {
                return false;
            }
        }
        return r1.size() == 0 || (r1.size() == 2 && r1[0] == r2[1] && r1[1] == r2[0]);
    }
};


// Source https://leetcode.com/problems/find-center-of-star-graph/

There is an undirected star graph consisting of n nodes labeled from 1 to n. A star graph is a graph where there is one center node and exactly n - 1 edges 
that connect the center node with every other node.

You are given a 2D integer array edges where each edges[i] = [ui, vi] indicates that there is an edge between the nodes ui and vi. Return the center of the given star graph.

 

Example 1:


Input: edges = [[1,2],[2,3],[4,2]]
Output: 2
Explanation: As shown in the figure above, node 2 is connected to every other node, so 2 is the center.
Example 2:

Input: edges = [[1,2],[5,1],[1,3],[1,4]]
Output: 1
 

Constraints:

3 <= n <= 105
edges.length == n - 1
edges[i].length == 2
1 <= ui, vi <= n
ui != vi
The given edges represent a valid star graph.

class Solution
{
public:
    int findCenter(vector<vector<int>> &edges)
    {
        int a = edges[0][0];
        int b = edges[0][1];
        if(a == edges[1][0] || a == edges[1][1])
            return a;
        return b;
    }
};


// Source https://leetcode.com/problems/maximum-average-pass-ratio/

There is a school that has classes of students and each class will be having a final exam. You are given a 2D integer array classes, 
where classes[i] = [passi, totali]. You know beforehand that in the ith class, there are totali total students, but only passi number of students will pass the exam.

You are also given an integer extraStudents. There are another extraStudents brilliant students that are guaranteed to pass the exam of any class they are assigned to. 
You want to assign each of the extraStudents students to a class in a way that maximizes the average pass ratio across all the classes.

The pass ratio of a class is equal to the number of students of the class that will pass the exam divided by the total number of students of the class. 
The average pass ratio is the sum of pass ratios of all the classes divided by the number of the classes.

Return the maximum possible average pass ratio after assigning the extraStudents students. Answers within 10-5 of the actual answer will be accepted.

 

Example 1:

Input: classes = [[1,2],[3,5],[2,2]], extraStudents = 2
Output: 0.78333
Explanation: You can assign the two extra students to the first class. The average pass ratio will be equal to (3/4 + 3/5 + 2/2) / 3 = 0.78333.
Example 2:

Input: classes = [[2,4],[3,9],[4,5],[2,10]], extraStudents = 4
Output: 0.53485
 

Constraints:

1 <= classes.length <= 105
classes[i].length == 2
1 <= passi <= totali <= 105
1 <= extraStudents <= 105

class Solution
{
public:
    double maxAverageRatio(vector<vector<int>> &classes, int extraStudents)
    {
        priority_queue<pair<double, pair<int, int>>> pq;
        for(auto &v : classes)
        {
            auto pass = v[0], total = v[1];
            auto improvement = (double)(pass + 1) / (total + 1) - (double)pass / total;
            pq.push({improvement, {pass, total}});
        }
        for(int i = 0; i < extraStudents; i++)
        {
            auto [_, p] = pq.top();
            pq.pop();
            auto pass = p.first;
            auto total = p.second;
            ++pass;
            ++total;
            auto newImprovment = (double)(pass + 1) / (total + 1) - (double)pass / total;
            pq.push({newImprovment, {pass, total}});
        }
        double sum = 0.0;
        while(!pq.empty())
        {
            auto [_, p] = pq.top();
            pq.pop();
            auto pass = p.first;
            auto total = p.second;
            sum += (double)pass / total;
        }
        return sum / (double)classes.size();
    }
};


// Source https://leetcode.com/problems/maximum-score-of-a-good-subarray/

You are given an array of integers nums (0-indexed) and an integer k.

The score of a subarray (i, j) is defined as min(nums[i], nums[i+1], ..., nums[j]) * (j - i + 1). A good subarray is a subarray where i <= k <= j.

Return the maximum possible score of a good subarray.

 

Example 1:

Input: nums = [1,4,3,7,4,5], k = 3
Output: 15
Explanation: The optimal subarray is (1, 5) with a score of min(4,3,7,4,5) * (5-1+1) = 3 * 5 = 15. 
Example 2:

Input: nums = [5,5,4,5,4,1,1,1], k = 0
Output: 20
Explanation: The optimal subarray is (0, 4) with a score of min(5,5,4,5,4) * (4-0+1) = 4 * 5 = 20.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 2 * 104
0 <= k < nums.length

nums[i]为正数，从下标k向左或向右扩展，优先向值更大的那个方向扩展，因为这样可以使得最小值尽可能大

class Solution
{
public:
    int maximumScore(vector<int> &nums, int k)
    {
        int n = nums.size();
        int left = k, right = k;
        int minVal = nums[k];
        int res = nums[k];
        while (left > 0 || right < n - 1)
        {
            int leftVal = (left > 0 ? nums[left - 1] : 0);
            int rightVal = (right < n - 1 ? nums[right + 1] : 0);
            if (leftVal < rightVal)
            {
                minVal = min(minVal, rightVal);
                right++;
            }
            else
            {
                minVal = min(minVal, leftVal);
                left--;
            }
            res = max(res, minVal * (right - left + 1));
        }
        return res;
    }
};


// Source https://leetcode.com/problems/second-largest-digit-in-a-string/

Given an alphanumeric string s, return the second largest numerical digit that appears in s, or -1 if it does not exist.

An alphanumeric string is a string consisting of lowercase English letters and digits.

 

Example 1:

Input: s = "dfa12321afd"
Output: 2
Explanation: The digits that appear in s are [1, 2, 3]. The second largest digit is 2.
Example 2:

Input: s = "abc1111"
Output: -1
Explanation: The digits that appear in s are [1]. There is no second largest digit. 
 

Constraints:

1 <= s.length <= 500
s consists of only lowercase English letters and/or digits.

class Solution
{
public:
    int secondHighest(string s)
    {
        vector<int> count(10, 0);
        for(int i = 0; i < s.size(); i++)
        {
            if(isdigit(s[i]))
            {
                count[s[i] - '0']++;
            }
        }
        int found = 0;
        for(int j = 9; j >= 0; j--)
        {
            if(count[j] != 0)
            {
                if(found == 1)
                {
                    return j;
                }
                found++;
            }
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/design-authentication-manager/

There is an authentication system that works with authentication tokens. For each session, the user will receive a new authentication token 
that will expire timeToLive seconds after the currentTime. If the token is renewed, the expiry time will be extended to expire timeToLive seconds after the (potentially different) currentTime.

Implement the AuthenticationManager class:

AuthenticationManager(int timeToLive) constructs the AuthenticationManager and sets the timeToLive.
generate(string tokenId, int currentTime) generates a new token with the given tokenId at the given currentTime in seconds.
renew(string tokenId, int currentTime) renews the unexpired token with the given tokenId at the given currentTime in seconds. 
If there are no unexpired tokens with the given tokenId, the request is ignored, and nothing happens.
countUnexpiredTokens(int currentTime) returns the number of unexpired tokens at the given currentTime.
Note that if a token expires at time t, and another action happens on time t (renew or countUnexpiredTokens), the expiration takes place before the other actions.

 

Example 1:


Input
["AuthenticationManager", "renew", "generate", "countUnexpiredTokens", "generate", "renew", "renew", "countUnexpiredTokens"]
[[5], ["aaa", 1], ["aaa", 2], [6], ["bbb", 7], ["aaa", 8], ["bbb", 10], [15]]
Output
[null, null, null, 1, null, null, null, 0]

Explanation
AuthenticationManager authenticationManager = new AuthenticationManager(5); // Constructs the AuthenticationManager with timeToLive = 5 seconds.
authenticationManager.renew("aaa", 1); // No token exists with tokenId "aaa" at time 1, so nothing happens.
authenticationManager.generate("aaa", 2); // Generates a new token with tokenId "aaa" at time 2.
authenticationManager.countUnexpiredTokens(6); // The token with tokenId "aaa" is the only unexpired one at time 6, so return 1.
authenticationManager.generate("bbb", 7); // Generates a new token with tokenId "bbb" at time 7.
authenticationManager.renew("aaa", 8); // The token with tokenId "aaa" expired at time 7, and 8 >= 7, so at time 8 the renew request is ignored, and nothing happens.
authenticationManager.renew("bbb", 10); // The token with tokenId "bbb" is unexpired at time 10, so the renew request is fulfilled and now the token will expire at time 15.
authenticationManager.countUnexpiredTokens(15); // The token with tokenId "bbb" expires at time 15, and the token with tokenId "aaa" expired at time 7, so currently no token is unexpired, so return 0.
 

Constraints:

1 <= timeToLive <= 108
1 <= currentTime <= 108
1 <= tokenId.length <= 5
tokenId consists only of lowercase letters.
All calls to generate will contain unique values of tokenId.
The values of currentTime across all the function calls will be strictly increasing.
At most 2000 calls will be made to all functions combined.

class AuthenticationManager
{
public:
    int t;
    set<pair<int, string>> st;
    unordered_map<string, int> table;

    inline void clearTable(int currentTime)
    {
        while(!st.empty() && st.begin()->first <= currentTime)
        {
            table.erase(st.begin()->second);
            st.erase(st.begin());
        }
    }

    AuthenticationManager(int timeToLive)
    {
        t = timeToLive;
    }

    void generate(string tokenId, int currentTime)
    {
        table[tokenId] = currentTime + t;
        st.insert({table[tokenId], tokenId});
    }

    void renew(string tokenId, int currentTime)
    {
        clearTable(currentTime);

        if(table.count(tokenId))
        {
            st.erase({table[tokenId], tokenId});
            table[tokenId] = currentTime + t;
            st.insert({table[tokenId], tokenId});
        }
    }

    int countUnexpiredTokens(int currentTime)
    {
        clearTable(currentTime);
        return table.size();
    }
};


// Source https://leetcode.com/problems/maximum-number-of-consecutive-values-you-can-make/

You are given an integer array coins of length n which represents the n coins that you own. The value of the ith coin is coins[i]. 
You can make some value x if you can choose some of your n coins such that their values sum up to x.

Return the maximum number of consecutive integer values that you can make with your coins starting from and including 0.

Note that you may have multiple coins of the same value.

 

Example 1:

Input: coins = [1,3]
Output: 2
Explanation: You can make the following values:
- 0: take []
- 1: take [1]
You can make 2 consecutive integer values starting from 0.
Example 2:

Input: coins = [1,1,1,4]
Output: 8
Explanation: You can make the following values:
- 0: take []
- 1: take [1]
- 2: take [1,1]
- 3: take [1,1,1]
- 4: take [4]
- 5: take [4,1]
- 6: take [4,1,1]
- 7: take [4,1,1,1]
You can make 8 consecutive integer values starting from 0.
Example 3:

Input: nums = [1,4,10,3,1]
Output: 20
 

Constraints:

coins.length == n
1 <= n <= 4 * 104
1 <= coins[i] <= 4 * 104

在构造范围为 [0, range] 的情况下，可以添加值为 coins[i] 的硬币，新的构造范围为[0, range] 与[coins[i], coins[i] + range]的并集
如果range + 1 < coins[i]，则新的构造范围不在连续，缺少[range+1, coins[i]-1]

class Solution
{
public:
    int getMaximumConsecutive(vector<int> &coins)
    {
        sort(coins.begin(), coins.end());
        if(coins.size() == 1 and coins[0] == 1) return 2;
        if(coins[0] != 1) return 1;
        int max = 1;
        int i = 1;
        while(i < coins.size())
        {
            if (coins[i] > max + 1) break;
            max += coins[i];
            i++;
        }
        return max + 1;
    }
};


// Source https://leetcode.com/problems/maximize-score-after-n-operations/

You are given nums, an array of positive integers of size 2 * n. You must perform n operations on this array.

In the ith operation (1-indexed), you will:

Choose two elements, x and y.
Receive a score of i * gcd(x, y).
Remove x and y from nums.
Return the maximum score you can receive after performing n operations.

The function gcd(x, y) is the greatest common divisor of x and y.

 

Example 1:

Input: nums = [1,2]
Output: 1
Explanation: The optimal choice of operations is:
(1 * gcd(1, 2)) = 1
Example 2:

Input: nums = [3,4,6,8]
Output: 11
Explanation: The optimal choice of operations is:
(1 * gcd(3, 6)) + (2 * gcd(4, 8)) = 3 + 8 = 11
Example 3:

Input: nums = [1,2,3,4,5,6]
Output: 14
Explanation: The optimal choice of operations is:
(1 * gcd(1, 5)) + (2 * gcd(2, 4)) + (3 * gcd(3, 6)) = 1 + 4 + 9 = 14
 

Constraints:

1 <= n <= 7
nums.length == 2 * n
1 <= nums[i] <= 106

class Solution
{
public:
    int n;
    int dp[8][16500];

    int maxScore(vector<int> &nums)
    {
        n = nums.size();
        memset(dp, -1, sizeof(dp));
        vector<vector<int>> gcd(n, vector<int>(n, -1));
        for(int i = 0; i < n; i++)
        {
            for(int j = i + 1; j < n; j++)
            {
                gcd[i][j] = gcd[j][i] = __gcd(nums[i], nums[j]);
            }
        }
        return recur(nums, gcd, (1 << n) - 1, 1);
    }

    int recur(vector<int> &nums, vector<vector<int>> &gcd, int mask, int itr)
    {
        if(mask == 0) return 0;
        if(dp[itr][mask] != -1) return dp[itr][mask];
        int res = 0;
        for(int i = 0; i < n; i++)
        {
            for(int j = i + 1; j < n; j++)
            {
                if( (mask & (1 << i)) && (mask & (1 << j)) )
                {
                    int newMask = mask ^ (1 << i);
                    newMask = newMask ^ (1 << j);
                    res = max(res, recur(nums, gcd, newMask, itr + 1) + gcd[i][j] * itr);
                }
            }
        }
        return dp[itr][mask] = res;
    }
};


// Source https://leetcode.com/problems/maximum-ascending-subarray-sum/

Given an array of positive integers nums, return the maximum possible sum of an ascending subarray in nums.

A subarray is defined as a contiguous sequence of numbers in an array.

A subarray [numsl, numsl+1, ..., numsr-1, numsr] is ascending if for all i where l <= i < r, numsi < numsi+1. Note that a subarray of size 1 is ascending.

 

Example 1:

Input: nums = [10,20,30,5,10,50]
Output: 65
Explanation: [5,10,50] is the ascending subarray with the maximum sum of 65.
Example 2:

Input: nums = [10,20,30,40,50]
Output: 150
Explanation: [10,20,30,40,50] is the ascending subarray with the maximum sum of 150.
Example 3:

Input: nums = [12,17,15,13,10,11,12]
Output: 33
Explanation: [10,11,12] is the ascending subarray with the maximum sum of 33.
 

Constraints:

1 <= nums.length <= 100
1 <= nums[i] <= 100

class Solution
{
public:
    int maxAscendingSum(vector<int> &nums)
    {
        int n = nums.size();
        int res = nums[0], sum = nums[0];
        for (int i = 1; i < n; i++)
        {
            if (nums[i] > nums[i - 1]) sum += nums[i];
            else sum = nums[i];
            res = max(res, sum);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/number-of-orders-in-the-backlog/

You are given a 2D integer array orders, where each orders[i] = [pricei, amounti, orderTypei] denotes that amounti orders have been placed of type orderTypei at the price pricei. 
The orderTypei is:

0 if it is a batch of buy orders, or
1 if it is a batch of sell orders.
Note that orders[i] represents a batch of amounti independent orders with the same price and order type. 
All orders represented by orders[i] will be placed before all orders represented by orders[i+1] for all valid i.

There is a backlog that consists of orders that have not been executed. The backlog is initially empty. When an order is placed, the following happens:

If the order is a buy order, you look at the sell order with the smallest price in the backlog. 
If that sell order's price is smaller than or equal to the current buy order's price, they will match and be executed, 
and that sell order will be removed from the backlog. Else, the buy order is added to the backlog.
Vice versa, if the order is a sell order, you look at the buy order with the largest price in the backlog. 
If that buy order's price is larger than or equal to the current sell order's price, they will match and be executed, 
and that buy order will be removed from the backlog. Else, the sell order is added to the backlog.
Return the total amount of orders in the backlog after placing all the orders from the input. Since this number can be large, return it modulo 109 + 7.

 

Example 1:


Input: orders = [[10,5,0],[15,2,1],[25,1,1],[30,4,0]]
Output: 6
Explanation: Here is what happens with the orders:
- 5 orders of type buy with price 10 are placed. There are no sell orders, so the 5 orders are added to the backlog.
- 2 orders of type sell with price 15 are placed. There are no buy orders with prices larger than or equal to 15, so the 2 orders are added to the backlog.
- 1 order of type sell with price 25 is placed. There are no buy orders with prices larger than or equal to 25 in the backlog, so this order is added to the backlog.
- 4 orders of type buy with price 30 are placed. The first 2 orders are matched with the 2 sell orders of the least price, which is 15 and these 2 sell orders are removed from the backlog. 
The 3rd order is matched with the sell order of the least price, which is 25 and this sell order is removed from the backlog. Then, there are no more sell orders in the backlog, 
so the 4th order is added to the backlog.
Finally, the backlog has 5 buy orders with price 10, and 1 buy order with price 30. So the total number of orders in the backlog is 6.
Example 2:


Input: orders = [[7,1000000000,1],[15,3,0],[5,999999995,0],[5,1,1]]
Output: 999999984
Explanation: Here is what happens with the orders:
- 109 orders of type sell with price 7 are placed. There are no buy orders, so the 109 orders are added to the backlog.
- 3 orders of type buy with price 15 are placed. They are matched with the 3 sell orders with the least price which is 7, and those 3 sell orders are removed from the backlog.
- 999999995 orders of type buy with price 5 are placed. The least price of a sell order is 7, so the 999999995 orders are added to the backlog.
- 1 order of type sell with price 5 is placed. It is matched with the buy order of the highest price, which is 5, and that buy order is removed from the backlog.
Finally, the backlog has (1000000000-3) sell orders with price 7, and (999999995-1) buy orders with price 5. So the total number of orders = 1999999991, which is equal to 999999984 % (109 + 7).
 

Constraints:

1 <= orders.length <= 105
orders[i].length == 3
1 <= pricei, amounti <= 109
orderTypei is either 0 or 1.

class Solution
{
public:
    const int mod = 1e9 + 7;

    int getNumberOfBacklogOrders(vector<vector<int>> &orders)
    {
        priority_queue<pair<int, int>> buy; // max-heap
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> sell; // min-heap

        for (auto &order : orders)
        {
            auto price = order[0], amount = order[1], type = order[2];
            if (type == 0)
            {
                while (amount > 0 && !sell.empty() && price >= sell.top().first)
                {
                    auto [sp, sq] = sell.top();
                    sell.pop();
                    if (amount < sq)
                    {
                        sq -= amount;
                        sell.push({sp, sq});
                        amount = 0;
                    }
                    else amount -= sq; 
                }
                if (amount > 0)
                {
                    buy.push({price, amount});
                }
            }
            else
            {
                while (amount > 0 && !buy.empty() && buy.top().first >= price)
                {
                    auto [bp, bq] = buy.top();
                    buy.pop();
                    if (amount < bq)
                    {
                        bq -= amount;
                        buy.push({bp, bq});
                        amount = 0;
                    }
                    else amount -= bq;
                }
                if (amount > 0)
                {
                    sell.push({price, amount});
                }
            }
        }

        int ans = 0;
        while (!buy.empty())
        {
            ans = (ans + buy.top().second) % mod;
            buy.pop();
        }
        while (!sell.empty())
        {
            ans = (ans + sell.top().second) % mod;
            sell.pop();
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/maximum-value-at-a-given-index-in-a-bounded-array/

You are given three positive integers: n, index, and maxSum. You want to construct an array nums (0-indexed) that satisfies the following conditions:

nums.length == n
nums[i] is a positive integer where 0 <= i < n.
abs(nums[i] - nums[i+1]) <= 1 where 0 <= i < n-1.
The sum of all the elements of nums does not exceed maxSum.
nums[index] is maximized.
Return nums[index] of the constructed array.

Note that abs(x) equals x if x >= 0, and -x otherwise.

 

Example 1:

Input: n = 4, index = 2,  maxSum = 6
Output: 2
Explanation: nums = [1,2,2,1] is one array that satisfies all the conditions.
There are no arrays that satisfy all the conditions and have nums[2] == 3, so 2 is the maximum nums[2].
Example 2:

Input: n = 6, index = 1,  maxSum = 10
Output: 3
 

Constraints:

1 <= n <= maxSum <= 109
0 <= index < n

nums[index] 尽可能大，index左右两边尽可能小，因此，从index向左、向右为等差数列

			nums[index] = mid
mid - itemLeft ... mid - 1			     mid-1 ... mid-itemRight
sumLeft = (mid-1)*mid / 2 - (mid - itemLeft - 1) * (mid - itemLeft) / 2 
sumRight = (mid-1)*mid / 2 - (mid - itemRight - 1) * (mid - itemRight) / 2

				nums[index] = mid
itemLeft - (mid -1)个1, 1 ... mid - 1			     mid-1 ... 1, itemRight - (mid -1)个1

class Solution
{
public:
    int maxValue(int n, int index, int maxSum)
    {
        long itemLeft = index;
        long itemRight = n - index - 1;
        long top = maxSum;
        long bottom = 1;
        long mid;
        long sumLeft = 0, sumRight = 0;
        long ans = 0;
        while (bottom <= top)
        {
            mid = bottom + (top - bottom) / 2;
            if (mid > itemLeft && itemLeft > 0)
                sumLeft = ((mid - 1) * (mid) / 2) - ((mid - 1 - itemLeft) * (mid - itemLeft) / 2);
            else if (mid <= itemLeft && itemLeft > 0)
                sumLeft = ((mid - 1) * (mid) / 2) + 1 * (itemLeft - (mid - 1));
            if (mid > itemRight && itemRight > 0)
                sumRight = ((mid - 1) * (mid) / 2) - ((mid - 1 - itemRight) * (mid - itemRight) / 2);
            else if (mid <= itemRight && itemRight > 0)
                sumRight = ((mid - 1) * (mid) / 2) + 1 * (itemRight - (mid - 1));
            long totalSum = sumRight + sumLeft + mid;
            if (totalSum == maxSum)
                return mid;
            else if (totalSum < maxSum)
            {
                ans = mid;
                bottom = mid + 1;
            }
            else
                top = mid - 1;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/count-pairs-with-xor-in-a-range/

Given a (0-indexed) integer array nums and two integers low and high, return the number of nice pairs.

A nice pair is a pair (i, j) where 0 <= i < j < nums.length and low <= (nums[i] XOR nums[j]) <= high.

 

Example 1:

Input: nums = [1,4,2,7], low = 2, high = 6
Output: 6
Explanation: All nice pairs (i, j) are as follows:
    - (0, 1): nums[0] XOR nums[1] = 5 
    - (0, 2): nums[0] XOR nums[2] = 3
    - (0, 3): nums[0] XOR nums[3] = 6
    - (1, 2): nums[1] XOR nums[2] = 6
    - (1, 3): nums[1] XOR nums[3] = 3
    - (2, 3): nums[2] XOR nums[3] = 5
Example 2:

Input: nums = [9,8,4,2,1], low = 5, high = 14
Output: 8
Explanation: All nice pairs (i, j) are as follows:
​​​​​    - (0, 2): nums[0] XOR nums[2] = 13
    - (0, 3): nums[0] XOR nums[3] = 11
    - (0, 4): nums[0] XOR nums[4] = 8
    - (1, 2): nums[1] XOR nums[2] = 12
    - (1, 3): nums[1] XOR nums[3] = 10
    - (1, 4): nums[1] XOR nums[4] = 9
    - (2, 3): nums[2] XOR nums[3] = 6
    - (2, 4): nums[2] XOR nums[4] = 5
 

Constraints:

1 <= nums.length <= 2 * 104
1 <= nums[i] <= 2 * 104
1 <= low <= high <= 2 * 104

find(x, k) 查找trie中与x异或结果小于k的值的个数
find(x, high + 1) - find(x, low) 查找trie中与x异或结果大于等于low且小于等于high的值的个数
x为nums[j]，找满足low <= (nums[i] XOR x) <= high的值的个数，0 <= i < j < nums.length

struct Node
{
    int count;
    int children[2];
} nodes[1 << 19];

class Solution
{
public:
    int nodes_label;

    void insert(int x)
    {
        Node *curr = &nodes[0];
        for (int b_idx = 15; b_idx >= 0; --b_idx)
        {
            int b = (x >> b_idx) & 1;
            int &next_idx = curr->children[b];
            if (next_idx == 0)
            {
                next_idx = nodes_label;
                nodes[next_idx].children[0] = nodes[next_idx].children[1] = 0;
                nodes[next_idx].count = 0;
                ++nodes_label;
            }
            curr = &nodes[next_idx];
            curr->count++;
        }
    }

    int find(int x, int k)
    {
        if (nodes_label == 1)
            return 0;
        int ans = 0;
        Node *curr = &nodes[0];
        for (int b_idx = 15; b_idx >= 0; --b_idx)
        {
            int xdig = (x >> b_idx) & 1;
            int kdig = (k >> b_idx) & 1;
            int index1 = curr->children[1];
            int index0 = curr->children[0];
            if(kdig)
            {
                if(xdig)
                {
                    if(index1 != 0)
                        ans = ans + nodes[index1].count;

                    if(index0 != 0)
                        curr = &nodes[index0];
                    else return ans;
                }
                else
                {
                    if(index0 != 0)
                        ans = ans + nodes[index0].count;

                    if(index1 != 0)
                        curr = &nodes[index1];
                    else return ans;
                }
            }
            else
            {
                if(xdig == 0 && index0 != 0)
                    curr = &nodes[index0];
                else if(xdig && index1 != 0)
                    curr = &nodes[index1];
                else return ans;
            }
        }
        return ans;
    }

    int countPairs(vector<int> &nums, int low, int high)
    {
        nodes[0].children[0] = nodes[0].children[1] = 0;
        nodes[0].count = 0;
        nodes_label = 1;
        int ans = 0;
        for(auto x : nums)
        {
            ans += (find(x, high + 1) - find(x, low));
            insert(x);
        }

        return ans;
    }
};


// Source https://leetcode.com/problems/number-of-different-integers-in-a-string/

You are given a string word that consists of digits and lowercase English letters.

You will replace every non-digit character with a space. For example, "a123bc34d8ef34" will become " 123  34 8  34". 
Notice that you are left with some integers that are separated by at least one space: "123", "34", "8", and "34".

Return the number of different integers after performing the replacement operations on word.

Two integers are considered different if their decimal representations without any leading zeros are different.

 

Example 1:

Input: word = "a123bc34d8ef34"
Output: 3
Explanation: The three different integers are "123", "34", and "8". Notice that "34" is only counted once.
Example 2:

Input: word = "leet1234code234"
Output: 2
Example 3:

Input: word = "a1b01c001"
Output: 1
Explanation: The three integers "1", "01", and "001" all represent the same integer because
the leading zeros are ignored when comparing their decimal values.
 

Constraints:

1 <= word.length <= 1000
word consists of digits and lowercase English letters.

class Solution
{
public:
    int numDifferentIntegers(string str)
    {
        int n = str.length();
        unordered_map<string, int>mp;
        for(int i = 0; i < n; i++)
        {
            if(str[i] >= '0' && str[i] <= '9')
            {
                int j = i;
                string s = "";
                while(str[j] >= '0' && str[j] <= '9' && j < n)
                {
                    s += str[j];
                    j++;
                }
                int k = 0;
                while(s[k] == '0' && k < s.length())
                {
                    k++;
                }
                mp[s.substr(k)]++;
                i = j;
            }
        }
        return mp.size();
    }
};


// Source https://leetcode.com/problems/minimum-number-of-operations-to-reinitialize-a-permutation/

You are given an even integer n​​​​​​. You initially have a permutation perm of size n​​ where perm[i] == i​ (0-indexed)​​​​.

In one operation, you will create a new array arr, and for each i:

If i % 2 == 0, then arr[i] = perm[i / 2].
If i % 2 == 1, then arr[i] = perm[n / 2 + (i - 1) / 2].
You will then assign arr​​​​ to perm.

Return the minimum non-zero number of operations you need to perform on perm to return the permutation to its initial value.

 

Example 1:

Input: n = 2
Output: 1
Explanation: perm = [0,1] initially.
After the 1st operation, perm = [0,1]
So it takes only 1 operation.
Example 2:

Input: n = 4
Output: 2
Explanation: perm = [0,1,2,3] initially.
After the 1st operation, perm = [0,2,1,3]
After the 2nd operation, perm = [0,1,2,3]
So it takes only 2 operations.
Example 3:

Input: n = 6
Output: 4

[0, 1, 2, 3, 4, 5]
[0, 3, 1, 4, 2, 5]
[0, 4, 3, 2, 1, 5]
[0, 2, 4, 1, 3, 5]
[0, 1, 2, 3, 4, 5]

Constraints:

2 <= n <= 1000
n​​​​​​ is even.

// Only need to focus on one element, 1 for example.
// And what we should do is to think about how many times needed for it to go back to the starting point.

class Solution
{
public:
    int reinitializePermutation(int n)
    {
        int count = 0;
        int pos = 1;
        do
        {
            if(pos & 1)
                pos = n / 2 + (pos - 1) / 2;
            else
                pos = pos / 2;
            count++;
        }
        while(pos != 1);
        return count;
    }
};


// Source https://leetcode.com/problems/evaluate-the-bracket-pairs-of-a-string/

You are given a string s that contains some bracket pairs, with each pair containing a non-empty key.

For example, in the string "(name)is(age)yearsold", there are two bracket pairs that contain the keys "name" and "age".
You know the values of a wide range of keys. This is represented by a 2D string array knowledge where each knowledge[i] = [keyi, valuei] indicates that key keyi has a value of valuei.

You are tasked to evaluate all of the bracket pairs. When you evaluate a bracket pair that contains some key keyi, you will:

Replace keyi and the bracket pair with the key's corresponding valuei.
If you do not know the value of the key, you will replace keyi and the bracket pair with a question mark "?" (without the quotation marks).
Each key will appear at most once in your knowledge. There will not be any nested brackets in s.

Return the resulting string after evaluating all of the bracket pairs.

 

Example 1:

Input: s = "(name)is(age)yearsold", knowledge = [["name","bob"],["age","two"]]
Output: "bobistwoyearsold"
Explanation:
The key "name" has a value of "bob", so replace "(name)" with "bob".
The key "age" has a value of "two", so replace "(age)" with "two".
Example 2:

Input: s = "hi(name)", knowledge = [["a","b"]]
Output: "hi?"
Explanation: As you do not know the value of the key "name", replace "(name)" with "?".
Example 3:

Input: s = "(a)(a)(a)aaa", knowledge = [["a","yes"]]
Output: "yesyesyesaaa"
Explanation: The same key can appear multiple times.
The key "a" has a value of "yes", so replace all occurrences of "(a)" with "yes".
Notice that the "a"s not in a bracket pair are not evaluated.
 

Constraints:

1 <= s.length <= 105
0 <= knowledge.length <= 105
knowledge[i].length == 2
1 <= keyi.length, valuei.length <= 10
s consists of lowercase English letters and round brackets '(' and ')'.
Every open bracket '(' in s will have a corresponding close bracket ')'.
The key in each bracket pair of s will be non-empty.
There will not be any nested bracket pairs in s.
keyi and valuei consist of lowercase English letters.
Each keyi in knowledge is unique.

class Solution
{
public:
    string evaluate(string s, vector<vector<string>> &knowledge)
    {
        unordered_map<string, string> mp;
        for(int i = 0; i < knowledge.size(); i++)
        {
            mp[knowledge[i][0]] = knowledge[i][1];
        }
        int n = s.size();
        string ans = "";
        for(int i = 0; i < n; i++)
        {
            if(s[i] != '(')
                ans += s[i];
            else
            {
                int j = i + 1;
                string check = "";
                while(j < n && s[j] != ')')
                {
                    check += s[j];
                    j++;
                }
                if(mp.find(check) != mp.end())
                    ans += mp[check];
                else
                    ans += '?';
                i = j;
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/maximize-number-of-nice-divisors/

You are given a positive integer primeFactors. You are asked to construct a positive integer n that satisfies the following conditions:

The number of prime factors of n (not necessarily distinct) is at most primeFactors.
The number of nice divisors of n is maximized. Note that a divisor of n is nice if it is divisible by every prime factor of n. 
For example, if n = 12, then its prime factors are [2,2,3], then 6 and 12 are nice divisors, while 3 and 4 are not.
Return the number of nice divisors of n. Since that number can be too large, return it modulo 109 + 7.

Note that a prime number is a natural number greater than 1 that is not a product of two smaller natural numbers. 
The prime factors of a number n is a list of prime numbers such that their product equals n.

 

Example 1:

Input: primeFactors = 5
Output: 6
Explanation: 200 is a valid value of n.
It has 5 prime factors: [2,2,2,5,5], and it has 6 nice divisors: [10,20,40,50,100,200].
There is not other value of n that has at most 5 prime factors and more nice divisors.
Example 2:

Input: primeFactors = 8
Output: 18
 

Constraints:

1 <= primeFactors <= 109

为使The number of nice divisors of n最大化，应尽可能按照 3 个为一组选取质因数，即对所给的 primeFactors 按 3 进行拆分。
只有当 primeFactors % 3 == 1 时，将其中一组 3 个质因数和剩余 1 个一起考虑，选取 4 个或 2 组 2 个质因数。

class Solution
{
public:
    const int mod = 1e9 + 7;

    unsigned long long int power(int b, int x)
    {
        if(x == 0) return 1;
        auto temp = power(b, x / 2);
        auto res = ((unsigned long long int)temp * temp) % mod;
        if(x % 2)
        {
            res = (res * b) % mod;
        }
        return res;
    }

    int maxNiceDivisors(int primeFactors)
    {
        if(primeFactors <= 4)
        {
            return primeFactors;
        }
        if(primeFactors % 3 == 0)
        {
            return power(3, primeFactors / 3);
        }
        else if(primeFactors % 3 == 1)
        {
            return (power(3, (primeFactors / 3) - 1) * 4) % mod;
        }
        else
        {
            return (power(3, primeFactors / 3) * 2) % mod;
        }
    }
};


// Source https://leetcode.com/problems/determine-color-of-a-chessboard-square/

You are given coordinates, a string that represents the coordinates of a square of the chessboard. Below is a chessboard for your reference.



Return true if the square is white, and false if the square is black.

The coordinate will always represent a valid chessboard square. The coordinate will always have the letter first, and the number second.

 

Example 1:

Input: coordinates = "a1"
Output: false
Explanation: From the chessboard above, the square with coordinates "a1" is black, so return false.
Example 2:

Input: coordinates = "h3"
Output: true
Explanation: From the chessboard above, the square with coordinates "h3" is white, so return true.
Example 3:

Input: coordinates = "c7"
Output: false
 

Constraints:

coordinates.length == 2
'a' <= coordinates[0] <= 'h'
'1' <= coordinates[1] <= '8'

class Solution
{
public:
    bool squareIsWhite(string coordinates)
    {
        int idx1 = coordinates[0] - 'a';
        int idx2 = coordinates[1] - '1';
        if (idx1 % 2 == 0)
        {
            if (idx2 % 2) return true;
            else return false;
        }
        else
        {
            if (idx2 % 2) return false;
            else return true;
        }
    }
};


// Source https://leetcode.com/problems/sentence-similarity-iii/

A sentence is a list of words that are separated by a single space with no leading or trailing spaces. 
For example, "Hello World", "HELLO", "hello world hello world" are all sentences. Words consist of only uppercase and lowercase English letters.

Two sentences sentence1 and sentence2 are similar if it is possible to insert an arbitrary sentence (possibly empty) inside one of these sentences such that the two sentences become equal. 
For example, sentence1 = "Hello my name is Jane" and sentence2 = "Hello Jane" can be made equal by inserting "my name is" between "Hello" and "Jane" in sentence2.

Given two sentences sentence1 and sentence2, return true if sentence1 and sentence2 are similar. Otherwise, return false.

 

Example 1:

Input: sentence1 = "My name is Haley", sentence2 = "My Haley"
Output: true
Explanation: sentence2 can be turned to sentence1 by inserting "name is" between "My" and "Haley".
Example 2:

Input: sentence1 = "of", sentence2 = "A lot of words"
Output: false
Explanation: No single sentence can be inserted inside one of the sentences to make it equal to the other.
Example 3:

Input: sentence1 = "Eating right now", sentence2 = "Eating"
Output: true
Explanation: sentence2 can be turned to sentence1 by inserting "right now" at the end of the sentence.
 

Constraints:

1 <= sentence1.length, sentence2.length <= 100
sentence1 and sentence2 consist of lowercase and uppercase English letters and spaces.
The words in sentence1 and sentence2 are separated by a single space.

class Solution
{
public:
    bool areSentencesSimilar(string s1, string s2)
    {
        deque<string> d, q;
        stringstream ss1(s1);
        stringstream ss2(s2);
        string t;
        while (ss1 >> t) d.push_back(t);
        while (ss2 >> t) q.push_back(t);
        while(!d.empty() && !q.empty() && d.front() == q.front()) d.pop_front(), q.pop_front();
        while(!d.empty() && !q.empty() && d.back() == q.back()) d.pop_back(), q.pop_back();
        return (d.empty() || q.empty());
    }
};


// Source https://leetcode.com/problems/count-nice-pairs-in-an-array/

You are given an array nums that consists of non-negative integers. Let us define rev(x) as the reverse of the non-negative integer x. 
For example, rev(123) = 321, and rev(120) = 21. A pair of indices (i, j) is nice if it satisfies all of the following conditions:

0 <= i < j < nums.length
nums[i] + rev(nums[j]) == nums[j] + rev(nums[i])
Return the number of nice pairs of indices. Since that number can be too large, return it modulo 109 + 7.

nums[i] - rev(nums[i]) == nums[j] - rev(nums[j])

Example 1:

Input: nums = [42,11,1,97]
Output: 2
Explanation: The two pairs are:
 - (0,3) : 42 + rev(97) = 42 + 79 = 121, 97 + rev(42) = 97 + 24 = 121.
 - (1,2) : 11 + rev(1) = 11 + 1 = 12, 1 + rev(11) = 1 + 11 = 12.
Example 2:

Input: nums = [13,10,35,24,76]
Output: 4
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 109

class Solution
{
public:
    const int mod = 1e9 + 7;

    int rev(int n)
    {
        int r, sum = 0;
        while(n > 0)
        {
            r = n % 10;
            sum = sum * 10 + r;
            n /= 10;
        }
        return sum;
    }

    int countNicePairs(vector<int> &nums)
    {
        long res = 0;
        unordered_map<int, int> mp;
        for(auto val : nums)
            mp[val - rev(val)]++;
        for(auto p : mp)
        {
            res += (long(p.second - 1) * p.second) / 2;
            res %= mod;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/maximum-number-of-groups-getting-fresh-donuts/

There is a donuts shop that bakes donuts in batches of batchSize. They have a rule where they must serve all of the donuts of a batch before serving any donuts of the next batch. 
You are given an integer batchSize and an integer array groups, where groups[i] denotes that there is a group of groups[i] customers that will visit the shop. 
Each customer will get exactly one donut.

When a group visits the shop, all customers of the group must be served before serving any of the following groups. 
A group will be happy if they all get fresh donuts. That is, the first customer of the group does not receive a donut that was left over from the previous group.

You can freely rearrange the ordering of the groups. Return the maximum possible number of happy groups after rearranging the groups.

 

Example 1:

Input: batchSize = 3, groups = [1,2,3,4,5,6]
Output: 4
Explanation: You can arrange the groups as [6,2,4,5,1,3]. Then the 1st, 2nd, 4th, and 6th groups will be happy.
Example 2:

Input: batchSize = 4, groups = [1,3,2,5,2,2,1,6]
Output: 4
 
1 3
2 2
2 6
5 1

Constraints:

1 <= batchSize <= 9
1 <= groups.length <= 30
1 <= groups[i] <= 109

凑batchSize的整数倍
1个group，batchSize的整数倍
2个group，batchSize的整数倍
3个group，batchSize的整数倍
...

class Solution
{
public:
    int batchSize;
    map<vector<int>, int> dp;

    int recur(vector<int> &freq, int left)
    {
        if (dp.find(freq) != dp.end()) return dp[freq];
        int res = 0;
        bool flag = false;
        for (int i = 1; i < batchSize; ++i)
        {
            if (freq[i])
            {
                --freq[i];
                res = max(res, recur(freq, (left + i) % batchSize));
                ++freq[i];
                flag = true;
            }
        }
        if (left == 0 && flag) res += 1;
        return dp[freq] = res;
    }

    int maxHappyGroups(int batchSize, vector<int> &groups)
    {
        this->batchSize = batchSize;
        vector<int> freq(batchSize, 0);
        int ans = 0;
        for (auto customerCnt : groups)
        {
            customerCnt %= batchSize;
            if (customerCnt == 0) ++ans;
            else if (freq[batchSize - customerCnt])
            {
                ++ans;
                --freq[batchSize - customerCnt];
            }
            else ++freq[customerCnt];
        }
        return ans + recur(freq, 0);
    }
};


// Source https://leetcode.com/problems/truncate-sentence/

A sentence is a list of words that are separated by a single space with no leading or trailing spaces. Each of the words consists of only uppercase and lowercase English letters (no punctuation).

For example, "Hello World", "HELLO", and "hello world hello world" are all sentences.
You are given a sentence s​​​​​​ and an integer k​​​​​​. You want to truncate s​​​​​​ such that it contains only the first k​​​​​​ words. Return s​​​​​​ after truncating it.

 

Example 1:

Input: s = "Hello how are you Contestant", k = 4
Output: "Hello how are you"
Explanation:
The words in s are ["Hello", "how" "are", "you", "Contestant"].
The first 4 words are ["Hello", "how", "are", "you"].
Hence, you should return "Hello how are you".
Example 2:

Input: s = "What is the solution to this problem", k = 4
Output: "What is the solution"
Explanation:
The words in s are ["What", "is" "the", "solution", "to", "this", "problem"].
The first 4 words are ["What", "is", "the", "solution"].
Hence, you should return "What is the solution".
Example 3:

Input: s = "chopper is not a tanuki", k = 5
Output: "chopper is not a tanuki"
 

Constraints:

1 <= s.length <= 500
k is in the range [1, the number of words in s].
s consist of only lowercase and uppercase English letters and spaces.
The words in s are separated by a single space.
There are no leading or trailing spaces.

class Solution
{
public:
    string truncateSentence(string s, int k)
    {
        int n = s.length();
        int count = 0;
        for (int i = 0; i < n; ++i)
        {
            if (s[i] != ' ') continue;
            count++;
            if (count == k) return s.substr(0, i);
        }
        return s;
    }
};


// Source https://leetcode.com/problems/finding-the-users-active-minutes/

You are given the logs for users' actions on LeetCode, and an integer k. The logs are represented by a 2D integer array logs 
where each logs[i] = [IDi, timei] indicates that the user with IDi performed an action at the minute timei.

Multiple users can perform actions simultaneously, and a single user can perform multiple actions in the same minute.

The user active minutes (UAM) for a given user is defined as the number of unique minutes in which the user performed an action on LeetCode. 
A minute can only be counted once, even if multiple actions occur during it.

You are to calculate a 1-indexed array answer of size k such that, for each j (1 <= j <= k), answer[j] is the number of users whose UAM equals j.

Return the array answer as described above.

 

Example 1:

Input: logs = [[0,5],[1,2],[0,2],[0,5],[1,3]], k = 5
Output: [0,2,0,0,0]
Explanation:
The user with ID=0 performed actions at minutes 5, 2, and 5 again. Hence, they have a UAM of 2 (minute 5 is only counted once).
The user with ID=1 performed actions at minutes 2 and 3. Hence, they have a UAM of 2.
Since both users have a UAM of 2, answer[2] is 2, and the remaining answer[j] values are 0.
Example 2:

Input: logs = [[1,1],[2,2],[2,3]], k = 4
Output: [1,1,0,0]
Explanation:
The user with ID=1 performed a single action at minute 1. Hence, they have a UAM of 1.
The user with ID=2 performed actions at minutes 2 and 3. Hence, they have a UAM of 2.
There is one user with a UAM of 1 and one with a UAM of 2.
Hence, answer[1] = 1, answer[2] = 1, and the remaining values are 0.
 

Constraints:

1 <= logs.length <= 104
0 <= IDi <= 109
1 <= timei <= 105
k is in the range [The maximum UAM for a user, 105].

class Solution
{
public:
    vector<int> findingUsersActiveMinutes(vector<vector<int>> &logs, int k)
    {
        unordered_map<int, unordered_set<int>> mp;
        for(int i = 0; i < logs.size(); i++)
        {
            mp[logs[i][0]].insert(logs[i][1]);
        }
        vector<int>ans(k, 0);
        for(auto &[id, st] : mp)
        {
            ans[st.size() - 1]++;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/minimum-absolute-sum-difference/

You are given two positive integer arrays nums1 and nums2, both of length n.

The absolute sum difference of arrays nums1 and nums2 is defined as the sum of |nums1[i] - nums2[i]| for each 0 <= i < n (0-indexed).

You can replace at most one element of nums1 with any other element in nums1 to minimize the absolute sum difference.

Return the minimum absolute sum difference after replacing at most one element in the array nums1. Since the answer may be large, return it modulo 109 + 7.

|x| is defined as:

x if x >= 0, or
-x if x < 0.
 

Example 1:

Input: nums1 = [1,7,5], nums2 = [2,3,5]
Output: 3
Explanation: There are two possible optimal solutions:
- Replace the second element with the first: [1,7,5] => [1,1,5], or
- Replace the second element with the third: [1,7,5] => [1,5,5].
Both will yield an absolute sum difference of |1-2| + (|1-3| or |5-3|) + |5-5| = 3.
Example 2:

Input: nums1 = [2,4,6,8,10], nums2 = [2,4,6,8,10]
Output: 0
Explanation: nums1 is equal to nums2 so no replacement is needed. This will result in an 
absolute sum difference of 0.
Example 3:

Input: nums1 = [1,10,4,4,2,7], nums2 = [9,3,5,1,7,4]
Output: 20
Explanation: Replace the first element with the second: [1,10,4,4,2,7] => [10,10,4,4,2,7].
This yields an absolute sum difference of |10-9| + |10-3| + |4-5| + |4-1| + |2-7| + |7-4| = 20
 

Constraints:

n == nums1.length
n == nums2.length
1 <= n <= 105
1 <= nums1[i], nums2[i] <= 105

class Solution
{
public:
    int minAbsoluteSumDiff(vector<int> &nums1, vector<int> &nums2)
    {
        const int mod = 1e9 + 7;
        int n = nums1.size();
        vector<int> vec1(nums1);
        long long sum = 0;
        for(int i = 0; i < n; i++)
        {
            sum += abs(nums1[i] - nums2[i]);
        }
        long long final = sum;
        sort(nums1.begin(), nums1.end());
        for(int i = 0; i < n; i++)
        {
            int val;
            auto itr = lower_bound(nums1.begin(), nums1.end(), nums2[i]);
            if (itr == nums1.end()) val = nums1.back();
            else if (itr == nums1.begin()) val = *itr;
            else
            {
                auto itr2 = itr;
                --itr2;
                int diff = abs(*itr - nums2[i]);
                int diff2 = abs(*itr2 - nums2[i]);
                if (diff < diff2) val = *itr;
                else val = *itr2;
            }
            if(abs(val - nums2[i]) < abs(vec1[i] - nums2[i]))
            {
                final = min(final, sum - abs(vec1[i] - nums2[i]) + abs(val - nums2[i]));
            }
        }
        return final % mod;
    }
};


// Source https://leetcode.com/problems/number-of-different-subsequences-gcds/

You are given an array nums that consists of positive integers.

The GCD of a sequence of numbers is defined as the greatest integer that divides all the numbers in the sequence evenly.

For example, the GCD of the sequence [4,6,16] is 2.
A subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array.

For example, [2,5,10] is a subsequence of [1,2,1,2,4,1,5,10].
Return the number of different GCDs among all non-empty subsequences of nums.

 

Example 1:


Input: nums = [6,10,3]
Output: 5
Explanation: The figure shows all the non-empty subsequences and their GCDs.
The different GCDs are 6, 10, 3, 2, and 1.
Example 2:

Input: nums = [5,15,40,5,6]
Output: 7
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 2 * 105

// We will loop through all the possible gcd options i.e from 1 to max_element_in_array (if max_element in array is x then we can't have gcd greater than x)
// Now we will check each multiples of gcd option (1 to max_element) and update our current_gcd.
// If current_gcd is equal to gcd_option we increase ans by 1.
// for understanding point 2 and 3->
// suppose we have elements 4, 8, 12, 16, 20, 24, 28, 32, 36, . . . . . . . i.e multiples of 4
// gcd of any subsequence will be >=4
// and if we keep on adding more element gcd will decrease or be same. eg

// we have 8, 16 -> gcd=8
// if we add 24 then gcd of 8, 16, 24 = 8
// if we add 36 then gcd of 8, 16, 24, 36 = 4

若数字 i 为某子序列的最大公约数，则该序列中的数字，一定都是 i 的倍数。
因此可枚举可能的数字 i ，在 nums 中寻找这些数字的倍数，若它们的最大公约数为 i，说明 i 是某子序列的最大公约数。

class Solution
{
public:
    int b[200001];

    int countDifferentSubsequenceGCDs(vector<int> &nums)
    {
        int ans = 0;
        int mxVal = INT_MIN;
        int n = nums.size();
        for(int i = 0; i < n; i++)
        {
            mxVal = max(mxVal, nums[i]);
            b[nums[i]] = 1;
        }

        for(int i = 1; i <= mxVal; i++)
        {
            int cgcd = 0;   //current gcd
            for(int j = i; j <= mxVal; j += i) //loop for all multiples of i
            {
                if (b[j] == 0) continue;
                cgcd = __gcd(cgcd, j);
                if(cgcd == i)   //check if we can form subsequence with gcd
                {
                    ans++;   //increment ans;
                    break;
                }
            }
        }
        return ans;
    }
};



// Source https://leetcode.com/problems/sign-of-the-product-of-an-array/

There is a function signFunc(x) that returns:

1 if x is positive.
-1 if x is negative.
0 if x is equal to 0.
You are given an integer array nums. Let product be the product of all values in the array nums.

Return signFunc(product).

 

Example 1:

Input: nums = [-1,-2,-3,-4,3,2,1]
Output: 1
Explanation: The product of all values in the array is 144, and signFunc(144) = 1
Example 2:

Input: nums = [1,5,0,2,-3]
Output: 0
Explanation: The product of all values in the array is 0, and signFunc(0) = 0
Example 3:

Input: nums = [-1,1,-1,1,-1]
Output: -1
Explanation: The product of all values in the array is -1, and signFunc(-1) = -1
 

Constraints:

1 <= nums.length <= 1000
-100 <= nums[i] <= 100

class Solution
{
public:
    int arraySign(vector<int> &nums)
    {
        int cnt = 0;
        for (int i = 0; i < nums.size(); ++i)
        {
            if (nums[i] == 0) return 0;
            else if (nums[i] < 0) cnt++;
        }
        if (cnt % 2) return -1;
        return 1;
    }
};


// Source https://leetcode.com/problems/find-the-winner-of-the-circular-game/

There are n friends that are playing a game. The friends are sitting in a circle and are numbered from 1 to n in clockwise order. 
More formally, moving clockwise from the ith friend brings you to the (i+1)th friend for 1 <= i < n, and moving clockwise from the nth friend brings you to the 1st friend.

The rules of the game are as follows:

Start at the 1st friend.
Count the next k friends in the clockwise direction including the friend you started at. The counting wraps around the circle and may count some friends more than once.
The last friend you counted leaves the circle and loses the game.
If there is still more than one friend in the circle, go back to step 2 starting from the friend immediately clockwise of the friend who just lost and repeat.
Else, the last friend in the circle wins the game.
Given the number of friends, n, and an integer k, return the winner of the game.

 

Example 1:


Input: n = 5, k = 2
Output: 3
Explanation: Here are the steps of the game:
1) Start at friend 1.
2) Count 2 friends clockwise, which are friends 1 and 2.
3) Friend 2 leaves the circle. Next start is friend 3.
4) Count 2 friends clockwise, which are friends 3 and 4.
5) Friend 4 leaves the circle. Next start is friend 5.
6) Count 2 friends clockwise, which are friends 5 and 1.
7) Friend 1 leaves the circle. Next start is friend 3.
8) Count 2 friends clockwise, which are friends 3 and 5.
9) Friend 5 leaves the circle. Only friend 3 is left, so they are the winner.
Example 2:

Input: n = 6, k = 5
Output: 1
Explanation: The friends leave in this order: 5, 4, 6, 2, 3. The winner is friend 1.
 

Constraints:

1 <= k <= n <= 500

class Solution
{
public:
    int findTheWinner(int n, int k)
    {
        vector<int> res;
        for(int i = 0; i < n; i++)
        {
            res.push_back(i + 1);
        }
        int i = 0;
        while(res.size() > 1)
        {
            int sz = res.size();
            i = (i + k - 1) % sz;
            res.erase(res.begin() + i);
        }
        return res[0];
    }
};


// Source https://leetcode.com/problems/minimum-sideway-jumps/

There is a 3 lane road of length n that consists of n + 1 points labeled from 0 to n. A frog starts at point 0 in the second lane and wants to jump to point n. 
However, there could be obstacles along the way.

You are given an array obstacles of length n + 1 where each obstacles[i] (ranging from 0 to 3) describes an obstacle on the lane obstacles[i] at point i. 
If obstacles[i] == 0, there are no obstacles at point i. There will be at most one obstacle in the 3 lanes at each point.

For example, if obstacles[2] == 1, then there is an obstacle on lane 1 at point 2.
The frog can only travel from point i to point i + 1 on the same lane if there is not an obstacle on the lane at point i + 1. 
To avoid obstacles, the frog can also perform a side jump to jump to another lane (even if they are not adjacent) at the same point if there is no obstacle on the new lane.

For example, the frog can jump from lane 3 at point 3 to lane 1 at point 3.
Return the minimum number of side jumps the frog needs to reach any lane at point n starting from lane 2 at point 0.

Note: There will be no obstacles on points 0 and n.

 

Example 1:


Input: obstacles = [0,1,2,3,0]
Output: 2 
Explanation: The optimal solution is shown by the arrows above. There are 2 side jumps (red arrows).
Note that the frog can jump over obstacles only when making side jumps (as shown at point 2).
Example 2:


Input: obstacles = [0,1,1,3,3,0]
Output: 0
Explanation: There are no obstacles on lane 2. No side jumps are required.
Example 3:


Input: obstacles = [0,2,1,0,3,0]
Output: 2
Explanation: The optimal solution is shown by the arrows above. There are 2 side jumps.
 

Constraints:

obstacles.length == n + 1
1 <= n <= 5 * 105
0 <= obstacles[i] <= 3
obstacles[0] == obstacles[n] == 0

class Solution
{
public:
    int n;
    int dp[3][500005];

    int solve(int i, int row, vector<int> &obstacles)
    {
        if(i == n - 1) return 0;
        if(obstacles[i] == row + 1) return 1e9;
        if(dp[row][i] != -1) return dp[row][i];
        int res = 1e9;
        if(obstacles[i + 1] != row + 1)
        {
            res = solve(i + 1, row, obstacles);
        }
        else
        {
            res = min(res, 1 + solve(i, (row + 1) % 3, obstacles));
            res = min(res, 1 + solve(i, (row + 2) % 3, obstacles));
        }
        return dp[row][i] = res;
    }

    int minSideJumps(vector<int> &obstacles)
    {
        n = obstacles.size();
        memset(dp, -1, sizeof(dp));
        return solve(0, 1, obstacles);
    }
};


// Source https://leetcode.com/problems/finding-mk-average/

You are given two integers, m and k, and a stream of integers. You are tasked to implement a data structure that calculates the MKAverage for the stream.

The MKAverage can be calculated using these steps:

If the number of the elements in the stream is less than m you should consider the MKAverage to be -1. Otherwise, copy the last m elements of the stream to a separate container.
Remove the smallest k elements and the largest k elements from the container.
Calculate the average value for the rest of the elements rounded down to the nearest integer.
Implement the MKAverage class:

MKAverage(int m, int k) Initializes the MKAverage object with an empty stream and the two integers m and k.
void addElement(int num) Inserts a new element num into the stream.
int calculateMKAverage() Calculates and returns the MKAverage for the current stream rounded down to the nearest integer.
 

Example 1:

Input
["MKAverage", "addElement", "addElement", "calculateMKAverage", "addElement", "calculateMKAverage", "addElement", "addElement", "addElement", "calculateMKAverage"]
[[3, 1], [3], [1], [], [10], [], [5], [5], [5], []]
Output
[null, null, null, -1, null, 3, null, null, null, 5]

Explanation
MKAverage obj = new MKAverage(3, 1); 
obj.addElement(3);        // current elements are [3]
obj.addElement(1);        // current elements are [3,1]
obj.calculateMKAverage(); // return -1, because m = 3 and only 2 elements exist.
obj.addElement(10);       // current elements are [3,1,10]
obj.calculateMKAverage(); // The last 3 elements are [3,1,10].
                          // After removing smallest and largest 1 element the container will be [3].
                          // The average of [3] equals 3/1 = 3, return 3
obj.addElement(5);        // current elements are [3,1,10,5]
obj.addElement(5);        // current elements are [3,1,10,5,5]
obj.addElement(5);        // current elements are [3,1,10,5,5,5]
obj.calculateMKAverage(); // The last 3 elements are [5,5,5].
                          // After removing smallest and largest 1 element the container will be [5].
                          // The average of [5] equals 5/1 = 5, return 5
 

Constraints:

3 <= m <= 105
1 <= k*2 < m
1 <= num <= 105
At most 105 calls will be made to addElement and calculateMKAverage.

class MKAverage
{
public:
    vector<int> items;
    map<int, int> lastM;
    int m, k, s, e;
    long total;

    MKAverage(int m, int k)
    {
        this->m = m;
        this->k = k;
        items.reserve(30000);
        s = 0;
        e = 0;
        total = 0;
    }

    void addElement(int num)
    {
        items.push_back(num);
        lastM[num]++;
        total += num;
        e++;

        if(e - s > m)
        {
            if(--lastM[items[s]] == 0) lastM.erase(items[s]);
            total -= items[s++];
        }
    }

    int calculateMKAverage()
    {
        if(e - s < m) return -1;
        int n = k, minVal = 0, maxVal = 0;
        auto itr = lastM.begin();
        while(n > 0)
        {
            minVal += itr->first * min(itr->second, n);
            n -= min(itr->second, n);
            if(n > 0)
            {
                itr++;
            }
        }

        auto _itr = lastM.rbegin();
        n = k;
        while(n > 0)
        {
            maxVal += _itr->first * min(_itr->second, n);
            n -= min(_itr->second, n);
            if(n > 0)
            {
                _itr++;
            }
        }

        return (total - minVal - maxVal) / (m - 2 * k);
    }
};


// Source https://leetcode.com/problems/minimum-operations-to-make-the-array-increasing/

You are given an integer array nums (0-indexed). In one operation, you can choose an element of the array and increment it by 1.

For example, if nums = [1,2,3], you can choose to increment nums[1] to make nums = [1,3,3].
Return the minimum number of operations needed to make nums strictly increasing.

An array nums is strictly increasing if nums[i] < nums[i+1] for all 0 <= i < nums.length - 1. An array of length 1 is trivially strictly increasing.

 

Example 1:

Input: nums = [1,1,1]
Output: 3
Explanation: You can do the following operations:
1) Increment nums[2], so nums becomes [1,1,2].
2) Increment nums[1], so nums becomes [1,2,2].
3) Increment nums[2], so nums becomes [1,2,3].
Example 2:

Input: nums = [1,5,2,4,1]
Output: 14
Example 3:

Input: nums = [8]
Output: 0
 

Constraints:

1 <= nums.length <= 5000
1 <= nums[i] <= 104

class Solution
{
public:
    int minOperations(vector<int> &nums)
    {
        int n = nums.size();
        int res = 0;
        for (int i = 1; i < n; ++i)
        {
            if (nums[i] > nums[i - 1]) continue;
            res += (nums[i - 1] - nums[i] + 1);
            nums[i] = nums[i - 1] + 1;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/queries-on-number-of-points-inside-a-circle/

You are given an array points where points[i] = [xi, yi] is the coordinates of the ith point on a 2D plane. Multiple points can have the same coordinates.

You are also given an array queries where queries[j] = [xj, yj, rj] describes a circle centered at (xj, yj) with a radius of rj.

For each query queries[j], compute the number of points inside the jth circle. Points on the border of the circle are considered inside.

Return an array answer, where answer[j] is the answer to the jth query.

 

Example 1:


Input: points = [[1,3],[3,3],[5,3],[2,2]], queries = [[2,3,1],[4,3,1],[1,1,2]]
Output: [3,2,2]
Explanation: The points and circles are shown above.
queries[0] is the green circle, queries[1] is the red circle, and queries[2] is the blue circle.
Example 2:


Input: points = [[1,1],[2,2],[3,3],[4,4],[5,5]], queries = [[1,2,2],[2,2,2],[4,3,2],[4,3,3]]
Output: [2,3,2,4]
Explanation: The points and circles are shown above.
queries[0] is green, queries[1] is red, queries[2] is blue, and queries[3] is purple.
 

Constraints:

1 <= points.length <= 500
points[i].length == 2
0 <= x​​​​​​i, y​​​​​​i <= 500
1 <= queries.length <= 500
queries[j].length == 3
0 <= xj, yj <= 500
1 <= rj <= 500
All coordinates are integers.

class Solution
{
public:
    vector<int> countPoints(vector<vector<int>> &points, vector<vector<int>> &queries)
    {
        int m = points.size();
        int n = queries.size();
        vector<int> vec(n);
        for(int i = 0; i < n; i++)
        {
            int radius = queries[i][2];
            int x = queries[i][0];
            int y = queries[i][1];
            int count = 0;
            for(int j = 0; j < m; j++)
            {
                if( pow((points[j][0] - x), 2) + pow((points[j][1] - y), 2) <= pow(radius, 2))
                {
                    count++;
                }
            }
            vec[i] = count;
        }
        return vec;
    }
};


// Source https://leetcode.com/problems/maximum-xor-for-each-query/

You are given a sorted array nums of n non-negative integers and an integer maximumBit. You want to perform the following query n times:

Find a non-negative integer k < 2^maximumBit such that nums[0] XOR nums[1] XOR ... XOR nums[nums.length-1] XOR k is maximized. k is the answer to the ith query.
Remove the last element from the current array nums.
Return an array answer, where answer[i] is the answer to the ith query.

 

Example 1:

Input: nums = [0,1,1,3], maximumBit = 2
Output: [0,3,2,3]
Explanation: The queries are answered as follows:
1st query: nums = [0,1,1,3], k = 0 since 0 XOR 1 XOR 1 XOR 3 XOR 0 = 3.
2nd query: nums = [0,1,1], k = 3 since 0 XOR 1 XOR 1 XOR 3 = 3.
3rd query: nums = [0,1], k = 2 since 0 XOR 1 XOR 2 = 3.
4th query: nums = [0], k = 3 since 0 XOR 3 = 3.
Example 2:

Input: nums = [2,3,4,7], maximumBit = 3
Output: [5,2,6,5]
Explanation: The queries are answered as follows:
1st query: nums = [2,3,4,7], k = 5 since 2 XOR 3 XOR 4 XOR 7 XOR 5 = 7.
2nd query: nums = [2,3,4], k = 2 since 2 XOR 3 XOR 4 XOR 2 = 7.
3rd query: nums = [2,3], k = 6 since 2 XOR 3 XOR 6 = 7.
4th query: nums = [2], k = 5 since 2 XOR 5 = 7.
Example 3:

Input: nums = [0,1,2,2,5,7], maximumBit = 3
Output: [4,3,6,4,6,7]
 

Constraints:

nums.length == n
1 <= n <= 105
1 <= maximumBit <= 20
0 <= nums[i] < 2maximumBit
nums​​​ is sorted in ascending order.

class Solution
{
public:
    vector<int> getMaximumXor(vector<int> &nums, int maximumBit)
    {
        int n = nums.size();
        vector<int> prefix(n);
        prefix[0] = nums[0];
        for(int i = 1; i < n; i++)
        {
            prefix[i] = prefix[i - 1]^nums[i];
        }
        int maxNum = (1 << maximumBit) - 1;
        vector<int> ans;
        ans.reserve(n);
        for(int i = n - 1; i >= 0; i--)
        {
            ans.push_back(prefix[i]^maxNum);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/minimum-number-of-operations-to-make-string-sorted/

You are given a string s (0-indexed)​​​​​​. You are asked to perform the following operation on s​​​​​​ until you get a sorted string:

Find the largest index i such that 1 <= i < s.length and s[i] < s[i - 1].
Find the largest index j such that i <= j < s.length and s[k] < s[i - 1] for all the possible values of k in the range [i, j] inclusive.
Swap the two characters at indices i - 1​​​​ and j​​​​​.
Reverse the suffix starting at index i​​​​​​.
Return the number of operations needed to make the string sorted. Since the answer can be too large, return it modulo 109 + 7.

 

Example 1:

Input: s = "cba"
Output: 5
Explanation: The simulation goes as follows:
cba - > cab - > cab
cab -> bac -> bca
bca -> bac -> bac
bac -> abc -> acb
acb -> abc -> abc
Operation 1: i=2, j=2. Swap s[1] and s[2] to get s="cab", then reverse the suffix starting at 2. Now, s="cab".
Operation 2: i=1, j=2. Swap s[0] and s[2] to get s="bac", then reverse the suffix starting at 1. Now, s="bca".
Operation 3: i=2, j=2. Swap s[1] and s[2] to get s="bac", then reverse the suffix starting at 2. Now, s="bac".
Operation 4: i=1, j=1. Swap s[0] and s[1] to get s="abc", then reverse the suffix starting at 1. Now, s="acb".
Operation 5: i=2, j=2. Swap s[1] and s[2] to get s="abc", then reverse the suffix starting at 2. Now, s="abc".
Example 2:

Input: s = "aabaa"
Output: 2
Explanation: The simulation goes as follows:
Operation 1: i=3, j=4. Swap s[2] and s[4] to get s="aaaab", then reverse the substring starting at 3. Now, s="aaaba".
Operation 2: i=4, j=4. Swap s[3] and s[4] to get s="aaaab", then reverse the substring starting at 4. Now, s="aaaab".
 

Constraints:

1 <= s.length <= 3000
s​​​​​​ consists only of lowercase English letters.

题中每次对字符串 s 执行的操作，是将其变为由当前字母组成的前一字典序的字符串。因此求最少操作次数，等价于求解该字符串在由当前字母组成的所有排列中的字典序；
求比当前字符串 s 小的排列个数，可通过排列组合公式计算得到；
排列组合公式中的阶乘逆元取模，可通过费马小定理，转化为对模数的乘方进行计算；
可通过快速乘方算法，进一步提高对乘方的计算效率。

class Solution
{
public:
    const int mod = 1e9 + 7;

    long long modpow(long long b, long long p)
    {
        long long ans = 1;
        while (p > 0)
        {
            if (p & 1)
                ans = ans * b % mod;
            b = b * b % mod;
            p >>= 1;
        }
        return ans;
    }

    int makeStringSorted(string s)
    {
        long long ans = 0;
        long long freq[26] = {0};
        for (char c : s)
        {
            freq[c - 'a']++;
        }
        vector<long long> fact(s.size() + 1, 1ll);
        for (int i = 1; i <= s.size(); i++)
        {
            fact[i] = (fact[i - 1] * i) % mod;
        }
        int l = s.size();
        for (char c : s)
        {
            l--;
            long long t = 0, rev = 1;
            for (int i = 0; i < 26; i++)
            {
                if (i < c - 'a')
                    t += freq[i];
                rev = (rev * fact[freq[i]]) % mod;
            }
            ans += (t * fact[l] % mod) * modpow(rev, mod - 2);
            ans %= mod;
            freq[c - 'a']--;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/check-if-the-sentence-is-pangram/

A pangram is a sentence where every letter of the English alphabet appears at least once.

Given a string sentence containing only lowercase English letters, return true if sentence is a pangram, or false otherwise.

 

Example 1:

Input: sentence = "thequickbrownfoxjumpsoverthelazydog"
Output: true
Explanation: sentence contains at least one of every letter of the English alphabet.
Example 2:

Input: sentence = "leetcode"
Output: false
 

Constraints:

1 <= sentence.length <= 1000
sentence consists of lowercase English letters.

class Solution
{
public:
    bool checkIfPangram(string s)
    {
        int n = s.length();
        if (n < 26) return false;
        vector<int> v(26);
        for (auto ch : s)
        {
            if(v[ch - 'a'] == 0)
                v[ch - 'a']++;
            int sum = accumulate(v.begin(), v.end(), 0);
            if(sum > 25)
            {
                return true;
            }
        }
        return false;
    }
};


// Source https://leetcode.com/problems/maximum-ice-cream-bars/

It is a sweltering summer day, and a boy wants to buy some ice cream bars.

At the store, there are n ice cream bars. You are given an array costs of length n, where costs[i] is the price of the ith ice cream bar in coins. 
The boy initially has coins coins to spend, and he wants to buy as many ice cream bars as possible. 

Return the maximum number of ice cream bars the boy can buy with coins coins.

Note: The boy can buy the ice cream bars in any order.

 

Example 1:

Input: costs = [1,3,2,4,1], coins = 7
Output: 4
Explanation: The boy can buy ice cream bars at indices 0,1,2,4 for a total price of 1 + 3 + 2 + 1 = 7.
Example 2:

Input: costs = [10,6,8,7,7,8], coins = 5
Output: 0
Explanation: The boy cannot afford any of the ice cream bars.
Example 3:

Input: costs = [1,6,3,1,2,5], coins = 20
Output: 6
Explanation: The boy can buy all the ice cream bars for a total price of 1 + 6 + 3 + 1 + 2 + 5 = 18.
 

Constraints:

costs.length == n
1 <= n <= 105
1 <= costs[i] <= 105
1 <= coins <= 108

class Solution
{
public:
    int maxIceCream(vector<int> &costs, int coins)
    {
        int ans = 0;
        priority_queue<int, vector<int>, greater<int>> pq(costs.begin(), costs.end());
        while(!pq.empty() && pq.top() <= coins)
        {
            ans++;
            coins -= pq.top();
            pq.pop();
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/single-threaded-cpu/

You are given n​​​​​​ tasks labeled from 0 to n - 1 represented by a 2D integer array tasks, where tasks[i] = [enqueueTimei, processingTimei] means that 
the i​​​​​​th​​​​ task will be available to process at enqueueTimei and will take processingTimei to finish processing.

You have a single-threaded CPU that can process at most one task at a time and will act in the following way:

If the CPU is idle and there are no available tasks to process, the CPU remains idle.
If the CPU is idle and there are available tasks, the CPU will choose the one with the shortest processing time. 
If multiple tasks have the same shortest processing time, it will choose the task with the smallest index.
Once a task is started, the CPU will process the entire task without stopping.
The CPU can finish a task then start a new one instantly.
Return the order in which the CPU will process the tasks.

 

Example 1:

Input: tasks = [[1,2],[2,4],[3,2],[4,1]]
Output: [0,2,3,1]
Explanation: The events go as follows: 
- At time = 1, task 0 is available to process. Available tasks = {0}.
- Also at time = 1, the idle CPU starts processing task 0. Available tasks = {}.
- At time = 2, task 1 is available to process. Available tasks = {1}.
- At time = 3, task 2 is available to process. Available tasks = {1, 2}.
- Also at time = 3, the CPU finishes task 0 and starts processing task 2 as it is the shortest. Available tasks = {1}.
- At time = 4, task 3 is available to process. Available tasks = {1, 3}.
- At time = 5, the CPU finishes task 2 and starts processing task 3 as it is the shortest. Available tasks = {1}.
- At time = 6, the CPU finishes task 3 and starts processing task 1. Available tasks = {}.
- At time = 10, the CPU finishes task 1 and becomes idle.
Example 2:

Input: tasks = [[7,10],[7,12],[7,5],[7,4],[7,2]]
Output: [4,3,2,0,1]
Explanation: The events go as follows:
- At time = 7, all the tasks become available. Available tasks = {0,1,2,3,4}.
- Also at time = 7, the idle CPU starts processing task 4. Available tasks = {0,1,2,3}.
- At time = 9, the CPU finishes task 4 and starts processing task 3. Available tasks = {0,1,2}.
- At time = 13, the CPU finishes task 3 and starts processing task 2. Available tasks = {0,1}.
- At time = 18, the CPU finishes task 2 and starts processing task 0. Available tasks = {1}.
- At time = 28, the CPU finishes task 0 and starts processing task 1. Available tasks = {}.
- At time = 40, the CPU finishes task 1 and becomes idle.
 

Constraints:

tasks.length == n
1 <= n <= 105
1 <= enqueueTimei, processingTimei <= 109

class Solution
{
public:
    vector<int> getOrder(vector<vector<int>> &tasks)
    {
        int n = tasks.size();
        for ( int i = 0; i < n; i++  )
        {
            tasks[i].push_back(i);
        }
        sort (tasks.begin(), tasks.end(), [](vector<int> &a, vector<int> &b)
        {
            return a[0] < b[0];
        });
        vector<int> ans;
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        long long curTime = tasks[0][0];
        pq.push ( { tasks[0][1], tasks[0][2] } );
        int l = 1;
        while (l < n)
        {
            if (tasks[l][0] > curTime) break;
            pq.push ( { tasks[l][1], tasks[l][2] } );
            l++;
        }
        while (!pq.empty())
        {
            ans.push_back ( pq.top().second );
            curTime += pq.top().first;
            pq.pop();
            if (pq.empty() && l < n)
            {
                pq.push( {tasks[l][1], tasks[l][2]} );
                curTime = max(curTime, (long long)tasks[l][0]);
                l++;
            }
            while (l < n)
            {
                if (tasks[l][0] > curTime) break;
                pq.push ( { tasks[l][1], tasks[l][2] } );
                l++;
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/find-xor-sum-of-all-pairs-bitwise-and/

The XOR sum of a list is the bitwise XOR of all its elements. If the list only contains one element, then its XOR sum will be equal to this element.

For example, the XOR sum of [1,2,3,4] is equal to 1 XOR 2 XOR 3 XOR 4 = 4, and the XOR sum of [3] is equal to 3.
You are given two 0-indexed arrays arr1 and arr2 that consist only of non-negative integers.

Consider the list containing the result of arr1[i] AND arr2[j] (bitwise AND) for every (i, j) pair where 0 <= i < arr1.length and 0 <= j < arr2.length.

Return the XOR sum of the aforementioned list.

 

Example 1:

Input: arr1 = [1,2,3], arr2 = [6,5]
Output: 0
Explanation: The list = [1 AND 6, 1 AND 5, 2 AND 6, 2 AND 5, 3 AND 6, 3 AND 5] = [0,1,2,0,2,1].
The XOR sum = 0 XOR 1 XOR 2 XOR 0 XOR 2 XOR 1 = 0.
Example 2:

Input: arr1 = [12], arr2 = [4]
Output: 4
Explanation: The list = [12 AND 4] = [4]. The XOR sum = 4.
 

Constraints:

1 <= arr1.length, arr2.length <= 105
0 <= arr1[i], arr2[j] <= 109

(a & b) ^ (a & c) = a & (b ^ c)
(0 & 0) ^ (0 & 0) = 0 & (0 ^0) = 0
(0 & 0) ^ (0 & 1) = 0 & (0 ^1) = 0
(0 & 1) ^ (0 & 0) = 0 & (1 ^0) = 0
(0 & 1) ^ (0 & 1) = 0 & (1 ^1) = 0
(1 & 0) ^ (1 & 0) = 1 & (0 ^0) = 0
(1 & 0) ^ (1 & 1) = 1 & (0 ^1) = 1
(1 & 1) ^ (1 & 0) = 1 & (1 ^0) = 1
(1 & 1) ^ (1 & 1) = 1 & (1 ^1) = 0
(arr1[0] & arr2[0]) ^ (arr1[0] & arr2[1]) ^ ... ^ (arr1[0] & arr2[m-1]) = arr1[0] & (arr2[0] ^ arr2[1] ^ ... ^ arr2[m-1])
(arr1[1] & arr2[0]) ^ (arr1[1] & arr2[1]) ^ ... ^ (arr1[1] & arr2[m-1]) = arr1[1] & (arr2[0] ^ arr2[1] ^ ... ^ arr2[m-1])
...
(arr1[n-1] & arr2[0]) ^ (arr1[n-1] & arr2[1]) ^ ... ^ (arr1[n-1] & arr2[m-1]) = arr1[n-1] & (arr2[0] ^ arr2[1] ^ ... ^ arr2[m-1])

x = (arr2[0] ^ arr2[1] ^ ... ^ arr2[m-1])

(x & arr1[0]) ^ (x & arr1[0]) ^ ... ^ (x & arr1[n-1]) = x & (arr1[0] ^ arr1[1] ^ ... ^ arr1[n-1) = (arr1[0] ^ arr1[1] ^ ... ^ arr1[n-1) & (arr2[0] ^ arr2[1] ^ ... ^ arr2[m-1])

class Solution
{
public:
    int getXORSum(vector<int> &arr1, vector<int> &arr2)
    {
        int n = arr1.size();
        int m = arr2.size();
        long res1 = 0, res2 = 0;
        for(int i = 0; i < n; i++)
        {
            res1 = res1 ^ arr1[i];
        }
        for(int i = 0; i < m; i++)
        {
            res2 = res2 ^ arr2[i];
        }
        return (res1 & res2);
    }
};


// Source https://leetcode.com/problems/sum-of-digits-in-base-k/

Given an integer n (in base 10) and a base k, return the sum of the digits of n after converting n from base 10 to base k.

After converting, each digit should be interpreted as a base 10 number, and the sum should be returned in base 10.

 

Example 1:

Input: n = 34, k = 6
Output: 9
Explanation: 34 (base 10) expressed in base 6 is 54. 5 + 4 = 9.
Example 2:

Input: n = 10, k = 10
Output: 1
Explanation: n is already in base 10. 1 + 0 = 1.
 

Constraints:

1 <= n <= 100
2 <= k <= 10

class Solution
{
public:
    int sumBase(int n, int k)
    {
        int ans = 0;
        while(n > 0)
        {
            ans += n % k;
            n /= k;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/frequency-of-the-most-frequent-element/

The frequency of an element is the number of times it occurs in an array.

You are given an integer array nums and an integer k. In one operation, you can choose an index of nums and increment the element at that index by 1.

Return the maximum possible frequency of an element after performing at most k operations.

 

Example 1:

Input: nums = [1,2,4], k = 5
Output: 3
Explanation: Increment the first element three times and the second element two times to make nums = [4,4,4].
4 has a frequency of 3.
Example 2:

Input: nums = [1,4,8,13], k = 5
Output: 2
Explanation: There are multiple optimal solutions:
- Increment the first element three times to make nums = [4,4,8,13]. 4 has a frequency of 2.
- Increment the second element four times to make nums = [1,8,8,13]. 8 has a frequency of 2.
- Increment the third element five times to make nums = [1,4,13,13]. 13 has a frequency of 2.
Example 3:

Input: nums = [3,9,6], k = 2
Output: 1
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 105
1 <= k <= 105

class Solution
{
public:
    int maxFrequency(vector<int> &nums, int k)
    {
        int n = nums.size();
        sort(nums.begin(), nums.end());
        long sum = 0;
        int ans = 0;
        int i = 0, j = 0;
        while(j < n)
        {
            sum += nums[j];
            while(long(j - i + 1)*nums[j] > sum + k)
            {
                sum -= nums[i];
                ++i;
            }
            ans = max(ans, j - i + 1);
            ++j;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/longest-substring-of-all-vowels-in-order/

A string is considered beautiful if it satisfies the following conditions:

Each of the 5 English vowels ('a', 'e', 'i', 'o', 'u') must appear at least once in it.
The letters must be sorted in alphabetical order (i.e. all 'a's before 'e's, all 'e's before 'i's, etc.).
For example, strings "aeiou" and "aaaaaaeiiiioou" are considered beautiful, but "uaeio", "aeoiu", and "aaaeeeooo" are not beautiful.

Given a string word consisting of English vowels, return the length of the longest beautiful substring of word. If no such substring exists, return 0.

A substring is a contiguous sequence of characters in a string.

 

Example 1:

Input: word = "aeiaaioaaaaeiiiiouuuooaauuaeiu"
Output: 13
Explanation: The longest beautiful substring in word is "aaaaeiiiiouuu" of length 13.
Example 2:

Input: word = "aeeeiiiioooauuuaeiou"
Output: 5
Explanation: The longest beautiful substring in word is "aeiou" of length 5.
Example 3:

Input: word = "a"
Output: 0
Explanation: There is no beautiful substring, so return 0.
 

Constraints:

1 <= word.length <= 5 * 105
word consists of characters 'a', 'e', 'i', 'o', and 'u'.

class Solution
{
public:
    int longestBeautifulSubstring(string word)
    {
        int n = word.length();
        vector<char> vowels{'a', 'e', 'i', 'o', 'u'};
        int result = 0;
        for (int i = 0; i < n; ++i)
        {
            if (word[i] != 'a') continue;
            int runningLength = 1;
            int currPos = 1;
            int j = i + 1;
            for (; j < n; ++j)
            {
                if (currPos < 5 && word[j] == vowels[currPos])
                {
                    currPos++;
                    runningLength++;
                }
                else if(currPos > 0 && word[j] == vowels[currPos - 1])
                {
                    runningLength++;
                }
                else
                {
                    break;
                }
                if(currPos == 5)
                {
                    result = max(result, runningLength);
                }
            }
            i = j - 1;
        }
        return result;
    }
};


// Source https://leetcode.com/problems/maximum-building-height/

You want to build n new buildings in a city. The new buildings will be built in a line and are labeled from 1 to n.

However, there are city restrictions on the heights of the new buildings:

The height of each building must be a non-negative integer.
The height of the first building must be 0.
The height difference between any two adjacent buildings cannot exceed 1.
Additionally, there are city restrictions on the maximum height of specific buildings. These restrictions are given as a 2D integer array restrictions 
where restrictions[i] = [idi, maxHeighti] indicates that building idi must have a height less than or equal to maxHeighti.

It is guaranteed that each building will appear at most once in restrictions, and building 1 will not be in restrictions.

Return the maximum possible height of the tallest building.

 

Example 1:


Input: n = 5, restrictions = [[2,1],[4,1]]
Output: 2
Explanation: The green area in the image indicates the maximum allowed height for each building.
We can build the buildings with heights [0,1,2,1,2], and the tallest building has a height of 2.
Example 2:


Input: n = 6, restrictions = []
Output: 5
Explanation: The green area in the image indicates the maximum allowed height for each building.
We can build the buildings with heights [0,1,2,3,4,5], and the tallest building has a height of 5.
Example 3:


Input: n = 10, restrictions = [[5,3],[2,5],[7,4],[10,3]]
Output: 5
Explanation: The green area in the image indicates the maximum allowed height for each building.
We can build the buildings with heights [0,1,2,3,3,4,4,5,4,3], and the tallest building has a height of 5.
 

Constraints:

2 <= n <= 109
0 <= restrictions.length <= min(n - 1, 105)
2 <= idi <= n
idi is unique.
0 <= maxHeighti <= 109

// considering the following restractions:
// 
// Building #1 max-height = 1, Building #5 max-height = 1
// then we can have the building height list - [1,2,3,2,1]
//
// Building #1 max-height = 1, Building #6 max-height = 1
// then we can have the building height list - [1,2,3,3,2,1]
// 
// Building #1 max-height = 3, Building #5 max-height = 1
// then we can have the building height list - [3,4,3,2,1]
// 
// Building #1 max-height = 3, Building #6 max-height = 1
// then we can have the building height list - [3,4,4,3,2,1]
//
// Building #1 max-height = 1, Building #5 max-height = 9
// then we can have the building height list - [1,2,3,4,5]
// 
// So, we can figure out the following rules :
// 
// if two restraction has same limited height, suppose we have [n ......... n],
// then we can have the building height list [n, n+1, n+2, ... n+m-1, n+m, n+m-1 ..., n+2, n+1, n] or [n, n+1, n+2, ... n+m-1, n+m, n+m, n+m-1 ..., n+2, n+1, n]
// 2 * m + 1 = width
// 2 * m + 2 = width
// So, m = (width - 1) /2 - the width is the number of buildings.
// 
// if two restraction has different limited height, suppose we have [n ...... n+x]
// then we still can have the building height list like 1) - we just add some buildings behind [n ... n+m ... n+x, (n+x-1... n) ]
// 
// So, m = (width+x - 1)/2 - we need to extend x buildings
// m >= x -> (width + x - 1) / 2 >= x -> width -1 >= x
// if there hasn't enough buildings between two restractions. then, the max height we can make is width. For examples:
// 
// Building#1 max-height = 2, building#3 max-height = 5 : then, we only can make [2,3,4]
// Building#1 max-height = 2, building#2 max-height = 9 : then, we only can make [2,3]
// So, we can have the following source code to calculate the max height between two restractions.
// 
//     int getMaxHeight(vector<int>& left, vector<int>& right) {
//         
//         int width = right[0] - left[0];
//         int height_delta = abs(right[1] - left[1]);
//         int min_height = min (left[1], right[1]);
//         
//         //if the `width` is enough to have `height_delta`
//         if (width >= height_delta) return min_height + (width + height_delta) / 2;
//         
//         // if the `width` is not enought have `height_delta`
//         // then, the `width` is the max height we can make
//         int max_height =  min_height + width;
//         
//         return max_height;
//     }
// BUT, we still have a case need to deal with, considering we have the following restractions:
// 
// [1,1], [2,2] ,[3,3], [4,0]
// 
// we can process them couple by couple.
// 
// step 1: [1,1], [2,2] : max-height = 2
// step 2: [2,2] ,[3,3] : max-height = 3
// step 3: [3,3], [4,0] : max-height = 1
// for the last couple of restractions, we can see the building#3 max-height is 1, so we have go backwards to recaluate the building#2 and building#1.
// 
// step 3: [3,1], [4,0] : max-height = 1 (change the [3,3] to [3,1] )
// step:4: [2,2] ,[3,1] : max-height = 2
// step 5: [1,1], [2,2] : max-height = 2
// So, the correct answer of max height is 2

class Solution
{
public:
    int getMaxHeight(pair<int, int> &left, pair<int, int> &right)
    {
        int width = right.first - left.first;
        int height_delta = abs(right.second - left.second);
        int min_height = min(left.second, right.second);

        if (width >= height_delta) return min_height + (width + height_delta) / 2;
        int max_height =  min_height + width;

        left.second = min(left.second, max_height);
        right.second = min(right.second, max_height);

        return max_height;
    }

    int maxBuilding(int n, vector<vector<int>> &restrictions)
    {
        vector<pair<int, int>> vec;
        vec.reserve(restrictions.size() + 2);
        vec.push_back({1, 0});
        int mxVal = 0;
        for (auto &v : restrictions)
        {
            vec.push_back({v[0], v[1]});
            mxVal = max(mxVal, v[0]);
        }
        if (mxVal < n)
        {
            vec.push_back({n, n - 1});
        }
        sort(vec.begin(), vec.end());
        int m = vec.size();
        for(int i = 0; i < m - 1; i++)
        {
            int height = getMaxHeight(vec[i], vec[i + 1]);
        }
        int maxHeight = 0;
        for(int i = m - 1; i > 0; i--)
        {
            int height = getMaxHeight(vec[i - 1], vec[i]);
            maxHeight = max(maxHeight, height);
        }
        return maxHeight;
    }
};


// Source https://leetcode.com/problems/replace-all-digits-with-characters/

You are given a 0-indexed string s that has lowercase English letters in its even indices and digits in its odd indices.

There is a function shift(c, x), where c is a character and x is a digit, that returns the xth character after c.

For example, shift('a', 5) = 'f' and shift('x', 0) = 'x'.
For every odd index i, you want to replace the digit s[i] with shift(s[i-1], s[i]).

Return s after replacing all digits. It is guaranteed that shift(s[i-1], s[i]) will never exceed 'z'.

 

Example 1:

Input: s = "a1c1e1"
Output: "abcdef"
Explanation: The digits are replaced as follows:
- s[1] -> shift('a',1) = 'b'
- s[3] -> shift('c',1) = 'd'
- s[5] -> shift('e',1) = 'f'
Example 2:

Input: s = "a1b2c3d4e"
Output: "abbdcfdhe"
Explanation: The digits are replaced as follows:
- s[1] -> shift('a',1) = 'b'
- s[3] -> shift('b',2) = 'd'
- s[5] -> shift('c',3) = 'f'
- s[7] -> shift('d',4) = 'h'
 

Constraints:

1 <= s.length <= 100
s consists only of lowercase English letters and digits.
shift(s[i-1], s[i]) <= 'z' for all odd indices i.

class Solution
{
public:
    string replaceDigits(string s)
    {
        int n = s.length();
        for(int i = 0; i < n; i++)
        {
            if(i % 2) s[i] = (s[i - 1]+ (s[i] - '0'));
        }
        return s;
    }
};


// Source https://leetcode.com/problems/seat-reservation-manager/

Design a system that manages the reservation state of n seats that are numbered from 1 to n.

Implement the SeatManager class:

SeatManager(int n) Initializes a SeatManager object that will manage n seats numbered from 1 to n. All seats are initially available.
int reserve() Fetches the smallest-numbered unreserved seat, reserves it, and returns its number.
void unreserve(int seatNumber) Unreserves the seat with the given seatNumber.
 

Example 1:

Input
["SeatManager", "reserve", "reserve", "unreserve", "reserve", "reserve", "reserve", "reserve", "unreserve"]
[[5], [], [], [2], [], [], [], [], [5]]
Output
[null, 1, 2, null, 2, 3, 4, 5, null]

Explanation
SeatManager seatManager = new SeatManager(5); // Initializes a SeatManager with 5 seats.
seatManager.reserve();    // All seats are available, so return the lowest numbered seat, which is 1.
seatManager.reserve();    // The available seats are [2,3,4,5], so return the lowest of them, which is 2.
seatManager.unreserve(2); // Unreserve seat 2, so now the available seats are [2,3,4,5].
seatManager.reserve();    // The available seats are [2,3,4,5], so return the lowest of them, which is 2.
seatManager.reserve();    // The available seats are [3,4,5], so return the lowest of them, which is 3.
seatManager.reserve();    // The available seats are [4,5], so return the lowest of them, which is 4.
seatManager.reserve();    // The only available seat is seat 5, so return 5.
seatManager.unreserve(5); // Unreserve seat 5, so now the available seats are [5].
 

Constraints:

1 <= n <= 105
1 <= seatNumber <= n
For each call to reserve, it is guaranteed that there will be at least one unreserved seat.
For each call to unreserve, it is guaranteed that seatNumber will be reserved.
At most 105 calls in total will be made to reserve and unreserve.

class SeatManager
{
public:
    priority_queue<int, vector<int>, greater<int>> pq;

    SeatManager(int n)
    {
        for(int i = 1; i <= n; i++)
            pq.push(i);
    }

    int reserve()
    {
        int res = pq.top();
        pq.pop();
        return res;
    }

    void unreserve(int seatNumber)
    {
        pq.push(seatNumber);
    }
};


// Source https://leetcode.com/problems/maximum-element-after-decreasing-and-rearranging/

You are given an array of positive integers arr. Perform some operations (possibly none) on arr so that it satisfies these conditions:

The value of the first element in arr must be 1.
The absolute difference between any 2 adjacent elements must be less than or equal to 1. 
In other words, abs(arr[i] - arr[i - 1]) <= 1 for each i where 1 <= i < arr.length (0-indexed). abs(x) is the absolute value of x.
There are 2 types of operations that you can perform any number of times:

Decrease the value of any element of arr to a smaller positive integer.
Rearrange the elements of arr to be in any order.
Return the maximum possible value of an element in arr after performing the operations to satisfy the conditions.

 

Example 1:

Input: arr = [2,2,1,2,1]
Output: 2
Explanation: 
We can satisfy the conditions by rearranging arr so it becomes [1,2,2,2,1].
The largest element in arr is 2.
Example 2:

Input: arr = [100,1,1000]
Output: 3
Explanation: 
One possible way to satisfy the conditions is by doing the following:
1. Rearrange arr so it becomes [1,100,1000].
2. Decrease the value of the second element to 2.
3. Decrease the value of the third element to 3.
Now arr = [1,2,3], which satisfies the conditions.
The largest element in arr is 3.
Example 3:

Input: arr = [1,2,3,4,5]
Output: 5
Explanation: The array already satisfies the conditions, and the largest element is 5.
 

Constraints:

1 <= arr.length <= 105
1 <= arr[i] <= 109

class Solution
{
public:
    int maximumElementAfterDecrementingAndRearranging(vector<int> &arr)
    {
        int n = arr.size();
        sort(arr.begin(), arr.end());
        if(arr[0] != 1) arr[0] = 1;
        for(int i = 1; i < n; i++)
        {
            if(abs(arr[i] - arr[i - 1]) > 1 ) arr[i] = arr[i - 1] + 1;
        }
        return arr[n - 1];
    }
};


// Source https://leetcode.com/problems/closest-room/

There is a hotel with n rooms. The rooms are represented by a 2D integer array rooms where rooms[i] = [roomIdi, sizei] denotes that 
there is a room with room number roomIdi and size equal to sizei. Each roomIdi is guaranteed to be unique.

You are also given k queries in a 2D array queries where queries[j] = [preferredj, minSizej]. The answer to the jth query is the room number id of a room such that:

The room has a size of at least minSizej, and
abs(id - preferredj) is minimized, where abs(x) is the absolute value of x.
If there is a tie in the absolute difference, then use the room with the smallest such id. If there is no such room, the answer is -1.

Return an array answer of length k where answer[j] contains the answer to the jth query.

 

Example 1:

Input: rooms = [[2,2],[1,2],[3,2]], queries = [[3,1],[3,3],[5,2]]
Output: [3,-1,3]
Explanation: The answers to the queries are as follows:
Query = [3,1]: Room number 3 is the closest as abs(3 - 3) = 0, and its size of 2 is at least 1. The answer is 3.
Query = [3,3]: There are no rooms with a size of at least 3, so the answer is -1.
Query = [5,2]: Room number 3 is the closest as abs(3 - 5) = 2, and its size of 2 is at least 2. The answer is 3.
Example 2:

Input: rooms = [[1,4],[2,3],[3,5],[4,1],[5,2]], queries = [[2,3],[2,4],[2,5]]
Output: [2,1,3]
Explanation: The answers to the queries are as follows:
Query = [2,3]: Room number 2 is the closest as abs(2 - 2) = 0, and its size of 3 is at least 3. The answer is 2.
Query = [2,4]: Room numbers 1 and 3 both have sizes of at least 4. The answer is 1 since it is smaller.
Query = [2,5]: Room number 3 is the only room with a size of at least 5. The answer is 3.
 

Constraints:

n == rooms.length
1 <= n <= 105
k == queries.length
1 <= k <= 104
1 <= roomIdi, preferredj <= 107
1 <= sizei, minSizej <= 107

class Solution
{
public:
    vector<int> closestRoom(vector<vector<int>> &rooms, vector<vector<int>> &queries)
    {
        set<int> room_set;
        vector<pair<int, int>> room_lst(rooms.size());
        vector<array<int, 3>> query_lst(queries.size());
        vector<int> v(queries.size());
        for(int i = 0; i < rooms.size(); i++)
        {
            room_lst[i] = {rooms[i][1], rooms[i][0]};
        }
        for(int i = 0; i < queries.size(); i++)
        {
            query_lst[i] = {queries[i][1], queries[i][0], i};
        }
        sort(room_lst.begin(), room_lst.end(), greater<pair<int, int>>());
        sort(query_lst.begin(), query_lst.end(), greater<array<int, 3>>());
        int loc = 0;
        for(auto &q : query_lst)
        {
            int qsize = q[0];
            int qpref = q[1];
            int qnum = q[2];
            while(loc < room_lst.size() && room_lst[loc].first >= qsize)
            {
                room_set.insert(room_lst[loc].second);
                loc++;
            }
            if(room_set.size() == 0)
            {
                v[qnum] = -1;
                continue;
            }
            else if(room_set.size() == 1)
            {
                v[qnum] = *room_set.begin();
                continue;
            }
            auto iter = room_set.lower_bound(qpref);
            if(iter == room_set.begin())
            {
                v[qnum] = *iter;
            }
            else if(iter == room_set.end())
            {
                iter--;
                v[qnum] = *iter;
            }
            else
            {
                int id1 = *iter;
                int diff1 = abs(id1 - qpref);
                iter--;
                int id2 = *iter;
                int diff2 = abs(id2 - qpref);
                if(diff1 < diff2)
                {
                    v[qnum] = id1;
                }
                else if(diff1 > diff2)
                {
                    v[qnum] = id2;
                }
                else
                {
                    v[qnum] = min(id1, id2);
                }
            }
        }
        return v;
    }
};


// Source https://leetcode.com/problems/minimum-distance-to-the-target-element/

Given an integer array nums (0-indexed) and two integers target and start, find an index i such that nums[i] == target and abs(i - start) is minimized. Note that abs(x) is the absolute value of x.

Return abs(i - start).

It is guaranteed that target exists in nums.

 

Example 1:

Input: nums = [1,2,3,4,5], target = 5, start = 3
Output: 1
Explanation: nums[4] = 5 is the only value equal to target, so the answer is abs(4 - 3) = 1.
Example 2:

Input: nums = [1], target = 1, start = 0
Output: 0
Explanation: nums[0] = 1 is the only value equal to target, so the answer is abs(0 - 0) = 0.
Example 3:

Input: nums = [1,1,1,1,1,1,1,1,1,1], target = 1, start = 0
Output: 0
Explanation: Every value of nums is 1, but nums[0] minimizes abs(i - start), which is abs(0 - 0) = 0.
 

Constraints:

1 <= nums.length <= 1000
1 <= nums[i] <= 104
0 <= start < nums.length
target is in nums.

class Solution
{
public:
    int getMinDistance(vector<int> &nums, int target, int start)
    {
        int res = INT_MAX;
        for(int i = 0; i < nums.size(); i++)
        {
            if(nums[i] == target)
                res = min(res, abs(i - start));
        }
        return res;
    }
};


// Source https://leetcode.com/problems/splitting-a-string-into-descending-consecutive-values/

You are given a string s that consists of only digits.

Check if we can split s into two or more non-empty substrings such that the numerical values of the substrings are in descending order 
and the difference between numerical values of every two adjacent substrings is equal to 1.

For example, the string s = "0090089" can be split into ["0090", "089"] with numerical values [90,89]. The values are in descending order and adjacent values differ by 1, so this way is valid.
Another example, the string s = "001" can be split into ["0", "01"], ["00", "1"], or ["0", "0", "1"]. However all the ways are invalid because they have numerical values [0,1], [0,1], and [0,0,1] respectively, all of which are not in descending order.
Return true if it is possible to split s​​​​​​ as described above, or false otherwise.

A substring is a contiguous sequence of characters in a string.

 

Example 1:

Input: s = "1234"
Output: false
Explanation: There is no valid way to split s.
Example 2:

Input: s = "050043"
Output: true
Explanation: s can be split into ["05", "004", "3"] with numerical values [5,4,3].
The values are in descending order with adjacent values differing by 1.
Example 3:

Input: s = "9080701"
Output: false
Explanation: There is no valid way to split s.
 

Constraints:

1 <= s.length <= 20
s only consists of digits.

class Solution
{
public:
    int n;

    bool find(int cnt, int index, long long int prev, string &s)
    {
        if(index >= n && cnt >= 2) return true;
        long long int val = 0;
        for(int i = index; i < n; i++)
        {
            val = val * 10 + (s[i] - '0');
            if(val >= prev) break;
            if((prev - val == 1) && find(cnt + 1, i + 1, val, s))
            {
                return true;
            }
        }
        return false;
    }

    bool splitString(string s)
    {
        n = s.length();
        long long int val = 0;
        for(int i = 0; i < n - 1; i++)
        {
            if (val >= 1e10) break;
            val = val * 10 + (s[i] - '0');
            if(find(1, i + 1, val, s))
            {
                return true;
            }
        }
        return false;
    }
};


// Source https://leetcode.com/problems/minimum-adjacent-swaps-to-reach-the-kth-smallest-number/

You are given a string num, representing a large integer, and an integer k.

We call some integer wonderful if it is a permutation of the digits in num and is greater in value than num. There can be many wonderful integers. 
However, we only care about the smallest-valued ones.

For example, when num = "5489355142":
The 1st smallest wonderful integer is "5489355214".
The 2nd smallest wonderful integer is "5489355241".
The 3rd smallest wonderful integer is "5489355412".
The 4th smallest wonderful integer is "5489355421".
Return the minimum number of adjacent digit swaps that needs to be applied to num to reach the kth smallest wonderful integer.

The tests are generated in such a way that kth smallest wonderful integer exists.

 

Example 1:

Input: num = "5489355142", k = 4
Output: 2
Explanation: The 4th smallest wonderful number is "5489355421". To get this number:
- Swap index 7 with index 8: "5489355142" -> "5489355412"
- Swap index 8 with index 9: "5489355412" -> "5489355421"
Example 2:

Input: num = "11112", k = 4
Output: 4
Explanation: The 4th smallest wonderful number is "21111". To get this number:
- Swap index 3 with index 4: "11112" -> "11121"
- Swap index 2 with index 3: "11121" -> "11211"
- Swap index 1 with index 2: "11211" -> "12111"
- Swap index 0 with index 1: "12111" -> "21111"
Example 3:

Input: num = "00123", k = 1
Output: 1
Explanation: The 1st smallest wonderful number is "00132". To get this number:
- Swap index 3 with index 4: "00123" -> "00132"
 

Constraints:

2 <= num.length <= 1000
1 <= k <= 1000
num only consists of digits.

class Solution
{
public:
    int getMinSwaps(string num, int k)
    {
        string original = num;
        while(k-- > 0) next_permutation(num.begin(), num.end());
        int n = num.length();
        int res = 0;
        for(int j = 0; j < n; j++)
        {
            if(num[j] != original[j])
            {
                int i = j + 1;
                while(original[i] != num[j]) i++;
                while(num[j] != original[j])
                {
                    swap(original[i], original[i - 1]);
                    ++res;
                    --i;
                }
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/minimum-interval-to-include-each-query/

You are given a 2D integer array intervals, where intervals[i] = [lefti, righti] describes the ith interval starting at lefti and ending at righti (inclusive). 
The size of an interval is defined as the number of integers it contains, or more formally righti - lefti + 1.

You are also given an integer array queries. The answer to the jth query is the size of the smallest interval i such that lefti <= queries[j] <= righti. If no such interval exists, the answer is -1.

Return an array containing the answers to the queries.

 

Example 1:

Input: intervals = [[1,4],[2,4],[3,6],[4,4]], queries = [2,3,4,5]
Output: [3,3,1,4]
Explanation: The queries are processed as follows:
- Query = 2: The interval [2,4] is the smallest interval containing 2. The answer is 4 - 2 + 1 = 3.
- Query = 3: The interval [2,4] is the smallest interval containing 3. The answer is 4 - 2 + 1 = 3.
- Query = 4: The interval [4,4] is the smallest interval containing 4. The answer is 4 - 4 + 1 = 1.
- Query = 5: The interval [3,6] is the smallest interval containing 5. The answer is 6 - 3 + 1 = 4.
Example 2:

Input: intervals = [[2,3],[2,5],[1,8],[20,25]], queries = [2,19,5,22]
Output: [2,-1,4,6]
Explanation: The queries are processed as follows:
- Query = 2: The interval [2,3] is the smallest interval containing 2. The answer is 3 - 2 + 1 = 2.
- Query = 19: None of the intervals contain 19. The answer is -1.
- Query = 5: The interval [2,5] is the smallest interval containing 5. The answer is 5 - 2 + 1 = 4.
- Query = 22: The interval [20,25] is the smallest interval containing 22. The answer is 25 - 20 + 1 = 6.
 

Constraints:

1 <= intervals.length <= 105
1 <= queries.length <= 105
intervals[i].length == 2
1 <= lefti <= righti <= 107
1 <= queries[j] <= 107

class Solution
{
public:
    vector<int> minInterval(vector<vector<int>> &intervals, vector<int> &queries)
    {
        int n = intervals.size();
        vector<pair<int, int>> vIntervals;
        vIntervals.reserve(n);
        for (auto &v : intervals)
        {
            vIntervals.push_back({v[0], v[1]});
        }
        sort(vIntervals.begin(), vIntervals.end());
        int m = queries.size();
        vector<pair<int, int>> vQuerys;
        vQuerys.reserve(m);
        for (int i = 0; i < m; ++i)
        {
            vQuerys.push_back({queries[i], i});
        }
        sort(vQuerys.begin(), vQuerys.end());
        vector<int> ans(m, -1);
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        int k = 0;
        for (auto [val, idx] : vQuerys)
        {
            for (; k < n && vIntervals[k].first <= val; ++k)
                pq.push( {vIntervals[k].second - vIntervals[k].first + 1, vIntervals[k].second} );
            while (!pq.empty() && pq.top().second < val)
                pq.pop();
            if (!pq.empty())
                ans[idx] = pq.top().first;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/maximum-population-year/

You are given a 2D integer array logs where each logs[i] = [birthi, deathi] indicates the birth and death years of the ith person.

The population of some year x is the number of people alive during that year. The ith person is counted in year x's population if x is in the inclusive range [birthi, deathi - 1]. 
Note that the person is not counted in the year that they die.

Return the earliest year with the maximum population.

 

Example 1:

Input: logs = [[1993,1999],[2000,2010]]
Output: 1993
Explanation: The maximum population is 1, and 1993 is the earliest year with this population.
Example 2:

Input: logs = [[1950,1961],[1960,1971],[1970,1981]]
Output: 1960
Explanation: 
The maximum population is 2, and it had happened in years 1960 and 1970.
The earlier year between them is 1960.
 

Constraints:

1 <= logs.length <= 100
1950 <= birthi < deathi <= 2050

class Solution
{
public:
    int maximumPopulation(vector<vector<int>> &logs)
    {
        int arr[128] = {0};
        for (auto &v : logs)
        {
            arr[v[0] - 1950]++;
            arr[v[1] - 1950]--;
        }
        int mxVal = INT_MIN;
        int sum = 0;
        int res = 0;
        for (int i = 0; i < 128; ++i)
        {
            sum += arr[i];
            if (sum > mxVal)
            {
                mxVal = sum;
                res = i + 1950;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/maximum-distance-between-a-pair-of-values/

You are given two non-increasing 0-indexed integer arrays nums1​​​​​​ and nums2​​​​​​.

A pair of indices (i, j), where 0 <= i < nums1.length and 0 <= j < nums2.length, is valid if both i <= j and nums1[i] <= nums2[j]. The distance of the pair is j - i​​​​.

Return the maximum distance of any valid pair (i, j). If there are no valid pairs, return 0.

An array arr is non-increasing if arr[i-1] >= arr[i] for every 1 <= i < arr.length.

 

Example 1:

Input: nums1 = [55,30,5,4,2], nums2 = [100,20,10,10,5]
Output: 2
Explanation: The valid pairs are (0,0), (2,2), (2,3), (2,4), (3,3), (3,4), and (4,4).
The maximum distance is 2 with pair (2,4).
Example 2:

Input: nums1 = [2,2,2], nums2 = [10,10,1]
Output: 1
Explanation: The valid pairs are (0,0), (0,1), and (1,1).
The maximum distance is 1 with pair (0,1).
Example 3:

Input: nums1 = [30,29,19,5], nums2 = [25,25,25,25,25]
Output: 2
Explanation: The valid pairs are (2,2), (2,3), (2,4), (3,3), and (3,4).
The maximum distance is 2 with pair (2,4).
 

Constraints:

1 <= nums1.length, nums2.length <= 105
1 <= nums1[i], nums2[j] <= 105
Both nums1 and nums2 are non-increasing.

class Solution
{
public:
    int maxDistance(vector<int> &nums1, vector<int> &nums2)
    {
        int n = nums1.size();
        int m = nums2.size();
        int res = 0;
        int i = 0, j = 0;
        while (i < n && j < m)
        {
            if (nums1[i] > nums2[j])
            {
                ++i;
                if (i > j) j = i;
                continue;
            }
            res = max(res, j - i);
            ++j;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/maximum-subarray-min-product/

The min-product of an array is equal to the minimum value in the array multiplied by the array's sum.

For example, the array [3,2,5] (minimum value is 2) has a min-product of 2 * (3+2+5) = 2 * 10 = 20.
Given an array of integers nums, return the maximum min-product of any non-empty subarray of nums. Since the answer may be large, return it modulo 109 + 7.

Note that the min-product should be maximized before performing the modulo operation. Testcases are generated such that the maximum min-product without modulo will fit in a 64-bit signed integer.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [1,2,3,2]
Output: 14
Explanation: The maximum min-product is achieved with the subarray [2,3,2] (minimum value is 2).
2 * (2+3+2) = 2 * 7 = 14.
Example 2:

Input: nums = [2,3,3,1,2]
Output: 18
Explanation: The maximum min-product is achieved with the subarray [3,3] (minimum value is 3).
3 * (3+3) = 3 * 6 = 18.
Example 3:

Input: nums = [3,1,5,6,4,2]
Output: 60
Explanation: The maximum min-product is achieved with the subarray [5,6,4] (minimum value is 4).
4 * (5+6+4) = 4 * 15 = 60.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 107

class Solution
{
public:
    int maxSumMinProduct(vector<int> &nums)
    {
        int n = nums.size();
        const int mod = 1e9 + 7;
        stack<pair<int, int>> left, right;
        int larr[n], rarr[n];
        long long preSum[n], sum = 0;
        for(int i = 0; i < n; i++)
        {
            int count = 1;
            while(!left.empty() && left.top().first >= nums[i])
            {
                count += left.top().second;
                left.pop();
            }
            larr[i] = count;
            left.push({nums[i], count});
            sum += nums[i];
            preSum[i] = sum;
        }
        for(int i = n - 1; i >= 0; i--)
        {
            int count = 1;
            while(!right.empty() && right.top().first >= nums[i])
            {
                count += right.top().second;
                right.pop();
            }
            rarr[i] = count;
            right.push({nums[i], count});
        }
        long res = 0;
        for(int i = 0; i < n; i++)
        {
            long tempSum = (preSum[i + rarr[i] - 1] - (i - larr[i] >= 0 ? preSum[i - larr[i]] : 0));
            res = max(res, (tempSum * nums[i]));
        }
        return res % mod;
    }
};


// Source https://leetcode.com/problems/largest-color-value-in-a-directed-graph/

There is a directed graph of n colored nodes and m edges. The nodes are numbered from 0 to n - 1.

You are given a string colors where colors[i] is a lowercase English letter representing the color of the ith node in this graph (0-indexed). 
You are also given a 2D array edges where edges[j] = [aj, bj] indicates that there is a directed edge from node aj to node bj.

A valid path in the graph is a sequence of nodes x1 -> x2 -> x3 -> ... -> xk such that there is a directed edge from xi to xi+1 for every 1 <= i < k. 
The color value of the path is the number of nodes that are colored the most frequently occurring color along that path.

Return the largest color value of any valid path in the given graph, or -1 if the graph contains a cycle.

 

Example 1:



Input: colors = "abaca", edges = [[0,1],[0,2],[2,3],[3,4]]
Output: 3
Explanation: The path 0 -> 2 -> 3 -> 4 contains 3 nodes that are colored "a" (red in the above image).
Example 2:



Input: colors = "a", edges = [[0,0]]
Output: -1
Explanation: There is a cycle from 0 to 0.
 

Constraints:

n == colors.length
m == edges.length
1 <= n <= 105
0 <= m <= 105
colors consists of lowercase English letters.
0 <= aj, bj < n

class Solution
{
public:
    int largestPathValue(string colors, vector<vector<int>> &edges)
    {
        int n = colors.size();
        vector<int> in1(n, 0);
        vector<int> in2(n, 0);
        vector<int> adj[n];
        for(auto &v : edges)
        {
            adj[v[1]].push_back(v[0]);
            in1[v[0]]++;
        }
        int res = 0;
        vector<int> dp(n, 0);
        int seen[26] = {0};
        for(char c : colors)
        {
            if(seen[c - 'a']) continue;
            seen[c - 'a'] = 1;

            queue<int> q;
            for(int i = 0; i < n; ++i)
            {
                dp[i] = -1;
                in2[i] = in1[i];
                if(in2[i] == 0)
                {
                    dp[i] = (c - 'a' == colors[i] - 'a');
                    q.push(i);
                }
            }

            for(int i = 0; i < n; ++i)
            {
                if(q.empty()) return -1; // 有环存在

                int u = q.front();
                q.pop();
                res = max(res, dp[u]);

                for(int v : adj[u])
                {
                    dp[v] = max(dp[v], (c - 'a' == colors[v] - 'a') + dp[u]);
                    in2[v]--;
                    if(in2[v] == 0)
                    {
                        q.push(v);
                    }
                }
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/sorting-the-sentence/

A sentence is a list of words that are separated by a single space with no leading or trailing spaces. Each word consists of lowercase and uppercase English letters.

A sentence can be shuffled by appending the 1-indexed word position to each word then rearranging the words in the sentence.

For example, the sentence "This is a sentence" can be shuffled as "sentence4 a3 is2 This1" or "is2 sentence4 This1 a3".
Given a shuffled sentence s containing no more than 9 words, reconstruct and return the original sentence.

 

Example 1:

Input: s = "is2 sentence4 This1 a3"
Output: "This is a sentence"
Explanation: Sort the words in s to their original positions "This1 is2 a3 sentence4", then remove the numbers.
Example 2:

Input: s = "Myself2 Me1 I4 and3"
Output: "Me Myself and I"
Explanation: Sort the words in s to their original positions "Me1 Myself2 and3 I4", then remove the numbers.
 

Constraints:

2 <= s.length <= 200
s consists of lowercase and uppercase English letters, spaces, and digits from 1 to 9.
The number of words in s is between 1 and 9.
The words in s are separated by a single space.
s contains no leading or trailing spaces.

class Solution
{
public:
    string sortSentence(string s)
    {
        vector<string> vec;
        vec.reserve(10);
        stringstream ss(s);
        string t;
        while (ss >> t) vec.emplace_back(std::move(t));
        string arr[10];
        for (auto &str : vec)
        {
            auto ch = str.back();
            str.pop_back();
            arr[ch - '0'] = str;
        }
        string ans = "";
        for(auto &str : arr)
        {
            if (str.length() == 0) continue;
            ans += str;
            ans += " ";
        }
        ans.pop_back();
        return ans;
    }
};


// Source https://leetcode.com/problems/incremental-memory-leak/

You are given two integers memory1 and memory2 representing the available memory in bits on two memory sticks. 
There is currently a faulty program running that consumes an increasing amount of memory every second.

At the ith second (starting from 1), i bits of memory are allocated to the stick with more available memory (or from the first memory stick if both have the same available memory). 
If neither stick has at least i bits of available memory, the program crashes.

Return an array containing [crashTime, memory1crash, memory2crash], where crashTime is the time (in seconds) when the program crashed and memory1crash and memory2crash are the available bits of memory in the first and second sticks respectively.

 

Example 1:

Input: memory1 = 2, memory2 = 2
Output: [3,1,0]
Explanation: The memory is allocated as follows:
- At the 1st second, 1 bit of memory is allocated to stick 1. The first stick now has 1 bit of available memory.
- At the 2nd second, 2 bits of memory are allocated to stick 2. The second stick now has 0 bits of available memory.
- At the 3rd second, the program crashes. The sticks have 1 and 0 bits available respectively.
Example 2:

Input: memory1 = 8, memory2 = 11
Output: [6,0,4]
Explanation: The memory is allocated as follows:
- At the 1st second, 1 bit of memory is allocated to stick 2. The second stick now has 10 bit of available memory.
- At the 2nd second, 2 bits of memory are allocated to stick 2. The second stick now has 8 bits of available memory.
- At the 3rd second, 3 bits of memory are allocated to stick 1. The first stick now has 5 bits of available memory.
- At the 4th second, 4 bits of memory are allocated to stick 2. The second stick now has 4 bits of available memory.
- At the 5th second, 5 bits of memory are allocated to stick 1. The first stick now has 0 bits of available memory.
- At the 6th second, the program crashes. The sticks have 0 and 4 bits available respectively.
 

Constraints:

0 <= memory1, memory2 <= 231 - 1

class Solution 
{
public:
    vector<int> memLeak(int memory1, int memory2) 
    {
        int i=1;
        while(i<=memory1 || i<=memory2)
        {
            if(memory1>=memory2)
            {
                memory1-=i;
            }
            else
            {
                memory2-=i;
            }
            i++;
        }
        return {i,memory1,memory2};
    }
};


// Source https://leetcode.com/problems/rotating-the-box/

You are given an m x n matrix of characters box representing a side-view of a box. Each cell of the box is one of the following:

A stone '#'
A stationary obstacle '*'
Empty '.'
The box is rotated 90 degrees clockwise, causing some of the stones to fall due to gravity. Each stone falls down until it lands on an obstacle, another stone, or the bottom of the box. 
Gravity does not affect the obstacles' positions, and the inertia from the box's rotation does not affect the stones' horizontal positions.

It is guaranteed that each stone in box rests on an obstacle, another stone, or the bottom of the box.

Return an n x m matrix representing the box after the rotation described above.

 

Example 1:



Input: box = [["#",".","#"]]
Output: [["."],
         ["#"],
         ["#"]]
Example 2:



Input: box = [["#",".","*","."],
              ["#","#","*","."]]
Output: [["#","."],
         ["#","#"],
         ["*","*"],
         [".","."]]
Example 3:



Input: box = [["#","#","*",".","*","."],
              ["#","#","#","*",".","."],
              ["#","#","#",".","#","."]]
Output: [[".","#","#"],
         [".","#","#"],
         ["#","#","*"],
         ["#","*","."],
         ["#",".","*"],
         ["#",".","."]]
 

Constraints:

m == box.length
n == box[i].length
1 <= m, n <= 500
box[i][j] is either '#', '*', or '.'.

class Solution
{
public:
    vector<vector<char>> rotateTheBox(vector<vector<char>> &box)
    {
        int n = box.size();
        int m = box[0].size();
        vector<vector<char>>vec(m, vector<char>(n, '.'));

        for(int i = 0; i < n; i++)
        {
            for(int j = m - 1; j >= 0; j--)
            {
                if (box[i][j] == '.') continue;
                if (box[i][j] == '*')
                {
                    vec[j][n - 1 - i] = '*';
                    continue;
                }
                int k = j + 1;
                while(k < m && box[i][k] == '.')
                {
                    k++;
                }
                box[i][j] = '.';
                box[i][k - 1] = '#';
                vec[k - 1][n - 1 - i] = '#';
            }
        }
        return vec;
    }
};



// Source https://leetcode.com/problems/sum-of-floored-pairs/

Given an integer array nums, return the sum of floor(nums[i] / nums[j]) for all pairs of indices 0 <= i, j < nums.length in the array. Since the answer may be too large, return it modulo 109 + 7.

The floor() function returns the integer part of the division.

 

Example 1:

Input: nums = [2,5,9]
Output: 10
Explanation:
floor(2 / 5) = floor(2 / 9) = floor(5 / 9) = 0
floor(2 / 2) = floor(5 / 5) = floor(9 / 9) = 1
floor(5 / 2) = 2
floor(9 / 2) = 4
floor(9 / 5) = 1
We calculate the floor of the division for every pair of indices in the array then sum them up.
Example 2:

Input: nums = [7,7,7,7,7,7,7]
Output: 49
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 105

class Solution
{
public:
    int sumOfFlooredPairs(vector<int> &nums)
    {
        const int mod = 1e9 + 7;
        vector<int> freq(1e5 + 1, 0);
        int mxVal = 0;
        for (auto val : nums)
        {
            mxVal = max(val, mxVal);
            ++freq[val];
        }

        vector<int> prefix_freq(mxVal + 1, 0);
        prefix_freq[0] = freq[0];
        for (int i = 1; i <= mxVal; i++)
            prefix_freq[i] = prefix_freq[i - 1] + freq[i];

        long res = 0;
        for (int den = 1; den <= mxVal; ++den)
        {
            if (!freq[den])
                continue;

            long mul = 1;
            int n0 = den;
            int n1 = 2 * den - 1;
            while (n0 <= mxVal)
            {
                int f0 = prefix_freq[n0 - 1];
                int f1 = prefix_freq[min(mxVal, n1)];

                res += mul * freq[den] * (f1 - f0);
                res %= mod;

                ++mul;
                n0 += den;
                n1 += den;
            }
        }

        return res;
    }
};


// Source https://leetcode.com/problems/sum-of-all-subset-xor-totals/

The XOR total of an array is defined as the bitwise XOR of all its elements, or 0 if the array is empty.

For example, the XOR total of the array [2,5,6] is 2 XOR 5 XOR 6 = 1.
Given an array nums, return the sum of all XOR totals for every subset of nums. 

Note: Subsets with the same elements should be counted multiple times.

An array a is a subset of an array b if a can be obtained from b by deleting some (possibly zero) elements of b.

 

Example 1:

Input: nums = [1,3]
Output: 6
Explanation: The 4 subsets of [1,3] are:
- The empty subset has an XOR total of 0.
- [1] has an XOR total of 1.
- [3] has an XOR total of 3.
- [1,3] has an XOR total of 1 XOR 3 = 2.
0 + 1 + 3 + 2 = 6
Example 2:

Input: nums = [5,1,6]
Output: 28
Explanation: The 8 subsets of [5,1,6] are:
- The empty subset has an XOR total of 0.
- [5] has an XOR total of 5.
- [1] has an XOR total of 1.
- [6] has an XOR total of 6.
- [5,1] has an XOR total of 5 XOR 1 = 4.
- [5,6] has an XOR total of 5 XOR 6 = 3.
- [1,6] has an XOR total of 1 XOR 6 = 7.
- [5,1,6] has an XOR total of 5 XOR 1 XOR 6 = 2.
0 + 5 + 1 + 6 + 4 + 3 + 7 + 2 = 28
Example 3:

Input: nums = [3,4,5,6,7,8]
Output: 480
Explanation: The sum of all XOR totals for every subset is 480.
 

Constraints:

1 <= nums.length <= 12
1 <= nums[i] <= 20

class Solution
{
public:
    int n;
    int res;

    void generateSubsets(int i, vector<int> &nums, vector<int> &subset)
    {
        if(i >= n)
        {
            int xOR = 0;
            for(auto val : subset)
            {
                xOR = xOR ^ val;
            }
            res += xOR;
            return ;
        }
        subset.push_back(nums[i]);
        generateSubsets(i + 1, nums, subset);
        subset.pop_back();
        generateSubsets(i + 1, nums, subset);
    }

    int subsetXORSum(vector<int> &nums)
    {
        n = nums.size();
        res = 0;
        vector<int> subset;
        generateSubsets(0, nums, subset);
        return res;
    }
};


// Source https://leetcode.com/problems/minimum-number-of-swaps-to-make-the-binary-string-alternating/

Given a binary string s, return the minimum number of character swaps to make it alternating, or -1 if it is impossible.

The string is called alternating if no two adjacent characters are equal. For example, the strings "010" and "1010" are alternating, while the string "0100" is not.

Any two characters may be swapped, even if they are not adjacent.

 

Example 1:

Input: s = "111000"
Output: 1
Explanation: Swap positions 1 and 4: "111000" -> "101010"
The string is now alternating.
Example 2:

Input: s = "010"
Output: 0
Explanation: The string is already alternating, no swaps are needed.
Example 3:

Input: s = "1110"
Output: -1
 

Constraints:

1 <= s.length <= 1000
s[i] is either '0' or '1'.

class Solution
{
public:

    string getString(char c, int len)
    {
        string str = string(len, c);
        if (c == '1')
            c = '0';
        else
            c = '1';

        for (int i = 1; i < len; i += 2)
        {
            str[i] = c;
        }

        return str;
    }

    int diff(string &str, string &str2)
    {
        int len = str.size();
        int res = 0;
        for (int i = 0; i < len; i++)
        {
            if (str[i] != str2[i])
                res++;
        }
        return res;
    }

    int minSwaps(string s)
    {
        int len = s.size();
        int zeros = 0;
        int ones = 0;
        for (auto ch : s)
        {
            if (ch == '1')
                ones++;
            else
                zeros++;
        }

        if (abs(ones - zeros) > 1)
            return -1;

        auto str = getString('1', len);
        auto str2 = getString('0', len);

        auto d = diff(str, s);
        auto d2 = diff(str2, s);

        if (d % 2 == 1 && d2 % 2 == 1)
            return -1;

        if (d % 2 == 0 && d2 % 2 == 0)
            return min(d / 2, d2 / 2);
        else if (d % 2 == 0)
            return d / 2;
        else
            return d2 / 2;
    }
};


// Source https://leetcode.com/problems/finding-pairs-with-a-certain-sum/

You are given two integer arrays nums1 and nums2. You are tasked to implement a data structure that supports queries of two types:

Add a positive integer to an element of a given index in the array nums2.
Count the number of pairs (i, j) such that nums1[i] + nums2[j] equals a given value (0 <= i < nums1.length and 0 <= j < nums2.length).
Implement the FindSumPairs class:

FindSumPairs(int[] nums1, int[] nums2) Initializes the FindSumPairs object with two integer arrays nums1 and nums2.
void add(int index, int val) Adds val to nums2[index], i.e., apply nums2[index] += val.
int count(int tot) Returns the number of pairs (i, j) such that nums1[i] + nums2[j] == tot.
 

Example 1:

Input
["FindSumPairs", "count", "add", "count", "count", "add", "add", "count"]
[[[1, 1, 2, 2, 2, 3], [1, 4, 5, 2, 5, 4]], [7], [3, 2], [8], [4], [0, 1], [1, 1], [7]]
Output
[null, 8, null, 2, 1, null, null, 11]

Explanation
FindSumPairs findSumPairs = new FindSumPairs([1, 1, 2, 2, 2, 3], [1, 4, 5, 2, 5, 4]);
findSumPairs.count(7);  // return 8; pairs (2,2), (3,2), (4,2), (2,4), (3,4), (4,4) make 2 + 5 and pairs (5,1), (5,5) make 3 + 4
findSumPairs.add(3, 2); // now nums2 = [1,4,5,4,5,4]
findSumPairs.count(8);  // return 2; pairs (5,2), (5,4) make 3 + 5
findSumPairs.count(4);  // return 1; pair (5,0) makes 3 + 1
findSumPairs.add(0, 1); // now nums2 = [2,4,5,4,5,4]
findSumPairs.add(1, 1); // now nums2 = [2,5,5,4,5,4]
findSumPairs.count(7);  // return 11; pairs (2,1), (2,2), (2,4), (3,1), (3,2), (3,4), (4,1), (4,2), (4,4) make 2 + 5 and pairs (5,3), (5,5) make 3 + 4
 

Constraints:

1 <= nums1.length <= 1000
1 <= nums2.length <= 105
1 <= nums1[i] <= 109
1 <= nums2[i] <= 105
0 <= index < nums2.length
1 <= val <= 105
1 <= tot <= 109
At most 1000 calls are made to add and count each.

class FindSumPairs
{
public:
    vector<int> arr1;
    unordered_map<int, int> ump1;
    vector<int> arr2;
    unordered_map<int, int> ump2;

    FindSumPairs(vector<int> &nums1, vector<int> &nums2)
    {
        arr1 = nums1;
        arr2 = nums2;
        for(auto x : nums1)
        {
            ump1[x]++;
        }
        for(auto y : nums2)
        {
            ump2[y]++;
        }
    }

    void add(int index, int val)
    {
        ump2[arr2[index]]--;
        arr2[index] += val;
        ump2[arr2[index]]++;
    }

    int count(int tot)
    {
        int ans = 0;
        for(auto x : ump1)
        {
            if(x.first > tot)
                continue;
            int other = tot - x.first;
            if(ump2.count(other))
            {
                ans += (ump1[x.first] * ump2[other]);
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/number-of-ways-to-rearrange-sticks-with-k-sticks-visible/

There are n uniquely-sized sticks whose lengths are integers from 1 to n. You want to arrange the sticks such that exactly k sticks are visible from the left. 
A stick is visible from the left if there are no longer sticks to the left of it.

For example, if the sticks are arranged [1,3,2,5,4], then the sticks with lengths 1, 3, and 5 are visible from the left.
Given n and k, return the number of such arrangements. Since the answer may be large, return it modulo 109 + 7.

 

Example 1:

Input: n = 3, k = 2
Output: 3
Explanation: [1,3,2], [2,3,1], and [2,1,3] are the only arrangements such that exactly 2 sticks are visible.
The visible sticks are underlined.
Example 2:

Input: n = 5, k = 5
Output: 1
Explanation: [1,2,3,4,5] is the only arrangement such that all 5 sticks are visible.
The visible sticks are underlined.
Example 3:

Input: n = 20, k = 11
Output: 647427950
Explanation: There are 647427950 (mod 109 + 7) ways to rearrange the sticks such that exactly 11 sticks are visible.
 

Constraints:

1 <= n <= 1000
1 <= k <= n

dp[i][j]表示当前剩余i个sticks，高度分别为n-i+1, n-i+2, n-i+3, ... n，从左能够看到j个棍子的方案数目。
先考虑高度小的stick放哪个位置，再考虑高度大的stick放哪个位置
高度n-i+1的stick如果放在剩余可用位置的最左边，则它肯定可以被看到，因为它比先前已经放好的stick高度都大，
问题转化为剩余i-1个sticks，高度分别为n-i+2, n-i+3, ... n，从左能够看到j-1个棍子的方案数目。
高度n-i+1的stick如果放在剩余可用位置的其他位置(有i-1个)，此时剩余可用位置的最左边放的stick高度 in [n-i+2, n-i+3, ... n]，
这样高度n-i+1的stick就不会被看到（会被高度最左边放的stick挡住），问题转化为剩余i-1个sticks，高度分别为n-i+2, n-i+3, ... n，从左能够看到j个棍子的方案数目。

class Solution
{
public:
    long dp[1001][1001];
    const long mod = 1e9 + 7;
    
    long recur(int i, int j)
    {
        if(j > i) return 0;
        if(j == i) return 1;
        if(j == 0) return 0;
        if(dp[i][j] != -1) return dp[i][j];
        long res = recur(i - 1, j - 1);
        res = (res + ((i - 1) * recur(i - 1, j)) % mod) % mod;
        return dp[i][j] = res;
    }

    int rearrangeSticks(int n, int k)
    {
        memset(dp, -1, sizeof(dp));
        return recur(n, k);
    }
};


// Source https://leetcode.com/problems/longer-contiguous-segments-of-ones-than-zeros/

Given a binary string s, return true if the longest contiguous segment of 1's is strictly longer than the longest contiguous segment of 0's in s, or return false otherwise.

For example, in s = "110100010" the longest continuous segment of 1s has length 2, and the longest continuous segment of 0s has length 3.
Note that if there are no 0's, then the longest continuous segment of 0's is considered to have a length 0. The same applies if there is no 1's.

 

Example 1:

Input: s = "1101"
Output: true
Explanation:
The longest contiguous segment of 1s has length 2: "1101"
The longest contiguous segment of 0s has length 1: "1101"
The segment of 1s is longer, so return true.
Example 2:

Input: s = "111000"
Output: false
Explanation:
The longest contiguous segment of 1s has length 3: "111000"
The longest contiguous segment of 0s has length 3: "111000"
The segment of 1s is not longer, so return false.
Example 3:

Input: s = "110100010"
Output: false
Explanation:
The longest contiguous segment of 1s has length 2: "110100010"
The longest contiguous segment of 0s has length 3: "110100010"
The segment of 1s is not longer, so return false.
 

Constraints:

1 <= s.length <= 100
s[i] is either '0' or '1'.

class Solution
{
public:
    bool checkZeroOnes(string s)
    {
        int n = s.length();
        int m0 = 0;
        int cnt0 = 0;
        int m1 = 0;
        int cnt1 = 0;
        for(int i = 0; i < n; i++)
        {
            if(s[i] == '0')
            {
                cnt0++;
                cnt1 = 0;
            }
            else
            {
                cnt1++;
                cnt0 = 0;
            }
            m0 = max(m0, cnt0);
            m1 = max(m1, cnt1);
        }
        if(m1 > m0) return true;
        return false;
    }
};


// Source https://leetcode.com/problems/minimum-speed-to-arrive-on-time/

You are given a floating-point number hour, representing the amount of time you have to reach the office. 
To commute to the office, you must take n trains in sequential order. You are also given an integer array dist of length n, where dist[i] describes the distance (in kilometers) of the ith train ride.

Each train can only depart at an integer hour, so you may need to wait in between each train ride.

For example, if the 1st train ride takes 1.5 hours, you must wait for an additional 0.5 hours before you can depart on the 2nd train ride at the 2 hour mark.
Return the minimum positive integer speed (in kilometers per hour) that all the trains must travel at for you to reach the office on time, or -1 if it is impossible to be on time.

Tests are generated such that the answer will not exceed 107 and hour will have at most two digits after the decimal point.

 

Example 1:

Input: dist = [1,3,2], hour = 6
Output: 1
Explanation: At speed 1:
- The first train ride takes 1/1 = 1 hour.
- Since we are already at an integer hour, we depart immediately at the 1 hour mark. The second train takes 3/1 = 3 hours.
- Since we are already at an integer hour, we depart immediately at the 4 hour mark. The third train takes 2/1 = 2 hours.
- You will arrive at exactly the 6 hour mark.
Example 2:

Input: dist = [1,3,2], hour = 2.7
Output: 3
Explanation: At speed 3:
- The first train ride takes 1/3 = 0.33333 hours.
- Since we are not at an integer hour, we wait until the 1 hour mark to depart. The second train ride takes 3/3 = 1 hour.
- Since we are already at an integer hour, we depart immediately at the 2 hour mark. The third train takes 2/3 = 0.66667 hours.
- You will arrive at the 2.66667 hour mark.
Example 3:

Input: dist = [1,3,2], hour = 1.9
Output: -1
Explanation: It is impossible because the earliest the third train can depart is at the 2 hour mark.
 

Constraints:

n == dist.length
1 <= n <= 105
1 <= dist[i] <= 105
1 <= hour <= 109
There will be at most two digits after the decimal point in hour.

class Solution
{
public:

    bool helper(vector<int> &dist, double hour, int speed)
    {
        double time = 0;
        for (auto d : dist)
        {
            time = ceil(time);
            time +=  (double) d / speed;
            if (time > hour) return false;
        }
        return true;
    }

    int minSpeedOnTime(vector<int> &dist, double hour)
    {
        int n = dist.size();
        if(hour <= (n - 1)) return -1;
        int l = 1, r = 1e7;
        while(l < r)
        {
            int mid = l + (r - l) / 2;
            if(helper(dist, hour, mid))
            {
                r = mid;
            }
            else
            {
                l = mid + 1;
            }
        }
        return l;
    }
};


// Source https://leetcode.com/problems/jump-game-vii/

You are given a 0-indexed binary string s and two integers minJump and maxJump. In the beginning, you are standing at index 0, which is equal to '0'. 
You can move from index i to index j if the following conditions are fulfilled:

i + minJump <= j <= min(i + maxJump, s.length - 1), and
s[j] == '0'.
Return true if you can reach index s.length - 1 in s, or false otherwise.

 

Example 1:

Input: s = "011010", minJump = 2, maxJump = 3
Output: true
Explanation:
In the first step, move from index 0 to index 3. 
In the second step, move from index 3 to index 5.
Example 2:

Input: s = "01101110", minJump = 2, maxJump = 3
Output: false
 

Constraints:

2 <= s.length <= 105
s[i] is either '0' or '1'.
s[0] == '0'
1 <= minJump <= maxJump < s.length

class Solution
{
public:
    bool canReach(string s, int minJump, int maxJump)
    {
        int n = s.length();
        if(s[n - 1] == '1')
            return false;
        if(n == 1)
            return true;
        deque<int> dq;
        dq.push_back(0);
        for(int i = 1; i < n; i++)
        {
            if(s[i] == '0')
            {
                while(!dq.empty() && dq.front() + maxJump < i) dq.pop_front();
                if(!dq.empty() && dq.front() + minJump <= i) dq.push_back(i);
            }
        }
        return !dq.empty() && dq.back() == n - 1;
    }
};


// Source https://leetcode.com/problems/stone-game-viii/

Alice and Bob take turns playing a game, with Alice starting first.

There are n stones arranged in a row. On each player's turn, while the number of stones is more than one, they will do the following:

Choose an integer x > 1, and remove the leftmost x stones from the row.
Add the sum of the removed stones' values to the player's score.
Place a new stone, whose value is equal to that sum, on the left side of the row.
The game stops when only one stone is left in the row.

The score difference between Alice and Bob is (Alice's score - Bob's score). Alice's goal is to maximize the score difference, and Bob's goal is the minimize the score difference.

Given an integer array stones of length n where stones[i] represents the value of the ith stone from the left, return the score difference between Alice and Bob if they both play optimally.

 

Example 1:

Input: stones = [-1,2,-3,4,-5]
Output: 5
Explanation:
- Alice removes the first 4 stones, adds (-1) + 2 + (-3) + 4 = 2 to her score, and places a stone of
  value 2 on the left. stones = [2,-5].
- Bob removes the first 2 stones, adds 2 + (-5) = -3 to his score, and places a stone of value -3 on
  the left. stones = [-3].
The difference between their scores is 2 - (-3) = 5.
Example 2:

Input: stones = [7,-6,5,10,5,-2,-6]
Output: 13
Explanation:
- Alice removes all stones, adds 7 + (-6) + 5 + 10 + 5 + (-2) + (-6) = 13 to her score, and places a
  stone of value 13 on the left. stones = [13].
The difference between their scores is 13 - 0 = 13.
Example 3:

Input: stones = [-10,-12]
Output: -22
Explanation:
- Alice can only make one move, which is to remove both stones. She adds (-10) + (-12) = -22 to her
  score and places a stone of value -22 on the left. stones = [-22].
The difference between their scores is (-22) - 0 = -22.
 

Constraints:

n == stones.length
2 <= n <= 105
-104 <= stones[i] <= 104

class Solution
{
public:
    int n;
    vector<long> dp;

    int stoneGameVIII(vector<int> &stones)
    {
        n = stones.size();
        dp.resize(n + 1, -1e16);
        vector<long> prefix(n, 0);
        prefix[0] = stones[0];
        for(int i = 1; i < n; i++)
            prefix[i] = prefix[i - 1] + stones[i];
        return solve(1, prefix);
    }

    long solve(int i, vector<long> &prefix)
    {
        if(i == n - 1) return prefix[i];
        if(dp[i] != -1e16) return dp[i];
        long res = -1e16;
        res = max(res, prefix[i] - solve(i + 1, prefix));
        res = max(res, solve(i + 1, prefix));
        return dp[i] = res;
    }
};


// Source https://leetcode.com/problems/substrings-of-size-three-with-distinct-characters/

A string is good if there are no repeated characters.

Given a string s​​​​​, return the number of good substrings of length three in s​​​​​​.

Note that if there are multiple occurrences of the same substring, every occurrence should be counted.

A substring is a contiguous sequence of characters in a string.

 

Example 1:

Input: s = "xyzzaz"
Output: 1
Explanation: There are 4 substrings of size 3: "xyz", "yzz", "zza", and "zaz". 
The only good substring of length 3 is "xyz".
Example 2:

Input: s = "aababcabc"
Output: 4
Explanation: There are 7 substrings of size 3: "aab", "aba", "bab", "abc", "bca", "cab", and "abc".
The good substrings are "abc", "bca", "cab", and "abc".
 

Constraints:

1 <= s.length <= 100
s​​​​​​ consists of lowercase English letters.

class Solution
{
public:

    int countGoodSubstrings(string s)
    {
        int n = s.length();
        if(n < 3) return 0;
        int res = 0;
        for(int i = 0 ; i < n - 2 ; ++i)
        {
            if(s[i] != s[i + 1] && s[i + 1] != s[i + 2] && s[i] != s[i + 2] )
            {
                ++res;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/minimize-maximum-pair-sum-in-array/

The pair sum of a pair (a,b) is equal to a + b. The maximum pair sum is the largest pair sum in a list of pairs.

For example, if we have pairs (1,5), (2,3), and (4,4), the maximum pair sum would be max(1+5, 2+3, 4+4) = max(6, 5, 8) = 8.
Given an array nums of even length n, pair up the elements of nums into n / 2 pairs such that:

Each element of nums is in exactly one pair, and
The maximum pair sum is minimized.
Return the minimized maximum pair sum after optimally pairing up the elements.

 

Example 1:

Input: nums = [3,5,2,3]
Output: 7
Explanation: The elements can be paired up into pairs (3,3) and (5,2).
The maximum pair sum is max(3+3, 5+2) = max(6, 7) = 7.
Example 2:

Input: nums = [3,5,4,2,4,6]
Output: 8
Explanation: The elements can be paired up into pairs (3,5), (4,4), and (6,2).
The maximum pair sum is max(3+5, 4+4, 6+2) = max(8, 8, 8) = 8.
 
Constraints:

n == nums.length
2 <= n <= 105
n is even.
1 <= nums[i] <= 105

class Solution
{
public:
    int minPairSum(vector<int> &nums)
    {
        int n = nums.size();
        sort(nums.begin(), nums.end());
        int res = 0;
        for(int i = 0; i < n / 2; i++)
        {
            res = max(res, nums[i] + nums[n - 1 - i]);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/get-biggest-three-rhombus-sums-in-a-grid/

You are given an m x n integer matrix grid​​​.

A rhombus sum is the sum of the elements that form the border of a regular rhombus shape in grid​​​. 
The rhombus must have the shape of a square rotated 45 degrees with each of the corners centered in a grid cell. 
Below is an image of four valid rhombus shapes with the corresponding colored cells that should be included in each rhombus sum:


Note that the rhombus can have an area of 0, which is depicted by the purple rhombus in the bottom right corner.

Return the biggest three distinct rhombus sums in the grid in descending order. If there are less than three distinct values, return all of them.

 

Example 1:


Input: grid = [[3,4,5,1,3],[3,3,4,2,3],[20,30,200,40,10],[1,5,5,4,1],[4,3,2,2,5]]
Output: [228,216,211]
Explanation: The rhombus shapes for the three biggest distinct rhombus sums are depicted above.
- Blue: 20 + 3 + 200 + 5 = 228
- Red: 200 + 2 + 10 + 4 = 216
- Green: 5 + 200 + 4 + 2 = 211
Example 2:


Input: grid = [[1,2,3],[4,5,6],[7,8,9]]
Output: [20,9,8]
Explanation: The rhombus shapes for the three biggest distinct rhombus sums are depicted above.
- Blue: 4 + 2 + 6 + 8 = 20
- Red: 9 (area 0 rhombus in the bottom right corner)
- Green: 8 (area 0 rhombus in the bottom middle)
Example 3:

Input: grid = [[7,7,7]]
Output: [7]
Explanation: All three possible rhombus sums are the same, so return [7].
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 50
1 <= grid[i][j] <= 105

the rhombus can have an area of 0
grid[i][j]为菱形中心点，菱形长度可以为0，1，2，...

class Solution
{
public:
    vector<int> getBiggestThree(vector<vector<int>> &grid)
    {
        int m = grid.size();
        int n = grid[0].size();
        int max1 = 0, max2 = 0, max3 = 0;
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                int val = grid[i][j];
                if(val > max1)
                {
                    max3 = max2;
                    max2 = max1;
                    max1 = val;
                }
                else if(val > max2 && val < max1)
                {
                    max3 = max2;
                    max2 = val;
                }
                else if(val > max3 && val < max2)
                {
                    max3 = val;
                }
                if(i == 0 || j == 0 || i == m - 1 || j == n - 1) continue;
                int len = 1;
                while((i - len) >= 0 && (i + len) < m && (j - len) >= 0 && (j + len) < n)
                {
                    int sum = 0;
                    sum += grid[i + len][j];
                    sum += grid[i][j + len];
                    sum += grid[i - len][j];
                    sum += grid[i][j - len];
                    for(int k = 1; k < len; k++) // loop to get all the point along the edges
                    {
                        sum += grid[i + len - k][j + k]; //  从最低到最右
                        sum += grid[i - k][j + len - k];  // 从最右到最高
                        sum += grid[i - len + k][j - k];  // 从最高到最左
                        sum += grid[i + k][j - len + k]; // 从最左到最低
                    }
                    if(sum > max1)
                    {
                        max3 = max2;
                        max2 = max1;
                        max1 = sum;
                    }
                    else if(sum > max2 && sum < max1)
                    {
                        max3 = max2;
                        max2 = sum;
                    }
                    else if(sum > max3 && sum < max2)
                    {
                        max3 = sum;
                    }
                    ++len;
                }
            }
        }
        vector <int> ans;
        if (max1 != 0) ans.push_back(max1);
        if (max2 != 0) ans.push_back(max2);
        if (max3 != 0) ans.push_back(max3);
        return ans;
    }
};


// Source https://leetcode.com/problems/minimum-xor-sum-of-two-arrays/

You are given two integer arrays nums1 and nums2 of length n.

The XOR sum of the two integer arrays is (nums1[0] XOR nums2[0]) + (nums1[1] XOR nums2[1]) + ... + (nums1[n - 1] XOR nums2[n - 1]) (0-indexed).

For example, the XOR sum of [1,2,3] and [3,2,1] is equal to (1 XOR 3) + (2 XOR 2) + (3 XOR 1) = 2 + 0 + 2 = 4.
Rearrange the elements of nums2 such that the resulting XOR sum is minimized.

Return the XOR sum after the rearrangement.

 

Example 1:

Input: nums1 = [1,2], nums2 = [2,3]
Output: 2
Explanation: Rearrange nums2 so that it becomes [3,2].
The XOR sum is (1 XOR 3) + (2 XOR 2) = 2 + 0 = 2.
Example 2:

Input: nums1 = [1,0,3], nums2 = [5,3,4]
Output: 8
Explanation: Rearrange nums2 so that it becomes [5,4,3]. 
The XOR sum is (1 XOR 5) + (0 XOR 4) + (3 XOR 3) = 4 + 4 + 0 = 8.
 

Constraints:

n == nums1.length
n == nums2.length
1 <= n <= 14
0 <= nums1[i], nums2[i] <= 107

class Solution
{
public:
    int n;
    int dp[20][30000];

    int recur(vector<int> &nums1, vector<int> &nums2, int i, int mask)
    {
        if (i >= n) return 0;
        if(dp[i][mask] != -1) return dp[i][mask];
        int ans = INT_MAX;
        for(int j = 0; j < n; j++)
        {
            if(mask & (1 << j))
            {
                ans = min(ans, (nums1[i] ^ nums2[j]) + recur(nums1, nums2, i + 1, mask ^ (1 << j)));
            }
        }
        return dp[i][mask] = ans;
    }

    int minimumXORSum(vector<int> &nums1, vector<int> &nums2)
    {
        n = nums1.size();
        memset(dp, -1, sizeof(dp));
        int mask = (1 << n) - 1;
        return recur(nums1, nums2, 0, mask);
    }
};


// Source https://leetcode.com/problems/check-if-word-equals-summation-of-two-words/

The letter value of a letter is its position in the alphabet starting from 0 (i.e. 'a' -> 0, 'b' -> 1, 'c' -> 2, etc.).

The numerical value of some string of lowercase English letters s is the concatenation of the letter values of each letter in s, which is then converted into an integer.

For example, if s = "acb", we concatenate each letter's letter value, resulting in "021". After converting it, we get 21.
You are given three strings firstWord, secondWord, and targetWord, each consisting of lowercase English letters 'a' through 'j' inclusive.

Return true if the summation of the numerical values of firstWord and secondWord equals the numerical value of targetWord, or false otherwise.

 

Example 1:

Input: firstWord = "acb", secondWord = "cba", targetWord = "cdb"
Output: true
Explanation:
The numerical value of firstWord is "acb" -> "021" -> 21.
The numerical value of secondWord is "cba" -> "210" -> 210.
The numerical value of targetWord is "cdb" -> "231" -> 231.
We return true because 21 + 210 == 231.
Example 2:

Input: firstWord = "aaa", secondWord = "a", targetWord = "aab"
Output: false
Explanation: 
The numerical value of firstWord is "aaa" -> "000" -> 0.
The numerical value of secondWord is "a" -> "0" -> 0.
The numerical value of targetWord is "aab" -> "001" -> 1.
We return false because 0 + 0 != 1.
Example 3:

Input: firstWord = "aaa", secondWord = "a", targetWord = "aaaa"
Output: true
Explanation: 
The numerical value of firstWord is "aaa" -> "000" -> 0.
The numerical value of secondWord is "a" -> "0" -> 0.
The numerical value of targetWord is "aaaa" -> "0000" -> 0.
We return true because 0 + 0 == 0.
 

Constraints:

1 <= firstWord.length, secondWord.length, targetWord.length <= 8
firstWord, secondWord, and targetWord consist of lowercase English letters from 'a' to 'j' inclusive.

class Solution
{
public:
    int convertNum(string &word)
    {
        int res = 0;
        for (char c : word)
        {
            res = (res * 10) + (c - 'a');
        }
        return res;
    }

    bool isSumEqual(string firstWord, string secondWord, string targetWord)
    {
        return (convertNum(firstWord) + convertNum(secondWord)) == convertNum(targetWord);
    }
};


// Source https://leetcode.com/problems/maximum-value-after-insertion/

You are given a very large integer n, represented as a string,​​​​​​ and an integer digit x. The digits in n and the digit x are in the inclusive range [1, 9], and n may represent a negative number.

You want to maximize n's numerical value by inserting x anywhere in the decimal representation of n​​​​​​. You cannot insert x to the left of the negative sign.

For example, if n = 73 and x = 6, it would be best to insert it between 7 and 3, making n = 763.
If n = -55 and x = 2, it would be best to insert it before the first 5, making n = -255.
Return a string representing the maximum value of n​​​​​​ after the insertion.

 

Example 1:

Input: n = "99", x = 9
Output: "999"
Explanation: The result is the same regardless of where you insert 9.
Example 2:

Input: n = "-13", x = 2
Output: "-123"
Explanation: You can make n one of {-213, -123, -132}, and the largest of those three is -123.
 

Constraints:

1 <= n.length <= 105
1 <= x <= 9
The digits in n​​​ are in the range [1, 9].
n is a valid representation of an integer.
In the case of a negative n,​​​​​​ it will begin with '-'.

class Solution
{
public:
    string maxValue(string s, int x)
    {
        int n = s.length();
        if(s[0] == '-')
        {
            for(int i = 1; i < n; i++)
            {
                if(s[i] - '0' > x)
                {
                    return (s.substr(0, i) + (char)(x + '0') + s.substr(i));
                }
            }
            return (s + (char)(x + '0'));
        }
        for(int i = 0; i < n; i++)
        {
            if(s[i] - '0' < x)
            {
                return (s.substr(0, i) + (char)(x + '0') + s.substr(i));
            }
        }
        return (s + (char)(x + '0'));
    }
};


// Source https://leetcode.com/problems/process-tasks-using-servers/

You are given two 0-indexed integer arrays servers and tasks of lengths n​​​​​​ and m​​​​​​ respectively. 
servers[i] is the weight of the i​​​​​​th​​​​ server, and tasks[j] is the time needed to process the j​​​​​​th​​​​ task in seconds.

Tasks are assigned to the servers using a task queue. Initially, all servers are free, and the queue is empty.

At second j, the jth task is inserted into the queue (starting with the 0th task being inserted at second 0). 
As long as there are free servers and the queue is not empty, the task in the front of the queue will be assigned to a free server with the smallest weight, 
and in case of a tie, it is assigned to a free server with the smallest index.

If there are no free servers and the queue is not empty, we wait until a server becomes free and immediately assign the next task. 
If multiple servers become free at the same time, then multiple tasks from the queue will be assigned in order of insertion following the weight and index priorities above.

A server that is assigned task j at second t will be free again at second t + tasks[j].

Build an array ans​​​​ of length m, where ans[j] is the index of the server the j​​​​​​th task will be assigned to.

Return the array ans​​​​.

 

Example 1:

Input: servers = [3,3,2], tasks = [1,2,3,2,1,2]
Output: [2,2,0,2,1,2]
Explanation: Events in chronological order go as follows:
- At second 0, task 0 is added and processed using server 2 until second 1.
- At second 1, server 2 becomes free. Task 1 is added and processed using server 2 until second 3.
- At second 2, task 2 is added and processed using server 0 until second 5.
- At second 3, server 2 becomes free. Task 3 is added and processed using server 2 until second 5.
- At second 4, task 4 is added and processed using server 1 until second 5.
- At second 5, all servers become free. Task 5 is added and processed using server 2 until second 7.
Example 2:

Input: servers = [5,1,4,3,2], tasks = [2,1,2,4,5,2,1]
Output: [1,4,1,4,1,3,2]
Explanation: Events in chronological order go as follows: 
- At second 0, task 0 is added and processed using server 1 until second 2.
- At second 1, task 1 is added and processed using server 4 until second 2.
- At second 2, servers 1 and 4 become free. Task 2 is added and processed using server 1 until second 4. 
- At second 3, task 3 is added and processed using server 4 until second 7.
- At second 4, server 1 becomes free. Task 4 is added and processed using server 1 until second 9. 
- At second 5, task 5 is added and processed using server 3 until second 7.
- At second 6, task 6 is added and processed using server 2 until second 7.
 

Constraints:

servers.length == n
tasks.length == m
1 <= n, m <= 2 * 105
1 <= servers[i], tasks[j] <= 2 * 105


class Solution
{
public:

    struct Task
    {
        int id;
        int time_needed;
        Task(int id, int time_needed) : id(id), time_needed(time_needed) {}
    };

    struct Server
    {
        int id;
        int weight;
        int available_time;
        Server(int id, int weight) : id(id), weight(weight), available_time(-1) {}

        void schedule_task(Task task, int curr_time)
        {
            available_time = curr_time + task.time_needed;
        }
    };

    struct WeightComparator
    {
        bool operator()(Server const &lhs, Server const &rhs)
        {
            if (lhs.weight == rhs.weight) return lhs.id > rhs.id;
            return (lhs.weight > rhs.weight);
        }
    };

    struct AvailableComparator
    {
        bool operator()(Server const &lhs, Server const &rhs)
        {
            return (lhs.available_time > rhs.available_time);
        }
    };

    vector<int> assignTasks(vector<int> &servers, vector<int> &tasks)
    {
        int total_tasks = tasks.size();
        vector<int> ans(total_tasks, -1);
        priority_queue<Server, vector<Server>, WeightComparator> free_servers;
        priority_queue<Server, vector<Server>, AvailableComparator> busy_servers;
        queue<Task> task_queue;
        for (int i = 0; i < servers.size(); i++)
        {
            free_servers.push(Server{i, servers[i]});
        }
        int task_id = 0;
        int curr_time = 0;
        while (task_id < total_tasks || !task_queue.empty())
        {
            while (!busy_servers.empty() && busy_servers.top().available_time <= curr_time)
            {
                Server server = busy_servers.top();
                busy_servers.pop();
                free_servers.push(server);
            }
            while (!task_queue.empty() && !free_servers.empty())
            {
                Server server = free_servers.top();
                free_servers.pop();
                Task task = task_queue.front();
                task_queue.pop();
                server.schedule_task(task, curr_time);
                busy_servers.push(server);
                ans[task.id] = server.id;
            }
            if (task_id < total_tasks)
            {
                task_queue.push(Task{task_id, tasks[task_id]});
                ++task_id;
                ++curr_time;
            }
            else
            {
                curr_time = busy_servers.top().available_time;
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/minimum-skips-to-arrive-at-meeting-on-time/

You are given an integer hoursBefore, the number of hours you have to travel to your meeting. To arrive at your meeting, you have to travel through n roads. 
The road lengths are given as an integer array dist of length n, where dist[i] describes the length of the ith road in kilometers. 
In addition, you are given an integer speed, which is the speed (in km/h) you will travel at.

After you travel road i, you must rest and wait for the next integer hour before you can begin traveling on the next road. 
Note that you do not have to rest after traveling the last road because you are already at the meeting.

For example, if traveling a road takes 1.4 hours, you must wait until the 2 hour mark before traveling the next road. If traveling a road takes exactly 2 hours, you do not need to wait.
However, you are allowed to skip some rests to be able to arrive on time, meaning you do not need to wait for the next integer hour. 
Note that this means you may finish traveling future roads at different hour marks.

For example, suppose traveling the first road takes 1.4 hours and traveling the second road takes 0.6 hours. 
Skipping the rest after the first road will mean you finish traveling the second road right at the 2 hour mark, letting you start traveling the third road immediately.
Return the minimum number of skips required to arrive at the meeting on time, or -1 if it is impossible.

 

Example 1:

Input: dist = [1,3,2], speed = 4, hoursBefore = 2
Output: 1
Explanation:
Without skipping any rests, you will arrive in (1/4 + 3/4) + (3/4 + 1/4) + (2/4) = 2.5 hours.
You can skip the first rest to arrive in ((1/4 + 0) + (3/4 + 0)) + (2/4) = 1.5 hours.
Note that the second rest is shortened because you finish traveling the second road at an integer hour due to skipping the first rest.
Example 2:

Input: dist = [7,3,5,5], speed = 2, hoursBefore = 10
Output: 2
Explanation:
Without skipping any rests, you will arrive in (7/2 + 1/2) + (3/2 + 1/2) + (5/2 + 1/2) + (5/2) = 11.5 hours.
You can skip the first and third rest to arrive in ((7/2 + 0) + (3/2 + 0)) + ((5/2 + 0) + (5/2)) = 10 hours.
Example 3:

Input: dist = [7,3,5,5], speed = 1, hoursBefore = 10
Output: -1
Explanation: It is impossible to arrive at the meeting on time even if you skip all the rests.
 

Constraints:

n == dist.length
1 <= n <= 1000
1 <= dist[i] <= 105
1 <= speed <= 106
1 <= hoursBefore <= 107


dp[i][j] 表示travel完成 前 i + 1 条路，dist[0] ... dist[i]，the number of skips 为 j，对应的distance最小值
After you travel road i, you must rest and wait for the next integer hour before you can begin traveling on the next road. 
you do not have to rest after traveling the last road because you are already at the meeting.
distance = speed * 总花费时间 （正常travel时间 + wait 时间）= speed的整数倍 + 余数（可能为0，也可能大于0）
j <= i，最多可以skip i 次
0th road 结束后可以 skip一次 直接开始 1th road，1th road 结束后可以 skip一次 直接开始 2th road，... , (i-1)th road 结束后可以 skip一次 直接开始 ith road

class Solution
{
public:
    long dp[1010][1010];

    long ll_ceil(long d, long speed)
    {
        if(d % speed == 0) return d;
        return d - d % speed + speed;
    }

    int minSkips(vector<int> &dist, int speed, int hoursBefore)
    {
        dp[0][0] = dist[0];
        int n = dist.size();
        for(int i = 1; i < n; i++)
        {
            long d = dist[i];
            // without skip, (i-1)th road 结束后先wait，再开始 ith road
            dp[i][0] = ll_ceil(dp[i - 1][0], speed) + d;
            // skip
            for(int j = 1; j <= i; j++)
            {
                long prev = 1e16;
                // (i-1)th road 结束后先wait，再开始 ith road
                if (j < i) prev = ll_ceil(dp[i - 1][j], speed) + d;
                // (i-1)th road 结束后skip一次 直接开始 ith road
                long curr = dp[i - 1][j - 1] + d;
                dp[i][j] = min(prev, curr);
            }
        }
        long target = (long)speed * (long)hoursBefore;
        for(int i = 0; i < n; i++)
        {
            if(dp[n - 1][i] <= target)
                return i;
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/egg-drop-with-2-eggs-and-n-floors/

You are given two identical eggs and you have access to a building with n floors labeled from 1 to n.

You know that there exists a floor f where 0 <= f <= n such that any egg dropped at a floor higher than f will break, and any egg dropped at or below floor f will not break.

In each move, you may take an unbroken egg and drop it from any floor x (where 1 <= x <= n). If the egg breaks, you can no longer use it. 
However, if the egg does not break, you may reuse it in future moves.

Return the minimum number of moves that you need to determine with certainty what the value of f is.

 

Example 1:

Input: n = 2
Output: 2
Explanation: We can drop the first egg from floor 1 and the second egg from floor 2.
If the first egg breaks, we know that f = 0.
If the second egg breaks but the first egg didn't, we know that f = 1.
Otherwise, if both eggs survive, we know that f = 2.
Example 2:

Input: n = 100
Output: 14
Explanation: One optimal strategy is:
- Drop the 1st egg at floor 9. If it breaks, we know f is between 0 and 8. Drop the 2nd egg starting from floor 1 and going up one at a time to find f within 8 more drops. Total drops is 1 + 8 = 9.
- If the 1st egg does not break, drop the 1st egg again at floor 22. If it breaks, we know f is between 9 and 21. Drop the 2nd egg starting from floor 10 and going up one at a time to find f within 12 more drops. Total drops is 2 + 12 = 14.
- If the 1st egg does not break again, follow a similar process dropping the 1st egg from floors 34, 45, 55, 64, 72, 79, 85, 90, 94, 97, 99, and 100.
Regardless of the outcome, it takes at most 14 drops to determine f.
 

Constraints:

1 <= n <= 1000

注意，题目求的是扔鸡蛋的次数

有K个鸡蛋，还有一栋共N层的大楼，有个临界点的层数F，任何鸡蛋在高于这个层数扔都会碎，低于等于这个层数就不会碎，
不管临界点的值是多少，我们都要能找到这个临界点，问最小需要多少操作，注意这里的操作只有当前还有没碎的鸡蛋才能进行。

dp[i][j] 表示当有i次操作，且有j个鸡蛋时能测出的最高的楼层，先使用1个鸡蛋测试第 dp[i-1][j-1]+1 层，有两种情况：

鸡蛋碎掉：剩余i-1次操作，j-1个鸡蛋，还可以测出 0, 1, 2, ..., dp[i-1][j-1] 。
鸡蛋没碎：那这个鸡蛋可以继续利用，此时可以测出 dp[i-1][j-1]+1, ..., dp[i-1][j-1]+1 + dp[i-1][j]
这样，通过i次操作和j个鸡蛋查找的层数范围是 [0, dp[i-1][j-1] + dp[i-1][j] + 1]，状态转移方程如下：

dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j] + 1

当 dp[i][K] 正好大于等于N的时候，i就是我们要求的最小操作次数了

在鸡蛋数足够的前提下
用1次操作，可以测出的临界点如下 0, 1
先在第1层扔鸡蛋

用2次操作，可以测出的临界点如下 0, 1, 2, 3
先在第2层扔鸡蛋，再在第1层，第3层扔鸡蛋

用3次操作，可以测出的临界点如下 0, 1, 2, 3, 4, 5, 6, 7
现在第4层扔鸡蛋，再在第2，6层扔鸡蛋，再在第1层，第3层，第5，7层扔鸡蛋

class Solution
{
public:

    int superEggDrop(int K, int N)
    {
        vector<int> dp(K + 1);
        int m = 0;
        while (dp[K] < N)
        {
            ++m;
            vector<int> temp(K + 1);
            for (int j = 1; j <= K; ++j)
            {
                temp[j] = dp[j - 1] + dp[j] + 1;
            }
            swap(dp, temp);
        }
        return m;
    }

    int twoEggDrop(int n)
    {
        return superEggDrop(2, n);
    }
};


// Source https://leetcode.com/problems/determine-whether-matrix-can-be-obtained-by-rotation/

Given two n x n binary matrices mat and target, return true if it is possible to make mat equal to target by rotating mat in 90-degree increments, or false otherwise.

 

Example 1:


Input: mat = [[0,1],[1,0]], target = [[1,0],[0,1]]
Output: true
Explanation: We can rotate mat 90 degrees clockwise to make mat equal target.
Example 2:


Input: mat = [[0,1],[1,1]], target = [[1,0],[0,1]]
Output: false
Explanation: It is impossible to make mat equal to target by rotating mat.
Example 3:


Input: mat = [[0,0,0],[0,1,0],[1,1,1]], target = [[1,1,1],[0,1,0],[0,0,0]]
Output: true
Explanation: We can rotate mat 90 degrees clockwise two times to make mat equal target.
 

Constraints:

n == mat.length == target.length
n == mat[i].length == target[i].length
1 <= n <= 10
mat[i][j] and target[i][j] are either 0 or 1.

class Solution
{
public:
    bool findRotation(vector<vector<int>> &mat, vector<vector<int>> &target)
    {
        int n = mat.size();
        if(mat == target)
        {
            return true;
        }
        vector<vector<int>> vec(n, vector<int>(n, 0));
        int num = 0;
        while(num < 3)
        {
            for(int i = 0; i < n; i++)
            {
                for(int j = 0; j < n; j++)
                {
                   vec[j][n - 1 - i] = mat[i][j];
                }
            }
            if(vec == target) return true;
            swap(mat, vec);
            num++;
        }
        return false;
    }
};


// Source https://leetcode.com/problems/reduction-operations-to-make-the-array-elements-equal/

Given an integer array nums, your goal is to make all elements in nums equal. To complete one operation, follow these steps:

Find the largest value in nums. Let its index be i (0-indexed) and its value be largest. If there are multiple elements with the largest value, pick the smallest i.
Find the next largest value in nums strictly smaller than largest. Let its value be nextLargest.
Reduce nums[i] to nextLargest.
Return the number of operations to make all elements in nums equal.

 

Example 1:

Input: nums = [5,1,3]
Output: 3
Explanation: It takes 3 operations to make all elements in nums equal:
1. largest = 5 at index 0. nextLargest = 3. Reduce nums[0] to 3. nums = [3,1,3].
2. largest = 3 at index 0. nextLargest = 1. Reduce nums[0] to 1. nums = [1,1,3].
3. largest = 3 at index 2. nextLargest = 1. Reduce nums[2] to 1. nums = [1,1,1].
Example 2:

Input: nums = [1,1,1]
Output: 0
Explanation: All elements in nums are already equal.
Example 3:

Input: nums = [1,1,2,2,3]
Output: 4
Explanation: It takes 4 operations to make all elements in nums equal:
1. largest = 3 at index 4. nextLargest = 2. Reduce nums[4] to 2. nums = [1,1,2,2,2].
2. largest = 2 at index 2. nextLargest = 1. Reduce nums[2] to 1. nums = [1,1,1,2,2].
3. largest = 2 at index 3. nextLargest = 1. Reduce nums[3] to 1. nums = [1,1,1,1,2].
4. largest = 2 at index 4. nextLargest = 1. Reduce nums[4] to 1. nums = [1,1,1,1,1].
 

Constraints:

1 <= nums.length <= 5 * 104
1 <= nums[i] <= 5 * 104

class Solution
{
public:
    int reductionOperations(vector<int> &nums)
    {
        sort(nums.begin(), nums.end());
        int n = nums.size();
        vector<int> cnt(n, 0);
        int count = 0;
        for (int i = 1; i < n; ++i)
        {
            if (nums[i] != nums[i-1]) ++count;
            cnt[i] = count;
        }
        int ans = accumulate(cnt.begin(), cnt.end(), 0);
        return ans;
    }
};


// Source https://leetcode.com/problems/minimum-number-of-flips-to-make-the-binary-string-alternating/

You are given a binary string s. You are allowed to perform two types of operations on the string in any sequence:

Type-1: Remove the character at the start of the string s and append it to the end of the string.
Type-2: Pick any character in s and flip its value, i.e., if its value is '0' it becomes '1' and vice-versa.
Return the minimum number of type-2 operations you need to perform such that s becomes alternating.

The string is called alternating if no two adjacent characters are equal.

For example, the strings "010" and "1010" are alternating, while the string "0100" is not.
 

Example 1:

Input: s = "111000"
Output: 2
Explanation: Use the first operation two times to make s = "100011".
Then, use the second operation on the third and sixth elements to make s = "101010".
Example 2:

Input: s = "010"
Output: 0
Explanation: The string is already alternating.
Example 3:

Input: s = "1110"
Output: 1
Explanation: Use the second operation on the second element to make s = "1010".
 

Constraints:

1 <= s.length <= 105
s[i] is either '0' or '1'.

p[i][0] 表示翻转s[0 ... i]中的若干个元素，使得翻转后s[0 ... i] alternating，且s[i]为'0'，对应的翻转次数
p[i][1] 表示翻转s[0 ... i]中的若干个元素，使得翻转后s[0 ... i] alternating，且s[i]为'1'，对应的翻转次数
s[i][0] 表示翻转s[i ... n-1]中的若干个元素，使得翻转后s[i ... n-1] alternating，且s[i]为'0'，对应的翻转次数
s[i][1] 表示翻转s[i ... n-1]中的若干个元素，使得翻转后s[i ... n-1] alternating，且s[i]为'1'，对应的翻转次数

1010 ... 10     长度为偶数，开始'1'与结尾'0'不同
1010 ... 101   长度为奇数，开始'1'与结尾'1'相同
0101 ... 01     长度为偶数，开始'0'与结尾'1'不同
0101 ... 010   长度为奇数，开始'0'与结尾'0'相同

class Solution
{
public:
    int minFlips(string t)
    {
        int n = t.length();
        int p[n][2], s[n][2];
        if(t[0] == '1')
        {
            p[0][0] = 1;
            p[0][1] = 0;
        }
        else
        {
            p[0][0] = 0;
            p[0][1] = 1;
        }
        for(int i = 1; i < n; i++)
        {
            if(t[i] == '1')
            {
                p[i][1] = p[i - 1][0];
                p[i][0] = 1 + p[i - 1][1];
            }
            else
            {
                p[i][0] = p[i - 1][1];
                p[i][1] = 1 + p[i - 1][0];
            }
        }

        if(t[n - 1] == '1')
        {
            s[n - 1][0] = 1;
            s[n - 1][1] = 0;
        }
        else
        {
            s[n - 1][1] = 1;
            s[n - 1][0] = 0;
        }

        for(int i = n - 2; i >= 0; i--)
        {
            if(t[i] == '1')
            {
                s[i][1] = s[i + 1][0];
                s[i][0] = 1 + s[i + 1][1];
            }
            else
            {
                s[i][0] = s[i + 1][1];
                s[i][1] = 1 + s[i + 1][0];
            }
        }

        int ans = min(s[0][0], s[0][1]);

        for(int i = 1; i < n; i++)
        {
            int part1 = s[i][1], part2 = s[i][0];
            if((n - i) % 2)
            {
                if(i % 2)
                {
                    ans = min({ans, part1 + p[i - 1][0]});   // 奇数长度 1010 ... 101 + 奇数长度 0101 ... 010
                    ans = min({ans, part2 + p[i - 1][1]});   // 奇数长度 0101 ... 010 + 奇数长度 1010 ... 101
                }
                else
                {
                    ans = min({ans, part1 + p[i - 1][1]});   // 奇数长度 1010 ... 101 + 偶数长度 0101 ... 01
                    ans = min({ans, part2 + p[i - 1][0]});   // 奇数长度 0101 ... 010 + 偶数长度 1010 ... 10
                }
            }
            else
            {
                if(i % 2)
                {
                    ans = min({ans, part1 + p[i - 1][1]});   // 偶数长度 1010 ... 10 + 奇数长度 1010 ... 101
                    ans = min({ans, part2 + p[i - 1][0]});   // 偶数长度 0101 ... 01 + 奇数长度 0101 ... 010
                }
                else
                {
                    ans = min({ans, part1 + p[i - 1][0]});   // 偶数长度 1010 ... 10 + 偶数长度 1010 ... 10
                    ans = min({ans, part2 + p[i - 1][1]});   // 偶数长度 0101 ... 01 + 偶数长度 0101 ... 01
                }
            }
        }

        return ans;
    }
};


// Source https://leetcode.com/problems/minimum-space-wasted-from-packaging/

You have n packages that you are trying to place in boxes, one package in each box. There are m suppliers that each produce boxes of different sizes (with infinite supply). 
A package can be placed in a box if the size of the package is less than or equal to the size of the box.

The package sizes are given as an integer array packages, where packages[i] is the size of the ith package. 
The suppliers are given as a 2D integer array boxes, where boxes[j] is an array of box sizes that the jth supplier produces.

You want to choose a single supplier and use boxes from them such that the total wasted space is minimized. 
For each package in a box, we define the space wasted to be size of the box - size of the package. The total wasted space is the sum of the space wasted in all the boxes.

For example, if you have to fit packages with sizes [2,3,5] and the supplier offers boxes of sizes [4,8], 
you can fit the packages of size-2 and size-3 into two boxes of size-4 and the package with size-5 into a box of size-8. This would result in a waste of (4-2) + (4-3) + (8-5) = 6.
Return the minimum total wasted space by choosing the box supplier optimally, or -1 if it is impossible to fit all the packages inside boxes. 
Since the answer may be large, return it modulo 109 + 7.

 

Example 1:

Input: packages = [2,3,5], boxes = [[4,8],[2,8]]
Output: 6
Explanation: It is optimal to choose the first supplier, using two size-4 boxes and one size-8 box.
The total waste is (4-2) + (4-3) + (8-5) = 6.
Example 2:

Input: packages = [2,3,5], boxes = [[1,4],[2,3],[3,4]]
Output: -1
Explanation: There is no box that the package of size 5 can fit in.
Example 3:

Input: packages = [3,5,8,10,11,12], boxes = [[12],[11,9],[10,5,14]]
Output: 9
Explanation: It is optimal to choose the third supplier, using two size-5 boxes, two size-10 boxes, and two size-14 boxes.
The total waste is (5-3) + (5-5) + (10-8) + (10-10) + (14-11) + (14-12) = 9.
 

Constraints:

n == packages.length
m == boxes.length
1 <= n <= 105
1 <= m <= 105
1 <= packages[i] <= 105
1 <= boxes[j].length <= 105
1 <= boxes[j][k] <= 105
sum(boxes[j].length) <= 105
The elements in boxes[j] are distinct.

class Solution
{
public:
    int n;
    const int mod = 1e9 + 7;

    int find(vector<int> &packages, int s, int x)
    {
        int res = -1;
        int i = s, j = n - 1;
        while(i <= j)
        {
            int mid = i + (j - i) / 2;
            if(packages[mid] <= x)
            {
                res = mid;
                i = mid + 1;
            }
            else
                j = mid - 1;
        }
        return res;
    }

    int minWastedSpace(vector<int> &packages, vector<vector<int>> &boxes)
    {
        n = packages.size();
        sort(packages.begin(), packages.end());
        vector<long long int> prefix(n + 1, 0);
        for(int i = 0; i < n; i++)
        {
            prefix[i + 1] = prefix[i] + packages[i];
        }
        long long int ans = 1e18;
        for(auto &v : boxes)
        {
            sort(v.begin(), v.end());
            int i = 0;
            long long int res = 0;
            for(auto x : v)
            {
                int idx = find(packages, i, x);
                if (idx != -1)
                {
                    long long int t = (long long int)(idx - i + 1) * x;
                    res = (res + t - prefix[idx + 1] + prefix[i]);
                    i = idx + 1;
                    if (i >= n) break;
                }
            }
            if(i == n) ans = min(ans, res);
        }
        return ans == 1e18 ? -1 : ans % mod;
    }
};


// Source https://leetcode.com/problems/check-if-all-the-integers-in-a-range-are-covered/

You are given a 2D integer array ranges and two integers left and right. Each ranges[i] = [starti, endi] represents an inclusive interval between starti and endi.

Return true if each integer in the inclusive range [left, right] is covered by at least one interval in ranges. Return false otherwise.

An integer x is covered by an interval ranges[i] = [starti, endi] if starti <= x <= endi.

 

Example 1:

Input: ranges = [[1,2],[3,4],[5,6]], left = 2, right = 5
Output: true
Explanation: Every integer between 2 and 5 is covered:
- 2 is covered by the first range.
- 3 and 4 are covered by the second range.
- 5 is covered by the third range.
Example 2:

Input: ranges = [[1,10],[10,20]], left = 21, right = 21
Output: false
Explanation: 21 is not covered by any range.
 

Constraints:

1 <= ranges.length <= 50
1 <= starti <= endi <= 50
1 <= left <= right <= 50

class Solution
{
public:
    bool isCovered(vector<vector<int>> &ranges, int left, int right)
    {
        int arr[128] = {0};
        for (auto &v : ranges)
        {
            arr[v[0]]++;
            arr[v[1] + 1]--;
        }
        int sum = 0;
        for (int i = 1; i <left; ++i) sum += arr[i];
        for (int i = left; i <= right; ++i)
        {
            sum += arr[i];
            if (sum <= 0) return false;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/find-the-student-that-will-replace-the-chalk/

There are n students in a class numbered from 0 to n - 1. The teacher will give each student a problem starting with the student number 0, then the student number 1, 
and so on until the teacher reaches the student number n - 1. After that, the teacher will restart the process, starting with the student number 0 again.

You are given a 0-indexed integer array chalk and an integer k. There are initially k pieces of chalk. 
When the student number i is given a problem to solve, they will use chalk[i] pieces of chalk to solve that problem. 
However, if the current number of chalk pieces is strictly less than chalk[i], then the student number i will be asked to replace the chalk.

Return the index of the student that will replace the chalk.

 

Example 1:

Input: chalk = [5,1,5], k = 22
Output: 0
Explanation: The students go in turns as follows:
- Student number 0 uses 5 chalk, so k = 17.
- Student number 1 uses 1 chalk, so k = 16.
- Student number 2 uses 5 chalk, so k = 11.
- Student number 0 uses 5 chalk, so k = 6.
- Student number 1 uses 1 chalk, so k = 5.
- Student number 2 uses 5 chalk, so k = 0.
Student number 0 does not have enough chalk, so they will have to replace it.
Example 2:

Input: chalk = [3,4,1,2], k = 25
Output: 1
Explanation: The students go in turns as follows:
- Student number 0 uses 3 chalk so k = 22.
- Student number 1 uses 4 chalk so k = 18.
- Student number 2 uses 1 chalk so k = 17.
- Student number 3 uses 2 chalk so k = 15.
- Student number 0 uses 3 chalk so k = 12.
- Student number 1 uses 4 chalk so k = 8.
- Student number 2 uses 1 chalk so k = 7.
- Student number 3 uses 2 chalk so k = 5.
- Student number 0 uses 3 chalk so k = 2.
Student number 1 does not have enough chalk, so they will have to replace it.
 

Constraints:

chalk.length == n
1 <= n <= 105
1 <= chalk[i] <= 105
1 <= k <= 109

class Solution
{
public:
    int chalkReplacer(vector<int> &chalk, int k)
    {
        int n = chalk.size();
        long long total = accumulate(chalk.begin(), chalk.end(), 0LL);
        long long rem = (long long) k % total;
        for(int i = 0 ; i < n ; i++)
        {
            if(rem < chalk[i]) return i;
            rem -= chalk[i];            
        }
        return 0;
    }
};


// Source https://leetcode.com/problems/largest-magic-square/

A k x k magic square is a k x k grid filled with integers such that every row sum, every column sum, and both diagonal sums are all equal. 
The integers in the magic square do not have to be distinct. Every 1 x 1 grid is trivially a magic square.

Given an m x n integer grid, return the size (i.e., the side length k) of the largest magic square that can be found within this grid.

 

Example 1:


Input: grid = [[7,1,4,5,6],[2,5,1,6,4],[1,5,4,3,2],[1,2,7,3,4]]
Output: 3
Explanation: The largest magic square has a size of 3.
Every row sum, column sum, and diagonal sum of this magic square is equal to 12.
- Row sums: 5+1+6 = 5+4+3 = 2+7+3 = 12
- Column sums: 5+5+2 = 1+4+7 = 6+3+3 = 12
- Diagonal sums: 5+4+3 = 6+4+2 = 12
Example 2:


Input: grid = [[5,1,3,1],[9,3,3,1],[1,3,3,8]]
Output: 2
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 50
1 <= grid[i][j] <= 106

class Solution
{
public:
    int rsum[100][100], csum[100][100], d1sum[100][100], d2sum[100][100];
    
    int largestMagicSquare(vector<vector<int>> &grid)
    {
        int m = grid.size(), n = grid[0].size();
        for (int i = 1; i <= m; ++i)
        {
            for (int j = 1; j <= n; ++j)
            {
                rsum[i][j] = rsum[i][j - 1] + grid[i - 1][j - 1];
                csum[i][j] = csum[i - 1][j] + grid[i - 1][j - 1];
                d1sum[i][j] = d1sum[i - 1][j - 1] + grid[i - 1][j - 1];
                d2sum[i][j] = d2sum[i - 1][j + 1] + grid[i - 1][j - 1];
            }
        }

        for(int l = min(m, n); l > 1; --l)
        {
            for (int i = 1; i + l - 1 <= m; ++i)
            {
                for (int j = 1; j + l - 1 <= n; ++j)
                {
                    int d1 = d1sum[i + l - 1][j + l - 1] - d1sum[i - 1][j - 1];
                    int d2 = d2sum[i + l - 1][j] - d2sum[i - 1][j + l];
                    bool valid = d1 == d2;
                    for (int k = 0; k < l && valid; ++k)
                    {
                        valid &= d1 == rsum[i + k][j + l - 1] - rsum[i + k][j - 1];
                        valid &= d1 == csum[i + l - 1][j + k] - csum[i - 1][j + k];
                    }
                    if (valid) return l;
                }
            }
        }
        return 1;
    }
};


// Source https://leetcode.com/problems/minimum-cost-to-change-the-final-value-of-expression/

You are given a valid boolean expression as a string expression consisting of the characters '1','0','&' (bitwise AND operator),'|' (bitwise OR operator),'(', and ')'.

For example, "()1|1" and "(1)&()" are not valid while "1", "(((1))|(0))", and "1|(0&(1))" are valid expressions.
Return the minimum cost to change the final value of the expression.

For example, if expression = "1|1|(0&0)&1", its value is 1|1|(0&0)&1 = 1|1|0&1 = 1|0&1 = 1&1 = 1. We want to apply operations so that the new expression evaluates to 0.
The cost of changing the final value of an expression is the number of operations performed on the expression. The types of operations are described as follows:

Turn a '1' into a '0'.
Turn a '0' into a '1'.
Turn a '&' into a '|'.
Turn a '|' into a '&'.
Note: '&' does not take precedence over '|' in the order of calculation. Evaluate parentheses first, then in left-to-right order.

 

Example 1:

Input: expression = "1&(0|1)"
Output: 1
Explanation: We can turn "1&(0|1)" into "1&(0&1)" by changing the '|' to a '&' using 1 operation.
The new expression evaluates to 0. 
Example 2:

Input: expression = "(0&0)&(0&0&0)"
Output: 3
Explanation: We can turn "(0&0)&(0&0&0)" into "(0|1)|(0&0&0)" using 3 operations.
The new expression evaluates to 1.
Example 3:

Input: expression = "(0|(1|0&1))"
Output: 1
Explanation: We can turn "(0|(1|0&1))" into "(0|(0|0&1))" using 1 operation.
The new expression evaluates to 0.
 

Constraints:

1 <= expression.length <= 105
expression only contains '1','0','&','|','(', and ')'
All parentheses are properly matched.
There will be no empty parentheses (i.e: "()" is not a substring of expression).

Result 表达式的解析结果，表达式的两端可以有括号，也可以不包含括号（不包含括号的表达式只有一个，就是最外层的表达式）
Result.v 表达式解析后的值，可以为0或1
Result.cost 表达式解析后的值要发生变化对应的the minimum cost，原来 0 变成 1 或者 原来 1 变成 0

class Solution
{
public:

    struct Result
    {
        bool v;
        int cost;
    };

    Result Parse(const char **p)
    {
        char op = '\0';
        bool first = true;
        Result res;
        while (**p != ')' && **p != '\0')
        {
            bool has_child = false;
            Result child;
            switch (**p)
            {
            case '0':
            case '1':
                child = {(**p - '0') == 1, 1};   // 1 change to 0 或者 0 change to 1, cost = 1
                has_child = true;
                break;
            case '&':
            case '|':
                op = **p;
                break;
            case '(':
                (*p)++;
                child = Parse(p);   // 递归返回后，*p 指向对应的 ')'
                has_child = true;
                break;
            }
            (*p)++;
            if (!has_child) continue;
            if (first)
            {
                res = child;
                first = false;
                continue;
            }
            if (op == '&' && child.v == 0)
            {
                if (res.v == 0)    // 0&0 change to 1，需要修改为1 | 0 或者 0 | 1，如果改为1 & 1，res.cost + child.cost >= min(res.cost + 1, child.cost + 1)
                {
                    res.cost = min(res.cost + 1, child.cost + 1);
                }
                else
                {
                    // 1&0 change to 1，需要修改为1 | 0
                    res.cost = 1;
                }
                res.v = 0;
            }
            else if (op == '&' && child.v == 1)
            {
                if (res.v == 0)   // 0&1 change to 1，需要修改为0 | 1
                {
                    res.cost = 1;
                }
                else
                {
                    res.cost = min(res.cost, child.cost);   // 1&1 change to 0，需要修改为1 & 0 或者 0 & 1
                }
            }
            else if (op == '|' && child.v == 0)
            {
                if (res.v == 0)    // 0|0 change to 1，需要修改为1 | 0 或者 0 | 1
                {
                    res.cost = min(res.cost, child.cost);
                }
                else
                {
                    res.cost = 1;   // 1|0 change to 0，需要修改为1 & 0
                }
            }
            else      // op == |, cv == 1
            {
                if (res.v == 0)   // 0|1 change to 0，需要修改为 0 & 1
                {
                    res.cost = 1;
                }
                else
                {
                    res.cost = min(res.cost + 1, child.cost + 1);   // 1|1 change to 0，需要修改为1 & 0 或者 0 & 1
                }
                res.v = 1;
            }
        }
        return res;
    }

    int minOperationsToFlip(string e)
    {
        const char *s = e.c_str();
        return Parse(&s).cost;
    }
};


// Source https://leetcode.com/problems/redistribute-characters-to-make-all-strings-equal/

You are given an array of strings words (0-indexed).

In one operation, pick two distinct indices i and j, where words[i] is a non-empty string, and move any character from words[i] to any position in words[j].

Return true if you can make every string in words equal using any number of operations, and false otherwise.

 

Example 1:

Input: words = ["abc","aabc","bc"]
Output: true
Explanation: Move the first 'a' in words[1] to the front of words[2],
to make words[1] = "abc" and words[2] = "abc".
All the strings are now equal to "abc", so return true.
Example 2:

Input: words = ["ab","a"]
Output: false
Explanation: It is impossible to make all the strings equal using the operation.
 

Constraints:

1 <= words.length <= 100
1 <= words[i].length <= 100
words[i] consists of lowercase English letters.

class Solution
{
public:
    bool makeEqual(vector<string> &words)
    {
        int n = words.size();
        if (n <= 1) return true;
        int arr[26] = {0};
        for (auto &str : words)
        {
            for (auto ch : str) arr[ch - 'a']++;
        }
        for (int i = 0; i < 26; ++i)
        {
            if (arr[i] == 0) continue;
            if (arr[i] % n) return false;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/maximum-number-of-removable-characters/

You are given two strings s and p where p is a subsequence of s. You are also given a distinct 0-indexed integer array removable containing a subset of indices of s (s is also 0-indexed).

You want to choose an integer k (0 <= k <= removable.length) such that, after removing k characters from s using the first k indices in removable, p is still a subsequence of s. 
More formally, you will mark the character at s[removable[i]] for each 0 <= i < k, then remove all marked characters and check if p is still a subsequence.

Return the maximum k you can choose such that p is still a subsequence of s after the removals.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

 

Example 1:

Input: s = "abcacb", p = "ab", removable = [3,1,0]
Output: 2
Explanation: After removing the characters at indices 3 and 1, "abcacb" becomes "accb".
"ab" is a subsequence of "accb".
If we remove the characters at indices 3, 1, and 0, "abcacb" becomes "ccb", and "ab" is no longer a subsequence.
Hence, the maximum k is 2.
Example 2:

Input: s = "abcbddddd", p = "abcd", removable = [3,2,1,4,5,6]
Output: 1
Explanation: After removing the character at index 3, "abcbddddd" becomes "abcddddd".
"abcd" is a subsequence of "abcddddd".
Example 3:

Input: s = "abcab", p = "abc", removable = [0,1,2,3,4]
Output: 0
Explanation: If you remove the first index in the array removable, "abc" is no longer a subsequence.
 

Constraints:

1 <= p.length <= s.length <= 105
0 <= removable.length < s.length
0 <= removable[i] < s.length
p is a subsequence of s.
s and p both consist of lowercase English letters.
The elements in removable are distinct.

class Solution
{
public:
    int n, m;

    bool check(string s, string &p, vector<int> &removable, int k)
    {
        for(int i = 0; i < k; ++i)
        {
            s[removable[i]] = '.';
        }
        int j = 0;
        for(int i = 0; i < n && j < m; ++i)
        {
            if(s[i] == p[j]) ++j;
        }
        return j == m;
    }

    int maximumRemovals(string s, string p, vector<int> &removable)
    {
        n = s.length();
        m = p.length();
        int l = 0, r = removable.size();
        int ans = 0;
        while(l <= r)
        {
            int mid = l + (r - l) / 2;
            if(check(s, p, removable, mid))
            {
                ans = mid;
                l = mid + 1;
            }
            else
                r = mid - 1;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/merge-triplets-to-form-target-triplet/

A triplet is an array of three integers. You are given a 2D integer array triplets, where triplets[i] = [ai, bi, ci] describes the ith triplet. 
You are also given an integer array target = [x, y, z] that describes the triplet you want to obtain.

To obtain target, you may apply the following operation on triplets any number of times (possibly zero):

Choose two indices (0-indexed) i and j (i != j) and update triplets[j] to become [max(ai, aj), max(bi, bj), max(ci, cj)].
For example, if triplets[i] = [2, 5, 3] and triplets[j] = [1, 7, 5], triplets[j] will be updated to [max(2, 1), max(5, 7), max(3, 5)] = [2, 7, 5].
Return true if it is possible to obtain the target triplet [x, y, z] as an element of triplets, or false otherwise.

 

Example 1:

Input: triplets = [[2,5,3],[1,8,4],[1,7,5]], target = [2,7,5]
Output: true
Explanation: Perform the following operations:
- Choose the first and last triplets [[2,5,3],[1,8,4],[1,7,5]]. Update the last triplet to be [max(2,1), max(5,7), max(3,5)] = [2,7,5]. triplets = [[2,5,3],[1,8,4],[2,7,5]]
The target triplet [2,7,5] is now an element of triplets.
Example 2:

Input: triplets = [[3,4,5],[4,5,6]], target = [3,2,5]
Output: false
Explanation: It is impossible to have [3,2,5] as an element because there is no 2 in any of the triplets.
Example 3:

Input: triplets = [[2,5,3],[2,3,4],[1,2,5],[5,2,3]], target = [5,5,5]
Output: true
Explanation: Perform the following operations:
- Choose the first and third triplets [[2,5,3],[2,3,4],[1,2,5],[5,2,3]]. Update the third triplet to be [max(2,1), max(5,2), max(3,5)] = [2,5,5]. triplets = [[2,5,3],[2,3,4],[2,5,5],[5,2,3]].
- Choose the third and fourth triplets [[2,5,3],[2,3,4],[2,5,5],[5,2,3]]. Update the fourth triplet to be [max(2,5), max(5,2), max(5,3)] = [5,5,5]. triplets = [[2,5,3],[2,3,4],[2,5,5],[5,5,5]].
The target triplet [5,5,5] is now an element of triplets.
 

Constraints:

1 <= triplets.length <= 105
triplets[i].length == target.length == 3
1 <= ai, bi, ci, x, y, z <= 1000

class Solution
{
public:
    bool mergeTriplets(vector<vector<int>> &triplets, vector<int> &target)
    {
        vector<int> ans(3, 0);
        for (auto &v : triplets)
        {
            if(v[0] <= target[0] && v[1] <= target[1] && v[2] <= target[2])
            {
                ans[0] = max(v[0], ans[0]);
                ans[1] = max(v[1], ans[1]);
                ans[2] = max(v[2], ans[2]);
            }
        }
        if(ans == target) return true;
        return false;
    }
};


// Source https://leetcode.com/problems/the-earliest-and-latest-rounds-where-players-compete/

There is a tournament where n players are participating. The players are standing in a single row and are numbered from 1 to n based on their initial standing position 
(player 1 is the first player in the row, player 2 is the second player in the row, etc.).

The tournament consists of multiple rounds (starting from round number 1). In each round, the ith player from the front of the row competes against the ith player from the end of the row, 
and the winner advances to the next round. When the number of players is odd for the current round, the player in the middle automatically advances to the next round.

For example, if the row consists of players 1, 2, 4, 6, 7
Player 1 competes against player 7.
Player 2 competes against player 6.
Player 4 automatically advances to the next round.
After each round is over, the winners are lined back up in the row based on the original ordering assigned to them initially (ascending order).

The players numbered firstPlayer and secondPlayer are the best in the tournament. They can win against any other player before they compete against each other. 
If any two other players compete against each other, either of them might win, and thus you may choose the outcome of this round.

Given the integers n, firstPlayer, and secondPlayer, return an integer array containing two values, 
the earliest possible round number and the latest possible round number in which these two players will compete against each other, respectively.

 

Example 1:

Input: n = 11, firstPlayer = 2, secondPlayer = 4
Output: [3,4]
Explanation:
One possible scenario which leads to the earliest round number:
First round: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11
Second round: 2, 3, 4, 5, 6, 11
Third round: 2, 3, 4
One possible scenario which leads to the latest round number:
First round: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11
Second round: 1, 2, 3, 4, 5, 6
Third round: 1, 2, 4
Fourth round: 2, 4
Example 2:

Input: n = 5, firstPlayer = 1, secondPlayer = 5
Output: [1,1]
Explanation: The players numbered 1 and 5 compete in the first round.
There is no way to make them compete in any other round.
 

Constraints:

2 <= n <= 28
1 <= firstPlayer < secondPlayer <= n

n 最大为28，i >= 0 && i <=27，mask 的第 i 位 为1表示 i + 1 对应的player参与第 round 轮比赛，mask 的第 i 位 为0 表示 i + 1 对应的player在第 round 轮比赛之前已经输掉
l 记录 参与第 round 轮比赛且还没有和其他人PK过，mask中位置 i 最大的选手
r 记录 参与第 round 轮比赛且还没有和其他人PK过，mask中位置 i 最小的选手

class Solution
{
public:
    int f, s;
    int maxRound, minRound;

    void dfs(int l, int r, int mask, int round)
    {
        if (l <= r)
        {
            dfs(1 << 27, mask & -mask, mask, round + 1);   // 第 round 轮比赛可以结束，开始第 round + 1 轮比赛，mask & -mask 求出 mask 中位置 i 最小的 1
        }
        else if (l & ~mask)
        {
            dfs(l >> 1, r, mask, round);   // 第 round 轮比赛，l 对应的选手在先前的比赛中已经输掉了，跳过当前的 l
        }
        else if (l & s && r & f)   //  第 round 轮比赛，l 对应 secondPlayer，r 对应 firstPlayer，更新maxans，minans，不用再进行后续的PK
        {
            maxRound = max(maxRound, round);
            minRound = min(minRound, round);
        }
        else
        {
            int rm = mask & ~((r << 1) - 1);   // 第 round 轮比赛，r 对应的选手，mask中位置 0 ... i 修改为0，把结果赋给rm（原先的mask并没有被修改）
            if (l & ~(f | s)) dfs(l >> 1, rm & -rm, mask ^ l, round);   // l不是firstPlayer，也不是secondPlayer，l >> 1 求出下一个要参与PK的 l，rm & -rm 求出下一个要参与PK的 r，mask ^ l 表示 l 输，r 赢
            if (r & ~(f | s)) dfs(l >> 1, rm & -rm, mask ^ r, round);   // r不是firstPlayer，也不是secondPlayer，l >> 1 求出下一个要参与PK的 l，rm & -rm 求出下一个要参与PK的 r，mask ^ r 表示 l 赢，r 输
        }
    }

    vector<int> earliestAndLatest(int n, int f, int s)
    {
        this->f = 1 << (f - 1), this->s = 1 << (s - 1);
        maxRound = INT_MIN;
        minRound = INT_MAX;
        dfs(1 << 27, 1, (1 << n) - 1, 1);
        return {minRound, maxRound};
    }
};


// Source https://leetcode.com/problems/find-a-peak-element-ii/

A peak element in a 2D grid is an element that is strictly greater than all of its adjacent neighbors to the left, right, top, and bottom.

Given a 0-indexed m x n matrix mat where no two adjacent cells are equal, find any peak element mat[i][j] and return the length 2 array [i,j].

You may assume that the entire matrix is surrounded by an outer perimeter with the value -1 in each cell.

You must write an algorithm that runs in O(m log(n)) or O(n log(m)) time.

 

Example 1:



Input: mat = [[1,4],[3,2]]
Output: [0,1]
Explanation: Both 3 and 4 are peak elements so [1,0] and [0,1] are both acceptable answers.
Example 2:



Input: mat = [[10,20,15],[21,30,14],[7,16,32]]
Output: [1,1]
Explanation: Both 30 and 32 are peak elements so [1,1] and [2,2] are both acceptable answers.
 

Constraints:

m == mat.length
n == mat[i].length
1 <= m, n <= 500
1 <= mat[i][j] <= 105
No two adjacent cells are equal.

class Solution
{
public:
    int visited[505][505];

    vector<int> findPeakGrid(vector<vector<int>> &mat)
    {
        int dx[4] = {1, 0, -1, 0};
        int dy[4] = {0, -1, 0, 1};
        priority_queue<pair<int, pair<int, int>>> pq;
        int rows = mat.size();
        int cols = mat[0].size();
        pq.push({mat[0][0], {0, 0}});
        visited[0][0] = 1;
        while(!pq.empty())
        {
            auto [val, p] = pq.top();
            auto [i, j] = p;
            int cnt = 0;
            for(int k = 0; k < 4; k++)
            {
                int x = i + dx[k];
                int y = j + dy[k];
                if(x < 0 || y < 0 || x >= rows || y >= cols || mat[x][y] < val)
                    continue;
                cnt++;
                if (visited[x][y] == 0)
                {
                    pq.push({mat[x][y], {x, y}});
                    visited[x][y] = 1;
                }
            }
            if(cnt == 0) return {i, j};
        }
        return {-1, -1};
    }
};


// Source https://leetcode.com/problems/largest-odd-number-in-string/

You are given a string num, representing a large integer. Return the largest-valued odd integer (as a string) that is a non-empty substring of num, or an empty string "" if no odd integer exists.

A substring is a contiguous sequence of characters within a string.

 

Example 1:

Input: num = "52"
Output: "5"
Explanation: The only non-empty substrings are "5", "2", and "52". "5" is the only odd number.
Example 2:

Input: num = "4206"
Output: ""
Explanation: There are no odd numbers in "4206".
Example 3:

Input: num = "35427"
Output: "35427"
Explanation: "35427" is already an odd number.
 

Constraints:

1 <= num.length <= 105
num only consists of digits and does not contain any leading zeros.

class Solution
{
public:
    string largestOddNumber(string num)
    {
        int n = num.length();
        for (int i = n - 1; i >= 0; --i)
        {
            if ((num[i] - '0') % 2) return num;
            num.pop_back();
        }
        return "";
    }
};


// Source https://leetcode.com/problems/the-number-of-full-rounds-you-have-played/

You are participating in an online chess tournament. There is a chess round that starts every 15 minutes. The first round of the day starts at 00:00, and after every 15 minutes, a new round starts.

For example, the second round starts at 00:15, the fourth round starts at 00:45, and the seventh round starts at 01:30.
You are given two strings loginTime and logoutTime where:

loginTime is the time you will login to the game, and
logoutTime is the time you will logout from the game.
If logoutTime is earlier than loginTime, this means you have played from loginTime to midnight and from midnight to logoutTime.

Return the number of full chess rounds you have played in the tournament.

Note: All the given times follow the 24-hour clock. That means the first round of the day starts at 00:00 and the last round of the day starts at 23:45.

 

Example 1:

Input: loginTime = "09:31", logoutTime = "10:14"
Output: 1
Explanation: You played one full round from 09:45 to 10:00.
You did not play the full round from 09:30 to 09:45 because you logged in at 09:31 after it began.
You did not play the full round from 10:00 to 10:15 because you logged out at 10:14 before it ended.
Example 2:

Input: loginTime = "21:30", logoutTime = "03:00"
Output: 22
Explanation: You played 10 full rounds from 21:30 to 00:00 and 12 full rounds from 00:00 to 03:00.
10 + 12 = 22.
 

Constraints:

loginTime and logoutTime are in the format hh:mm.
00 <= hh <= 23
00 <= mm <= 59
loginTime and logoutTime are not equal.

class Solution
{
public:
    int numberOfRounds(string startTime, string finishTime)
    {
        int startHour, startMin, stopHour, stopMin;

        startHour = stoi(startTime.substr(0, 2));
        startMin = stoi(startTime.substr(3, 2));
        stopHour = stoi(finishTime.substr(0, 2));
        stopMin = stoi(finishTime.substr(3, 2));

        int start = startHour * 60 + startMin;
        int stop = stopHour * 60 + stopMin;

        if (start > stop)
        {
            stop += 24 * 60;
        }

        start = (start / 15) + (start % 15 > 0);
        stop /= 15;

        return max(stop - start, 0);
    }
};


// Source https://leetcode.com/problems/count-sub-islands/

You are given two m x n binary matrices grid1 and grid2 containing only 0's (representing water) and 1's (representing land). 
An island is a group of 1's connected 4-directionally (horizontal or vertical). Any cells outside of the grid are considered water cells.

An island in grid2 is considered a sub-island if there is an island in grid1 that contains all the cells that make up this island in grid2.

Return the number of islands in grid2 that are considered sub-islands.

 

Example 1:


Input: grid1 = [[1,1,1,0,0],[0,1,1,1,1],[0,0,0,0,0],[1,0,0,0,0],[1,1,0,1,1]], grid2 = [[1,1,1,0,0],[0,0,1,1,1],[0,1,0,0,0],[1,0,1,1,0],[0,1,0,1,0]]
Output: 3
Explanation: In the picture above, the grid on the left is grid1 and the grid on the right is grid2.
The 1s colored red in grid2 are those considered to be part of a sub-island. There are three sub-islands.
Example 2:


Input: grid1 = [[1,0,1,0,1],[1,1,1,1,1],[0,0,0,0,0],[1,1,1,1,1],[1,0,1,0,1]], grid2 = [[0,0,0,0,0],[1,1,1,1,1],[0,1,0,1,0],[0,1,0,1,0],[1,0,0,0,1]]
Output: 2 
Explanation: In the picture above, the grid on the left is grid1 and the grid on the right is grid2.
The 1s colored red in grid2 are those considered to be part of a sub-island. There are two sub-islands.
 

Constraints:

m == grid1.length == grid2.length
n == grid1[i].length == grid2[i].length
1 <= m, n <= 500
grid1[i][j] and grid2[i][j] are either 0 or 1.

class Solution
{
public:
    int m, n;

    void dfs(vector<vector<int>> &grid2, vector<vector<int>> &grid1, int i, int j, bool &status)
    {
        if(i < m && i >= 0 && j < n && j >= 0 && grid2[i][j] == 1)
        {
            if(grid1[i][j] == 0)
            {
                status = false;
            }
            grid2[i][j] = 0;
            dfs(grid2, grid1, i, j + 1, status);
            dfs(grid2, grid1, i, j - 1, status);
            dfs(grid2, grid1, i - 1, j, status);
            dfs(grid2, grid1, i + 1, j, status);
        }
    }

    int countSubIslands(vector<vector<int>> &grid1, vector<vector<int>> &grid2)
    {
        m = grid1.size();
        n = grid1[0].size();
        int count = 0;
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(grid2[i][j] == 1)
                {
                    bool status = true;
                    dfs(grid2, grid1, i, j, status);
                    if(status == true) count++;
                }
            }
        }
        return count;
    }
};


// Source https://leetcode.com/problems/minimum-absolute-difference-queries/

The minimum absolute difference of an array a is defined as the minimum value of |a[i] - a[j]|, where 0 <= i < j < a.length and a[i] != a[j]. 
If all elements of a are the same, the minimum absolute difference is -1.

For example, the minimum absolute difference of the array [5,2,3,7,2] is |2 - 3| = 1. Note that it is not 0 because a[i] and a[j] must be different.
You are given an integer array nums and the array queries where queries[i] = [li, ri]. 
For each query i, compute the minimum absolute difference of the subarray nums[li...ri] containing the elements of nums between the 0-based indices li and ri (inclusive).

Return an array ans where ans[i] is the answer to the ith query.

A subarray is a contiguous sequence of elements in an array.

The value of |x| is defined as:

x if x >= 0.
-x if x < 0.
 

Example 1:

Input: nums = [1,3,4,8], queries = [[0,1],[1,2],[2,3],[0,3]]
Output: [2,1,4,1]
Explanation: The queries are processed as follows:
- queries[0] = [0,1]: The subarray is [1,3] and the minimum absolute difference is |1-3| = 2.
- queries[1] = [1,2]: The subarray is [3,4] and the minimum absolute difference is |3-4| = 1.
- queries[2] = [2,3]: The subarray is [4,8] and the minimum absolute difference is |4-8| = 4.
- queries[3] = [0,3]: The subarray is [1,3,4,8] and the minimum absolute difference is |3-4| = 1.
Example 2:

Input: nums = [4,5,2,2,7,10], queries = [[2,3],[0,2],[0,5],[3,5]]
Output: [-1,1,1,3]
Explanation: The queries are processed as follows:
- queries[0] = [2,3]: The subarray is [2,2] and the minimum absolute difference is -1 because all the
  elements are the same.
- queries[1] = [0,2]: The subarray is [4,5,2] and the minimum absolute difference is |4-5| = 1.
- queries[2] = [0,5]: The subarray is [4,5,2,2,7,10] and the minimum absolute difference is |4-5| = 1.
- queries[3] = [3,5]: The subarray is [2,7,10] and the minimum absolute difference is |7-10| = 3.
 

Constraints:

2 <= nums.length <= 105
1 <= nums[i] <= 100
1 <= queries.length <= 2 * 104
0 <= li < ri < nums.length

class Solution
{
public:
    vector<int> minDifference(vector<int> &nums, vector<vector<int>> &queries)
    {
        int n = nums.size();
        vector<set<int>> vec(110);
        for(int i = 0; i < n; i++)
        {
            vec[nums[i]].insert(i);
        }
        vector<int> ans;
        ans.reserve(queries.size());
        for(auto &query : queries)
        {
            int l = query[0];
            int r = query[1];
            int diff = INT_MAX;
            int prev = -1;
            for(int i = 1; i <= 100; i++)
            {
                auto itr = vec[i].lower_bound(l);
                if(itr != vec[i].end() && *itr <= r)
                {
                    if(prev == -1)
                    {
                        prev = i;
                    }
                    else
                    {
                        diff = min(diff, i - prev);
                        prev = i;
                    }
                }
            }
            if(diff == INT_MAX)
            {
                ans.push_back(-1);
            }
            else
            {
                ans.push_back(diff);
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/remove-one-element-to-make-the-array-strictly-increasing/

Given a 0-indexed integer array nums, return true if it can be made strictly increasing after removing exactly one element, or false otherwise. If the array is already strictly increasing, return true.

The array nums is strictly increasing if nums[i - 1] < nums[i] for each index (1 <= i < nums.length).

 

Example 1:

Input: nums = [1,2,10,5,7]
Output: true
Explanation: By removing 10 at index 2 from nums, it becomes [1,2,5,7].
[1,2,5,7] is strictly increasing, so return true.
Example 2:

Input: nums = [2,3,1,2]
Output: false
Explanation:
[3,1,2] is the result of removing the element at index 0.
[2,1,2] is the result of removing the element at index 1.
[2,3,2] is the result of removing the element at index 2.
[2,3,1] is the result of removing the element at index 3.
No resulting array is strictly increasing, so return false.
Example 3:

Input: nums = [1,1,1]
Output: false
Explanation: The result of removing any element is [1,1].
[1,1] is not strictly increasing, so return false.
 

Constraints:

2 <= nums.length <= 1000
1 <= nums[i] <= 1000

class Solution
{
public:
    bool canBeIncreasing(vector<int> &nums)
    {
        vector<int> lis;
        int count = 0;
        for(auto val : nums)
        {
            auto itr = lower_bound(lis.begin(), lis.end(), val);
            if(itr == lis.end())
            {
                lis.push_back(val);
            }
            else
            {
                *itr = val;
                if (++count > 1) return false;
            }            
        }
        return true;
    }
};


// Source https://leetcode.com/problems/remove-all-occurrences-of-a-substring/

Given two strings s and part, perform the following operation on s until all occurrences of the substring part are removed:

Find the leftmost occurrence of the substring part and remove it from s.
Return s after removing all occurrences of part.

A substring is a contiguous sequence of characters in a string.

 

Example 1:

Input: s = "daabcbaabcbc", part = "abc"
Output: "dab"
Explanation: The following operations are done:
- s = "daabcbaabcbc", remove "abc" starting at index 2, so s = "dabaabcbc".
- s = "dabaabcbc", remove "abc" starting at index 4, so s = "dababc".
- s = "dababc", remove "abc" starting at index 3, so s = "dab".
Now s has no occurrences of "abc".
Example 2:

Input: s = "axxxxyyyyb", part = "xy"
Output: "ab"
Explanation: The following operations are done:
- s = "axxxxyyyyb", remove "xy" starting at index 4 so s = "axxxyyyb".
- s = "axxxyyyb", remove "xy" starting at index 3 so s = "axxyyb".
- s = "axxyyb", remove "xy" starting at index 2 so s = "axyb".
- s = "axyb", remove "xy" starting at index 1 so s = "ab".
Now s has no occurrences of "xy".
 

Constraints:

1 <= s.length <= 1000
1 <= part.length <= 1000
s​​​​​​ and part consists of lowercase English letters.

class Solution
{
public:
    string removeOccurrences(string s, string part)
    {
        int len = part.length();
        int pos = s.find(part);
        while(pos != string::npos)
        {
            s.erase(pos, len);
            pos = s.find(part);
        }
        return s;
    }
};


// Source https://leetcode.com/problems/maximum-alternating-subsequence-sum/

The alternating sum of a 0-indexed array is defined as the sum of the elements at even indices minus the sum of the elements at odd indices.

For example, the alternating sum of [4,2,5,3] is (4 + 5) - (2 + 3) = 4.
Given an array nums, return the maximum alternating sum of any subsequence of nums (after reindexing the elements of the subsequence).

A subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order. 
For example, [2,7,4] is a subsequence of [4,2,3,7,2,1,4] (the underlined elements), while [2,4,2] is not.

 

Example 1:

Input: nums = [4,2,5,3]
Output: 7
Explanation: It is optimal to choose the subsequence [4,2,5] with alternating sum (4 + 5) - 2 = 7.
Example 2:

Input: nums = [5,6,7,8]
Output: 8
Explanation: It is optimal to choose the subsequence [8] with alternating sum 8.
Example 3:

Input: nums = [6,2,1,2,4,5]
Output: 10
Explanation: It is optimal to choose the subsequence [6,1,5] with alternating sum (6 + 5) - 1 = 10.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 105

dp0[i] 表示从nums[0 ... i] 中选择的子序列长度为偶数时的最大交替和
如果nums[i] 不参与到最佳子序列中，则dp0[i] = dp0[i-1]
如果nums[i] 参与到最佳子序列中，则dp0[i] = dp1[i-1] - nums[i]（此时nums[i]是最佳子序列的最后一个元素，最佳子序列长度为偶数时，最后一个元素下标为奇数）
dp0[i] = max(dp0[i-1], dp1[i-1] - nums[i])
dp1[i] 表示从nums[0 ... i] 中选择的子序列长度为奇数时的最大交替和
如果nums[i] 不参与到最佳子序列中，则dp1[i] = dp1[i-1]
如果nums[i] 参与到最佳子序列中，则dp1[i] = dp0[i-1] + nums[i]（此时nums[i]是最佳子序列的最后一个元素，最佳子序列长度为奇数时，最后一个元素下标为偶数）
dp1[i] = max(dp1[i-1], dp0[i-1] + nums[i])

dp0[0] = 0
dp1[0] = nums[0]

数组 [4,2,5,3] 的交替和为 4 - 2 + 5 - 3 

class Solution
{
public:
    long long maxAlternatingSum(vector<int> &nums)
    {
        int n = nums.size();
        vector<long long> dp0(n, 0),  dp1(n, 0);
        dp1[0] = nums[0];
        for(int i = 1; i < n; ++i)
        {
            dp0[i] = max(dp0[i - 1], dp1[i - 1] - nums[i]);
            dp1[i] = max(dp1[i - 1], dp0[i - 1] + nums[i]);
        }
        return max(dp0[n - 1], dp1[n - 1]);
    }
};


// Source https://leetcode.com/problems/design-movie-rental-system/

You have a movie renting company consisting of n shops. You want to implement a renting system that supports searching for, booking, and returning movies. 
The system should also support generating a report of the currently rented movies.

Each movie is given as a 2D integer array entries where entries[i] = [shopi, moviei, pricei] indicates that there is a copy of movie moviei at shop shopi with a rental price of pricei. 
Each shop carries at most one copy of a movie moviei.

The system should support the following functions:

Search: Finds the cheapest 5 shops that have an unrented copy of a given movie. The shops should be sorted by price in ascending order, 
and in case of a tie, the one with the smaller shopi should appear first. If there are less than 5 matching shops, then all of them should be returned. 
If no shop has an unrented copy, then an empty list should be returned.
Rent: Rents an unrented copy of a given movie from a given shop.
Drop: Drops off a previously rented copy of a given movie at a given shop.
Report: Returns the cheapest 5 rented movies (possibly of the same movie ID) as a 2D list res where res[j] = [shopj, moviej] describes that the jth cheapest rented movie moviej was rented from the shop shopj. 
The movies in res should be sorted by price in ascending order, and in case of a tie, the one with the smaller shopj should appear first, 
and if there is still tie, the one with the smaller moviej should appear first. If there are fewer than 5 rented movies, then all of them should be returned. 
If no movies are currently being rented, then an empty list should be returned.
Implement the MovieRentingSystem class:

MovieRentingSystem(int n, int[][] entries) Initializes the MovieRentingSystem object with n shops and the movies in entries.
List<Integer> search(int movie) Returns a list of shops that have an unrented copy of the given movie as described above.
void rent(int shop, int movie) Rents the given movie from the given shop.
void drop(int shop, int movie) Drops off a previously rented movie at the given shop.
List<List<Integer>> report() Returns a list of cheapest rented movies as described above.
Note: The test cases will be generated such that rent will only be called if the shop has an unrented copy of the movie, and drop will only be called if the shop had previously rented out the movie.

 

Example 1:

Input
["MovieRentingSystem", "search", "rent", "rent", "report", "drop", "search"]
[[3, [[0, 1, 5], [0, 2, 6], [0, 3, 7], [1, 1, 4], [1, 2, 7], [2, 1, 5]]], [1], [0, 1], [1, 2], [], [1, 2], [2]]
Output
[null, [1, 0, 2], null, null, [[0, 1], [1, 2]], null, [0, 1]]

Explanation
MovieRentingSystem movieRentingSystem = new MovieRentingSystem(3, [[0, 1, 5], [0, 2, 6], [0, 3, 7], [1, 1, 4], [1, 2, 7], [2, 1, 5]]);
movieRentingSystem.search(1);  // return [1, 0, 2], Movies of ID 1 are unrented at shops 1, 0, and 2. Shop 1 is cheapest; shop 0 and 2 are the same price, so order by shop number.
movieRentingSystem.rent(0, 1); // Rent movie 1 from shop 0. Unrented movies at shop 0 are now [2,3].
movieRentingSystem.rent(1, 2); // Rent movie 2 from shop 1. Unrented movies at shop 1 are now [1].
movieRentingSystem.report();   // return [[0, 1], [1, 2]]. Movie 1 from shop 0 is cheapest, followed by movie 2 from shop 1.
movieRentingSystem.drop(1, 2); // Drop off movie 2 at shop 1. Unrented movies at shop 1 are now [1,2].
movieRentingSystem.search(2);  // return [0, 1]. Movies of ID 2 are unrented at shops 0 and 1. Shop 0 is cheapest, followed by shop 1.
 

Constraints:

1 <= n <= 3 * 105
1 <= entries.length <= 105
0 <= shopi < n
1 <= moviei, pricei <= 104
Each shop carries at most one copy of a movie moviei.
At most 105 calls in total will be made to search, rent, drop and report.

class MovieRentingSystem
{
public:
    unordered_map<int, unordered_map<int, int>> shop;
    unordered_map<int, set<pair<int, int>>> movie;
    set<tuple<int, int, int>> drp;

    MovieRentingSystem(int n, vector<vector<int>> &entries)
    {
        for(auto &v : entries)
        {
            shop[v[0]][v[1]] = v[2];
            movie[v[1]].insert({v[2], v[0]});
        }
    }

    vector<int> search(int mv)
    {
        int a = movie[mv].size();
        int n = min(5, a);
        vector<int> ans;
        for(auto p : movie[mv])
        {
            if(n == 0)
            {
                break;
            }
            ans.push_back(p.second);
            n--;
        }
        return ans;
    }

    void rent(int shp, int mv)
    {
        int pr = shop[shp][mv];
        movie[mv].erase({pr, shp});
        drp.insert({pr, shp, mv});
    }

    void drop(int shp, int mv)
    {
        int pr = shop[shp][mv];
        drp.erase({pr, shp, mv});
        movie[mv].insert({pr, shp});
    }

    vector<vector<int>> report()
    {
        int a = drp.size();
        int n = min(5, a);
        vector<vector<int>> ans;
        for(auto t : drp)
        {
            if(n== 0)
            {
                break;
            }
            ans.push_back({get<1>(t), get<2>(t)});
            n--;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/maximum-product-difference-between-two-pairs/

The product difference between two pairs (a, b) and (c, d) is defined as (a * b) - (c * d).

For example, the product difference between (5, 6) and (2, 7) is (5 * 6) - (2 * 7) = 16.
Given an integer array nums, choose four distinct indices w, x, y, and z such that the product difference between pairs (nums[w], nums[x]) and (nums[y], nums[z]) is maximized.

Return the maximum such product difference.

 

Example 1:

Input: nums = [5,6,2,7,4]
Output: 34
Explanation: We can choose indices 1 and 3 for the first pair (6, 7) and indices 2 and 4 for the second pair (2, 4).
The product difference is (6 * 7) - (2 * 4) = 34.
Example 2:

Input: nums = [4,2,5,9,7,4,8]
Output: 64
Explanation: We can choose indices 3 and 6 for the first pair (9, 8) and indices 1 and 5 for the second pair (2, 4).
The product difference is (9 * 8) - (2 * 4) = 64.
 

Constraints:

4 <= nums.length <= 104
1 <= nums[i] <= 104

class Solution
{
public:
    int maxProductDifference(vector<int> &nums)
    {
        sort(nums.begin(), nums.end());
        return nums[nums.size() - 1] * nums[nums.size() - 2] - nums[0] * nums[1];
    }
};


// Source https://leetcode.com/problems/cyclically-rotating-a-grid/

You are given an m x n integer matrix grid​​​, where m and n are both even integers, and an integer k.

The matrix is composed of several layers, which is shown in the below image, where each color is its own layer:



A cyclic rotation of the matrix is done by cyclically rotating each layer in the matrix. To cyclically rotate a layer once, 
each element in the layer will take the place of the adjacent element in the counter-clockwise direction. An example rotation is shown below:


Return the matrix after applying k cyclic rotations to it.

 

Example 1:


Input: grid = [[40,10],[30,20]], k = 1
Output: [[10,20],[40,30]]
Explanation: The figures above represent the grid at every state.
Example 2:

  
Input: grid = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], k = 2
Output: [[3,4,8,12],[2,11,10,16],[1,7,6,15],[5,9,13,14]]
Explanation: The figures above represent the grid at every state.
 

Constraints:

m == grid.length
n == grid[i].length
2 <= m, n <= 50
Both m and n are even integers.
1 <= grid[i][j] <= 5000
1 <= k <= 109

class Solution
{
public:
    int dx[4] = {0, 1, 0, -1};
    int dy[4] = {1, 0, -1, 0};

    vector<vector<int>> rotateGrid(vector<vector<int>> &grid, int k)
    {
        int m = grid.size(), n = grid[0].size();
        int i0 = 0, i1 = m - 1, j0 = 0, j1 = n - 1;
        while (i0 < i1 && j0 < j1)
        {
            rotate(grid, k, i0, i1, j0, j1);
            i0++, j0++, i1--, j1--;
        }
        return grid;
    }

    void rotate(vector<vector<int>> &grid, int k, int i0, int i1, int j0, int j1)
    {
        int period = (i1 - i0 + 1) * 2 + (j1 - j0 + 1) * 2 - 4;
        k %= period;
        vector<int> vec(period, 0);
        int i = i0, j = j0, d = 0;
        for (int f = 0; f < period; ++f)
        {
            vec[f] = grid[i][j];
            if (i + dx[d] < i0 || i + dx[d] > i1 || j + dy[d] < j0 || j + dy[d] > j1)
                d = (d + 1) % 4;
            i += dx[d], j += dy[d];
        }
        i = i0, j = j0, d = 0;
        for (int f = 0; f < period; ++f)
        {
            grid[i][j] = vec[k];
            if (i + dx[d] < i0 || i + dx[d] > i1 || j + dy[d] < j0 || j + dy[d] > j1)
                d = (d + 1) % 4;
            i += dx[d], j += dy[d];
            k = (k + 1) % period;
        }
    }
};


// Source https://leetcode.com/problems/number-of-wonderful-substrings/

A wonderful string is a string where at most one letter appears an odd number of times.

For example, "ccjjc" and "abab" are wonderful, but "ab" is not.
Given a string word that consists of the first ten lowercase English letters ('a' through 'j'), return the number of wonderful non-empty substrings in word. 
If the same substring appears multiple times in word, then count each occurrence separately.

A substring is a contiguous sequence of characters in a string.

 

Example 1:

Input: word = "aba"
Output: 4
Explanation: The four wonderful substrings are underlined below:
- "aba" -> "a"
- "aba" -> "b"
- "aba" -> "a"
- "aba" -> "aba"
Example 2:

Input: word = "aabb"
Output: 9
Explanation: The nine wonderful substrings are underlined below:
- "aabb" -> "a"
- "aabb" -> "aa"
- "aabb" -> "aab"
- "aabb" -> "aabb"
- "aabb" -> "a"
- "aabb" -> "abb"
- "aabb" -> "b"
- "aabb" -> "bb"
- "aabb" -> "b"
Example 3:

Input: word = "he"
Output: 2
Explanation: The two wonderful substrings are underlined below:
- "he" -> "h"
- "he" -> "e"
 

Constraints:

1 <= word.length <= 105
word consists of lowercase English letters from 'a' to 'j'.

class Solution
{
public:
    long long wonderfulSubstrings(string word)
    {
        int mp[1024] = {0};
        mp[0] = 1;
        long long count = 0, mask = 0;
        for(auto ch : word)
        {
            mask ^= 1 << (ch - 'a');
            count += mp[mask];
            for(int i = 0; i < 10; i++) count += mp[mask ^ (1 << i)];
            mp[mask]++;
        }
        return count;
    }
};


// Source https://leetcode.com/problems/count-ways-to-build-rooms-in-an-ant-colony/

You are an ant tasked with adding n new rooms numbered 0 to n-1 to your colony. You are given the expansion plan as a 0-indexed integer array of length n, prevRoom, 
where prevRoom[i] indicates that you must build room prevRoom[i] before building room i, and these two rooms must be connected directly. 
Room 0 is already built, so prevRoom[0] = -1. The expansion plan is given such that once all the rooms are built, every room will be reachable from room 0.

You can only build one room at a time, and you can travel freely between rooms you have already built only if they are connected. 
You can choose to build any room as long as its previous room is already built.

Return the number of different orders you can build all the rooms in. Since the answer may be large, return it modulo 109 + 7.

 

Example 1:


Input: prevRoom = [-1,0,1]
Output: 1
Explanation: There is only one way to build the additional rooms: 0 → 1 → 2
Example 2:


Input: prevRoom = [-1,0,0,1,2]
Output: 6
Explanation:
The 6 ways are:
0 → 1 → 3 → 2 → 4
0 → 2 → 4 → 1 → 3
0 → 1 → 2 → 3 → 4
0 → 1 → 2 → 4 → 3
0 → 2 → 1 → 3 → 4
0 → 2 → 1 → 4 → 3
 

Constraints:

n == prevRoom.length
2 <= n <= 105
prevRoom[0] == -1
0 <= prevRoom[i] < n for all 1 <= i < n
Every room is reachable from room 0 once all the rooms are built.

ans[root] 表示构建以root为根节点的树（包含root对应的room和依赖于root的其他rooms）的方法数量
假设root的子节点有ch1, ch2, ... , ch9，sz[root] = m + 1，size[ch1] + size[ch2] + ... + size[ch9] = m
则ans[root] = 1 * ans[ch1] * ans[ch2] * ... * ans[ch9] * C(m, size[ch1]) * C(m-size[ch1], size[ch2]) * ... * C(size[ch9], size[ch9])
C(m, size[ch1]) 表示从m个位置中挑出size[ch1]个位置来放置以ch1为根节点的树

class Solution
{
public:
    const int mod = 1e9 + 7;

    vector<vector<int>> tree;
    vector<int> sz;
    vector<long long> fact, ans;

    void pre(int n)
    {
        fact.resize(n, 1);
        for(int i = 2; i < n; i++)
        {
            fact[i] = (fact[i - 1] * i) % mod;
        }
    }

    long long powmod(long long base, long long exponent)
    {
        long long ans = 1;
        while(exponent > 0)
        {
            if(exponent & 1) ans = (ans * base) % mod;
            base = (base * base) % mod;
            exponent >>= 1;
        }
        return ans;
    }

    void dfs(int root)
    {
        sz[root] = 1;
        long long prod1 = 1, prod2 = 1;
        for(auto ch : tree[root])
        {
            dfs(ch);
            sz[root] += sz[ch];
            ans[root] = (ans[root] * ans[ch]) % mod;
            prod1 = (prod1 * fact[sz[ch]]) % mod;
        }
        prod2 = fact[sz[root] - 1];
        ans[root] = (ans[root] * prod2) % mod;
        ans[root] = (ans[root] * powmod(prod1, mod - 2)) % mod;
    }

    int waysToBuildRooms(vector<int> &prevRoom)
    {
        int n = prevRoom.size();
        pre(n);
        tree.resize(n);
        ans.resize(n, 1);
        sz.resize(n, 0);
        for(int i = 1; i < n; i++)
        {
            int parent = prevRoom[i];
            tree[parent].push_back(i);
        }
        dfs(0);
        return ans[0];
    }
};


// Source https://leetcode.com/problems/build-array-from-permutation/

Given a zero-based permutation nums (0-indexed), build an array ans of the same length where ans[i] = nums[nums[i]] for each 0 <= i < nums.length and return it.

A zero-based permutation nums is an array of distinct integers from 0 to nums.length - 1 (inclusive).

 

Example 1:

Input: nums = [0,2,1,5,3,4]
Output: [0,1,2,4,5,3]
Explanation: The array ans is built as follows: 
ans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]
    = [nums[0], nums[2], nums[1], nums[5], nums[3], nums[4]]
    = [0,1,2,4,5,3]
Example 2:

Input: nums = [5,0,1,2,3,4]
Output: [4,5,0,1,2,3]
Explanation: The array ans is built as follows:
ans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]
    = [nums[5], nums[0], nums[1], nums[2], nums[3], nums[4]]
    = [4,5,0,1,2,3]
 

Constraints:

1 <= nums.length <= 1000
0 <= nums[i] < nums.length
The elements in nums are distinct.

class Solution
{
public:
    vector<int> buildArray(vector<int> &nums)
    {
        int n = nums.size();
        vector<int> vec(n);
        for(int i = 0; i < n; i++)
        {
            vec[i] = nums[nums[i]];
        }
        return vec;
    }
};


// Source https://leetcode.com/problems/eliminate-maximum-number-of-monsters/

You are playing a video game where you are defending your city from a group of n monsters. You are given a 0-indexed integer array dist of size n, 
where dist[i] is the initial distance in kilometers of the ith monster from the city.

The monsters walk toward the city at a constant speed. The speed of each monster is given to you in an integer array speed of size n, 
where speed[i] is the speed of the ith monster in kilometers per minute.

You have a weapon that, once fully charged, can eliminate a single monster. However, the weapon takes one minute to charge.The weapon is fully charged at the very start.

You lose when any monster reaches your city. If a monster reaches the city at the exact moment the weapon is fully charged, it counts as a loss, 
and the game ends before you can use your weapon.

Return the maximum number of monsters that you can eliminate before you lose, or n if you can eliminate all the monsters before they reach the city.

 

Example 1:

Input: dist = [1,3,4], speed = [1,1,1]
Output: 3
Explanation:
In the beginning, the distances of the monsters are [1,3,4]. You eliminate the first monster.
After a minute, the distances of the monsters are [X,2,3]. You eliminate the second monster.
After a minute, the distances of the monsters are [X,X,2]. You eliminate the thrid monster.
All 3 monsters can be eliminated.
Example 2:

Input: dist = [1,1,2,3], speed = [1,1,1,1]
Output: 1
Explanation:
In the beginning, the distances of the monsters are [1,1,2,3]. You eliminate the first monster.
After a minute, the distances of the monsters are [X,0,1,2], so you lose.
You can only eliminate 1 monster.
Example 3:

Input: dist = [3,2,4], speed = [5,3,2]
Output: 1
Explanation:
In the beginning, the distances of the monsters are [3,2,4]. You eliminate the first monster.
After a minute, the distances of the monsters are [X,0,2], so you lose.
You can only eliminate 1 monster.
 

Constraints:

n == dist.length == speed.length
1 <= n <= 105
1 <= dist[i], speed[i] <= 105

class Solution
{
public:
    int eliminateMaximum(vector<int> &dist, vector<int> &speed)
    {
        int n = dist.size();
        vector<double> time(n);
        for(int i = 0; i < n; i++)
        {
            time[i] = (double)dist[i] / speed[i];
        }
        sort(time.begin(), time.end());
        int count = 0;
        double currTime = 0.0;
        for(int i = 0; i < n; i++)
        {
            if(time[i] > currTime)
                count++;
            else
                return count;
            currTime += 1.0;
        }
        return count;
    }
};


// Source https://leetcode.com/problems/count-good-numbers/

A digit string is good if the digits (0-indexed) at even indices are even and the digits at odd indices are prime (2, 3, 5, or 7).

For example, "2582" is good because the digits (2 and 8) at even positions are even and the digits (5 and 2) at odd positions are prime. 
However, "3245" is not good because 3 is at an even index but is not even.
Given an integer n, return the total number of good digit strings of length n. Since the answer may be large, return it modulo 109 + 7.

A digit string is a string consisting of digits 0 through 9 that may contain leading zeros.

 

Example 1:

Input: n = 1
Output: 5
Explanation: The good numbers of length 1 are "0", "2", "4", "6", "8".
Example 2:

Input: n = 4
Output: 400
Example 3:

Input: n = 50
Output: 564908303
 

Constraints:

1 <= n <= 1015

class Solution
{
public:
    const int mod = 1e9 + 7;

    long powmod(long a, long b)
    {
        long res = 1;
        while (b > 0)
        {
            if (b & 1) res = (res * a) % mod;
            a = (a * a) % mod;
            b >>= 1;
        }
        return res;
    }

    int countGoodNumbers(long long n)
    {
        return (powmod(4, n / 2) * powmod(5, (n + 1) / 2)) % mod;
    }
};


// Source https://leetcode.com/problems/longest-common-subpath/

There is a country of n cities numbered from 0 to n - 1. In this country, there is a road connecting every pair of cities.

There are m friends numbered from 0 to m - 1 who are traveling through the country. Each one of them will take a path consisting of some cities. 
Each path is represented by an integer array that contains the visited cities in order. The path may contain a city more than once, but the same city will not be listed consecutively.

Given an integer n and a 2D integer array paths where paths[i] is an integer array representing the path of the ith friend, 
return the length of the longest common subpath that is shared by every friend's path, or 0 if there is no common subpath at all.

A subpath of a path is a contiguous sequence of cities within that path.

 

Example 1:

Input: n = 5, paths = [[0,1,2,3,4],
                       [2,3,4],
                       [4,0,1,2,3]]
Output: 2
Explanation: The longest common subpath is [2,3].
Example 2:

Input: n = 3, paths = [[0],[1],[2]]
Output: 0
Explanation: There is no common subpath shared by the three paths.
Example 3:

Input: n = 5, paths = [[0,1,2,3,4],
                       [4,3,2,1,0]]
Output: 1
Explanation: The possible longest common subpaths are [0], [1], [2], [3], and [4]. All have a length of 1.
 

Constraints:

1 <= n <= 105
m == paths.length
2 <= m <= 105
sum(paths[i].length) <= 105
0 <= paths[i][j] < n
The same city is not listed multiple times consecutively in paths[i].

class Solution
{
public:
    int longestCommonSubpath(int n, vector<vector<int>> &paths)
    {
        const int mod = 1e9 + 7;
        int ans = 0;
        int l = 1;
        int r = INT_MAX;
        for (auto &path : paths) r = min(r, (int)path.size());
        int base = 100001;
        while (l <= r)
        {
            int m = l + (r - l) / 2;
            unordered_map<int, vector<int>> hs;
            long long d = 1;
            for (int i = 0; i < m; ++i) { d = d * base % mod; }
            for (int i = 0; i < paths.size() && (i == 0 || !hs.empty()); ++i)
            {
                long long hash = 0;
                unordered_map<int, vector<int>> hs1;
                for (int j = 0; j < paths[i].size(); ++j)
                {
                    hash = (hash * base + paths[i][j]) % mod;
                    if (j >= m)
                    {
                        hash = (mod + hash - d * paths[i][j - m] % mod) % mod;
                    }
                    if (j >= m - 1)
                    {
                        if (i == 0)
                        {
                            hs1[hash].push_back(j + 1 - m);
                        }
                        else
                        {
                            if (hs.count(hash))
                            {
                                for (auto pos : hs[hash])
                                {
                                    if (equal(paths[0].begin() + pos, paths[0].begin() + pos + m, paths[i].begin() + j + 1 - m))
                                    {
                                        hs1[hash].push_back(pos);
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
                swap(hs, hs1);
            }
            if (hs.empty())
            {
                r = m - 1;
            }
            else
            {
                ans = m;
                l = m + 1;
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/count-square-sum-triples/

A square triple (a,b,c) is a triple where a, b, and c are integers and a2 + b2 = c2.

Given an integer n, return the number of square triples such that 1 <= a, b, c <= n.

 

Example 1:

Input: n = 5
Output: 2
Explanation: The square triples are (3,4,5) and (4,3,5).
Example 2:

Input: n = 10
Output: 4
Explanation: The square triples are (3,4,5), (4,3,5), (6,8,10), and (8,6,10).
 

Constraints:

1 <= n <= 250

class Solution
{
public:
    int countTriples(int n)
    {
        int count = 0;
        for(int i = 1; i <= n; i++)
        {
            for(int j = 1; j <= n; j++)
            {
                double d = sqrt(pow(i, 2) + pow(j, 2));
                if(d == int(d) && d <= n)
                    count++;
            }
        }
        return count;
    }
};


// Source https://leetcode.com/problems/nearest-exit-from-entrance-in-maze/

You are given an m x n matrix maze (0-indexed) with empty cells (represented as '.') and walls (represented as '+'). 
You are also given the entrance of the maze, where entrance = [entrancerow, entrancecol] denotes the row and column of the cell you are initially standing at.

In one step, you can move one cell up, down, left, or right. You cannot step into a cell with a wall, and you cannot step outside the maze. 
Your goal is to find the nearest exit from the entrance. An exit is defined as an empty cell that is at the border of the maze. The entrance does not count as an exit.

Return the number of steps in the shortest path from the entrance to the nearest exit, or -1 if no such path exists.

 

Example 1:


Input: maze = [["+","+",".","+"],[".",".",".","+"],["+","+","+","."]], entrance = [1,2]
Output: 1
Explanation: There are 3 exits in this maze at [1,0], [0,2], and [2,3].
Initially, you are at the entrance cell [1,2].
- You can reach [1,0] by moving 2 steps left.
- You can reach [0,2] by moving 1 step up.
It is impossible to reach [2,3] from the entrance.
Thus, the nearest exit is [0,2], which is 1 step away.
Example 2:


Input: maze = [["+","+","+"],[".",".","."],["+","+","+"]], entrance = [1,0]
Output: 2
Explanation: There is 1 exit in this maze at [1,2].
[1,0] does not count as an exit since it is the entrance cell.
Initially, you are at the entrance cell [1,0].
- You can reach [1,2] by moving 2 steps right.
Thus, the nearest exit is [1,2], which is 2 steps away.
Example 3:


Input: maze = [[".","+"]], entrance = [0,0]
Output: -1
Explanation: There are no exits in this maze.
 

Constraints:

maze.length == m
maze[i].length == n
1 <= m, n <= 100
maze[i][j] is either '.' or '+'.
entrance.length == 2
0 <= entrancerow < m
0 <= entrancecol < n
entrance will always be an empty cell.

class Solution
{
public:
    int visited[100][100];

    bool isValid(int i, int j, int m, int n)
    {
        if(i < 0 || j < 0 || i >= m || j >= n) return false;
        return true;
    }

    bool isExit(int i, int j, int m, int n)
    {
        if(i == 0 || i == m - 1 || j == 0 || j == n - 1) return true;
        return false;
    }

    int nearestExit(vector<vector<char>> &maze, vector<int> &entrance)
    {
        int m = maze.size();
        int n = maze[0].size();
        int dx[4] = {0, 1, 0, -1};
        int dy[4] = {1, 0, -1, 0};
        queue<pair<int, int>> q;
        q.push({entrance[0], entrance[1]});
        visited[entrance[0]][entrance[1]] = 1;
        int ans = 0;
        while(!q.empty())
        {
            int sz = q.size();
            for(int i = 0; i < sz; ++i)
            {
                auto p = q.front();
                q.pop();
                int x = p.first;
                int y = p.second;
                for (int dir = 0; dir < 4; ++dir)
                {
                    int row = x + dx[dir];
                    int col = y + dy[dir];
                    if(isValid(row, col, m, n) && maze[row][col] == '.' && visited[row][col] == 0)
                    {
                        if(isExit(row, col, m, n)) return ans + 1;
                        visited[row][col] = 1;
                        q.push({row, col});
                    }
                }
            }
            ++ans;
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/sum-game/

Alice and Bob take turns playing a game, with Alice starting first.

You are given a string num of even length consisting of digits and '?' characters. On each turn, a player will do the following if there is still at least one '?' in num:

Choose an index i where num[i] == '?'.
Replace num[i] with any digit between '0' and '9'.
The game ends when there are no more '?' characters in num.

For Bob to win, the sum of the digits in the first half of num must be equal to the sum of the digits in the second half. For Alice to win, the sums must not be equal.

For example, if the game ended with num = "243801", then Bob wins because 2+4+3 = 8+0+1. If the game ended with num = "243803", then Alice wins because 2+4+3 != 8+0+3.
Assuming Alice and Bob play optimally, return true if Alice will win and false if Bob will win.

 

Example 1:

Input: num = "5023"
Output: false
Explanation: There are no moves to be made.
The sum of the first half is equal to the sum of the second half: 5 + 0 = 2 + 3.
Example 2:

Input: num = "25??"
Output: true
Explanation: Alice can replace one of the '?'s with '9' and it will be impossible for Bob to make the sums equal.
Example 3:

Input: num = "?3295???"
Output: false
Explanation: It can be proven that Bob will always win. One possible outcome is:
- Alice replaces the first '?' with '9'. num = "93295???".
- Bob replaces one of the '?' in the right half with '9'. num = "932959??".
- Alice replaces one of the '?' in the right half with '2'. num = "9329592?".
- Bob replaces the last '?' in the right half with '7'. num = "93295927".
Bob wins because 9 + 3 + 2 + 9 = 5 + 9 + 2 + 7.
 

Constraints:

2 <= num.length <= 105
num.length is even.
num consists of only digits and '?'.

先统计字符串前、后一半的sum及问号数，然后分类讨论：
如果前后问号数相同，则当某个人把某一边的一个问号替换为x，另一个人可以把另一边的一个问号也替换为x
1、如果统计的前、后一半的sum相等则 Bob 胜（Alice starting first，每次Bob按照上述方法使得前、后一半的sum保持相等）
2、如果统计的前、后一半的sum不相等则 Alice 胜利
Alice starting first，最开始那次Alice在sum更大的那边加9，之后，中间每次Bob选择一个问号替换为x后，Alice选择把另一边的一个问号也替换为x，
Bob最后的那一次无论选择0到9中的哪一个，sum更大的那边还是更大

如果前后问号数不同，且前后问号数相加为奇数，则是Alice选择最后一个问号
1、如果选择最后一个问号时字符串前、后一半的sum已经相等，则最后那个问号可以替换为1到9中的任一个，然后字符串前、后一半的sum变为不相等，则 Alice 胜利
2、如果选择最后一个问号时字符串前、后一半的sum不相等，则最后那个问号可以替换为0，然后字符串前、后一半的sum仍然不相等，则 Alice 胜利

如果前后问号数不同，且前后问号数相加为偶数（相减也为偶数），则是Bob选择最后一个问号
1、数值和大的一侧问号数也多，前后不可能相等，Alice胜
Alice starting first，最开始那次Alice在sum更大问号数也多的那边加9，之后，中间每次Bob选择一个问号替换为x后，Alice选择把另一边的一个问号也替换为x，
剩余的那些问号无论选择0到9中的哪一个，sum更大的那边还是更大
2、数值和大的一侧问号数少，数值和小的一侧问号数多
当某个人把某一边的一个问号替换为x，另一个人可以把另一边的一个问号也替换为x，最后只剩下问号数多的那边还有问号（数值和小的那侧）
此时Alice把剩下的一个问号替换为x，Bob可以把剩下的另一个问号替换为9-x，最终数值和小的那侧增加cnt * 9，
a、如果diff == (cnt * 9)，则 Bob 胜
除了最开始的那次，中间每次Bob选择一个问号替换为x后，Alice选择另一个问号替换为9-x，则增加了(cnt - 1) * 9，现在考虑Alice最开始的那一次，Bob最后的那一次选择的值
b、如果diff > (cnt * 9)，则Alice最开始的那一次选择0，最终数值和小的那侧增加 0 + (cnt - 1) * 9 + m，其中m >=0 && m <= 9，可以看出增加的值 小于 diff，则 Alice 胜利
c、如果diff < (cnt * 9)，则Alice最开始的那一次选择9，最终数值和小的那侧增加 9 + (cnt - 1) * 9 + m，其中m >=0 && m <= 9，可以看出增加的值 大于 diff，则 Alice 胜利

9 - x + x= 9

class Solution
{
public:
    bool sumGame(string num)
    {
        int n = num.length();
        int lDigitSum = 0;
        int lQCount = 0;
        int rDigitSum = 0;
        int rQCount = 0;
        for(int i = 0; i < n / 2; ++i)
        {
            if(isdigit(num[i]))
            {
                lDigitSum += (num[i] - '0');
            }
            else
            {
                ++lQCount;
            }
        }

        for(int i = n / 2; i < n; ++i)
        {
            if(isdigit(num[i]))
            {
                rDigitSum += (num[i] - '0');
            }
            else
            {
                ++rQCount;
            }
        }

        if(lQCount == rQCount)
        {
            return (lDigitSum != rDigitSum);
        }

        if((lQCount + rQCount) % 2 == 1)
        {
            return true;
        }

        if( (lDigitSum > rDigitSum && lQCount > rQCount) &&
                (lDigitSum < rDigitSum && lQCount < rQCount) )
        {
            return true;
        }

        int cnt;
        int diff;
        if(lQCount > rQCount)
        {
            cnt = (lQCount - rQCount) / 2;
            diff = (rDigitSum - lDigitSum);
        }
        else
        {
            cnt = (rQCount - lQCount) / 2;
            diff = (lDigitSum - rDigitSum);
        }
        return (diff != (cnt * 9));
    }
};


// Source https://leetcode.com/problems/minimum-cost-to-reach-destination-in-time/

There is a country of n cities numbered from 0 to n - 1 where all the cities are connected by bi-directional roads. 
The roads are represented as a 2D integer array edges where edges[i] = [xi, yi, timei] denotes a road between cities xi and yi that takes timei minutes to travel. 
There may be multiple roads of differing travel times connecting the same two cities, but no road connects a city to itself.

Each time you pass through a city, you must pay a passing fee. This is represented as a 0-indexed integer array passingFees of length n 
where passingFees[j] is the amount of dollars you must pay when you pass through city j.

In the beginning, you are at city 0 and want to reach city n - 1 in maxTime minutes or less. 
The cost of your journey is the summation of passing fees for each city that you passed through at some moment of your journey (including the source and destination cities).

Given maxTime, edges, and passingFees, return the minimum cost to complete your journey, or -1 if you cannot complete it within maxTime minutes.

 

Example 1:



Input: maxTime = 30, edges = [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingFees = [5,1,2,20,20,3]
Output: 11
Explanation: The path to take is 0 -> 1 -> 2 -> 5, which takes 30 minutes and has $11 worth of passing fees.
Example 2:



Input: maxTime = 29, edges = [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingFees = [5,1,2,20,20,3]
Output: 48
Explanation: The path to take is 0 -> 3 -> 4 -> 5, which takes 26 minutes and has $48 worth of passing fees.
You cannot take path 0 -> 1 -> 2 -> 5 since it would take too long.
Example 3:

Input: maxTime = 25, edges = [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingFees = [5,1,2,20,20,3]
Output: -1
Explanation: There is no way to reach city 5 from city 0 within 25 minutes.
 

Constraints:

1 <= maxTime <= 1000
n == passingFees.length
2 <= n <= 1000
n - 1 <= edges.length <= 1000
0 <= xi, yi <= n - 1
1 <= timei <= 1000
1 <= passingFees[j] <= 1000 
The graph may contain multiple edges between two nodes.
The graph does not contain self loops.

class Solution
{
public:
    int minCost(int maxTime, vector<vector<int>> &edges, vector<int> &passingFees)
    {
        int n = passingFees.size();
        vector<vector<pair<int, int>>> adj(n);
        for(auto &e : edges)
        {
            adj[e[0]].push_back({e[1], e[2]});
            adj[e[1]].push_back({e[0], e[2]});
        }
        vector<int> dist(n, 1e9);
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        pq.push({0, n - 1});
        dist[n - 1] = 0;
        while(!pq.empty())
        {
            auto [time, node] = pq.top();
            pq.pop();
            if(dist[node] < time) continue;
            for(auto [prev, d] : adj[node])
            {
                if(time + d < dist[prev])
                {
                    dist[prev] = time + d;
                    pq.push({dist[prev], prev});
                }
            }
        }
        vector<int> cost(n, INT_MAX);
        cost[0] = 0;
        priority_queue<array<int, 3>, vector<array<int, 3>>, greater<array<int, 3>>> pq2;
        pq2.push({passingFees[0], 0, 0});
        while(!pq2.empty())
        {
            auto tp = pq2.top();
            pq2.pop();
            int f = tp[0];
            int time = tp[1];
            int node = tp[2];
            if(node == n - 1) return f;
            for(auto [next, d] : adj[node])
            {
                int new_time = time + d;
                if(new_time + dist[next] <= maxTime && cost[next] > new_time)
                {
                    cost[next] = new_time;
                    pq2.push({f + passingFees[next], new_time, next});
                }
            }
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/concatenation-of-array/

Given an integer array nums of length n, you want to create an array ans of length 2n where ans[i] == nums[i] and ans[i + n] == nums[i] for 0 <= i < n (0-indexed).

Specifically, ans is the concatenation of two nums arrays.

Return the array ans.

 

Example 1:

Input: nums = [1,2,1]
Output: [1,2,1,1,2,1]
Explanation: The array ans is formed as follows:
- ans = [nums[0],nums[1],nums[2],nums[0],nums[1],nums[2]]
- ans = [1,2,1,1,2,1]
Example 2:

Input: nums = [1,3,2,1]
Output: [1,3,2,1,1,3,2,1]
Explanation: The array ans is formed as follows:
- ans = [nums[0],nums[1],nums[2],nums[3],nums[0],nums[1],nums[2],nums[3]]
- ans = [1,3,2,1,1,3,2,1]
 

Constraints:

n == nums.length
1 <= n <= 1000
1 <= nums[i] <= 1000

class Solution
{
public:
    vector<int> getConcatenation(vector<int> &nums)
    {
        int n = nums.size();
        vector<int> vec(nums);
        vec.reserve(n + n);
        for(int i = 0; i < n; i++)
        {
            vec.push_back(nums[i]);
        }
        return vec;
    }
};


// Source https://leetcode.com/problems/unique-length-3-palindromic-subsequences/

Given a string s, return the number of unique palindromes of length three that are a subsequence of s.

Note that even if there are multiple ways to obtain the same subsequence, it is still only counted once.

A palindrome is a string that reads the same forwards and backwards.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
 

Example 1:

Input: s = "aabca"
Output: 3
Explanation: The 3 palindromic subsequences of length 3 are:
- "aba" (subsequence of "aabca")
- "aaa" (subsequence of "aabca")
- "aca" (subsequence of "aabca")
Example 2:

Input: s = "adc"
Output: 0
Explanation: There are no palindromic subsequences of length 3 in "adc".
Example 3:

Input: s = "bbcbaba"
Output: 4
Explanation: The 4 palindromic subsequences of length 3 are:
- "bbb" (subsequence of "bbcbaba")
- "bcb" (subsequence of "bbcbaba")
- "bab" (subsequence of "bbcbaba")
- "aba" (subsequence of "bbcbaba")
 

Constraints:

3 <= s.length <= 105
s consists of only lowercase English letters.


palindromes of length three
第一个字符和第三个字符必须相同，第二个字符可以为任一字符
Note that even if there are multiple ways to obtain the same subsequence, it is still only counted once.

class Solution
{
public:
    int countPalindromicSubsequence(string s)
    {
        int n = s.length();
        vector<int> first(26, -1);
        vector<int> last(26, -1);
        for(int i = 0; i < n; i++)
        {
            if(first[s[i] - 'a'] == -1)
                first[s[i] - 'a'] = i;
            last[s[i] - 'a'] = i;
        }
        int res = 0;
        for(int i = 0; i < 26; i++)
        {
            if(first[i] == -1) continue;
            int cnt = 0;
            vector<int> freq(26, 0);
            for(int j = first[i] + 1; j < last[i]; j++)
            {
                if(freq[s[j] - 'a'] == 0)
                {
                    freq[s[j] - 'a'] = 1;
                    cnt++;
                }
            }
            res += cnt;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/painting-a-grid-with-three-different-colors/

You are given two integers m and n. Consider an m x n grid where each cell is initially white. You can paint each cell red, green, or blue. All cells must be painted.

Return the number of ways to color the grid with no two adjacent cells having the same color. Since the answer can be very large, return it modulo 109 + 7.

 

Example 1:


Input: m = 1, n = 1
Output: 3
Explanation: The three possible colorings are shown in the image above.
Example 2:


Input: m = 1, n = 2
Output: 6
Explanation: The six possible colorings are shown in the image above.
Example 3:

Input: m = 5, n = 5
Output: 580986
 

Constraints:

1 <= m <= 5
1 <= n <= 1000

class Solution
{
public:
    vector<string>v;
    vector<vector<int>>adj;
    const int mod = 1e9 + 7;
    const string colors = "RGB";

    void get(int m, char prev, string s)
    {
        if(m == 0)
        {
            v.emplace_back(std::move(s));
            return;
        }
        for(auto c : colors)
        {
            if(prev != c)
                get(m - 1, c, s + c);
        }
    }

    int dp[250][1001];

    int recur(int i, int n)
    {
        if(n == 0) return 1;
        if(dp[i][n] != -1) return dp[i][n];
        int res = 0;
        for(auto j : adj[i])
        {
            res = (res + recur(j, n - 1)) % mod;
        }
        return dp[i][n] = res;
    }

    int colorTheGrid(int m, int n)
    {
        get(m, '$', "");
        int N = v.size();
        adj.resize(N);
        for(int i = 0; i < N; i++)
        {
            for(int j = i + 1; j < N; j++)
            {
                bool flag = true;
                for(int k = 0; k < m; k++)
                {
                    if(v[i][k] == v[j][k]) { flag = false; break; }
                }
                if(flag)
                {
                    adj[i].push_back(j);
                    adj[j].push_back(i);
                }
            }
        }
        int res = 0;
        memset(dp, -1, sizeof(dp));
        for(int i = 0; i < N; i++)
        {
            res = (res + recur(i, n - 1)) % mod;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/merge-bsts-to-create-single-bst/

You are given n BST (binary search tree) root nodes for n separate BSTs stored in an array trees (0-indexed). Each BST in trees has at most 3 nodes, and no two roots have the same value. 
In one operation, you can:

Select two distinct indices i and j such that the value stored at one of the leaves of trees[i] is equal to the root value of trees[j].
Replace the leaf node in trees[i] with trees[j].
Remove trees[j] from trees.
Return the root of the resulting BST if it is possible to form a valid BST after performing n - 1 operations, or null if it is impossible to create a valid BST.

A BST (binary search tree) is a binary tree where each node satisfies the following property:

Every node in the node's left subtree has a value strictly less than the node's value.
Every node in the node's right subtree has a value strictly greater than the node's value.
A leaf is a node that has no children.

 

Example 1:


Input: trees = [[2,1],[3,2,5],[5,4]]
Output: [3,2,5,1,null,4]
Explanation:
In the first operation, pick i=1 and j=0, and merge trees[0] into trees[1].
Delete trees[0], so trees = [[3,2,5,1],[5,4]].

In the second operation, pick i=0 and j=1, and merge trees[1] into trees[0].
Delete trees[1], so trees = [[3,2,5,1,null,4]].

The resulting tree, shown above, is a valid BST, so return its root.
Example 2:


Input: trees = [[5,3,8],[3,2,6]]
Output: []
Explanation:
Pick i=0 and j=1 and merge trees[1] into trees[0].
Delete trees[1], so trees = [[5,3,8,2,6]].

The resulting tree is shown above. This is the only valid operation that can be performed, but the resulting tree is not a valid BST, so return null.
Example 3:


Input: trees = [[5,4],[3]]
Output: []
Explanation: It is impossible to perform any operations.
 

Constraints:

n == trees.length
1 <= n <= 5 * 104
The number of nodes in each tree is in the range [1, 3].
Each node in the input may have children but no grandchildren.
No two roots of trees have the same value.
All the trees in the input are valid BSTs.
1 <= TreeNode.val <= 5 * 104.

class Solution
{
public:
    unordered_map<int, TreeNode *> rootmap;
    unordered_set<int> leafmap;

    TreeNode *canMerge(vector<TreeNode *> &trees)
    {
        for(auto it : trees)
        {
            rootmap[it->val] = it;
            if(it->left)
                leafmap.insert(it->left->val);
            if(it->right)
                leafmap.insert(it->right->val);
        }
        int rootCnt = 0;
        TreeNode *root = nullptr;
        for(auto it : trees)
        {
            if(leafmap.find(it->val) == leafmap.end())
            {
                if (++rootCnt > 1) return nullptr;
                root = it;                                
            }
        }
        if (rootCnt != 1) return nullptr;
        if(helper(root, INT_MIN, INT_MAX))
        {
            if(rootmap.size() == 1)
                return root;
        }
        return nullptr;
    }

    bool helper(TreeNode *root, int low, int high)
    {
        if(!root)
            return true;
        if(root->val > high || root->val < low)
            return false;
        if(root->left)
        {
            int cur = root->left->val;
            if(rootmap.find(cur) != rootmap.end())
            {
                root->left = rootmap[cur];
                rootmap.erase(cur);
            }
        }

        if(root->right)
        {
            int cur = root->right->val;
            if(rootmap.find(cur) != rootmap.end())
            {
                root->right = rootmap[cur];
                rootmap.erase(cur);
            }
        }

        if(!helper(root->left, low, root->val - 1))
            return false;

        if(!helper(root->right, root->val + 1, high))
            return false;

        return true;
    }
};


// Source https://leetcode.com/problems/maximum-number-of-words-you-can-type/

There is a malfunctioning keyboard where some letter keys do not work. All other keys on the keyboard work properly.

Given a string text of words separated by a single space (no leading or trailing spaces) and a string brokenLetters of all distinct letter keys that are broken, 
return the number of words in text you can fully type using this keyboard.

 

Example 1:

Input: text = "hello world", brokenLetters = "ad"
Output: 1
Explanation: We cannot type "world" because the 'd' key is broken.
Example 2:

Input: text = "leet code", brokenLetters = "lt"
Output: 1
Explanation: We cannot type "leet" because the 'l' and 't' keys are broken.
Example 3:

Input: text = "leet code", brokenLetters = "e"
Output: 0
Explanation: We cannot type either word because the 'e' key is broken.
 

Constraints:

1 <= text.length <= 104
0 <= brokenLetters.length <= 26
text consists of words separated by a single space without any leading or trailing spaces.
Each word only consists of lowercase English letters.
brokenLetters consists of distinct lowercase English letters.

class Solution
{
public:
    int canBeTypedWords(string text, string brokenLetters)
    {
        int arr[26] = {0};
        for (auto ch : brokenLetters) arr[ch - 'a'] = 1;
        stringstream ss(text);
        string t;
        int ans = 0;
        while (ss >> t)
        {
            bool flag = true;
            for (auto ch: t)
            {
                if (arr[ch - 'a']) { flag = false; break; }
            }
            if (flag) ++ans;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/add-minimum-number-of-rungs/

You are given a strictly increasing integer array rungs that represents the height of rungs on a ladder. You are currently on the floor at height 0, and you want to reach the last rung.

You are also given an integer dist. You can only climb to the next highest rung if the distance between where you are currently at (the floor or on a rung) and the next rung is at most dist. 
You are able to insert rungs at any positive integer height if a rung is not already there.

Return the minimum number of rungs that must be added to the ladder in order for you to climb to the last rung.

 

Example 1:

Input: rungs = [1,3,5,10], dist = 2
Output: 2
Explanation:
You currently cannot reach the last rung.
Add rungs at heights 7 and 8 to climb this ladder. 
The ladder will now have rungs at [1,3,5,7,8,10].
Example 2:

Input: rungs = [3,6,8,10], dist = 3
Output: 0
Explanation:
This ladder can be climbed without adding additional rungs.
Example 3:

Input: rungs = [3,4,6,7], dist = 2
Output: 1
Explanation:
You currently cannot reach the first rung from the ground.
Add a rung at height 1 to climb this ladder.
The ladder will now have rungs at [1,3,4,6,7].
 

Constraints:

1 <= rungs.length <= 105
1 <= rungs[i] <= 109
1 <= dist <= 109
rungs is strictly increasing.

class Solution
{
public:
    int addRungs(vector<int> &rungs, int dist)
    {
        int n = rungs.size();
        int res = 0;
        for(int i = 1; i < n; ++i)
        {
            if(rungs[i] - rungs[i - 1] > dist)
                res += (rungs[i] - 1 - rungs[i - 1]) / dist;
        }
        if(rungs[0] > dist)
            res += (rungs[0] - 1) / dist;
        return res;
    }
};


// Source https://leetcode.com/problems/maximum-number-of-points-with-cost/

You are given an m x n integer matrix points (0-indexed). Starting with 0 points, you want to maximize the number of points you can get from the matrix.

To gain points, you must pick one cell in each row. Picking the cell at coordinates (r, c) will add points[r][c] to your score.

However, you will lose points if you pick a cell too far from the cell that you picked in the previous row. 
For every two adjacent rows r and r + 1 (where 0 <= r < m - 1), picking cells at coordinates (r, c1) and (r + 1, c2) will subtract abs(c1 - c2) from your score.

Return the maximum number of points you can achieve.

abs(x) is defined as:

x for x >= 0.
-x for x < 0.
 

Example 1:


Input: points = [[1,2,3],[1,5,1],[3,1,1]]
Output: 9
Explanation:
The blue cells denote the optimal cells to pick, which have coordinates (0, 2), (1, 1), and (2, 0).
You add 3 + 5 + 3 = 11 to your score.
However, you must subtract abs(2 - 1) + abs(1 - 0) = 2 from your score.
Your final score is 11 - 2 = 9.
Example 2:


Input: points = [[1,5],[2,3],[4,2]]
Output: 11
Explanation:
The blue cells denote the optimal cells to pick, which have coordinates (0, 1), (1, 1), and (2, 0).
You add 5 + 3 + 4 = 12 to your score.
However, you must subtract abs(1 - 1) + abs(1 - 0) = 1 from your score.
Your final score is 12 - 1 = 11.
 

Constraints:

m == points.length
n == points[r].length
1 <= m, n <= 105
1 <= m * n <= 105
0 <= points[r][c] <= 105

dp[i][j] 表示已经pick 前 i + 1 行（points[0] 到 points[i]），points[i] pick points[i][j]，the maximum number of points
dp[i][j] = points[i][j] + dp[i-1][k] - abs(j-k)
如果j >=k，则dp[i][j] = points[i][j] - j + dp[i-1][k] + k
如果j <=k，则dp[i][j] = points[i][j] + j + dp[i-1][k] - k

class Solution
{
public:

    long long maxPoints(vector<vector<int>> &points)
    {
        long long n = points.size();
        long long m = points[0].size();

        vector<vector<long long>> dp(n, vector<long long> (m, INT_MIN));
        for(int i = 0; i < m; i++)
        {
            dp[0][i] = points[0][i];
        }
        for(int i = 1; i < n; i++)
        {
            long long val1 = INT_MIN;
            long long val2 = INT_MIN;

            // 如果j >=k，则dp[i][j] = points[i][j] - j + dp[i-1][k] + k
            for(int j = 0; j < m; j++)
            {
                if(dp[i - 1][j] + j > val1)
                {
                    val1 = dp[i - 1][j] + j;
                }
                if(points[i][j] - j + val1 > dp[i][j])
                {
                    dp[i][j] = points[i][j] - j + val1;
                }
            }

            // 如果j <=k，则dp[i][j] = points[i][j] + j + dp[i-1][k] - k
            // right to left (checking for the max points that can be obtained using only right side values) and updating the dp array
            for(int j = m - 1; j >= 0; j--)
            {
                if(dp[i - 1][j] - j > val2)
                {
                    val2 = dp[i - 1][j] - j;
                }
                if(points[i][j] + j + val2 > dp[i][j])
                {
                    dp[i][j] = points[i][j] + j + val2;
                }
            }
        }

        long long ans = INT_MIN;
        for(int i = 0; i < m; i++)
        {
            if(dp[n - 1][i] > ans)
            {
                ans = dp[n - 1][i];
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/maximum-genetic-difference-query/

There is a rooted tree consisting of n nodes numbered 0 to n - 1. Each node's number denotes its unique genetic value (i.e. the genetic value of node x is x). 
The genetic difference between two genetic values is defined as the bitwise-XOR of their values. You are given the integer array parents, where parents[i] is the parent for node i. 
If node x is the root of the tree, then parents[x] == -1.

You are also given the array queries where queries[i] = [nodei, vali]. For each query i, find the maximum genetic difference between vali and pi, 
where pi is the genetic value of any node that is on the path between nodei and the root (including nodei and the root). More formally, you want to maximize vali XOR pi.

Return an array ans where ans[i] is the answer to the ith query.

 

Example 1:


Input: parents = [-1,0,1,1], queries = [[0,2],[3,2],[2,5]]
Output: [2,3,7]
Explanation: The queries are processed as follows:
- [0,2]: The node with the maximum genetic difference is 0, with a difference of 2 XOR 0 = 2.
- [3,2]: The node with the maximum genetic difference is 1, with a difference of 2 XOR 1 = 3.
- [2,5]: The node with the maximum genetic difference is 2, with a difference of 5 XOR 2 = 7.
Example 2:


Input: parents = [3,7,-1,2,0,7,0,2], queries = [[4,6],[1,15],[0,5]]
Output: [6,14,7]
Explanation: The queries are processed as follows:
- [4,6]: The node with the maximum genetic difference is 0, with a difference of 6 XOR 0 = 6.
- [1,15]: The node with the maximum genetic difference is 1, with a difference of 15 XOR 1 = 14.
- [0,5]: The node with the maximum genetic difference is 2, with a difference of 5 XOR 2 = 7.
 

Constraints:

2 <= parents.length <= 105
0 <= parents[i] <= parents.length - 1 for every node i that is not the root.
parents[root] == -1
1 <= queries.length <= 3 * 104
0 <= nodei <= parents.length - 1
0 <= vali <= 2 * 105

prefixes[(1 << (n - i)) - 1 + (x >> i)] 记录x的前 1 位，前2位，前3位，前4位，前5位，前6位，... ，前n位

prefixes[0] 和 prefixes[(1 << (n+1)) - 1] 没使用

prefixes[(1 << (n   )) - 1 + (x >> 0)] -> prefixes[(1 << (n   )) - 1 + 0] 到 prefixes[(1 << (n   )) - 1 + (1 << (n   )) - 1] 
prefixes[(1 << (n-1)) - 1 + (x >> 1)] -> prefixes[(1 << (n-1)) - 1 + 0] 到 prefixes[(1 << (n-1)) - 1 + (1 << (n-1)) - 1] 
prefixes[(1 << (n-2)) - 1 + (x >> 2)] -> prefixes[(1 << (n-2)) - 1 + 0] 到 prefixes[(1 << (n-2)) - 1 + (1 << (n-2)) - 1] 
...
prefixes[(1 << (6)) - 1 + (x >> (n-6))] -> prefixes[63 + 0] 到 prefixes[63 + 63] 
prefixes[(1 << (5)) - 1 + (x >> (n-5))] -> prefixes[31 + 0] 到 prefixes[31 + 31] 
prefixes[(1 << (4)) - 1 + (x >> (n-4))] -> prefixes[15 + 0] 到 prefixes[15 + 15] 
prefixes[(1 << (3)) - 1 + (x >> (n-3))] -> prefixes[7 + 0] 到 prefixes[7 + 7] 
prefixes[(1 << (2)) - 1 + (x >> (n-2))] -> prefixes[3 + 0] 到 prefixes[3 + 3] 
prefixes[(1 << (1)) - 1 + (x >> (n-1))] -> prefixes[1 + 0] 到 prefixes[1 + 1] 

template<int n>
class BitTrie
{
public:
    int prefixes[1 << (n + 1)];

    void add(int x)
    {
        for (int i = n - 1; i >= 0; --i)
            ++prefixes[(1 << (n - i)) - 1 + (x >> i)];
    }

    void remove(int x)
    {
        for (int i = n - 1; i >= 0; --i)
            --prefixes[(1 << (n - i)) - 1 + (x >> i)];
    }

    // 查找当前BitTrie中与x差异最小的数
    // i = n-1，对应x的前1位（从最高位开始）
    // i = n-2，对应x的前2位
    // ...
    // i = 0，对应x的前n位
    int match(int x)
    {
        for (int i = n - 1; i >= 0; --i)
        {
            if (prefixes[(1 << (n - i)) - 1 + (x >> i)] == 0)
                x ^= 1 << i;
        }
        return x;
    }
};

class Solution
{
public:

    static constexpr int n = 18, m = (1 << n) - 1;

    BitTrie<n> trie;
    vector<vector<int>> tree;
    vector<vector<pair<int, int>>> values;
    vector<int> result;

    void search(int node)
    {
        trie.add(node);
        for (auto [query, value] : values[node])
            result[query] = value ^ trie.match(value ^ m);
        for (int child : tree[node])
            search(child);
        trie.remove(node);
    }

    vector<int> maxGeneticDifference(vector<int> &parents, vector<vector<int>> &queries)
    {
        result.resize(queries.size());
        tree.resize(parents.size());
        values.resize(parents.size());
        int root = -1;
        for (int i = 0; i < parents.size(); ++i)
        {
            if (parents[i] != -1)
                tree[parents[i]].push_back(i);
            else
                root = i;
        }
        for (int i = 0; i < queries.size(); ++i)
        {
            values[queries[i][0]].push_back({ i, queries[i][1] });
        }
        search(root);
        return result;
    }
};



// Source https://leetcode.com/problems/check-if-all-characters-have-equal-number-of-occurrences/

Given a string s, return true if s is a good string, or false otherwise.

A string s is good if all the characters that appear in s have the same number of occurrences (i.e., the same frequency).

 

Example 1:

Input: s = "abacbc"
Output: true
Explanation: The characters that appear in s are 'a', 'b', and 'c'. All characters occur 2 times in s.
Example 2:

Input: s = "aaabb"
Output: false
Explanation: The characters that appear in s are 'a' and 'b'.
'a' occurs 3 times while 'b' occurs 2 times, which is not the same number of times.
 

Constraints:

1 <= s.length <= 1000
s consists of lowercase English letters.

class Solution
{
public:
    bool areOccurrencesEqual(string s)
    {
        int n = s.length();
        int freq[26] = {0};
        for(int i = 0; i < n; i++)
        {
            freq[s[i]-'a']++;
        }
        int i;
        int cnt;
        for (i = 0; i < 26; ++i)
        {
            if(freq[i] > 0) {cnt = freq[i]; break; }
        }
        for (; i < 26; ++i)
        {
            if(freq[i] > 0 && freq[i] != cnt) return false;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/the-number-of-the-smallest-unoccupied-chair/

There is a party where n friends numbered from 0 to n - 1 are attending. There is an infinite number of chairs in this party that are numbered from 0 to infinity. 
When a friend arrives at the party, they sit on the unoccupied chair with the smallest number.

For example, if chairs 0, 1, and 5 are occupied when a friend comes, they will sit on chair number 2.
When a friend leaves the party, their chair becomes unoccupied at the moment they leave. If another friend arrives at that same moment, they can sit in that chair.

You are given a 0-indexed 2D integer array times where times[i] = [arrivali, leavingi], indicating the arrival and leaving times of the ith friend respectively, 
and an integer targetFriend. All arrival times are distinct.

Return the chair number that the friend numbered targetFriend will sit on.

 

Example 1:

Input: times = [[1,4],[2,3],[4,6]], targetFriend = 1
Output: 1
Explanation: 
- Friend 0 arrives at time 1 and sits on chair 0.
- Friend 1 arrives at time 2 and sits on chair 1.
- Friend 1 leaves at time 3 and chair 1 becomes empty.
- Friend 0 leaves at time 4 and chair 0 becomes empty.
- Friend 2 arrives at time 4 and sits on chair 0.
Since friend 1 sat on chair 1, we return 1.
Example 2:

Input: times = [[3,10],[1,5],[2,6]], targetFriend = 0
Output: 2
Explanation: 
- Friend 1 arrives at time 1 and sits on chair 0.
- Friend 2 arrives at time 2 and sits on chair 1.
- Friend 0 arrives at time 3 and sits on chair 2.
- Friend 1 leaves at time 5 and chair 0 becomes empty.
- Friend 2 leaves at time 6 and chair 1 becomes empty.
- Friend 0 leaves at time 10 and chair 2 becomes empty.
Since friend 0 sat on chair 2, we return 2.
 

Constraints:

n == times.length
2 <= n <= 104
times[i].length == 2
1 <= arrivali < leavingi <= 105
0 <= targetFriend <= n - 1
Each arrivali time is distinct.

class Solution
{
public:
    int smallestChair(vector<vector<int>> &times, int targetFriend)
    {
        int n = times.size();
        vector<int>v = times[targetFriend];
        sort(times.begin(), times.end());
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        priority_queue<int, vector<int>, greater<int>> pq2;
        int next = 0;
        for(int i = 0; i < n; i++)
        {
            while(!pq.empty() && pq.top().first <= times[i][0])
            {
                pq2.push(pq.top().second);
                pq.pop();
            }
            if (!pq2.empty())
            {
                int chair = pq2.top();
                pq2.pop();
                if(times[i] == v)
                {
                    return chair;
                }
                pq.push({times[i][1], chair});
            }
            else
            {
                if(times[i] == v)
                {
                    return next;
                }
                pq.push({times[i][1], next});
                ++next;
            }
        }
        return 0;
    }
};


// Source https://leetcode.com/problems/describe-the-painting/

There is a long and thin painting that can be represented by a number line. The painting was painted with multiple overlapping segments where each segment was painted with a unique color. 
You are given a 2D integer array segments, where segments[i] = [starti, endi, colori] represents the half-closed segment [starti, endi) with colori as the color.

The colors in the overlapping segments of the painting were mixed when it was painted. When two or more colors mix, they form a new color that can be represented as a set of mixed colors.

For example, if colors 2, 4, and 6 are mixed, then the resulting mixed color is {2,4,6}.
For the sake of simplicity, you should only output the sum of the elements in the set rather than the full set.

You want to describe the painting with the minimum number of non-overlapping half-closed segments of these mixed colors. 
These segments can be represented by the 2D array painting where painting[j] = [leftj, rightj, mixj] describes a half-closed segment [leftj, rightj) with the mixed color sum of mixj.

For example, the painting created with segments = [[1,4,5],[1,7,7]] can be described by painting = [[1,4,12],[4,7,7]] because:
[1,4) is colored {5,7} (with a sum of 12) from both the first and second segments.
[4,7) is colored {7} from only the second segment.
Return the 2D array painting describing the finished painting (excluding any parts that are not painted). You may return the segments in any order.

A half-closed segment [a, b) is the section of the number line between points a and b including point a and not including point b.

 

Example 1:


Input: segments = [[1,4,5],[4,7,7],[1,7,9]]
Output: [[1,4,14],[4,7,16]]
Explanation: The painting can be described as follows:
- [1,4) is colored {5,9} (with a sum of 14) from the first and third segments.
- [4,7) is colored {7,9} (with a sum of 16) from the second and third segments.
Example 2:


Input: segments = [[1,7,9],[6,8,15],[8,10,7]]
Output: [[1,6,9],[6,7,24],[7,8,15],[8,10,7]]
Explanation: The painting can be described as follows:
- [1,6) is colored 9 from the first segment.
- [6,7) is colored {9,15} (with a sum of 24) from the first and second segments.
- [7,8) is colored 15 from the second segment.
- [8,10) is colored 7 from the third segment.
Example 3:


Input: segments = [[1,4,5],[1,4,7],[4,7,1],[4,7,11]]
Output: [[1,4,12],[4,7,12]]
Explanation: The painting can be described as follows:
- [1,4) is colored {5,7} (with a sum of 12) from the first and second segments.
- [4,7) is colored {1,11} (with a sum of 12) from the third and fourth segments.
Note that returning a single segment [1,7) is incorrect because the mixed color sets are different.
 

Constraints:

1 <= segments.length <= 2 * 104
segments[i].length == 3
1 <= starti < endi <= 105
1 <= colori <= 109
Each colori is distinct.

class Solution
{
public:
    vector<vector<long long>> splitPainting(vector<vector<int>> &segments)
    {
        vector<pair<int, int>> p;
        for(int i = 0; i < segments.size(); i++)
        {
            p.push_back({segments[i][0], segments[i][2]});
            p.push_back({segments[i][1], -segments[i][2]});
        }
        sort(p.begin(), p.end(),
             [](const pair<int, int> &a, const pair<int, int> &b) -> bool
        {
            return a.first < b.first;
        });
        vector<vector<long long>> res;
        long long sum = p[0].second;
        for(int i = 1; i < p.size(); i++)
        {
            if (p[i - 1].first != p[i].first && sum != 0)
                res.push_back({p[i - 1].first, p[i].first, sum});
            sum += p[i].second;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/number-of-visible-people-in-a-queue/

There are n people standing in a queue, and they numbered from 0 to n - 1 in left to right order. 
You are given an array heights of distinct integers where heights[i] represents the height of the ith person.

A person can see another person to their right in the queue if everybody in between is shorter than both of them. 
More formally, the ith person can see the jth person if i < j and min(heights[i], heights[j]) > max(heights[i+1], heights[i+2], ..., heights[j-1]).

Return an array answer of length n where answer[i] is the number of people the ith person can see to their right in the queue.

 

Example 1:



Input: heights = [10,6,8,5,11,9]
Output: [3,1,2,1,1,0]
Explanation:
Person 0 can see person 1, 2, and 4.
Person 1 can see person 2.
Person 2 can see person 3 and 4.
Person 3 can see person 4.
Person 4 can see person 5.
Person 5 can see no one since nobody is to the right of them.
Example 2:

Input: heights = [5,1,2,3,10]
Output: [4,1,1,1,0]
 

Constraints:

n == heights.length
1 <= n <= 105
1 <= heights[i] <= 105
All the values of heights are unique.

class Solution
{
public:
    vector<int> canSeePersonsCount(vector<int> &heights)
    {
        int n = heights.size();
        vector<int> ans(n, 0);
        stack<int> st;
        st.push(heights[n - 1]);
        for(int i = n - 2; i >= 0; --i)
        {
            int curr_height = heights[i];
            int cnt = 0;
            while(!st.empty() && curr_height > st.top())
            {
                st.pop();
                cnt++;
            }
            if (!st.empty()) ++cnt;
            ans[i] = cnt;
            st.push(curr_height);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/sum-of-digits-of-string-after-convert/

You are given a string s consisting of lowercase English letters, and an integer k.

First, convert s into an integer by replacing each letter with its position in the alphabet (i.e., replace 'a' with 1, 'b' with 2, ..., 'z' with 26). 
Then, transform the integer by replacing it with the sum of its digits. Repeat the transform operation k times in total.

For example, if s = "zbax" and k = 2, then the resulting integer would be 8 by the following operations:

Convert: "zbax" ➝ "(26)(2)(1)(24)" ➝ "262124" ➝ 262124
Transform #1: 262124 ➝ 2 + 6 + 2 + 1 + 2 + 4 ➝ 17
Transform #2: 17 ➝ 1 + 7 ➝ 8
Return the resulting integer after performing the operations described above.

 

Example 1:

Input: s = "iiii", k = 1
Output: 36
Explanation: The operations are as follows:
- Convert: "iiii" ➝ "(9)(9)(9)(9)" ➝ "9999" ➝ 9999
- Transform #1: 9999 ➝ 9 + 9 + 9 + 9 ➝ 36
Thus the resulting integer is 36.
Example 2:

Input: s = "leetcode", k = 2
Output: 6
Explanation: The operations are as follows:
- Convert: "leetcode" ➝ "(12)(5)(5)(20)(3)(15)(4)(5)" ➝ "12552031545" ➝ 12552031545
- Transform #1: 12552031545 ➝ 1 + 2 + 5 + 5 + 2 + 0 + 3 + 1 + 5 + 4 + 5 ➝ 33
- Transform #2: 33 ➝ 3 + 3 ➝ 6
Thus the resulting integer is 6.
Example 3:

Input: s = "zbax", k = 2
Output: 8
 

Constraints:

1 <= s.length <= 100
1 <= k <= 10
s consists of lowercase English letters.

class Solution
{
public:
    int getLucky(string s, int k)
    {
        vector<int> sumDig(27, 0);
        for(int i = 1; i <= 26; i++)
        {
            sumDig[i] = (i / 10) + (i % 10);
        }
        int ans = 0;
        for(char c : s)
        {
            ans += sumDig[c - 'a' + 1];
        }
        if (k == 1) return ans;
        --k;
        while (k > 0)
        {
            string num = to_string(ans);
            ans = 0;
            for(char c : num)
            {
                ans += (c - '0');
            }
            --k;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/largest-number-after-mutating-substring/

You are given a string num, which represents a large integer. You are also given a 0-indexed integer array change of length 10 that maps each digit 0-9 to another digit. 
More formally, digit d maps to digit change[d].

You may choose to mutate a single substring of num. To mutate a substring, replace each digit num[i] with the digit it maps to in change (i.e. replace num[i] with change[num[i]]).

Return a string representing the largest possible integer after mutating (or choosing not to) a single substring of num.

A substring is a contiguous sequence of characters within the string.

 

Example 1:

Input: num = "132", change = [9,8,5,0,3,6,4,2,6,8]
Output: "832"
Explanation: Replace the substring "1":
- 1 maps to change[1] = 8.
Thus, "132" becomes "832".
"832" is the largest number that can be created, so return it.
Example 2:

Input: num = "021", change = [9,4,3,5,7,2,1,9,0,6]
Output: "934"
Explanation: Replace the substring "021":
- 0 maps to change[0] = 9.
- 2 maps to change[2] = 3.
- 1 maps to change[1] = 4.
Thus, "021" becomes "934".
"934" is the largest number that can be created, so return it.
Example 3:

Input: num = "5", change = [1,4,7,5,3,2,5,6,9,4]
Output: "5"
Explanation: "5" is already the largest number that can be created, so return it.
 

Constraints:

1 <= num.length <= 105
num consists of only digits 0-9.
change.length == 10
0 <= change[d] <= 9

class Solution
{
public:
    string maximumNumber(string num, vector<int> &change)
    {
        int n = num.length();
        int i;
        for(i = 0; i < n; i++)
        {
            int d = num[i] - '0';
            if(change[d] > d)
            {
                break;
            }
        }
        for(; i < n; i++)
        {
            int d = num[i] - '0';
            if(change[d] < d)
            {
                break;
            }
            num[i] = change[d] + '0';
        }
        return num;
    }
};


// Source https://leetcode.com/problems/maximum-compatibility-score-sum/

There is a survey that consists of n questions where each question's answer is either 0 (no) or 1 (yes).

The survey was given to m students numbered from 0 to m - 1 and m mentors numbered from 0 to m - 1. 
The answers of the students are represented by a 2D integer array students where students[i] is an integer array that contains the answers of the ith student (0-indexed). 
The answers of the mentors are represented by a 2D integer array mentors where mentors[j] is an integer array that contains the answers of the jth mentor (0-indexed).

Each student will be assigned to one mentor, and each mentor will have one student assigned to them. 
The compatibility score of a student-mentor pair is the number of answers that are the same for both the student and the mentor.

For example, if the student's answers were [1, 0, 1] and the mentor's answers were [0, 0, 1], then their compatibility score is 2 because only the second and the third answers are the same.
You are tasked with finding the optimal student-mentor pairings to maximize the sum of the compatibility scores.

Given students and mentors, return the maximum compatibility score sum that can be achieved.

 

Example 1:

Input: students = [[1,1,0],[1,0,1],[0,0,1]], mentors = [[1,0,0],[0,0,1],[1,1,0]]
Output: 8
Explanation: We assign students to mentors in the following way:
- student 0 to mentor 2 with a compatibility score of 3.
- student 1 to mentor 0 with a compatibility score of 2.
- student 2 to mentor 1 with a compatibility score of 3.
The compatibility score sum is 3 + 2 + 3 = 8.
Example 2:

Input: students = [[0,0],[0,0],[0,0]], mentors = [[1,1],[1,1],[1,1]]
Output: 0
Explanation: The compatibility score of any student-mentor pair is 0.
 

Constraints:

m == students.length == mentors.length
n == students[i].length == mentors[j].length
1 <= m, n <= 8
students[i][k] is either 0 or 1.
mentors[j][k] is either 0 or 1.

class Solution
{
public:
    int m, n;
    int scores[10][10];
    int ans;

    int compatScore(vector<int> &student, vector<int> &mentor)
    {
        int ans = 0;
        for(int i = 0; i < n; i++)
        {
            if(student[i] == mentor[i])
            {
                ans++;
            }
        }
        return ans;
    }

    void backtrack(vector<bool> &seen, int curr, int sindex)
    {
        if(sindex == m)
        {
            ans = max(ans, curr);
            return;
        }
        for(int i = 0; i < m; i++)
        {
            if(!seen[i])
            {
                seen[i] = true;
                backtrack(seen, curr + scores[sindex][i], sindex + 1);
                seen[i] = false;
            }
        }
    }

    int maxCompatibilitySum(vector<vector<int>> &students, vector<vector<int>> &mentors)
    {
        ans = 0;
        m = students.size();
        n = students[0].size();
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < m; j++)
            {
                scores[i][j] = compatScore(students[i], mentors[j]);
            }
        }
        vector<bool>seen(m);
        backtrack(seen, 0, 0);
        return ans;
    }
};


// Source https://leetcode.com/problems/delete-duplicate-folders-in-system/

Due to a bug, there are many duplicate folders in a file system. You are given a 2D array paths, where paths[i] is an array representing an absolute path to the ith folder in the file system.

For example, ["one", "two", "three"] represents the path "/one/two/three".
Two folders (not necessarily on the same level) are identical if they contain the same non-empty set of identical subfolders and underlying subfolder structure. 
The folders do not need to be at the root level to be identical. If two or more folders are identical, then mark the folders as well as all their subfolders.

For example, folders "/a" and "/b" in the file structure below are identical. They (as well as their subfolders) should all be marked:
/a
/a/x
/a/x/y
/a/z
/b
/b/x
/b/x/y
/b/z
However, if the file structure also included the path "/b/w", then the folders "/a" and "/b" would not be identical. 
Note that "/a/x" and "/b/x" would still be considered identical even with the added folder.
Once all the identical folders and their subfolders have been marked, the file system will delete all of them. 
The file system only runs the deletion once, so any folders that become identical after the initial deletion are not deleted.

Return the 2D array ans containing the paths of the remaining folders after deleting all the marked folders. The paths may be returned in any order.

 

Example 1:


Input: paths = [["a"],["c"],["d"],["a","b"],["c","b"],["d","a"]]
Output: [["d"],["d","a"]]
Explanation: The file structure is as shown.
Folders "/a" and "/c" (and their subfolders) are marked for deletion because they both contain an empty
folder named "b".
Example 2:


Input: paths = [["a"],["c"],["a","b"],["c","b"],["a","b","x"],["a","b","x","y"],["w"],["w","y"]]
Output: [["c"],["c","b"],["a"],["a","b"]]
Explanation: The file structure is as shown. 
Folders "/a/b/x" and "/w" (and their subfolders) are marked for deletion because they both contain an empty folder named "y".
Note that folders "/a" and "/c" are identical after the deletion, but they are not deleted because they were not marked beforehand.
Example 3:


Input: paths = [["a","b"],["c","d"],["c"],["a"]]
Output: [["c"],["c","d"],["a"],["a","b"]]
Explanation: All folders are unique in the file system.
Note that the returned array can be in a different order as the order does not matter.
 

Constraints:

1 <= paths.length <= 2 * 104
1 <= paths[i].length <= 500
1 <= paths[i][j].length <= 10
1 <= sum(paths[i][j].length) <= 2 * 105
path[i][j] consists of lowercase English letters.
No two paths lead to the same folder.
For any folder not at the root level, its parent folder will also be in the input.

先把paths转换为以root为根节点的树状结构，再dfs(root)，使用tree_map和content_map来排重，同时mark重复的节点

class Solution
{
public:

    struct Node
    {
        string val;
        bool skip = false;
        unordered_map<string, Node *> next;
        Node() = default;
        Node(string v) : val{std::move(v)} {};
    };

    int count;
    unordered_map<string, pair<int, Node *>> tree_map;
    unordered_map<string, Node *> content_map;
    vector<vector<string>> ans;

    int dfs(Node *n)
    {
        vector<int> ids;
        for(auto &p : n->next) ids.push_back(dfs(p.second));
        sort(ids.begin(), ids.end());
        string tree_key = n->val;
        string content_key;
        for(auto id : ids) content_key.append("," + to_string(id));
        tree_key.append(content_key);
        // 指向被插入元素，或若不发生插入则为既存元素的迭代器，和指代插入是否发生的 bool （若发生插入则为 true ，否则为 false ）
        auto [it, ins] = tree_map.try_emplace(tree_key, make_pair(count, n));
        if(ins) ++count;
        if(!ids.empty())
        {
            // 指向被插入元素，或若不发生插入则为既存元素的迭代器，和指代插入是否发生的 bool （若发生插入则为 true ，否则为 false ）
            auto [it2, ins2] = content_map.try_emplace(content_key, n);
            if(!ins2)
            {
                n->skip = true;
                it2->second->skip = true;
            }
        }
        return it->second.first;
    }

    void get_paths(Node *n, vector<string> &path)
    {
        if(n->skip) return;
        path.emplace_back(std::move(n->val));
        ans.push_back(path);
        for(auto &p : n->next) get_paths(p.second, path);
        path.pop_back();
    }

    vector<vector<string>> deleteDuplicateFolder(vector<vector<string>> &paths)
    {
        auto root = new Node();
        for(auto &v : paths)
        {
            auto curr = root;
            for(auto &k : v)
            {
                if(curr->next.find(k) == curr->next.end()) curr->next[k] = new Node(k);
                curr = curr->next[k];
            }
        }
        count = 1;
        dfs(root);
        vector<string> path;
        for(auto &p : root->next) get_paths(p.second, path);
        return ans;
    }
};


// Source https://leetcode.com/problems/three-divisors/

Given an integer n, return true if n has exactly three positive divisors. Otherwise, return false.

An integer m is a divisor of n if there exists an integer k such that n = k * m.

 

Example 1:

Input: n = 2
Output: false
Explantion: 2 has only two divisors: 1 and 2.
Example 2:

Input: n = 4
Output: true
Explantion: 4 has three divisors: 1, 2, and 4.
 

Constraints:

1 <= n <= 104

class Solution
{
public:

    bool isThree(int n)
    {
        int num_divs = 0;
        for (int i = 1; i <= n; i++)
        {
            if (n % i == 0)
            {
                num_divs++;
            }
        }
        return num_divs == 3;
    }
};


// Source https://leetcode.com/problems/maximum-number-of-weeks-for-which-you-can-work/

There are n projects numbered from 0 to n - 1. You are given an integer array milestones where each milestones[i] denotes the number of milestones the ith project has.

You can work on the projects following these two rules:

Every week, you will finish exactly one milestone of one project. You must work every week.
You cannot work on two milestones from the same project for two consecutive weeks.
Once all the milestones of all the projects are finished, or if the only milestones that you can work on will cause you to violate the above rules, you will stop working. 
Note that you may not be able to finish every project's milestones due to these constraints.

Return the maximum number of weeks you would be able to work on the projects without violating the rules mentioned above.

 

Example 1:

Input: milestones = [1,2,3]
Output: 6
Explanation: One possible scenario is:
​​​​- During the 1st week, you will work on a milestone of project 0.
- During the 2nd week, you will work on a milestone of project 2.
- During the 3rd week, you will work on a milestone of project 1.
- During the 4th week, you will work on a milestone of project 2.
- During the 5th week, you will work on a milestone of project 1.
- During the 6th week, you will work on a milestone of project 2.
The total number of weeks is 6.
Example 2:

Input: milestones = [5,2,1]
Output: 7
Explanation: One possible scenario is:
- During the 1st week, you will work on a milestone of project 0.
- During the 2nd week, you will work on a milestone of project 1.
- During the 3rd week, you will work on a milestone of project 0.
- During the 4th week, you will work on a milestone of project 1.
- During the 5th week, you will work on a milestone of project 0.
- During the 6th week, you will work on a milestone of project 2.
- During the 7th week, you will work on a milestone of project 0.
The total number of weeks is 7.
Note that you cannot work on the last milestone of project 0 on 8th week because it would violate the rules.
Thus, one milestone in project 0 will remain unfinished.
 

Constraints:

n == milestones.length
1 <= n <= 105
1 <= milestones[i] <= 109

class Solution
{
public:
    long long numberOfWeeks(vector<int> &milestones)
    {
        int n = milestones.size();
        long long sum = 0, mxVal = 0;
        for(int i = 0; i < n; i++)
        {
            sum += milestones[i];
            if(mxVal < milestones[i]) mxVal = milestones[i];
        }
        long long rem = sum - mxVal;
        if(mxVal > rem) return (1 + 2 * rem);
        return sum;
    }
};


// Source https://leetcode.com/problems/minimum-garden-perimeter-to-collect-enough-apples/

In a garden represented as an infinite 2D grid, there is an apple tree planted at every integer coordinate. The apple tree planted at an integer coordinate (i, j) has |i| + |j| apples growing on it.

You will buy an axis-aligned square plot of land that is centered at (0, 0).

Given an integer neededApples, return the minimum perimeter of a plot such that at least neededApples apples are inside or on the perimeter of that plot.

The value of |x| is defined as:

x if x >= 0
-x if x < 0
 

Example 1:


Input: neededApples = 1
Output: 8
Explanation: A square plot of side length 1 does not contain any apples.
However, a square plot of side length 2 has 12 apples inside (as depicted in the image above).
The perimeter is 2 * 4 = 8.
Example 2:

Input: neededApples = 13
Output: 16
Example 3:

Input: neededApples = 1000000000
Output: 5040
 

Constraints:

1 <= neededApples <= 1015

正方形边长为2n，四个顶点 [-n, n], [n, n], [-n, -n], [n, -n]

正方形包含的所有点的横坐标和纵坐标绝对值之和都是(1 + 2 + ... + n) * (2n + 1) * 2 
(1 + 2 + ... + n) * (2n + 1) * 2  + (1 + 2 + ... + n) * (2n + 1) * 2  = n * (n + 1) / 2 * (2n+1) * 2 * 2 = n * (n + 1) * (2n+1) * 2

class Solution
{
public:

    long long getApples(long long s)
    {
        s = s / 2;
        return 2 * (s * (s + 1) * (2 * s + 1));
    }

    long long minimumPerimeter(long long neededApples)
    {
        long long n = 2;
        long long sum = getApples(n);
        while(sum < neededApples)
        {
            n *= 2;
            sum = getApples(n);
        }
        if (n <= 4) return 4 * n;
        int cnt = n / 4;
        int startVal = n/2;
        int l = 1, r = cnt;
        while(l < r)
        {
            int mid = l + (r - l) / 2;
            long long side = startVal + (mid * 2);
            long long apples = getApples(side);
            if(apples == neededApples) return side * 4;
            else if(apples > neededApples) r = mid;
            else l = mid + 1;
        }
        long long side = startVal + (l * 2);
        return side * 4;
    }
};


// Source https://leetcode.com/problems/count-number-of-special-subsequences/

A sequence is special if it consists of a positive number of 0s, followed by a positive number of 1s, then a positive number of 2s.

For example, [0,1,2] and [0,0,1,1,1,2] are special.
In contrast, [2,1,0], [1], and [0,1,2,0] are not special.
Given an array nums (consisting of only integers 0, 1, and 2), return the number of different subsequences that are special. Since the answer may be very large, return it modulo 109 + 7.

A subsequence of an array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements. 
Two subsequences are different if the set of indices chosen are different.

 

Example 1:

Input: nums = [0,1,2,2]
Output: 3
Explanation: The special subsequences are bolded [0,1,2,2], [0,1,2,2], and [0,1,2,2].
Example 2:

Input: nums = [2,2,0,0]
Output: 0
Explanation: There are no special subsequences in [2,2,0,0].
Example 3:

Input: nums = [0,1,2,0,1,2]
Output: 7
Explanation: The special subsequences are bolded:
- [0,1,2,0,1,2]
- [0,1,2,0,1,2]
- [0,1,2,0,1,2]
- [0,1,2,0,1,2]
- [0,1,2,0,1,2]
- [0,1,2,0,1,2]
- [0,1,2,0,1,2]
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 2

// From left to right, lets keep track of the number of special subsequences that end in 0 and end in 1, and end in 2.
// At the end, we will return the number of special subsequences that end in 2.
// Left to right:
// when we visit a 0, this creates 1 more subsequence that ends in 0 and we can also add this 0 to every other subsequence that ended with 0.
// Thus, dp[0] = 2*dp[0] + 1.
// when we visit a 1, we can add this 1 to every subsequence that ends in 0 and ends in 1.
// Thus, dp[1] = 2*dp[1] + dp[0]
// when we visist a 2, we can add this 2 to every subsequence that ends in 1 and ends in 2.
// Thus, dp[2] = 2*dp[2] + dp[1]
// return dp[2]

class Solution
{
public:
    int countSpecialSubsequences(vector<int> &nums)
    {
        const long mod = 1e9 + 7;
        vector<long> dp(3, 0);
        int n = nums.size();
        for(int i = 0; i < n; i++)
        {
            if(nums[i] == 0)
            {
                dp[0] = (2 * dp[0] + 1) % mod;
            }
            else if(nums[i] == 1)
            {
                dp[1] = (2 * dp[1] + dp[0]) % mod;
            }
            else
            {
                dp[2] = (2 * dp[2] + dp[1]) % mod;
            }
        }
        return dp[2];
    }
};


// Source https://leetcode.com/problems/delete-characters-to-make-fancy-string/

A fancy string is a string where no three consecutive characters are equal.

Given a string s, delete the minimum possible number of characters from s to make it fancy.

Return the final string after the deletion. It can be shown that the answer will always be unique.

 

Example 1:

Input: s = "leeetcode"
Output: "leetcode"
Explanation:
Remove an 'e' from the first group of 'e's to create "leetcode".
No three consecutive characters are equal, so return "leetcode".
Example 2:

Input: s = "aaabaaaa"
Output: "aabaa"
Explanation:
Remove an 'a' from the first group of 'a's to create "aabaaaa".
Remove two 'a's from the second group of 'a's to create "aabaa".
No three consecutive characters are equal, so return "aabaa".
Example 3:

Input: s = "aab"
Output: "aab"
Explanation: No three consecutive characters are equal, so return "aab".
 

Constraints:

1 <= s.length <= 105
s consists only of lowercase English letters.

class Solution
{
public:

    string makeFancyString(string s)
    {
        int n = s.length();
        if (n < 3) return s;
        string res;
        res.reserve(n);
        res.push_back(s[0]);
        res.push_back(s[1]);
        for (int i = 2; i < n; ++i)
        {
            if (s[i] == s[i - 1] && s[i] == s[i - 2])
            {
                continue;
            }
            res.push_back(s[i]);
        }
        return res;
    }
};

// Source https://leetcode.com/problems/check-if-move-is-legal/

You are given a 0-indexed 8 x 8 grid board, where board[r][c] represents the cell (r, c) on a game board. 
On the board, free cells are represented by '.', white cells are represented by 'W', and black cells are represented by 'B'.

Each move in this game consists of choosing a free cell and changing it to the color you are playing as (either white or black). 
However, a move is only legal if, after changing it, the cell becomes the endpoint of a good line (horizontal, vertical, or diagonal).

A good line is a line of three or more cells (including the endpoints) where the endpoints of the line are one color, 
and the remaining cells in the middle are the opposite color (no cells in the line are free). You can find examples for good lines in the figure below:


Given two integers rMove and cMove and a character color representing the color you are playing as (white or black), 
return true if changing cell (rMove, cMove) to color color is a legal move, or false if it is not legal.

 

Example 1:


Input: board = [[".",".",".","B",".",".",".","."],[".",".",".","W",".",".",".","."],[".",".",".","W",".",".",".","."],[".",".",".","W",".",".",".","."],["W","B","B",".","W","W","W","B"],[".",".",".","B",".",".",".","."],[".",".",".","B",".",".",".","."],[".",".",".","W",".",".",".","."]], rMove = 4, cMove = 3, color = "B"
Output: true
Explanation: '.', 'W', and 'B' are represented by the colors blue, white, and black respectively, and cell (rMove, cMove) is marked with an 'X'.
The two good lines with the chosen cell as an endpoint are annotated above with the red rectangles.
Example 2:


Input: board = [[".",".",".",".",".",".",".","."],[".","B",".",".","W",".",".","."],[".",".","W",".",".",".",".","."],[".",".",".","W","B",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".","B","W",".","."],[".",".",".",".",".",".","W","."],[".",".",".",".",".",".",".","B"]], rMove = 4, cMove = 4, color = "W"
Output: false
Explanation: While there are good lines with the chosen cell as a middle cell, there are no good lines with the chosen cell as an endpoint.
 

Constraints:

board.length == board[r].length == 8
0 <= rMove, cMove < 8
board[rMove][cMove] == '.'
color is either 'B' or 'W'.

class Solution
{
public:
    bool checkMove(vector<vector<char>> &board, int rMove, int cMove, char color)
    {
        int m = board.size();
        int n = board[0].size();
        int dx[8] = {0, 0, 1, -1, 1, -1, -1, 1};
        int dy[8] = {1, -1, 0, 0, 1, -1, 1, -1};
        for(int i = 0; i < 8; i++)
        {
            int x = rMove + dx[i], y = cMove + dy[i];
            bool flag = false;
            int c = 0;
            while(x < m && x >= 0 && y < n && y >= 0)
            {
                if(board[x][y] == '.') break;
                if(board[x][y] == color)
                {
                    if (c >= 1) flag = true;
                    break;
                }
                c++;
                x = x + dx[i], y = y + dy[i];
            }
            if (flag) return true;
        }
        return false;
    }
};


// Source https://leetcode.com/problems/minimum-total-space-wasted-with-k-resizing-operations/

You are currently designing a dynamic array. You are given a 0-indexed integer array nums, where nums[i] is the number of elements that will be in the array at time i. 
In addition, you are given an integer k, the maximum number of times you can resize the array (to any size).

The size of the array at time t, sizet, must be at least nums[t] because there needs to be enough space in the array to hold all the elements. 
The space wasted at time t is defined as sizet - nums[t], and the total space wasted is the sum of the space wasted across every time t where 0 <= t < nums.length.

Return the minimum total space wasted if you can resize the array at most k times.

Note: The array can have any size at the start and does not count towards the number of resizing operations.

 

Example 1:

Input: nums = [10,20], k = 0
Output: 10
Explanation: size = [20,20].
We can set the initial size to be 20.
The total wasted space is (20 - 10) + (20 - 20) = 10.
Example 2:

Input: nums = [10,20,30], k = 1
Output: 10
Explanation: size = [20,20,30].
We can set the initial size to be 20 and resize to 30 at time 2. 
The total wasted space is (20 - 10) + (20 - 20) + (30 - 30) = 10.
Example 3:

Input: nums = [10,20,15,30,20], k = 2
Output: 15
Explanation: size = [10,20,20,30,30].
We can set the initial size to 10, resize to 20 at time 1, and resize to 30 at time 3.
The total wasted space is (10 - 10) + (20 - 20) + (20 - 15) + (30 - 30) + (30 - 20) = 15.
 

Constraints:

1 <= nums.length <= 200
1 <= nums[i] <= 106
0 <= k <= nums.length - 1

class Solution
{
public:
    int n;
    int dp[205][205];

    int recur(vector<int> &nums, int i, int k)
    {
        if(i == n) return 0;
        if(k <= 0) return 1e9;
        if(dp[i][k] != -1) return dp[i][k];
        int ans = 1e9;
        int mxVal = INT_MIN;
        int total = 0;
        for(int j = i; j < n; j++)
        {
            mxVal = max(mxVal, nums[j]);
            total += nums[j];
            int waste = (mxVal * (j - i + 1)) - total;
            ans = min(ans, waste + recur(nums, j + 1, k - 1));
        }
        return dp[i][k] = ans;
    }

    int minSpaceWastedKResizing(vector<int> &nums, int k)
    {
        n = nums.size();
        memset(dp, -1, sizeof(dp));
        return recur(nums, 0, k + 1);
    }
};


// Source https://leetcode.com/problems/maximum-product-of-the-length-of-two-palindromic-substrings/

You are given a 0-indexed string s and are tasked with finding two non-intersecting palindromic substrings of odd length such that the product of their lengths is maximized.

More formally, you want to choose four integers i, j, k, l such that 0 <= i <= j < k <= l < s.length and both the substrings s[i...j] and s[k...l] are palindromes and have odd lengths. s[i...j] denotes a substring from index i to index j inclusive.

Return the maximum possible product of the lengths of the two non-intersecting palindromic substrings.

A palindrome is a string that is the same forward and backward. A substring is a contiguous sequence of characters in a string.

 

Example 1:

Input: s = "ababbb"
Output: 9
Explanation: Substrings "aba" and "bbb" are palindromes with odd length. product = 3 * 3 = 9.
Example 2:

Input: s = "zaaaxbbby"
Output: 9
Explanation: Substrings "aaa" and "bbb" are palindromes with odd length. product = 3 * 3 = 9.
 

Constraints:

2 <= s.length <= 105
s consists of lowercase English letters.


len[i] 表示以下标 i 为中心点，向左、向右构成palindromic substrings of odd length，最长的回文子字符串长度
s[i] = d, s[i-3 ... i ... i+3] = abcdcba -> len[i] = 4
len[i] >= 1
p + len[p] - 1 对应以下标 p 为中心点，最长的回文子字符串右边界下标
p + len[p]      对应以下标 p 为中心点，最长的回文子字符串右边界下标 + 1
p - len[p] + 1 对应以下标 p 为中心点，最长的回文子字符串左边界下标

如果 i < mx + len[mx]，则 下标 i 对应 mx左边的 下标 mx - (i - mx) = 2 * mx - i，len[i] = min(len[2 * mx - i], (long long)mx + len[mx] - i)

left[i] 表示 s[0 ... i] 中 最长的回文子字符串长度，根据下标 i 是否作为最长的回文子字符串右边界下标有两种情况
left[i] = max(left[i - 1], 2 * (i - p) + 1);

right[i] 表示 s[i ... n-1] 中 最长的回文子字符串长度，根据下标 i 是否作为最长的回文子字符串左边界下标有两种情况
right[i] = max(right[i + 1], 2 * (p - i) + 1);

class Solution
{
public:
    long long maxProduct(string s)
    {
        int n = s.length();
        vector<long long> len(n);
        int mx = 0;
        for (int i = 0; i < n; i++)
        {
            if (i < mx + len[mx])
            {
                len[i] = min(len[2 * mx - i], (long long)mx + len[mx] - i);
            }

            while (i - len[i] >= 0 && i + len[i] < n && s[i - len[i]] == s[i + len[i]])
            {
                len[i]++;
            }

            if (mx + len[mx] < i + len[i])
            {
                mx = i;
            }
        }

        vector<int> left(n), right(n);

        left[0] = 1;
        for (int i = 1, p = 0; i < n; ++i)
        {
            while ((p + len[p]) <= i) ++p;
            left[i] = max(left[i - 1], 2 * (i - p) + 1);
        }

        right[n - 1] = 1;
        for (int i = n - 2, p = n - 1; i >= 0; --i)
        {
            while (p - len[p] >= i) --p;
            right[i] = max(right[i + 1], 2 * (p - i) + 1);
        }

        long long ret = 0;
        for (int i = 0; i < n - 1; ++i)
            ret = max(ret, 1ll * left[i] * right[i + 1]);
        return ret;
    }
};


// Source https://leetcode.com/problems/check-if-string-is-a-prefix-of-array/

Given a string s and an array of strings words, determine whether s is a prefix string of words.

A string s is a prefix string of words if s can be made by concatenating the first k strings in words for some positive k no larger than words.length.

Return true if s is a prefix string of words, or false otherwise.

 

Example 1:

Input: s = "iloveleetcode", words = ["i","love","leetcode","apples"]
Output: true
Explanation:
s can be made by concatenating "i", "love", and "leetcode" together.
Example 2:

Input: s = "iloveleetcode", words = ["apples","i","love","leetcode"]
Output: false
Explanation:
It is impossible to make s using a prefix of arr.
 

Constraints:

1 <= words.length <= 100
1 <= words[i].length <= 20
1 <= s.length <= 1000
words[i] and s consist of only lowercase English letters.

class Solution
{
public:
    bool isPrefixString(string s, vector<string> &words)
    {
        int n = s.length();
        string ans = "";
        ans.reserve(n);
        const char * ptr = s.c_str();
        for(auto &word : words)
        {
            ans.append(word);
            int len = ans.length();
            if(len > n) return false;
            string_view sv1(ptr, len);
            string_view sv2 = ans;
            if (sv1.compare(sv2) != 0) return false;
            if(len == n) return true;
        }
        return false;
    }
};


// Source https://leetcode.com/problems/remove-stones-to-minimize-the-total/

You are given a 0-indexed integer array piles, where piles[i] represents the number of stones in the ith pile, and an integer k. You should apply the following operation exactly k times:

Choose any piles[i] and remove floor(piles[i] / 2) stones from it.
Notice that you can apply the operation on the same pile more than once.

Return the minimum possible total number of stones remaining after applying the k operations.

floor(x) is the greatest integer that is smaller than or equal to x (i.e., rounds x down).

 

Example 1:

Input: piles = [5,4,9], k = 2
Output: 12
Explanation: Steps of a possible scenario are:
- Apply the operation on pile 2. The resulting piles are [5,4,5].
- Apply the operation on pile 0. The resulting piles are [3,4,5].
The total number of stones in [3,4,5] is 12.
Example 2:

Input: piles = [4,3,6,7], k = 3
Output: 12
Explanation: Steps of a possible scenario are:
- Apply the operation on pile 2. The resulting piles are [4,3,3,7].
- Apply the operation on pile 3. The resulting piles are [4,3,3,4].
- Apply the operation on pile 0. The resulting piles are [2,3,3,4].
The total number of stones in [2,3,3,4] is 12.
 

Constraints:

1 <= piles.length <= 105
1 <= piles[i] <= 104
1 <= k <= 105

class Solution
{
public:
    int minStoneSum(vector<int> &piles, int k)
    {
        int total = 0;
        priority_queue<int> pq;
        for (int pile : piles)
        {
            pq.push(pile);
            total += pile;
        }
        while (k > 0)
        {
            int val = pq.top();
            pq.pop();
            total -= val / 2;
            int rem = val - val / 2;
            pq.push(rem);
            --k;
        }
        return total;
    }
};


// Source https://leetcode.com/problems/minimum-number-of-swaps-to-make-the-string-balanced/

You are given a 0-indexed string s of even length n. The string consists of exactly n / 2 opening brackets '[' and n / 2 closing brackets ']'.

A string is called balanced if and only if:

It is the empty string, or
It can be written as AB, where both A and B are balanced strings, or
It can be written as [C], where C is a balanced string.
You may swap the brackets at any two indices any number of times.

Return the minimum number of swaps to make s balanced.

 

Example 1:

Input: s = "][]["
Output: 1
Explanation: You can make the string balanced by swapping index 0 with index 3.
The resulting string is "[[]]".
Example 2:

Input: s = "]]][[["
Output: 2
Explanation: You can do the following to make the string balanced:
- Swap index 0 with index 4. s = "[]][][".
- Swap index 1 with index 5. s = "[[][]]".
The resulting string is "[[][]]".
Example 3:

Input: s = "[]"
Output: 0
Explanation: The string is already balanced.
 

Constraints:

n == s.length
2 <= n <= 106
n is even.
s[i] is either '[' or ']'.
The number of opening brackets '[' equals n / 2, and the number of closing brackets ']' equals n / 2.

]] [[ -> [] [] 一次交换减少2对unpair
] [ -> [] 一次交换减少1对unpair

class Solution
{
public:
    int minSwaps(string s)
    {
        int n = s.length();
        int unpaired = 0;
        int balance = 0;
        for(int i = 0; i < n; i++)
        {
            if (s[i] == '[') ++balance;
            else --balance;
            if(balance == -1)
            {
                unpaired++;
                balance = 0;
            }
        }

        return (unpaired + 1) / 2;
    }
};


// Source https://leetcode.com/problems/find-the-longest-valid-obstacle-course-at-each-position/

You want to build some obstacle courses. You are given a 0-indexed integer array obstacles of length n, where obstacles[i] describes the height of the ith obstacle.

For every index i between 0 and n - 1 (inclusive), find the length of the longest obstacle course in obstacles such that:

You choose any number of obstacles between 0 and i inclusive.
You must include the ith obstacle in the course.
You must put the chosen obstacles in the same order as they appear in obstacles.
Every obstacle (except the first) is taller than or the same height as the obstacle immediately before it.
Return an array ans of length n, where ans[i] is the length of the longest obstacle course for index i as described above.

 

Example 1:

Input: obstacles = [1,2,3,2]
Output: [1,2,3,3]
Explanation: The longest valid obstacle course at each position is:
- i = 0: [1], [1] has length 1.
- i = 1: [1,2], [1,2] has length 2.
- i = 2: [1,2,3], [1,2,3] has length 3.
- i = 3: [1,2,3,2], [1,2,2] has length 3.
Example 2:

Input: obstacles = [2,2,1]
Output: [1,2,1]
Explanation: The longest valid obstacle course at each position is:
- i = 0: [2], [2] has length 1.
- i = 1: [2,2], [2,2] has length 2.
- i = 2: [2,2,1], [1] has length 1.
Example 3:

Input: obstacles = [3,1,5,6,4,2]
Output: [1,1,2,3,2,2]
Explanation: The longest valid obstacle course at each position is:
- i = 0: [3], [3] has length 1.
- i = 1: [3,1], [1] has length 1.
- i = 2: [3,1,5], [3,5] has length 2. [1,5] is also valid.
- i = 3: [3,1,5,6], [3,5,6] has length 3. [1,5,6] is also valid.
- i = 4: [3,1,5,6,4], [3,4] has length 2. [1,4] is also valid.
- i = 5: [3,1,5,6,4,2], [1,2] has length 2.
 

Constraints:

n == obstacles.length
1 <= n <= 105
1 <= obstacles[i] <= 107

class Solution
{
public:
    vector<int> longestObstacleCourseAtEachPosition(vector<int> &obstacles)
    {
        int n = obstacles.size();
        vector<int> dp(n, 1e9);
        vector<int> ans(n);
        for (int i = 0; i < n; ++i)
        {
            auto itr = upper_bound(dp.begin(), dp.end(), obstacles[i]);
            *itr = obstacles[i];
            ans[i] = (itr - dp.begin()) + 1;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/number-of-strings-that-appear-as-substrings-in-word/

Given an array of strings patterns and a string word, return the number of strings in patterns that exist as a substring in word.

A substring is a contiguous sequence of characters within a string.

 

Example 1:

Input: patterns = ["a","abc","bc","d"], word = "abc"
Output: 3
Explanation:
- "a" appears as a substring in "abc".
- "abc" appears as a substring in "abc".
- "bc" appears as a substring in "abc".
- "d" does not appear as a substring in "abc".
3 of the strings in patterns appear as a substring in word.
Example 2:

Input: patterns = ["a","b","c"], word = "aaaaabbbbb"
Output: 2
Explanation:
- "a" appears as a substring in "aaaaabbbbb".
- "b" appears as a substring in "aaaaabbbbb".
- "c" does not appear as a substring in "aaaaabbbbb".
2 of the strings in patterns appear as a substring in word.
Example 3:

Input: patterns = ["a","a","a"], word = "ab"
Output: 3
Explanation: Each of the patterns appears as a substring in word "ab".
 

Constraints:

1 <= patterns.length <= 100
1 <= patterns[i].length <= 100
1 <= word.length <= 100
patterns[i] and word consist of lowercase English letters.

class Solution
{
public:
    int numOfStrings(vector<string> &patterns, string word)
    {
        int res = 0;
        for(auto &str : patterns)
        {
            if(word.find(str) != string::npos) ++res;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/array-with-elements-not-equal-to-average-of-neighbors/

You are given a 0-indexed array nums of distinct integers. You want to rearrange the elements in the array such that every element in the rearranged array is not equal to the average of its neighbors.

More formally, the rearranged array should have the property such that for every i in the range 1 <= i < nums.length - 1, (nums[i-1] + nums[i+1]) / 2 is not equal to nums[i].

Return any rearrangement of nums that meets the requirements.

 

Example 1:

Input: nums = [1,2,3,4,5]
Output: [1,2,4,5,3]
Explanation:
When i=1, nums[i] = 2, and the average of its neighbors is (1+4) / 2 = 2.5.
When i=2, nums[i] = 4, and the average of its neighbors is (2+5) / 2 = 3.5.
When i=3, nums[i] = 5, and the average of its neighbors is (4+3) / 2 = 3.5.

1 5 2 4 3

Example 2:

Input: nums = [6,2,0,9,7]
Output: [9,7,6,2,0]
Explanation:
When i=1, nums[i] = 7, and the average of its neighbors is (9+6) / 2 = 7.5.
When i=2, nums[i] = 6, and the average of its neighbors is (7+2) / 2 = 4.5.
When i=3, nums[i] = 2, and the average of its neighbors is (6+0) / 2 = 3.

0 9 2 7 6

Constraints:

3 <= nums.length <= 105
0 <= nums[i] <= 105

小 大 小 大 小

class Solution
{
public:
    vector<int> rearrangeArray(vector<int> &nums)
    {
        int n = nums.size();
        sort(nums.begin(), nums.end());
        vector<int> ans(n);
        int low = 0;
        int high = n - 1;
        int index = 0;
        while(index < n)
        {
            if(index % 2 == 0)
            {
                ans[index] = nums[low];
                low++;
            }
            else
            {
                ans[index] = nums[high];
                high--;
            }
            index++;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/minimum-non-zero-product-of-the-array-elements/

You are given a positive integer p. Consider an array nums (1-indexed) that consists of the integers in the inclusive range [1, 2^p - 1] in their binary representations. 
You are allowed to do the following operation any number of times:

Choose two elements x and y from nums.
Choose a bit in x and swap it with its corresponding bit in y. Corresponding bit refers to the bit that is in the same position in the other integer.
For example, if x = 1101 and y = 0011, after swapping the 2nd bit from the right, we have x = 1111 and y = 0001.

Find the minimum non-zero product of nums after performing the above operation any number of times. Return this product modulo 109 + 7.

Note: The answer should be the minimum product before the modulo operation is done.

 

Example 1:

Input: p = 1
Output: 1
Explanation: nums = [1].
There is only one element, so the product equals that element.
Example 2:

Input: p = 2
Output: 6
Explanation: nums = [01, 10, 11].
Any swap would either make the product 0 or stay the same.
Thus, the array product of 1 * 2 * 3 = 6 is already minimized.
Example 3:

Input: p = 3
Output: 1512
Explanation: nums = [001, 010, 011, 100, 101, 110, 111]
- In the first operation we can swap the leftmost bit of the second and fifth elements.
    - The resulting array is [001, 110, 011, 100, 001, 110, 111].
- In the second operation we can swap the middle bit of the third and fourth elements.
    - The resulting array is [001, 110, 001, 110, 001, 110, 111].
The array product is 1 * 6 * 1 * 6 * 1 * 6 * 7 = 1512, which is the minimum possible product.
 

Constraints:

1 <= p <= 60

根据数学规律，两数之和为固定值 sum 的 2 个数，它们的最小非零乘积为 (sum - 1) * 1 = sum - 1。

To get the minimum product but not zero, we want to convert as many numbers as we can to 1.
The range of our numbers is pow(2, p) minus 1.
We can convert range/2 numbers to 1.
In this way, range/2 numbers will be 1 and range/2 numbers will be range-1.
The last number in the array - which binary representation will be all 1's - will remain the same.
Example 1:
Let's take example 3 from the problem itself.
p = 3 --> range = 7
array nums: [001, 010, 011, 100, 101, 110, 111]
Can be converted to: [001, 110, 001, 110, 001, 110, 111] --> [1, 6, 1, 6, 1, 6, 7]
product is: 1 * 6 * 1 * 6 * 1 * 6 * 7 = 6 * 6 * 6 * 7 = pow(6, 3) * 7 = pow(range - 1, range/2) * range

001 110 不变
010 101 -> 110 001
011 100 -> 001 110
111 不变

Example 2:
p = 4 --> range = 15
array nums: [0001, 0010, 0011, 0100, 0101, 0110, 0111, 1000, 1001, 1010, 1011, 1100, 1101, 1110, 1111]
Can be converted to: [0001, 1110, 0001, 1110, 0001, 1110, 0001, 1110, 0001, 1110, 0001, 1110, 0001, 1110, 1111] --> [1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 15]
product is: 1 * 14 * 1 * 14 * 1 * 14 * 1 * 14 * 1 * 14 * 1 * 14 * 1 * 14 * 15 = 14 * 14 * 14 * 14 * 14 * 14 * 14 * 15 = pow(14, 7) * 15 = pow(range - 1, range/2) * range

0001 1110 不变
0010 1101 -> 1110 0001
0011 1100 -> 1110 0001
0100 1011 -> 1110 0001
0101 1010 -> 1110 0001
0110 1001 -> 1110 0001
0111 1000 -> 1110 0001
1111 不变

Formula: pow(range - 1, range/2) * range
We can do this formula and we're done. But, we are using very large numbers so we have to implement a special pow function which mods the results to make them smaller.

class Solution
{
public:
    const long mod = 1e9 + 7;

    long powmod(long base, long exponent)
    {
        if (exponent == 0) return 1;
        if (exponent == 1) return base % mod;
        long tmp = powmod(base, exponent / 2);
        if (exponent % 2 == 0)
        {
            return (tmp * tmp) % mod;
        }
        else
        {
            tmp = tmp * tmp % mod;
            base %= mod;
            return (tmp * base) % mod;
        }
    }

    int minNonZeroProduct(int p)
    {
        long range = (1LL << p) - 1;
        long tmp = powmod(range - 1, range / 2);
        return (tmp * (range % mod)) % mod;
    }
};


// Source https://leetcode.com/problems/last-day-where-you-can-still-cross/

There is a 1-based binary matrix where 0 represents land and 1 represents water. You are given integers row and col representing the number of rows and columns in the matrix, respectively.

Initially on day 0, the entire matrix is land. However, each day a new cell becomes flooded with water. 
You are given a 1-based 2D array cells, where cells[i] = [ri, ci] represents that on the ith day, the cell on the rith row and cith column (1-based coordinates) will be covered with water 
(i.e., changed to 1).

You want to find the last day that it is possible to walk from the top to the bottom by only walking on land cells. 
You can start from any cell in the top row and end at any cell in the bottom row. You can only travel in the four cardinal directions (left, right, up, and down).

Return the last day where it is possible to walk from the top to the bottom by only walking on land cells.

 

Example 1:


Input: row = 2, col = 2, cells = [[1,1],[2,1],[1,2],[2,2]]
Output: 2
Explanation: The above image depicts how the matrix changes each day starting from day 0.
The last day where it is possible to cross from top to bottom is on day 2.
Example 2:


Input: row = 2, col = 2, cells = [[1,1],[1,2],[2,1],[2,2]]
Output: 1
Explanation: The above image depicts how the matrix changes each day starting from day 0.
The last day where it is possible to cross from top to bottom is on day 1.
Example 3:


Input: row = 3, col = 3, cells = [[1,2],[2,1],[3,3],[2,2],[1,1],[1,3],[2,3],[3,2],[3,1]]
Output: 3
Explanation: The above image depicts how the matrix changes each day starting from day 0.
The last day where it is possible to cross from top to bottom is on day 3.
 

Constraints:

2 <= row, col <= 2 * 104
4 <= row * col <= 2 * 104
cells.length == row * col
1 <= ri <= row
1 <= ci <= col
All the values of cells are unique.


0 represents land and 1 represents water
cells.length == row * col
第n天，所有的cell都为1，第n-1天，有1个cell为0（陆地），... ，第0天所有的cell都为0
从第 n - 1 天往回追溯，将当天变为水域的格子重新变回陆地，结合并查集判断第一行与最后一行的连通性，直至二者打通。
往回追溯时两行连通的当天，就是正向时间轴内它们能够连通的最后一天

class Solution
{
public:

    struct DSU
    {
        vector<int> parent;
        vector<int> size;

        DSU(int n)
        {
            parent = vector<int>(n);
            size = vector<int>(n, 1);
            for(int i = 0; i < n; i++)
            {
                parent[i] = i;
            }
        }

        int find(int x)
        {
            if(parent[x] != x) parent[x] = find(parent[x]);
            return parent[x];
        }

        bool join(int a, int b)
        {
            int root_a = find(a);
            int root_b = find(b);
            if (root_a == root_b) return false;
            if (size[root_a] > size[root_b])
            {
                parent[root_b] = root_a;
                size[root_a] += size[root_b];
            }
            else
            {
                parent[root_a] = root_b;
                size[root_b] += size[root_a];
            }
            return true;
        }

        int count(int x)
        {
            return size[x];
        }
    };

    int latestDayToCross(int row, int col, vector<vector<int>> &cells)
    {
        DSU dsu(row * col + 2);
        int top = row * col; // roof与所有顶层cell相连
        int bottom = row * col + 1; // floor与所有底层cell相连
        vector<vector<int>> mat(row, vector<int>(col, 1));
        int directs[4][2] = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
        for (int d = cells.size() - 1; d >= 0; --d)
        {
            int i = cells[d][0] - 1, j = cells[d][1] - 1;
            mat[i][j] = 0;
            int id = i * col + j;
            if (i == 0) dsu.join(id, top);
            if (i == row - 1) dsu.join(id, bottom);
            for (int k = 0; k < 4; ++k)
            {
                int i_ngb = i + directs[k][0];
                int j_ngb = j + directs[k][1];
                if (i_ngb < 0 || i_ngb >= row || j_ngb < 0 || j_ngb >= col) continue;
                if (mat[i_ngb][j_ngb] == 1) continue;
                int id_ngb = i_ngb * col + j_ngb;
                dsu.join(id, id_ngb);
            }
            if (dsu.find(top) == dsu.find(bottom)) return d;
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/find-if-path-exists-in-graph/

There is a bi-directional graph with n vertices, where each vertex is labeled from 0 to n - 1 (inclusive). 
The edges in the graph are represented as a 2D integer array edges, where each edges[i] = [ui, vi] denotes a bi-directional edge between vertex ui and vertex vi. 
Every vertex pair is connected by at most one edge, and no vertex has an edge to itself.

You want to determine if there is a valid path that exists from vertex source to vertex destination.

Given edges and the integers n, source, and destination, return true if there is a valid path from source to destination, or false otherwise.

 

Example 1:


Input: n = 3, edges = [[0,1],[1,2],[2,0]], source = 0, destination = 2
Output: true
Explanation: There are two paths from vertex 0 to vertex 2:
- 0 → 1 → 2
- 0 → 2
Example 2:


Input: n = 6, edges = [[0,1],[0,2],[3,5],[5,4],[4,3]], source = 0, destination = 5
Output: false
Explanation: There is no path from vertex 0 to vertex 5.
 

Constraints:

1 <= n <= 2 * 105
0 <= edges.length <= 2 * 105
edges[i].length == 2
0 <= ui, vi <= n - 1
ui != vi
0 <= source, destination <= n - 1
There are no duplicate edges.
There are no self edges.

class Solution
{
public:

    struct DSU
    {
        vector<int> parent;
        vector<int> size;

        DSU(int n)
        {
            parent = vector<int>(n);
            size = vector<int>(n, 1);
            for(int i = 0; i < n; i++)
            {
                parent[i] = i;
            }
        }

        int find(int x)
        {
            if(parent[x] != x) parent[x] = find(parent[x]);
            return parent[x];
        }

        bool join(int a, int b)
        {
            int root_a = find(a);
            int root_b = find(b);
            if (root_a == root_b) return false;
            if (size[root_a] > size[root_b])
            {
                parent[root_b] = root_a;
                size[root_a] += size[root_b];
            }
            else
            {
                parent[root_a] = root_b;
                size[root_b] += size[root_a];
            }
            return true;
        }

        int count(int x)
        {
            return size[x];
        }
    };


    bool validPath(int n, vector<vector<int>> &edges, int start, int end)
    {
        DSU dsu(n);
        for (auto &v : edges)
        {
            dsu.join(v[0], v[1]);
        }
        return dsu.find(start) == dsu.find(end);
    }
};


// Source https://leetcode.com/problems/minimum-time-to-type-word-using-special-typewriter/

There is a special typewriter with lowercase English letters 'a' to 'z' arranged in a circle with a pointer. A character can only be typed if the pointer is pointing to that character. 
The pointer is initially pointing to the character 'a'.


Each second, you may perform one of the following operations:

Move the pointer one character counterclockwise or clockwise.
Type the character the pointer is currently on.
Given a string word, return the minimum number of seconds to type out the characters in word.

 

Example 1:

Input: word = "abc"
Output: 5
Explanation: 
The characters are printed as follows:
- Type the character 'a' in 1 second since the pointer is initially on 'a'.
- Move the pointer clockwise to 'b' in 1 second.
- Type the character 'b' in 1 second.
- Move the pointer clockwise to 'c' in 1 second.
- Type the character 'c' in 1 second.
Example 2:

Input: word = "bza"
Output: 7
Explanation:
The characters are printed as follows:
- Move the pointer clockwise to 'b' in 1 second.
- Type the character 'b' in 1 second.
- Move the pointer counterclockwise to 'z' in 2 seconds.
- Type the character 'z' in 1 second.
- Move the pointer clockwise to 'a' in 1 second.
- Type the character 'a' in 1 second.
Example 3:

Input: word = "zjpc"
Output: 34
Explanation:
The characters are printed as follows:
- Move the pointer counterclockwise to 'z' in 1 second.
- Type the character 'z' in 1 second.
- Move the pointer clockwise to 'j' in 10 seconds.
- Type the character 'j' in 1 second.
- Move the pointer clockwise to 'p' in 6 seconds.
- Type the character 'p' in 1 second.
- Move the pointer counterclockwise to 'c' in 13 seconds.
- Type the character 'c' in 1 second.
 

Constraints:

1 <= word.length <= 100
word consists of lowercase English letters.

class Solution
{
public:
    int minTimeToType(string word)
    {
        int ret = 0;
        int pointer = int('a');
        for(char c : word)
        {
            int val = int(c);
            int cnt = abs(val - pointer);
            ret += min(cnt, 26-cnt);
            pointer = val;
            ret++;
        }
        return ret;
    }
};


// Source https://leetcode.com/problems/maximum-matrix-sum/

You are given an n x n integer matrix. You can do the following operation any number of times:

Choose any two adjacent elements of matrix and multiply each of them by -1.
Two elements are considered adjacent if and only if they share a border.

Your goal is to maximize the summation of the matrix's elements. Return the maximum sum of the matrix's elements using the operation mentioned above.

 

Example 1:


Input: matrix = [[1,-1],[-1,1]]
Output: 4
Explanation: We can follow the following steps to reach sum equals 4:
- Multiply the 2 elements in the first row by -1.
- Multiply the 2 elements in the first column by -1.
Example 2:


Input: matrix = [[1,2,3],[-1,-2,-3],[1,2,3]]
Output: 16
Explanation: We can follow the following step to reach sum equals 16:
- Multiply the 2 last elements in the second row by -1.
 

Constraints:

n == matrix.length == matrix[i].length
2 <= n <= 250
-105 <= matrix[i][j] <= 105

通过一次或多次操作，可使得分散在各处的负元素与相邻元素交换符号，最后所有负元素聚集在一起
如果负元素个数为偶数，则负元素可以全部变为正数
如果负元素个数为奇数，则将绝对值最小的元素保留为负，其他负元素可以全部变为正数

class Solution
{
public:
    long long maxMatrixSum(vector<vector<int>> &matrix)
    {
        int cnt = 0, mnVal = INT_MAX;
        long sum = 0;
        for(auto &row : matrix)
        {
            for(auto x : row)
            {
                int val = abs(x);
                sum += val;
                mnVal = min(mnVal, val);
                if (x < 0) ++cnt;
            }
        }
        if (cnt % 2) return sum - (2 * mnVal);
        return sum;
    }
};


// Source https://leetcode.com/problems/number-of-ways-to-arrive-at-destination/

You are in a city that consists of n intersections numbered from 0 to n - 1 with bi-directional roads between some intersections. 
The inputs are generated such that you can reach any intersection from any other intersection and that there is at most one road between any two intersections.

You are given an integer n and a 2D integer array roads where roads[i] = [ui, vi, timei] means that there is a road between intersections ui and vi that takes timei minutes to travel. 
You want to know in how many ways you can travel from intersection 0 to intersection n - 1 in the shortest amount of time.

Return the number of ways you can arrive at your destination in the shortest amount of time. Since the answer may be large, return it modulo 109 + 7.

 

Example 1:


Input: n = 7, roads = [[0,6,7],[0,1,2],[1,2,3],[1,3,3],[6,3,3],[3,5,1],[6,5,1],[2,5,1],[0,4,5],[4,6,2]]
Output: 4
Explanation: The shortest amount of time it takes to go from intersection 0 to intersection 6 is 7 minutes.
The four ways to get there in 7 minutes are:
- 0 ➝ 6
- 0 ➝ 4 ➝ 6
- 0 ➝ 1 ➝ 2 ➝ 5 ➝ 6
- 0 ➝ 1 ➝ 3 ➝ 5 ➝ 6
Example 2:

Input: n = 2, roads = [[1,0,10]]
Output: 1
Explanation: There is only one way to go from intersection 0 to intersection 1, and it takes 10 minutes.
 

Constraints:

1 <= n <= 200
n - 1 <= roads.length <= n * (n - 1) / 2
roads[i].length == 3
0 <= ui, vi <= n - 1
1 <= timei <= 109
ui != vi
There is at most one road connecting any two intersections.
You can reach any intersection from any other intersection.

class Solution
{
public:
    const long mod = 1e9 + 7;

    int countPaths(int n, vector<vector<int>> &roads)
    {
        vector<vector<pair<int, int>>> adj(n);
        for(auto &v : roads)
        {
            adj[v[0]].push_back({v[1], v[2]});
            adj[v[1]].push_back({v[0], v[2]});
        }
        vector<long> dis(n, 1e16);
        vector<long> path(n, 0);
        priority_queue<pair<long, long>, vector<pair<long, long>>, greater<pair<long, long>>> pq;
        path[0] = 1;
        dis[0] = 0;
        pq.push({0, 0});
        while(!pq.empty())
        {
            auto [cost, node] = pq.top();
            pq.pop();
            if (cost > dis[node]) continue;
            for(auto [next, time] : adj[node])
            {
                if(dis[next] > dis[node] + time)
                {
                    dis[next] = dis[node] + time;
                    path[next] = path[node];
                    path[next] %= mod;
                    pq.push({dis[next], next});
                }
                else if(dis[next] == dis[node] + time)
                {
                    path[next] += path[node];
                    path[next] %= mod;
                }
            }
        }
        return path[n - 1];
    }
};


// Source https://leetcode.com/problems/number-of-ways-to-separate-numbers/

You wrote down many positive integers in a string called num. However, you realized that you forgot to add commas to seperate the different numbers. 
You remember that the list of integers was non-decreasing and that no integer had leading zeros.

Return the number of possible lists of integers that you could have written down to get the string num. Since the answer may be large, return it modulo 109 + 7.

 

Example 1:

Input: num = "327"
Output: 2
Explanation: You could have written down the numbers:
3, 27
327
Example 2:

Input: num = "094"
Output: 0
Explanation: No numbers can have leading zeros and all numbers must be positive.
Example 3:

Input: num = "0"
Output: 0
Explanation: No numbers can have leading zeros and all numbers must be positive.
 

Constraints:

1 <= num.length <= 3500
num consists of digits '0' through '9'.

std::basic_string<CharT,Traits,Allocator>::compare
int compare( size_type pos1, size_type count1,
             const basic_string& str,
             size_type pos2, size_type count2 ) const;
比较此 string 的 [pos1, pos1+count1) 子串与 str 的子串 [pos2, pos2+count2) 。若 count1 > size() - pos1 则第一子串为 [pos1, size()) 。
类似地若 count2 > str.size() - pos2 则第二子串为 [pos2, str.size()) 。

dp[i][j] 表示num[i ... n-1] 划分成若干个（j > 0 则 表示划分成至少2个，j = 0 则表示可以划分成1个) non-decreasing 正整数，并且第1个正整数的长度>= j，number of solutions
如果j > 0 && j > (n-i) / 2，此时num[i ... n-1]不可能划分成至少2个non-decreasing，因为 j > 剩余的长度(n -i - j)，则dp[i][j] = 0
如果 j > 0 && j <= (n-i)/ 2 && j > (n-i) / 3 ，此时num[i ... n-1]只能划分成2个，如果 j 刚好等于 剩余的长度(n -i - j)，还要进一步判读两个数的大小关系
如果 j > 0 && j <= (n-i) / 3 ，此时num[i ... n-1] 可以划分成2个、3个等等，第2个正整数的长度与第1个正整数的长度相等时，还要进一步判读两个数的大小关系
如果j = 0，可以划分成1个

如果 j > 0 && j <= (n-i)/ 2 ，dp[i-1][j] = 1 + dp[i-1][j+1] + dp[i-1+j][j]
subtotal 对应 dp[i-1][j+1]
1 对应划分成2个，第1个正整数的长度为j，另一个正整数的长度为剩余所有的长度
dp[i-1+j][j] 对应划分成至少3个，第1个正整数的长度为j

class Solution
{
public:
    int numberOfCombinations(string num)
    {
        if(num[0] == '0') return 0;
        int n = num.size();
        if (n == 1) return 1;
        const int mod = 1e9 + 7;
        vector<vector<int>> dp(n, vector<int>((n / 2) + 1, 0));
        if (num[n-1] != '0') dp[n - 1][0] = 1;
        for(int i = n - 2; i >= 0; --i)
        {
            if(num[i] == '0') continue;
            int len = (n - i);
            int j = len / 2;
            int subtotal = 0;
            if (len % 2 == 0)
            {
                if (num.compare(i, len / 2, num, i + len / 2, len / 2) <= 0)
                {
                    dp[i][j] = 1;
                    subtotal = 1;
                }
                --j;
            }
            for(; j > 0; --j)
            {
                if (num[i + j] == '0')
                {
                    dp[i][j] = subtotal;
                    continue;
                }
                if(j > len / 3)
                {
                    subtotal = (subtotal + 1) % mod;
                    dp[i][j] = subtotal;
                }
                else if(num.compare(i, j, num, i + j, j) <= 0)
                {
                    subtotal = (subtotal + 1 + dp[i + j][j]) % mod;
                    dp[i][j] = subtotal;
                }
                else
                {
                    if(j + 1 <= (n / 2))
                        subtotal = (subtotal + 1 + dp[i + j][j + 1]) % mod;
                    else
                        subtotal = (subtotal + 1) % mod;
                    dp[i][j] = subtotal;
                }
            }
            dp[i][0] = (subtotal + 1) % mod;
        }
        return dp[0][0];
    }
};


// Source https://leetcode.com/problems/find-greatest-common-divisor-of-array/

Given an integer array nums, return the greatest common divisor of the smallest number and largest number in nums.

The greatest common divisor of two numbers is the largest positive integer that evenly divides both numbers.

 

Example 1:

Input: nums = [2,5,6,9,10]
Output: 2
Explanation:
The smallest number in nums is 2.
The largest number in nums is 10.
The greatest common divisor of 2 and 10 is 2.
Example 2:

Input: nums = [7,5,6,8,3]
Output: 1
Explanation:
The smallest number in nums is 3.
The largest number in nums is 8.
The greatest common divisor of 3 and 8 is 1.
Example 3:

Input: nums = [3,3]
Output: 3
Explanation:
The smallest number in nums is 3.
The largest number in nums is 3.
The greatest common divisor of 3 and 3 is 3.
 

Constraints:

2 <= nums.length <= 1000
1 <= nums[i] <= 1000

class Solution
{
public:
    int findGCD(vector<int> &nums)
    {
        int mxVal = INT_MIN;
        int mnVal = INT_MAX;
        for (auto val : nums)
        {
            mxVal = max(mxVal, val);
            mnVal = min(mnVal, val);
        }
        return __gcd(mxVal, mnVal);
    }
};


// Source https://leetcode.com/problems/find-unique-binary-string/

Given an array of strings nums containing n unique binary strings each of length n, return a binary string of length n that does not appear in nums. 
If there are multiple answers, you may return any of them.

 

Example 1:

Input: nums = ["01","10"]
Output: "11"
Explanation: "11" does not appear in nums. "00" would also be correct.
Example 2:

Input: nums = ["00","01"]
Output: "11"
Explanation: "11" does not appear in nums. "10" would also be correct.
Example 3:

Input: nums = ["111","011","001"]
Output: "101"
Explanation: "101" does not appear in nums. "000", "010", "100", and "110" would also be correct.
 

Constraints:

n == nums.length
1 <= n <= 16
nums[i].length == n
nums[i] is either '0' or '1'.
All the strings of nums are unique.

class Solution
{
public:
    string ans;

    bool recur(int n, unordered_set<string> &st, string &curr, int idx)
    {
        if(idx >= n)
        {
            if(st.find(curr) == st.end())
            {
                ans = curr;
                return true;
            }
            return false;
        }
        curr.push_back('0');
        if (recur(n, st, curr, idx + 1)) return true;
        curr.pop_back();
        curr.push_back('1');
        if (recur(n, st, curr, idx + 1)) return true;
        curr.pop_back();
        return false;
    }

    string findDifferentBinaryString(vector<string> &nums)
    {
        unordered_set<string> st(nums.begin(), nums.end());
        int n = nums[0].size();
        string curr = "";
        curr.reserve(n);
        ans = "";
        recur(n, st, curr, 0);
        return ans;
    }
};


// Source https://leetcode.com/problems/minimize-the-difference-between-target-and-chosen-elements/

You are given an m x n integer matrix mat and an integer target.

Choose one integer from each row in the matrix such that the absolute difference between target and the sum of the chosen elements is minimized.

Return the minimum absolute difference.

The absolute difference between two numbers a and b is the absolute value of a - b.

 

Example 1:


Input: mat = [[1,2,3],[4,5,6],[7,8,9]], target = 13
Output: 0
Explanation: One possible choice is to:
- Choose 1 from the first row.
- Choose 5 from the second row.
- Choose 7 from the third row.
The sum of the chosen elements is 13, which equals the target, so the absolute difference is 0.
Example 2:


Input: mat = [[1],[2],[3]], target = 100
Output: 94
Explanation: The best possible choice is to:
- Choose 1 from the first row.
- Choose 2 from the second row.
- Choose 3 from the third row.
The sum of the chosen elements is 6, and the absolute difference is 94.
Example 3:


Input: mat = [[1,2,9,8,7]], target = 6
Output: 1
Explanation: The best choice is to choose 7 from the first row.
The absolute difference is 1.
 

Constraints:

m == mat.length
n == mat[i].length
1 <= m, n <= 70
1 <= mat[i][j] <= 70
1 <= target <= 800

class Solution
{
public:
    int m, n;
    int dp[71][6000];

    int recur(vector<vector<int>> &mat, int target, int index, int sum)
    {
        if(index == m) return abs(sum - target);
        if(dp[index][sum] != -1) return dp[index][sum];
        int res = 1e9;
        if(sum < target)
        {
            for(int i = 0; i < n; i++)
                res = min(res, recur(mat, target, index + 1, sum + mat[index][i]));
        }
        else
        {
            res = min(res, recur(mat, target, index + 1, sum + *min_element(mat[index].begin(), mat[index].end())));
        }
        return dp[index][sum] = res;
    }

    int minimizeTheDifference(vector<vector<int>> &mat, int target)
    {
        m = mat.size();
        n = mat[0].size();
        memset(dp, -1, sizeof(dp));
        return recur(mat, target, 0, 0);
    }
};


// Source https://leetcode.com/problems/find-array-given-subset-sums/

You are given an integer n representing the length of an unknown array that you are trying to recover. 
You are also given an array sums containing the values of all 2^n subset sums of the unknown array (in no particular order).

Return the array ans of length n representing the unknown array. If multiple answers exist, return any of them.

An array sub is a subset of an array arr if sub can be obtained from arr by deleting some (possibly zero or all) elements of arr. 
The sum of the elements in sub is one possible subset sum of arr. The sum of an empty array is considered to be 0.

Note: Test cases are generated such that there will always be at least one correct answer.

 

Example 1:

Input: n = 3, sums = [-3,-2,-1,0,0,1,2,3]
Output: [1,2,-3]
Explanation: [1,2,-3] is able to achieve the given subset sums:
- []: sum is 0
- [1]: sum is 1
- [2]: sum is 2
- [1,2]: sum is 3
- [-3]: sum is -3
- [1,-3]: sum is -2
- [2,-3]: sum is -1
- [1,2,-3]: sum is 0
Note that any permutation of [1,2,-3] and also any permutation of [-1,-2,3] will also be accepted.
Example 2:

Input: n = 2, sums = [0,0,0,0]
Output: [0,0]
Explanation: The only correct answer is [0,0].
Example 3:

Input: n = 4, sums = [0,0,5,5,4,-1,4,9,9,-1,4,3,4,8,3,8]
Output: [0,-1,4,5]
Explanation: [0,-1,4,5] is able to achieve the given subset sums.
 

Constraints:

1 <= n <= 15
sums.length == 2n
-104 <= sums[i] <= 104


This can be solved using 2 facts.
Fact 1:
Suppose that we have a array A and its corresponding subset sum array be B. Now lets introduce element x in the array A, 
then the subset sum array of this newly formed array will be {b1, b2 , ..., bn , b1+x, b2+x, ....., bn+x}.

Fact 2:
let x=最小的 element in subarray sum array and y= 第二小的 element in subarray sum array.
Then one of the element of the original array will be (x-y) or (y-x).

按照升序排序数组 sums ，那么 sums[1] 对应的集合与sums[0] 对应的集合的不同之处是选择或不选择一个绝对值最小的数 x（这样，两者变化量最小） 。

Input: n = 4, sums = [0,0,5,5,4,-1,4,9,9,-1,4,3,4,8,3,8]
Output: [0,-1,4,5]

0 0 5 5 4 4 -1 -1 9 9 4 3 4 8 3 8 排序前
-1 -1 0 0 3 3 4 4 4 4 5 5 8 8 9 9 排序后 一个元素为0（f2 加x的y推导出了-1，4，5，证明加x等价于不选择-x，则元素为负数或0）

-1 0 3 4 4 5 8 9 f1
-1 0 3 4 4 5 8 9 f2 一个元素为-1（f2 加x的y推导出了4，5，证明加x等价于不选择-x，则元素为负数或0）

-1 3 4 8 f1
0  4 5 9 f2    一个元素为4（f1 不加x的y推导出了5，证明不加x等价于不选择x，则元素为正数或0）

-1 4 f1 不合理
3 8 f2  不合理
0 5 f1  一个元素为5（两个元素，至少一个元素为0 对应 任何元素都不选择的subset sum，如果两个都为0，则这个剩下的元素也为0，如果一个不为0，则不为0的值就是对应的一个元素的值）
4 9 f2  不合理

不选择第1个元素，再不选择第2个元素，再不选择第3个元素，...
每次递归，都要不选择一个绝对值最小的数

class Solution
{
public:
    vector<int> ans;

    int ch[20009];
    int ls[20009];

    int fun(vector<int> &a)
    {
        int n = a.size();
        if(n == 2)
        {
            if(a[0] != 0 && a[1] != 0)
            {
                return 0;
            }
            if(a[0] != 0)
            {
                ans.push_back(a[0]);
                return 1;
            }
            ans.push_back(a[1]);
            return 1;
        }
        int x = a[1] - a[0];
        for(int i=0; i<n ;i++)
        {
            ls[a[i] + 10000]++;
        }
        vector<int > f1, f2;
        f1.reserve(n/2);
        f2.reserve(n/2);
        int u = 0;
        for(int i=0; i<n ;i++)
        {
            if(ch[a[i] + 10000] != 0) // ch[a[i] + 10000] 对应 ch[y + x + 10000]，避免f1和f2重复push_back
            {
                ch[a[i] + 10000]--;
                continue;
            }
            int y = a[i];
            if(ls[y + x + 10000] != 0)
            {
                f1.push_back(y);
                f2.push_back(y + x);
                ls[y + 10000]--;
                ls[y + x + 10000]--;
                ch[y + x + 10000]++;
            }
            else
            {
                u = 1;
                break;
            }
        }
        for(int i=0; i<n ;i++)
        {
            ch[a[i] + 10000] = 0;
            ls[a[i] + 10000] = 0;
        }
        if(u == 1)
        {
            return 0;
        }
        bool x1 = fun(f1);
        if(x1 == 1)
        {
            ans.push_back(x);
            return 1;
        }
        bool x2 = fun(f2);
        if(x2 == 1)
        {
            ans.push_back(-1 * x);
            return 1;
        }
        return 0;
    }

    vector<int> recoverArray(int n, vector<int> &sums)
    {
        sort(sums.begin(), sums.end());
        ans.clear();
        fun(sums);
        return ans;
    }
};


// Source https://leetcode.com/problems/minimum-difference-between-highest-and-lowest-of-k-scores/

You are given a 0-indexed integer array nums, where nums[i] represents the score of the ith student. You are also given an integer k.

Pick the scores of any k students from the array so that the difference between the highest and the lowest of the k scores is minimized.

Return the minimum possible difference.

 

Example 1:

Input: nums = [90], k = 1
Output: 0
Explanation: There is one way to pick score(s) of one student:
- [90]. The difference between the highest and lowest score is 90 - 90 = 0.
The minimum possible difference is 0.
Example 2:

Input: nums = [9,4,1,7], k = 2
Output: 2
Explanation: There are six ways to pick score(s) of two students:
- [9,4,1,7]. The difference between the highest and lowest score is 9 - 4 = 5.
- [9,4,1,7]. The difference between the highest and lowest score is 9 - 1 = 8.
- [9,4,1,7]. The difference between the highest and lowest score is 9 - 7 = 2.
- [9,4,1,7]. The difference between the highest and lowest score is 4 - 1 = 3.
- [9,4,1,7]. The difference between the highest and lowest score is 7 - 4 = 3.
- [9,4,1,7]. The difference between the highest and lowest score is 7 - 1 = 6.
The minimum possible difference is 2.
 

Constraints:

1 <= k <= nums.length <= 1000
0 <= nums[i] <= 105

class Solution
{
public:
    int minimumDifference(vector<int> &nums, int k)
    {
        int n = nums.size();
        if(n == 1) return 0;
        sort(nums.begin(), nums.end());
        int res = INT_MAX;
        for(int i = 0; i <= n - k; i++)
        {
            res = min(res, nums[i + k - 1] - nums[i]);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/find-the-kth-largest-integer-in-the-array/

You are given an array of strings nums and an integer k. Each string in nums represents an integer without leading zeros.

Return the string that represents the kth largest integer in nums.

Note: Duplicate numbers should be counted distinctly. For example, if nums is ["1","2","2"], "2" is the first largest integer, "2" is the second-largest integer, and "1" is the third-largest integer.

 

Example 1:

Input: nums = ["3","6","7","10"], k = 4
Output: "3"
Explanation:
The numbers in nums sorted in non-decreasing order are ["3","6","7","10"].
The 4th largest integer in nums is "3".
Example 2:

Input: nums = ["2","21","12","1"], k = 3
Output: "2"
Explanation:
The numbers in nums sorted in non-decreasing order are ["1","2","12","21"].
The 3rd largest integer in nums is "2".
Example 3:

Input: nums = ["0","0"], k = 2
Output: "0"
Explanation:
The numbers in nums sorted in non-decreasing order are ["0","0"].
The 2nd largest integer in nums is "0".
 

Constraints:

1 <= k <= nums.length <= 104
1 <= nums[i].length <= 100
nums[i] consists of only digits.
nums[i] will not have any leading zeros.

class Solution
{
public:
    string kthLargestNumber(vector<string> &nums, int k)
    {
        auto cmp = [](string &s1, string &s2) -> bool {
            if (s1.length() == s2.length()) return s1 > s2;
            return s1.length() > s2.length();
        };
        priority_queue<string, vector<string>, decltype(cmp)> pq(cmp);
        for (auto &str : nums)
        {
            pq.push(str);
            if (pq.size() > k) pq.pop();
        }
        return pq.top();
    }
};


// Source https://leetcode.com/problems/minimum-number-of-work-sessions-to-finish-the-tasks/

There are n tasks assigned to you. The task times are represented as an integer array tasks of length n, where the ith task takes tasks[i] hours to finish. 
A work session is when you work for at most sessionTime consecutive hours and then take a break.

You should finish the given tasks in a way that satisfies the following conditions:

If you start a task in a work session, you must complete it in the same work session.
You can start a new task immediately after finishing the previous one.
You may complete the tasks in any order.
Given tasks and sessionTime, return the minimum number of work sessions needed to finish all the tasks following the conditions above.

The tests are generated such that sessionTime is greater than or equal to the maximum element in tasks[i].

 

Example 1:

Input: tasks = [1,2,3], sessionTime = 3
Output: 2
Explanation: You can finish the tasks in two work sessions.
- First work session: finish the first and the second tasks in 1 + 2 = 3 hours.
- Second work session: finish the third task in 3 hours.
Example 2:

Input: tasks = [3,1,3,1,1], sessionTime = 8
Output: 2
Explanation: You can finish the tasks in two work sessions.
- First work session: finish all the tasks except the last one in 3 + 1 + 3 + 1 = 8 hours.
- Second work session: finish the last task in 1 hour.
Example 3:

Input: tasks = [1,2,3,4,5], sessionTime = 15
Output: 1
Explanation: You can finish all the tasks in one work session.
 

Constraints:

n == tasks.length
1 <= n <= 14
1 <= tasks[i] <= 10
max(tasks[i]) <= sessionTime <= 15

class Solution
{
public:
    int n;
    int mask;
    short dp[16][16500];

    short recur(int session, int completedTasks, vector<int> &tasks, int sessionTime)
    {
        if(completedTasks == mask) return 1;
        if(dp[session][completedTasks] != -1) return dp[session][completedTasks];
        bool isAvail = false;
        short res = 1e3;
        for(int i = 0; i < n; i++)
        {
            if((completedTasks & (1 << i)) == 0 && tasks[i] <= session)
            {
                isAvail = true;
                res = min(res, recur(session - tasks[i], completedTasks | (1 << i), tasks, sessionTime));
            }
        }

        if(!isAvail)
        {
            res = 1 + recur(sessionTime, completedTasks, tasks, sessionTime);
        }

        return dp[session][completedTasks] = res;
    }

    int minSessions(vector<int> &tasks, int sessionTime)
    {
        n = tasks.size();
        mask = (1 << n) - 1;
        memset(dp, -1, sizeof(dp));
        int completedTasks = 0;
        return recur(sessionTime, completedTasks, tasks, sessionTime);
    }
};


// Source https://leetcode.com/problems/number-of-unique-good-subsequences/

You are given a binary string binary. A subsequence of binary is considered good if it is not empty and has no leading zeros (with the exception of "0").

Find the number of unique good subsequences of binary.

For example, if binary = "001", then all the good subsequences are ["0", "0", "1"], so the unique good subsequences are "0" and "1". Note that subsequences "00", "01", and "001" are not good because they have leading zeros.
Return the number of unique good subsequences of binary. Since the answer may be very large, return it modulo 109 + 7.

A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:

Input: binary = "001"
Output: 2
Explanation: The good subsequences of binary are ["0", "0", "1"].
The unique good subsequences are "0" and "1".
Example 2:

Input: binary = "11"
Output: 2
Explanation: The good subsequences of binary are ["1", "1", "11"].
The unique good subsequences are "1" and "11".
Example 3:

Input: binary = "101"
Output: 5
Explanation: The good subsequences of binary are ["1", "0", "1", "10", "11", "101"]. 
The unique good subsequences are "0", "1", "10", "11", and "101".
 

Constraints:

1 <= binary.length <= 105
binary consists of only '0's and '1's.


dp[i][j] 表示 binary[0 ... i] 中以字符 1 开始，以 j（0或1） 结尾的不同好子序列的个数

1001
dp[i-1][0] -> 10 100                  末尾为1个0，末尾为至少2个0
dp[i-1][1] -> 1 11 101 1001       末尾为1个1，末尾为至少2个1

1001 0
dp[i][0] -> 10 100 1000 110 1010 10010 末尾为1 + 0 = 末尾为1个0，末尾为1个0 + 0 = 末尾为2个0，末尾为至少2个0 + 0 = 末尾为至少3个0
新的末尾为1个0 包括了 原来的末尾为1个0，因为末尾为1个0，这个0的前1位必须为1，因此去掉原来的末尾为1个0中的那个0，剩下的部分属于dp[i-1][1] 末尾为1中的一部分
原来的末尾为1个0 + 0 包括了 原来的末尾为2个0，原来的末尾为2个0 + 0 包括了 原来的末尾为3个0，...

dp[i][0] = dp[i - 1][0] + dp[i - 1][1]

dp[i][1] -> 1 11 101 1001

dp[i][1] = dp[i - 1][1]


1001 1
dp[i][0] -> 10 100 

dp[i][0] = dp[i - 1][0]

dp[i][1] -> 1 11 101 1001 111 1011 10011 末尾为0 + 1 = 末尾为1个1，末尾为1个1 + 1 = 末尾为2个1，末尾为至少2个1 + 1 = 末尾为至少3个1
新的末尾为1个1 包括了 原来的末尾为1个1（单个1除外），因为末尾为1个1，这个1的前1位必须为0或为空，因此去掉原来的末尾为1个1中的那个1，剩下的不为空的部分属于dp[i-1][0] 末尾为0中的一部分
原来的末尾为1个1 + 1 包括了 原来的末尾为2个1，原来的末尾为2个1 + 1 包括了 原来的末尾为3个1，...

dp[i][1] = dp[i - 1][0] + dp[i - 1][1] + 1（单个1）

1010
dp[i-1][0] -> 10 100 110 1010
dp[i-1][1] -> 1 11 101

1010 0
dp[i][0] -> 10 100 110 1010 1000 1100 10100 末尾为1 + 0 = 末尾为1个0，末尾为1个0 + 0 = 末尾为2个0，末尾为至少2个0 + 0 = 末尾为至少3个0
新的末尾为1个0 包括了 原来的末尾为1个0，因为末尾为1个0，这个0的前1位必须为1，因此去掉原来的末尾为1个0中的那个0，剩下的部分属于dp[i-1][1] 末尾为1中的一部分
原来的末尾为1个0 + 0 包括了 原来的末尾为2个0，原来的末尾为2个0 + 0 包括了 原来的末尾为3个0，...

dp[i][0] = dp[i - 1][0] + dp[i - 1][1]

dp[i][1] -> 1 11 101

dp[i][1] = dp[i - 1][1]


1010 1
dp[i][0] -> 10 100 110 1010

dp[i][0] = dp[i - 1][0]

dp[i][1] -> 1 11 101 111 1011 1001 1101 10101 末尾为0 + 1 = 末尾为1个1，末尾为1个1 + 1 = 末尾为2个1，末尾为至少2个1 + 1 = 末尾为至少3个1
新的末尾为1个1 包括了 原来的末尾为1个1（单个1除外），因为末尾为1个1，这个1的前1位必须为0或为空，因此去掉原来的末尾为1个1中的那个1，剩下的不为空的部分属于dp[i-1][0] 末尾为0中的一部分
原来的末尾为1个1 + 1 包括了 原来的末尾为2个1，原来的末尾为2个1 + 1 包括了 原来的末尾为3个1，...

dp[i][1] = dp[i - 1][0] + dp[i - 1][1] + 1（单个1）

endswith[0] 表示以1开始，以0结尾的不同好子序列的个数
endswith[1] 表示以1开始，以1结尾的不同好子序列的个数

haszero 对应 单个0

class Solution
{
public:
    int numberOfUniqueGoodSubsequences(string binary)
    {
        long endswith[2] = {0};
        const long mod = 1e9 + 7;
        bool haszero = false;
        for (char c : binary)
        {
            haszero |= (c == '0');
            endswith[c - '0'] = (endswith[0] + endswith[1] + (c == '0' ? 0L : 1L)) % mod;
        }
        return (endswith[0] + endswith[1] + haszero) % mod;
    }
};


// Source https://leetcode.com/problems/find-the-middle-index-in-array/

Given a 0-indexed integer array nums, find the leftmost middleIndex (i.e., the smallest amongst all the possible ones).

A middleIndex is an index where nums[0] + nums[1] + ... + nums[middleIndex-1] == nums[middleIndex+1] + nums[middleIndex+2] + ... + nums[nums.length-1].

If middleIndex == 0, the left side sum is considered to be 0. Similarly, if middleIndex == nums.length - 1, the right side sum is considered to be 0.

Return the leftmost middleIndex that satisfies the condition, or -1 if there is no such index.

 

Example 1:

Input: nums = [2,3,-1,8,4]
Output: 3
Explanation: The sum of the numbers before index 3 is: 2 + 3 + -1 = 4
The sum of the numbers after index 3 is: 4 = 4
Example 2:

Input: nums = [1,-1,4]
Output: 2
Explanation: The sum of the numbers before index 2 is: 1 + -1 = 0
The sum of the numbers after index 2 is: 0
Example 3:

Input: nums = [2,5]
Output: -1
Explanation: There is no valid middleIndex.
 

Constraints:

1 <= nums.length <= 100
-1000 <= nums[i] <= 1000

class Solution
{
public:
    int findMiddleIndex(vector<int> &nums)
    {
        int n = nums.size();
        int rightSum = 0, leftSum = 0;
        for(int i = 0; i < n; i++)
        {
            rightSum += nums[i];
        }
        for(int i = 0; i < n; i++)
        {
            rightSum -= nums[i];
            if(rightSum == leftSum)
            {
                return i;
            }
            leftSum += nums[i];
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/find-all-groups-of-farmland/

You are given a 0-indexed m x n binary matrix land where a 0 represents a hectare of forested land and a 1 represents a hectare of farmland.

To keep the land organized, there are designated rectangular areas of hectares that consist entirely of farmland. 
These rectangular areas are called groups. No two groups are adjacent, meaning farmland in one group is not four-directionally adjacent to another farmland in a different group.

land can be represented by a coordinate system where the top left corner of land is (0, 0) and the bottom right corner of land is (m-1, n-1). 
Find the coordinates of the top left and bottom right corner of each group of farmland. 
A group of farmland with a top left corner at (r1, c1) and a bottom right corner at (r2, c2) is represented by the 4-length array [r1, c1, r2, c2].

Return a 2D array containing the 4-length arrays described above for each group of farmland in land. 
If there are no groups of farmland, return an empty array. You may return the answer in any order.

 

Example 1:


Input: land = [[1,0,0],[0,1,1],[0,1,1]]
Output: [[0,0,0,0],[1,1,2,2]]
Explanation:
The first group has a top left corner at land[0][0] and a bottom right corner at land[0][0].
The second group has a top left corner at land[1][1] and a bottom right corner at land[2][2].
Example 2:


Input: land = [[1,1],[1,1]]
Output: [[0,0,1,1]]
Explanation:
The first group has a top left corner at land[0][0] and a bottom right corner at land[1][1].
Example 3:


Input: land = [[0]]
Output: []
Explanation:
There are no groups of farmland.
 

Constraints:

m == land.length
n == land[i].length
1 <= m, n <= 300
land consists of only 0's and 1's.
Groups of farmland are rectangular in shape.

class Solution
{
public:
    int n, m;
    int xmin, ymin, xmax, ymax;
    int dirs[4][2] = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
 
   void dfs(int x, int y, vector<vector<int>> &land)
    {
        xmin = min(x, xmin);
        ymin = min(y, ymin);
        xmax = max(x, xmax);
        ymax = max(y, ymax);
        land[x][y] = 0;
        for(int i = 0; i < 4; i++)
        {
            int row = x + dirs[i][0];
            int col = y + dirs[i][1];
            if(row >= 0 && col >= 0 && row < n && col < m && land[row][col] == 1)
            {
                dfs(row, col, land);
            }
        }
    }

    vector<vector<int>> findFarmland(vector<vector<int>> &land)
    {
        n = land.size();
        m = land[0].size();
        vector<vector<int>> ans;
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                if(land[i][j] == 1)
                {
                    xmin = INT_MAX, ymin = INT_MAX, xmax = INT_MIN, ymax = INT_MIN;
                    dfs(i, j, land);
                    ans.push_back({xmin, ymin, xmax, ymax});
                }
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/operations-on-tree/

You are given a tree with n nodes numbered from 0 to n - 1 in the form of a parent array parent where parent[i] is the parent of the ith node. 
The root of the tree is node 0, so parent[0] = -1 since it has no parent. You want to design a data structure that allows users to lock, unlock, and upgrade nodes in the tree.

The data structure should support the following functions:

Lock: Locks the given node for the given user and prevents other users from locking the same node. You may only lock a node using this function if the node is unlocked.
Unlock: Unlocks the given node for the given user. You may only unlock a node using this function if it is currently locked by the same user.
Upgrade: Locks the given node for the given user and unlocks all of its descendants regardless of who locked it. You may only upgrade a node if all 3 conditions are true:
The node is unlocked,
It has at least one locked descendant (by any user), and
It does not have any locked ancestors.
Implement the LockingTree class:

LockingTree(int[] parent) initializes the data structure with the parent array.
lock(int num, int user) returns true if it is possible for the user with id user to lock the node num, or false otherwise. If it is possible, the node num will become locked by the user with id user.
unlock(int num, int user) returns true if it is possible for the user with id user to unlock the node num, or false otherwise. If it is possible, the node num will become unlocked.
upgrade(int num, int user) returns true if it is possible for the user with id user to upgrade the node num, or false otherwise. If it is possible, the node num will be upgraded.
 

Example 1:


Input
["LockingTree", "lock", "unlock", "unlock", "lock", "upgrade", "lock"]
[[[-1, 0, 0, 1, 1, 2, 2]], [2, 2], [2, 3], [2, 2], [4, 5], [0, 1], [0, 1]]
Output
[null, true, false, true, true, true, false]

Explanation
LockingTree lockingTree = new LockingTree([-1, 0, 0, 1, 1, 2, 2]);
lockingTree.lock(2, 2);    // return true because node 2 is unlocked.
                           // Node 2 will now be locked by user 2.
lockingTree.unlock(2, 3);  // return false because user 3 cannot unlock a node locked by user 2.
lockingTree.unlock(2, 2);  // return true because node 2 was previously locked by user 2.
                           // Node 2 will now be unlocked.
lockingTree.lock(4, 5);    // return true because node 4 is unlocked.
                           // Node 4 will now be locked by user 5.
lockingTree.upgrade(0, 1); // return true because node 0 is unlocked and has at least one locked descendant (node 4).
                           // Node 0 will now be locked by user 1 and node 4 will now be unlocked.
lockingTree.lock(0, 1);    // return false because node 0 is already locked.
 

Constraints:

n == parent.length
2 <= n <= 2000
0 <= parent[i] <= n - 1 for i != 0
parent[0] == -1
0 <= num <= n - 1
1 <= user <= 104
parent represents a valid tree.
At most 2000 calls in total will be made to lock, unlock, and upgrade.

class LockingTree
{
public:
    int n;
    vector<int> mutex;
    vector<vector<int>> children;
    vector<int> parent;
    vector<int> childVec;

    LockingTree(vector<int> &parent)
    {
        n = parent.size();
        mutex.resize(n);
        children.resize(n);
        this->parent = parent;
        childVec.reserve(128);
        for(int i = 0; i < n; i++)
        {
            if(parent[i] == -1)continue;
            children[parent[i]].push_back(i);
        }
    }

    bool lock(int num, int user)
    {
        if(mutex[num] > 0) return false; //already locked
        mutex[num] = user;              //node is locked by user
        return true;
    }

    bool unlock(int num, int user)
    {
        if(mutex[num] != user)return false; //node is locked by some other user or node is not locked at all
        mutex[num] = 0;                     //unlock the lock and return true
        return true;
    }

    bool upgrade(int num, int user)
    {
        int k = num;
        while(k != -1)
        {
            if(mutex[k] > 0)return false;   //atleast one of the ancestor is locked and hence return false
            k = parent[k];
        }

        //bfs
        queue<int> q;
        q.push(num);
        bool flag = false;
        childVec.clear();
        while(!q.empty())
        {
            auto z = q.front();
            q.pop();
            for(auto child : children[z])
            {
                if(mutex[child] > 0)    //atleast one in descendants is locked, hence flag is true
                {
                    childVec.push_back(child);
                    flag = true;
                }
                q.push(child);
            }
        }
        if(flag) 
        {
            mutex[num] = user;
            for (auto child : childVec)
            {
                mutex[child] = 0;
            }
            return true;
        }
        return false;
    }
};


// Source https://leetcode.com/problems/the-number-of-good-subsets/

You are given an integer array nums. We call a subset of nums good if its product can be represented as a product of one or more distinct prime numbers.

For example, if nums = [1, 2, 3, 4]:
[2, 3], [1, 2, 3], and [1, 3] are good subsets with products 6 = 2*3, 6 = 2*3, and 3 = 3 respectively.
[1, 4] and [4] are not good subsets with products 4 = 2*2 and 4 = 2*2 respectively.
Return the number of different good subsets in nums modulo 109 + 7.

A subset of nums is any array that can be obtained by deleting some (possibly none or all) elements from nums. Two subsets are different if and only if the chosen indices to delete are different.

 

Example 1:

Input: nums = [1,2,3,4]
Output: 6
Explanation: The good subsets are:
- [1,2]: product is 2, which is the product of distinct prime 2.
- [1,2,3]: product is 6, which is the product of distinct primes 2 and 3.
- [1,3]: product is 3, which is the product of distinct prime 3.
- [2]: product is 2, which is the product of distinct prime 2.
- [2,3]: product is 6, which is the product of distinct primes 2 and 3.
- [3]: product is 3, which is the product of distinct prime 3.
Example 2:

Input: nums = [4,2,3,15]
Output: 5
Explanation: The good subsets are:
- [2]: product is 2, which is the product of distinct prime 2.
- [2,3]: product is 6, which is the product of distinct primes 2 and 3.
- [2,15]: product is 30, which is the product of distinct primes 2, 3, and 5.
- [3]: product is 3, which is the product of distinct prime 3.
- [15]: product is 15, which is the product of distinct primes 3 and 5.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 30


Few Oberservation

Need to maintain the frequency counter for each number
Total prime number less than 30 is 10 (can use bitmask to track the used prime number)
2,3,5,7,11,13,17,19,23,29
Handle the case of 1 differently
Each number from 1 to 30 can repersented as prime mask i.e. bit for the prime number can be set to 1 which divisior of this number. 
If same prime number divides the number more that one time we can set mask for that number 0. For example MASK[4] = MASK[8] = MASK[9] = 0 , etc

假设nums中有5个不同的数（比如2，3，5，7，11），这5个数各自出现的次数为a,b,c,d,e
这5个数选1个、2个、3个等等，its product can be represented as a product of one or more distinct prime numbers.
包含第1个数（比如2）的subset的种类为a + a * b + a * b * c + a * b * c * d + a * b * c * d * e = a * (1 + b * (1 + c * (1 + d * (1 + e * (1 + 0)))))
2
2 * 3
2 * 3 * 5
2 * 3 * 5 * 7
2 * 3 * 5 * 7 * 11
3
3 * 5
3 * 5 * 7
3 * 5 * 7 * 11
5
5 * 7
5 * 7 * 11
7
7 * 11
11

dp[last][mask] 表示已经使用的数的最大值为last，当前可用的数从last + 1开始，已经使用的质数下标对应mask中为1的bit位， the number of different good subsets

class Solution
{
public:
    int prime[10] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29};
    int MASK[31], seen[31];
    long dp[31][1050];
    const long mod = 1e9 + 7;

    long powmod(long base, long exponent)
    {
        long ans = 1;
        while(exponent > 0)
        {
            if(exponent & 1) ans = (ans * base) % mod;
            base = (base * base) % mod;
            exponent /= 2;
        }
        return ans;
    }

    long recur(int last, int mask)
    {
        if (dp[last][mask] != -1) return dp[last][mask];
        long ret = 1;
        for (int i = last + 1; i <= 30; ++i)
        {
            if (seen[i] > 0 && MASK[i] > 0 && (MASK[i]&mask) == 0)
            {
                long cnt = seen[i];
                ret += (cnt * recur(i, mask | MASK[i])) % mod;
                ret %= mod;
            }
        }
        return dp[last][mask] = ret;
    }

    int numberOfGoodSubsets(vector<int> &nums)
    {
        memset(MASK, 0, sizeof(MASK));
        memset(seen, 0, sizeof(seen));
        memset(dp, -1, sizeof(dp));
        for (int val : nums) seen[val]++;
        for (int i = 1 ; i <= 30; ++i)
        {
            if (seen[i] == 0) continue;
            int mask = 0, len = 10;
            int val = i;
            for (int j = 0; j < len; j++)
            {
                if (val % prime[j] == 0)
                {
                    int cnt = 0;
                    while (val % prime[j] == 0) val /= prime[j], cnt++;
                    if (cnt > 1)
                    {
                        mask = 0;
                        break;
                    }
                    mask |= (1 << j);
                }
            }
            MASK[i] = mask;
        }
        long ans = 0, one_cnt = seen[1];
        for (int i = 2; i <= 30; ++i)
        {
            if (seen[i] > 0 && MASK[i] > 0)
            {
                long cnt = seen[i];
                ans += (cnt * recur(i, MASK[i])) % mod;
                ans %= mod;
            }
        }
        auto multi = powmod(2, one_cnt);
        ans = (multi * ans) % mod;
        return ans;
    }
};


// Source https://leetcode.com/problems/count-special-quadruplets/

Given a 0-indexed integer array nums, return the number of distinct quadruplets (a, b, c, d) such that:

nums[a] + nums[b] + nums[c] == nums[d], and
a < b < c < d
 

Example 1:

Input: nums = [1,2,3,6]
Output: 1
Explanation: The only quadruplet that satisfies the requirement is (0, 1, 2, 3) because 1 + 2 + 3 == 6.
Example 2:

Input: nums = [3,3,6,4,5]
Output: 0
Explanation: There are no such quadruplets in [3,3,6,4,5].
Example 3:

Input: nums = [1,1,1,3,5]
Output: 4
Explanation: The 4 quadruplets that satisfy the requirement are:
- (0, 1, 2, 3): 1 + 1 + 1 == 3
- (0, 1, 3, 4): 1 + 1 + 3 == 5
- (0, 2, 3, 4): 1 + 1 + 3 == 5
- (1, 2, 3, 4): 1 + 1 + 3 == 5
 

Constraints:

4 <= nums.length <= 50
1 <= nums[i] <= 100

class Solution
{
public:
    int countQuadruplets(vector<int> &nums)
    {
        int n = nums.size();
        unordered_map<int, int> mp;
        int res = 0;
        for(int c = 2; c < n - 1; ++c)
        {
            int j = c - 1;
            for(int i = 0; i < j; ++i)
            {
                mp[nums[i] + nums[j]]++;
            }
            for(int d = c + 1; d < n; ++d)
            {
                res += mp[nums[d] - nums[c]];
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/the-number-of-weak-characters-in-the-game/

You are playing a game that contains multiple characters, and each of the characters has two main properties: attack and defense. 
You are given a 2D integer array properties where properties[i] = [attacki, defensei] represents the properties of the ith character in the game.

A character is said to be weak if any other character has both attack and defense levels strictly greater than this character's attack and defense levels. 
More formally, a character i is said to be weak if there exists another character j where attackj > attacki and defensej > defensei.

Return the number of weak characters.

 

Example 1:

Input: properties = [[5,5],[6,3],[3,6]]
Output: 0
Explanation: No character has strictly greater attack and defense than the other.
Example 2:

Input: properties = [[2,2],[3,3]]
Output: 1
Explanation: The first character is weak because the second character has a strictly greater attack and defense.
Example 3:

Input: properties = [[1,5],[10,4],[4,3]]
Output: 1
Explanation: The third character is weak because the second character has a strictly greater attack and defense.
 

Constraints:

2 <= properties.length <= 105
properties[i].length == 2
1 <= attacki, defensei <= 105

class Solution
{
public:
    int numberOfWeakCharacters(vector<vector<int>> &properties)
    {
        sort(properties.begin(), properties.end(), [] (auto &v1, auto &v2) -> bool {
            if (v1[0] == v2[0]) return v1[1] > v2[1];
            return v1[0] < v2[0];
        });
        int n = properties.size();
        int res = 0;
        vector<int> defenses;
        for(int i = 0, pre_attack = -1; i < n; ++i)
        {
            if(properties[i][0] == pre_attack)
            {
                defenses.push_back(properties[i][1]);
            }
            else
            {
                while(!defenses.empty() && defenses.back() < properties[i][1])
                {
                    defenses.pop_back();
                    res++;
                }
                defenses.push_back(properties[i][1]);
            }
            pre_attack = properties[i][0];
        }
        return res;
    }
};


// Source https://leetcode.com/problems/first-day-where-you-have-been-in-all-the-rooms/

There are n rooms you need to visit, labeled from 0 to n - 1. Each day is labeled, starting from 0. You will go in and visit one room a day.

Initially on day 0, you visit room 0. The order you visit the rooms for the coming days is determined by the following rules and a given 0-indexed array nextVisit of length n:

Assuming that on a day, you visit room i,
if you have been in room i an odd number of times (including the current visit), on the next day you will visit a room with a lower or equal room number specified by nextVisit[i] 
where 0 <= nextVisit[i] <= i;
if you have been in room i an even number of times (including the current visit), on the next day you will visit room (i + 1) mod n.
Return the label of the first day where you have been in all the rooms. It can be shown that such a day exists. Since the answer may be very large, return it modulo 109 + 7.

 

Example 1:

Input: nextVisit = [0,0]
Output: 2
Explanation:
- On day 0, you visit room 0. The total times you have been in room 0 is 1, which is odd.
  On the next day you will visit room nextVisit[0] = 0
- On day 1, you visit room 0, The total times you have been in room 0 is 2, which is even.
  On the next day you will visit room (0 + 1) mod 2 = 1
- On day 2, you visit room 1. This is the first day where you have been in all the rooms.
Example 2:

Input: nextVisit = [0,0,2]
Output: 6
Explanation:
Your room visiting order for each day is: [0,0,1,0,0,1,2,...].
Day 6 is the first day where you have been in all the rooms.
Example 3:

Input: nextVisit = [0,1,2,0]
Output: 6
Explanation:
Your room visiting order for each day is: [0,0,1,1,2,2,3,...].
Day 6 is the first day where you have been in all the rooms.
 

Constraints:

n == nextVisit.length
2 <= n <= 105
0 <= nextVisit[i] <= i


[0,0,2,1,2,3]
0 0 1 0 0 1 2 2 3 1 0 0 1 2 2 3 4 2 2 3 1 0 0 1 2 2 3 4 5

第一次到达房间i，下一步回访房间nextVisit[i]，此时小于i的房间都到达了偶数次
如果nextVisit[i] < i，则回访房间nextVisit[i]后，再次到达房间i，整个过程与第一次到达房间nextVisit[i]，再经过若干步，到达房间i的过程一样，因为都是奇数次访问房间nextVisit[i]

steps[i] 表示第一次到达房间 i 时的天数，则
steps[i] = steps[i - 1] + 1 + (steps[i - 1] - steps[nextVisit[i - 1]]) + 1 = 2 * steps[i - 1] - steps[nextVisit[i - 1]] + 2
                              从steps[i - 1] 跳到 steps[nextVisit[i - 1]] 算1天  从steps[i - 1] 跳到 steps[i] 算1天

class Solution
{
public:
    int firstDayBeenInAllRooms(vector<int> &nextVisit)
    {
        int n = nextVisit.size();
        const long mod = 1e9 + 7;
        vector<long> dp(n);
        for (int i = 1; i < n; i++)
        {
            dp[i] = (2 * dp[i - 1] - dp[nextVisit[i - 1]] + 2 + mod) % mod;
        }
        return dp[n - 1];
    }
};


// Source https://leetcode.com/problems/gcd-sort-of-an-array/

You are given an integer array nums, and you can perform the following operation any number of times on nums:

Swap the positions of two elements nums[i] and nums[j] if gcd(nums[i], nums[j]) > 1 where gcd(nums[i], nums[j]) is the greatest common divisor of nums[i] and nums[j].
Return true if it is possible to sort nums in non-decreasing order using the above swap method, or false otherwise.

 

Example 1:

Input: nums = [7,21,3]
Output: true
Explanation: We can sort [7,21,3] by performing the following operations:
- Swap 7 and 21 because gcd(7,21) = 7. nums = [21,7,3]
- Swap 21 and 3 because gcd(21,3) = 3. nums = [3,7,21]
Example 2:

Input: nums = [5,2,6,2]
Output: false
Explanation: It is impossible to sort the array because 5 cannot be swapped with any other element.
Example 3:

Input: nums = [10,5,9,3,15]
Output: true
We can sort [10,5,9,3,15] by performing the following operations:
- Swap 10 and 15 because gcd(10,15) = 5. nums = [15,5,9,3,10]
- Swap 15 and 3 because gcd(15,3) = 3. nums = [3,5,9,15,10]
- Swap 10 and 15 because gcd(10,15) = 5. nums = [3,5,9,10,15]
 

Constraints:

1 <= nums.length <= 3 * 104
2 <= nums[i] <= 105

class Solution
{
public:

    struct DSU
    {
        vector<int> parent;
        vector<int> size;

        DSU(int n)
        {
            parent = vector<int>(n);
            size = vector<int>(n, 1);
            for(int i = 0; i < n; i++)
            {
                parent[i] = i;
            }
        }

        int find(int x)
        {
            if(parent[x] != x) parent[x] = find(parent[x]);
            return parent[x];
        }

        bool join(int a, int b)
        {
            int root_a = find(a);
            int root_b = find(b);
            if (root_a == root_b) return false;
            if (size[root_a] > size[root_b])
            {
                parent[root_b] = root_a;
                size[root_a] += size[root_b];
            }
            else
            {
                parent[root_a] = root_b;
                size[root_b] += size[root_a];
            }
            return true;
        }

        int count(int x)
        {
            return size[x];
        }
    };

    bool gcdSort(vector<int> &nums)
    {
        int n = nums.size();
        int mxVal = *max_element(nums.begin(), nums.end()) ;
        DSU dsu(mxVal + 1) ;
        for(int val : nums)
        {
            for(int j = 2 ; j * j <= val; ++j)
            {
                if(val % j == 0)
                {
                    dsu.join(val, j) ;
                    dsu.join(val, val / j) ;
                }
            }
        }
        vector<int> r = nums;
        sort(r.begin(), r.end()) ;
        for(int i = 0 ; i < n ; i++)
        {
            if(r[i] != nums[i] && dsu.find(r[i]) != dsu.find(nums[i]))  return false ;
        }
        return true ;
    }
};


// Source https://leetcode.com/problems/reverse-prefix-of-word/

Given a 0-indexed string word and a character ch, reverse the segment of word that starts at index 0 and ends at the index of the first occurrence of ch (inclusive). 
If the character ch does not exist in word, do nothing.

For example, if word = "abcdefd" and ch = "d", then you should reverse the segment that starts at 0 and ends at 3 (inclusive). The resulting string will be "dcbaefd".
Return the resulting string.

 

Example 1:

Input: word = "abcdefd", ch = "d"
Output: "dcbaefd"
Explanation: The first occurrence of "d" is at index 3. 
Reverse the part of word from 0 to 3 (inclusive), the resulting string is "dcbaefd".
Example 2:

Input: word = "xyxzxe", ch = "z"
Output: "zxyxxe"
Explanation: The first and only occurrence of "z" is at index 3.
Reverse the part of word from 0 to 3 (inclusive), the resulting string is "zxyxxe".
Example 3:

Input: word = "abcd", ch = "z"
Output: "abcd"
Explanation: "z" does not exist in word.
You should not do any reverse operation, the resulting string is "abcd".
 

Constraints:

1 <= word.length <= 250
word consists of lowercase English letters.
ch is a lowercase English letter.

class Solution
{
public:
    string reversePrefix(string word, char ch)
    {
        int index = word.find(ch);
        if(index != string::npos) reverse(word.begin(), word.begin() + index + 1);
        return word;
    }
};


// Source https://leetcode.com/problems/number-of-pairs-of-interchangeable-rectangles/

You are given n rectangles represented by a 0-indexed 2D integer array rectangles, where rectangles[i] = [widthi, heighti] denotes the width and height of the ith rectangle.

Two rectangles i and j (i < j) are considered interchangeable if they have the same width-to-height ratio. 
More formally, two rectangles are interchangeable if widthi/heighti == widthj/heightj (using decimal division, not integer division).

Return the number of pairs of interchangeable rectangles in rectangles.

 

Example 1:

Input: rectangles = [[4,8],[3,6],[10,20],[15,30]]
Output: 6
Explanation: The following are the interchangeable pairs of rectangles by index (0-indexed):
- Rectangle 0 with rectangle 1: 4/8 == 3/6.
- Rectangle 0 with rectangle 2: 4/8 == 10/20.
- Rectangle 0 with rectangle 3: 4/8 == 15/30.
- Rectangle 1 with rectangle 2: 3/6 == 10/20.
- Rectangle 1 with rectangle 3: 3/6 == 15/30.
- Rectangle 2 with rectangle 3: 10/20 == 15/30.
Example 2:

Input: rectangles = [[4,5],[7,8]]
Output: 0
Explanation: There are no interchangeable pairs of rectangles.
 

Constraints:

n == rectangles.length
1 <= n <= 105
rectangles[i].length == 2
1 <= widthi, heighti <= 105

class Solution
{
public:
    long long interchangeableRectangles(vector<vector<int>> &rectangles)
    {
        unordered_map<double, long long> mp;
        for (auto &v : rectangles)
        {
            double ratio = (double)v[0] / v[1];
            mp[ratio]++;
        }
        long long ans = 0;
        for(auto p : mp)
        {
            ans += ((p.second - 1) * p.second) / 2;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/maximum-product-of-the-length-of-two-palindromic-subsequences/

Given a string s, find two disjoint palindromic subsequences of s such that the product of their lengths is maximized. 
The two subsequences are disjoint if they do not both pick a character at the same index.

Return the maximum possible product of the lengths of the two palindromic subsequences.

A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters. 
A string is palindromic if it reads the same forward and backward.

 

Example 1:

example-1
Input: s = "leetcodecom"
Output: 9
Explanation: An optimal solution is to choose "ete" for the 1st subsequence and "cdc" for the 2nd subsequence.
The product of their lengths is: 3 * 3 = 9.
Example 2:

Input: s = "bb"
Output: 1
Explanation: An optimal solution is to choose "b" (the first character) for the 1st subsequence and "b" (the second character) for the 2nd subsequence.
The product of their lengths is: 1 * 1 = 1.
Example 3:

Input: s = "accbcaxxcxx"
Output: 25
Explanation: An optimal solution is to choose "accca" for the 1st subsequence and "xxcxx" for the 2nd subsequence.
The product of their lengths is: 5 * 5 = 25.
 

Constraints:

2 <= s.length <= 12
s consists of lowercase English letters only.

class Solution
{
public:
    int maxProduct(string s)
    {
        int n = s.length();
        int maskMax = (1 << n) - 1;
        int res = 0;
        for(int mask = 1; mask < maskMax; ++mask)
        {
            string s1, s2;
            for(int i = 0; i < n; i++)
            {
                if(mask & (1 << i))
                    s1 += s[i];
                else
                    s2 += s[i];
            }
            int MaxLen1 = helper(s1, 0, s1.length() - 1);
            int MaxLen2 = helper(s2, 0, s2.length() - 1);
            res = max(res, MaxLen1 * MaxLen2);
        }
        return res;
    }

    int helper(string &s, int l, int r)
    {
        if(l > r)
            return 0;
        if(l == r)
            return 1;
        if(s[l] == s[r])
            return 2 + helper(s, l + 1, r - 1);
        else
            return max(helper(s, l + 1, r), helper(s, l, r - 1));
    }
};


// Source https://leetcode.com/problems/smallest-missing-genetic-value-in-each-subtree/

There is a family tree rooted at 0 consisting of n nodes numbered 0 to n - 1. You are given a 0-indexed integer array parents, where parents[i] is the parent for node i. 
Since node 0 is the root, parents[0] == -1.

There are 10^5 genetic values, each represented by an integer in the inclusive range [1, 105]. You are given a 0-indexed integer array nums, where nums[i] is a distinct genetic value for node i.

Return an array ans of length n where ans[i] is the smallest genetic value that is missing from the subtree rooted at node i.

The subtree rooted at a node x contains node x and all of its descendant nodes.

 

Example 1:


Input: parents = [-1,0,0,2], nums = [1,2,3,4]
Output: [5,1,1,1]
Explanation: The answer for each subtree is calculated as follows:
- 0: The subtree contains nodes [0,1,2,3] with values [1,2,3,4]. 5 is the smallest missing value.
- 1: The subtree contains only node 1 with value 2. 1 is the smallest missing value.
- 2: The subtree contains nodes [2,3] with values [3,4]. 1 is the smallest missing value.
- 3: The subtree contains only node 3 with value 4. 1 is the smallest missing value.
Example 2:


Input: parents = [-1,0,1,0,3,3], nums = [5,4,6,2,1,3]
Output: [7,1,1,4,2,1]
Explanation: The answer for each subtree is calculated as follows:
- 0: The subtree contains nodes [0,1,2,3,4,5] with values [5,4,6,2,1,3]. 7 is the smallest missing value.
- 1: The subtree contains nodes [1,2] with values [4,6]. 1 is the smallest missing value.
- 2: The subtree contains only node 2 with value 6. 1 is the smallest missing value.
- 3: The subtree contains nodes [3,4,5] with values [2,1,3]. 4 is the smallest missing value.
- 4: The subtree contains only node 4 with value 1. 2 is the smallest missing value.
- 5: The subtree contains only node 5 with value 3. 1 is the smallest missing value.
Example 3:

Input: parents = [-1,2,3,0,2,4,1], nums = [2,3,4,5,6,7,8]
Output: [1,1,1,1,1,1,1]
Explanation: The value 1 is missing from all the subtrees.
 

Constraints:

n == parents.length == nums.length
2 <= n <= 105
0 <= parents[i] <= n - 1 for i != 0
parents[0] == -1
parents represents a valid tree.
1 <= nums[i] <= 105
Each nums[i] is distinct.

假设node 有3个child，分别为child1, child2,child3
递归child1，返回的最小miss值为temp1，则child1保证了[1, temp1-1]存在
递归child2，返回的最小miss值为temp2，则child2保证了[1, temp2-1]存在
递归child3，返回的最小miss值为temp3，则child3保证了[1, temp3-1]存在
node对应的miss值应该从temp1、temp2、temp3的最大值开始检查

class Solution
{
public:
    vector<int> ans;
    vector<int> dsu;

    int find(int node)
    {
        if(dsu[node] != node) dsu[node] = find(dsu[node]);
        return dsu[node];
    }

    int dfs(vector<vector<int>> &adj, vector<int> &nums, int node)
    {
        if(adj[node].size() == 0)
        {
            if(nums[node] != 1)
            {
                ans[node] = 1;
                return 1;
            }
            ans[node] = 2;
            return 2;
        }
        int chosen = INT_MIN;
        for(int child : adj[node])
        {
            int temp = dfs(adj, nums, child);
            chosen = max(chosen, temp);
            dsu[nums[child]] = nums[node];
        }
        while(find(chosen) == nums[node])
        {
            chosen++;
        }
        ans[node] = chosen;
        return chosen;
    }

    vector<int> smallestMissingValueSubtree(vector<int> &parents, vector<int> &nums)
    {
        int n = parents.size();
        dsu.resize(100009);
        for (int i = 0; i < 100009; ++i) dsu[i] = i;
        vector<vector<int>> adj(n);
        for(int i = 1; i < n; i++)
        {
            adj[parents[i]].push_back(i);
        }
        ans.resize(n);
        dfs(adj, nums, 0);
        return ans;
    }
};


// Source https://leetcode.com/problems/count-number-of-pairs-with-absolute-difference-k/

Given an integer array nums and an integer k, return the number of pairs (i, j) where i < j such that |nums[i] - nums[j]| == k.

The value of |x| is defined as:

x if x >= 0.
-x if x < 0.
 

Example 1:

Input: nums = [1,2,2,1], k = 1
Output: 4
Explanation: The pairs with an absolute difference of 1 are:
- [1,2,2,1]
- [1,2,2,1]
- [1,2,2,1]
- [1,2,2,1]
Example 2:

Input: nums = [1,3], k = 3
Output: 0
Explanation: There are no pairs with an absolute difference of 3.
Example 3:

Input: nums = [3,2,1,5,4], k = 2
Output: 3
Explanation: The pairs with an absolute difference of 2 are:
- [3,2,1,5,4]
- [3,2,1,5,4]
- [3,2,1,5,4]
 

Constraints:

1 <= nums.length <= 200
1 <= nums[i] <= 100
1 <= k <= 99

class Solution
{
public:
    int countKDifference(vector<int> &nums, int k)
    {
        unordered_map<int, int> mp;
        int ans = 0;
        for(auto x : nums)
        {
            ans += mp[x + k];
            ans += mp[x - k];
            mp[x]++;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/find-original-array-from-doubled-array/

An integer array original is transformed into a doubled array changed by appending twice the value of every element in original, and then randomly shuffling the resulting array.

Given an array changed, return original if changed is a doubled array. If changed is not a doubled array, return an empty array. The elements in original may be returned in any order.

 

Example 1:

Input: changed = [1,3,4,2,6,8]
Output: [1,3,4]
Explanation: One possible original array could be [1,3,4]:
- Twice the value of 1 is 1 * 2 = 2.
- Twice the value of 3 is 3 * 2 = 6.
- Twice the value of 4 is 4 * 2 = 8.
Other original arrays could be [4,3,1] or [3,1,4].

1 2 3 4 6 8
1 3 4
2 6 8

Example 2:

Input: changed = [6,3,0,1]
Output: []
Explanation: changed is not a doubled array.
Example 3:

Input: changed = [1]
Output: []
Explanation: changed is not a doubled array.
 

Constraints:

1 <= changed.length <= 105
0 <= changed[i] <= 105

class Solution
{
public:
    int arr1[200005];
    int arr2[200005];

    vector<int> findOriginalArray(vector<int> &changed)
    {
        int n = changed.size();
        if(n % 2) return {};
        sort(changed.begin(), changed.end());
        for (auto val : changed) arr1[val]++;
        bool flag = true;
        vector<int> res;
        for (auto val : changed)
        {
            if (arr2[val] > 0) { --arr2[val]; continue; }
            if (arr1[val] > 0)
            {
                if (arr1[val * 2] == 0) { flag = false; break; }
                --arr1[val];
                --arr1[val * 2];
                ++arr2[val * 2];
                res.push_back(val);
            }
            else
            {
                flag = false; break;
            }
        }
        if (!flag) return {};
        return res;
    }
};


// Source https://leetcode.com/problems/maximum-earnings-from-taxi/

There are n points on a road you are driving your taxi on. The n points on the road are labeled from 1 to n in the direction you are going, 
and you want to drive from point 1 to point n to make money by picking up passengers. You cannot change the direction of the taxi.

The passengers are represented by a 0-indexed 2D integer array rides, where rides[i] = [starti, endi, tipi] 
denotes the ith passenger requesting a ride from point starti to point endi who is willing to give a tipi dollar tip.

For each passenger i you pick up, you earn endi - starti + tipi dollars. You may only drive at most one passenger at a time.

Given n and rides, return the maximum number of dollars you can earn by picking up the passengers optimally.

Note: You may drop off a passenger and pick up a different passenger at the same point.

 

Example 1:

Input: n = 5, rides = [[2,5,4],[1,5,1]]
Output: 7
Explanation: We can pick up passenger 0 to earn 5 - 2 + 4 = 7 dollars.
Example 2:

Input: n = 20, rides = [[1,6,1],[3,10,2],[10,12,3],[11,12,2],[12,15,2],[13,18,1]]
Output: 20
Explanation: We will pick up the following passengers:
- Drive passenger 1 from point 3 to point 10 for a profit of 10 - 3 + 2 = 9 dollars.
- Drive passenger 2 from point 10 to point 12 for a profit of 12 - 10 + 3 = 5 dollars.
- Drive passenger 5 from point 13 to point 18 for a profit of 18 - 13 + 1 = 6 dollars.
We earn 9 + 5 + 6 = 20 dollars in total.
 

Constraints:

1 <= n <= 105
1 <= rides.length <= 3 * 104
rides[i].length == 3
1 <= starti < endi <= n
1 <= tipi <= 105

class Solution
{
public:
    int len;
    long long dp[100005];

    int nextPosition(vector<vector<int>> &rides, int val, int idx)
    {
        int l = idx ;
        int h = len - 1;
        int ans = - 1;
        while(l <= h)
        {
            int mid = l + (h - l) / 2;
            if(rides[mid][0] >= val)
            {
                ans = mid;
                h = mid - 1;
            }
            else l = mid + 1;
        }
        return ans;
    }

    long long recur(vector<vector<int>> &rides, int idx)
    {
        if(idx >= len) return 0;

        if(dp[idx] != -1) return dp[idx];

        // option 1 is to not consider this passenger
        long long op1 = recur(rides, idx + 1);

        // option 2 is to consider this passenger
        int nextPos = nextPosition(rides, rides[idx][1], idx + 1);

        long long op2 = rides[idx][1] - rides[idx][0] + rides[idx][2];
        if (nextPos != -1)
        {
            op2 += recur(rides, nextPos);
        }
        return dp[idx] = max(op1, op2);
    }

    long long maxTaxiEarnings(int n, vector<vector<int>> &rides)
    {
        len = rides.size();
        sort(rides.begin(), rides.end());
        memset(dp, -1, sizeof(dp));
        return recur(rides, 0);
    }
};


// Source https://leetcode.com/problems/minimum-number-of-operations-to-make-array-continuous/

You are given an integer array nums. In one operation, you can replace any element in nums with any integer.

nums is considered continuous if both of the following conditions are fulfilled:

All elements in nums are unique.
The difference between the maximum element and the minimum element in nums equals nums.length - 1.
For example, nums = [4, 2, 5, 3] is continuous, but nums = [1, 2, 3, 5, 6] is not continuous.

Return the minimum number of operations to make nums continuous.

 

Example 1:

Input: nums = [4,2,5,3]
Output: 0
Explanation: nums is already continuous.
Example 2:

Input: nums = [1,2,3,5,6]
Output: 1
Explanation: One possible solution is to change the last element to 4.
The resulting array is [1,2,3,5,4], which is continuous.
Example 3:

Input: nums = [1,10,100,1000]
Output: 3
Explanation: One possible solution is to:
- Change the second element to 2.
- Change the third element to 3.
- Change the fourth element to 4.
The resulting array is [1,2,3,4], which is continuous.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 109

先按照从小到大对nums进行排序，再把去除重复后的值保存到v中
当v[i]作为最小值时，最大值为v[i] + n-1，计算此时v中有多少个值已经在v[i]和v[i] + n-1之间，用n去减，就可以得到此时需要的操作数量

class Solution
{
public:
    int minOperations(vector<int> &nums)
    {
        int n = nums.size();
        sort(nums.begin(), nums.end()); // sort the array
        vector<int> v; // array to store only unique elements
        v.reserve(n / 2);
        v.push_back(nums[0]);
        for(int i = 1; i < n; i++)
        {
            if(nums[i] == nums[i - 1])
            {
                continue;
            }
            v.push_back(nums[i]);
        }
        int res = n;
        for(int i = 0; i < v.size(); i++)
        {
            int end = v[i] + n - 1; // considering each v[i] as the minimum element get its maximum by adding it with n-1
            // now we have to convert all the elements in v to [v[i], end] inclusive. So to do that, we've to find all those elements that are not already in the range [v[i], end].
            auto itr = upper_bound(v.begin(), v.end(), end); // here upper_bound helps us to find all the elements that are greater than end.
            int in_range = (itr - v.begin()) - i; // number of elements in range [v[i], end]
            res = min(res, n - in_range); // (n - in_range) gives all the elements that needs to be converted.
        }
        return res;
    }
};


// Source https://leetcode.com/problems/final-value-of-variable-after-performing-operations/

There is a programming language with only four operations and one variable X:

++X and X++ increments the value of the variable X by 1.
--X and X-- decrements the value of the variable X by 1.
Initially, the value of X is 0.

Given an array of strings operations containing a list of operations, return the final value of X after performing all the operations.

 

Example 1:

Input: operations = ["--X","X++","X++"]
Output: 1
Explanation: The operations are performed as follows:
Initially, X = 0.
--X: X is decremented by 1, X =  0 - 1 = -1.
X++: X is incremented by 1, X = -1 + 1 =  0.
X++: X is incremented by 1, X =  0 + 1 =  1.
Example 2:

Input: operations = ["++X","++X","X++"]
Output: 3
Explanation: The operations are performed as follows:
Initially, X = 0.
++X: X is incremented by 1, X = 0 + 1 = 1.
++X: X is incremented by 1, X = 1 + 1 = 2.
X++: X is incremented by 1, X = 2 + 1 = 3.
Example 3:

Input: operations = ["X++","++X","--X","X--"]
Output: 0
Explanation: The operations are performed as follows:
Initially, X = 0.
X++: X is incremented by 1, X = 0 + 1 = 1.
++X: X is incremented by 1, X = 1 + 1 = 2.
--X: X is decremented by 1, X = 2 - 1 = 1.
X--: X is decremented by 1, X = 1 - 1 = 0.
 

Constraints:

1 <= operations.length <= 100
operations[i] will be either "++X", "X++", "--X", or "X--".

class Solution
{
public:
    int finalValueAfterOperations(vector<string> &operations)
    {
        int x = 0;
        for (auto &str : operations)
        {
            if(str[1] == '+')
            {
                x++;
            }
            else
            {
                x--;
            }
        }
        return x;
    }
};


// Source https://leetcode.com/problems/sum-of-beauty-in-the-array/

You are given a 0-indexed integer array nums. For each index i (1 <= i <= nums.length - 2) the beauty of nums[i] equals:

2, if nums[j] < nums[i] < nums[k], for all 0 <= j < i and for all i < k <= nums.length - 1.
1, if nums[i - 1] < nums[i] < nums[i + 1], and the previous condition is not satisfied.
0, if none of the previous conditions holds.
Return the sum of beauty of all nums[i] where 1 <= i <= nums.length - 2.

 

Example 1:

Input: nums = [1,2,3]
Output: 2
Explanation: For each index i in the range 1 <= i <= 1:
- The beauty of nums[1] equals 2.
Example 2:

Input: nums = [2,4,6,4]
Output: 1
Explanation: For each index i in the range 1 <= i <= 2:
- The beauty of nums[1] equals 1.
- The beauty of nums[2] equals 0.
Example 3:

Input: nums = [3,2,1]
Output: 0
Explanation: For each index i in the range 1 <= i <= 1:
- The beauty of nums[1] equals 0.
 

Constraints:

3 <= nums.length <= 105
1 <= nums[i] <= 105


class Solution
{
public:
    int sumOfBeauties(vector<int> &nums)
    {
        int n = nums.size();
        vector<int> leftMx(n, INT_MIN);
        int mxVal = nums[0];
        for(int i = 1; i < n; i++)
        {
            leftMx[i] = mxVal;
            mxVal = max(mxVal, nums[i]);
        }
        vector<int> rightMn(n, INT_MAX);
        int mnVal = nums[n - 1];
        for(int i = n - 2; i >= 0; i--)
        {
            rightMn[i] = mnVal;
            mnVal = min(mnVal, nums[i]);
        }
        int res = 0;
        for(int i = 1; i < n - 1; i++)
        {
            if(nums[i] > leftMx[i] && nums[i] < rightMn[i])
                res += 2;
            else if(nums[i] > nums[i - 1] && nums[i] < nums[i + 1])
                res += 1;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/detect-squares/

You are given a stream of points on the X-Y plane. Design an algorithm that:

Adds new points from the stream into a data structure. Duplicate points are allowed and should be treated as different points.
Given a query point, counts the number of ways to choose three points from the data structure such that the three points and the query point form an axis-aligned square with positive area.
An axis-aligned square is a square whose edges are all the same length and are either parallel or perpendicular to the x-axis and y-axis.

Implement the DetectSquares class:

DetectSquares() Initializes the object with an empty data structure.
void add(int[] point) Adds a new point point = [x, y] to the data structure.
int count(int[] point) Counts the number of ways to form axis-aligned squares with point point = [x, y] as described above.
 

Example 1:


Input
["DetectSquares", "add", "add", "add", "count", "count", "add", "count"]
[[], [[3, 10]], [[11, 2]], [[3, 2]], [[11, 10]], [[14, 8]], [[11, 2]], [[11, 10]]]
Output
[null, null, null, null, 1, 0, null, 2]

Explanation
DetectSquares detectSquares = new DetectSquares();
detectSquares.add([3, 10]);
detectSquares.add([11, 2]);
detectSquares.add([3, 2]);
detectSquares.count([11, 10]); // return 1. You can choose:
                               //   - The first, second, and third points
detectSquares.count([14, 8]);  // return 0. The query point cannot form a square with any points in the data structure.
detectSquares.add([11, 2]);    // Adding duplicate points is allowed.
detectSquares.count([11, 10]); // return 2. You can choose:
                               //   - The first, second, and third points
                               //   - The first, third, and fourth points
 

Constraints:

point.length == 2
0 <= x, y <= 1000
At most 3000 calls in total will be made to add and count.

class DetectSquares
{
public:
    unordered_map<int, unordered_map<int, int>> mp1;
    unordered_map<int, unordered_map<int, int>> mp2;

    DetectSquares()
    {

    }

    void add(vector<int> point)
    {
        int X = point[0];
        int Y = point[1];
        mp1[X][Y]++;
        mp2[Y][X]++;
    }

    int count(vector<int> point)
    {
        int cnt = 0;
        int i = point[0];
        int j = point[1];
        for(auto [a, cntA] : mp2[j])
        {
            int d = abs(a - i); // the side of square
            if(d == 0) continue;
            if(mp1[a].count(j + d))
            {
                int b = j + d;
                if(mp2[b].count(i))
                    cnt += cntA * mp1[a][j + d] * mp2[b][i];
            }
            if(mp1[a].count(j - d))
            {
                int b = j - d;
                if(mp2[b].count(i))
                    cnt += cntA * mp1[a][j - d] * mp2[b][i];
            }
        }
        return cnt;
    }
};


// Source https://leetcode.com/problems/longest-subsequence-repeated-k-times/

You are given a string s of length n, and an integer k. You are tasked to find the longest subsequence repeated k times in string s.

A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.

A subsequence seq is repeated k times in the string s if seq * k is a subsequence of s, where seq * k represents a string constructed by concatenating seq k times.

For example, "bba" is repeated 2 times in the string "bababcba", because the string "bbabba", constructed by concatenating "bba" 2 times, is a subsequence of the string "bababcba".
Return the longest subsequence repeated k times in string s. If multiple such subsequences are found, return the lexicographically largest one. 
If there is no such subsequence, return an empty string.

 

Example 1:

example 1
Input: s = "letsleetcode", k = 2
Output: "let"
Explanation: There are two longest subsequences repeated 2 times: "let" and "ete".
"let" is the lexicographically largest one.
Example 2:

Input: s = "bb", k = 2
Output: "b"
Explanation: The longest subsequence repeated 2 times is "b".
Example 3:

Input: s = "ab", k = 2
Output: ""
Explanation: There is no subsequence repeated 2 times. Empty string is returned.
 

Constraints:

n == s.length
2 <= n, k <= 2000
2 <= n < k * 8
s consists of lowercase English letters.


class Solution
{
public:

    bool isSubsequence(string &s, string &t, int k)
    {
        int sLen = s.length();
        int tLen = t.length();
        int repeatCnt = 0;
        for (int i = 0, j = 0, sleft = sLen, tleft = k * tLen; repeatCnt < k && sleft >= tleft; ++i, --sleft)
        {
            if(s[i] == t[j])
            {
                ++j;
                --tleft;
                if (j == tLen)
                {
                    ++repeatCnt;
                    j = 0;
                }
            }
        }
        return repeatCnt == k;
    }

    bool generate(int n, vector<int> &freq, string &ss, string &s, int k)
    {
        if(n == 0) return isSubsequence(s, ss, k);
        for(int i = 25; i >= 0; --i)
        {
            if(freq[i] == 0) continue;
            ss.push_back('a' + i);
            freq[i]--;
            if(generate(n - 1, freq, ss, s, k)) return true;
            freq[i]++;
            ss.pop_back();
        }
        return false;
    }

    string longestSubsequenceRepeatedK(string s, int k)
    {
        vector<int> freq(26);
        for(auto ch : s) freq[ch - 'a']++;
        int len = 0;
        for(int i = 0; i < 26; ++i)
        {
            freq[i] /= k;
            len += freq[i];
        }
        for(; len > 0; --len)
        {
            string ss;
            if(generate(len, freq, ss, s, k)) return ss;
        }
        return "";
    }
};


// Source https://leetcode.com/problems/maximum-difference-between-increasing-elements/

Given a 0-indexed integer array nums of size n, find the maximum difference between nums[i] and nums[j] (i.e., nums[j] - nums[i]), such that 0 <= i < j < n and nums[i] < nums[j].

Return the maximum difference. If no such i and j exists, return -1.

 

Example 1:

Input: nums = [7,1,5,4]
Output: 4
Explanation:
The maximum difference occurs with i = 1 and j = 2, nums[j] - nums[i] = 5 - 1 = 4.
Note that with i = 1 and j = 0, the difference nums[j] - nums[i] = 7 - 1 = 6, but i > j, so it is not valid.
Example 2:

Input: nums = [9,4,3,2]
Output: -1
Explanation:
There is no i and j such that i < j and nums[i] < nums[j].
Example 3:

Input: nums = [1,5,2,10]
Output: 9
Explanation:
The maximum difference occurs with i = 0 and j = 3, nums[j] - nums[i] = 10 - 1 = 9.
 

Constraints:

n == nums.length
2 <= n <= 1000
1 <= nums[i] <= 109

class Solution
{
public:
    int maximumDifference(vector<int> &nums)
    {
        int n = nums.size();
        int res = 0;
        int mnVal = nums[0];
        for (int i = 1; i < n; ++i)
        {
            res = max(res, max(nums[i] - mnVal, 0));
            mnVal = min(mnVal, nums[i]);
        }
        if (res == 0) return -1;
        return res;
    }
};


// Source https://leetcode.com/problems/grid-game/

You are given a 0-indexed 2D array grid of size 2 x n, where grid[r][c] represents the number of points at position (r, c) on the matrix. Two robots are playing a game on this matrix.

Both robots initially start at (0, 0) and want to reach (1, n-1). Each robot may only move to the right ((r, c) to (r, c + 1)) or down ((r, c) to (r + 1, c)).

At the start of the game, the first robot moves from (0, 0) to (1, n-1), collecting all the points from the cells on its path. 
For all cells (r, c) traversed on the path, grid[r][c] is set to 0. Then, the second robot moves from (0, 0) to (1, n-1), collecting the points on its path. 
Note that their paths may intersect with one another.

The first robot wants to minimize the number of points collected by the second robot. In contrast, the second robot wants to maximize the number of points it collects. 
If both robots play optimally, return the number of points collected by the second robot.

 

Example 1:


Input: grid = [[2,5,4],[1,5,1]]
Output: 4
Explanation: The optimal path taken by the first robot is shown in red, and the optimal path taken by the second robot is shown in blue.
The cells visited by the first robot are set to 0.
The second robot will collect 0 + 0 + 4 + 0 = 4 points.
Example 2:


Input: grid = [[3,3,1],[8,5,2]]
Output: 4
Explanation: The optimal path taken by the first robot is shown in red, and the optimal path taken by the second robot is shown in blue.
The cells visited by the first robot are set to 0.
The second robot will collect 0 + 3 + 1 + 0 = 4 points.
Example 3:


Input: grid = [[1,3,1,15],[1,3,3,1]]
Output: 7
Explanation: The optimal path taken by the first robot is shown in red, and the optimal path taken by the second robot is shown in blue.
The cells visited by the first robot are set to 0.
The second robot will collect 0 + 1 + 3 + 3 + 0 = 7 points.
 

Constraints:

grid.length == 2
n == grid[r].length
1 <= n <= 5 * 104
1 <= grid[r][c] <= 105

class Solution
{
public:
    long long gridGame(vector<vector<int>> &grid)
    {
        int n = grid[0].size();
        vector<long> suffixSum(n + 1, 0);
        for(int i = n - 1; i >= 0; i--)
        {
           suffixSum[i] = suffixSum[i + 1];
            suffixSum[i] += grid[0][i];
        }
        vector<long> prefixSum(n + 1, 0);
        for(int i = 1; i <= n; i++)
        {
            prefixSum[i] = prefixSum[i - 1];
            prefixSum[i] += grid[1][i - 1];
        }
        long res = 1e16;
        for(int i = 0; i < n; i++)
        {
            res = min(res, max(suffixSum[i + 1], prefixSum[i]));
        }
        return res;
    }
};


// Source https://leetcode.com/problems/check-if-word-can-be-placed-in-crossword/

You are given an m x n matrix board, representing the current state of a crossword puzzle. 
The crossword contains lowercase English letters (from solved words), ' ' to represent any empty cells, and '#' to represent any blocked cells.

A word can be placed horizontally (left to right or right to left) or vertically (top to bottom or bottom to top) in the board if:

It does not occupy a cell containing the character '#'.
The cell each letter is placed in must either be ' ' (empty) or match the letter already on the board.
There must not be any empty cells ' ' or other lowercase letters directly left or right of the word if the word was placed horizontally.
There must not be any empty cells ' ' or other lowercase letters directly above or below the word if the word was placed vertically.
Given a string word, return true if word can be placed in board, or false otherwise.

 

Example 1:


Input: board = [["#", " ", "#"], [" ", " ", "#"], ["#", "c", " "]], word = "abc"
Output: true
Explanation: The word "abc" can be placed as shown above (top to bottom).
Example 2:


Input: board = [[" ", "#", "a"], [" ", "#", "c"], [" ", "#", "a"]], word = "ac"
Output: false
Explanation: It is impossible to place the word because there will always be a space/letter above or below it.
Example 3:


Input: board = [["#", " ", "#"], [" ", " ", "#"], ["#", " ", "c"]], word = "ca"
Output: true
Explanation: The word "ca" can be placed as shown above (right to left). 
 

Constraints:

m == board.length
n == board[i].length
1 <= m * n <= 2 * 105
board[i][j] will be ' ', '#', or a lowercase English letter.
1 <= word.length <= max(m, n)
word will contain only lowercase English letters.

class Solution
{
public:
    int m, n;
    int directions[4][2] = { {1, 0}, {-1, 0}, {0, 1}, {0, -1} };

    bool check(vector<vector<char>> &board, int i, int j, int k, string &word)
    {
        int row = i - directions[k][0];
        int col = j - directions[k][1];
        if (row >= 0 && row < m && col >= 0 && col < n && board[row][col] != '#') return false;
        row = i + directions[k][0] * word.length();
        if(row < -1 || row > m) return false;
        col = j + directions[k][1] * word.length();
        if(col < -1 || col > n) return false;
        if (row >= 0 && row < m && col >= 0 && col < n && board[row][col] != '#') return false;
        for(int idx = 0; idx < word.length(); ++idx)
        {
            if (word[idx] == board[i][j] || board[i][j] == ' ')
            {
                i += directions[k][0];
                j += directions[k][1];
            }
            else
                return false;
        }
        return true;
    }

    bool placeWordInCrossword(vector<vector<char>> &board, string word)
    {
        m = board.size();
        n = board[0].size();
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                for(int k = 0; k < 4; ++k)
                {
                    if(check(board, i, j, k, word))
                        return true;
                }
            }
        }
        return false;
    }
};


// Source https://leetcode.com/problems/the-score-of-students-solving-math-expression/

You are given a string s that contains digits 0-9, addition symbols '+', and multiplication symbols '*' only, representing a valid math expression of single digit numbers (e.g., 3+5*2). 
This expression was given to n elementary school students. The students were instructed to get the answer of the expression by following this order of operations:

Compute multiplication, reading from left to right; Then,
Compute addition, reading from left to right.
You are given an integer array answers of length n, which are the submitted answers of the students in no particular order. You are asked to grade the answers, by following these rules:

If an answer equals the correct answer of the expression, this student will be rewarded 5 points;
Otherwise, if the answer could be interpreted as if the student applied the operators in the wrong order but had correct arithmetic, this student will be rewarded 2 points;
Otherwise, this student will be rewarded 0 points.
Return the sum of the points of the students.

 

Example 1:


Input: s = "7+3*1*2", answers = [20,13,42]
Output: 7
Explanation: As illustrated above, the correct answer of the expression is 13, therefore one student is rewarded 5 points: [20,13,42]
A student might have applied the operators in this wrong order: ((7+3)*1)*2 = 20. Therefore one student is rewarded 2 points: [20,13,42]
The points for the students are: [2,5,0]. The sum of the points is 2+5+0=7.
Example 2:

Input: s = "3+5*2", answers = [13,0,10,13,13,16,16]
Output: 19
Explanation: The correct answer of the expression is 13, therefore three students are rewarded 5 points each: [13,0,10,13,13,16,16]
A student might have applied the operators in this wrong order: ((3+5)*2 = 16. Therefore two students are rewarded 2 points: [13,0,10,13,13,16,16]
The points for the students are: [5,0,0,5,5,2,2]. The sum of the points is 5+0+0+5+5+2+2=19.
Example 3:

Input: s = "6+0*1", answers = [12,9,6,4,8,6]
Output: 10
Explanation: The correct answer of the expression is 6.
If a student had incorrectly done (6+0)*1, the answer would also be 6.
By the rules of grading, the students will still be rewarded 5 points (as they got the correct answer), not 2 points.
The points for the students are: [0,0,5,0,0,5]. The sum of the points is 10.
 

Constraints:

3 <= s.length <= 31
s represents a valid expression that contains only digits 0-9, '+', and '*' only.
All the integer operands in the expression are in the inclusive range [0, 9].
1 <= The count of all operators ('+' and '*') in the math expression <= 15
Test data are generated such that the correct answer of the expression is in the range of [0, 1000].
n == answers.length
1 <= n <= 104
0 <= answers[i] <= 1000

偶数下标为数字，奇数下标为加或乘
dp[l][k] 表示从第k个运算符的左侧数字到第k+l-1个运算符的右侧数字可能的运算结果（只保存小于等于1000的)

>1000 + >=0 结果还是>1000
>1000 * >=1 结果还是>1000
>1000 * 0 结果是0，<=1000 * 0 结果也是0，所以可以不考虑>1000 * 0得到0的特殊情况，因为此时的0同样可以由<=1000 * 0得到

class Solution
{
public:

    int calculate(const string &s)
    {
        int n = s.length();
        int ans = s[0] - '0';
        int prev = s[0] - '0';
        int i = 1;
        while(i < n)
        {
            if(s[i] == '+')
            {
                i++;
                ans += s[i] - '0';
                prev = s[i] - '0';
                i++;
            }
            else
            {
                i++;
                ans -= prev;
                ans += prev * (s[i] - '0');
                prev *= (s[i] - '0');
                i++;
            }
        }
        return ans;
    }

    int scoreOfStudents(string s, vector<int> &answers)
    {
        int n = s.size();
        int n_opr = n / 2;
        vector<vector<vector<int>>> dp(n_opr + 1, vector<vector<int>>(n_opr + 2));
        for(int k = 1; k <= n_opr + 1; k++) dp[0][k].push_back(s[2 * (k - 1)] - '0');

        bool count[1001];

        char opr[n_opr + 1];
        for(int k = 1; k <= n_opr; k++) opr[k] = s[2 * k - 1];

        int result;
        for(int l = 1; l <= n_opr; l++)
        {
            for(int k = 1; k <= n_opr - l + 1; k++)
            {
                memset(count, 0, sizeof(count));
                for(int i = 0; i < l; i++)
                {
                    for(int lhs : dp[i][k])
                    {
                        for(int rhs : dp[l - i - 1][k + i + 1])
                        {
                            if (opr[k + i] == '+') result = (lhs + rhs);
                            else result = (lhs * rhs);
                            if(result <= 1000) count[result] = true;
                        }
                    }
                }
                for(int j = 0; j <= 1000; j++)
                {
                    if(count[j]) dp[l][k].push_back(j);
                }
            }
        }

        result = calculate(s);
        memset(count, 0, sizeof(count));
        for(int elem : dp[n_opr][1]) count[elem] = true;

        int ret = 0;
        for(int ans : answers)
        {
            if(count[ans])
            {
                if(ans == result) ret += 5;
                else ret += 2;
            }
        }
        return ret;
    }
};


// Source https://leetcode.com/problems/convert-1d-array-into-2d-array/

You are given a 0-indexed 1-dimensional (1D) integer array original, and two integers, m and n. You are tasked with creating a 2-dimensional (2D) array with m rows and n columns 
using all the elements from original.

The elements from indices 0 to n - 1 (inclusive) of original should form the first row of the constructed 2D array, 
the elements from indices n to 2 * n - 1 (inclusive) should form the second row of the constructed 2D array, and so on.

Return an m x n 2D array constructed according to the above procedure, or an empty 2D array if it is impossible.

 

Example 1:


Input: original = [1,2,3,4], m = 2, n = 2
Output: [[1,2],[3,4]]
Explanation: The constructed 2D array should contain 2 rows and 2 columns.
The first group of n=2 elements in original, [1,2], becomes the first row in the constructed 2D array.
The second group of n=2 elements in original, [3,4], becomes the second row in the constructed 2D array.
Example 2:

Input: original = [1,2,3], m = 1, n = 3
Output: [[1,2,3]]
Explanation: The constructed 2D array should contain 1 row and 3 columns.
Put all three elements in original into the first row of the constructed 2D array.
Example 3:

Input: original = [1,2], m = 1, n = 1
Output: []
Explanation: There are 2 elements in original.
It is impossible to fit 2 elements in a 1x1 2D array, so return an empty 2D array.
 

Constraints:

1 <= original.length <= 5 * 104
1 <= original[i] <= 105
1 <= m, n <= 4 * 104

class Solution
{
public:
    vector<vector<int>> construct2DArray(vector<int> &original, int m, int n)
    {
        int total = original.size();
        int givenTotal = m * n;
        vector<vector<int>> res;
        if (total != givenTotal) return res;
        res.resize(m);
        int k = 0;
        for (int i = 0; i < m; ++i)
        {
            res[i].resize(n);
            for (int j = 0; j < n; ++j)
            {
                res[i][j] = original[k];
                ++k;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/number-of-pairs-of-strings-with-concatenation-equal-to-target/

Given an array of digit strings nums and a digit string target, return the number of pairs of indices (i, j) (where i != j) such that the concatenation of nums[i] + nums[j] equals target.

 

Example 1:

Input: nums = ["777","7","77","77"], target = "7777"
Output: 4
Explanation: Valid pairs are:
- (0, 1): "777" + "7"
- (1, 0): "7" + "777"
- (2, 3): "77" + "77"
- (3, 2): "77" + "77"
Example 2:

Input: nums = ["123","4","12","34"], target = "1234"
Output: 2
Explanation: Valid pairs are:
- (0, 1): "123" + "4"
- (2, 3): "12" + "34"
Example 3:

Input: nums = ["1","1","1"], target = "11"
Output: 6
Explanation: Valid pairs are:
- (0, 1): "1" + "1"
- (1, 0): "1" + "1"
- (0, 2): "1" + "1"
- (2, 0): "1" + "1"
- (1, 2): "1" + "1"
- (2, 1): "1" + "1"
 

Constraints:

2 <= nums.length <= 100
1 <= nums[i].length <= 100
2 <= target.length <= 100
nums[i] and target consist of digits.
nums[i] and target do not have leading zeros.

class Solution
{
public:
    int numOfPairs(vector<string> &nums, string target)
    {
        map<string, int> numMap;
        for (auto &num : nums)
        {
            ++numMap[num];
        }
        int ans = 0;
        int len = target.length();
        for (int i = 1; i < len; ++i)
        {
            string left = target.substr(0, i);
            string right = target.substr(i);
            if (numMap.count(left))
            {
                int lVal = numMap[left];
                if (left == right)
                {
                    ans += lVal * (lVal - 1);
                }
                else
                {
                    int rVal = numMap[right];
                    ans += lVal * rVal;
                }
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/maximize-the-confusion-of-an-exam/

A teacher is writing a test with n true/false questions, with 'T' denoting true and 'F' denoting false. 
He wants to confuse the students by maximizing the number of consecutive questions with the same answer (multiple trues or multiple falses in a row).

You are given a string answerKey, where answerKey[i] is the original answer to the ith question. 
In addition, you are given an integer k, the maximum number of times you may perform the following operation:

Change the answer key for any question to 'T' or 'F' (i.e., set answerKey[i] to 'T' or 'F').
Return the maximum number of consecutive 'T's or 'F's in the answer key after performing the operation at most k times.

 

Example 1:

Input: answerKey = "TTFF", k = 2
Output: 4
Explanation: We can replace both the 'F's with 'T's to make answerKey = "TTTT".
There are four consecutive 'T's.
Example 2:

Input: answerKey = "TFFT", k = 1
Output: 3
Explanation: We can replace the first 'T' with an 'F' to make answerKey = "FFFT".
Alternatively, we can replace the second 'T' with an 'F' to make answerKey = "TFFF".
In both cases, there are three consecutive 'F's.
Example 3:

Input: answerKey = "TTFTTFTT", k = 1
Output: 5
Explanation: We can replace the first 'F' to make answerKey = "TTTTTFTT"
Alternatively, we can replace the second 'F' to make answerKey = "TTFTTTTT". 
In both cases, there are five consecutive 'T's.
 

Constraints:

n == answerKey.length
1 <= n <= 5 * 104
answerKey[i] is either 'T' or 'F'
1 <= k <= n

class Solution
{
public:
    int maxConsecutiveAnswers(string s, int k)
    {
        int n = s.length();
        int ans = 0, T = 0, F = 0;
        int i = 0, j = 0;
        while (j < n)
        {
            if (s[j] == 'T') T++;
            else F++;
            while(j - i + 1 - max(T, F) > k)
            {
                if (s[i] == 'T') T--;
                else F--;
                ++i;
            }
            ans = max(ans, j - i + 1);
            ++j;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/maximum-number-of-ways-to-partition-an-array/

You are given a 0-indexed integer array nums of length n. The number of ways to partition nums is the number of pivot indices that satisfy both conditions:

1 <= pivot < n
nums[0] + nums[1] + ... + nums[pivot - 1] == nums[pivot] + nums[pivot + 1] + ... + nums[n - 1]
You are also given an integer k. You can choose to change the value of one element of nums to k, or to leave the array unchanged.

Return the maximum possible number of ways to partition nums to satisfy both conditions after changing at most one element.

 

Example 1:

Input: nums = [2,-1,2], k = 3
Output: 1
Explanation: One optimal approach is to change nums[0] to k. The array becomes [3,-1,2].
There is one way to partition the array:
- For pivot = 2, we have the partition [3,-1 | 2]: 3 + -1 == 2.
Example 2:

Input: nums = [0,0,0], k = 1
Output: 2
Explanation: The optimal approach is to leave the array unchanged.
There are two ways to partition the array:
- For pivot = 1, we have the partition [0 | 0,0]: 0 == 0 + 0.
- For pivot = 2, we have the partition [0,0 | 0]: 0 + 0 == 0.
Example 3:

Input: nums = [22,4,-25,-20,-15,15,-16,7,19,-10,0,-13,-14], k = -33
Output: 4
Explanation: One optimal approach is to change nums[2] to k. The array becomes [22,4,-33,-20,-15,15,-16,7,19,-10,0,-13,-14].
There are four ways to partition the array.
 

Constraints:

n == nums.length
2 <= n <= 105
-105 <= k, nums[i] <= 105

class Solution
{
public:
    int waysToPartition(vector<int> &nums, int k)
    {
        int n = nums.size();
        vector<long> prefix(n, 0);
        prefix[0] = nums[0];
        for (int i = 1; i < n; ++i)
        {
            prefix[i] = prefix[i - 1] + nums[i];
        }
        vector<long> pivot(n, 0);
        int cnt = 0;
        // 1 <= pivot < n
        for (int i = 1; i < n; i++)
        {
            pivot[i] = prefix.back() - prefix[i - 1] - prefix[i - 1];
            if (pivot[i] == 0) cnt++;
        }
        unordered_map<long, int> mp;
        vector<int> counts(n, 0);
        // 1 <= j <= n - 1
        // nums[j] -> k，diff = k - nums[j]
        // 所有的 1 <= pivot <= j，sum(nums[pivot] + ... + nums[n - 1]) 增加 diff，sum(nums[0] + ... + nums[pivot - 1]) 不变
        for (int j = 1; j <= n - 1; j++)
        {
            mp[pivot[j]]++;
            long delta = nums[j] - k;
            counts[j] += mp[delta];
        }
        mp.clear();
        // 0 <= j <= n - 2
        // nums[j] -> k，diff = k - nums[j]
        // 所有的 n -1 >= pivot >= j + 1，sum(nums[pivot] + ... + nums[n - 1]) 不变，sum(nums[0] + ... + nums[pivot - 1]) 增加 diff
        for (int j = n - 2; j >= 0; j--)
        {
            mp[pivot[j+1]]++;
            long delta = k - nums[j];
            counts[j] += mp[delta];
        }
        return max(cnt, *max_element(counts.begin(), counts.end() ) );
    }
};


// Source https://leetcode.com/problems/minimum-moves-to-convert-string/

You are given a string s consisting of n characters which are either 'X' or 'O'.

A move is defined as selecting three consecutive characters of s and converting them to 'O'. Note that if a move is applied to the character 'O', it will stay the same.

Return the minimum number of moves required so that all the characters of s are converted to 'O'.

 

Example 1:

Input: s = "XXX"
Output: 1
Explanation: XXX -> OOO
We select all the 3 characters and convert them in one move.
Example 2:

Input: s = "XXOX"
Output: 2
Explanation: XXOX -> OOOX -> OOOO
We select the first 3 characters in the first move, and convert them to 'O'.
Then we select the last 3 characters and convert them so that the final string contains all 'O's.
Example 3:

Input: s = "OOOO"
Output: 0
Explanation: There are no 'X's in s to convert.
 

Constraints:

3 <= s.length <= 1000
s[i] is either 'X' or 'O'.

class Solution
{
public:
    int minimumMoves(string s)
    {
        int n = s.length();
        int res = 0;
        for (int i = 0; i < n; ++i)
        {
            if (s[i] == 'X')
            {
                ++res;
                 i += 2;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/find-missing-observations/

You have observations of n + m 6-sided dice rolls with each face numbered from 1 to 6. n of the observations went missing, and you only have the observations of m rolls. 
Fortunately, you have also calculated the average value of the n + m rolls.

You are given an integer array rolls of length m where rolls[i] is the value of the ith observation. You are also given the two integers mean and n.

Return an array of length n containing the missing observations such that the average value of the n + m rolls is exactly mean. If there are multiple valid answers, return any of them. 
If no such array exists, return an empty array.

The average value of a set of k numbers is the sum of the numbers divided by k.

Note that mean is an integer, so the sum of the n + m rolls should be divisible by n + m.

 

Example 1:

Input: rolls = [3,2,4,3], mean = 4, n = 2
Output: [6,6]
Explanation: The mean of all n + m rolls is (3 + 2 + 4 + 3 + 6 + 6) / 6 = 4.
Example 2:

Input: rolls = [1,5,6], mean = 3, n = 4
Output: [2,3,2,2]
Explanation: The mean of all n + m rolls is (1 + 5 + 6 + 2 + 3 + 2 + 2) / 7 = 3.
Example 3:

Input: rolls = [1,2,3,4], mean = 6, n = 4
Output: []
Explanation: It is impossible for the mean to be 6 no matter what the 4 missing rolls are.
 

Constraints:

m == rolls.length
1 <= n, m <= 105
1 <= rolls[i], mean <= 6

class Solution
{
public:
    vector<int> missingRolls(vector<int> &rolls, int mean, int n)
    {
        int sum_m = 0, m = rolls.size();
        for(auto val : rolls)
        {
            sum_m += val;
        }
        int sum_n = (mean * (n + m)) - sum_m;
        vector<int> ans;
        if(sum_n > 6 * n) return ans;
        if(sum_n < n) return ans;
        int val = sum_n / n;
        ans.resize(n, val);
        int rem = sum_n % n;
        for(int i = 0; i < rem; i++) ans[i] += 1;
        return ans;
    }
};


// Source https://leetcode.com/problems/stone-game-ix/

Alice and Bob continue their games with stones. There is a row of n stones, and each stone has an associated value. 
You are given an integer array stones, where stones[i] is the value of the ith stone.

Alice and Bob take turns, with Alice starting first. On each turn, the player may remove any stone from stones. 
The player who removes a stone loses if the sum of the values of all removed stones is divisible by 3. 
Bob will win automatically if there are no remaining stones (even if it is Alice's turn).

Assuming both players play optimally, return true if Alice wins and false if Bob wins.

 

Example 1:

Input: stones = [2,1]
Output: true
Explanation: The game will be played as follows:
- Turn 1: Alice can remove either stone.
- Turn 2: Bob removes the remaining stone. 
The sum of the removed stones is 1 + 2 = 3 and is divisible by 3. Therefore, Bob loses and Alice wins the game.
Example 2:

Input: stones = [2]
Output: false
Explanation: Alice will remove the only stone, and the sum of the values on the removed stones is 2. 
Since all the stones are removed and the sum of values is not divisible by 3, Bob wins the game.
Example 3:

Input: stones = [5,1,2,4,3]
Output: false
Explanation: Bob will always win. One possible way for Bob to win is shown below:
- Turn 1: Alice can remove the second stone with value 1. Sum of removed stones = 1.
- Turn 2: Bob removes the fifth stone with value 3. Sum of removed stones = 1 + 3 = 4.
- Turn 3: Alices removes the fourth stone with value 4. Sum of removed stones = 1 + 3 + 4 = 8.
- Turn 4: Bob removes the third stone with value 2. Sum of removed stones = 1 + 3 + 4 + 2 = 10.
- Turn 5: Alice removes the first stone with value 5. Sum of removed stones = 1 + 3 + 4 + 2 + 5 = 15.
Alice loses the game because the sum of the removed stones (15) is divisible by 3. Bob wins the game.
 

Constraints:

1 <= stones.length <= 105
1 <= stones[i] <= 104


Alice 只有一种获胜方式，是使得 Bob 在选石子时凑成 3 的倍数；而 Bob 除了能够通过让 A 凑成 3 的倍数以外，还能通过让游戏常规结束来获胜。

我们只需关心已被移除的石子总和是否为 3 的倍数，以及剩余石子的价值与已移除石子总和相加是否凑成 3 的倍数即可。

所以我们可以按照石子价值除以 3 的余数分成三类，并统计相应数量。

假设某个回合开始前，已移除的石子总和状态为 x（共三种，分别为0、1 和 2，其中当状态为 0，且不是最初始时，说明凑成 3 的倍数，游戏结束），
剩余石子价值除以 3 的余数 s 分别为 0、1 和 2。

「首先如果x = 1 时，不能选择 s = 2 的石子，否则会导致凑成总和为 3 的倍数而失败；同理 x = 2 时，不能选择 s = 1 的石子；而选择 s = 0 的数字，不会改变 x 的状态，可看做换手操作。」

「同时成对的 s = 0 的等价于没有 s = 0 的石子（双方只需要轮流选完这些 s = 0 的石子，最终会回到先手最开始的局面）；
而选择与 x 相同的 s 会导致 x 改变（即 x = 1 时，选择 s = 1 的石子，会导致 x = 2；而 x = 2 时，选 s = 2 的石子，会导致 x = 1。」
Alice 初始只能选择s = 1或s = 2的石子，选择s = 0会导致立即输掉

分情况讨论：

1、s = 0 的石子数量为偶数：此时等价于没有 s = 0 的石子，我们只需要关心 s = 1 和 s = 2 即可：

a、「s = 1 的石子数量为 0」： 这意味着 A 开始选择的只能是 s = 2，此时交给 B 的局面为「x = 2、剩余石子只有 s = 2」，此时 B 只能选 s = 2 的石子，
由于 x = 2 且选择的石子 s = 2，因此交由回 A 的局面为「x = 1，剩余只有 s = 2」，因此游戏继续的话 A 必败，
同时如果在该过程的任何时刻石子被取完，也是 B 直接获胜，即 「A 仍为必败」；

b、「s = 2 的石子数量为 0」：分析同理，A 只能选 s = 1，此时交给 B 的局面为「x = 1、剩余石子只有 s = 1」，此时 B 只能选 s = 1 的石子，
由于 x = 1 且选择的石子 s = 1，因此交由回 A 的局面为「x = 2，剩余只有 s = 1」，因此游戏继续的话 A 必败，
同时如果在该过程的任何时刻石子被取完，也是 B 直接获胜，即 「A 仍为必败」；

c、「s = 1 和 s = 2 的石子数量均不为 0」：A 最开始选数量较少的那一类石子，B 下一回合只能选择合适类型的石子（或是无从选择导致失败），
然后游戏继续，最终 B 会先进入「只能凑成 3 的倍数」的局面导致失败，即 「A 必胜。」
1 1 1 2 2 2 2 2 
A 1 2 2
B 1 1 2 输掉
2 2 2 1 1 1 1 1
A 2 1 1
B 2 2 1 输掉
1 2
A 1
B 2 输掉
1 2 2
A 1
B 2 输掉
1 1 2 2 2 2
A 1 2
B 1 2 输掉
2 2 1 1 1 1
A 2 1
B 2 1 输掉

2、s = 0 的石子数量为奇数：此时等价于有一次换手机会

a、「两者数量差不超过 2」：此时 B 可以利用「对方凑成 3 的倍数必败」规则和「优先使用 s = 0 石子」权利来确保自己为必胜：
举个例子 ，当 s = 1 和 s = 2 的石子数量相等，虽然有 s = 0 的石子，A 先手，但是 A 的首个回合必然不能选 s = 0，否则马上失败结束，
因此 A 只能选 s = 1 或 s = 2，此时 B直接选择 s = 0 的石子，交由给 A 的局面 x 没有发生改变，A 只能选择与首个回合相同的 s 游戏才能继续，
因此局面会变为「B 先手、s = 1 和 s = 2 的石子数量差为 2」，游戏继续，最终 A 会先遇到「只能凑成 3 的倍数」的局面，即 「B 必胜」。
1 1 1 1 0 2 2 2 2
A 1 1 1 1 2 输掉
B 0 2 2 2
1 1 0 2 2 2 2
A 1 1 2 输掉
B 0 2
1 1 1 0 2 2 2 2
A 1 1 1 2 输掉
B 0 2 2

两者数量差不超过 2时，无论 A 开始选择数量较少或较多的 s，B 都在第二回合马上使用 s = 0 的石子进行换手，
A 只能继续选与第一回合相同类型的的石子，游戏才能进行，最终 A 会先遇到「只能凑成 3 的倍数」或「石子被取完」的局面，即 「B 必胜」。

b、「两者数量差超过 2」 ：此时A 只要确保第一次选择数量较多的 s，不管 B 是否使用「优先使用 s = 0」的石子，
A 都有足够多的 开始时数量多的那种s 来抵消换手（或是在 B 放弃使用 s = 0 之后A马上使用s = 0），最终都是 B 最先遇到「只能凑成 3 的倍数」的局面，即 「A 获胜」。

1 0 2 2 2 2
A 2 2 2
B 0 1 2 输掉
或者
A 2 0 2
B 2 1 2 输掉

class Solution
{
public:
    bool stoneGameIX(vector<int> &stones)
    {
        vector<int> vec(3, 0);
        for (auto val : stones) vec[val % 3]++;
        return vec[0] % 2 == 0 ? (vec[1] > 0 && vec[2] > 0) : (abs(vec[1] - vec[2]) > 2);
    }
};


// Source https://leetcode.com/problems/smallest-k-length-subsequence-with-occurrences-of-a-letter/

You are given a string s, an integer k, a letter letter, and an integer repetition.

Return the lexicographically smallest subsequence of s of length k that has the letter letter appear at least repetition times. 
The test cases are generated so that the letter appears in s at least repetition times.

A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.

A string a is lexicographically smaller than a string b if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b.

 

Example 1:

Input: s = "leet", k = 3, letter = "e", repetition = 1
Output: "eet"
Explanation: There are four subsequences of length 3 that have the letter 'e' appear at least 1 time:
- "lee" (from "leet")
- "let" (from "leet")
- "let" (from "leet")
- "eet" (from "leet")
The lexicographically smallest subsequence among them is "eet".
Example 2:

example-2
Input: s = "leetcode", k = 4, letter = "e", repetition = 2
Output: "ecde"
Explanation: "ecde" is the lexicographically smallest subsequence of length 4 that has the letter "e" appear at least 2 times.
Example 3:

Input: s = "bb", k = 2, letter = "b", repetition = 2
Output: "bb"
Explanation: "bb" is the only subsequence of length 2 that has the letter "b" appear at least 2 times.
 

Constraints:

1 <= repetition <= k <= s.length <= 5 * 104
s consists of lowercase English letters.
letter is a lowercase English letter, and appears in s at least repetition times.

class Solution
{
public:
    string smallestSubsequence(string s, int k, char letter, int repetition)
    {
        int n = s.length();
        int cnt = 0;
        for (int i = 0; i < n; i++)
        {
            if (s[i] == letter) cnt++;            
        }
        string stack;
        int cnt_st = 0; //cnt_st, the count of letter in stack st.
        for (int i = 0; i < n; i++)
        {
            char c = s[i];
            while(!stack.empty() && stack.back() > c &&
                    n - i + stack.size() > k &&  // constraint on k
                    (cnt_st + cnt > repetition || stack.back() != letter) ) //constraint on repetition
            {
                auto x = stack.back();
                stack.pop_back();
                if (x == letter) cnt_st--;
            }

            if (stack.size() < k && (letter == c || stack.size() - cnt_st < k - repetition))
            {
                stack.push_back(c);
                if (c == letter) cnt_st++;
            }
            if (c == letter) cnt--;
        }

        return stack;
    }
};


// Source https://leetcode.com/problems/two-out-of-three/

Given three integer arrays nums1, nums2, and nums3, return a distinct array containing all the values that are present in at least two out of the three arrays. 
You may return the values in any order.
 

Example 1:

Input: nums1 = [1,1,3,2], nums2 = [2,3], nums3 = [3]
Output: [3,2]
Explanation: The values that are present in at least two arrays are:
- 3, in all three arrays.
- 2, in nums1 and nums2.
Example 2:

Input: nums1 = [3,1], nums2 = [2,3], nums3 = [1,2]
Output: [2,3,1]
Explanation: The values that are present in at least two arrays are:
- 2, in nums2 and nums3.
- 3, in nums1 and nums2.
- 1, in nums1 and nums3.
Example 3:

Input: nums1 = [1,2,2], nums2 = [4,3,3], nums3 = [5]
Output: []
Explanation: No value is present in at least two arrays.
 

Constraints:

1 <= nums1.length, nums2.length, nums3.length <= 100
1 <= nums1[i], nums2[j], nums3[k] <= 100

class Solution
{
public:
    vector<int> twoOutOfThree(vector<int> &nums1, vector<int> &nums2, vector<int> &nums3)
    {
        vector<int> res;
        res.reserve(100);
        int arr[305] = {0};
        for (auto val : nums1)
        {
            int idx = 3 * val;
            if (arr[idx] == 0) arr[idx] = 1;
        }
        for (auto val : nums2)
        {
            int idx = 3 * val + 1;
            if (arr[idx] == 0) arr[idx] = 1;
        }
        for (auto val : nums3)
        {
            int idx = 3 * val + 2;
            if (arr[idx] == 0) arr[idx] = 1;
        }
        for (int i = 1; i <= 100; ++i)
        {
            int idx = 3 *i;
            if (arr[idx] + arr[idx + 1] + arr[idx + 2] >= 2) res.push_back(i);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/minimum-operations-to-make-a-uni-value-grid/

You are given a 2D integer grid of size m x n and an integer x. In one operation, you can add x to or subtract x from any element in the grid.

A uni-value grid is a grid where all the elements of it are equal.

Return the minimum number of operations to make the grid uni-value. If it is not possible, return -1.

 

Example 1:


Input: grid = [[2,4],[6,8]], x = 2
Output: 4
Explanation: We can make every element equal to 4 by doing the following: 
- Add x to 2 once.
- Subtract x from 6 once.
- Subtract x from 8 twice.
A total of 4 operations were used.
Example 2:


Input: grid = [[1,5],[2,3]], x = 1
Output: 5
Explanation: We can make every element equal to 3.
Example 3:


Input: grid = [[1,2],[3,4]], x = 2
Output: -1
Explanation: It is impossible to make every element equal.
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 105
1 <= m * n <= 105
1 <= x, grid[i][j] <= 104


We want to pick the element that has the smallest difference with every other element in the grid. 
If we sort the grid, that element would be the mid element. 
Once we find the mid element, we take the difference of that element with every other element. 
We add all the diffs and divide it by x to get the total number of changes needed. 
All diffs have to be divisible by x, otherwise we don't have an answer.

A uni-value grid is a grid where all the elements of it are equal.
这个最终的值一定是某一个grid[i][j] 加减若干个x得到
选择sorted的mid

class Solution
{
public:
    int minOperations(vector<vector<int>> &grid, int x)
    {
        int m = grid.size();
        int n = grid[0].size();
        vector<int> vec;
        vec.reserve(m * n);
        for(int i = 0; i < m; ++i)
        {
            for(int j = 0; j < n; ++j)
            {
                vec.push_back(grid[i][j]);
            }
        }
        sort(vec.begin(), vec.end());
        int total = 0;
        int l = 0, r = vec.size() - 1;
        int mid = vec.size() / 2;
        while (l < r)
        {
            int diff = (vec[r] - vec[mid]);
            if (diff % x) return -1;
            total += diff;
            diff = (vec[mid] - vec[l]);
            if (diff % x) return -1;
            total += diff;
            ++l;
            --r;
        }
        return total / x;
    }
};


// Source https://leetcode.com/problems/stock-price-fluctuation/

You are given a stream of records about a particular stock. Each record contains a timestamp and the corresponding price of the stock at that timestamp.

Unfortunately due to the volatile nature of the stock market, the records do not come in order. Even worse, some records may be incorrect. 
Another record with the same timestamp may appear later in the stream correcting the price of the previous wrong record.

Design an algorithm that:

Updates the price of the stock at a particular timestamp, correcting the price from any previous records at the timestamp.
Finds the latest price of the stock based on the current records. The latest price is the price at the latest timestamp recorded.
Finds the maximum price the stock has been based on the current records.
Finds the minimum price the stock has been based on the current records.
Implement the StockPrice class:

StockPrice() Initializes the object with no price records.
void update(int timestamp, int price) Updates the price of the stock at the given timestamp.
int current() Returns the latest price of the stock.
int maximum() Returns the maximum price of the stock.
int minimum() Returns the minimum price of the stock.
 

Example 1:

Input
["StockPrice", "update", "update", "current", "maximum", "update", "maximum", "update", "minimum"]
[[], [1, 10], [2, 5], [], [], [1, 3], [], [4, 2], []]
Output
[null, null, null, 5, 10, null, 5, null, 2]

Explanation
StockPrice stockPrice = new StockPrice();
stockPrice.update(1, 10); // Timestamps are [1] with corresponding prices [10].
stockPrice.update(2, 5);  // Timestamps are [1,2] with corresponding prices [10,5].
stockPrice.current();     // return 5, the latest timestamp is 2 with the price being 5.
stockPrice.maximum();     // return 10, the maximum price is 10 at timestamp 1.
stockPrice.update(1, 3);  // The previous timestamp 1 had the wrong price, so it is updated to 3.
                          // Timestamps are [1,2] with corresponding prices [3,5].
stockPrice.maximum();     // return 5, the maximum price is 5 after the correction.
stockPrice.update(4, 2);  // Timestamps are [1,2,4] with corresponding prices [3,5,2].
stockPrice.minimum();     // return 2, the minimum price is 2 at timestamp 4.
 

Constraints:

1 <= timestamp, price <= 109
At most 105 calls will be made in total to update, current, maximum, and minimum.
current, maximum, and minimum will be called only after update has been called at least once.

class StockPrice
{
public:
    int current_timestamp;
    unordered_map<int, int> timestamp_price;
    set<pair<int, int>> price_timestamp;

    StockPrice()
    {
        current_timestamp = 0;
        timestamp_price.clear();
        price_timestamp.clear();
    }

    void update(int timestamp, int price)
    {
        if(timestamp_price.count(timestamp))
        {
            auto itr = price_timestamp.find({timestamp_price[timestamp], timestamp});
            price_timestamp.erase(itr);
            price_timestamp.insert({price, timestamp});
            timestamp_price[timestamp] = price;
        }
        else
        {
            price_timestamp.insert({price, timestamp});
            timestamp_price[timestamp] = price;
        }
        current_timestamp = max(current_timestamp, timestamp);
    }

    int current()
    {
        return timestamp_price[current_timestamp];
    }

    int maximum()
    {
        return price_timestamp.rbegin()->first;
    }

    int minimum()
    {
        return price_timestamp.begin()->first;
    }
};


// Source https://leetcode.com/problems/partition-array-into-two-arrays-to-minimize-sum-difference/

You are given an integer array nums of 2 * n integers. You need to partition nums into two arrays of length n to minimize the absolute difference of the sums of the arrays. 
To partition nums, put each element of nums into one of the two arrays.

Return the minimum possible absolute difference.

 

Example 1:

example-1
Input: nums = [3,9,7,3]
Output: 2
Explanation: One optimal partition is: [3,9] and [7,3].
The absolute difference between the sums of the arrays is abs((3 + 9) - (7 + 3)) = 2.
Example 2:

Input: nums = [-36,36]
Output: 72
Explanation: One optimal partition is: [-36] and [36].
The absolute difference between the sums of the arrays is abs((-36) - (36)) = 72.
Example 3:

example-3
Input: nums = [2,-1,0,4,-2,-9]
Output: 0
Explanation: One optimal partition is: [2,4,-9] and [-1,0,-2].
The absolute difference between the sums of the arrays is abs((2 + 4 + -9) - (-1 + 0 + -2)) = 0.
 

Constraints:

1 <= n <= 15
nums.length == 2 * n
-107 <= nums[i] <= 107


长度为2 * n 的数组array分成前一半subarray1，后一半subarray2
(从长度为n的subarray1中挑出k个 + 从长度为n的subarray2中挑出n-k个) 与 (subarray1中剩下的n-k个 + subarray2中剩下的k个)的difference1
		放入新数组1						放入新数组2

(从长度为n的subarray1中挑出n-k个 + 从长度为n的subarray2中挑出k个) 与 (subarray1中剩下的k个 + subarray2中剩下的n-k个)的difference2
		放入新数组1						放入新数组2

abs(difference1) = abs(difference2)
因此，只要计算k >= 0 && k <= n/2的情况

(sum1 - val + s2[k][j]) - (sum2 - s2[k][j] +val) = sum1 - sum2 - val * 2 + 2 * s2[k][j]

class Solution
{
public:
    int n, n2;

    void dfs(vector<int> &nums, int i, int end, int cnt, int sum, vector<vector<int>> &sums)
    {
        if (cnt >= n2 || i == end)
        {
            sums[cnt].push_back(sum);
            return;
        }
        dfs(nums, i + 1, end, cnt, sum, sums);
        dfs(nums, i + 1, end, cnt + 1, sum + nums[i], sums);
    }

    int minimumDifference(vector<int> &nums)
    {
        n = nums.size() / 2;
        n2 = n / 2;
        int sum1 = accumulate(begin(nums), begin(nums) + n, 0), sum2 = accumulate(begin(nums) + n, end(nums), 0);
        vector<vector<int>> s1(n2 + 1), s2(n2 + 1);
        dfs(nums, 0, n, 0, 0, s1);
        dfs(nums, n, 2 * n, 0, 0, s2);
        int res = INT_MAX;
        for (int k = 0; k <= n2; ++k)
        {
            sort(begin(s2[k]), end(s2[k]));
            for (int val : s1[k])
            {
                int comp = (sum1 + sum2) / 2 - (sum1 - val), diff = sum1 - sum2 - val * 2;
                auto itr = lower_bound(begin(s2[k]), end(s2[k]), comp);
                if (itr == end(s2[k]))
                {
                    --itr;
                    res = min(res, abs(diff + (*itr) * 2));
                }
                else if(itr == begin(s2[k]))
                {
                    res = min(res, abs(diff + (*itr) * 2));                
                }
                else
                {
                    auto itr2 = itr;
                    --itr2;
                    res = min(res, abs(diff + (*itr) * 2));
                    res = min(res, abs(diff + (*itr2) * 2));                    
                }
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/minimum-number-of-moves-to-seat-everyone/

There are n seats and n students in a room. You are given an array seats of length n, where seats[i] is the position of the ith seat. 
You are also given the array students of length n, where students[j] is the position of the jth student.

You may perform the following move any number of times:

Increase or decrease the position of the ith student by 1 (i.e., moving the ith student from position x to x + 1 or x - 1)
Return the minimum number of moves required to move each student to a seat such that no two students are in the same seat.

Note that there may be multiple seats or students in the same position at the beginning.

 

Example 1:

Input: seats = [3,1,5], students = [2,7,4]
Output: 4
Explanation: The students are moved as follows:
- The first student is moved from from position 2 to position 1 using 1 move.
- The second student is moved from from position 7 to position 5 using 2 moves.
- The third student is moved from from position 4 to position 3 using 1 move.
In total, 1 + 2 + 1 = 4 moves were used.

2 - 1
4 - 3
7 - 5

Example 2:

Input: seats = [4,1,5,9], students = [1,3,2,6]
Output: 7
Explanation: The students are moved as follows:
- The first student is not moved.
- The second student is moved from from position 3 to position 4 using 1 move.
- The third student is moved from from position 2 to position 5 using 3 moves.
- The fourth student is moved from from position 6 to position 9 using 3 moves.
In total, 0 + 1 + 3 + 3 = 7 moves were used.

1 - 1
2 - 4
3 - 5
6 - 9

Example 3:

Input: seats = [2,2,6,6], students = [1,3,2,6]
Output: 4
Explanation: Note that there are two seats at position 2 and two seats at position 6.
The students are moved as follows:
- The first student is moved from from position 1 to position 2 using 1 move.
- The second student is moved from from position 3 to position 6 using 3 moves.
- The third student is not moved.
- The fourth student is not moved.
In total, 1 + 3 + 0 + 0 = 4 moves were used.

1 - 2
2 - 2
3 - 6
6 - 6

Constraints:

n == seats.length == students.length
1 <= n <= 100
1 <= seats[i], students[j] <= 100

class Solution
{
public:
    int minMovesToSeat(vector<int> &seats, vector<int> &students)
    {
        sort(seats.begin(), seats.end());
        sort(students.begin(), students.end());
        int res = 0;
        int n = seats.size();
        for (int i = 0; i < n; i++)
        {
            res += abs(seats[i] - students[i]);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/remove-colored-pieces-if-both-neighbors-are-the-same-color/

There are n pieces arranged in a line, and each piece is colored either by 'A' or by 'B'. You are given a string colors of length n where colors[i] is the color of the ith piece.

Alice and Bob are playing a game where they take alternating turns removing pieces from the line. In this game, Alice moves first.

Alice is only allowed to remove a piece colored 'A' if both its neighbors are also colored 'A'. She is not allowed to remove pieces that are colored 'B'.
Bob is only allowed to remove a piece colored 'B' if both its neighbors are also colored 'B'. He is not allowed to remove pieces that are colored 'A'.
Alice and Bob cannot remove pieces from the edge of the line.
If a player cannot make a move on their turn, that player loses and the other player wins.
Assuming Alice and Bob play optimally, return true if Alice wins, or return false if Bob wins.

 

Example 1:

Input: colors = "AAABABB"
Output: true
Explanation:
AAABABB -> AABABB
Alice moves first.
She removes the second 'A' from the left since that is the only 'A' whose neighbors are both 'A'.

Now it's Bob's turn.
Bob cannot make a move on his turn since there are no 'B's whose neighbors are both 'B'.
Thus, Alice wins, so return true.
Example 2:

Input: colors = "AA"
Output: false
Explanation:
Alice has her turn first.
There are only two 'A's and both are on the edge of the line, so she cannot move on her turn.
Thus, Bob wins, so return false.
Example 3:

Input: colors = "ABBBBBBBAAA"
Output: false
Explanation:
ABBBBBBBAAA -> ABBBBBBBAA
Alice moves first.
Her only option is to remove the second to last 'A' from the right.

ABBBBBBBAA -> ABBBBBBAA
Next is Bob's turn.
He has many options for which 'B' piece to remove. He can pick any.

On Alice's second turn, she has no more pieces that she can remove.
Thus, Bob wins, so return false.
 

Constraints:

1 <= colors.length <= 105
colors consists of only the letters 'A' and 'B'

class Solution
{
public:
    bool winnerOfGame(string colors)
    {
        int n = colors.length();
        int countA = 0, countB = 0, alice = 0, bob = 0;
        if (colors[0] == 'A') countA = 1;
        else countB = 1;
        char prev = colors[0];
        for (int i = 1; i < n; ++i)
        {
            char ch = colors[i];
            if (prev != ch)
            {
                if (ch == 'A')
                {
                    bob += max(countB - 2, 0);
                    countB = 0;
                    countA = 1;
                }
                else
                {
                    alice += max(countA - 2, 0);
                    countA = 0;
                    countB = 1;
                }
            }
            else
            {
                if (ch == 'A') countA++;
                else countB++;
            }
            prev = ch;
        }
        alice += max(countA - 2, 0);
        bob += max(countB - 2, 0);
        return (alice > bob);
    }
};


// Source https://leetcode.com/problems/the-time-when-the-network-becomes-idle/

There is a network of n servers, labeled from 0 to n - 1. You are given a 2D integer array edges, where edges[i] = [ui, vi] indicates there is a message channel between servers ui and vi, 
and they can pass any number of messages to each other directly in one second. You are also given a 0-indexed integer array patience of length n.

All servers are connected, i.e., a message can be passed from one server to any other server(s) directly or indirectly through the message channels.

The server labeled 0 is the master server. The rest are data servers. Each data server needs to send its message to the master server for processing and wait for a reply. 
Messages move between servers optimally, so every message takes the least amount of time to arrive at the master server. 
The master server will process all newly arrived messages instantly and send a reply to the originating server via the reversed path the message had gone through.

At the beginning of second 0, each data server sends its message to be processed. 
Starting from second 1, at the beginning of every second, each data server will check if it has received a reply to the message it sent (including any newly arrived replies) from the master server:

If it has not, it will resend the message periodically. The data server i will resend the message every patience[i] second(s), 
i.e., the data server i will resend the message if patience[i] second(s) have elapsed since the last time the message was sent from this server.
Otherwise, no more resending will occur from this server.
The network becomes idle when there are no messages passing between servers or arriving at servers.

Return the earliest second starting from which the network becomes idle.

 

Example 1:

example 1
Input: edges = [[0,1],[1,2]], patience = [0,2,1]
Output: 8
Explanation:
At (the beginning of) second 0,
- Data server 1 sends its message (denoted 1A) to the master server.
- Data server 2 sends its message (denoted 2A) to the master server.

At second 1,
- Message 1A arrives at the master server. Master server processes message 1A instantly and sends a reply 1A back.
- Server 1 has not received any reply. 1 second (1 < patience[1] = 2) elapsed since this server has sent the message, therefore it does not resend the message.
- Server 2 has not received any reply. 1 second (1 == patience[2] = 1) elapsed since this server has sent the message, therefore it resends the message (denoted 2B).

At second 2,
- The reply 1A arrives at server 1. No more resending will occur from server 1.
- Message 2A arrives at the master server. Master server processes message 2A instantly and sends a reply 2A back.
- Server 2 resends the message (denoted 2C).
...
At second 4,
- The reply 2A arrives at server 2. No more resending will occur from server 2.
...
At second 7, reply 2D arrives at server 2.

Starting from the beginning of the second 8, there are no messages passing between servers or arriving at servers.
This is the time when the network becomes idle.
Example 2:

example 2
Input: edges = [[0,1],[0,2],[1,2]], patience = [0,10,10]
Output: 3
Explanation: Data servers 1 and 2 receive a reply back at the beginning of second 2.
From the beginning of the second 3, the network becomes idle.
 

Constraints:

n == patience.length
2 <= n <= 105
patience[0] == 0
1 <= patience[i] <= 105 for 1 <= i < n
1 <= edges.length <= min(105, n * (n - 1) / 2)
edges[i].length == 2
0 <= ui, vi < n
ui != vi
There are no duplicate edges.
Each server can directly or indirectly reach another server.


任何消息从1个server传到另一个server要1秒
each data server will check if it has received a reply to the message it sent (including any newly arrived replies) from the master server:
如果刚好有reply到达，此时不会resend，比如0 + x * patience[i] = 2 * dist[i]，则只会resend x - 1个，总共send 最开始的1个+resend的x-1个 = x个
0 + x * patience[i] < 2 * dist[i] && 0 + (x+1) * patience[i] > 2 * dist[i]，则会resend x 个，总共send 最开始的1个+resend的x个 = x+1个

class Solution
{
public:
    int networkBecomesIdle(vector<vector<int>> &edges, vector<int> &patience)
    {
        int n = patience.size();
        vector<int> adj[n];
        for(auto &e : edges)
        {
            adj[e[0]].push_back(e[1]);
            adj[e[1]].push_back(e[0]);
        }
        vector<int> dist(n, INT_MAX);
        dist[0]  = 0;
        queue<pair<int, int>> q;
        q.push({0, 0});
        while(!q.empty())
        {
            int sz = q.size();
            while(sz--)
            {
                auto [cost, node] = q.front();
                q.pop();
                for(auto next : adj[node])
                {
                    if(dist[next] == INT_MAX)
                    {
                        dist[next] = 1 + cost;
                        q.push({dist[next], next});
                    }
                }
            }
        }
        vector<int> rcvdTime(n, 0);
        for(int i = 1; i < n; i++)
        {
            int lastSentTime =  ((2 * dist[i] - 1) / patience[i]) * patience[i];
            int lastRcvdTime = lastSentTime + 2 * dist[i];
            rcvdTime[i] = lastRcvdTime;
        }
        int mxTime = 0;
        for(int i = 1; i < n; i++)
        {
            mxTime = max(mxTime, rcvdTime[i]);
        }
        return mxTime + 1;
    }
};


// Source https://leetcode.com/problems/kth-smallest-product-of-two-sorted-arrays/

Given two sorted 0-indexed integer arrays nums1 and nums2 as well as an integer k, return the kth (1-based) smallest product of nums1[i] * nums2[j] 
where 0 <= i < nums1.length and 0 <= j < nums2.length.
 

Example 1:

Input: nums1 = [2,5], nums2 = [3,4], k = 2
Output: 8
Explanation: The 2 smallest products are:
- nums1[0] * nums2[0] = 2 * 3 = 6
- nums1[0] * nums2[1] = 2 * 4 = 8
The 2nd smallest product is 8.
Example 2:

Input: nums1 = [-4,-2,0,3], nums2 = [2,4], k = 6
Output: 0
Explanation: The 6 smallest products are:
- nums1[0] * nums2[1] = (-4) * 4 = -16
- nums1[0] * nums2[0] = (-4) * 2 = -8
- nums1[1] * nums2[1] = (-2) * 4 = -8
- nums1[1] * nums2[0] = (-2) * 2 = -4
- nums1[2] * nums2[0] = 0 * 2 = 0
- nums1[2] * nums2[1] = 0 * 4 = 0
The 6th smallest product is 0.
Example 3:

Input: nums1 = [-2,-1,0,1,2], nums2 = [-3,-1,2,4,5], k = 3
Output: -6
Explanation: The 3 smallest products are:
- nums1[0] * nums2[4] = (-2) * 5 = -10
- nums1[0] * nums2[3] = (-2) * 4 = -8
- nums1[4] * nums2[0] = 2 * (-3) = -6
The 3rd smallest product is -6.
 

Constraints:

1 <= nums1.length, nums2.length <= 5 * 104
-105 <= nums1[i], nums2[j] <= 105
1 <= k <= nums1.length * nums2.length
nums1 and nums2 are sorted.

class Solution
{
public:
    long long count(vector<int> &n1, vector<int> &n2, long long m)
    {
        long long cnt = 0;
        for (int p1 = 0, p2 = n2.size() - 1; p1 < n1.size() && p2 >= 0; ++p1)
        {
            while (p2 >= 0 && (long long)n1[p1] * n2[p2] > m)
                --p2;
            cnt += p2 + 1;
        }
        return cnt;
    }

    long long kthSmallestProduct(vector<int> &n1, vector<int> &n2, long long k)
    {
        auto lp = lower_bound(begin(n1), end(n1), 0), rp = lower_bound(begin(n2), end(n2), 0);
        vector<int> neg1(begin(n1), lp), neg2(begin(n2), rp);
        vector<int> pos1(lp, end(n1)), pos2(rp, end(n2));
        vector<int> pos1_r(rbegin(pos1), rend(pos1)), pos2_r(rbegin(pos2), rend(pos2));
        vector<int> neg1_r(rbegin(neg1), rend(neg1)), neg2_r(rbegin(neg2), rend(neg2));
        long long l = -10000000000, r = 10000000000;
        while (l < r)
        {
            long long m = l + (r - l) / 2, cnt = 0;
            if (m >= 0)
                cnt = count(neg1_r, neg2_r, m) + count(pos1, pos2, m)
                      + neg1.size() * pos2.size() + neg2.size() * pos1.size();
            else
                cnt = count(pos2_r, neg1, m) + count(pos1_r, neg2, m);
            if (cnt < k)
                l = m + 1;
            else
                r = m;
        }
        return l;
    }
};


// Source https://leetcode.com/problems/check-if-numbers-are-ascending-in-a-sentence/

A sentence is a list of tokens separated by a single space with no leading or trailing spaces. Every token is either a positive number consisting of digits 0-9 with no leading zeros, 
or a word consisting of lowercase English letters.

For example, "a puppy has 2 eyes 4 legs" is a sentence with seven tokens: "2" and "4" are numbers and the other tokens such as "puppy" are words.
Given a string s representing a sentence, you need to check if all the numbers in s are strictly increasing from left to right 
(i.e., other than the last number, each number is strictly smaller than the number on its right in s).

Return true if so, or false otherwise.

 

Example 1:

example-1
Input: s = "1 box has 3 blue 4 red 6 green and 12 yellow marbles"
Output: true
Explanation: The numbers in s are: 1, 3, 4, 6, 12.
They are strictly increasing from left to right: 1 < 3 < 4 < 6 < 12.
Example 2:

Input: s = "hello world 5 x 5"
Output: false
Explanation: The numbers in s are: 5, 5. They are not strictly increasing.
Example 3:

example-3
Input: s = "sunset is at 7 51 pm overnight lows will be in the low 50 and 60 s"
Output: false
Explanation: The numbers in s are: 7, 51, 50, 60. They are not strictly increasing.
 

Constraints:

3 <= s.length <= 200
s consists of lowercase English letters, spaces, and digits from 0 to 9, inclusive.
The number of tokens in s is between 2 and 100, inclusive.
The tokens in s are separated by a single space.
There are at least two numbers in s.
Each number in s is a positive number less than 100, with no leading zeros.
s contains no leading or trailing spaces.

class Solution
{
public:
    bool areNumbersAscending(string s)
    {
        stringstream ss(s);
        string t;
        int last = 0;
        while(ss >> t)
        {
            if(isdigit(t[0]))
            {
                int num = stoi(t);
                if(num <= last) return false;
                last = num;
            }
        }
        return true;
    }
};


// Source https://leetcode.com/problems/simple-bank-system/

You have been tasked with writing a program for a popular bank that will automate all its incoming transactions (transfer, deposit, and withdraw). 
The bank has n accounts numbered from 1 to n. The initial balance of each account is stored in a 0-indexed integer array balance, with the (i + 1)th account having an initial balance of balance[i].

Execute all the valid transactions. A transaction is valid if:

The given account number(s) are between 1 and n, and
The amount of money withdrawn or transferred from is less than or equal to the balance of the account.
Implement the Bank class:

Bank(long[] balance) Initializes the object with the 0-indexed integer array balance.
boolean transfer(int account1, int account2, long money) Transfers money dollars from the account numbered account1 to the account numbered account2. Return true if the transaction was successful, false otherwise.
boolean deposit(int account, long money) Deposit money dollars into the account numbered account. Return true if the transaction was successful, false otherwise.
boolean withdraw(int account, long money) Withdraw money dollars from the account numbered account. Return true if the transaction was successful, false otherwise.
 

Example 1:

Input
["Bank", "withdraw", "transfer", "deposit", "transfer", "withdraw"]
[[[10, 100, 20, 50, 30]], [3, 10], [5, 1, 20], [5, 20], [3, 4, 15], [10, 50]]
Output
[null, true, true, true, false, false]

Explanation
Bank bank = new Bank([10, 100, 20, 50, 30]);
bank.withdraw(3, 10);    // return true, account 3 has a balance of $20, so it is valid to withdraw $10.
                         // Account 3 has $20 - $10 = $10.
bank.transfer(5, 1, 20); // return true, account 5 has a balance of $30, so it is valid to transfer $20.
                         // Account 5 has $30 - $20 = $10, and account 1 has $10 + $20 = $30.
bank.deposit(5, 20);     // return true, it is valid to deposit $20 to account 5.
                         // Account 5 has $10 + $20 = $30.
bank.transfer(3, 4, 15); // return false, the current balance of account 3 is $10,
                         // so it is invalid to transfer $15 from it.
bank.withdraw(10, 50);   // return false, it is invalid because account 10 does not exist.
 

Constraints:

n == balance.length
1 <= n, account, account1, account2 <= 105
0 <= balance[i], money <= 1012
At most 104 calls will be made to each function transfer, deposit, withdraw.

class Bank
{
public:
    vector<long long> balance;
    int n;

    Bank(vector<long long> &balance)
    {
        this->balance = balance;
        n = balance.size();
    }

    bool transfer(int account1, int account2, long long money)
    {
        if(account1 > n || account2 > n) return false;
        if(balance[account1 - 1] < money) return false;
        balance[account1 - 1] -= money;
        balance[account2 - 1] += money;
        return true ;
    }

    bool deposit(int account, long long money)
    {
        if(account > n) return false;
        balance[account - 1] += money;
        return true ;
    }

    bool withdraw(int account, long long money)
    {
        if(account > n) return false ;
        if(balance[account - 1] < money) return false;
        balance[account - 1] -= money;
        return true;
    }
};


// Source https://leetcode.com/problems/count-number-of-maximum-bitwise-or-subsets/

Given an integer array nums, find the maximum possible bitwise OR of a subset of nums and return the number of different non-empty subsets with the maximum bitwise OR.

An array a is a subset of an array b if a can be obtained from b by deleting some (possibly zero) elements of b. 
Two subsets are considered different if the indices of the elements chosen are different.

The bitwise OR of an array a is equal to a[0] OR a[1] OR ... OR a[a.length - 1] (0-indexed).

 

Example 1:

Input: nums = [3,1]
Output: 2
Explanation: The maximum possible bitwise OR of a subset is 3. There are 2 subsets with a bitwise OR of 3:
- [3]
- [3,1]
Example 2:

Input: nums = [2,2,2]
Output: 7
Explanation: All non-empty subsets of [2,2,2] have a bitwise OR of 2. There are 23 - 1 = 7 total subsets.
Example 3:

Input: nums = [3,2,1,5]
Output: 6
Explanation: The maximum possible bitwise OR of a subset is 7. There are 6 subsets with a bitwise OR of 7:
- [3,5]
- [3,1,5]
- [3,2,5]
- [3,2,1,5]
- [2,5]
- [2,1,5]
 

Constraints:

1 <= nums.length <= 16
1 <= nums[i] <= 105

class Solution
{
public:
    int n;
    int mxOR;
    int ans;

    void recur(vector<int> &nums, int i, int currOR)
    {
        if(i == n)
        {
            if (currOR == mxOR) ++ans;
            return;
        }
        if(currOR == mxOR)
        {
            ans += 1 << (n - i);
            return;
        }
        recur(nums, i + 1, currOR);
        recur(nums, i + 1, currOR | nums[i]);
    }

    int countMaxOrSubsets(vector<int> &nums)
    {
        n = nums.size();
        for(auto val : nums) mxOR |= val;
        ans = 0;
        recur(nums, 0, 0);
        return ans;
    }
};


// Source https://leetcode.com/problems/second-minimum-time-to-reach-destination/

A city is represented as a bi-directional connected graph with n vertices where each vertex is labeled from 1 to n (inclusive). 
The edges in the graph are represented as a 2D integer array edges, where each edges[i] = [ui, vi] denotes a bi-directional edge between vertex ui and vertex vi. 
Every vertex pair is connected by at most one edge, and no vertex has an edge to itself. The time taken to traverse any edge is time minutes.

Each vertex has a traffic signal which changes its color from green to red and vice versa every change minutes. All signals change at the same time. 
You can enter a vertex at any time, but can leave a vertex only when the signal is green. You cannot wait at a vertex if the signal is green.

The second minimum value is defined as the smallest value strictly larger than the minimum value.

For example the second minimum value of [2, 3, 4] is 3, and the second minimum value of [2, 2, 4] is 4.
Given n, edges, time, and change, return the second minimum time it will take to go from vertex 1 to vertex n.

Notes:

You can go through any vertex any number of times, including 1 and n.
You can assume that when the journey starts, all signals have just turned green.
 

Example 1:

        
Input: n = 5, edges = [[1,2],[1,3],[1,4],[3,4],[4,5]], time = 3, change = 5
Output: 13
Explanation:
The figure on the left shows the given graph.
The blue path in the figure on the right is the minimum time path.
The time taken is:
- Start at 1, time elapsed=0
- 1 -> 4: 3 minutes, time elapsed=3
- 4 -> 5: 3 minutes, time elapsed=6
Hence the minimum time needed is 6 minutes.

The red path shows the path to get the second minimum time.
- Start at 1, time elapsed=0
- 1 -> 3: 3 minutes, time elapsed=3
- 3 -> 4: 3 minutes, time elapsed=6
- Wait at 4 for 4 minutes, time elapsed=10
- 4 -> 5: 3 minutes, time elapsed=13
Hence the second minimum time is 13 minutes.      
Example 2:


Input: n = 2, edges = [[1,2]], time = 3, change = 2
Output: 11
Explanation:
The minimum time path is 1 -> 2 with time = 3 minutes.
The second minimum time path is 1 -> 2 -> 1 -> 2 with time = 11 minutes.
 

Constraints:

2 <= n <= 104
n - 1 <= edges.length <= min(2 * 104, n * (n - 1) / 2)
edges[i].length == 2
1 <= ui, vi <= n
ui != vi
There are no duplicate edges.
Each vertex can be reached directly or indirectly from every other vertex.
1 <= time, change <= 103

You can go through any vertex any number of times, including 1 and n.
You can assume that when the journey starts, all signals have just turned green.

dist1[v] 记录从1到v花费的最少时间
dist2[v] 记录从1到v花费的第二少时间

class Solution
{
public:

    int secondMinimum(int n, vector<vector<int>> &edges, int time, int change)
    {
        vector<vector<int>> adj(n + 1);
        for(auto &v : edges)
        {
            adj[v[0]].push_back(v[1]);
            adj[v[1]].push_back(v[0]);
        }
        vector<int> dist1(n + 1, INT_MAX);
        vector<int> dist2(n + 1, INT_MAX);
        dist1[1] = 0;
        queue<pair<int, int>> q;
        q.push({0, 1});
        while(!q.empty())
        {
            auto [cost, node] = q.front();
            q.pop();
            int val = cost / change; // val为偶数，则当前为绿灯，val为奇数，则当前为红灯，因为最开始所有信号都是绿灯
            if(val % 2 != 0) cost = change * (val + 1);
            for(auto next : adj[node])
            {
                int temp = cost + time;
                if(temp < dist1[next])
                {
                    dist2[next] = dist1[next];
                    dist1[next] = temp;
                    q.push({temp, next});
                }
                else if(temp > dist1[next] && temp < dist2[next])
                {
                    dist2[next] = temp;
                    q.push({temp, next});
                }
            }
        }
        return dist2[n];
    }
};


// Source https://leetcode.com/problems/number-of-valid-words-in-a-sentence/

A sentence consists of lowercase letters ('a' to 'z'), digits ('0' to '9'), hyphens ('-'), punctuation marks ('!', '.', and ','), and spaces (' ') only. 
Each sentence can be broken down into one or more tokens separated by one or more spaces ' '.

A token is a valid word if all three of the following are true:

It only contains lowercase letters, hyphens, and/or punctuation (no digits).
There is at most one hyphen '-'. If present, it must be surrounded by lowercase characters ("a-b" is valid, but "-ab" and "ab-" are not valid).
There is at most one punctuation mark. If present, it must be at the end of the token ("ab,", "cd!", and "." are valid, but "a!b" and "c.," are not valid).
Examples of valid words include "a-b.", "afad", "ba-c", "a!", and "!".

Given a string sentence, return the number of valid words in sentence.

 

Example 1:

Input: sentence = "cat and  dog"
Output: 3
Explanation: The valid words in the sentence are "cat", "and", and "dog".
Example 2:

Input: sentence = "!this  1-s b8d!"
Output: 0
Explanation: There are no valid words in the sentence.
"!this" is invalid because it starts with a punctuation mark.
"1-s" and "b8d" are invalid because they contain digits.
Example 3:

Input: sentence = "alice and  bob are playing stone-game10"
Output: 5
Explanation: The valid words in the sentence are "alice", "and", "bob", "are", and "playing".
"stone-game10" is invalid because it contains digits.
 

Constraints:

1 <= sentence.length <= 1000
sentence only contains lowercase English letters, digits, ' ', '-', '!', '.', and ','.
There will be at least 1 token.

class Solution
{
public:

    bool isValid(string &str)
    {
        int n = str.length();
        int punc = 0;
        int hyp = 0;
        int hyp_idx = -1;
        int letters = 0;
        for (int i = 0; i < n; i++)
        {
            if (isdigit(str[i]))
                return false;
            if (isalpha(str[i]) && isupper(str[i]))
                return false;
            if (isalpha(str[i]) && islower(str[i]))
                letters++;
            if (ispunct(str[i]) && str[i] != '-')
                punc++;
            if (str[i] == '-')
            {
                hyp++;
                hyp_idx = i;
            }
        }
        if ((letters + punc + hyp) != n)
            return false;
        if (hyp > 1 || punc > 1)
            return false;
        if (hyp == 1 && (str[0] == '-' || str[n - 1] == '-'))
            return false;
        if (hyp == 1 && !(isalpha(str[hyp_idx - 1]) && isalpha(str[hyp_idx + 1])))
            return false;
        if (punc == 1 && !ispunct(str[n - 1]))
            return false;

        return true;
    }

    int countValidWords(string sentence)
    {
        vector<string> vec;
        stringstream ss(sentence);
        string t;
        while (ss >> t)
        {
            vec.emplace_back(std::move(t));
        }
        int res = 0;
        for (auto &str : vec)
        {
            if (isValid(str)) ++res;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/next-greater-numerically-balanced-number/

An integer x is numerically balanced if for every digit d in the number x, there are exactly d occurrences of that digit in x.

Given an integer n, return the smallest numerically balanced number strictly greater than n.

 

Example 1:

Input: n = 1
Output: 22
Explanation: 
22 is numerically balanced since:
- The digit 2 occurs 2 times. 
It is also the smallest numerically balanced number strictly greater than 1.
Example 2:

Input: n = 1000
Output: 1333
Explanation: 
1333 is numerically balanced since:
- The digit 1 occurs 1 time.
- The digit 3 occurs 3 times. 
It is also the smallest numerically balanced number strictly greater than 1000.
Note that 1022 cannot be the answer because 0 appeared more than 0 times.
Example 3:

Input: n = 3000
Output: 3133
Explanation: 
3133 is numerically balanced since:
- The digit 1 occurs 1 time.
- The digit 3 occurs 3 times.
It is also the smallest numerically balanced number strictly greater than 3000.
 

Constraints:

0 <= n <= 106

generate_base 递归生成所有长度小于等于7的numerically balanced number，并保存在base中
根据当前调用是传递新的val还是老的start（当前调用是否增加一个数）给下一次递归，分为2种
generate_base(base, val, index + 1, length);   // 传递val，比如generate_base(base, 1, 2, length); generate_base(base, 22, 3, length);
generate_base(base, start, next + 1, length);  // 传递start，比如generate_base(base, 0, 2, length);

1, 22, 122, 333, 1333, 4444, 14444, 22333, 55555, 122333, 155555, 224444, 666666, 1224444, 1666666, 2255555, 3334444,

1, 122, 122333, 1224444, 1333, 14444, 155555, 1666666, 22, 22333, 224444, 2255555, 333, 3334444, 4444, 55555, 666666

class Solution
{
public:

    int nextBeautifulNumber(int n)
    {
        set<long> base{1, 122, 122333, 1224444, 1333, 14444, 155555, 1666666, 22, 22333, 224444, 2255555, 333, 3334444, 4444, 55555, 666666};
        string target = to_string(n);
        int res = INT_MAX;
        for (auto s : base)
        {
            string b = to_string(s);

            if (b.size() < target.size())
            {
                continue;
            }

            if (b.size() > target.size() && res != INT_MAX)
            {
                break;
            }

            do
            {
                int t = stoi(b);
                if (n < t)
                {
                    res = min(res, t);
                }
            }
            while (next_permutation(b.begin(), b.end()));
        }
        return res;
    }
};


// Source https://leetcode.com/problems/count-nodes-with-the-highest-score/

There is a binary tree rooted at 0 consisting of n nodes. The nodes are labeled from 0 to n - 1. 
You are given a 0-indexed integer array parents representing the tree, where parents[i] is the parent of node i. Since node 0 is the root, parents[0] == -1.

Each node has a score. To find the score of a node, consider if the node and the edges connected to it were removed. The tree would become one or more non-empty subtrees. 
The size of a subtree is the number of the nodes in it. The score of the node is the product of the sizes of all those subtrees.

Return the number of nodes that have the highest score.

 

Example 1:

example-1
Input: parents = [-1,2,0,2,0]
Output: 3
Explanation:
- The score of node 0 is: 3 * 1 = 3
- The score of node 1 is: 4 = 4
- The score of node 2 is: 1 * 1 * 2 = 2
- The score of node 3 is: 4 = 4
- The score of node 4 is: 4 = 4
The highest score is 4, and three nodes (node 1, node 3, and node 4) have the highest score.
Example 2:

example-2
Input: parents = [-1,2,0]
Output: 2
Explanation:
- The score of node 0 is: 2 = 2
- The score of node 1 is: 2 = 2
- The score of node 2 is: 1 * 1 = 1
The highest score is 2, and two nodes (node 0 and node 1) have the highest score.
 

Constraints:

n == parents.length
2 <= n <= 105
parents[0] == -1
0 <= parents[i] <= n - 1 for i != 0
parents represents a valid binary tree.

class Solution
{
public:
    int n;
    vector<vector<int>> adj;
    unordered_map<long, int> mp;

    long dfs(int currNode)
    {
        long treeSize = 1;
        long product = 1;
        for(auto childNode : adj[currNode])
        {
            long subtreeSize = dfs(childNode);
            treeSize += subtreeSize;
            product *= subtreeSize;
        }
        long restOfTree = n - treeSize;
        if(restOfTree) product *= restOfTree;
        mp[product]++;
        return treeSize;
    }

    int countHighestScoreNodes(vector<int> &parents)
    {
        this->n = parents.size();
        this->adj.resize(n);
        for(int i = 1; i < n; i++)
        {
            adj[parents[i]].push_back(i);
        }
        dfs(0);
        long mxProd = 0;
        long ans = 0;
        for(auto & [prod, cnt] : mp)
        {
            if(prod > mxProd)
            {
                mxProd = prod;
                ans = cnt;
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/parallel-courses-iii/

You are given an integer n, which indicates that there are n courses labeled from 1 to n. You are also given a 2D integer array relations 
where relations[j] = [prevCoursej, nextCoursej] denotes that course prevCoursej has to be completed before course nextCoursej (prerequisite relationship). 
Furthermore, you are given a 0-indexed integer array time where time[i] denotes how many months it takes to complete the (i+1)th course.

You must find the minimum number of months needed to complete all the courses following these rules:

You may start taking a course at any time if the prerequisites are met.
Any number of courses can be taken at the same time.
Return the minimum number of months needed to complete all the courses.

Note: The test cases are generated such that it is possible to complete every course (i.e., the graph is a directed acyclic graph).

 

Example 1:


Input: n = 3, relations = [[1,3],[2,3]], time = [3,2,5]
Output: 8
Explanation: The figure above represents the given graph and the time required to complete each course. 
We start course 1 and course 2 simultaneously at month 0.
Course 1 takes 3 months and course 2 takes 2 months to complete respectively.
Thus, the earliest time we can start course 3 is at month 3, and the total time required is 3 + 5 = 8 months.
Example 2:


Input: n = 5, relations = [[1,5],[2,5],[3,5],[3,4],[4,5]], time = [1,2,3,4,5]
Output: 12
Explanation: The figure above represents the given graph and the time required to complete each course.
You can start courses 1, 2, and 3 at month 0.
You can complete them after 1, 2, and 3 months respectively.
Course 4 can be taken only after course 3 is completed, i.e., after 3 months. It is completed after 3 + 4 = 7 months.
Course 5 can be taken only after courses 1, 2, 3, and 4 have been completed, i.e., after max(1,2,3,7) = 7 months.
Thus, the minimum time needed to complete all the courses is 7 + 5 = 12 months.
 

Constraints:

1 <= n <= 5 * 104
0 <= relations.length <= min(n * (n - 1) / 2, 5 * 104)
relations[j].length == 2
1 <= prevCoursej, nextCoursej <= n
prevCoursej != nextCoursej
All the pairs [prevCoursej, nextCoursej] are unique.
time.length == n
1 <= time[i] <= 104
The given graph is a directed acyclic graph.


class Solution
{
public:
    int minimumTime(int n, vector<vector<int>> &relations, vector<int> &time)
    {
        vector<vector<int>> adj(n + 1);
        vector<int> indegree(n + 1, 0);
        for(auto &v : relations)
        {
            adj[v[0]].push_back(v[1]);
            indegree[v[1]]++;
        }
        vector<int> finish(n + 1, 0);
        queue<int> q;
        for(int i = 1; i <= n; i++)
        {
            if(indegree[i] == 0)
            {
                q.push(i);
                finish[i] = time[i - 1];
            }
        }
        while(!q.empty())
        {
            int sz = q.size();
            while(sz--)
            {
                int u = q.front();
                q.pop();
                for(auto v : adj[u])
                {
                    finish[v] = max(finish[v], finish[u] + time[v - 1]);
                    indegree[v]--;
                    if(indegree[v] == 0)
                        q.push(v);
                }
            }
        }
        int ans = 0;
        for(int i = 1; i <= n; i++)
        {
            ans = max(ans, finish[i]);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/kth-distinct-string-in-an-array/

A distinct string is a string that is present only once in an array.

Given an array of strings arr, and an integer k, return the kth distinct string present in arr. If there are fewer than k distinct strings, return an empty string "".

Note that the strings are considered in the order in which they appear in the array.

 

Example 1:

Input: arr = ["d","b","c","b","c","a"], k = 2
Output: "a"
Explanation:
The only distinct strings in arr are "d" and "a".
"d" appears 1st, so it is the 1st distinct string.
"a" appears 2nd, so it is the 2nd distinct string.
Since k == 2, "a" is returned. 
Example 2:

Input: arr = ["aaa","aa","a"], k = 1
Output: "aaa"
Explanation:
All strings in arr are distinct, so the 1st string "aaa" is returned.
Example 3:

Input: arr = ["a","b","a"], k = 3
Output: ""
Explanation:
The only distinct string is "b". Since there are fewer than 3 distinct strings, we return an empty string "".
 

Constraints:

1 <= k <= arr.length <= 1000
1 <= arr[i].length <= 5
arr[i] consists of lowercase English letters.

class Solution
{
public:
    string kthDistinct(vector<string> &arr, int k)
    {
        unordered_map<string, int> mp;
        for (auto &str : arr)
        {
            mp[str]++;
        }
        string ans = "";
        for (auto &str : arr)
        {
            if (mp[str] > 1) continue;
            --k;
            if(k == 0)
            {
                ans = str;
                break;
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/two-best-non-overlapping-events/

You are given a 0-indexed 2D integer array of events where events[i] = [startTimei, endTimei, valuei]. 
The ith event starts at startTimei and ends at endTimei, and if you attend this event, you will receive a value of valuei. 
You can choose at most two non-overlapping events to attend such that the sum of their values is maximized.

Return this maximum sum.

Note that the start time and end time is inclusive: that is, you cannot attend two events where one of them starts and the other ends at the same time. More specifically, if you attend an event with end time t, the next event must start at or after t + 1.

 

Example 1:


Input: events = [[1,3,2],[4,5,2],[2,4,3]]
Output: 4
Explanation: Choose the green events, 0 and 1 for a sum of 2 + 2 = 4.
Example 2:

Example 1 Diagram
Input: events = [[1,3,2],[4,5,2],[1,5,5]]
Output: 5
Explanation: Choose event 2 for a sum of 5.
Example 3:


Input: events = [[1,5,3],[1,5,1],[6,6,5]]
Output: 8
Explanation: Choose events 0 and 2 for a sum of 3 + 5 = 8.
 

Constraints:

2 <= events.length <= 105
events[i].length == 3
1 <= startTimei <= endTimei <= 109
1 <= valuei <= 106

class Solution
{
public:
    int n;

    int binary_search(vector<vector<int>> &events, int index, int time)
    {
        int  i = index ;
        int  j = n - 1;
        int ans = -1;
        while(i <= j)
        {
            int mid  = i + (j - i) / 2;
            if(events[mid][0] > time)
            {
                ans = mid;
                j = mid - 1;
            }
            else
            {
                i = mid + 1;                
            }
        }
        return ans;
    }

    int maxTwoEvents(vector<vector<int>> &events)
    {
        sort(events.begin(), events.end());
        n = events.size();
        vector<int>right(n, 0);
        right[n - 1] = events[n - 1][2];
        for(int i = n - 2; i >= 0; i--)
        {
            right[i] = max(right[i + 1], events[i][2]);
        }
        int ans = 0;
        for(int i = 0; i < n; i++)
        {
            int idx = binary_search(events, i + 1, events[i][1]);
            if (idx != -1)
            {
                ans = max(ans, events[i][2] + right[idx]);
            }
            else
                ans = max(ans, events[i][2]);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/plates-between-candles/

There is a long table with a line of plates and candles arranged on top of it. You are given a 0-indexed string s consisting of characters '*' and '|' only, 
where a '*' represents a plate and a '|' represents a candle.

You are also given a 0-indexed 2D integer array queries where queries[i] = [lefti, righti] denotes the substring s[lefti...righti] (inclusive). 
For each query, you need to find the number of plates between candles that are in the substring. 
A plate is considered between candles if there is at least one candle to its left and at least one candle to its right in the substring.

For example, s = "||**||**|*", and a query [3, 8] denotes the substring "*||**|". The number of plates between candles in this substring is 2, 
as each of the two plates has at least one candle in the substring to its left and right.
Return an integer array answer where answer[i] is the answer to the ith query.

 

Example 1:

ex-1
Input: s = "**|**|***|", queries = [[2,5],[5,9]]
Output: [2,3]
Explanation:
- queries[0] has two plates between candles.
- queries[1] has three plates between candles.
Example 2:

ex-2
Input: s = "***|**|*****|**||**|*", queries = [[1,17],[4,5],[14,17],[5,11],[15,16]]
Output: [9,0,0,0,0]
Explanation:
- queries[0] has nine plates between candles.
- The other queries have zero plates between candles.
 

Constraints:

3 <= s.length <= 105
s consists of '*' and '|' characters.
1 <= queries.length <= 105
queries[i].length == 2
0 <= lefti <= righti < s.length

class Solution
{
public:
    vector<int> platesBetweenCandles(string s, vector<vector<int>> &queries)
    {
        int n  = s.length();
        vector<int> left(n, -1);
        for(int i = 0; i < n; i++)
        {
            if(s[i] == '|')
                left[i] = i;
            else
                left[i] = (i == 0 ? -1 : left[i - 1]);
        }
        vector<int> right(n, n);
        for(int i = n - 1; i >= 0; i--)
        {
            if(s[i] == '|')
                right[i] = i;
            else
                right[i] = (i == n - 1 ? n : right[i + 1]);
        }
        vector<int> prefix(n, 0);
        prefix[0] = (s[0] == '*');
        for(int i = 1; i < n; i++)
            prefix[i]  = prefix[i - 1] +  (s[i] == '*');
        vector<int> ans;
        ans.reserve(queries.size());
        for(auto &q : queries)
        {
            int l = q[0];
            int r = q[1];
            int leftMost = right[l];
            int rightMost = left[r];
            if(rightMost <= leftMost)
                ans.push_back(0);
            else
                ans.push_back(prefix[rightMost] - prefix[leftMost]);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/number-of-valid-move-combinations-on-chessboard/

There is an 8 x 8 chessboard containing n pieces (rooks, queens, or bishops). You are given a string array pieces of length n, 
where pieces[i] describes the type (rook, queen, or bishop) of the ith piece. 
In addition, you are given a 2D integer array positions also of length n, where positions[i] = [ri, ci] indicates that the ith piece is currently at the 1-based coordinate (ri, ci) on the chessboard.

When making a move for a piece, you choose a destination square that the piece will travel toward and stop on.

A rook can only travel horizontally or vertically from (r, c) to the direction of (r+1, c), (r-1, c), (r, c+1), or (r, c-1).
A queen can only travel horizontally, vertically, or diagonally from (r, c) to the direction of (r+1, c), (r-1, c), (r, c+1), (r, c-1), (r+1, c+1), (r+1, c-1), (r-1, c+1), (r-1, c-1).
A bishop can only travel diagonally from (r, c) to the direction of (r+1, c+1), (r+1, c-1), (r-1, c+1), (r-1, c-1).
You must make a move for every piece on the board simultaneously. A move combination consists of all the moves performed on all the given pieces. 
Every second, each piece will instantaneously travel one square towards their destination if they are not already at it. 
All pieces start traveling at the 0th second. A move combination is invalid if, at a given time, two or more pieces occupy the same square.

Return the number of valid move combinations​​​​​.

Notes:

No two pieces will start in the same square.
You may choose the square a piece is already on as its destination.
If two pieces are directly adjacent to each other, it is valid for them to move past each other and swap positions in one second.
 

有一个 8 x 8 的棋盘，它包含 n 个棋子（棋子包括车，后和象三种）。给你一个长度为 n 的字符串数组 pieces ，其中 pieces[i] 表示第 i 个棋子的类型（车，后或象）。
除此以外，还给你一个长度为 n 的二维整数数组 positions ，其中 positions[i] = [ri, ci] 表示第 i 个棋子现在在棋盘上的位置为 (ri, ci) ，棋盘下标从 1 开始。

棋盘上每个棋子都可以移动 至多一次 。每个棋子的移动中，首先选择移动的 方向 ，然后选择 移动的步数 ，同时你要确保移动过程中棋子不能移到棋盘以外的地方。棋子需按照以下规则移动：

    车可以 水平或者竖直 从 (r, c) 沿着方向 (r+1, c)，(r-1, c)，(r, c+1) 或者 (r, c-1) 移动。
    后可以 水平竖直或者斜对角 从 (r, c) 沿着方向 (r+1, c)，(r-1, c)，(r, c+1)，(r, c-1)，(r+1, c+1)，(r+1, c-1)，(r-1, c+1)，(r-1, c-1) 移动。
    象可以 斜对角 从 (r, c) 沿着方向 (r+1, c+1)，(r+1, c-1)，(r-1, c+1)，(r-1, c-1) 移动。

移动组合 包含所有棋子的 移动 。每一秒，每个棋子都沿着它们选择的方向往前移动 一步 ，直到它们到达目标位置。所有棋子从时刻 0 开始移动。
如果在某个时刻，两个或者更多棋子占据了同一个格子，那么这个移动组合 不有效 。

请你返回 有效 移动组合的数目。

注意：

    初始时，不会有两个棋子 在 同一个位置 。
    有可能在一个移动组合中，有棋子不移动。
    如果两个棋子 直接相邻 且两个棋子下一秒要互相占据对方的位置，可以将它们在同一秒内 交换位置 。

棋盘上有 3 种棋子，车，后，象。车只走 直线；后 直线、斜线 都走；象 只走 斜线。
我们需要选择 移动方案，在这个方案中：

    首先，对每个棋子，指定 移动方向 和 步数。（棋子也可以不移动，此时移动方向已无意义，算做一种方案）
    然后，每秒钟，每个棋子都会同时沿着 指定的方向 前进一步，直到步数耗尽。 如果某一 整数 时刻，有棋子 重叠，或者棋子 移出了界外，则为 无效方案；否则为有效方案。

返回有效方案的个数。

Example 1:


Input: pieces = ["rook"], positions = [[1,1]]
Output: 15
Explanation: The image above shows the possible squares the piece can move to.
Example 2:


Input: pieces = ["queen"], positions = [[1,1]]
Output: 22
Explanation: The image above shows the possible squares the piece can move to.
Example 3:


Input: pieces = ["bishop"], positions = [[4,3]]
Output: 12
Explanation: The image above shows the possible squares the piece can move to.
 

Constraints:

n == pieces.length
n == positions.length
1 <= n <= 4
pieces only contains the strings "rook", "queen", and "bishop".
There will be at most one queen on the chessboard.
1 <= xi, yi <= 8
Each positions[i] is distinct.


Every second, each piece will instantaneously travel one square towards their destination if they are not already at it. All pieces start traveling at the 0th second. 
每一秒，每个棋子都沿着它们选择的方向往前移动一步，直到到达移动目标
vis[k][xk][yk] = true 表示某个 piece 经过k秒（k步），到达(xk, yk)
某个 piece 选择好移动的方向和移动的步数，再修改对应的vis
注意，到达移动目标前，位置和秒都在变化，到达移动目标后，位置不再变化，此时只有秒在变化
vis[1][x1][y1] vis[2][x2][y2] ... vis[k][xk][yk] vis[k+1][xk][yk] vis[k+2][xk][yk] ... 
                                            移动目标

class Solution
{
public:
    int n;
    int res;
    bool vis[8][8][8];
    vector<string> pieces;
    vector<vector<int>> positions;

    void dfs(int cur)
    {
        if (cur == n)
        {
            ++res;
            return;
        }
        int x = positions[cur][0] - 1, y = positions[cur][1] - 1;
        vector<pair<int, int>> dirs;
        if (pieces[cur] == "rook")
        {
            dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        }
        else if (pieces[cur] == "queen")
        {
            dirs = {{-1, -1}, {-1, 0}, {-1, 1}, {0, -1}, {0, 1}, {1, -1}, {1, 0}, {1, 1}};
        }
        else
        {
            dirs = {{-1, -1}, {1, 1}, {-1, 1}, {1, -1}};
        }
        for (int i = 0; i < dirs.size(); ++i)
        {
            int dx = dirs[i].first, dy = dirs[i].second;
            for (int j = 1; ; ++j)
            {
                int xx = x + dx * j;
                int yy = y + dy * j;
                if (xx < 0 || xx >= 8 || yy < 0 || yy >= 8 || vis[j][xx][yy])
                {
                    while (--j >= 1)
                    {
                        int xx = x + dx * j;
                        int yy = y + dy * j;
                        vis[j][xx][yy] = false;
                    }
                    break;
                }
                vis[j][xx][yy] = true;
                bool ok = true;
                for (int k = j + 1; k < 8; ++k)
                {
                    if (vis[k][xx][yy])
                    {
                        ok = false;
                        break;
                    }
                }
                if (!ok)
                    continue;
                for (int k = j+1; k < 8; ++k)
                {
                    vis[k][xx][yy] = true;
                }
                dfs(cur + 1);
                for (int k = j + 1; k < 8; ++k)
                {
                    vis[k][xx][yy] = false;
                }
            }
        }

        // stay.
        bool ok = true;
        for (int i = 1; i < 8; ++i)
        {
            if (vis[i][x][y])
            {
                ok = false;
                break;
            }
        }
        if (!ok)
            return;
        for (int i = 1; i < 8; ++i)
            vis[i][x][y] = true;
        dfs(cur + 1);
        for (int i = 1; i < 8; ++i)
            vis[i][x][y] = false;
    }

    int countCombinations(vector<string> &pieces, vector<vector<int>> &positions)
    {
        n = pieces.size();
        this->pieces = pieces;
        this->positions = positions;
        memset(vis, 0, sizeof(vis));
        res = 0;
        dfs(0);
        return res;
    }
};


// Source https://leetcode.com/problems/smallest-index-with-equal-value/

Given a 0-indexed integer array nums, return the smallest index i of nums such that i mod 10 == nums[i], or -1 if such index does not exist.

x mod y denotes the remainder when x is divided by y.

 

Example 1:

Input: nums = [0,1,2]
Output: 0
Explanation: 
i=0: 0 mod 10 = 0 == nums[0].
i=1: 1 mod 10 = 1 == nums[1].
i=2: 2 mod 10 = 2 == nums[2].
All indices have i mod 10 == nums[i], so we return the smallest index 0.
Example 2:

Input: nums = [4,3,2,1]
Output: 2
Explanation: 
i=0: 0 mod 10 = 0 != nums[0].
i=1: 1 mod 10 = 1 != nums[1].
i=2: 2 mod 10 = 2 == nums[2].
i=3: 3 mod 10 = 3 != nums[3].
2 is the only index which has i mod 10 == nums[i].
Example 3:

Input: nums = [1,2,3,4,5,6,7,8,9,0]
Output: -1
Explanation: No index satisfies i mod 10 == nums[i].
 

Constraints:

1 <= nums.length <= 100
0 <= nums[i] <= 9

class Solution
{
public:
    int smallestEqual(vector<int> &nums)
    {
        int n = nums.size();
        for (int i = 0; i < n; i++)
        {
            if (i % 10 == nums[i])
                return i;
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/find-the-minimum-and-maximum-number-of-nodes-between-critical-points/

A critical point in a linked list is defined as either a local maxima or a local minima.

A node is a local maxima if the current node has a value strictly greater than the previous node and the next node.

A node is a local minima if the current node has a value strictly smaller than the previous node and the next node.

Note that a node can only be a local maxima/minima if there exists both a previous node and a next node.

Given a linked list head, return an array of length 2 containing [minDistance, maxDistance] 
where minDistance is the minimum distance between any two distinct critical points and maxDistance is the maximum distance between any two distinct critical points. 
If there are fewer than two critical points, return [-1, -1].

 

Example 1:


Input: head = [3,1]
Output: [-1,-1]
Explanation: There are no critical points in [3,1].
Example 2:


Input: head = [5,3,1,2,5,1,2]
Output: [1,3]
Explanation: There are three critical points:
- [5,3,1,2,5,1,2]: The third node is a local minima because 1 is less than 3 and 2.
- [5,3,1,2,5,1,2]: The fifth node is a local maxima because 5 is greater than 2 and 1.
- [5,3,1,2,5,1,2]: The sixth node is a local minima because 1 is less than 5 and 2.
The minimum distance is between the fifth and the sixth node. minDistance = 6 - 5 = 1.
The maximum distance is between the third and the sixth node. maxDistance = 6 - 3 = 3.
Example 3:


Input: head = [1,3,2,2,3,2,2,2,7]
Output: [3,3]
Explanation: There are two critical points:
- [1,3,2,2,3,2,2,2,7]: The second node is a local maxima because 3 is greater than 1 and 2.
- [1,3,2,2,3,2,2,2,7]: The fifth node is a local maxima because 3 is greater than 2 and 2.
Both the minimum and maximum distances are between the second and the fifth node.
Thus, minDistance and maxDistance is 5 - 2 = 3.
Note that the last node is not considered a local maxima because it does not have a next node.
 

Constraints:

The number of nodes in the list is in the range [2, 105].
1 <= Node.val <= 105

class Solution
{
public:
    vector<int> nodesBetweenCriticalPoints(ListNode *head)
    {
        int index = 0, first = -1, last = -1, minDis = INT_MAX;
        ListNode *prev = NULL;
        ListNode *node = head;
        while(node)
        {
            ListNode *next = node->next;
            if(prev && next)
            {
                if((node->val > next->val && node->val > prev->val) || (node->val < next->val && node->val < prev->val))
                {
                    if(first == -1)
                    {
                        first = index;
                    }
                    if(last != -1)
                    {
                        minDis = min(minDis, index - last);
                    }
                    last = index;
                }
            }
            index++;
            prev = node;
            node = next;
        }
        if(minDis == INT_MAX)
        {
            return {-1, -1};
        }
        return {minDis, last - first};
    }
};


// Source https://leetcode.com/problems/minimum-operations-to-convert-number/

You are given a 0-indexed integer array nums containing distinct numbers, an integer start, and an integer goal. 
There is an integer x that is initially set to start, and you want to perform operations on x such that it is converted to goal. You can perform the following operation repeatedly on the number x:

If 0 <= x <= 1000, then for any index i in the array (0 <= i < nums.length), you can set x to any of the following:

x + nums[i]
x - nums[i]
x ^ nums[i] (bitwise-XOR)
Note that you can use each nums[i] any number of times in any order. Operations that set x to be out of the range 0 <= x <= 1000 are valid, but no more operations can be done afterward.

Return the minimum number of operations needed to convert x = start into goal, and -1 if it is not possible.

 

Example 1:

Input: nums = [2,4,12], start = 2, goal = 12
Output: 2
Explanation: We can go from 2 → 14 → 12 with the following 2 operations.
- 2 + 12 = 14
- 14 - 2 = 12
Example 2:

Input: nums = [3,5,7], start = 0, goal = -4
Output: 2
Explanation: We can go from 0 → 3 → -4 with the following 2 operations. 
- 0 + 3 = 3
- 3 - 7 = -4
Note that the last operation sets x out of the range 0 <= x <= 1000, which is valid.
Example 3:

Input: nums = [2,8,16], start = 0, goal = 1
Output: -1
Explanation: There is no way to convert 0 into 1.
 

Constraints:

1 <= nums.length <= 1000
-109 <= nums[i], goal <= 109
0 <= start <= 1000
start != goal
All the integers in nums are distinct.

class Solution
{
public:
    int minimumOperations(vector<int> &nums, int start, int goal)
    {
        vector<int> vis(1001, 0);
        queue<int>q;
        q.push(start);
        int ans = 0;
        while(!q.empty())
        {
            int sz = q.size();
            while(sz--)
            {
                int x = q.front();
                q.pop();
                if(x == goal) return ans;
                if(x < 0 || x > 1000 || vis[x]) continue;
                vis[x] = 1;
                for(int val : nums)
                {
                    q.push(x + val);
                    q.push(x - val);
                    q.push(x ^ val);
                }
            }
            ++ans;
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/check-if-an-original-string-exists-given-two-encoded-strings/

An original string, consisting of lowercase English letters, can be encoded by the following steps:

Arbitrarily split it into a sequence of some number of non-empty substrings.
Arbitrarily choose some elements (possibly none) of the sequence, and replace each with its length (as a numeric string).
Concatenate the sequence as the encoded string.
For example, one way to encode an original string "abcdefghijklmnop" might be:

Split it as a sequence: ["ab", "cdefghijklmn", "o", "p"].
Choose the second and third elements to be replaced by their lengths, respectively. The sequence becomes ["ab", "12", "1", "p"].
Concatenate the elements of the sequence to get the encoded string: "ab121p".
Given two encoded strings s1 and s2, consisting of lowercase English letters and digits 1-9 (inclusive), return true if there exists an original string that could be encoded as both s1 and s2. Otherwise, return false.

Note: The test cases are generated such that the number of consecutive digits in s1 and s2 does not exceed 3.

 

Example 1:

Input: s1 = "internationalization", s2 = "i18n"
Output: true
Explanation: It is possible that "internationalization" was the original string.
- "internationalization" 
  -> Split:       ["internationalization"]
  -> Do not replace any element
  -> Concatenate:  "internationalization", which is s1.
- "internationalization"
  -> Split:       ["i", "nternationalizatio", "n"]
  -> Replace:     ["i", "18",                 "n"]
  -> Concatenate:  "i18n", which is s2
Example 2:

Input: s1 = "l123e", s2 = "44"
Output: true
Explanation: It is possible that "leetcode" was the original string.
- "leetcode" 
  -> Split:      ["l", "e", "et", "cod", "e"]
  -> Replace:    ["l", "1", "2",  "3",   "e"]
  -> Concatenate: "l123e", which is s1.
- "leetcode" 
  -> Split:      ["leet", "code"]
  -> Replace:    ["4",    "4"]
  -> Concatenate: "44", which is s2.
Example 3:

Input: s1 = "a5b", s2 = "c5b"
Output: false
Explanation: It is impossible.
- The original string encoded as s1 must start with the letter 'a'.
- The original string encoded as s2 must start with the letter 'c'.
 

Constraints:

1 <= s1.length, s2.length <= 40
s1 and s2 consist of digits 1-9 (inclusive), and lowercase English letters only.
The number of consecutive digits in s1 and s2 does not exceed 3.

class Solution
{
public:
    int n, m;
    bool dp[41][41][2000];

    bool comp_seqs(string &s1, string &s2, int i1, int i2, int diff)
    {
        if(i1 == n && i2 == m) return diff == 0;
        if(dp[i1][i2][diff + 1000]) return false;
        dp[i1][i2][diff + 1000] = true;
        if(diff >= 0 && i1 < n && s1[i1] <= '9')
        {
            int num1 = 0;
            for(int i = i1; i < n; i++) // loop maximum 3 consecutive digits
            {
                if(s1[i] > '9')
                    break;
                num1 = num1 * 10 + s1[i] - '0';
                if(comp_seqs(s1, s2, i + 1, i2, diff - num1))
                    return true;
            }
            return false;
        }
        if(diff <= 0 && i2 < m && s2[i2] <= '9')    // in the case that s2[i2] is a digit
        {
            int num2 = 0;
            for(int i = i2; i < m; i++)
            {
                if(s2[i] > '9')
                    break;
                num2 = num2 * 10 + s2[i] - '0';
                if(comp_seqs(s1, s2, i1, i + 1, diff + num2))
                    return true;
            }
            return false;
        }
        if(diff == 0)
        {
            if(i1 >= n || i2 >= m || s1[i1] != s2[i2])  // reject infeasible cases
                return false;
            return comp_seqs(s1, s2, i1 + 1, i2 + 1, 0);
        }
        if(diff > 0)
        {
            if(i1 >= n)  // reject infeasible cases
                return false;
            return comp_seqs(s1, s2, i1 + 1, i2, diff - 1);
        }
        if(i2 >= m)  // reject infeasible cases
            return false;
        return comp_seqs(s1, s2, i1, i2 + 1, diff + 1);
    }

    bool possiblyEquals(string s1, string s2)
    {
        n = s1.length();
        m = s2.length();
        return comp_seqs(s1, s2, 0, 0, 0);
    }
};


// Source https://leetcode.com/problems/count-vowel-substrings-of-a-string/

A substring is a contiguous (non-empty) sequence of characters within a string.

A vowel substring is a substring that only consists of vowels ('a', 'e', 'i', 'o', and 'u') and has all five vowels present in it.

Given a string word, return the number of vowel substrings in word.

 

Example 1:

Input: word = "aeiouu"
Output: 2
Explanation: The vowel substrings of word are as follows (underlined):
- "aeiouu"
- "aeiouu"
Example 2:

Input: word = "unicornarihan"
Output: 0
Explanation: Not all 5 vowels are present, so there are no vowel substrings.
Example 3:

Input: word = "cuaieuouac"
Output: 7
Explanation: The vowel substrings of word are as follows (underlined):
- "cuaieuouac"
- "cuaieuouac"
- "cuaieuouac"
- "cuaieuouac"
- "cuaieuouac"
- "cuaieuouac"
- "cuaieuouac"
 

Constraints:

1 <= word.length <= 100
word consists of lowercase English letters only.

class Solution
{
public:
    bool update(int &code, char c)
    {
        if (c == 'a') code |= 1;
        else if (c == 'e') code |= 2;
        else if (c == 'i') code |= 4;
        else if (c == 'o') code |= 8;
        else if (c == 'u') code |= 16;
        else return false;
        return true;
    }

    int countVowelSubstrings(string word)
    {
        int n = word.length();
        int res = 0;
        for (int i = 0; i < n - 4; ++i)
        {
            int code = 0;
            if (!update(code, word[i])) continue;
            for (int j = i + 1; j < n; ++j)
            {
                if (!update(code, word[j])) break;
                if (code == 31) ++res;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/vowels-of-all-substrings/

Given a string word, return the sum of the number of vowels ('a', 'e', 'i', 'o', and 'u') in every substring of word.

A substring is a contiguous (non-empty) sequence of characters within a string.

Note: Due to the large constraints, the answer may not fit in a signed 32-bit integer. Please be careful during the calculations.

 

Example 1:

Input: word = "aba"
Output: 6
Explanation: 
All possible substrings are: "a", "ab", "aba", "b", "ba", and "a".
- "b" has 0 vowels in it
- "a", "ab", "ba", and "a" have 1 vowel each
- "aba" has 2 vowels in it
Hence, the total sum of vowels = 0 + 1 + 1 + 1 + 1 + 2 = 6. 
Example 2:

Input: word = "abc"
Output: 3
Explanation: 
All possible substrings are: "a", "ab", "abc", "b", "bc", and "c".
- "a", "ab", and "abc" have 1 vowel each
- "b", "bc", and "c" have 0 vowels each
Hence, the total sum of vowels = 1 + 1 + 1 + 0 + 0 + 0 = 3.
Example 3:

Input: word = "ltcd"
Output: 0
Explanation: There are no vowels in any substring of "ltcd".
 

Constraints:

1 <= word.length <= 105
word consists of lowercase English letters.


包含s[i] 长度为1的子字符串有1种（就是s[i]本身）
以s[i]为最后一个字符，长度至少为2的子字符串有 i 种
以s[i]为第一个字符，长度至少为2的子字符串有 n - i -1 种
以s[i]为中间的字符，长度至少为3的子字符串有 i * (n - i -1) 种

class Solution
{
public:
    long long countVowels(string word)
    {
        long long n = word.size();
        long long result = 0;
        for(long long i = 0; i < n; i++)
        {
            if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u')
            {
                result += (1 + i + (n - i - 1) + ( i * (n - i - 1)));
            }
        }
        return result;
    }
};


// Source https://leetcode.com/problems/minimized-maximum-of-products-distributed-to-any-store/

You are given an integer n indicating there are n specialty retail stores. There are m product types of varying amounts, 
which are given as a 0-indexed integer array quantities, where quantities[i] represents the number of products of the ith product type.

You need to distribute all products to the retail stores following these rules:

A store can only be given at most one product type but can be given any amount of it.
After distribution, each store will have been given some number of products (possibly 0). 
Let x represent the maximum number of products given to any store. You want x to be as small as possible, 
i.e., you want to minimize the maximum number of products that are given to any store.
Return the minimum possible x.

 

Example 1:

Input: n = 6, quantities = [11,6]
Output: 3
Explanation: One optimal way is:
- The 11 products of type 0 are distributed to the first four stores in these amounts: 2, 3, 3, 3
- The 6 products of type 1 are distributed to the other two stores in these amounts: 3, 3
The maximum number of products given to any store is max(2, 3, 3, 3, 3, 3) = 3.
Example 2:

Input: n = 7, quantities = [15,10,10]
Output: 5
Explanation: One optimal way is:
- The 15 products of type 0 are distributed to the first three stores in these amounts: 5, 5, 5
- The 10 products of type 1 are distributed to the next two stores in these amounts: 5, 5
- The 10 products of type 2 are distributed to the last two stores in these amounts: 5, 5
The maximum number of products given to any store is max(5, 5, 5, 5, 5, 5, 5) = 5.
Example 3:

Input: n = 1, quantities = [100000]
Output: 100000
Explanation: The only optimal way is:
- The 100000 products of type 0 are distributed to the only store.
The maximum number of products given to any store is max(100000) = 100000.
 

Constraints:

m == quantities.length
1 <= m <= n <= 105
1 <= quantities[i] <= 105

class Solution
{
public:

    bool check(vector<int> &quant, int limit, int n)
    {
        int count = 0;
        for(auto x : quant)
        {
            count += x / limit;
            if(x % limit) count++;
            if (count > n) return false;
        }
        return true;
    }

    int minimizedMaximum(int n, vector<int> &quant)
    {
        int l = 1, r = *max_element(quant.begin(), quant.end());
        while(l < r)
        {
            int mid = l + (r - l) / 2;
            if (check(quant, mid, n)) r = mid;
            else l = mid + 1;
        }
        return l;
    }
};


// Source https://leetcode.com/problems/maximum-path-quality-of-a-graph/

There is an undirected graph with n nodes numbered from 0 to n - 1 (inclusive). You are given a 0-indexed integer array values where values[i] is the value of the ith node. 
You are also given a 0-indexed 2D integer array edges, where each edges[j] = [uj, vj, timej] indicates that there is an undirected edge between the nodes uj and vj, 
and it takes timej seconds to travel between the two nodes. Finally, you are given an integer maxTime.

A valid path in the graph is any path that starts at node 0, ends at node 0, and takes at most maxTime seconds to complete. 
You may visit the same node multiple times. The quality of a valid path is the sum of the values of the unique nodes visited in the path (each node's value is added at most once to the sum).

Return the maximum quality of a valid path.

Note: There are at most four edges connected to each node.

 

Example 1:


Input: values = [0,32,10,43], edges = [[0,1,10],[1,2,15],[0,3,10]], maxTime = 49
Output: 75
Explanation:
One possible path is 0 -> 1 -> 0 -> 3 -> 0. The total time taken is 10 + 10 + 10 + 10 = 40 <= 49.
The nodes visited are 0, 1, and 3, giving a maximal path quality of 0 + 32 + 43 = 75.
Example 2:


Input: values = [5,10,15,20], edges = [[0,1,10],[1,2,10],[0,3,10]], maxTime = 30
Output: 25
Explanation:
One possible path is 0 -> 3 -> 0. The total time taken is 10 + 10 = 20 <= 30.
The nodes visited are 0 and 3, giving a maximal path quality of 5 + 20 = 25.
Example 3:


Input: values = [1,2,3,4], edges = [[0,1,10],[1,2,11],[2,3,12],[1,3,13]], maxTime = 50
Output: 7
Explanation:
One possible path is 0 -> 1 -> 3 -> 1 -> 0. The total time taken is 10 + 13 + 13 + 10 = 46 <= 50.
The nodes visited are 0, 1, and 3, giving a maximal path quality of 1 + 2 + 4 = 7.
 

Constraints:

n == values.length
1 <= n <= 1000
0 <= values[i] <= 108
0 <= edges.length <= 2000
edges[j].length == 3
0 <= uj < vj <= n - 1
10 <= timej, maxTime <= 100
All the pairs [uj, vj] are unique.
There are at most four edges connected to each node.
The graph may not be connected.

class Solution
{
public:
    int ans;

    int maximalPathQuality(vector<int> &values, vector<vector<int>> &edges, int maxTime)
    {
        int n = values.size();
        vector<vector<pair<int, int>>> adj(n);
        for(auto &edge : edges)
        {
            adj[edge[0]].push_back({edge[1], edge[2]});
            adj[edge[1]].push_back({edge[0], edge[2]});
        }
        ans = 0;
        vector<int> vis(n, 0);
        dfs(adj, values, vis, 0, values[0], maxTime);
        return ans;
    }

    void dfs(vector<vector<pair<int, int>>> &adj, vector<int> &values, vector<int> &vis, int node, int quality, int time)
    {
        if(node == 0) ans = max(ans, quality);
        vis[node]++;
        for(auto [adjnode, wt] : adj[node])
        {
            if(wt <= time)
            {
                int val = quality + (vis[adjnode] > 0 ? 0 : values[adjnode]);
                dfs(adj, values, vis, adjnode, val, time - wt);
            }
        }
        vis[node]--;
    }
};


// Source https://leetcode.com/problems/check-whether-two-strings-are-almost-equivalent/

Two strings word1 and word2 are considered almost equivalent if the differences between the frequencies of each letter from 'a' to 'z' between word1 and word2 is at most 3.

Given two strings word1 and word2, each of length n, return true if word1 and word2 are almost equivalent, or false otherwise.

The frequency of a letter x is the number of times it occurs in the string.

 

Example 1:

Input: word1 = "aaaa", word2 = "bccb"
Output: false
Explanation: There are 4 'a's in "aaaa" but 0 'a's in "bccb".
The difference is 4, which is more than the allowed 3.
Example 2:

Input: word1 = "abcdeef", word2 = "abaaacc"
Output: true
Explanation: The differences between the frequencies of each letter in word1 and word2 are at most 3:
- 'a' appears 1 time in word1 and 4 times in word2. The difference is 3.
- 'b' appears 1 time in word1 and 1 time in word2. The difference is 0.
- 'c' appears 1 time in word1 and 2 times in word2. The difference is 1.
- 'd' appears 1 time in word1 and 0 times in word2. The difference is 1.
- 'e' appears 2 times in word1 and 0 times in word2. The difference is 2.
- 'f' appears 1 time in word1 and 0 times in word2. The difference is 1.
Example 3:

Input: word1 = "cccddabba", word2 = "babababab"
Output: true
Explanation: The differences between the frequencies of each letter in word1 and word2 are at most 3:
- 'a' appears 2 times in word1 and 4 times in word2. The difference is 2.
- 'b' appears 2 times in word1 and 5 times in word2. The difference is 3.
- 'c' appears 3 times in word1 and 0 times in word2. The difference is 3.
- 'd' appears 2 times in word1 and 0 times in word2. The difference is 2.
 

Constraints:

n == word1.length == word2.length
1 <= n <= 100
word1 and word2 consist only of lowercase English letters.

class Solution
{
public:
    bool checkAlmostEquivalent(string word1, string word2)
    {
        vector<int> arr1(26, 0);
        vector<int> arr2(26, 0);
        for (auto ch : word1)
        {
            arr1[ch - 'a']++;
        }
        for (auto ch : word2)
        {
            arr2[ch - 'a']++;
        }
        for (int i = 0; i < 26; ++i)
        {
            if(abs(arr1[i] - arr2[i]) > 3)
                return false;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/walking-robot-simulation-ii/

A width x height grid is on an XY-plane with the bottom-left cell at (0, 0) and the top-right cell at (width - 1, height - 1). 
The grid is aligned with the four cardinal directions ("North", "East", "South", and "West"). A robot is initially at cell (0, 0) facing direction "East".

The robot can be instructed to move for a specific number of steps. For each step, it does the following.

Attempts to move forward one cell in the direction it is facing.
If the cell the robot is moving to is out of bounds, the robot instead turns 90 degrees counterclockwise and retries the step.
After the robot finishes moving the number of steps required, it stops and awaits the next instruction.

Implement the Robot class:

Robot(int width, int height) Initializes the width x height grid with the robot at (0, 0) facing "East".
void step(int num) Instructs the robot to move forward num steps.
int[] getPos() Returns the current cell the robot is at, as an array of length 2, [x, y].
String getDir() Returns the current direction of the robot, "North", "East", "South", or "West".
 

Example 1:

example-1
Input
["Robot", "step", "step", "getPos", "getDir", "step", "step", "step", "getPos", "getDir"]
[[6, 3], [2], [2], [], [], [2], [1], [4], [], []]
Output
[null, null, null, [4, 0], "East", null, null, null, [1, 2], "West"]

Explanation
Robot robot = new Robot(6, 3); // Initialize the grid and the robot at (0, 0) facing East.
robot.step(2);  // It moves two steps East to (2, 0), and faces East.
robot.step(2);  // It moves two steps East to (4, 0), and faces East.
robot.getPos(); // return [4, 0]
robot.getDir(); // return "East"
robot.step(2);  // It moves one step East to (5, 0), and faces East.
                // Moving the next step East would be out of bounds, so it turns and faces North.
                // Then, it moves one step North to (5, 1), and faces North.
robot.step(1);  // It moves one step North to (5, 2), and faces North (not West).
robot.step(4);  // Moving the next step North would be out of bounds, so it turns and faces West.
                // Then, it moves four steps West to (1, 2), and faces West.
robot.getPos(); // return [1, 2]
robot.getDir(); // return "West"

 

Constraints:

2 <= width, height <= 100
1 <= num <= 105
At most 104 calls in total will be made to step, getPos, and getDir.


class Robot
{
private:
    int index, w, h, p;

public:
    Robot(int width, int height)
    {
        w = width - 1;
        h = height - 1;
        p = w + w + h + h;
        index = p;
    }

    void step(int num)
    {
        index = (index + num) % p;
    }

    vector<int> getPos()
    {
        if (index == 0 || index == p) return {0, 0};
        else if (index <= w) return {index, 0};
        else if (index <= w + h) return {w, index - w};
        else if (index <= w + w + h) return {(w + w + h) - index, h};
        else return {0, (p - index)};
    }

    string getDir()
    {
        if (index == p) return "East";
        else if (index == 0) return "South";
        else if (index <= w) return "East";
        else if (index <= w + h) return "North";
        else if (index <= w + w + h) return "West" ;
        else return "South";
    }
};


// Source https://leetcode.com/problems/most-beautiful-item-for-each-query/

You are given a 2D integer array items where items[i] = [pricei, beautyi] denotes the price and beauty of an item respectively.

You are also given a 0-indexed integer array queries. For each queries[j], you want to determine the maximum beauty of an item 
whose price is less than or equal to queries[j]. If no such item exists, then the answer to this query is 0.

Return an array answer of the same length as queries where answer[j] is the answer to the jth query.

 

Example 1:

Input: items = [[1,2],[3,2],[2,4],[5,6],[3,5]], queries = [1,2,3,4,5,6]
Output: [2,4,5,5,6,6]
Explanation:
- For queries[0]=1, [1,2] is the only item which has price <= 1. Hence, the answer for this query is 2.
- For queries[1]=2, the items which can be considered are [1,2] and [2,4]. 
  The maximum beauty among them is 4.
- For queries[2]=3 and queries[3]=4, the items which can be considered are [1,2], [3,2], [2,4], and [3,5].
  The maximum beauty among them is 5.
- For queries[4]=5 and queries[5]=6, all items can be considered.
  Hence, the answer for them is the maximum beauty of all items, i.e., 6.
Example 2:

Input: items = [[1,2],[1,2],[1,3],[1,4]], queries = [1]
Output: [4]
Explanation: 
The price of every item is equal to 1, so we choose the item with the maximum beauty 4. 
Note that multiple items can have the same price and/or beauty.  
Example 3:

Input: items = [[10,1000]], queries = [5]
Output: [0]
Explanation:
No item has a price less than or equal to 5, so no item can be chosen.
Hence, the answer to the query is 0.
 

Constraints:

1 <= items.length, queries.length <= 105
items[i].length == 2
1 <= pricei, beautyi, queries[j] <= 109

class Solution
{
public:
    int n;

    int binary_search(vector<vector<int>> &items, int val)
    {
        int ans = -1;
        int l = 0, r = n - 1;
        while (l <= r)
        {
            int mid = l + (r - l) / 2;
            if (items[mid][0] <= val)
            {
                ans = mid;
                l = mid + 1;
            }
            else
            {
                r = mid - 1;
            }
        }
        return ans;
    }

    vector<int> maximumBeauty(vector<vector<int>> &items, vector<int> &queries)
    {
        n = items.size();
        sort(items.begin(), items.end());
        vector<int> leftMx(n);
        int mxVal = INT_MIN;
        for (int i = 0; i < n; ++i)
        {
            mxVal = max(mxVal, items[i][1]);
            leftMx[i] = mxVal;
        }
        vector<int> ans;
        ans.reserve(queries.size());
        for (auto &q : queries)
        {
            int t = binary_search(items, q);
            if (t != -1) ans.push_back(leftMx[t]);
            else ans.push_back(0);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/maximum-number-of-tasks-you-can-assign/

You have n tasks and m workers. Each task has a strength requirement stored in a 0-indexed integer array tasks, with the ith task requiring tasks[i] strength to complete. 
The strength of each worker is stored in a 0-indexed integer array workers, with the jth worker having workers[j] strength. 
Each worker can only be assigned to a single task and must have a strength greater than or equal to the task's strength requirement (i.e., workers[j] >= tasks[i]).

Additionally, you have pills magical pills that will increase a worker's strength by strength. You can decide which workers receive the magical pills, 
however, you may only give each worker at most one magical pill.

Given the 0-indexed integer arrays tasks and workers and the integers pills and strength, return the maximum number of tasks that can be completed.

 

Example 1:

Input: tasks = [3,2,1], workers = [0,3,3], pills = 1, strength = 1
Output: 3
Explanation:
We can assign the magical pill and tasks as follows:
- Give the magical pill to worker 0.
- Assign worker 0 to task 2 (0 + 1 >= 1)
- Assign worker 1 to task 1 (3 >= 2)
- Assign worker 2 to task 0 (3 >= 3)
Example 2:

Input: tasks = [5,4], workers = [0,0,0], pills = 1, strength = 5
Output: 1
Explanation:
We can assign the magical pill and tasks as follows:
- Give the magical pill to worker 0.
- Assign worker 0 to task 0 (0 + 5 >= 5)
Example 3:

Input: tasks = [10,15,30], workers = [0,10,10,10,10], pills = 3, strength = 10
Output: 2
Explanation:
We can assign the magical pills and tasks as follows:
- Give the magical pill to worker 0 and worker 1.
- Assign worker 0 to task 0 (0 + 10 >= 10)
- Assign worker 1 to task 1 (10 + 10 >= 15)
The last pill is not given because it will not make any worker strong enough for the last task.
 

Constraints:

n == tasks.length
m == workers.length
1 <= n, m <= 5 * 104
0 <= pills <= m
0 <= tasks[i], workers[j], strength <= 109


class Solution
{
public:

    bool check(vector<int> &tasks, vector<int> &workers, int MAX_TASKS, int pills, int strength)
    {
        multiset<int> workersMultiset(workers.end() - MAX_TASKS, workers.end());
        for(int i = MAX_TASKS - 1; i >= 0; --i)
        {
            auto itr = workersMultiset.lower_bound(tasks[i]);
            if(itr == workersMultiset.end())
            {
                if (pills == 0) return false;
                auto itr2 = workersMultiset.lower_bound(tasks[i] - strength);
                if(itr2 == workersMultiset.end()) return false;
                --pills;
                workersMultiset.erase(itr2);
            }
            else workersMultiset.erase(itr);
        }
        return true;
    }

    int maxTaskAssign(vector<int> &tasks, vector<int> &workers, int pills, int strength)
    {
        int T = tasks.size();
        int W = workers.size();
        sort(tasks.begin(), tasks.end());
        sort(workers.begin(), workers.end());
        int ans = 0;
        int l = 1;
        int r = min(T, W);
        while(l <= r)
        {
            int mid = l + (r - l) / 2;
            if(check(tasks, workers, mid, pills, strength))
            {
                ans = mid;
                l = mid + 1;
            }
            else
            {
                r = mid - 1;
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/time-needed-to-buy-tickets/

There are n people in a line queuing to buy tickets, where the 0th person is at the front of the line and the (n - 1)th person is at the back of the line.

You are given a 0-indexed integer array tickets of length n where the number of tickets that the ith person would like to buy is tickets[i].

Each person takes exactly 1 second to buy a ticket. A person can only buy 1 ticket at a time and has to go back to the end of the line (which happens instantaneously) in order to buy more tickets. 
If a person does not have any tickets left to buy, the person will leave the line.

Return the time taken for the person at position k (0-indexed) to finish buying tickets.

 

Example 1:

Input: tickets = [2,3,2], k = 2
Output: 6
Explanation: 
- In the first pass, everyone in the line buys a ticket and the line becomes [1, 2, 1].
- In the second pass, everyone in the line buys a ticket and the line becomes [0, 1, 0].
The person at position 2 has successfully bought 2 tickets and it took 3 + 3 = 6 seconds.
Example 2:

Input: tickets = [5,1,1,1], k = 0
Output: 8
Explanation:
- In the first pass, everyone in the line buys a ticket and the line becomes [4, 0, 0, 0].
- In the next 4 passes, only the person in position 0 is buying tickets.
The person at position 0 has successfully bought 5 tickets and it took 4 + 1 + 1 + 1 + 1 = 8 seconds.
 

Constraints:

n == tickets.length
1 <= n <= 100
1 <= tickets[i] <= 100
0 <= k < n

class Solution
{
public:
    int timeRequiredToBuy(vector<int> &tickets, int k)
    {
        int n = tickets.size();
        int res = 0;
        int k_buy = tickets[k];
        for (int i = 0; i < n; i++)
        {
            if (i <= k)
            {
                res += min(k_buy, tickets[i]);
            }
            else
            {
                res += min(k_buy - 1, tickets[i]);
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/reverse-nodes-in-even-length-groups/

You are given the head of a linked list.

The nodes in the linked list are sequentially assigned to non-empty groups whose lengths form the sequence of the natural numbers (1, 2, 3, 4, ...). 
The length of a group is the number of nodes assigned to it. In other words,

The 1st node is assigned to the first group.
The 2nd and the 3rd nodes are assigned to the second group.
The 4th, 5th, and 6th nodes are assigned to the third group, and so on.
Note that the length of the last group may be less than or equal to 1 + the length of the second to last group.

Reverse the nodes in each group with an even length, and return the head of the modified linked list.

 

Example 1:


Input: head = [5,2,6,3,9,1,7,3,8,4]
Output: [5,6,2,3,9,1,4,8,3,7]
Explanation:
- The length of the first group is 1, which is odd, hence no reversal occurs.
- The length of the second group is 2, which is even, hence the nodes are reversed.
- The length of the third group is 3, which is odd, hence no reversal occurs.
- The length of the last group is 4, which is even, hence the nodes are reversed.
Example 2:


Input: head = [1,1,0,6]
Output: [1,0,1,6]
Explanation:
- The length of the first group is 1. No reversal occurs.
- The length of the second group is 2. The nodes are reversed.
- The length of the last group is 1. No reversal occurs.
Example 3:


Input: head = [1,1,0,6,5]
Output: [1,0,1,5,6]
Explanation:
- The length of the first group is 1. No reversal occurs.
- The length of the second group is 2. The nodes are reversed.
- The length of the last group is 2. The nodes are reversed.
 

Constraints:

The number of nodes in the list is in the range [1, 105].
0 <= Node.val <= 105

class Solution
{
public:
    ListNode *ptrArr[1000];
    int sz;
    ListNode *reverseEvenLengthGroups(ListNode *head)
    {
        if(head == NULL || head->next == NULL || head->next->next == NULL)
            return head;
        memset(ptrArr, 0, sizeof(ptrArr));
        sz = 0;
        ListNode *pre, *curr;
        pre = head;
        curr = head->next;
        int k = 2;
        while(curr != NULL)
        {
            ptrArr[sz] = curr;
            ++sz;
            ListNode *next = curr->next;
            if (sz == k)
            {
                if (k % 2 == 0)
                {
                    ListNode *temp;
                    for (int i = sz - 1; i > 0; --i)
                    {
                        temp = ptrArr[i];
                        temp->next = ptrArr[i - 1];
                    }
                    pre->next = ptrArr[sz - 1];
                    temp = ptrArr[0];
                    temp->next = next;
                    pre = ptrArr[0];
                }
                else
                {
                    pre = curr;
                }
                ++k;
                sz = 0;
            }
            curr = next;
        }
        if(sz > 0 && sz % 2 == 0)
        {
            ListNode *temp;
            for (int i = sz - 1; i > 0; --i)
            {
                temp = ptrArr[i];
                temp->next = ptrArr[i - 1];
            }
            pre->next = ptrArr[sz - 1];
            temp = ptrArr[0];
            temp->next = NULL;
        }
        return head;
    }
};


// Source https://leetcode.com/problems/decode-the-slanted-ciphertext/

A string originalText is encoded using a slanted transposition cipher to a string encodedText with the help of a matrix having a fixed number of rows rows.

originalText is placed first in a top-left to bottom-right manner.


The blue cells are filled first, followed by the red cells, then the yellow cells, and so on, until we reach the end of originalText. 
The arrow indicates the order in which the cells are filled. All empty cells are filled with ' '. 
The number of columns is chosen such that the rightmost column will not be empty after filling in originalText.

encodedText is then formed by appending all characters of the matrix in a row-wise fashion.


The characters in the blue cells are appended first to encodedText, then the red cells, and so on, and finally the yellow cells. The arrow indicates the order in which the cells are accessed.

For example, if originalText = "cipher" and rows = 3, then we encode it in the following manner:


The blue arrows depict how originalText is placed in the matrix, and the red arrows denote the order in which encodedText is formed. In the above example, encodedText = "ch ie pr".

Given the encoded string encodedText and number of rows rows, return the original string originalText.

Note: originalText does not have any trailing spaces ' '. The test cases are generated such that there is only one possible originalText.

 

Example 1:

Input: encodedText = "ch   ie   pr", rows = 3
Output: "cipher"
Explanation: This is the same example described in the problem description.
Example 2:


Input: encodedText = "iveo    eed   l te   olc", rows = 4
Output: "i love leetcode"
Explanation: The figure above denotes the matrix that was used to encode originalText. 
The blue arrows show how we can find originalText from encodedText.
Example 3:


Input: encodedText = "coding", rows = 1
Output: "coding"
Explanation: Since there is only 1 row, both originalText and encodedText are the same.
 

Constraints:

0 <= encodedText.length <= 106
encodedText consists of lowercase English letters and ' ' only.
encodedText is a valid encoding of some originalText that does not have trailing spaces.
1 <= rows <= 1000
The testcases are generated such that there is only one possible originalText.

class Solution
{
public:
    string decodeCiphertext(string encodedText, int rows)
    {
        int sz = encodedText.length();
        int cols =  sz / rows;
        string s(sz, ' ');
        int idx = 0;
        for(int j = 0; j < cols; j++)
        {
            int i = j;
            while (i < sz)
            {
                s[idx] = encodedText[i];
                i += (cols+1);
                idx++;
            }
        }
        while(s.size() > 0 && s.back() == ' ') s.pop_back();
        return s;
    }
};


// Source https://leetcode.com/problems/process-restricted-friend-requests/

You are given an integer n indicating the number of people in a network. Each person is labeled from 0 to n - 1.

You are also given a 0-indexed 2D integer array restrictions, where restrictions[i] = [xi, yi] means that person xi and person yi cannot become friends, 
either directly or indirectly through other people.

Initially, no one is friends with each other. You are given a list of friend requests as a 0-indexed 2D integer array requests, 
where requests[j] = [uj, vj] is a friend request between person uj and person vj.

A friend request is successful if uj and vj can be friends. Each friend request is processed in the given order (i.e., requests[j] occurs before requests[j + 1]), 
and upon a successful request, uj and vj become direct friends for all future friend requests.

Return a boolean array result, where each result[j] is true if the jth friend request is successful or false if it is not.

Note: If uj and vj are already direct friends, the request is still successful.

 

Example 1:

Input: n = 3, restrictions = [[0,1]], requests = [[0,2],[2,1]]
Output: [true,false]
Explanation:
Request 0: Person 0 and person 2 can be friends, so they become direct friends. 
Request 1: Person 2 and person 1 cannot be friends since person 0 and person 1 would be indirect friends (1--2--0).
Example 2:

Input: n = 3, restrictions = [[0,1]], requests = [[1,2],[0,2]]
Output: [true,false]
Explanation:
Request 0: Person 1 and person 2 can be friends, so they become direct friends.
Request 1: Person 0 and person 2 cannot be friends since person 0 and person 1 would be indirect friends (0--2--1).
Example 3:

Input: n = 5, restrictions = [[0,1],[1,2],[2,3]], requests = [[0,4],[1,2],[3,1],[3,4]]
Output: [true,false,true,false]
Explanation:
Request 0: Person 0 and person 4 can be friends, so they become direct friends.
Request 1: Person 1 and person 2 cannot be friends since they are directly restricted.
Request 2: Person 3 and person 1 can be friends, so they become direct friends.
Request 3: Person 3 and person 4 cannot be friends since person 0 and person 1 would be indirect friends (0--4--3--1).
 

Constraints:

2 <= n <= 1000
0 <= restrictions.length <= 1000
restrictions[i].length == 2
0 <= xi, yi <= n - 1
xi != yi
1 <= requests.length <= 1000
requests[j].length == 2
0 <= uj, vj <= n - 1
uj != vj


class Solution
{
public:

    struct DSU
    {
        int parent[1005];
        int size[1005];

        DSU(int n)
        {
            for(int i = 0; i < n; i++)
            {
                parent[i] = i;
                size[i] = 1;
            }
        }

        int find(int x)
        {
            if(parent[x] != x) parent[x] = find(parent[x]);
            return parent[x];
        }

        bool join(int a, int b)
        {
            int root_a = find(a);
            int root_b = find(b);
            if (root_a == root_b) return false;
            if (size[root_a] > size[root_b])
            {
                parent[root_b] = root_a;
                size[root_a] += size[root_b];
            }
            else
            {
                parent[root_a] = root_b;
                size[root_b] += size[root_a];
            }
            return true;
        }

        int count(int x)
        {
            return size[x];
        }
    };

    vector<bool> friendRequests(int n, vector<vector<int>> &restrictions, vector<vector<int>> &requests)
    {
        DSU dsu(n);
        vector<bool> res;
        res.reserve(requests.size());
        for (auto &req : requests)
        {
            int p1 = dsu.find(req[0]);
            int p2 = dsu.find(req[1]);
            if(p1 == p2)
            {
                res.push_back(true);
                continue;
            }
            bool flag = true;
            for(auto &rest : restrictions)
            {
                int x1 = dsu.find(rest[0]);
                int x2 = dsu.find(rest[1]);
                if((p1 == x1 && p2 == x2) || (p1 == x2 && p2 == x1))
                {
                    flag = false;
                    break;
                }
            }
            if(flag)
            {
                dsu.join(p1, p2);
            }
            res.push_back(flag);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/two-furthest-houses-with-different-colors/

There are n houses evenly lined up on the street, and each house is beautifully painted. You are given a 0-indexed integer array colors of length n, 
where colors[i] represents the color of the ith house.

Return the maximum distance between two houses with different colors.

The distance between the ith and jth houses is abs(i - j), where abs(x) is the absolute value of x.

 

Example 1:


Input: colors = [1,1,1,6,1,1,1]
Output: 3
Explanation: In the above image, color 1 is blue, and color 6 is red.
The furthest two houses with different colors are house 0 and house 3.
House 0 has color 1, and house 3 has color 6. The distance between them is abs(0 - 3) = 3.
Note that houses 3 and 6 can also produce the optimal answer.
Example 2:


Input: colors = [1,8,3,8,3]
Output: 4
Explanation: In the above image, color 1 is blue, color 8 is yellow, and color 3 is green.
The furthest two houses with different colors are house 0 and house 4.
House 0 has color 1, and house 4 has color 3. The distance between them is abs(0 - 4) = 4.
Example 3:

Input: colors = [0,1]
Output: 1
Explanation: The furthest two houses with different colors are house 0 and house 1.
House 0 has color 0, and house 1 has color 1. The distance between them is abs(0 - 1) = 1.
 

Constraints:

n == colors.length
2 <= n <= 100
0 <= colors[i] <= 100
Test data are generated such that at least two houses have different colors.

class Solution
{
public:
    int maxDistance(vector<int> &colors)
    {
        int n = colors.size();
        int i = 0, j = n - 1;
        while(j > i && colors[j] == colors[i]) j--;
        int dis1 = j - i;
        i = 0;
        j = n - 1;
        while(i < j && colors[i] == colors[j]) i++;
        int dis2 = j - i;
        return max(dis1, dis2);
    }
};


// Source https://leetcode.com/problems/watering-plants/

You want to water n plants in your garden with a watering can. The plants are arranged in a row and are labeled from 0 to n - 1 from left to right 
where the ith plant is located at x = i. There is a river at x = -1 that you can refill your watering can at.

Each plant needs a specific amount of water. You will water the plants in the following way:

Water the plants in order from left to right.
After watering the current plant, if you do not have enough water to completely water the next plant, return to the river to fully refill the watering can.
You cannot refill the watering can early.
You are initially at the river (i.e., x = -1). It takes one step to move one unit on the x-axis.

Given a 0-indexed integer array plants of n integers, where plants[i] is the amount of water the ith plant needs, 
and an integer capacity representing the watering can capacity, return the number of steps needed to water all the plants.

 

Example 1:

Input: plants = [2,2,3,3], capacity = 5
Output: 14
Explanation: Start at the river with a full watering can:
- Walk to plant 0 (1 step) and water it. Watering can has 3 units of water.
- Walk to plant 1 (1 step) and water it. Watering can has 1 unit of water.
- Since you cannot completely water plant 2, walk back to the river to refill (2 steps).
- Walk to plant 2 (3 steps) and water it. Watering can has 2 units of water.
- Since you cannot completely water plant 3, walk back to the river to refill (3 steps).
- Walk to plant 3 (4 steps) and water it.
Steps needed = 1 + 1 + 2 + 3 + 3 + 4 = 14.
Example 2:

Input: plants = [1,1,1,4,2,3], capacity = 4
Output: 30
Explanation: Start at the river with a full watering can:
- Water plants 0, 1, and 2 (3 steps). Return to river (3 steps).
- Water plant 3 (4 steps). Return to river (4 steps).
- Water plant 4 (5 steps). Return to river (5 steps).
- Water plant 5 (6 steps).
Steps needed = 3 + 3 + 4 + 4 + 5 + 5 + 6 = 30.
Example 3:

Input: plants = [7,7,7,7,7,7,7], capacity = 8
Output: 49
Explanation: You have to refill before watering each plant.
Steps needed = 1 + 1 + 2 + 2 + 3 + 3 + 4 + 4 + 5 + 5 + 6 + 6 + 7 = 49.
 

Constraints:

n == plants.length
1 <= n <= 1000
1 <= plants[i] <= 106
max(plants[i]) <= capacity <= 109

class Solution
{
public:
    int wateringPlants(vector<int>& plants, int capacity)
    {
        int n = plants.size();
        int i = 0;
        int temp = capacity;
        int pos = -1;
        int res = 0;
        while(i < n)
        {
            if(temp >= plants[i])
            {
                res += (i - pos);
                temp -= plants[i];
                pos = i;
                i++;
            }
            else
            {
                res += (pos + 1);
                temp = capacity;
                pos = -1;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/range-frequency-queries/

Design a data structure to find the frequency of a given value in a given subarray.

The frequency of a value in a subarray is the number of occurrences of that value in the subarray.

Implement the RangeFreqQuery class:

RangeFreqQuery(int[] arr) Constructs an instance of the class with the given 0-indexed integer array arr.
int query(int left, int right, int value) Returns the frequency of value in the subarray arr[left...right].
A subarray is a contiguous sequence of elements within an array. arr[left...right] denotes the subarray that contains the elements of nums between indices left and right (inclusive).

 

Example 1:

Input
["RangeFreqQuery", "query", "query"]
[[[12, 33, 4, 56, 22, 2, 34, 33, 22, 12, 34, 56]], [1, 2, 4], [0, 11, 33]]
Output
[null, 1, 2]

Explanation
RangeFreqQuery rangeFreqQuery = new RangeFreqQuery([12, 33, 4, 56, 22, 2, 34, 33, 22, 12, 34, 56]);
rangeFreqQuery.query(1, 2, 4); // return 1. The value 4 occurs 1 time in the subarray [33, 4]
rangeFreqQuery.query(0, 11, 33); // return 2. The value 33 occurs 2 times in the whole array.
 

Constraints:

1 <= arr.length <= 105
1 <= arr[i], value <= 104
0 <= left <= right < arr.length
At most 105 calls will be made to query

class RangeFreqQuery
{
public:
    unordered_map<int, vector<int>> mp;

    RangeFreqQuery(vector<int> &arr)
    {
        int n = arr.size();
        for(int i = 0; i < n; i++)
        {
            mp[arr[i]].push_back(i);
        }
    }

    int query(int left, int right, int value)
    {
        auto lo = lower_bound(mp[value].begin(), mp[value].end(), left) - mp[value].begin();
        auto up = upper_bound(mp[value].begin(), mp[value].end(), right) - mp[value].begin();
        return up - lo;
    }
};


// Source https://leetcode.com/problems/sum-of-k-mirror-numbers/

A k-mirror number is a positive integer without leading zeros that reads the same both forward and backward in base-10 as well as in base-k.

For example, 9 is a 2-mirror number. The representation of 9 in base-10 and base-2 are 9 and 1001 respectively, which read the same both forward and backward.
On the contrary, 4 is not a 2-mirror number. The representation of 4 in base-2 is 100, which does not read the same both forward and backward.
Given the base k and the number n, return the sum of the n smallest k-mirror numbers.

 

Example 1:

Input: k = 2, n = 5
Output: 25
Explanation:
The 5 smallest 2-mirror numbers and their representations in base-2 are listed as follows:
  base-10    base-2
    1          1
    3          11
    5          101
    7          111
    9          1001
Their sum = 1 + 3 + 5 + 7 + 9 = 25. 
Example 2:

Input: k = 3, n = 7
Output: 499
Explanation:
The 7 smallest 3-mirror numbers are and their representations in base-3 are listed as follows:
  base-10    base-3
    1          1
    2          2
    4          11
    8          22
    121        11111
    151        12121
    212        21212
Their sum = 1 + 2 + 4 + 8 + 121 + 151 + 212 = 499.
Example 3:

Input: k = 7, n = 17
Output: 20379000
Explanation: The 17 smallest 7-mirror numbers are:
1, 2, 3, 4, 5, 6, 8, 121, 171, 242, 292, 16561, 65656, 2137312, 4602064, 6597956, 6958596
 

Constraints:

2 <= k <= 9
1 <= n <= 30

class Solution
{
public:
    string s;
    int sz;

    bool check(long long val, int k)
    {
        sz = 0;
        while(val)
        {
            s[sz] = (char)(val % k + '0');
            ++sz;
            val /= k;
        }
        int p1 = 0, p2 = sz - 1;
        while(p1 < p2)
        {
            if(s[p1] != s[p2]) return false;
            ++p1;
            --p2;
        }
        return true;
    }

    long long kMirror(int k, int n)
    {
        long long result = 0;
        s = string(128, ' ');
        for(int i = 1; i < 10; i++) // 1,2,......,9
        {
            if(check(i, k)) // if single digit in base 10 is also palindromes in base k
            {
                result += i;
                --n;
                if(n == 0) return result;
            }
        }
        long long c = 0;
        while(n > 0)
        {
            int start = pow(10, c), last = start * 10;
            for(int i = start; i < last; i++) // 11,22,.........,99 / 1001,1111,......,9999
            {
                int p = i, t = 0;
                while(p)
                {
                    t = t * 10 + p % 10;
                    p /= 10;
                }
                long long current = 1ll * i * last;
                current += t; // eg. i=123, then current=123321
                if(check(current, k))
                {
                    result += current;
                    --n;
                    if(n == 0) return result;
                }
            }
            for(int i = start; i < last; i++) // 101,111,......191,202,212,......,989,999 / 10001,10101,......99999
            {
                int p = i, t = 0;
                while(p)
                {
                    t = t * 10 + p % 10;
                    p /= 10;
                }
                long long r = 1ll * i * 10;
                for(int j = 0; j < 10; j++)
                {
                    long long current = (r + j) * last + t; // eg. i=123, j=4, then current=1234321
                    if(check(current, k))
                    {
                        result += current;
                        --n;
                        if(n == 0) return result;
                    }
                }
            }
            c++;
        }
        return result;
    }
};


// Source https://leetcode.com/problems/count-common-words-with-one-occurrence/

Given two string arrays words1 and words2, return the number of strings that appear exactly once in each of the two arrays.

 

Example 1:

Input: words1 = ["leetcode","is","amazing","as","is"], words2 = ["amazing","leetcode","is"]
Output: 2
Explanation:
- "leetcode" appears exactly once in each of the two arrays. We count this string.
- "amazing" appears exactly once in each of the two arrays. We count this string.
- "is" appears in each of the two arrays, but there are 2 occurrences of it in words1. We do not count this string.
- "as" appears once in words1, but does not appear in words2. We do not count this string.
Thus, there are 2 strings that appear exactly once in each of the two arrays.
Example 2:

Input: words1 = ["b","bb","bbb"], words2 = ["a","aa","aaa"]
Output: 0
Explanation: There are no strings that appear in each of the two arrays.
Example 3:

Input: words1 = ["a","ab"], words2 = ["a","a","a","ab"]
Output: 1
Explanation: The only string that appears exactly once in each of the two arrays is "ab".
 

Constraints:

1 <= words1.length, words2.length <= 1000
1 <= words1[i].length, words2[j].length <= 30
words1[i] and words2[j] consists only of lowercase English letters.

class Solution
{
public:
    int countWords(vector<string> &words1, vector<string> &words2)
    {
        unordered_map<string, pair<int, int>> freq;
        int count = 0;

        for (auto &str : words1)
        {
            freq[str].first++;
        }

        for (auto &str : words2)
        {
            freq[str].second++;
        }

        for (auto &[str, p] : freq)
        {
            if (p.first == 1 && p.second == 1)
                count++;
        }

        return count;
    }
};


// Source https://leetcode.com/problems/minimum-number-of-buckets-required-to-collect-rainwater-from-houses/

You are given a 0-indexed string street. Each character in street is either 'H' representing a house or '.' representing an empty space.

You can place buckets on the empty spaces to collect rainwater that falls from the adjacent houses. 
The rainwater from a house at index i is collected if a bucket is placed at index i - 1 and/or index i + 1. 
A single bucket, if placed adjacent to two houses, can collect the rainwater from both houses.

Return the minimum number of buckets needed so that for every house, there is at least one bucket collecting rainwater from it, or -1 if it is impossible.

 

Example 1:

Input: street = "H..H"
Output: 2
Explanation:
We can put buckets at index 1 and index 2.
"H..H" -> "HBBH" ('B' denotes where a bucket is placed).
The house at index 0 has a bucket to its right, and the house at index 3 has a bucket to its left.
Thus, for every house, there is at least one bucket collecting rainwater from it.
Example 2:

Input: street = ".H.H."
Output: 1
Explanation:
We can put a bucket at index 2.
".H.H." -> ".HBH." ('B' denotes where a bucket is placed).
The house at index 1 has a bucket to its right, and the house at index 3 has a bucket to its left.
Thus, for every house, there is at least one bucket collecting rainwater from it.
Example 3:

Input: street = ".HHH."
Output: -1
Explanation:
There is no empty space to place a bucket to collect the rainwater from the house at index 2.
Thus, it is impossible to collect the rainwater from all the houses.
 

Constraints:

1 <= street.length <= 105
street[i] is either'H' or '.'.

class Solution
{
public:
    int minimumBuckets(string s)
    {
        int n = s.size();
        if(n == 1)
        {
            if(s[0] == '.')
            {
                return 0;
            }
            return -1;
        }
        int res = 0;
        for(int i = 0; i < n; i++)
        {
            if(s[i] == 'H')
            {
                if(i > 0 && s[i - 1] == 'B')
                {
                    continue;
                }
                if(i + 1 < n && s[i + 1] == '.')
                {
                    s[i + 1] = 'B';    //try to put bucket in right
                    ++res;
                }
                else if(i > 0 && s[i - 1] == '.')
                {
                    s[i - 1] = 'B';    //or try to put bucket in left
                    ++res;
                }
                else
                {
                    return -1;   //not possible
                }
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/minimum-cost-homecoming-of-a-robot-in-a-grid/

There is an m x n grid, where (0, 0) is the top-left cell and (m - 1, n - 1) is the bottom-right cell. 
You are given an integer array startPos where startPos = [startrow, startcol] indicates that initially, a robot is at the cell (startrow, startcol). 
You are also given an integer array homePos where homePos = [homerow, homecol] indicates that its home is at the cell (homerow, homecol).

The robot needs to go to its home. It can move one cell in four directions: left, right, up, or down, and it can not move outside the boundary. 
Every move incurs some cost. You are further given two 0-indexed integer arrays: rowCosts of length m and colCosts of length n.

If the robot moves up or down into a cell whose row is r, then this move costs rowCosts[r].
If the robot moves left or right into a cell whose column is c, then this move costs colCosts[c].
Return the minimum total cost for this robot to return home.

 

Example 1:


Input: startPos = [1, 0], homePos = [2, 3], rowCosts = [5, 4, 3], colCosts = [8, 2, 6, 7]
Output: 18
Explanation: One optimal path is that:
Starting from (1, 0)
-> It goes down to (2, 0). This move costs rowCosts[2] = 3.
-> It goes right to (2, 1). This move costs colCosts[1] = 2.
-> It goes right to (2, 2). This move costs colCosts[2] = 6.
-> It goes right to (2, 3). This move costs colCosts[3] = 7.
The total cost is 3 + 2 + 6 + 7 = 18
Example 2:

Input: startPos = [0, 0], homePos = [0, 0], rowCosts = [5], colCosts = [26]
Output: 0
Explanation: The robot is already at its home. Since no moves occur, the total cost is 0.
 

Constraints:

m == rowCosts.length
n == colCosts.length
1 <= m, n <= 105
0 <= rowCosts[r], colCosts[c] <= 104
startPos.length == 2
homePos.length == 2
0 <= startrow, homerow < m
0 <= startcol, homecol < n

class Solution
{
public:
    int minCost(vector<int> &startPos, vector<int> &homePos, vector<int> &rowCosts, vector<int> &colCosts)
    {
        int ans = 0;
        if(startPos[1] > homePos[1])
        {
            for(int i = startPos[1] - 1; i >= homePos[1]; i--)
            {
                ans += colCosts[i];
            }
        }
        else if(startPos[1] < homePos[1])
        {
            for(int i = startPos[1] + 1; i <= homePos[1]; i++)
            {
                ans += colCosts[i];
            }
        }
        if(startPos[0] > homePos[0])
        {
            for(int i = startPos[0] - 1; i >= homePos[0]; i--)
            {
                ans += rowCosts[i];
            }
        }
        else if(startPos[0] < homePos[0])
        {
            for(int i = startPos[0] + 1; i <= homePos[0]; i++)
            {
                ans += rowCosts[i];
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/count-fertile-pyramids-in-a-land/

A farmer has a rectangular grid of land with m rows and n columns that can be divided into unit cells. Each cell is either fertile (represented by a 1) or barren (represented by a 0). 
All cells outside the grid are considered barren.

A pyramidal plot of land can be defined as a set of cells with the following criteria:

The number of cells in the set has to be greater than 1 and all cells must be fertile.
The apex of a pyramid is the topmost cell of the pyramid. The height of a pyramid is the number of rows it covers. 
Let (r, c) be the apex of the pyramid, and its height be h. Then, the plot comprises of cells (i, j) where r <= i <= r + h - 1 and c - (i - r) <= j <= c + (i - r).
An inverse pyramidal plot of land can be defined as a set of cells with similar criteria:

The number of cells in the set has to be greater than 1 and all cells must be fertile.
The apex of an inverse pyramid is the bottommost cell of the inverse pyramid. The height of an inverse pyramid is the number of rows it covers. 
Let (r, c) be the apex of the pyramid, and its height be h. Then, the plot comprises of cells (i, j) where r - h + 1 <= i <= r and c - (r - i) <= j <= c + (r - i).
Some examples of valid and invalid pyramidal (and inverse pyramidal) plots are shown below. Black cells indicate fertile cells.


Given a 0-indexed m x n binary matrix grid representing the farmland, return the total number of pyramidal and inverse pyramidal plots that can be found in grid.

 

Example 1:


Input: grid = [[0,1,1,0],[1,1,1,1]]
Output: 2
Explanation: The 2 possible pyramidal plots are shown in blue and red respectively.
There are no inverse pyramidal plots in this grid. 
Hence total number of pyramidal and inverse pyramidal plots is 2 + 0 = 2.
Example 2:


Input: grid = [[1,1,1],[1,1,1]]
Output: 2
Explanation: The pyramidal plot is shown in blue, and the inverse pyramidal plot is shown in red. 
Hence the total number of plots is 1 + 1 = 2.
Example 3:


Input: grid = [[1,1,1,1,0],[1,1,1,1,1],[1,1,1,1,1],[0,1,0,0,1]]
Output: 13
Explanation: There are 7 pyramidal plots, 3 of which are shown in the 2nd and 3rd figures.
There are 6 inverse pyramidal plots, 2 of which are shown in the last figure.
The total number of plots is 7 + 6 = 13.
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 1000
1 <= m * n <= 105
grid[i][j] is either 0 or 1.

class Solution
{
public:
    int countPyramids(vector<vector<int>> &grid)
    {
        int n = grid.size();
        int m = grid[0].size();
        int ans = 0;
        auto orig = grid;
        // [i, j] 为最高顶点
        for(int i = n - 2; i >= 0; i--)
        {
            for(int j = 1; j < m - 1; j++)
            {
                if(grid[i][j] == 1)
                {
                    grid[i][j] = min(grid[i + 1][j - 1], min(grid[i + 1][j], grid[i + 1][j + 1])) + 1;
                }
            }
        }
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                ans += max(0, grid[i][j] - 1);
            }
        }
        grid = orig;
        // [i, j] 为最低顶点
        for(int i = 1; i < n; i++)
        {
            for(int j = 1; j < m - 1; j++)
            {
                if(grid[i][j] == 1)
                {
                    grid[i][j] = min(grid[i - 1][j - 1], min(grid[i - 1][j], grid[i - 1][j + 1])) + 1;
                }
            }
        }
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                ans += max(0, grid[i][j] - 1);
            }
        }
        grid = orig;
        return ans;
    }
};


// Source https://leetcode.com/problems/find-target-indices-after-sorting-array/

You are given a 0-indexed integer array nums and a target element target.

A target index is an index i such that nums[i] == target.

Return a list of the target indices of nums after sorting nums in non-decreasing order. 
If there are no target indices, return an empty list. The returned list must be sorted in increasing order.

 

Example 1:

Input: nums = [1,2,5,2,3], target = 2
Output: [1,2]
Explanation: After sorting, nums is [1,2,2,3,5].
The indices where nums[i] == 2 are 1 and 2.
Example 2:

Input: nums = [1,2,5,2,3], target = 3
Output: [3]
Explanation: After sorting, nums is [1,2,2,3,5].
The index where nums[i] == 3 is 3.
Example 3:

Input: nums = [1,2,5,2,3], target = 5
Output: [4]
Explanation: After sorting, nums is [1,2,2,3,5].
The index where nums[i] == 5 is 4.
 

Constraints:

1 <= nums.length <= 100
1 <= nums[i], target <= 100

void iota (ForwardIterator beg, ForwardIterator end, T startValue)
assigns startValue, startValue+1, startValue+2, and so on.

class Solution
{
public:
    vector<int> targetIndices(vector<int> &nums, int target)
    {
        int n = nums.size();
        int cnt1 = 0, cnt2 = 0;
        for (int i = 0; i < n; ++i)
        {
            if(nums[i] > target) continue;
            if(nums[i] < target) { ++cnt1; continue; }
            ++cnt2;
        }
        vector<int> res;
        res.reserve(cnt2);
        for (int i = 0; i < cnt2; ++i)
        {
            res.push_back(cnt1 + i);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/k-radius-subarray-averages/

You are given a 0-indexed array nums of n integers, and an integer k.

The k-radius average for a subarray of nums centered at some index i with the radius k is the average of all elements in nums between the indices i - k and i + k (inclusive). 
If there are less than k elements before or after the index i, then the k-radius average is -1.

Build and return an array avgs of length n where avgs[i] is the k-radius average for the subarray centered at index i.

The average of x elements is the sum of the x elements divided by x, using integer division. The integer division truncates toward zero, which means losing its fractional part.

For example, the average of four elements 2, 3, 1, and 5 is (2 + 3 + 1 + 5) / 4 = 11 / 4 = 2.75, which truncates to 2.
 

Example 1:


Input: nums = [7,4,3,9,1,8,5,2,6], k = 3
Output: [-1,-1,-1,5,4,4,-1,-1,-1]
Explanation:
- avg[0], avg[1], and avg[2] are -1 because there are less than k elements before each index.
- The sum of the subarray centered at index 3 with radius 3 is: 7 + 4 + 3 + 9 + 1 + 8 + 5 = 37.
  Using integer division, avg[3] = 37 / 7 = 5.
- For the subarray centered at index 4, avg[4] = (4 + 3 + 9 + 1 + 8 + 5 + 2) / 7 = 4.
- For the subarray centered at index 5, avg[5] = (3 + 9 + 1 + 8 + 5 + 2 + 6) / 7 = 4.
- avg[6], avg[7], and avg[8] are -1 because there are less than k elements after each index.
Example 2:

Input: nums = [100000], k = 0
Output: [100000]
Explanation:
- The sum of the subarray centered at index 0 with radius 0 is: 100000.
  avg[0] = 100000 / 1 = 100000.
Example 3:

Input: nums = [8], k = 100000
Output: [-1]
Explanation: 
- avg[0] is -1 because there are less than k elements before and after index 0.
 

Constraints:

n == nums.length
1 <= n <= 105
0 <= nums[i], k <= 105

class Solution
{
public:
    vector<int> getAverages(vector<int> &nums, int k)
    {
        int n = nums.size(), den = 2 * k + 1;
        vector<int> ans(n, -1);
        if(n < den) return ans;
        unsigned long long sum = 0;
        for (int j = 0; j < den; ++j) sum += nums[j];
        ans[k] = sum / den;
        for(int i = 0, j = den; j < n; ++j, ++i)
        {
            sum += nums[j];
            sum -= nums[i];
            ans[i + 1 + k] = sum / den;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/removing-minimum-and-maximum-from-array/

You are given a 0-indexed array of distinct integers nums.

There is an element in nums that has the lowest value and an element that has the highest value. We call them the minimum and maximum respectively. 
Your goal is to remove both these elements from the array.

A deletion is defined as either removing an element from the front of the array or removing an element from the back of the array.

Return the minimum number of deletions it would take to remove both the minimum and maximum element from the array.

 

Example 1:

Input: nums = [2,10,7,5,4,1,8,6]
Output: 5
Explanation: 
The minimum element in the array is nums[5], which is 1.
The maximum element in the array is nums[1], which is 10.
We can remove both the minimum and maximum by removing 2 elements from the front and 3 elements from the back.
This results in 2 + 3 = 5 deletions, which is the minimum number possible.
Example 2:

Input: nums = [0,-4,19,1,8,-2,-3,5]
Output: 3
Explanation: 
The minimum element in the array is nums[1], which is -4.
The maximum element in the array is nums[2], which is 19.
We can remove both the minimum and maximum by removing 3 elements from the front.
This results in only 3 deletions, which is the minimum number possible.
Example 3:

Input: nums = [101]
Output: 1
Explanation:  
There is only one element in the array, which makes it both the minimum and maximum element.
We can remove it with 1 deletion.
 

Constraints:

1 <= nums.length <= 105
-105 <= nums[i] <= 105
The integers in nums are distinct.

class Solution
{
public:
    int minimumDeletions(vector<int> &nums)
    {
        int n = nums.size();
        if(n <= 2) return n;
        int mxVal = INT_MIN, mnVal = INT_MAX;
        int mxPos = -1, mnPos = -1;
        for (int i = 0; i < n; ++i)
        {
            int val = nums[i];
            if (val > mxVal) { mxVal = val; mxPos = i; }
            if (val < mnVal) { mnVal = val; mnPos = i; }
        }
        int min_s, min_e, max_s, max_e;
        max_s = mxPos + 1;
        max_e = n - mxPos;
        min_s = mnPos + 1;
        min_e = n - mnPos;
        int a = max(min_s, max_s);
        int b = max(min_e, max_e);
        int c = min_e + max_s;
        int d = min_s + max_e;
        return min(a, min(b, min(c, d)));
    }
};


// Source https://leetcode.com/problems/find-all-people-with-secret/

You are given an integer n indicating there are n people numbered from 0 to n - 1. You are also given a 0-indexed 2D integer array meetings 
where meetings[i] = [xi, yi, timei] indicates that person xi and person yi have a meeting at timei. A person may attend multiple meetings at the same time. 
Finally, you are given an integer firstPerson.

Person 0 has a secret and initially shares the secret with a person firstPerson at time 0. This secret is then shared every time a meeting takes place with a person that has the secret. 
More formally, for every meeting, if a person xi has the secret at timei, then they will share the secret with person yi, and vice versa.

The secrets are shared instantaneously. That is, a person may receive the secret and share it with people in other meetings within the same time frame.

Return a list of all the people that have the secret after all the meetings have taken place. You may return the answer in any order.

 

Example 1:

Input: n = 6, meetings = [[1,2,5],[2,3,8],[1,5,10]], firstPerson = 1
Output: [0,1,2,3,5]
Explanation:
At time 0, person 0 shares the secret with person 1.
At time 5, person 1 shares the secret with person 2.
At time 8, person 2 shares the secret with person 3.
At time 10, person 1 shares the secret with person 5.​​​​
Thus, people 0, 1, 2, 3, and 5 know the secret after all the meetings.
Example 2:

Input: n = 4, meetings = [[3,1,3],[1,2,2],[0,3,3]], firstPerson = 3
Output: [0,1,3]
Explanation:
At time 0, person 0 shares the secret with person 3.
At time 2, neither person 1 nor person 2 know the secret.
At time 3, person 3 shares the secret with person 0 and person 1.
Thus, people 0, 1, and 3 know the secret after all the meetings.
Example 3:

Input: n = 5, meetings = [[3,4,2],[1,2,1],[2,3,1]], firstPerson = 1
Output: [0,1,2,3,4]
Explanation:
At time 0, person 0 shares the secret with person 1.
At time 1, person 1 shares the secret with person 2, and person 2 shares the secret with person 3.
Note that person 2 can share the secret at the same time as receiving it.
At time 2, person 3 shares the secret with person 4.
Thus, people 0, 1, 2, 3, and 4 know the secret after all the meetings.
 

Constraints:

2 <= n <= 105
1 <= meetings.length <= 105
meetings[i].length == 3
0 <= xi, yi <= n - 1
xi != yi
1 <= timei <= 105
1 <= firstPerson <= n - 1

class Solution
{
public:
    vector<int> findAllPeople(int n, vector<vector<int>> &meetings, int firstPerson)
    {
        vector<vector<pair<int, int>>> meetVec(n);
        for(auto &v : meetings)
        {
            meetVec[v[0]].push_back({v[2], v[1]});
            meetVec[v[1]].push_back({v[2], v[0]});
        }
        vector<bool> vis(n, 0);
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        pq.push({0, 0});
        pq.push({0, firstPerson});
        while(!pq.empty())
        {
            auto [time, person] = pq.top();
            pq.pop();
            if(vis[person]) continue;
            vis[person] = true;
            for(auto p : meetVec[person])
            {
                if(!vis[p.second] && time <= p.first)
                    pq.push(p);
            }
        }
        vector<int> ans;
        for(int i = 0; i < n; i++)
        {
            if(vis[i]) ans.push_back(i);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/finding-3-digit-even-numbers/

You are given an integer array digits, where each element is a digit. The array may contain duplicates.

You need to find all the unique integers that follow the given requirements:

The integer consists of the concatenation of three elements from digits in any arbitrary order.
The integer does not have leading zeros.
The integer is even.
For example, if the given digits were [1, 2, 3], integers 132 and 312 follow the requirements.

Return a sorted array of the unique integers.

 

Example 1:

Input: digits = [2,1,3,0]
Output: [102,120,130,132,210,230,302,310,312,320]
Explanation: All the possible integers that follow the requirements are in the output array. 
Notice that there are no odd integers or integers with leading zeros.
Example 2:

Input: digits = [2,2,8,8,2]
Output: [222,228,282,288,822,828,882]
Explanation: The same digit can be used as many times as it appears in digits. 
In this example, the digit 8 is used twice each time in 288, 828, and 882. 
Example 3:

Input: digits = [3,7,5]
Output: []
Explanation: No even integers can be formed using the given digits.
 

Constraints:

3 <= digits.length <= 100
0 <= digits[i] <= 9

class Solution
{
public:

    bool check(int num, int freq[])
    {
        int arr[10] = {0};
        while(num > 0)
        {
            arr[num % 10]++;
            num /= 10;
        }
        for(int i = 0; i <= 9; i++)
        {
            if(arr[i] > 0 && arr[i] > freq[i]) return false;
        }
        return true;
    }

    vector<int> findEvenNumbers(vector<int> &digits)
    {
        int freq[10] = {0};
        for(auto val : digits) freq[val]++;
        vector<int> ans;
        ans.reserve(128);
        for(int i = 100; i <= 998; i += 2)
        {
            if(check(i, freq)) ans.push_back(i);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/delete-the-middle-node-of-a-linked-list/

You are given the head of a linked list. Delete the middle node, and return the head of the modified linked list.

The middle node of a linked list of size n is the ⌊n / 2⌋th node from the start using 0-based indexing, where ⌊x⌋ denotes the largest integer less than or equal to x.

For n = 1, 2, 3, 4, and 5, the middle nodes are 0, 1, 1, 2, and 2, respectively.
 

Example 1:


Input: head = [1,3,4,7,1,2,6]
Output: [1,3,4,1,2,6]
Explanation:
The above figure represents the given linked list. The indices of the nodes are written below.
Since n = 7, node 3 with value 7 is the middle node, which is marked in red.
We return the new list after removing this node. 
Example 2:


Input: head = [1,2,3,4]
Output: [1,2,4]
Explanation:
The above figure represents the given linked list.
For n = 4, node 2 with value 3 is the middle node, which is marked in red.
Example 3:


Input: head = [2,1]
Output: [2]
Explanation:
The above figure represents the given linked list.
For n = 2, node 1 with value 1 is the middle node, which is marked in red.
Node 0 with value 2 is the only node remaining after removing node 1.
 

Constraints:

The number of nodes in the list is in the range [1, 105].
1 <= Node.val <= 105

class Solution
{
public:

    ListNode* deleteMiddle(ListNode* head)
    {
        if(head->next == NULL) return NULL;
        ListNode *slow = head, *fast = head, *prev = NULL;
        while(fast && fast->next)
        {
            prev = slow;
            slow = slow->next;
            fast = fast->next->next;
        }
        if(prev) prev->next = slow->next;
        return head;
    }
};


// Source https://leetcode.com/problems/step-by-step-directions-from-a-binary-tree-node-to-another/

You are given the root of a binary tree with n nodes. Each node is uniquely assigned a value from 1 to n. 
You are also given an integer startValue representing the value of the start node s, and a different integer destValue representing the value of the destination node t.

Find the shortest path starting from node s and ending at node t. Generate step-by-step directions of such path as a string consisting of only the uppercase letters 'L', 'R', and 'U'. 
Each letter indicates a specific direction:

'L' means to go from a node to its left child node.
'R' means to go from a node to its right child node.
'U' means to go from a node to its parent node.
Return the step-by-step directions of the shortest path from node s to node t.

 

Example 1:


Input: root = [5,1,2,3,null,6,4], startValue = 3, destValue = 6
Output: "UURL"
Explanation: The shortest path is: 3 → 1 → 5 → 2 → 6.
Example 2:


Input: root = [2,1], startValue = 2, destValue = 1
Output: "L"
Explanation: The shortest path is: 2 → 1.
 

Constraints:

The number of nodes in the tree is n.
2 <= n <= 105
1 <= Node.val <= n
All the values in the tree are unique.
1 <= startValue, destValue <= n
startValue != destValue

class Solution
{
public:

    bool findPathToTarget(TreeNode *root, int target, vector<char> &path)
    {
        if(root == NULL) return false;
        if(root->val == target) return true;
        path.push_back('L');
        if(findPathToTarget(root->left, target, path)) return true;
        path.pop_back();
        path.push_back('R');
        if(findPathToTarget(root->right, target, path)) return true;
        path.pop_back();
        return false;
    }

    string getDirections(TreeNode *root, int startValue, int destValue)
    {
        vector<char> src;
        src.reserve(128);
        findPathToTarget(root, startValue, src);
        vector<char> dest;
        dest.reserve(128);
        findPathToTarget(root, destValue, dest);
        int i = 0, j = 0;
        int n = src.size();
        int m = dest.size();
        while(i < n && j < m && src[i] == dest[j])
        {
            i++;
            j++;
        }
        vector<char> finalPath;
        finalPath.reserve(128);
        while(i < n)
        {
            finalPath.push_back('U');
            i++;
        }
        while(j < m)
        {
            finalPath.push_back(dest[j]);
            j++;
        }
        return string(finalPath.begin(), finalPath.end());
    }
};


// Source https://leetcode.com/problems/valid-arrangement-of-pairs/

You are given a 0-indexed 2D integer array pairs where pairs[i] = [starti, endi]. An arrangement of pairs is valid if for every index i where 1 <= i < pairs.length, we have endi-1 == starti.

Return any valid arrangement of pairs.

Note: The inputs will be generated such that there exists a valid arrangement of pairs.

 

Example 1:

Input: pairs = [[5,1],[4,5],[11,9],[9,4]]
Output: [[11,9],[9,4],[4,5],[5,1]]
Explanation:
This is a valid arrangement since endi-1 always equals starti.
end0 = 9 == 9 = start1 
end1 = 4 == 4 = start2
end2 = 5 == 5 = start3
Example 2:

Input: pairs = [[1,3],[3,2],[2,1]]
Output: [[1,3],[3,2],[2,1]]
Explanation:
This is a valid arrangement since endi-1 always equals starti.
end0 = 3 == 3 = start1
end1 = 2 == 2 = start2
The arrangements [[2,1],[1,3],[3,2]] and [[3,2],[2,1],[1,3]] are also valid.
Example 3:

Input: pairs = [[1,2],[1,3],[2,1]]
Output: [[1,2],[2,1],[1,3]]
Explanation:
This is a valid arrangement since endi-1 always equals starti.
end0 = 2 == 2 = start1
end1 = 1 == 1 = start2
 

Constraints:

1 <= pairs.length <= 105
pairs[i].length == 2
0 <= starti, endi <= 109
starti != endi
No two pairs are exactly the same.
There exists a valid arrangement of pairs.

class Solution
{
public:
    vector<vector<int>> validArrangement(vector<vector<int>> &pairs)
    {
        unordered_map<int, vector<int>> g;
        unordered_map<int, int> table;
        for(auto &p : pairs)
        {
            g[p[0]].push_back(p[1]);
            table[p[0]]++;
            table[p[1]]--;
        }
        int start = g.begin()->first;
        for(auto [x, n] : table)
        {
            if(n == 1)
            {
                start = x;
                break;
            }
        }
        stack<int> st;
        vector<int> v;
        v.reserve(g.size());
        st.push(start);
        while(!st.empty())
        {
            if(g[st.top()].empty())
            {
                v.push_back(st.top());
                st.pop();
            }
            else
            {
                int next = g[st.top()].back();
                g[st.top()].pop_back();
                st.push(next);
            }
        }
        vector<vector<int>> res;
        res.reserve(v.size());
        for(int i = v.size() - 1; i > 0; --i) res.push_back({v[i], v[i-1]});
        return res;
    }
};


// Source https://leetcode.com/problems/find-subsequence-of-length-k-with-the-largest-sum/

You are given an integer array nums and an integer k. You want to find a subsequence of nums of length k that has the largest sum.

Return any such subsequence as an integer array of length k.

A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:

Input: nums = [2,1,3,3], k = 2
Output: [3,3]
Explanation:
The subsequence has the largest sum of 3 + 3 = 6.
Example 2:

Input: nums = [-1,-2,3,4], k = 3
Output: [-1,3,4]
Explanation: 
The subsequence has the largest sum of -1 + 3 + 4 = 6.
Example 3:

Input: nums = [3,4,3,3], k = 2
Output: [3,4]
Explanation:
The subsequence has the largest sum of 3 + 4 = 7. 
Another possible subsequence is [4, 3].
 

Constraints:

1 <= nums.length <= 1000
-105 <= nums[i] <= 105
1 <= k <= nums.length

class Solution
{
public:
    vector<int> maxSubsequence(vector<int> &nums, int k)
    {
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq, pq2;
        int n = nums.size();
        int i = 0;
        for(; i < n; i++)
        {
            pq.push({nums[i], i});
            if(pq.size() > k)
            {
                pq.pop();
            }
        }
        while(!pq.empty())
        {
            auto p = pq.top();
            pq2.push({p.second, p.first});
            pq.pop();
        }
        vector<int >res;
        res.reserve(pq2.size());
        while(!pq2.empty())
        {
            auto p = pq2.top();
            res.push_back(p.second);
            pq2.pop();
        }
        return res;
    }
};


// Source https://leetcode.com/problems/find-good-days-to-rob-the-bank/

You and a gang of thieves are planning on robbing a bank. You are given a 0-indexed integer array security, 
where security[i] is the number of guards on duty on the ith day. The days are numbered starting from 0. You are also given an integer time.

The ith day is a good day to rob the bank if:

There are at least time days before and after the ith day,
The number of guards at the bank for the time days before i are non-increasing, and
The number of guards at the bank for the time days after i are non-decreasing.
More formally, this means day i is a good day to rob the bank if and only if security[i - time] >= security[i - time + 1] >= ... >= security[i] <= ... <= security[i + time - 1] <= security[i + time].

Return a list of all days (0-indexed) that are good days to rob the bank. The order that the days are returned in does not matter.

 

Example 1:

Input: security = [5,3,3,3,5,6,2], time = 2
Output: [2,3]
Explanation:
On day 2, we have security[0] >= security[1] >= security[2] <= security[3] <= security[4].
On day 3, we have security[1] >= security[2] >= security[3] <= security[4] <= security[5].
No other days satisfy this condition, so days 2 and 3 are the only good days to rob the bank.
Example 2:

Input: security = [1,1,1,1,1], time = 0
Output: [0,1,2,3,4]
Explanation:
Since time equals 0, every day is a good day to rob the bank, so return every day.
Example 3:

Input: security = [1,2,3,4,5,6], time = 2
Output: []
Explanation:
No day has 2 days before it that have a non-increasing number of guards.
Thus, no day is a good day to rob the bank, so return an empty list.
 

Constraints:

1 <= security.length <= 105
0 <= security[i], time <= 105

class Solution
{
public:
    vector<int> goodDaysToRobBank(vector<int>& security, int time)
    {
        int n = security.size();
        vector<int> inright(n), inleft(n);
        inright[n - 1] = 0;
        for(int i = n - 2; i >= 0; i--)
        {
            if(security[i] <= security[i + 1]) inright[i] = 1 + inright[i + 1];
            else inright[i] = 0;
        }
        inleft[0] = 0;
        for(int i = 1; i < n; i++)
        {
            if(security[i] <= security[i - 1]) inleft[i] = 1 + inleft[i - 1];
            else inleft[i] = 0;
        }
        vector<int> ans;
        ans.reserve(128);
        for(int i = 0; i < n; i++)
        {
            if(inleft[i] >= time && inright[i] >= time) ans.push_back(i);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/detonate-the-maximum-bombs/

You are given a list of bombs. The range of a bomb is defined as the area where its effect can be felt. This area is in the shape of a circle with the center as the location of the bomb.

The bombs are represented by a 0-indexed 2D integer array bombs where bombs[i] = [xi, yi, ri]. xi and yi denote the X-coordinate and Y-coordinate of the location of the ith bomb, 
whereas ri denotes the radius of its range.

You may choose to detonate a single bomb. When a bomb is detonated, it will detonate all bombs that lie in its range. These bombs will further detonate the bombs that lie in their ranges.

Given the list of bombs, return the maximum number of bombs that can be detonated if you are allowed to detonate only one bomb.

 

Example 1:


Input: bombs = [[2,1,3],[6,1,4]]
Output: 2
Explanation:
The above figure shows the positions and ranges of the 2 bombs.
If we detonate the left bomb, the right bomb will not be affected.
But if we detonate the right bomb, both bombs will be detonated.
So the maximum bombs that can be detonated is max(1, 2) = 2.
Example 2:


Input: bombs = [[1,1,5],[10,10,5]]
Output: 1
Explanation:
Detonating either bomb will not detonate the other bomb, so the maximum number of bombs that can be detonated is 1.
Example 3:


Input: bombs = [[1,2,3],[2,3,1],[3,4,2],[4,5,3],[5,6,4]]
Output: 5
Explanation:
The best bomb to detonate is bomb 0 because:
- Bomb 0 detonates bombs 1 and 2. The red circle denotes the range of bomb 0.
- Bomb 2 detonates bomb 3. The blue circle denotes the range of bomb 2.
- Bomb 3 detonates bomb 4. The green circle denotes the range of bomb 3.
Thus all 5 bombs are detonated.
 

Constraints:

1 <= bombs.length <= 100
bombs[i].length == 3
1 <= xi, yi, ri <= 105

class Solution
{
public:
    void dfs(int node, vector<int> &vis, vector<int> adj[], int &count)
    {
        vis[node] = 1;
        count++;
        for(auto child : adj[node])
        {
            if(!vis[child])
            {
                dfs(child, vis, adj, count);
            }
        }
    }

    int maximumDetonation(vector<vector<int>> &bombs)
    {
        int n = bombs.size();
        vector<int> adj[n];
        for(int i = 0; i < n; i++)
        {
            int xPos = bombs[i][0];
            int yPos = bombs[i][1];
            long r = bombs[i][2];
            long dist = r * r;
            for(int j = 0; j < n; j++)
            {
                if(i == j) continue;
                long x = bombs[j][0] - xPos;
                long y = bombs[j][1] - yPos;
                if((x * x + y * y) <= dist)
                {
                    adj[i].push_back(j);
                }
            }
        }
        int ans = 0;
        for(int i = 0; i < n; i++)
        {
            int count = 0;
            vector<int> vis(n, 0);
            dfs(i, vis, adj, count);
            ans = max(ans, count);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/sequentially-ordinal-rank-tracker/

A scenic location is represented by its name and attractiveness score, where name is a unique string among all locations and score is an integer. 
Locations can be ranked from the best to the worst. The higher the score, the better the location. 
If the scores of two locations are equal, then the location with the lexicographically smaller name is better.

You are building a system that tracks the ranking of locations with the system initially starting with no locations. It supports:

Adding scenic locations, one at a time.
Querying the ith best location of all locations already added, where i is the number of times the system has been queried (including the current query).
For example, when the system is queried for the 4th time, it returns the 4th best location of all locations already added.
Note that the test data are generated so that at any time, the number of queries does not exceed the number of locations added to the system.

Implement the SORTracker class:

SORTracker() Initializes the tracker system.
void add(string name, int score) Adds a scenic location with name and score to the system.
string get() Queries and returns the ith best location, where i is the number of times this method has been invoked (including this invocation).
 

Example 1:

Input
["SORTracker", "add", "add", "get", "add", "get", "add", "get", "add", "get", "add", "get", "get"]
[[], ["bradford", 2], ["branford", 3], [], ["alps", 2], [], ["orland", 2], [], ["orlando", 3], [], ["alpine", 2], [], []]
Output
[null, null, null, "branford", null, "alps", null, "bradford", null, "bradford", null, "bradford", "orland"]

Explanation
SORTracker tracker = new SORTracker(); // Initialize the tracker system.
tracker.add("bradford", 2); // Add location with name="bradford" and score=2 to the system.
tracker.add("branford", 3); // Add location with name="branford" and score=3 to the system.
tracker.get();              // The sorted locations, from best to worst, are: branford, bradford.
                            // Note that branford precedes bradford due to its higher score (3 > 2).
                            // This is the 1st time get() is called, so return the best location: "branford".
tracker.add("alps", 2);     // Add location with name="alps" and score=2 to the system.
tracker.get();              // Sorted locations: branford, alps, bradford.
                            // Note that alps precedes bradford even though they have the same score (2).
                            // This is because "alps" is lexicographically smaller than "bradford".
                            // Return the 2nd best location "alps", as it is the 2nd time get() is called.
tracker.add("orland", 2);   // Add location with name="orland" and score=2 to the system.
tracker.get();              // Sorted locations: branford, alps, bradford, orland.
                            // Return "bradford", as it is the 3rd time get() is called.
tracker.add("orlando", 3);  // Add location with name="orlando" and score=3 to the system.
tracker.get();              // Sorted locations: branford, orlando, alps, bradford, orland.
                            // Return "bradford".
tracker.add("alpine", 2);   // Add location with name="alpine" and score=2 to the system.
tracker.get();              // Sorted locations: branford, orlando, alpine, alps, bradford, orland.
                            // Return "bradford".
tracker.get();              // Sorted locations: branford, orlando, alpine, alps, bradford, orland.
                            // Return "orland".
 

Constraints:

name consists of lowercase English letters, and is unique among all locations.
1 <= name.length <= 10
1 <= score <= 105
At any time, the number of calls to get does not exceed the number of calls to add.
At most 4 * 104 calls in total will be made to add and get.

class SORTracker
{
public:

    struct Location
    {
        string name;
        int score;
        bool operator<(const Location &l) const
        {
            if(score != l.score) return score > l.score;
            return name < l.name;
        }
    };

    set<Location> s;
    set<Location>::iterator it;

    SORTracker()
    {
        s.insert({"", 0}); // 根据重载后的小于运算符，score为0的Location比其他score大于0的Location要大
        it = s.begin(); // 当前it指向score为0的Location
    }

    void add(string name, int score)
    {
        auto l = Location{name, score};
        if(*it < l) s.insert(l); // 如果新的Location不会改变it指向的Location在s中的rank
        else
        {
            s.insert(l); // 如果新的Location会改变it指向的Location在s中的rank（增大1)，则it要回退一次，保持it指向的Location在s中的rank不发生变化
            --it;
        }
    }

    string get()
    {
        string ans = it->name;
        it++;

        return ans;
    }
};


// Source https://leetcode.com/problems/rings-and-rods/

There are n rings and each ring is either red, green, or blue. The rings are distributed across ten rods labeled from 0 to 9.

You are given a string rings of length 2n that describes the n rings that are placed onto the rods. 
Every two characters in rings forms a color-position pair that is used to describe each ring where:

The first character of the ith pair denotes the ith ring's color ('R', 'G', 'B').
The second character of the ith pair denotes the rod that the ith ring is placed on ('0' to '9').
For example, "R3G2B1" describes n == 3 rings: a red ring placed onto the rod labeled 3, a green ring placed onto the rod labeled 2, and a blue ring placed onto the rod labeled 1.

Return the number of rods that have all three colors of rings on them.

 

Example 1:


Input: rings = "B0B6G0R6R0R6G9"
Output: 1
Explanation: 
- The rod labeled 0 holds 3 rings with all colors: red, green, and blue.
- The rod labeled 6 holds 3 rings, but it only has red and blue.
- The rod labeled 9 holds only a green ring.
Thus, the number of rods with all three colors is 1.
Example 2:


Input: rings = "B0R0G0R9R0B0G0"
Output: 1
Explanation: 
- The rod labeled 0 holds 6 rings with all colors: red, green, and blue.
- The rod labeled 9 holds only a red ring.
Thus, the number of rods with all three colors is 1.
Example 3:

Input: rings = "G4"
Output: 0
Explanation: 
Only one ring is given. Thus, no rods have all three colors.
 

Constraints:

rings.length == 2 * n
1 <= n <= 100
rings[i] where i is even is either 'R', 'G', or 'B' (0-indexed).
rings[i] where i is odd is a digit from '0' to '9' (0-indexed).

class Solution
{
public:
    int countPoints(string rings)
    {
        int n = rings.length();
        int R[10] = {0}, G[10] = {0}, B[10] = {0};
        for(int i = 0, j = 1; i < n - 1; i += 2, j += 2)
        {
            if(rings[i] == 'B')
                B[rings[j] - '0'] = 1;
            else if(rings[i] == 'G')
                G[rings[j] - '0'] = 1;
            else
                R[rings[j] - '0'] = 1;
        }
        int res = 0;
        for(int i = 0; i < 10; i++)
        {
            if(R[i] == 1 && G[i] == 1 && B[i] == 1)
                ++res;
        }
        return res ;
    }
};


// Source https://leetcode.com/problems/sum-of-subarray-ranges/

You are given an integer array nums. The range of a subarray of nums is the difference between the largest and smallest element in the subarray.

Return the sum of all subarray ranges of nums.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:

Input: nums = [1,2,3]
Output: 4
Explanation: The 6 subarrays of nums are the following:
[1], range = largest - smallest = 1 - 1 = 0 
[2], range = 2 - 2 = 0
[3], range = 3 - 3 = 0
[1,2], range = 2 - 1 = 1
[2,3], range = 3 - 2 = 1
[1,2,3], range = 3 - 1 = 2
So the sum of all ranges is 0 + 0 + 0 + 1 + 1 + 2 = 4.
Example 2:

Input: nums = [1,3,3]
Output: 4
Explanation: The 6 subarrays of nums are the following:
[1], range = largest - smallest = 1 - 1 = 0
[3], range = 3 - 3 = 0
[3], range = 3 - 3 = 0
[1,3], range = 3 - 1 = 2
[3,3], range = 3 - 3 = 0
[1,3,3], range = 3 - 1 = 2
So the sum of all ranges is 0 + 0 + 0 + 2 + 0 + 2 = 4.
Example 3:

Input: nums = [4,-2,-3,4,1]
Output: 59
Explanation: The sum of all subarray ranges of nums is 59.
 

Constraints:

1 <= nums.length <= 1000
-109 <= nums[i] <= 109

s1 从下标0到下标i 单调递增
s2 从下标0到下标i 单调递减
f1[i] 记录以下标i结尾的所有subarray最小值之和
f2[i] 记录以下标i结尾的所有subarray最大值之和

class Solution
{
public:
    long long subArrayRanges(vector<int> &nums)
    {
        int n = nums.size();
        stack<int> s1, s2;
        s1.push(0);
        s2.push(0);
        vector<long long> f1(n), f2(n);
        f1[0] = f2[0] = nums[0];
        long long ret = 0;
        for(int i = 1; i < n; i++)
        {
            while(!s1.empty() && nums[s1.top()] >= nums[i]) s1.pop();
            while(!s2.empty() && nums[s2.top()] <= nums[i]) s2.pop();
            if (!s1.empty())
            {
                f1[i] = f1[s1.top()] + long(i - s1.top()) * nums[i];
            }
            else
            {
                f1[i] = long(i + 1) * nums[i];
            }
            if (!s2.empty())
            {
                f2[i] = f2[s2.top()] + long(i - s2.top()) * nums[i];
            }
            else
            {
                f2[i] = long(i + 1) * nums[i];
            }
            ret += (f2[i] - f1[i]);
            s1.push(i);
            s2.push(i);
        }
        return ret;
    }
};


// Source https://leetcode.com/problems/watering-plants-ii/

Alice and Bob want to water n plants in their garden. The plants are arranged in a row and are labeled from 0 to n - 1 from left to right where the ith plant is located at x = i.

Each plant needs a specific amount of water. Alice and Bob have a watering can each, initially full. They water the plants in the following way:

Alice waters the plants in order from left to right, starting from the 0th plant. Bob waters the plants in order from right to left, starting from the (n - 1)th plant. 
They begin watering the plants simultaneously.
It takes the same amount of time to water each plant regardless of how much water it needs.
Alice/Bob must water the plant if they have enough in their can to fully water it. Otherwise, they first refill their can (instantaneously) then water the plant.
In case both Alice and Bob reach the same plant, the one with more water currently in his/her watering can should water this plant. 
If they have the same amount of water, then Alice should water this plant.
Given a 0-indexed integer array plants of n integers, where plants[i] is the amount of water the ith plant needs, 
and two integers capacityA and capacityB representing the capacities of Alice's and Bob's watering cans respectively, 
return the number of times they have to refill to water all the plants.

 

Example 1:

Input: plants = [2,2,3,3], capacityA = 5, capacityB = 5
Output: 1
Explanation:
- Initially, Alice and Bob have 5 units of water each in their watering cans.
- Alice waters plant 0, Bob waters plant 3.
- Alice and Bob now have 3 units and 2 units of water respectively.
- Alice has enough water for plant 1, so she waters it. Bob does not have enough water for plant 2, so he refills his can then waters it.
So, the total number of times they have to refill to water all the plants is 0 + 0 + 1 + 0 = 1.
Example 2:

Input: plants = [2,2,3,3], capacityA = 3, capacityB = 4
Output: 2
Explanation:
- Initially, Alice and Bob have 3 units and 4 units of water in their watering cans respectively.
- Alice waters plant 0, Bob waters plant 3.
- Alice and Bob now have 1 unit of water each, and need to water plants 1 and 2 respectively.
- Since neither of them have enough water for their current plants, they refill their cans and then water the plants.
So, the total number of times they have to refill to water all the plants is 0 + 1 + 1 + 0 = 2.
Example 3:

Input: plants = [5], capacityA = 10, capacityB = 8
Output: 0
Explanation:
- There is only one plant.
- Alice's watering can has 10 units of water, whereas Bob's can has 8 units. Since Alice has more water in her can, she waters this plant.
So, the total number of times they have to refill is 0.
 

Constraints:

n == plants.length
1 <= n <= 105
1 <= plants[i] <= 106
max(plants[i]) <= capacityA, capacityB <= 109

class Solution
{
public:
    int minimumRefill(vector<int> &plants, int capacityA, int capacityB)
    {
        int n = plants.size();
        if(n == 1) return 0;
        int i = 0, j = n - 1;
        int res = 0;
        int tempA = capacityA, tempB = capacityB;
        while(i <= j)
        {
            if(i == j)
            {
                if(tempB < plants[i] && tempA < plants[i]) ++res;
                break;
            }
            if(tempA < plants[i])
            {
                ++res;
                tempA = capacityA;
            }
            if(tempB < plants[j])
            {
                ++res;
                tempB = capacityB;
            }
            tempA -= plants[i];
            tempB -= plants[j];
            ++i;
             --j;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/maximum-fruits-harvested-after-at-most-k-steps/

Fruits are available at some positions on an infinite x-axis. You are given a 2D integer array fruits 
where fruits[i] = [positioni, amounti] depicts amounti fruits at the position positioni. fruits is already sorted by positioni in ascending order, and each positioni is unique.

You are also given an integer startPos and an integer k. Initially, you are at the position startPos. From any position, you can either walk to the left or right. 
It takes one step to move one unit on the x-axis, and you can walk at most k steps in total. For every position you reach, you harvest all the fruits at that position, 
and the fruits will disappear from that position.

Return the maximum total number of fruits you can harvest.

 

Example 1:


Input: fruits = [[2,8],[6,3],[8,6]], startPos = 5, k = 4
Output: 9
Explanation: 
The optimal way is to:
- Move right to position 6 and harvest 3 fruits
- Move right to position 8 and harvest 6 fruits
You moved 3 steps and harvested 3 + 6 = 9 fruits in total.
Example 2:


Input: fruits = [[0,9],[4,1],[5,7],[6,2],[7,4],[10,9]], startPos = 5, k = 4
Output: 14
Explanation: 
You can move at most k = 4 steps, so you cannot reach position 0 nor 10.
The optimal way is to:
- Harvest the 7 fruits at the starting position 5
- Move left to position 4 and harvest 1 fruit
- Move right to position 6 and harvest 2 fruits
- Move right to position 7 and harvest 4 fruits
You moved 1 + 3 = 4 steps and harvested 7 + 1 + 2 + 4 = 14 fruits in total.
Example 3:


Input: fruits = [[0,3],[6,4],[8,5]], startPos = 3, k = 2
Output: 0
Explanation:
You can move at most k = 2 steps and cannot reach any position with fruits.
 

Constraints:

1 <= fruits.length <= 105
fruits[i].length == 2
0 <= startPos, positioni <= 2 * 105
positioni-1 < positioni for any i > 0 (0-indexed)
1 <= amounti <= 104
0 <= k <= 2 * 105


2 * (pos - leftpos) + (rightpos - pos) = pos - 2 * leftpos + rightpos
2 * (rightpos - pos) + (pos - leftpos) = 2 * rightpos - pos - leftpos

class Solution
{
public:
    int maxTotalFruits(vector<vector<int>> &fruits, int pos, int k)
    {
        int n = fruits.size();
        vector<int> vec(n);
        int idx = 0;
        for (auto &v : fruits)
        {
            vec[idx++] = v[0];
        }
        auto lo = lower_bound(vec.begin(), vec.end(), pos - k) - vec.begin();
        auto up = upper_bound(vec.begin(), vec.end(), pos + k) - vec.begin();
        int l = lo, r = l;
        int sum = 0, res = 0;
        while (r < up)
        {
            sum += fruits[r][1];
            if (fruits[r][0] <= pos)
            {
                res = max(res, sum);
                ++r;
                continue;
            }
            while(min(pos - (2 * fruits[l][0]) + fruits[r][0], (2 * fruits[r][0]) - fruits[l][0] - pos) > k)
            {
                sum -= fruits[l][1];
                ++l;
            }
            res = max(res, sum);
            ++r;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/find-first-palindromic-string-in-the-array/

Given an array of strings words, return the first palindromic string in the array. If there is no such string, return an empty string "".

A string is palindromic if it reads the same forward and backward.

 

Example 1:

Input: words = ["abc","car","ada","racecar","cool"]
Output: "ada"
Explanation: The first string that is palindromic is "ada".
Note that "racecar" is also palindromic, but it is not the first.
Example 2:

Input: words = ["notapalindrome","racecar"]
Output: "racecar"
Explanation: The first and only string that is palindromic is "racecar".
Example 3:

Input: words = ["def","ghi"]
Output: ""
Explanation: There are no palindromic strings, so the empty string is returned.
 

Constraints:

1 <= words.length <= 100
1 <= words[i].length <= 100
words[i] consists only of lowercase English letters.

class Solution
{
public:
    string firstPalindrome(vector<string> &words)
    {
        for (auto &s : words)
        {
            int x = 0;
            int y = s.length() - 1;
            bool flag = true;
            while(x < y)
            {
                if(s[x] != s[y])
                {
                    flag = false;
                    break;
                }
                ++x;
                --y;
            }
            if (flag) return s;
        }
        return "";
    }
};


// Source https://leetcode.com/problems/adding-spaces-to-a-string/

You are given a 0-indexed string s and a 0-indexed integer array spaces that describes the indices in the original string where spaces will be added. 
Each space should be inserted before the character at the given index.

For example, given s = "EnjoyYourCoffee" and spaces = [5, 9], we place spaces before 'Y' and 'C', which are at indices 5 and 9 respectively. Thus, we obtain "Enjoy Your Coffee".
Return the modified string after the spaces have been added.

 

Example 1:

Input: s = "LeetcodeHelpsMeLearn", spaces = [8,13,15]
Output: "Leetcode Helps Me Learn"
Explanation: 
The indices 8, 13, and 15 correspond to the underlined characters in "LeetcodeHelpsMeLearn".
We then place spaces before those characters.
Example 2:

Input: s = "icodeinpython", spaces = [1,5,7,9]
Output: "i code in py thon"
Explanation:
The indices 1, 5, 7, and 9 correspond to the underlined characters in "icodeinpython".
We then place spaces before those characters.
Example 3:

Input: s = "spacing", spaces = [0,1,2,3,4,5,6]
Output: " s p a c i n g"
Explanation:
We are also able to place spaces before the first character of the string.
 

Constraints:

1 <= s.length <= 3 * 105
s consists only of lowercase and uppercase English letters.
1 <= spaces.length <= 3 * 105
0 <= spaces[i] <= s.length - 1
All the values of spaces are strictly increasing.

class Solution
{
public:
    string addSpaces(string s, vector<int> &spaces)
    {
        unordered_set<int> st(spaces.begin(), spaces.end());
        int n = s.length();
        string ans = "";
        ans.reserve(n + spaces.size());
        for(int i = 0; i < n; i++)
        {
            if(st.find(i) == st.end()) { ans.push_back(s[i]); continue; }
            ans.push_back(' ');
            ans.push_back(s[i]);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/number-of-smooth-descent-periods-of-a-stock/

You are given an integer array prices representing the daily price history of a stock, where prices[i] is the stock price on the ith day.

A smooth descent period of a stock consists of one or more contiguous days such that the price on each day is lower than the price on the preceding day by exactly 1. 
The first day of the period is exempted from this rule.

Return the number of smooth descent periods.

 

Example 1:

Input: prices = [3,2,1,4]
Output: 7
Explanation: There are 7 smooth descent periods:
[3], [2], [1], [4], [3,2], [2,1], and [3,2,1]
Note that a period with one day is a smooth descent period by the definition.
Example 2:

Input: prices = [8,6,7,7]
Output: 4
Explanation: There are 4 smooth descent periods: [8], [6], [7], and [7]
Note that [8,6] is not a smooth descent period as 8 - 6 ≠ 1.
Example 3:

Input: prices = [1]
Output: 1
Explanation: There is 1 smooth descent period: [1]
 

Constraints:

1 <= prices.length <= 105
1 <= prices[i] <= 105

class Solution
{
public:
    long long getDescentPeriods(vector<int> &prices)
    {
        int n = prices.size();
        long long ans = 1, cnt = 1;
        for(int i = 1; i < n; ++i)
        {
            if(prices[i - 1] - prices[i] == 1)
            {
                ++cnt;
            }
            else
            {
                cnt = 1;
            }
            ans += cnt;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/minimum-operations-to-make-the-array-k-increasing/

You are given a 0-indexed array arr consisting of n positive integers, and a positive integer k.

The array arr is called K-increasing if arr[i-k] <= arr[i] holds for every index i, where k <= i <= n-1.

For example, arr = [4, 1, 5, 2, 6, 2] is K-increasing for k = 2 because:
arr[0] <= arr[2] (4 <= 5)
arr[1] <= arr[3] (1 <= 2)
arr[2] <= arr[4] (5 <= 6)
arr[3] <= arr[5] (2 <= 2)
However, the same arr is not K-increasing for k = 1 (because arr[0] > arr[1]) or k = 3 (because arr[0] > arr[3]).
In one operation, you can choose an index i and change arr[i] into any positive integer.

Return the minimum number of operations required to make the array K-increasing for the given k.

 

Example 1:

Input: arr = [5,4,3,2,1], k = 1
Output: 4
Explanation:
For k = 1, the resultant array has to be non-decreasing.
Some of the K-increasing arrays that can be formed are [5,6,7,8,9], [1,1,1,1,1], [2,2,3,4,4]. All of them require 4 operations.
It is suboptimal to change the array to, for example, [6,7,8,9,10] because it would take 5 operations.
It can be shown that we cannot make the array K-increasing in less than 4 operations.
Example 2:

Input: arr = [4,1,5,2,6,2], k = 2
Output: 0
Explanation:
This is the same example as the one in the problem description.
Here, for every index i where 2 <= i <= 5, arr[i-2] <= arr[i].
Since the given array is already K-increasing, we do not need to perform any operations.
Example 3:

Input: arr = [4,1,5,2,6,2], k = 3
Output: 2
Explanation:
Indices 3 and 5 are the only ones not satisfying arr[i-3] <= arr[i] for 3 <= i <= 5.
One of the ways we can make the array K-increasing is by changing arr[3] to 4 and arr[5] to 5.
The array will now be [4,1,5,4,6,5].
Note that there can be other ways to make the array K-increasing, but none of them require less than 2 operations.
 

Constraints:

1 <= arr.length <= 105
1 <= arr[i], k <= arr.length

class Solution
{
public:
    int n;
    vector<int> LIS;

    int kIncreasing(vector<int> &arr, int k)
    {
        n = arr.size();
        LIS.reserve(1000);
        int res = 0;
        for (int i = 0; i < k; ++i)
        {
            res += modify(arr, i, k);
        }
        return res;
    }

    int modify(vector<int> &arr, int pos, int k)
    {
        int cnt = 0;
        LIS.clear();
        while (pos < n)
        {
            auto itr = upper_bound(LIS.begin(), LIS.end(), arr[pos]);
            if (itr == LIS.end())
            {
                LIS.push_back(arr[pos]);
            }
            else
            {
                *itr = arr[pos];
            }
            ++cnt;
            pos += k;
        }
        return cnt - LIS.size();
    }
};


// Source https://leetcode.com/problems/maximum-number-of-words-found-in-sentences/

A sentence is a list of words that are separated by a single space with no leading or trailing spaces.

You are given an array of strings sentences, where each sentences[i] represents a single sentence.

Return the maximum number of words that appear in a single sentence.

 

Example 1:

Input: sentences = ["alice and bob love leetcode", "i think so too", "this is great thanks very much"]
Output: 6
Explanation: 
- The first sentence, "alice and bob love leetcode", has 5 words in total.
- The second sentence, "i think so too", has 4 words in total.
- The third sentence, "this is great thanks very much", has 6 words in total.
Thus, the maximum number of words in a single sentence comes from the third sentence, which has 6 words.
Example 2:

Input: sentences = ["please wait", "continue to fight", "continue to win"]
Output: 3
Explanation: It is possible that multiple sentences contain the same number of words. 
In this example, the second and third sentences (underlined) have the same number of words.
 

Constraints:

1 <= sentences.length <= 100
1 <= sentences[i].length <= 100
sentences[i] consists only of lowercase English letters and ' ' only.
sentences[i] does not have leading or trailing spaces.
All the words in sentences[i] are separated by a single space.

class Solution
{
public:
    int mostWordsFound(vector<string> &sentences)
    {
        int ans = 0;
        for (auto &sentence : sentences)
        {
            stringstream ss(sentence);
            string t;
            int count = 0;
            while (ss >> t) ++count;
            ans = max(ans, count);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/find-all-possible-recipes-from-given-supplies/

You have information about n different recipes. You are given a string array recipes and a 2D string array ingredients. 
The ith recipe has the name recipes[i], and you can create it if you have all the needed ingredients from ingredients[i]. 
Ingredients to a recipe may need to be created from other recipes, i.e., ingredients[i] may contain a string that is in recipes.

You are also given a string array supplies containing all the ingredients that you initially have, and you have an infinite supply of all of them.

Return a list of all the recipes that you can create. You may return the answer in any order.

Note that two recipes may contain each other in their ingredients.

 

Example 1:

Input: recipes = ["bread"], ingredients = [["yeast","flour"]], supplies = ["yeast","flour","corn"]
Output: ["bread"]
Explanation:
We can create "bread" since we have the ingredients "yeast" and "flour".
Example 2:

Input: recipes = ["bread","sandwich"], ingredients = [["yeast","flour"],["bread","meat"]], supplies = ["yeast","flour","meat"]
Output: ["bread","sandwich"]
Explanation:
We can create "bread" since we have the ingredients "yeast" and "flour".
We can create "sandwich" since we have the ingredient "meat" and can create the ingredient "bread".
Example 3:

Input: recipes = ["bread","sandwich","burger"], ingredients = [["yeast","flour"],["bread","meat"],["sandwich","meat","bread"]], supplies = ["yeast","flour","meat"]
Output: ["bread","sandwich","burger"]
Explanation:
We can create "bread" since we have the ingredients "yeast" and "flour".
We can create "sandwich" since we have the ingredient "meat" and can create the ingredient "bread".
We can create "burger" since we have the ingredient "meat" and can create the ingredients "bread" and "sandwich".
 

Constraints:

n == recipes.length == ingredients.length
1 <= n <= 100
1 <= ingredients[i].length, supplies.length <= 100
1 <= recipes[i].length, ingredients[i][j].length, supplies[k].length <= 10
recipes[i], ingredients[i][j], and supplies[k] consist only of lowercase English letters.
All the values of recipes and supplies combined are unique.
Each ingredients[i] does not contain any duplicate values.

class Solution
{
public:
    unordered_map<string, vector<string>>adj;
    unordered_map<string, int> indegree;
    unordered_set<string> st;

    vector<string> findAllRecipes(vector<string> &recipes, vector<vector<string>> &ingredients, vector<string> &supplies)
    {
        int n = recipes.size();
        for (auto &x : supplies) st.insert(x);
        for (auto &x : recipes)
        {
            indegree[x] = 0;
        }
        for (int i = 0; i < n; ++i)
        {
            string u = recipes[i];
            int m = ingredients[i].size();
            for (int j = 0; j < m; ++j)
            {
                string v = ingredients[i][j];
                if(st.find(v) == st.end())
                {
                    adj[v].push_back(u);
                    indegree[u]++;
                }
            }
        }
        queue<string> q;
        for(auto &x : recipes)
        {
            if(indegree[x] == 0)
                q.push(x);
        }
        vector<string> ans;
        while(!q.empty())
        {
            string s = q.front();
            q.pop();
            ans.push_back(s);
            for(auto &u : adj[s])
            {
                if(--indegree[u] == 0)
                    q.push(u);
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/check-if-a-parentheses-string-can-be-valid/

A parentheses string is a non-empty string consisting only of '(' and ')'. It is valid if any of the following conditions is true:

It is ().
It can be written as AB (A concatenated with B), where A and B are valid parentheses strings.
It can be written as (A), where A is a valid parentheses string.
You are given a parentheses string s and a string locked, both of length n. locked is a binary string consisting only of '0's and '1's. For each index i of locked,

If locked[i] is '1', you cannot change s[i].
But if locked[i] is '0', you can change s[i] to either '(' or ')'.
Return true if you can make s a valid parentheses string. Otherwise, return false.

 

Example 1:


Input: s = "))()))", locked = "010100"
Output: true
Explanation: locked[1] == '1' and locked[3] == '1', so we cannot change s[1] or s[3].
We change s[0] and s[4] to '(' while leaving s[2] and s[5] unchanged to make s valid.
Example 2:

Input: s = "()()", locked = "0000"
Output: true
Explanation: We do not need to make any changes because s is already valid.
Example 3:

Input: s = ")", locked = "0"
Output: false
Explanation: locked permits us to change s[0]. 
Changing s[0] to either '(' or ')' will not make s valid.
 

Constraints:

n == s.length == locked.length
1 <= n <= 105
s[i] is either '(' or ')'.
locked[i] is either '0' or '1'.

class Solution
{
public:
    bool canBeValid(string s, string locked)
    {
        int unlockedIndexes = 0;
        int lockedStarters = 0;
        int n = s.length();
        if (n % 2 == 1)
        {
            return false;
        }
        for (int i = 0; i < n; i++)
        {
            if (locked[i] == '0')
            {
                unlockedIndexes++;
            }
            else
            {
                if (s[i] == '(')
                {
                    lockedStarters++;
                }
                else if (lockedStarters > 0)
                {
                    lockedStarters--;
                }
                else if (unlockedIndexes > 0)
                {
                    unlockedIndexes--;
                }
                else
                {
                    return false;
                }
            }
        }
        unlockedIndexes = 0;
        int lockedClosers = 0;
        for (int i = n - 1; i >= 0; i--)
        {
            if (locked[i] == '0')
            {
                unlockedIndexes++;
            }
            else
            {
                if (s[i] == ')')
                {
                    lockedClosers++;
                }
                else if (lockedClosers > 0)
                {
                    lockedClosers--;
                }
                else if (unlockedIndexes > 0)
                {
                    unlockedIndexes--;
                }
                else
                {
                    return false;
                }
            }
        }
        return true;
    }
};


// Source https://leetcode.com/problems/abbreviating-the-product-of-a-range/

You are given two positive integers left and right with left <= right. Calculate the product of all integers in the inclusive range [left, right].

Since the product may be very large, you will abbreviate it following these steps:

Count all trailing zeros in the product and remove them. Let us denote this count as C.
For example, there are 3 trailing zeros in 1000, and there are 0 trailing zeros in 546.
Denote the remaining number of digits in the product as d. If d > 10, then express the product as <pre>...<suf> 
where <pre> denotes the first 5 digits of the product, and <suf> denotes the last 5 digits of the product after removing all trailing zeros. 
If d <= 10, we keep it unchanged.
For example, we express 1234567654321 as 12345...54321, but 1234567 is represented as 1234567.
Finally, represent the product as a string "<pre>...<suf>eC".
For example, 12345678987600000 will be represented as "12345...89876e5".
Return a string denoting the abbreviated product of all integers in the inclusive range [left, right].

 

Example 1:

Input: left = 1, right = 4
Output: "24e0"
Explanation: The product is 1 × 2 × 3 × 4 = 24.
There are no trailing zeros, so 24 remains the same. The abbreviation will end with "e0".
Since the number of digits is 2, which is less than 10, we do not have to abbreviate it further.
Thus, the final representation is "24e0".
Example 2:

Input: left = 2, right = 11
Output: "399168e2"
Explanation: The product is 39916800.
There are 2 trailing zeros, which we remove to get 399168. The abbreviation will end with "e2".
The number of digits after removing the trailing zeros is 6, so we do not abbreviate it further.
Hence, the abbreviated product is "399168e2".
Example 3:

Input: left = 371, right = 375
Output: "7219856259e3"
Explanation: The product is 7219856259000.
 

Constraints:

1 <= left <= right <= 104


First, after any multiplication, we get rid of trailing zeros, counting them in c.

Now, how to find out the last 5 digits of the product? For that, we multiply numbers, remove trailing zeros, and keep last n digits using the modulo operation. Simple.

What about the first 5 digits? We could use double, multiply numbers, and divide the result by 10 until we only have 5 digits before the decimal point. 
The precision seems to be sufficient enough.

两个数相乘后的积最高的5位可以这样得到，先取一个数的最高5位乘以另一个数，得到的积再除以若干次10，最后的积中保留最高的5位
两个数相乘后的积最低的5位可以这样得到，先取一个数的最低5位乘以另一个数，得到的积再进行模运算，余数中保留最低的5位

class Solution
{
public:
    string abbreviateProduct(int left, int right)
    {
        long long suff = 1, c = 0, total = 0, max_suff = 100000000000;
        double pref = 1.0;
        for (int i = left; i <= right; ++i)
        {
            pref *= i;
            suff *= i;
            while (pref >= 100000)
            {
                pref /= 10;
                total = total == 0 ? 6 : total + 1;
            }
            while (suff % 10 == 0)
            {
                suff /= 10;
                ++c;
            }
            suff %= max_suff;
        }
        string s = to_string(suff);
        string p = to_string((int)pref);
        // 如果total为0，表示Product从来没有大于等于过100000
        if (total <= c)
        {
            return s + "e" + to_string(c);
        }
        else if (total - c <= 5)
        {
            return p.substr(0, (total - c)) + "e" + to_string(c);
        }
        else if (total - c <= 10)
        {
            return p + s.substr(s.size() - (total - c - 5)) + "e" + to_string(c);
        }
        else
        {
            return p + "..." + s.substr(s.size() - 5) + "e" + to_string(c);
        }
    }
};


// Source https://leetcode.com/problems/a-number-after-a-double-reversal/

Reversing an integer means to reverse all its digits.

For example, reversing 2021 gives 1202. Reversing 12300 gives 321 as the leading zeros are not retained.
Given an integer num, reverse num to get reversed1, then reverse reversed1 to get reversed2. Return true if reversed2 equals num. Otherwise return false.

 

Example 1:

Input: num = 526
Output: true
Explanation: Reverse num to get 625, then reverse 625 to get 526, which equals num.
Example 2:

Input: num = 1800
Output: false
Explanation: Reverse num to get 81, then reverse 81 to get 18, which does not equal num.
Example 3:

Input: num = 0
Output: true
Explanation: Reverse num to get 0, then reverse 0 to get 0, which equals num.
 

Constraints:

0 <= num <= 106

class Solution
{
public:
    bool isSameAfterReversals(int num)
    {
        if(num < 10) return true;
        if(num % 10 == 0) return false;
        int rev1 = 0;
        int s1 = num;
        while(s1 > 0)
        {
            rev1 = rev1 * 10 + s1 % 10;
            s1 /= 10;
        }
        int rev2 = 0;
        while(rev1 > 0)
        {
            rev2 = rev2 * 10 + rev1 % 10;
            rev1 /= 10;
        }
        return rev2 == num;
    }
};


// Source https://leetcode.com/problems/execution-of-all-suffix-instructions-staying-in-a-grid/

There is an n x n grid, with the top-left cell at (0, 0) and the bottom-right cell at (n - 1, n - 1). 
You are given the integer n and an integer array startPos where startPos = [startrow, startcol] indicates that a robot is initially at cell (startrow, startcol).

You are also given a 0-indexed string s of length m where s[i] is the ith instruction for the robot: 'L' (move left), 'R' (move right), 'U' (move up), and 'D' (move down).

The robot can begin executing from any ith instruction in s. It executes the instructions one by one towards the end of s but it stops if either of these conditions is met:

The next instruction will move the robot off the grid.
There are no more instructions left to execute.
Return an array answer of length m where answer[i] is the number of instructions the robot can execute if the robot begins executing from the ith instruction in s.

 

Example 1:


Input: n = 3, startPos = [0,1], s = "RRDDLU"
Output: [1,5,4,3,1,0]
Explanation: Starting from startPos and beginning execution from the ith instruction:
- 0th: "RRDDLU". Only one instruction "R" can be executed before it moves off the grid.
- 1st:  "RDDLU". All five instructions can be executed while it stays in the grid and ends at (1, 1).
- 2nd:   "DDLU". All four instructions can be executed while it stays in the grid and ends at (1, 0).
- 3rd:    "DLU". All three instructions can be executed while it stays in the grid and ends at (0, 0).
- 4th:     "LU". Only one instruction "L" can be executed before it moves off the grid.
- 5th:      "U". If moving up, it would move off the grid.
Example 2:


Input: n = 2, startPos = [1,1], s = "LURD"
Output: [4,1,0,0]
Explanation:
- 0th: "LURD".
- 1st:  "URD".
- 2nd:   "RD".
- 3rd:    "D".
Example 3:


Input: n = 1, startPos = [0,0], s = "LRUD"
Output: [0,0,0,0]
Explanation: No matter which instruction the robot begins execution from, it would move off the grid.
 

Constraints:

m == s.length
1 <= n, m <= 500
startPos.length == 2
0 <= startrow, startcol < n
s consists of 'L', 'R', 'U', and 'D'.

class Solution
{
public:
    vector<int> executeInstructions(int n, vector<int> &startPos, string s)
    {
        int m =  s.size();
        vector<int> res;
        res.reserve(m);
        for(int j = 0; j < m; j++)
        {
            int currRow = startPos[0];
            int currCol = startPos[1];
            int count = 0;
            for(int i = j; i < m; i++)
            {
                if(s[i] == 'R') currCol++;
                if(s[i] == 'D') currRow++;
                if(s[i] == 'L') currCol--;
                if(s[i] == 'U') currRow--;
                if(currRow < 0 || currRow >= n || currCol < 0 || currCol >= n) break;
                count++;
            }
            res.push_back(count);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/intervals-between-identical-elements/

You are given a 0-indexed array of n integers arr.

The interval between two elements in arr is defined as the absolute difference between their indices. More formally, the interval between arr[i] and arr[j] is |i - j|.

Return an array intervals of length n where intervals[i] is the sum of intervals between arr[i] and each element in arr with the same value as arr[i].

Note: |x| is the absolute value of x.

 

Example 1:

Input: arr = [2,1,3,1,2,3,3]
Output: [4,2,7,2,4,4,5]
Explanation:
- Index 0: Another 2 is found at index 4. |0 - 4| = 4
- Index 1: Another 1 is found at index 3. |1 - 3| = 2
- Index 2: Two more 3s are found at indices 5 and 6. |2 - 5| + |2 - 6| = 7
- Index 3: Another 1 is found at index 1. |3 - 1| = 2
- Index 4: Another 2 is found at index 0. |4 - 0| = 4
- Index 5: Two more 3s are found at indices 2 and 6. |5 - 2| + |5 - 6| = 4
- Index 6: Two more 3s are found at indices 2 and 5. |6 - 2| + |6 - 5| = 5
Example 2:

Input: arr = [10,5,10,10]
Output: [5,0,3,4]
Explanation:
- Index 0: Two more 10s are found at indices 2 and 3. |0 - 2| + |0 - 3| = 5
- Index 1: There is only one 5 in the array, so its sum of intervals to identical elements is 0.
- Index 2: Two more 10s are found at indices 0 and 3. |2 - 0| + |2 - 3| = 3
- Index 3: Two more 10s are found at indices 0 and 2. |3 - 0| + |3 - 2| = 4
 

Constraints:

n == arr.length
1 <= n <= 105
1 <= arr[i] <= 105

class Solution
{
public:
    vector<long long> getDistances(vector<int> &arr)
    {
        int n = arr.size();
        vector <long long> res(n, 0);
        unordered_map <int, pair<int, long long>> left, right;
        for (int i = 0; i < n; i++)
        {
            long long sum = left[arr[i]].second;
            long long count = left[arr[i]].first;
            res[i] = count * i - sum;
            left[arr[i]].second += i;
            left[arr[i]].first++;
        }
        for (int i = n - 1; i >= 0; i--)
        {
            long long sum = right[arr[i]].second;
            long long count = right[arr[i]].first;
            res[i] += sum - (i * count);
            right[arr[i]].second += i;
            right[arr[i]].first++;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/recover-the-original-array/

Alice had a 0-indexed array arr consisting of n positive integers. She chose an arbitrary positive integer k and created two new 0-indexed integer arrays lower and higher in the following manner:

lower[i] = arr[i] - k, for every index i where 0 <= i < n
higher[i] = arr[i] + k, for every index i where 0 <= i < n
Unfortunately, Alice lost all three arrays. However, she remembers the integers that were present in the arrays lower and higher, but not the array each integer belonged to. 
Help Alice and recover the original array.

Given an array nums consisting of 2n integers, where exactly n of the integers were present in lower and the remaining in higher, return the original array arr. 
In case the answer is not unique, return any valid array.

Note: The test cases are generated such that there exists at least one valid array arr.

 

Example 1:

Input: nums = [2,10,6,4,8,12]
Output: [3,7,11]
Explanation:
If arr = [3,7,11] and k = 1, we get lower = [2,6,10] and higher = [4,8,12].
Combining lower and higher gives us [2,6,10,4,8,12], which is a permutation of nums.
Another valid possibility is that arr = [5,7,9] and k = 3. In that case, lower = [2,4,6] and higher = [8,10,12]. 

2 4 6 8 10 12

Example 2:

Input: nums = [1,1,3,3]
Output: [2,2]
Explanation:
If arr = [2,2] and k = 1, we get lower = [1,1] and higher = [3,3].
Combining lower and higher gives us [1,1,3,3], which is equal to nums.
Note that arr cannot be [1,3] because in that case, the only possible way to obtain [1,1,3,3] is with k = 0.
This is invalid since k must be positive.
Example 3:

Input: nums = [5,435]
Output: [220]
Explanation:
The only possible combination is arr = [220] and k = 215. Using them, we get lower = [5] and higher = [435].
 

Constraints:

2 * n == nums.length
1 <= n <= 1000
1 <= nums[i] <= 109
The test cases are generated such that there exists at least one valid array arr.

First sort the nums array, nums[0] belong to low array.
Try every possible diff in array, and diff must be even. k = diff / 2;
Each element in low array (v) should have its equivalent in high arrray (v + k + k).
Maintain a pointer for the last element in low array that haven't found its equalient in high array yet,
1 If pointer is valid and next element's value is pointer's value + k + k, then next element is the in high array. pointer++;
2 Otherwise next element is in low array.

class Solution
{
public:

    vector<int> recoverArray(vector<int> &nums)
    {
        sort(nums.begin(), nums.end());
        int n2 = nums.size();
        int n = n2 / 2;
        int a = nums[0];
        vector<int> v1, v2, ans;
        v1.reserve(n);
        v2.reserve(n);
        ans.reserve(n);
        for (int i = 1; i <= n; i++)
        {
            int k = nums[i] - a;
            if (k % 2 == 1 || k == 0 || nums[i] == nums[i - 1]) continue;
            v1.clear();
            v2.clear();
            v1.push_back(a);
            int x = 0;
            for (int j = 1; j < n2; j++)
            {
                if (x < v1.size() && (nums[j] == v1[x] + k))
                {
                    v2.push_back(nums[j]);
                    x++;
                }
                else  v1.push_back(nums[j]);
                if (v1.size() > n || v2.size() > n) break;
            }
            if (v1.size() != n || v2.size() != n) continue;
            for (int i = 0; i < n; i++) ans.push_back((v1[i] + v2[i]) / 2);
            return ans;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/check-if-all-as-appears-before-all-bs/

Given a string s consisting of only the characters 'a' and 'b', return true if every 'a' appears before every 'b' in the string. Otherwise, return false.

 

Example 1:

Input: s = "aaabbb"
Output: true
Explanation:
The 'a's are at indices 0, 1, and 2, while the 'b's are at indices 3, 4, and 5.
Hence, every 'a' appears before every 'b' and we return true.
Example 2:

Input: s = "abab"
Output: false
Explanation:
There is an 'a' at index 2 and a 'b' at index 1.
Hence, not every 'a' appears before every 'b' and we return false.
Example 3:

Input: s = "bbb"
Output: true
Explanation:
There are no 'a's, hence, every 'a' appears before every 'b' and we return true.
 

Constraints:

1 <= s.length <= 100
s[i] is either 'a' or 'b'.

class Solution
{
public:
    bool checkString(string s)
    {
        int n = s.length();
        bool foundB = false;
        for(int i = 0; i < n; i++)
        {
            if(foundB == true && s[i] == 'a') return false;
            if(s[i] == 'b') foundB = true;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/number-of-laser-beams-in-a-bank/

Anti-theft security devices are activated inside a bank. You are given a 0-indexed binary string array bank representing the floor plan of the bank, 
which is an m x n 2D matrix. bank[i] represents the ith row, consisting of '0's and '1's. '0' means the cell is empty, while'1' means the cell has a security device.

There is one laser beam between any two security devices if both conditions are met:

The two devices are located on two different rows: r1 and r2, where r1 < r2.
For each row i where r1 < i < r2, there are no security devices in the ith row.
Laser beams are independent, i.e., one beam does not interfere nor join with another.

Return the total number of laser beams in the bank.

 

Example 1:


Input: bank = ["011001","000000","010100","001000"]
Output: 8
Explanation: Between each of the following device pairs, there is one beam. In total, there are 8 beams:
 * bank[0][1] -- bank[2][1]
 * bank[0][1] -- bank[2][3]
 * bank[0][2] -- bank[2][1]
 * bank[0][2] -- bank[2][3]
 * bank[0][5] -- bank[2][1]
 * bank[0][5] -- bank[2][3]
 * bank[2][1] -- bank[3][2]
 * bank[2][3] -- bank[3][2]
Note that there is no beam between any device on the 0th row with any on the 3rd row.
This is because the 2nd row contains security devices, which breaks the second condition.
Example 2:


Input: bank = ["000","111","000"]
Output: 0
Explanation: There does not exist two devices located on two different rows.
 

Constraints:

m == bank.length
n == bank[i].length
1 <= m, n <= 500
bank[i][j] is either '0' or '1'.

class Solution
{
public:
    int numberOfBeams(vector<string> &bank)
    {
        int res = 0, prev_cnt = 0;
        for (auto &r : bank)
        {
            int cnt = count(r.begin(), r.end(), '1');
            if (cnt > 0)
            {
                res += prev_cnt * cnt;
                prev_cnt = cnt;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/destroying-asteroids/

You are given an integer mass, which represents the original mass of a planet. You are further given an integer array asteroids, where asteroids[i] is the mass of the ith asteroid.

You can arrange for the planet to collide with the asteroids in any arbitrary order. If the mass of the planet is greater than or equal to the mass of the asteroid, 
the asteroid is destroyed and the planet gains the mass of the asteroid. Otherwise, the planet is destroyed.

Return true if all asteroids can be destroyed. Otherwise, return false.

 

Example 1:

Input: mass = 10, asteroids = [3,9,19,5,21]
Output: true
Explanation: One way to order the asteroids is [9,19,5,3,21]:
- The planet collides with the asteroid with a mass of 9. New planet mass: 10 + 9 = 19
- The planet collides with the asteroid with a mass of 19. New planet mass: 19 + 19 = 38
- The planet collides with the asteroid with a mass of 5. New planet mass: 38 + 5 = 43
- The planet collides with the asteroid with a mass of 3. New planet mass: 43 + 3 = 46
- The planet collides with the asteroid with a mass of 21. New planet mass: 46 + 21 = 67
All asteroids are destroyed.
Example 2:

Input: mass = 5, asteroids = [4,9,23,4]
Output: false
Explanation: 
The planet cannot ever gain enough mass to destroy the asteroid with a mass of 23.
After the planet destroys the other asteroids, it will have a mass of 5 + 4 + 9 + 4 = 22.
This is less than 23, so a collision would not destroy the last asteroid.
 

Constraints:

1 <= mass <= 105
1 <= asteroids.length <= 105
1 <= asteroids[i] <= 105

class Solution
{
public:
    bool asteroidsDestroyed(int mass, vector<int> &asteroids)
    {
        sort(asteroids.begin(), asteroids.end());
        int n = asteroids.size();
        long long sum = mass;
        for(int i = 0; i < n; i++)
        {
            if(sum >= asteroids[i])
            {
                sum += asteroids[i];
            }
            else
            {
                return false;
            }
        }
        return true;
    }
};


// Source https://leetcode.com/problems/maximum-employees-to-be-invited-to-a-meeting/

A company is organizing a meeting and has a list of n employees, waiting to be invited. They have arranged for a large circular table, capable of seating any number of employees.

The employees are numbered from 0 to n - 1. Each employee has a favorite person and they will attend the meeting only if they can sit next to their favorite person at the table. 
The favorite person of an employee is not themself.

Given a 0-indexed integer array favorite, where favorite[i] denotes the favorite person of the ith employee, return the maximum number of employees that can be invited to the meeting.

 

Example 1:


Input: favorite = [2,2,1,2]
Output: 3
Explanation:
The above figure shows how the company can invite employees 0, 1, and 2, and seat them at the round table.
All employees cannot be invited because employee 2 cannot sit beside employees 0, 1, and 3, simultaneously.
Note that the company can also invite employees 1, 2, and 3, and give them their desired seats.
The maximum number of employees that can be invited to the meeting is 3. 
Example 2:

Input: favorite = [1,2,0]
Output: 3
Explanation: 
Each employee is the favorite person of at least one other employee, and the only way the company can invite them is if they invite every employee.
The seating arrangement will be the same as that in the figure given in example 1:
- Employee 0 will sit between employees 2 and 1.
- Employee 1 will sit between employees 0 and 2.
- Employee 2 will sit between employees 1 and 0.
The maximum number of employees that can be invited to the meeting is 3.
Example 3:


Input: favorite = [3,0,1,4,1]
Output: 4
Explanation:
The above figure shows how the company will invite employees 0, 1, 3, and 4, and seat them at the round table.
Employee 2 cannot be invited because the two spots next to their favorite employee 1 are taken.
So the company leaves them out of the meeting.
The maximum number of employees that can be invited to the meeting is 4.
 

Constraints:

n == favorite.length
2 <= n <= 105
0 <= favorite[i] <= n - 1
favorite[i] != i


Each employee has a favorite person and they will attend the meeting only if they can sit next to their favorite person at the table. 
根据 favorite 数组，找出若干个环，组成环的若干个employee一起参加
只有2个employee的环可以各自向两边增加有依赖于这2个employee的其他employee（根据拓扑排序求出长度最大的依赖链）
如果有多个只有2个employee的环，则这些环还可以串起来
a1 b1 c1 employee1 employee2 d1 e1 f1
a2 b2 c2 employee3 employee4 d2 e2 f2
a3 b3 c3 employee5 employee6 d3 e3 f3

employee1 employee2，employee3 employee4，employee5 employee6，3个只有2个employee的环
串起来

table头或尾 a1 b1 c1 employee1 employee2 d1 e1 f1 a2 b2 c2 employee3 employee4 d2 e2 f2 a3 b3 c3 employee5 employee6 d3 e3 f3 table尾或头

class Solution
{
public:

    struct DSU
    {
        int parent[100001];
        int size[100001];

        DSU(int n)
        {
            for(int i = 0; i < n; i++)
            {
                parent[i] = i;
                size[i] = 1;
            }
        }

        int find(int x)
        {
            if(parent[x] != x) parent[x] = find(parent[x]);
            return parent[x];
        }

        bool join(int a, int b)
        {
            int root_a = find(a);
            int root_b = find(b);
            if (root_a == root_b) return false;
            if (size[root_a] > size[root_b])
            {
                parent[root_b] = root_a;
                size[root_a] += size[root_b];
            }
            else
            {
                parent[root_a] = root_b;
                size[root_b] += size[root_a];
            }
            return true;
        }

        int count(int x)
        {
            return size[x];
        }
    };

    int inDegree[100001];
    int ans[100001];

    int maximumInvitations(vector<int>& favorite)
    {
        int n = favorite.size();
        for (int i = 0; i < n; ++i)
        {
            ans[i] = 1;
        }
        for (int i = 0; i < n; ++i)
        {
            inDegree[favorite[i]]++;
        }
        queue<int> q;
        for (int i = 0; i < n; ++i)
        {
            if (inDegree[i] == 0)
            {
                q.push(i);
            }
        }
        while (!q.empty())
        {
            int v = q.front();
            q.pop();
            int c = favorite[v];
            ans[c] = max(ans[c], ans[v] + 1); //largest possible non-cyclic path up to node 'c'
            inDegree[c]--;
            if (inDegree[c] == 0)
            {
                q.push(c);
            }
        }
        DSU dsu(n);
        for (int i = 0; i < n; ++i)
        {
            if (inDegree[i])
                dsu.join(i, favorite[i]);
        }
        int res = 0;
        int joinable = 0;
        for (int i = 0; i < n; ++i)
        {
            if (!inDegree[i]) continue;
            int t = dsu.find(i);
            int len = dsu.count(t);
            if (len == 2)
            {
                int neigh = favorite[i];
                inDegree[neigh]--;
                len = ans[i] + ans[neigh];
                joinable += len;
            }
            else
            {
                res = max(res, len);
            }
        }
        return max(res, joinable);
    }
};


// Source https://leetcode.com/problems/capitalize-the-title/

You are given a string title consisting of one or more words separated by a single space, where each word consists of English letters. 
Capitalize the string by changing the capitalization of each word such that:

If the length of the word is 1 or 2 letters, change all letters to lowercase.
Otherwise, change the first letter to uppercase and the remaining letters to lowercase.
Return the capitalized title.

 

Example 1:

Input: title = "capiTalIze tHe titLe"
Output: "Capitalize The Title"
Explanation:
Since all the words have a length of at least 3, the first letter of each word is uppercase, and the remaining letters are lowercase.
Example 2:

Input: title = "First leTTeR of EACH Word"
Output: "First Letter of Each Word"
Explanation:
The word "of" has length 2, so it is all lowercase.
The remaining words have a length of at least 3, so the first letter of each remaining word is uppercase, and the remaining letters are lowercase.
Example 3:

Input: title = "i lOve leetcode"
Output: "i Love Leetcode"
Explanation:
The word "i" has length 1, so it is lowercase.
The remaining words have a length of at least 3, so the first letter of each remaining word is uppercase, and the remaining letters are lowercase.
 

Constraints:

1 <= title.length <= 100
title consists of words separated by a single space without any leading or trailing spaces.
Each word consists of uppercase and lowercase English letters and is non-empty.

class Solution
{
public:
    string capitalizeTitle(string title)
    {
        stringstream ss(title);
        string t, ans = "";
        while(ss >> t)
        {
            if(t.length() < 3)
            {
                transform(t.begin(), t.end(), t.begin(), ::tolower);
                ans.append(t);
                ans.push_back(' ');
            }
            else
            {
                transform(t.begin(), t.end(), t.begin(), ::tolower);
                t[0] = ::toupper(t[0]);
                ans.append(t);
                ans.push_back(' ');
            }
        }
        ans.pop_back();
        return ans;
    }
};


// Source https://leetcode.com/problems/maximum-twin-sum-of-a-linked-list/

In a linked list of size n, where n is even, the ith node (0-indexed) of the linked list is known as the twin of the (n-1-i)th node, if 0 <= i <= (n / 2) - 1.

For example, if n = 4, then node 0 is the twin of node 3, and node 1 is the twin of node 2. These are the only nodes with twins for n = 4.
The twin sum is defined as the sum of a node and its twin.

Given the head of a linked list with even length, return the maximum twin sum of the linked list.

 

Example 1:


Input: head = [5,4,2,1]
Output: 6
Explanation:
Nodes 0 and 1 are the twins of nodes 3 and 2, respectively. All have twin sum = 6.
There are no other nodes with twins in the linked list.
Thus, the maximum twin sum of the linked list is 6. 
Example 2:


Input: head = [4,2,2,3]
Output: 7
Explanation:
The nodes with twins present in this linked list are:
- Node 0 is the twin of node 3 having a twin sum of 4 + 3 = 7.
- Node 1 is the twin of node 2 having a twin sum of 2 + 2 = 4.
Thus, the maximum twin sum of the linked list is max(7, 4) = 7. 
Example 3:


Input: head = [1,100000]
Output: 100001
Explanation:
There is only one node with a twin in the linked list having twin sum of 1 + 100000 = 100001.
 

Constraints:

The number of nodes in the list is an even integer in the range [2, 105].
1 <= Node.val <= 105

class Solution
{
public:
    int pairSum(ListNode *head)
    {
        vector<int> vec;
        vec.reserve(20000);
        ListNode *curr = head;
        while(curr)
        {
            vec.push_back(curr->val);
            curr = curr->next;
        }
        int res = INT_MIN;
        int n = vec.size();
        for (int i = 0; i < n / 2; ++i)
        {
            res = max(res, vec[i] + vec[n - 1 - i]);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/longest-palindrome-by-concatenating-two-letter-words/

You are given an array of strings words. Each element of words consists of two lowercase English letters.

Create the longest possible palindrome by selecting some elements from words and concatenating them in any order. Each element can be selected at most once.

Return the length of the longest palindrome that you can create. If it is impossible to create any palindrome, return 0.

A palindrome is a string that reads the same forward and backward.

 

Example 1:

Input: words = ["lc","cl","gg"]
Output: 6
Explanation: One longest palindrome is "lc" + "gg" + "cl" = "lcggcl", of length 6.
Note that "clgglc" is another longest palindrome that can be created.
Example 2:

Input: words = ["ab","ty","yt","lc","cl","ab"]
Output: 8
Explanation: One longest palindrome is "ty" + "lc" + "cl" + "yt" = "tylcclyt", of length 8.
Note that "lcyttycl" is another longest palindrome that can be created.
Example 3:

Input: words = ["cc","ll","xx"]
Output: 2
Explanation: One longest palindrome is "cc", of length 2.
Note that "ll" is another longest palindrome that can be created, and so is "xx".
 

Constraints:

1 <= words.length <= 105
words[i].length == 2
words[i] consists of lowercase English letters.

class Solution
{
public:

    int longestPalindrome(vector<string>& words)
    {
        unordered_map<string, int> mp;
        for (auto &str : words)
        {
            mp[str]++;
        }
        int ans = 0;
        bool flag = false;
        for (auto &[word, cnt] : mp)
        {
            auto t = word;
            reverse(t.begin(), t.end());
            if (t != word)
            {
                if (mp.count(t)) ans += min(cnt, mp[t]);
            }
            else
            {
                int rem = cnt % 2;
                ans += (cnt - rem);
                if (rem) flag = true;
            }
        }
        return (ans + flag) * 2;
    }
};


// Source https://leetcode.com/problems/stamping-the-grid/

You are given an m x n binary matrix grid where each cell is either 0 (empty) or 1 (occupied).

You are then given stamps of size stampHeight x stampWidth. We want to fit the stamps such that they follow the given restrictions and requirements:

Cover all the empty cells.
Do not cover any of the occupied cells.
We can put as many stamps as we want.
Stamps can overlap with each other.
Stamps are not allowed to be rotated.
Stamps must stay completely inside the grid.
Return true if it is possible to fit the stamps while following the given restrictions and requirements. Otherwise, return false.

 

Example 1:


Input: grid = [[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0]], stampHeight = 4, stampWidth = 3
Output: true
Explanation: We have two overlapping stamps (labeled 1 and 2 in the image) that are able to cover all the empty cells.
Example 2:


Input: grid = [[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]], stampHeight = 2, stampWidth = 2 
Output: false 
Explanation: There is no way to fit the stamps onto all the empty cells without the stamps going outside the grid.
 

Constraints:

m == grid.length
n == grid[r].length
1 <= m, n <= 105
1 <= m * n <= 2 * 105
grid[r][c] is either 0 or 1.
1 <= stampHeight, stampWidth <= 105


col[j] 记录从[i, j] 向上连续为0的个数
row[j] 记录从[i, j] 向左，满足从[k, j] 向上连续为0的个数 >= stampHeight，k >= 0 && k <= i，这样的连续的下标k的个数

class Solution
{
public:
    bool possibleToStamp(vector<vector<int>> &grid, int stampHeight, int stampWidth)
    {
        int n = grid.size();
        int m = grid[0].size();
        vector<int> col(m, 0);
        vector<int> row(m, 0);
        int totalZero = 0;
        int stampedZero = 0;
        for (int i = 0 ; i < n ; i++)
        {
            for (int j = 0; j < m; j++)
            {
                if (grid[i][j] == 1)
                {
                    col[j] = 0;
                    row[j] = 0;
                    continue;
                }
                totalZero++;
                col[j]++;
                if (col[j] < stampHeight)
                {
                    row[j] = 0;
                    continue;
                }
                row[j] = 1 + (j > 0 ? row[j - 1] : 0);
                if (row[j] >= stampWidth)
                {
                    for (int jj = j; jj > j - stampWidth && grid[i][jj] == 0; jj--)
                    {
                        for (int ii = i; ii > i - stampHeight && grid[ii][jj] == 0; ii--)
                        {
                            grid[ii][jj] = 1;
                            stampedZero++;
                        }
                    }
                }
            }
        }
        return totalZero == stampedZero;
    }
};


// Source https://leetcode.com/problems/check-if-every-row-and-column-contains-all-numbers/

An n x n matrix is valid if every row and every column contains all the integers from 1 to n (inclusive).

Given an n x n integer matrix matrix, return true if the matrix is valid. Otherwise, return false.

 

Example 1:


Input: matrix = [[1,2,3],[3,1,2],[2,3,1]]
Output: true
Explanation: In this case, n = 3, and every row and column contains the numbers 1, 2, and 3.
Hence, we return true.
Example 2:


Input: matrix = [[1,1,1],[1,2,3],[1,2,3]]
Output: false
Explanation: In this case, n = 3, but the first row and the first column do not contain the numbers 2 or 3.
Hence, we return false.
 

Constraints:

n == matrix.length == matrix[i].length
1 <= n <= 100
1 <= matrix[i][j] <= n

class Solution
{
public:
    bool checkValid(vector<vector<int>> &matrix)
    {
        int n = matrix.size();
        for(int i = 0; i < n; i++)
        {
            vector<bool> vtr(n + 1, false);
            vector<bool> vtc(n + 1, false);
            for(int j = 0; j < n; j++)
            {
                vtr[matrix[i][j]] = true;
                vtc[matrix[j][i]] = true;
            }
            for(int i = 1; i <= n; i++)
            {
                if(!vtr[i] || !vtc[i]) return false;
            }
        }
        return true;
    }
};


// Source https://leetcode.com/problems/minimum-swaps-to-group-all-1s-together-ii/

A swap is defined as taking two distinct positions in an array and swapping the values in them.

A circular array is defined as an array where we consider the first element and the last element to be adjacent.

Given a binary circular array nums, return the minimum number of swaps required to group all 1's present in the array together at any location.

 

Example 1:

Input: nums = [0,1,0,1,1,0,0]
Output: 1
Explanation: Here are a few of the ways to group all the 1's together:
[0,0,1,1,1,0,0] using 1 swap.
[0,1,1,1,0,0,0] using 1 swap.
[1,1,0,0,0,0,1] using 2 swaps (using the circular property of the array).
There is no way to group all 1's together with 0 swaps.
Thus, the minimum number of swaps required is 1.
Example 2:

Input: nums = [0,1,1,1,0,0,1,1,0]
Output: 2
Explanation: Here are a few of the ways to group all the 1's together:
[1,1,1,0,0,0,0,1,1] using 2 swaps (using the circular property of the array).
[1,1,1,1,1,0,0,0,0] using 2 swaps.
There is no way to group all 1's together with 0 or 1 swaps.
Thus, the minimum number of swaps required is 2.
Example 3:

Input: nums = [1,1,0,0,1]
Output: 0
Explanation: All the 1's are already grouped together due to the circular property of the array.
Thus, the minimum number of swaps required is 0.
 

Constraints:

1 <= nums.length <= 105
nums[i] is either 0 or 1.

class Solution
{
public:
    int minSwaps(vector<int> &arr)
    {
        int n = arr.size();
        int k = 0;
        for(int i = 0; i < n; i++)
        {
            if(arr[i] == 1)
                k++;
        }
        int count = 0;
        for(int i = 0; i < k; i++)
        {
            if(arr[i] == 0)
                count++;
        }
        int res = count;
        int left = 1;
        int right = k;
        while(left < n)
        {
            if(right == n) right = 0;
            if(arr[right] == 0) count++;
            if(arr[left-1] == 0) count--;
            res = min(res, count);
            left++;
            right++;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/count-words-obtained-after-adding-a-letter/

You are given two 0-indexed arrays of strings startWords and targetWords. Each string consists of lowercase English letters only.

For each string in targetWords, check if it is possible to choose a string from startWords and perform a conversion operation on it to be equal to that from targetWords.

The conversion operation is described in the following two steps:

Append any lowercase letter that is not present in the string to its end.
For example, if the string is "abc", the letters 'd', 'e', or 'y' can be added to it, but not 'a'. If 'd' is added, the resulting string will be "abcd".
Rearrange the letters of the new string in any arbitrary order.
For example, "abcd" can be rearranged to "acbd", "bacd", "cbda", and so on. Note that it can also be rearranged to "abcd" itself.
Return the number of strings in targetWords that can be obtained by performing the operations on any string of startWords.

Note that you will only be verifying if the string in targetWords can be obtained from a string in startWords by performing the operations. The strings in startWords do not actually change during this process.

 

Example 1:

Input: startWords = ["ant","act","tack"], targetWords = ["tack","act","acti"]
Output: 2
Explanation:
- In order to form targetWords[0] = "tack", we use startWords[1] = "act", append 'k' to it, and rearrange "actk" to "tack".
- There is no string in startWords that can be used to obtain targetWords[1] = "act".
  Note that "act" does exist in startWords, but we must append one letter to the string before rearranging it.
- In order to form targetWords[2] = "acti", we use startWords[1] = "act", append 'i' to it, and rearrange "acti" to "acti" itself.
Example 2:

Input: startWords = ["ab","a"], targetWords = ["abc","abcd"]
Output: 1
Explanation:
- In order to form targetWords[0] = "abc", we use startWords[0] = "ab", add 'c' to it, and rearrange it to "abc".
- There is no string in startWords that can be used to obtain targetWords[1] = "abcd".
 

Constraints:

1 <= startWords.length, targetWords.length <= 5 * 104
1 <= startWords[i].length, targetWords[j].length <= 26
Each string of startWords and targetWords consists of lowercase English letters only.
No letter occurs more than once in any string of startWords or targetWords.


class Solution
{
public:
    int wordCount(vector<string> &startWords, vector<string> &targetWords)
    {
        unordered_map<int, int> present_mask;
        for(string &s : startWords)
        {
            int mask = 0;
            for(char c : s)
            {
                mask = mask | (1 << (c - 'a'));
            }
            present_mask[mask] = 1;
        }
        int ans = 0;
        for(string &s : targetWords)
        {
            int mask = 0;
            for(char c : s)
            {
                mask = mask | (1 << (c - 'a'));
            }
            bool flag = false;
            for(char c : s)
            {
                if(present_mask[mask ^ (1 << (c - 'a'))] == 1)
                {
                    flag = true;
                    break;
                }
            }
            if (flag) ++ans;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/earliest-possible-day-of-full-bloom/

You have n flower seeds. Every seed must be planted first before it can begin to grow, then bloom. 
Planting a seed takes time and so does the growth of a seed. You are given two 0-indexed integer arrays plantTime and growTime, of length n each:

plantTime[i] is the number of full days it takes you to plant the ith seed. Every day, you can work on planting exactly one seed. 
You do not have to work on planting the same seed on consecutive days, but the planting of a seed is not complete until you have worked plantTime[i] days on planting it in total.
growTime[i] is the number of full days it takes the ith seed to grow after being completely planted. After the last day of its growth, the flower blooms and stays bloomed forever.
From the beginning of day 0, you can plant the seeds in any order.

Return the earliest possible day where all seeds are blooming.

 

Example 1:

Input: plantTime = [1,4,3], growTime = [2,3,1]
Output: 9
Explanation: The grayed out pots represent planting days, colored pots represent growing days, and the flower represents the day it blooms.
One optimal way is:
On day 0, plant the 0th seed. The seed grows for 2 full days and blooms on day 3.
On days 1, 2, 3, and 4, plant the 1st seed. The seed grows for 3 full days and blooms on day 8.
On days 5, 6, and 7, plant the 2nd seed. The seed grows for 1 full day and blooms on day 9.
Thus, on day 9, all the seeds are blooming.
Example 2:


Input: plantTime = [1,2,3,2], growTime = [2,1,2,1]
Output: 9
Explanation: The grayed out pots represent planting days, colored pots represent growing days, and the flower represents the day it blooms.
One optimal way is:
On day 1, plant the 0th seed. The seed grows for 2 full days and blooms on day 4.
On days 0 and 3, plant the 1st seed. The seed grows for 1 full day and blooms on day 5.
On days 2, 4, and 5, plant the 2nd seed. The seed grows for 2 full days and blooms on day 8.
On days 6 and 7, plant the 3rd seed. The seed grows for 1 full day and blooms on day 9.
Thus, on day 9, all the seeds are blooming.
Example 3:

Input: plantTime = [1], growTime = [1]
Output: 2
Explanation: On day 0, plant the 0th seed. The seed grows for 1 full day and blooms on day 2.
Thus, on day 2, all the seeds are blooming.
 

Constraints:

n == plantTime.length == growTime.length
1 <= n <= 105
1 <= plantTime[i], growTime[i] <= 104


class Solution
{
public:
    int earliestFullBloom(vector<int> &plantTime, vector<int> &growTime)
    {
        int n = plantTime.size();
        vector<pair<int, int>> grow_plant_times;
        grow_plant_times.reserve(n);
        for(int i = 0; i < n; i++)
        {
            grow_plant_times.push_back({growTime[i], plantTime[i]});
        }
        sort(grow_plant_times.begin(), grow_plant_times.end(), greater<pair<int, int>>());
        int res = INT_MIN;
        int prev_plant_time = 0;
        for(int i = 0; i < n; i++)
        {
            int grow_time = grow_plant_times[i].first;
            int plant_time = grow_plant_times[i].second;
            res = max(res, prev_plant_time + plant_time + grow_time);
            prev_plant_time += plant_time;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/divide-a-string-into-groups-of-size-k/

A string s can be partitioned into groups of size k using the following procedure:

The first group consists of the first k characters of the string, the second group consists of the next k characters of the string, and so on. Each character can be a part of exactly one group.
For the last group, if the string does not have k characters remaining, a character fill is used to complete the group.
Note that the partition is done so that after removing the fill character from the last group (if it exists) and concatenating all the groups in order, the resultant string should be s.

Given the string s, the size of each group k and the character fill, return a string array denoting the composition of every group s has been divided into, using the above procedure.

 

Example 1:

Input: s = "abcdefghi", k = 3, fill = "x"
Output: ["abc","def","ghi"]
Explanation:
The first 3 characters "abc" form the first group.
The next 3 characters "def" form the second group.
The last 3 characters "ghi" form the third group.
Since all groups can be completely filled by characters from the string, we do not need to use fill.
Thus, the groups formed are "abc", "def", and "ghi".
Example 2:

Input: s = "abcdefghij", k = 3, fill = "x"
Output: ["abc","def","ghi","jxx"]
Explanation:
Similar to the previous example, we are forming the first three groups "abc", "def", and "ghi".
For the last group, we can only use the character 'j' from the string. To complete this group, we add 'x' twice.
Thus, the 4 groups formed are "abc", "def", "ghi", and "jxx".
 

Constraints:

1 <= s.length <= 100
s consists of lowercase English letters only.
1 <= k <= 100
fill is a lowercase English letter.

class Solution
{
public:
    vector<string> divideString(string s, int k, char fill)
    {
        int n = s.length();
        int rem = n % k;
        int fillCnt = 0;
        if(rem > 0) fillCnt = k - rem;
        s.append(fillCnt, fill);
        n = s.length();
        vector<string> result;
        result.reserve(n / k);
        for(int i = 0; i < n; i += k)
        {
            result.emplace_back(s.substr(i, k));
        }
        return result;
    }
};


// Source https://leetcode.com/problems/minimum-moves-to-reach-target-score/

You are playing a game with integers. You start with the integer 1 and you want to reach the integer target.

In one move, you can either:

Increment the current integer by one (i.e., x = x + 1).
Double the current integer (i.e., x = 2 * x).
You can use the increment operation any number of times, however, you can only use the double operation at most maxDoubles times.

Given the two integers target and maxDoubles, return the minimum number of moves needed to reach target starting with 1.

 

Example 1:

Input: target = 5, maxDoubles = 0
Output: 4
Explanation: Keep incrementing by 1 until you reach target.
Example 2:

Input: target = 19, maxDoubles = 2
Output: 7
Explanation: Initially, x = 1
Increment 3 times so x = 4
Double once so x = 8
Increment once so x = 9
Double again so x = 18
Increment once so x = 19

19 - 1 = 18
18 / 2 = 9
9 - 1 = 8
8 / 2 = 4
4 - 1 =3
3 - 1 = 2
2 - 1 = 1

Example 3:

Input: target = 10, maxDoubles = 4
Output: 4
Explanation: Initially, x = 1
Increment once so x = 2
Double once so x = 4
Increment once so x = 5
Double again so x = 10
 

Constraints:

1 <= target <= 109
0 <= maxDoubles <= 100

class Solution
{
public:
    int minMoves(int target, int maxDoubles)
    {
        int ans = 0;
        while(target > 1)
        {
            if (target <= 3 || maxDoubles == 0) return ans + target - 1;
            if(target % 2) { ++ans; --target; }
            ++ans;
            target = target / 2;
            --maxDoubles;
        }
        return ans + target - 1;
    }
};


// Source https://leetcode.com/problems/solving-questions-with-brainpower/

You are given a 0-indexed 2D integer array questions where questions[i] = [pointsi, brainpoweri].

The array describes the questions of an exam, where you have to process the questions in order (i.e., starting from question 0) and make a decision whether to solve or skip each question. 
Solving question i will earn you pointsi points but you will be unable to solve each of the next brainpoweri questions. 
If you skip question i, you get to make the decision on the next question.

For example, given questions = [[3, 2], [4, 3], [4, 4], [2, 5]]:
If question 0 is solved, you will earn 3 points but you will be unable to solve questions 1 and 2.
If instead, question 0 is skipped and question 1 is solved, you will earn 4 points but you will be unable to solve questions 2 and 3.
Return the maximum points you can earn for the exam.

 

Example 1:

Input: questions = [[3,2],[4,3],[4,4],[2,5]]
Output: 5
Explanation: The maximum points can be earned by solving questions 0 and 3.
- Solve question 0: Earn 3 points, will be unable to solve the next 2 questions
- Unable to solve questions 1 and 2
- Solve question 3: Earn 2 points
Total points earned: 3 + 2 = 5. There is no other way to earn 5 or more points.
Example 2:

Input: questions = [[1,1],[2,2],[3,3],[4,4],[5,5]]
Output: 7
Explanation: The maximum points can be earned by solving questions 1 and 4.
- Skip question 0
- Solve question 1: Earn 2 points, will be unable to solve the next 2 questions
- Unable to solve questions 2 and 3
- Solve question 4: Earn 5 points
Total points earned: 2 + 5 = 7. There is no other way to earn 7 or more points.
 

Constraints:

1 <= questions.length <= 105
questions[i].length == 2
1 <= pointsi, brainpoweri <= 105

class Solution
{
public:
    int n;
    long long dp[100001];

    long long recur(vector<vector<int>> &questions, int idx)
    {
        if(idx >= n) return 0;
        if(dp[idx] != -1) return dp[idx];
        long long solve = questions[idx][0] + recur(questions, idx + questions[idx][1] + 1);
        long long notSolve = recur(questions, idx + 1);
        return dp[idx] = max(solve, notSolve);
    }

    long long mostPoints(vector<vector<int>> &questions)
    {
        n = questions.size();
        memset(dp, -1, sizeof dp);
        return recur(questions, 0);
    }
};


// Source https://leetcode.com/problems/maximum-running-time-of-n-computers/

You have n computers. You are given the integer n and a 0-indexed integer array batteries where the ith battery can run a computer for batteries[i] minutes. 
You are interested in running all n computers simultaneously using the given batteries.

Initially, you can insert at most one battery into each computer. After that and at any integer time moment, you can remove a battery from a computer and insert another battery any number of times. 
The inserted battery can be a totally new battery or a battery from another computer. You may assume that the removing and inserting processes take no time.

Note that the batteries cannot be recharged.

Return the maximum number of minutes you can run all the n computers simultaneously.

 

Example 1:


Input: n = 2, batteries = [3,3,3]
Output: 4
Explanation: 
Initially, insert battery 0 into the first computer and battery 1 into the second computer.
After two minutes, remove battery 1 from the second computer and insert battery 2 instead. Note that battery 1 can still run for one minute.
At the end of the third minute, battery 0 is drained, and you need to remove it from the first computer and insert battery 1 instead.
By the end of the fourth minute, battery 1 is also drained, and the first computer is no longer running.
We can run the two computers simultaneously for at most 4 minutes, so we return 4.

Example 2:


Input: n = 2, batteries = [1,1,1,1]
Output: 2
Explanation: 
Initially, insert battery 0 into the first computer and battery 2 into the second computer. 
After one minute, battery 0 and battery 2 are drained so you need to remove them and insert battery 1 into the first computer and battery 3 into the second computer. 
After another minute, battery 1 and battery 3 are also drained so the first and second computers are no longer running.
We can run the two computers simultaneously for at most 2 minutes, so we return 2.
 

Constraints:

1 <= n <= batteries.length <= 105
1 <= batteries[i] <= 109


注意，有效的切换电池一定发生在达到 the maximum number of minutes you can run all the n computers simultaneously 之前
若干个电池在达到最大分钟后还有剩余电力，这些剩余电力对于发生在达到最大分钟前的电脑运行没有帮助

batt = 2 2 2 5 5 10 10
n = 5
the maximum number of minutes you can run all the n computers simultaneously 为 5
10 > 5
10 > 5
5 = 5
5 = 5
2 + 2 + 2 > 5

10 > 6
10 > 6
5 < 6
5 < 6
2 + 2 + 2 = 6

10 + 10 + 5 + 5 + 2 + 2 + 2 = 36
36 / 5 = 7

class Solution
{
public:

    bool check(long long mid, int n, vector<int> &batteries, vector<long long> &presum)
    {
        auto itr = lower_bound(batteries.begin(), batteries.end(), (int)mid);
        auto cnt = batteries.end() - itr;
        if(cnt >= n) return true;
        --itr;
        int ind = itr - batteries.begin();
        long long remn = n - cnt;
        return presum[ind] >= remn * mid;
    }

    long long maxRunTime(int n, vector<int> &batteries)
    {
        int m = batteries.size();
        sort(batteries.begin(), batteries.end());
        vector<long long> presum(m);
        presum[0] = batteries[0];
        for(int i = 1; i < m; i++) presum[i] = batteries[i] + presum[i - 1];
        long long l = 0, r = (presum.back() / n) ;
        long long ans = 0;
        while(l <= r)
        {
            long long mid = l + (r - l) / 2;
            if(check(mid, n, batteries, presum))
            {
                ans = mid;
                l = mid + 1;
            }
            else r = mid - 1;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/minimum-cost-of-buying-candies-with-discount/

A shop is selling candies at a discount. For every two candies sold, the shop gives a third candy for free.

The customer can choose any candy to take away for free as long as the cost of the chosen candy is less than or equal to the minimum cost of the two candies bought.

For example, if there are 4 candies with costs 1, 2, 3, and 4, and the customer buys candies with costs 2 and 3, they can take the candy with cost 1 for free, but not the candy with cost 4.
Given a 0-indexed integer array cost, where cost[i] denotes the cost of the ith candy, return the minimum cost of buying all the candies.

 

Example 1:

Input: cost = [1,2,3]
Output: 5
Explanation: We buy the candies with costs 2 and 3, and take the candy with cost 1 for free.
The total cost of buying all candies is 2 + 3 = 5. This is the only way we can buy the candies.
Note that we cannot buy candies with costs 1 and 3, and then take the candy with cost 2 for free.
The cost of the free candy has to be less than or equal to the minimum cost of the purchased candies.
Example 2:

Input: cost = [6,5,7,9,2,2]
Output: 23
Explanation: The way in which we can get the minimum cost is described below:
- Buy candies with costs 9 and 7
- Take the candy with cost 6 for free
- We buy candies with costs 5 and 2
- Take the last remaining candy with cost 2 for free
Hence, the minimum cost to buy all candies is 9 + 7 + 5 + 2 = 23.

Example 3:

Input: cost = [5,5]
Output: 10
Explanation: Since there are only 2 candies, we buy both of them. There is not a third candy we can take for free.
Hence, the minimum cost to buy all candies is 5 + 5 = 10.
 

Constraints:

1 <= cost.length <= 100
1 <= cost[i] <= 100

class Solution
{
public:
    int minimumCost(vector<int> &cost)
    {
        int n = cost.size();
        sort(cost.begin(), cost.end());
        int res = 0;
        int i;
        for (i = n - 1; i >= 2; i -= 3)
        {
            res += (cost[i] + cost[i - 1]);
        }
        for (; i >= 0; --i) res += cost[i];
        return res;
    }
};


// Source https://leetcode.com/problems/count-the-hidden-sequences/

You are given a 0-indexed array of n integers differences, which describes the differences between each pair of consecutive integers of a hidden sequence of length (n + 1). 
More formally, call the hidden sequence hidden, then we have that differences[i] = hidden[i + 1] - hidden[i].

You are further given two integers lower and upper that describe the inclusive range of values [lower, upper] that the hidden sequence can contain.

For example, given differences = [1, -3, 4], lower = 1, upper = 6, the hidden sequence is a sequence of length 4 whose elements are in between 1 and 6 (inclusive).
[3, 4, 1, 5] and [4, 5, 2, 6] are possible hidden sequences.
[5, 6, 3, 7] is not possible since it contains an element greater than 6.
[1, 2, 3, 4] is not possible since the differences are not correct.
Return the number of possible hidden sequences there are. If there are no possible sequences, return 0.

 

Example 1:

Input: differences = [1,-3,4], lower = 1, upper = 6
Output: 2
Explanation: The possible hidden sequences are:
- [3, 4, 1, 5]
- [4, 5, 2, 6]
Thus, we return 2.
Example 2:

Input: differences = [3,-4,5,1,-2], lower = -4, upper = 5
Output: 4
Explanation: The possible hidden sequences are:
- [-3, 0, -4, 1, 2, 0]
- [-2, 1, -3, 2, 3, 1]
- [-1, 2, -2, 3, 4, 2]
- [0, 3, -1, 4, 5, 3]
Thus, we return 4.
Example 3:

Input: differences = [4,-7,2], lower = 3, upper = 6
Output: 0
Explanation: There are no possible hidden sequences. Thus, we return 0.
 

Constraints:

n == differences.length
1 <= n <= 105
-105 <= differences[i] <= 105
-105 <= lower <= upper <= 105


Assuming that the starting point is zero, we determine the range of the hidden sequence ([left, right]).

If this range is smaller than [lower, upper] - we can form a valid sequence. 
The difference between those two ranges tells us how many valid sequences we can form: upper - lower - (right - left) + 1.

right + diff <= upper
diff <= upper - right
left + diff >= lower
diff >= lower - left

upper - right - lower + left + 1

class Solution
{
public:
    int numberOfArrays(vector<int> &diff, int lower, int upper)
    {
        long long left = 0, right = 0, cur = 0;
        for (int d : diff)
        {
            cur += d;
            left = min(left, cur);
            right = max(right, cur);
        }
        return max(0LL, upper - right - lower + left + 1);
    }
};


// Source https://leetcode.com/problems/k-highest-ranked-items-within-a-price-range/

You are given a 0-indexed 2D integer array grid of size m x n that represents a map of the items in a shop. The integers in the grid represent the following:

0 represents a wall that you cannot pass through.
1 represents an empty cell that you can freely move to and from.
All other positive integers represent the price of an item in that cell. You may also freely move to and from these item cells.
It takes 1 step to travel between adjacent grid cells.

You are also given integer arrays pricing and start where pricing = [low, high] and start = [row, col] indicates that 
you start at the position (row, col) and are interested only in items with a price in the range of [low, high] (inclusive). You are further given an integer k.

You are interested in the positions of the k highest-ranked items whose prices are within the given price range. The rank is determined by the first of these criteria that is different:

Distance, defined as the length of the shortest path from the start (shorter distance has a higher rank).
Price (lower price has a higher rank, but it must be in the price range).
The row number (smaller row number has a higher rank).
The column number (smaller column number has a higher rank).
Return the k highest-ranked items within the price range sorted by their rank (highest to lowest). If there are fewer than k reachable items within the price range, return all of them.

 

Example 1:


Input: grid = [[1,2,0,1],[1,3,0,1],[0,2,5,1]], pricing = [2,5], start = [0,0], k = 3
Output: [[0,1],[1,1],[2,1]]
Explanation: You start at (0,0).
With a price range of [2,5], we can take items from (0,1), (1,1), (2,1) and (2,2).
The ranks of these items are:
- (0,1) with distance 1
- (1,1) with distance 2
- (2,1) with distance 3
- (2,2) with distance 4
Thus, the 3 highest ranked items in the price range are (0,1), (1,1), and (2,1).
Example 2:


Input: grid = [[1,2,0,1],[1,3,3,1],[0,2,5,1]], pricing = [2,3], start = [2,3], k = 2
Output: [[2,1],[1,2]]
Explanation: You start at (2,3).
With a price range of [2,3], we can take items from (0,1), (1,1), (1,2) and (2,1).
The ranks of these items are:
- (2,1) with distance 2, price 2
- (1,2) with distance 2, price 3
- (1,1) with distance 3
- (0,1) with distance 4
Thus, the 2 highest ranked items in the price range are (2,1) and (1,2).
Example 3:


Input: grid = [[1,1,1],[0,0,1],[2,3,4]], pricing = [2,3], start = [0,0], k = 3
Output: [[2,1],[2,0]]
Explanation: You start at (0,0).
With a price range of [2,3], we can take items from (2,0) and (2,1). 
The ranks of these items are: 
- (2,1) with distance 5
- (2,0) with distance 6
Thus, the 2 highest ranked items in the price range are (2,1) and (2,0). 
Note that k = 3 but there are only 2 reachable items within the price range.
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 105
1 <= m * n <= 105
0 <= grid[i][j] <= 105
pricing.length == 2
2 <= low <= high <= 105
start.length == 2
0 <= row <= m - 1
0 <= col <= n - 1
grid[row][col] > 0
1 <= k <= m * n

class Solution
{
public:
    vector<vector<int>> highestRankedKItems(vector<vector<int>> &grid, vector<int> &pricing, vector<int> &start, int k)
    {
        vector<vector<int>> ans;
        int n = grid.size(), m = grid[0].size();
        vector<vector<int>> vis(n, vector<int> (m, 0));
        queue<pair<pair<int, int>, int>> q;
        int dist = 0;
        q.push({{start[0], start[1]}, dist});
        vis[start[0]][start[1]] = 1;
        int dx[] = {0, 1, 0, -1};
        int dy[] = {1, 0, -1, 0};
        while(!q.empty())
        {
            auto p = q.front();
            q.pop();
            int x = p.first.first, y = p.first.second;
            int dist = p.second;
            if(pricing[0] <= grid[x][y] && grid[x][y] <= pricing[1])
            {
                ans.push_back({dist, grid[x][y], x, y});
            }
            for(int i = 0; i < 4; i++)
            {
                int nx = x + dx[i], ny = y + dy[i];
                if(nx >= 0 && nx < n && ny >= 0 && ny < m && grid[nx][ny] > 0 && vis[nx][ny] == 0)
                {
                    q.push({{nx, ny}, dist + 1});
                    vis[nx][ny] = 1;
                }
            }
        }
        sort(ans.begin(), ans.end());
        int len = ans.size();
        int cnt = min(k, len);
        vector<vector<int>> res;
        res.reserve(cnt);
        for(int i = 0; i < cnt; i++)
        {
            res.push_back({ans[i][2], ans[i][3]});
        }
        return res;
    }
};


// Source https://leetcode.com/problems/number-of-ways-to-divide-a-long-corridor/

Along a long library corridor, there is a line of seats and decorative plants. You are given a 0-indexed string corridor of length n consisting of letters 'S' and 'P' 
where each 'S' represents a seat and each 'P' represents a plant.

One room divider has already been installed to the left of index 0, and another to the right of index n - 1. Additional room dividers can be installed. 
For each position between indices i - 1 and i (1 <= i <= n - 1), at most one divider can be installed.

Divide the corridor into non-overlapping sections, where each section has exactly two seats with any number of plants. 
There may be multiple ways to perform the division. Two ways are different if there is a position with a room divider installed in the first way but not in the second way.

Return the number of ways to divide the corridor. Since the answer may be very large, return it modulo 109 + 7. If there is no way, return 0.

 

Example 1:


Input: corridor = "SSPPSPS"
Output: 3
Explanation: There are 3 different ways to divide the corridor.
The black bars in the above image indicate the two room dividers already installed.
Note that in each of the ways, each section has exactly two seats.
Example 2:


Input: corridor = "PPSPSP"
Output: 1
Explanation: There is only 1 way to divide the corridor, by not installing any additional dividers.
Installing any would create some section that does not have exactly two seats.
Example 3:


Input: corridor = "S"
Output: 0
Explanation: There is no way to divide the corridor because there will always be a section that does not have exactly two seats.
 

Constraints:

n == corridor.length
1 <= n <= 105
corridor[i] is either 'S' or 'P'.

class Solution
{
public:
    int numberOfWays(string corridor)
    {
        const int mod = 1e9 + 7;
        int n = corridor.size();
        vector<int> vec;
        vec.reserve(30000);
        for (int i = 0; i < n; i++)
        {
            if (corridor[i] == 'S') vec.push_back(i);
        }
        int seat = vec.size();
        if (seat == 0)
        {
            return 0;
        }
        if (seat % 2 != 0)
        {
            return 0;
        }
        if (seat == 2) return 1;
        long total = 1;
        for (int i = 2; i <= seat - 2; i += 2)
        {
            long diff = vec[i] - vec[i - 1];
            total *= diff;
            total %= mod;
        }
        return total;
    }
};


// Source https://leetcode.com/problems/count-elements-with-strictly-smaller-and-greater-elements/

Given an integer array nums, return the number of elements that have both a strictly smaller and a strictly greater element appear in nums.

 

Example 1:

Input: nums = [11,7,2,15]
Output: 2
Explanation: The element 7 has the element 2 strictly smaller than it and the element 11 strictly greater than it.
Element 11 has element 7 strictly smaller than it and element 15 strictly greater than it.
In total there are 2 elements having both a strictly smaller and a strictly greater element appear in nums.
Example 2:

Input: nums = [-3,3,3,90]
Output: 2
Explanation: The element 3 has the element -3 strictly smaller than it and the element 90 strictly greater than it.
Since there are two elements with the value 3, in total there are 2 elements having both a strictly smaller and a strictly greater element appear in nums.
 

Constraints:

1 <= nums.length <= 100
-105 <= nums[i] <= 105

class Solution
{
public:
    int countElements(vector<int> &nums)
    {
        int mxVal = INT_MIN, mnVal = INT_MAX;
        for (auto val : nums)
        {
            mxVal = max(mxVal, val);
            mnVal = min(mnVal, val);
        }
        int res = 0;
        for (auto val : nums)
        {
            if (val == mxVal || val == mnVal) continue;
            ++res;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/rearrange-array-elements-by-sign/

You are given a 0-indexed integer array nums of even length consisting of an equal number of positive and negative integers.

You should rearrange the elements of nums such that the modified array follows the given conditions:

Every consecutive pair of integers have opposite signs.
For all integers with the same sign, the order in which they were present in nums is preserved.
The rearranged array begins with a positive integer.
Return the modified array after rearranging the elements to satisfy the aforementioned conditions.

 

Example 1:

Input: nums = [3,1,-2,-5,2,-4]
Output: [3,-2,1,-5,2,-4]
Explanation:
The positive integers in nums are [3,1,2]. The negative integers are [-2,-5,-4].
The only possible way to rearrange them such that they satisfy all conditions is [3,-2,1,-5,2,-4].
Other ways such as [1,-2,2,-5,3,-4], [3,1,2,-2,-5,-4], [-2,3,-5,1,-4,2] are incorrect because they do not satisfy one or more conditions.  
Example 2:

Input: nums = [-1,1]
Output: [1,-1]
Explanation:
1 is the only positive integer and -1 the only negative integer in nums.
So nums is rearranged to [1,-1].
 

Constraints:

2 <= nums.length <= 2 * 105
nums.length is even
1 <= |nums[i]| <= 105
nums consists of equal number of positive and negative integers.

class Solution
{
public:
    vector<int> rearrangeArray(vector<int> &nums)
    {
        int n = nums.size();
        vector<int>res(n);
        int even = 0, odd = 1;
        for(int i = 0; i < n; i++)
        {
            if(nums[i] >= 0)
            {
                res[even] = nums[i];
                even = even + 2;
            }
            else
            {
                res[odd] = nums[i];
                odd = odd + 2;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/find-all-lonely-numbers-in-the-array/

You are given an integer array nums. A number x is lonely when it appears only once, and no adjacent numbers (i.e. x + 1 and x - 1) appear in the array.

Return all lonely numbers in nums. You may return the answer in any order.

 

Example 1:

Input: nums = [10,6,5,8]
Output: [10,8]
Explanation: 
- 10 is a lonely number since it appears exactly once and 9 and 11 does not appear in nums.
- 8 is a lonely number since it appears exactly once and 7 and 9 does not appear in nums.
- 5 is not a lonely number since 6 appears in nums and vice versa.
Hence, the lonely numbers in nums are [10, 8].
Note that [8, 10] may also be returned.
Example 2:

Input: nums = [1,3,5,3]
Output: [1,5]
Explanation: 
- 1 is a lonely number since it appears exactly once and 0 and 2 does not appear in nums.
- 5 is a lonely number since it appears exactly once and 4 and 6 does not appear in nums.
- 3 is not a lonely number since it appears twice.
Hence, the lonely numbers in nums are [1, 5].
Note that [5, 1] may also be returned.
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 106

class Solution
{
public:
    vector<int> findLonely(vector<int> &nums)
    {
        unordered_map<int, int> mp;
        for (int val : nums) mp[val]++;
        vector<int> res;
        res.reserve(10000);
        for (auto [val, cnt] : mp)
        {
            if (cnt == 1 && mp.count(val + 1) == 0 && mp.count(val - 1) == 0)
                res.push_back(val);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/maximum-good-people-based-on-statements/

There are two types of persons:

The good person: The person who always tells the truth.
The bad person: The person who might tell the truth and might lie.
You are given a 0-indexed 2D integer array statements of size n x n that represents the statements made by n people about each other. 
More specifically, statements[i][j] could be one of the following:

0 which represents a statement made by person i that person j is a bad person.
1 which represents a statement made by person i that person j is a good person.
2 represents that no statement is made by person i about person j.
Additionally, no person ever makes a statement about themselves. Formally, we have that statements[i][i] = 2 for all 0 <= i < n.

Return the maximum number of people who can be good based on the statements made by the n people.

 

Example 1:


Input: statements = [[2,1,2],[1,2,2],[2,0,2]]
Output: 2
Explanation: Each person makes a single statement.
- Person 0 states that person 1 is good.
- Person 1 states that person 0 is good.
- Person 2 states that person 1 is bad.
Let's take person 2 as the key.
- Assuming that person 2 is a good person:
    - Based on the statement made by person 2, person 1 is a bad person.
    - Now we know for sure that person 1 is bad and person 2 is good.
    - Based on the statement made by person 1, and since person 1 is bad, they could be:
        - telling the truth. There will be a contradiction in this case and this assumption is invalid.
        - lying. In this case, person 0 is also a bad person and lied in their statement.
    - Following that person 2 is a good person, there will be only one good person in the group.
- Assuming that person 2 is a bad person:
    - Based on the statement made by person 2, and since person 2 is bad, they could be:
        - telling the truth. Following this scenario, person 0 and 1 are both bad as explained before.
            - Following that person 2 is bad but told the truth, there will be no good persons in the group.
        - lying. In this case person 1 is a good person.
            - Since person 1 is a good person, person 0 is also a good person.
            - Following that person 2 is bad and lied, there will be two good persons in the group.
We can see that at most 2 persons are good in the best case, so we return 2.
Note that there is more than one way to arrive at this conclusion.
Example 2:


Input: statements = [[2,0],[0,2]]
Output: 1
Explanation: Each person makes a single statement.
- Person 0 states that person 1 is bad.
- Person 1 states that person 0 is bad.
Let's take person 0 as the key.
- Assuming that person 0 is a good person:
    - Based on the statement made by person 0, person 1 is a bad person and was lying.
    - Following that person 0 is a good person, there will be only one good person in the group.
- Assuming that person 0 is a bad person:
    - Based on the statement made by person 0, and since person 0 is bad, they could be:
        - telling the truth. Following this scenario, person 0 and 1 are both bad.
            - Following that person 0 is bad but told the truth, there will be no good persons in the group.
        - lying. In this case person 1 is a good person.
            - Following that person 0 is bad and lied, there will be only one good person in the group.
We can see that at most, one person is good in the best case, so we return 1.
Note that there is more than one way to arrive at this conclusion.
 

Constraints:

n == statements.length == statements[i].length
2 <= n <= 15
statements[i][j] is either 0, 1, or 2.
statements[i][i] == 2

class Solution
{
public:
    int n;
    int result;

    int maximumGood(vector<vector<int>> &statements)
    {
        n = statements.size();
        result = 0;
        string cur = "";
        cur.reserve(n);
        dfs(statements, cur, 0, 0);
        return result;
    }

    void dfs(vector<vector<int>> &statements, string &cur, int index, int goodPersonCount)
    {
        if(index == n)
        {
            if(isValid(cur, statements)) result = max(result, goodPersonCount);
            return;
        }
        cur.push_back('1');
        dfs(statements, cur, index + 1, goodPersonCount + 1);
        cur.pop_back();
        cur.push_back('0');
        dfs(statements, cur, index + 1, goodPersonCount);
        cur.pop_back();
    }

    bool isValid(string &cur, vector<vector<int>> &statements)
    {
        for(int i = 0; i < n; i++)
        {
            if(cur[i] == '1')  //We only care about what good people say
            {
                for(int j = 0; j < n; j++)
                {
                    if(statements[i][j] != 2 && statements[i][j] != cur[j] - '0') return false;
                }
            }
        }
        return true;
    }
};


// Source https://leetcode.com/problems/keep-multiplying-found-values-by-two/

You are given an array of integers nums. You are also given an integer original which is the first number that needs to be searched for in nums.

You then do the following steps:

If original is found in nums, multiply it by two (i.e., set original = 2 * original).
Otherwise, stop the process.
Repeat this process with the new number as long as you keep finding the number.
Return the final value of original.

 

Example 1:

Input: nums = [5,3,6,1,12], original = 3
Output: 24
Explanation: 
- 3 is found in nums. 3 is multiplied by 2 to obtain 6.
- 6 is found in nums. 6 is multiplied by 2 to obtain 12.
- 12 is found in nums. 12 is multiplied by 2 to obtain 24.
- 24 is not found in nums. Thus, 24 is returned.
Example 2:

Input: nums = [2,7,9], original = 4
Output: 4
Explanation:
- 4 is not found in nums. Thus, 4 is returned.
 

Constraints:

1 <= nums.length <= 1000
1 <= nums[i], original <= 1000

class Solution
{
public:
    int findFinalValue(vector<int> &nums, int original)
    {
        int arr[1001] = {0};
        for(auto x : nums) arr[x] = 1;
        int ans = original;
        while (ans <= 1000 && arr[ans] > 0)
        {
            ans *= 2;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/all-divisions-with-the-highest-score-of-a-binary-array/

You are given a 0-indexed binary array nums of length n. nums can be divided at index i (where 0 <= i <= n) into two arrays (possibly empty) numsleft and numsright:

numsleft has all the elements of nums between index 0 and i - 1 (inclusive), while numsright has all the elements of nums between index i and n - 1 (inclusive).
If i == 0, numsleft is empty, while numsright has all the elements of nums.
If i == n, numsleft has all the elements of nums, while numsright is empty.
The division score of an index i is the sum of the number of 0's in numsleft and the number of 1's in numsright.

Return all distinct indices that have the highest possible division score. You may return the answer in any order.

 

Example 1:

Input: nums = [0,0,1,0]
Output: [2,4]
Explanation: Division at index
- 0: numsleft is []. numsright is [0,0,1,0]. The score is 0 + 1 = 1.
- 1: numsleft is [0]. numsright is [0,1,0]. The score is 1 + 1 = 2.
- 2: numsleft is [0,0]. numsright is [1,0]. The score is 2 + 1 = 3.
- 3: numsleft is [0,0,1]. numsright is [0]. The score is 2 + 0 = 2.
- 4: numsleft is [0,0,1,0]. numsright is []. The score is 3 + 0 = 3.
Indices 2 and 4 both have the highest possible division score 3.
Note the answer [4,2] would also be accepted.
Example 2:

Input: nums = [0,0,0]
Output: [3]
Explanation: Division at index
- 0: numsleft is []. numsright is [0,0,0]. The score is 0 + 0 = 0.
- 1: numsleft is [0]. numsright is [0,0]. The score is 1 + 0 = 1.
- 2: numsleft is [0,0]. numsright is [0]. The score is 2 + 0 = 2.
- 3: numsleft is [0,0,0]. numsright is []. The score is 3 + 0 = 3.
Only index 3 has the highest possible division score 3.
Example 3:

Input: nums = [1,1]
Output: [0]
Explanation: Division at index
- 0: numsleft is []. numsright is [1,1]. The score is 0 + 2 = 2.
- 1: numsleft is [1]. numsright is [1]. The score is 0 + 1 = 1.
- 2: numsleft is [1,1]. numsright is []. The score is 0 + 0 = 0.
Only index 0 has the highest possible division score 2.
 

Constraints:

n == nums.length
1 <= n <= 105
nums[i] is either 0 or 1.

class Solution
{
public:
    vector<int> maxScoreIndices(vector<int> &nums)
    {
        int n = nums.size();
        vector <int> leftZero(n);
        if (nums[0] == 0) leftZero[0] = 1;
        for (int i = 1; i < n; i++)
        {
            if (nums[i] == 0) leftZero[i] = leftZero[i - 1] + 1;
            else leftZero[i] = leftZero[i - 1];
        }
        vector <int> rightOne(n);
        if (nums[n - 1] == 1) rightOne[n - 1] = 1;
        for (int i = n - 2; i >= 0; i--)
        {
            if (nums[i] == 1) rightOne[i] = rightOne[i + 1] + 1;
            else rightOne[i] = rightOne[i + 1];
        }
        vector<int> ans;
        ans.reserve(n);
        ans.push_back(0);
        int mmax = rightOne[0];
        for(int i = 1; i < n; i++)
        {
            if (leftZero[i - 1] + rightOne[i] > mmax)
            {
                ans.clear();
                ans.push_back(i);
                mmax = leftZero[i - 1] + rightOne[i];
            }
            else if (leftZero[i - 1] + rightOne[i] == mmax)
            {
                ans.push_back(i);
            }
        }
        if (leftZero[n - 1] > mmax)
        {
            ans.clear();
            ans.push_back(n);
        }
        else if (leftZero[n - 1] == mmax)
        {
            ans.push_back(n);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/find-substring-with-given-hash-value/

The hash of a 0-indexed string s of length k, given integers p and m, is computed using the following function:

hash(s, p, m) = (val(s[0]) * p^0 + val(s[1]) * p^1 + ... + val(s[k-1]) * p^k-1) mod m.
Where val(s[i]) represents the index of s[i] in the alphabet from val('a') = 1 to val('z') = 26.

You are given a string s and the integers power, modulo, k, and hashValue. Return sub, the first substring of s of length k such that hash(sub, power, modulo) == hashValue.

The test cases will be generated such that an answer always exists.

A substring is a contiguous non-empty sequence of characters within a string.

 

Example 1:

Input: s = "leetcode", power = 7, modulo = 20, k = 2, hashValue = 0
Output: "ee"
Explanation: The hash of "ee" can be computed to be hash("ee", 7, 20) = (5 * 1 + 5 * 7) mod 20 = 40 mod 20 = 0. 
"ee" is the first substring of length 2 with hashValue 0. Hence, we return "ee".
Example 2:

Input: s = "fbxzaad", power = 31, modulo = 100, k = 3, hashValue = 32
Output: "fbx"
Explanation: The hash of "fbx" can be computed to be hash("fbx", 31, 100) = (6 * 1 + 2 * 31 + 24 * 312) mod 100 = 23132 mod 100 = 32. 
The hash of "bxz" can be computed to be hash("bxz", 31, 100) = (2 * 1 + 24 * 31 + 26 * 312) mod 100 = 25732 mod 100 = 32. 
"fbx" is the first substring of length 3 with hashValue 32. Hence, we return "fbx".
Note that "bxz" also has a hash of 32 but it appears later than "fbx".
 

Constraints:

1 <= k <= s.length <= 2 * 104
1 <= power, modulo <= 109
0 <= hashValue < modulo
s consists of lowercase English letters only.
The test cases are generated such that an answer always exists.

class Solution
{
public:

    string subStrHash(string s, int power, int modulo, int k, int hashValue)
    {
        int n = s.length();
        long cval = 0, pval = 1;
        for (int i = n - k; i < n; ++i)
        {
            cval = (cval + ((s[i] - 'a') + 1) * pval) % modulo;
            pval = (pval * power) % modulo;
        }
        int start;
        if (cval == hashValue)
        {
            start = n - k;
        }
        for (int i = n - k - 1, j = n - 1; i >= 0; --i, --j)
        {
            cval = ((cval * power + ((s[i] - 'a') + 1)) % modulo - (((s[j] - 'a') + 1) * pval) % modulo + modulo) % modulo;
            if (cval == hashValue)
            {
                start = i;
            }
        }
        return s.substr(start, k);
    }
};


// Source https://leetcode.com/problems/groups-of-strings/

You are given a 0-indexed array of strings words. Each string consists of lowercase English letters only. No letter occurs more than once in any string of words.

Two strings s1 and s2 are said to be connected if the set of letters of s2 can be obtained from the set of letters of s1 by any one of the following operations:

Adding exactly one letter to the set of the letters of s1.
Deleting exactly one letter from the set of the letters of s1.
Replacing exactly one letter from the set of the letters of s1 with any letter, including itself.
The array words can be divided into one or more non-intersecting groups. A string belongs to a group if any one of the following is true:

It is connected to at least one other string of the group.
It is the only string present in the group.
Note that the strings in words should be grouped in such a manner that a string belonging to a group cannot be connected to a string present in any other group. 
It can be proved that such an arrangement is always unique.

Return an array ans of size 2 where:

ans[0] is the maximum number of groups words can be divided into, and
ans[1] is the size of the largest group.
 

Example 1:

Input: words = ["a","b","ab","cde"]
Output: [2,3]
Explanation:
- words[0] can be used to obtain words[1] (by replacing 'a' with 'b'), and words[2] (by adding 'b'). So words[0] is connected to words[1] and words[2].
- words[1] can be used to obtain words[0] (by replacing 'b' with 'a'), and words[2] (by adding 'a'). So words[1] is connected to words[0] and words[2].
- words[2] can be used to obtain words[0] (by deleting 'b'), and words[1] (by deleting 'a'). So words[2] is connected to words[0] and words[1].
- words[3] is not connected to any string in words.
Thus, words can be divided into 2 groups ["a","b","ab"] and ["cde"]. The size of the largest group is 3.  
Example 2:

Input: words = ["a","ab","abc"]
Output: [1,3]
Explanation:
- words[0] is connected to words[1].
- words[1] is connected to words[0] and words[2].
- words[2] is connected to words[1].
Since all strings are connected to each other, they should be grouped together.
Thus, the size of the largest group is 3.
 

Constraints:

1 <= words.length <= 2 * 104
1 <= words[i].length <= 26
words[i] consists of lowercase English letters only.
No letter occurs more than once in words[i].

class Solution
{
public:
    unordered_map<int, int> parent;
    unordered_map<int, int> count;

    int quickFind(int x)
    {
        if(parent[x] == -1) return x;
        else return parent[x] = quickFind(parent[x]);
    }

    void quickUnion(int x, int y)
    {
        int xp = quickFind(x), yp = quickFind(y);
        if(xp == yp) return;
        parent[yp] = xp;
        count[xp] += count[yp];
    }

    vector<int> groupStrings(vector<string> &arr)
    {
        for(auto &str : arr)
        {
            int mask = 0;
            for(char c : str) mask |= 1 << (c - 'a');
            parent[mask] = -1;
            count[mask]++;
        }
        for (auto [mask, v] : parent)
        {
            for(int i = 0; i < 26; ++i)
            {
                if(mask & (1 << i))
                {
                    int otherMask = (mask ^ (1 << i));
                    if(parent.find(otherMask) != parent.end())
                    {
                        quickUnion(otherMask, mask);
                    }
                    for(int j = 0; j < 26; ++j)
                    {
                        if(j != i && (mask & (1 << j)) == 0)
                        {
                            int anotherMask = (otherMask | (1 << j));
                            if(parent.find(anotherMask) != parent.end())
                                quickUnion(anotherMask, mask);
                        }
                    }
                }
                else
                {
                    int otherMask = (mask | (1 << i));
                    if(parent.find(otherMask) != parent.end())
                    {
                        quickUnion(otherMask, mask);
                    }
                }
            }
        }
        vector<int> ret(2);
        for (auto [mask, v] : parent)
        {
            if(v == -1)
            {
                ret[0]++;
                ret[1] = max(ret[1], count[mask]);
            }
        }
        return ret;
    }
};


// Source https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/

You are given a positive integer num consisting of exactly four digits. Split num into two new integers new1 and new2 by using the digits found in num. 
Leading zeros are allowed in new1 and new2, and all the digits found in num must be used.

For example, given num = 2932, you have the following digits: two 2's, one 9 and one 3. Some of the possible pairs [new1, new2] are [22, 93], [23, 92], [223, 9] and [2, 329].
Return the minimum possible sum of new1 and new2.

 

Example 1:

Input: num = 2932
Output: 52
Explanation: Some possible pairs [new1, new2] are [29, 23], [223, 9], etc.
The minimum sum can be obtained by the pair [29, 23]: 29 + 23 = 52.
Example 2:

Input: num = 4009
Output: 13
Explanation: Some possible pairs [new1, new2] are [0, 49], [490, 0], etc. 
The minimum sum can be obtained by the pair [4, 9]: 4 + 9 = 13.
 

Constraints:

1000 <= num <= 9999

class Solution
{
public:
    int minimumSum(int num)
    {
        vector<int> arr(4);
        for(int i = 0; i < 4; i++)
        {
            arr[i] = num % 10;
            num /= 10;
        }
        sort(arr.begin(), arr.end());
        return (arr[0] * 10 + arr[3]) + (arr[1] * 10 + arr[2]);
    }
};


// Source https://leetcode.com/problems/partition-array-according-to-given-pivot/

You are given a 0-indexed integer array nums and an integer pivot. Rearrange nums such that the following conditions are satisfied:

Every element less than pivot appears before every element greater than pivot.
Every element equal to pivot appears in between the elements less than and greater than pivot.
The relative order of the elements less than pivot and the elements greater than pivot is maintained.
More formally, consider every pi, pj where pi is the new position of the ith element and pj is the new position of the jth element. For elements less than pivot, if i < j and nums[i] < pivot and nums[j] < pivot, then pi < pj. Similarly for elements greater than pivot, if i < j and nums[i] > pivot and nums[j] > pivot, then pi < pj.
Return nums after the rearrangement.

 

Example 1:

Input: nums = [9,12,5,10,14,3,10], pivot = 10
Output: [9,5,3,10,10,12,14]
Explanation: 
The elements 9, 5, and 3 are less than the pivot so they are on the left side of the array.
The elements 12 and 14 are greater than the pivot so they are on the right side of the array.
The relative ordering of the elements less than and greater than pivot is also maintained. [9, 5, 3] and [12, 14] are the respective orderings.
Example 2:

Input: nums = [-3,4,3,2], pivot = 2
Output: [-3,2,4,3]
Explanation: 
The element -3 is less than the pivot so it is on the left side of the array.
The elements 4 and 3 are greater than the pivot so they are on the right side of the array.
The relative ordering of the elements less than and greater than pivot is also maintained. [-3] and [4, 3] are the respective orderings.
 

Constraints:

1 <= nums.length <= 105
-106 <= nums[i] <= 106
pivot equals to an element of nums.

class Solution
{
public:
    vector<int> pivotArray(vector<int> &nums, int pivot)
    {
        int n = nums.size();
        int low = 0;
        int same = 0;
        int high;
        for (auto val : nums)
        {
            if (val < pivot)
            {
                ++low;
            }
            else if (val == pivot)
            {
                ++same;
            }
        }
        vector<int> res(n);
        int highPos = same + low;
        int samePos = low;
        int lowPos = 0;
        for (auto val : nums)
        {
            if (val < pivot)
            {
                res[lowPos++] = val;
            }
            else if (val == pivot)
            {
                res[samePos++] = val;
            }
            else
            {
                res[highPos++] = val;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/minimum-cost-to-set-cooking-time/

A generic microwave supports cooking times for:

at least 1 second.
at most 99 minutes and 99 seconds.
To set the cooking time, you push at most four digits. The microwave normalizes what you push as four digits by prepending zeroes. 
It interprets the first two digits as the minutes and the last two digits as the seconds. It then adds them up as the cooking time. For example,

You push 9 5 4 (three digits). It is normalized as 0954 and interpreted as 9 minutes and 54 seconds.
You push 0 0 0 8 (four digits). It is interpreted as 0 minutes and 8 seconds.
You push 8 0 9 0. It is interpreted as 80 minutes and 90 seconds.
You push 8 1 3 0. It is interpreted as 81 minutes and 30 seconds.
You are given integers startAt, moveCost, pushCost, and targetSeconds. 
Initially, your finger is on the digit startAt. Moving the finger above any specific digit costs moveCost units of fatigue. Pushing the digit below the finger once costs pushCost units of fatigue.

There can be multiple ways to set the microwave to cook for targetSeconds seconds but you are interested in the way with the minimum cost.

Return the minimum cost to set targetSeconds seconds of cooking time.

Remember that one minute consists of 60 seconds.

 

Example 1:


Input: startAt = 1, moveCost = 2, pushCost = 1, targetSeconds = 600
Output: 6
Explanation: The following are the possible ways to set the cooking time.
- 1 0 0 0, interpreted as 10 minutes and 0 seconds.
  The finger is already on digit 1, pushes 1 (with cost 1), moves to 0 (with cost 2), pushes 0 (with cost 1), pushes 0 (with cost 1), and pushes 0 (with cost 1).
  The cost is: 1 + 2 + 1 + 1 + 1 = 6. This is the minimum cost.
- 0 9 6 0, interpreted as 9 minutes and 60 seconds. That is also 600 seconds.
  The finger moves to 0 (with cost 2), pushes 0 (with cost 1), moves to 9 (with cost 2), pushes 9 (with cost 1), moves to 6 (with cost 2), pushes 6 (with cost 1), moves to 0 (with cost 2), and pushes 0 (with cost 1).
  The cost is: 2 + 1 + 2 + 1 + 2 + 1 + 2 + 1 = 12.
- 9 6 0, normalized as 0960 and interpreted as 9 minutes and 60 seconds.
  The finger moves to 9 (with cost 2), pushes 9 (with cost 1), moves to 6 (with cost 2), pushes 6 (with cost 1), moves to 0 (with cost 2), and pushes 0 (with cost 1).
  The cost is: 2 + 1 + 2 + 1 + 2 + 1 = 9.
Example 2:


Input: startAt = 0, moveCost = 1, pushCost = 2, targetSeconds = 76
Output: 6
Explanation: The optimal way is to push two digits: 7 6, interpreted as 76 seconds.
The finger moves to 7 (with cost 1), pushes 7 (with cost 2), moves to 6 (with cost 1), and pushes 6 (with cost 2). The total cost is: 1 + 2 + 1 + 2 = 6
Note other possible ways are 0076, 076, 0116, and 116, but none of them produces the minimum cost.
 

Constraints:

0 <= startAt <= 9
1 <= moveCost, pushCost <= 105
1 <= targetSeconds <= 6039

class Solution
{
public:

    int helper(int startAt, int moveCost, int pushCost, int minute, int second)
    {
        if(minute >= 100) return INT_MAX;
        string seq = to_string(minute * 100 + second);
        int res = 0;
        char t = startAt + '0';
        for(auto ch : seq)
        {
            if(t != ch) res += moveCost;
            res += pushCost;
            t = ch;
        }
        return res;
    }

    int minCostSetTime(int startAt, int moveCost, int pushCost, int targetSeconds)
    {
        int minute = targetSeconds / 60;
        int second = targetSeconds % 60;
        int res = helper(startAt, moveCost, pushCost, minute, second);
        if (minute > 0 && second <= 39) res = min(res, helper(startAt, moveCost, pushCost, minute - 1, second + 60));
        return res;
    }
};


// Source https://leetcode.com/problems/minimum-difference-in-sums-after-removal-of-elements/

You are given a 0-indexed integer array nums consisting of 3 * n elements.

You are allowed to remove any subsequence of elements of size exactly n from nums. The remaining 2 * n elements will be divided into two equal parts:

The first n elements belonging to the first part and their sum is sumfirst.
The next n elements belonging to the second part and their sum is sumsecond.
The difference in sums of the two parts is denoted as sumfirst - sumsecond.

For example, if sumfirst = 3 and sumsecond = 2, their difference is 1.
Similarly, if sumfirst = 2 and sumsecond = 3, their difference is -1.
Return the minimum difference possible between the sums of the two parts after the removal of n elements.

 

Example 1:

Input: nums = [3,1,2]
Output: -1
Explanation: Here, nums has 3 elements, so n = 1. 
Thus we have to remove 1 element from nums and divide the array into two equal parts.
- If we remove nums[0] = 3, the array will be [1,2]. The difference in sums of the two parts will be 1 - 2 = -1.
- If we remove nums[1] = 1, the array will be [3,2]. The difference in sums of the two parts will be 3 - 2 = 1.
- If we remove nums[2] = 2, the array will be [3,1]. The difference in sums of the two parts will be 3 - 1 = 2.
The minimum difference between sums of the two parts is min(-1,1,2) = -1. 
Example 2:

Input: nums = [7,9,5,8,1,3]
Output: 1
Explanation: Here n = 2. So we must remove 2 elements and divide the remaining array into two parts containing two elements each.
If we remove nums[2] = 5 and nums[3] = 8, the resultant array will be [7,9,1,3]. The difference in sums will be (7+9) - (1+3) = 12.
To obtain the minimum difference, we should remove nums[1] = 9 and nums[4] = 1. The resultant array becomes [7,5,8,3]. The difference in sums of the two parts is (7+5) - (8+3) = 1.
It can be shown that it is not possible to obtain a difference smaller than 1.
 

Constraints:

nums.length == 3 * n
1 <= n <= 105
1 <= nums[i] <= 105

问题等价于从nums[0 ... i]中挑出n个使得sumfirst最小，从nums[i+1 ... nums.size() - 1]中挑出n个使得sumsecond最大，i >= n -1 && i < 2 * n

class Solution
{
public:
    long long minimumDifference(vector<int> &nums)
    {
        priority_queue<int> L;
        priority_queue<int, vector<int>, greater<int>> R;
        int len = nums.size();
        int n = len / 3;
        long left = 0, right = 0, ans = 1e16;
        vector<long> temp(n + 1);
        for(int i = len - 1; i >= n; i--)
        {
            R.push(nums[i]);
            right += nums[i];
            if(R.size() > n)
            {
                right -= R.top();
                R.pop();
            }
            if(R.size() == n)
            {
                temp[i - n] = right;
            }
        }
        int cnt = 2 * n;
        for(int i = 0; i < cnt; i++)
        {
            L.push(nums[i]);
            left += nums[i];
            if(L.size() > n)
            {
                left -= L.top();
                L.pop();
            }
            if(L.size() == n)
            {
                ans = min(ans, left - temp[i + 1 - n]);
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/sort-even-and-odd-indices-independently/

You are given a 0-indexed integer array nums. Rearrange the values of nums according to the following rules:

Sort the values at odd indices of nums in non-increasing order.
For example, if nums = [4,1,2,3] before this step, it becomes [4,3,2,1] after. The values at odd indices 1 and 3 are sorted in non-increasing order.
Sort the values at even indices of nums in non-decreasing order.
For example, if nums = [4,1,2,3] before this step, it becomes [2,1,4,3] after. The values at even indices 0 and 2 are sorted in non-decreasing order.
Return the array formed after rearranging the values of nums.

 

Example 1:

Input: nums = [4,1,2,3]
Output: [2,3,4,1]
Explanation: 
First, we sort the values present at odd indices (1 and 3) in non-increasing order.
So, nums changes from [4,1,2,3] to [4,3,2,1].
Next, we sort the values present at even indices (0 and 2) in non-decreasing order.
So, nums changes from [4,1,2,3] to [2,3,4,1].
Thus, the array formed after rearranging the values is [2,3,4,1].
Example 2:

Input: nums = [2,1]
Output: [2,1]
Explanation: 
Since there is exactly one odd index and one even index, no rearrangement of values takes place.
The resultant array formed is [2,1], which is the same as the initial array. 
 

Constraints:

1 <= nums.length <= 100
1 <= nums[i] <= 100

class Solution
{
public:
    vector<int> sortEvenOdd(vector<int> &nums)
    {
        int n = nums.size();
        vector<int>even;
        vector<int>odd;
        vector<int>ans;
        even.reserve(100);
        odd.reserve(100);
        ans.reserve(100);
        int i = 0;
        while(i < n)
        {
            even.push_back(nums[i]);
            i += 2;
        }
        int j = 1;
        while(j < n)
        {
            odd.push_back(nums[j]);
            j += 2;
        }
        sort(even.begin(), even.end());
        sort(odd.begin(), odd.end(), greater<int>());
        int evenCnt = even.size();
        int oddCnt = odd.size();
        for(int k = 0; k < evenCnt; k++)
        {
            ans.push_back(even[k]);
            if(k < oddCnt)
                ans.push_back(odd[k]);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/smallest-value-of-the-rearranged-number/

You are given an integer num. Rearrange the digits of num such that its value is minimized and it does not contain any leading zeros.

Return the rearranged number with minimal value.

Note that the sign of the number does not change after rearranging the digits.

 

Example 1:

Input: num = 310
Output: 103
Explanation: The possible arrangements for the digits of 310 are 013, 031, 103, 130, 301, 310. 
The arrangement with the smallest value that does not contain any leading zeros is 103.
Example 2:

Input: num = -7605
Output: -7650
Explanation: Some possible arrangements for the digits of -7605 are -7650, -6705, -5076, -0567.
The arrangement with the smallest value that does not contain any leading zeros is -7650.
 

Constraints:

-1015 <= num <= 1015

class Solution
{
public:
    long long smallestNumber(long long num)
    {
        if(num == 0) return 0;
        vector<int> arr;
        arr.reserve(64);
        bool isNegative = false;
        if(num < 0)
        {
            isNegative = true;
            num = -1 * num;
        }
        while(num > 0)
        {
            arr.push_back(num % 10);
            num = num / 10;
        }
        if(isNegative)
        {
            sort(arr.begin(), arr.end(), greater<int>());
        }
        else
        {
            sort(arr.begin(), arr.end());
            if(arr[0] == 0)
            {
                int ind = 0;
                while(arr[ind] == 0) ind++;
                swap(arr[0], arr[ind]);
            }
        }
        int len = arr.size();
        num = 0;
        for(int i = 0; i < len; i++)
        {
            num = num * 10 + arr[i];
        }
        if(isNegative) num = -1 * num;
        return num;
    }
};


// Source https://leetcode.com/problems/design-bitset/

A Bitset is a data structure that compactly stores bits.

Implement the Bitset class:

Bitset(int size) Initializes the Bitset with size bits, all of which are 0.
void fix(int idx) Updates the value of the bit at the index idx to 1. If the value was already 1, no change occurs.
void unfix(int idx) Updates the value of the bit at the index idx to 0. If the value was already 0, no change occurs.
void flip() Flips the values of each bit in the Bitset. In other words, all bits with value 0 will now have value 1 and vice versa.
boolean all() Checks if the value of each bit in the Bitset is 1. Returns true if it satisfies the condition, false otherwise.
boolean one() Checks if there is at least one bit in the Bitset with value 1. Returns true if it satisfies the condition, false otherwise.
int count() Returns the total number of bits in the Bitset which have value 1.
String toString() Returns the current composition of the Bitset. Note that in the resultant string, the character at the ith index should coincide with the value at the ith bit of the Bitset.
 

Example 1:

Input
["Bitset", "fix", "fix", "flip", "all", "unfix", "flip", "one", "unfix", "count", "toString"]
[[5], [3], [1], [], [], [0], [], [], [0], [], []]
Output
[null, null, null, null, false, null, null, true, null, 2, "01010"]

Explanation
Bitset bs = new Bitset(5); // bitset = "00000".
bs.fix(3);     // the value at idx = 3 is updated to 1, so bitset = "00010".
bs.fix(1);     // the value at idx = 1 is updated to 1, so bitset = "01010". 
bs.flip();     // the value of each bit is flipped, so bitset = "10101". 
bs.all();      // return False, as not all values of the bitset are 1.
bs.unfix(0);   // the value at idx = 0 is updated to 0, so bitset = "00101".
bs.flip();     // the value of each bit is flipped, so bitset = "11010". 
bs.one();      // return True, as there is at least 1 index with value 1.
bs.unfix(0);   // the value at idx = 0 is updated to 0, so bitset = "01010".
bs.count();    // return 2, as there are 2 bits with value 1.
bs.toString(); // return "01010", which is the composition of bitset.
 

Constraints:

1 <= size <= 105
0 <= idx <= size - 1
At most 105 calls will be made in total to fix, unfix, flip, all, one, count, and toString.
At least one call will be made to all, one, count, or toString.
At most 5 calls will be made to toString.

class Bitset
{
public:
    int curr, tot;
    string g = "";
    string x = "";

    Bitset(int size)
    {
        tot = size;
        curr = 0;
        g = string(size, '0');
        x = string(size, '1');
    }

    void fix(int idx)
    {
        if(g[idx] == '0') curr++;
        g[idx] = '1';
        x[idx] = '0';
    }

    void unfix(int idx)
    {
        if(g[idx] == '1') curr--;
        g[idx] = '0';
        x[idx] = '1';
    }

    void flip()
    {
        curr = tot - curr;
        swap(x, g);
    }

    bool all()
    {
        return curr == tot;
    }

    bool one()
    {
        return curr > 0;
    }

    int count()
    {
        return curr;
    }

    string toString()
    {
        return g;
    }
};


// Source https://leetcode.com/problems/minimum-time-to-remove-all-cars-containing-illegal-goods/

You are given a 0-indexed binary string s which represents a sequence of train cars. 
s[i] = '0' denotes that the ith car does not contain illegal goods and s[i] = '1' denotes that the ith car does contain illegal goods.

As the train conductor, you would like to get rid of all the cars containing illegal goods. You can do any of the following three operations any number of times:

Remove a train car from the left end (i.e., remove s[0]) which takes 1 unit of time.
Remove a train car from the right end (i.e., remove s[s.length - 1]) which takes 1 unit of time.
Remove a train car from anywhere in the sequence which takes 2 units of time.
Return the minimum time to remove all the cars containing illegal goods.

Note that an empty sequence of cars is considered to have no cars containing illegal goods.

 

Example 1:

Input: s = "1100101"
Output: 5
Explanation: 
One way to remove all the cars containing illegal goods from the sequence is to
- remove a car from the left end 2 times. Time taken is 2 * 1 = 2.
- remove a car from the right end. Time taken is 1.
- remove the car containing illegal goods found in the middle. Time taken is 2.
This obtains a total time of 2 + 1 + 2 = 5. 

An alternative way is to
- remove a car from the left end 2 times. Time taken is 2 * 1 = 2.
- remove a car from the right end 3 times. Time taken is 3 * 1 = 3.
This also obtains a total time of 2 + 3 = 5.

5 is the minimum time taken to remove all the cars containing illegal goods. 
There are no other ways to remove them with less time.
Example 2:

Input: s = "0010"
Output: 2
Explanation:
One way to remove all the cars containing illegal goods from the sequence is to
- remove a car from the left end 3 times. Time taken is 3 * 1 = 3.
This obtains a total time of 3.

Another way to remove all the cars containing illegal goods from the sequence is to
- remove the car containing illegal goods found in the middle. Time taken is 2.
This obtains a total time of 2.

Another way to remove all the cars containing illegal goods from the sequence is to 
- remove a car from the right end 2 times. Time taken is 2 * 1 = 2. 
This obtains a total time of 2.

2 is the minimum time taken to remove all the cars containing illegal goods. 
There are no other ways to remove them with less time.
 

Constraints:

1 <= s.length <= 2 * 105
s[i] is either '0' or '1'.

class Solution
{
public:
    int minimumTime(string s)
    {
        int n = s.length();
        if (n == 1) return s[0] - '0';
        vector<int> pre(n, 0);
        vector<int> suf(n, 0);
        if (s[0] == '1') pre[0] =  1;
        for (int i = 1; i < n; ++i)
        {
            if (s[i] == '0')
            {
                pre[i] = pre[i - 1];
            }
            else
            {
                pre[i] = min(pre[i - 1] + 2, i + 1);
            }
        }
        if (s[n - 1] == '1') suf[n - 1] =  1;
        for (int i = n - 2; i >= 0; --i)
        {
            if (s[i] == '0')
            {
                suf[i] = suf[i + 1];
            }
            else
            {
                suf[i] = min(suf[i + 1] + 2, n - i);
            }
        }
        int res = min(suf[0], pre[n - 1]);
        for (int i = 0; i < n - 1; ++i)
        {
            res = min(res, pre[i] + suf[i + 1]);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/count-operations-to-obtain-zero/

You are given two non-negative integers num1 and num2.

In one operation, if num1 >= num2, you must subtract num2 from num1, otherwise subtract num1 from num2.

For example, if num1 = 5 and num2 = 4, subtract num2 from num1, thus obtaining num1 = 1 and num2 = 4. 
However, if num1 = 4 and num2 = 5, after one operation, num1 = 4 and num2 = 1.
Return the number of operations required to make either num1 = 0 or num2 = 0.

 

Example 1:

Input: num1 = 2, num2 = 3
Output: 3
Explanation: 
- Operation 1: num1 = 2, num2 = 3. Since num1 < num2, we subtract num1 from num2 and get num1 = 2, num2 = 3 - 2 = 1.
- Operation 2: num1 = 2, num2 = 1. Since num1 > num2, we subtract num2 from num1.
- Operation 3: num1 = 1, num2 = 1. Since num1 == num2, we subtract num2 from num1.
Now num1 = 0 and num2 = 1. Since num1 == 0, we do not need to perform any further operations.
So the total number of operations required is 3.
Example 2:

Input: num1 = 10, num2 = 10
Output: 1
Explanation: 
- Operation 1: num1 = 10, num2 = 10. Since num1 == num2, we subtract num2 from num1 and get num1 = 10 - 10 = 0.
Now num1 = 0 and num2 = 10. Since num1 == 0, we are done.
So the total number of operations required is 1.
 

Constraints:

0 <= num1, num2 <= 105

class Solution
{
public:
    int countOperations(int num1, int num2)
    {
        int count = 0;
        while(num1 > 0 && num2 > 0)
        {
            if(num1 >= num2)
            {
                num1 -= num2;
            }
            else
            {
                num2 -= num1;
            }
            count++;
        }
        return count;
    }
};


// Source https://leetcode.com/problems/minimum-operations-to-make-the-array-alternating/

You are given a 0-indexed array nums consisting of n positive integers.

The array nums is called alternating if:

nums[i - 2] == nums[i], where 2 <= i <= n - 1.
nums[i - 1] != nums[i], where 1 <= i <= n - 1.
In one operation, you can choose an index i and change nums[i] into any positive integer.

Return the minimum number of operations required to make the array alternating.

 

Example 1:

Input: nums = [3,1,3,2,4,3]
Output: 3
Explanation:
One way to make the array alternating is by converting it to [3,1,3,1,3,1].
The number of operations required in this case is 3.
It can be proven that it is not possible to make the array alternating in less than 3 operations. 
Example 2:

Input: nums = [1,2,2,2,2]
Output: 2
Explanation:
One way to make the array alternating is by converting it to [1,2,1,2,1].
The number of operations required in this case is 2.
Note that the array cannot be converted to [2,2,2,2,2] because in this case nums[0] == nums[1] which violates the conditions of an alternating array.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 105

class Solution
{
public:
    int minimumOperations(vector<int> &nums)
    {
        int n = nums.size();
        if(n == 1) return 0;
        unordered_map<int, int> odds, evens;
        for(int i = 0; i < n; i++)
        {
            if(i & 1) odds[nums[i]]++;
            else evens[nums[i]]++;
        }
        int max1 = 0, secmax1 = 0;
        int max1val;
        for(auto [val, cnt] : odds)
        {
            if(cnt >= max1)
            {
                secmax1 = max1, max1 = cnt;
                max1val = val;
            }
            else if(cnt > secmax1)
            {
                secmax1 = cnt;
            }
        }
        int max2 = 0, secmax2 = 0;
        int max2val;
        for(auto [val, cnt] : evens)
        {
            if(cnt >= max2)
            {
                secmax2 = max2, max2 = cnt;
                max2val = val;
            }
            else if(cnt > secmax2)
            {
                secmax2 = cnt;
            }
        }
        int val = 0;
        if(max1val == max2val) val = max(max2 + secmax1, max1 + secmax2);
        else val = max1 + max2;
        return n - val;
    }
};


// Source https://leetcode.com/problems/removing-minimum-number-of-magic-beans/

You are given an array of positive integers beans, where each integer represents the number of magic beans found in a particular magic bag.

Remove any number of beans (possibly none) from each bag such that the number of beans in each remaining non-empty bag (still containing at least one bean) is equal. 
Once a bean has been removed from a bag, you are not allowed to return it to any of the bags.

Return the minimum number of magic beans that you have to remove.

 

Example 1:

Input: beans = [4,1,6,5]
Output: 4
Explanation: 
- We remove 1 bean from the bag with only 1 bean.
  This results in the remaining bags: [4,0,6,5]
- Then we remove 2 beans from the bag with 6 beans.
  This results in the remaining bags: [4,0,4,5]
- Then we remove 1 bean from the bag with 5 beans.
  This results in the remaining bags: [4,0,4,4]
We removed a total of 1 + 2 + 1 = 4 beans to make the remaining non-empty bags have an equal number of beans.
There are no other solutions that remove 4 beans or fewer.
Example 2:

Input: beans = [2,10,3,2]
Output: 7
Explanation:
- We remove 2 beans from one of the bags with 2 beans.
  This results in the remaining bags: [0,10,3,2]
- Then we remove 2 beans from the other bag with 2 beans.
  This results in the remaining bags: [0,10,3,0]
- Then we remove 3 beans from the bag with 3 beans. 
  This results in the remaining bags: [0,10,0,0]
We removed a total of 2 + 2 + 3 = 7 beans to make the remaining non-empty bags have an equal number of beans.
There are no other solutions that removes 7 beans or fewer.
 

Constraints:

1 <= beans.length <= 105
1 <= beans[i] <= 105

class Solution
{
public:
    long long minimumRemoval(vector<int> &beans)
    {
        long long n = beans.size();
        sort(beans.begin(), beans.end());
        long long sum = 0;
        for(int i = 0; i < n; i++)
        {
            sum += beans[i];
        }
        long long ans = 1e16;
        for(int i = 0; i < n; i++)
        {
            ans = min(ans, sum - (n - i) * beans[i]);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/maximum-and-sum-of-array/

You are given an integer array nums of length n and an integer numSlots such that 2 * numSlots >= n. There are numSlots slots numbered from 1 to numSlots.

You have to place all n integers into the slots such that each slot contains at most two numbers. 
The AND sum of a given placement is the sum of the bitwise AND of every number with its respective slot number.

For example, the AND sum of placing the numbers [1, 3] into slot 1 and [4, 6] into slot 2 is equal to (1 AND 1) + (3 AND 1) + (4 AND 2) + (6 AND 2) = 1 + 1 + 0 + 2 = 4.
Return the maximum possible AND sum of nums given numSlots slots.

 

Example 1:

Input: nums = [1,2,3,4,5,6], numSlots = 3
Output: 9
Explanation: One possible placement is [1, 4] into slot 1, [2, 6] into slot 2, and [3, 5] into slot 3. 
This gives the maximum AND sum of (1 AND 1) + (4 AND 1) + (2 AND 2) + (6 AND 2) + (3 AND 3) + (5 AND 3) = 1 + 0 + 2 + 2 + 3 + 1 = 9.
Example 2:

Input: nums = [1,3,10,4,7,1], numSlots = 9
Output: 24
Explanation: One possible placement is [1, 1] into slot 1, [3] into slot 3, [4] into slot 4, [7] into slot 7, and [10] into slot 9.
This gives the maximum AND sum of (1 AND 1) + (1 AND 1) + (3 AND 3) + (4 AND 4) + (7 AND 7) + (10 AND 9) = 1 + 1 + 3 + 4 + 7 + 8 = 24.
Note that slots 2, 5, 6, and 8 are empty which is permitted.
 

Constraints:

n == nums.length
1 <= numSlots <= 9
1 <= n <= 2 * numSlots
1 <= nums[i] <= 15

class Solution
{
public:
    int n;
    int dp[263000][20];

    int recur(int idx, vector<int> &nums, int vis[], int numSlots, int mask)
    {
        if(idx == n) return 0;
        if(dp[mask][idx] != -1) return dp[mask][idx];
        int ans = 0;
        for(int i = 0; i < numSlots; ++i)
        {
            if(vis[i] < 2)
            {
                vis[i]++;
                int pos = (vis[i] - 1) * numSlots + i;
                int val = (i + 1) & (nums[idx]);
                ans = max(ans, val + recur(idx + 1, nums, vis, numSlots, mask | (1 << pos)));
                vis[i]--;
            }
        }
        return dp[mask][idx] = ans;
    }

    int maximumANDSum(vector<int> &nums, int numSlots)
    {
        n = nums.size();
        memset(dp, -1, sizeof(dp));
        int vis[10] = {0};
        return recur(0, nums, vis, numSlots, 0);
    }
};


// Source https://leetcode.com/problems/count-equal-and-divisible-pairs-in-an-array/

Given a 0-indexed integer array nums of length n and an integer k, return the number of pairs (i, j) where 0 <= i < j < n, such that nums[i] == nums[j] and (i * j) is divisible by k.
 

Example 1:

Input: nums = [3,1,2,2,2,1,3], k = 2
Output: 4
Explanation:
There are 4 pairs that meet all the requirements:
- nums[0] == nums[6], and 0 * 6 == 0, which is divisible by 2.
- nums[2] == nums[3], and 2 * 3 == 6, which is divisible by 2.
- nums[2] == nums[4], and 2 * 4 == 8, which is divisible by 2.
- nums[3] == nums[4], and 3 * 4 == 12, which is divisible by 2.
Example 2:

Input: nums = [1,2,3,4], k = 1
Output: 0
Explanation: Since no value in nums is repeated, there are no pairs (i,j) that meet all the requirements.
 

Constraints:

1 <= nums.length <= 100
1 <= nums[i], k <= 100

class Solution
{
public:
    int countPairs(vector<int> &nums, int k)
    {
        int n = nums.size();
        int res = 0;
        for(int i = 0; i < n; i++)
        {
            for(int j = i + 1; j < n; j++)
            {
                if(nums[i] == nums[j])
                {
                    int val = i * j;
                    if(val % k == 0)
                    {
                        res++;
                    }
                }
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/find-three-consecutive-integers-that-sum-to-a-given-number/

Given an integer num, return three consecutive integers (as a sorted array) that sum to num. If num cannot be expressed as the sum of three consecutive integers, return an empty array.

 

Example 1:

Input: num = 33
Output: [10,11,12]
Explanation: 33 can be expressed as 10 + 11 + 12 = 33.
10, 11, 12 are 3 consecutive integers, so we return [10, 11, 12].
Example 2:

Input: num = 4
Output: []
Explanation: There is no way to express 4 as the sum of 3 consecutive integers.
 

Constraints:

0 <= num <= 1015

x x + 1 x + 2
3 * x + 3

class Solution
{
public:
    vector<long long> sumOfThree(long long num)
    {
        if(num % 3) return {};
        long long val = num / 3;
        return {val - 1, val, val + 1};
    }
};


// Source https://leetcode.com/problems/maximum-split-of-positive-even-integers/

You are given an integer finalSum. Split it into a sum of a maximum number of unique positive even integers.

For example, given finalSum = 12, the following splits are valid (unique positive even integers summing up to finalSum): (12), (2 + 10), (2 + 4 + 6), and (4 + 8). 
Among them, (2 + 4 + 6) contains the maximum number of integers. Note that finalSum cannot be split into (2 + 2 + 4 + 4) as all the numbers should be unique.
Return a list of integers that represent a valid split containing a maximum number of integers. If no valid split exists for finalSum, return an empty list. You may return the integers in any order.

 

Example 1:

Input: finalSum = 12
Output: [2,4,6]
Explanation: The following are valid splits: (12), (2 + 10), (2 + 4 + 6), and (4 + 8).
(2 + 4 + 6) has the maximum number of integers, which is 3. Thus, we return [2,4,6].
Note that [2,6,4], [6,2,4], etc. are also accepted.
Example 2:

Input: finalSum = 7
Output: []
Explanation: There are no valid splits for the given finalSum.
Thus, we return an empty array.
Example 3:

Input: finalSum = 28
Output: [6,8,2,12]
Explanation: The following are valid splits: (2 + 26), (6 + 8 + 2 + 12), and (4 + 24). 
(6 + 8 + 2 + 12) has the maximum number of integers, which is 4. Thus, we return [6,8,2,12].
Note that [10,2,4,12], [6,2,4,16], etc. are also accepted.
 

Constraints:

1 <= finalSum <= 1010

2 + 4 + 6 = 12
2 + 4 + 8 = 14
2 + 4 + 10 = 16
2 + 4 + 12 = 18
2 + 4 + 6 + 8 = 20

class Solution
{
public:
    vector<long long> maximumEvenSplit(long long finalSum)
    {
        if (finalSum % 2) return {};
        if(finalSum <= 4) return {finalSum};
        vector<long long> ans;
        ans.reserve(128);
        int x = 2;
        while (finalSum >= x)
        {
            ans.push_back(x);
            finalSum -= x;
            x += 2;
        }
        if (finalSum > 0)
        {
            ans.back() += finalSum;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/count-good-triplets-in-an-array/

You are given two 0-indexed arrays nums1 and nums2 of length n, both of which are permutations of [0, 1, ..., n - 1].

A good triplet is a set of 3 distinct values which are present in increasing order by position both in nums1 and nums2. 
In other words, if we consider pos1v as the index of the value v in nums1 and pos2v as the index of the value v in nums2, 
then a good triplet will be a set (x, y, z) where 0 <= x, y, z <= n - 1, such that pos1x < pos1y < pos1z and pos2x < pos2y < pos2z.

Return the total number of good triplets.

 

Example 1:

Input: nums1 = [2,0,1,3], nums2 = [0,1,2,3]
Output: 1
Explanation: 
There are 4 triplets (x,y,z) such that pos1x < pos1y < pos1z. They are (2,0,1), (2,0,3), (2,1,3), and (0,1,3). 
Out of those triplets, only the triplet (0,1,3) satisfies pos2x < pos2y < pos2z. Hence, there is only 1 good triplet.
Example 2:

Input: nums1 = [4,0,1,3,2], nums2 = [4,1,0,2,3]
Output: 4
Explanation: The 4 good triplets are (4,0,3), (4,0,2), (4,1,3), and (4,1,2).
 

Constraints:

n == nums1.length == nums2.length
3 <= n <= 105
0 <= nums1[i], nums2[i] <= n - 1
nums1 and nums2 are permutations of [0, 1, ..., n - 1].

class Solution
{
public:
    int n, sz;

    void update(int i, int val, vector<int> &bit)
    {
        while(i < sz)
        {
            bit[i] += val;
            i += (i & -i);
        }
    }
    int find(int i, vector<int> &bit)
    {
        int sum = 0;
        while(i > 0)
        {
            sum += bit[i];
            i -= (i & -i);
        }
        return sum;
    }

    long long goodTriplets(vector<int> &nums1, vector<int> &nums2)
    {
        n = nums1.size();
        sz = n + 1;
        vector<int>bitl(sz), bitr(sz);
        unordered_map<int, int>mp;
        for(int i = 0; i < n; i++)
        {
            mp[nums1[i]] = i + 1;
        }
        vector<int>nums(n, 0);
        for(int i = 0; i < n; i++)
        {
            nums[i] = mp[nums2[i]];
        }
        for(int i = 0; i < n; i++)
        {
            update(nums[i], 1, bitr);
        }
        long long ans = 0;
        // i 对应 pos2y，i >= 0 && i < n
        // nums[i] 对应 pos1y，nums[i] >= 1 && nums[i] <= n
        for(int i = 0; i < n; i++)
        {
            update(nums[i], -1, bitr);
            int left = find(nums[i] - 1, bitl);
            int right = find(sz - 1, bitr) - find(nums[i], bitr);
            ans += (1ll * left * right);
            update(nums[i], 1, bitl);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/count-integers-with-even-digit-sum/

Given a positive integer num, return the number of positive integers less than or equal to num whose digit sums are even.

The digit sum of a positive integer is the sum of all its digits.

 

Example 1:

Input: num = 4
Output: 2
Explanation:
The only integers less than or equal to 4 whose digit sums are even are 2 and 4.    
Example 2:

Input: num = 30
Output: 14
Explanation:
The 14 integers less than or equal to 30 whose digit sums are even are
2, 4, 6, 8, 11, 13, 15, 17, 19, 20, 22, 24, 26, and 28.
 

Constraints:

1 <= num <= 1000

class Solution
{
public:
    int countEven(int num)
    {
        int res = 0;
        for(int i = 2; i <= num; i++)
        {
            int p = i, sum = 0;
            while(p > 0)
            {
                sum += p % 10;
                p /= 10;
            }
            if(sum % 2 == 0) ++res;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/merge-nodes-in-between-zeros/

You are given the head of a linked list, which contains a series of integers separated by 0's. The beginning and end of the linked list will have Node.val == 0.

For every two consecutive 0's, merge all the nodes lying in between them into a single node whose value is the sum of all the merged nodes. The modified list should not contain any 0's.

Return the head of the modified linked list.

 

Example 1:


Input: head = [0,3,1,0,4,5,2,0]
Output: [4,11]
Explanation: 
The above figure represents the given linked list. The modified list contains
- The sum of the nodes marked in green: 3 + 1 = 4.
- The sum of the nodes marked in red: 4 + 5 + 2 = 11.
Example 2:


Input: head = [0,1,0,3,0,2,2,0]
Output: [1,3,4]
Explanation: 
The above figure represents the given linked list. The modified list contains
- The sum of the nodes marked in green: 1 = 1.
- The sum of the nodes marked in red: 3 = 3.
- The sum of the nodes marked in yellow: 2 + 2 = 4.
 

Constraints:

The number of nodes in the list is in the range [3, 2 * 105].
0 <= Node.val <= 1000
There are no two consecutive nodes with Node.val == 0.
The beginning and end of the linked list have Node.val == 0.

class Solution
{
public:
    ListNode *mergeNodes(ListNode *head)
    {
        vector<int> vec;
        vec.reserve(30000);
        ListNode *curr = head;
        while (curr->next)
        {
            int sum = 0;
            ListNode *node = curr->next;
            while (node->val > 0)
            {
                sum += node->val;
                node = node->next;
            }
            vec.push_back(sum);
            curr = node;
        }
        curr = head;
        ListNode *end;
        int cnt = vec.size();
        for (int i = 0; i < cnt; ++i)
        {
            curr->val = vec[i];
            end = curr;
            curr = curr->next;
        }
        end->next = nullptr;
        return head;
    }
};


// Source https://leetcode.com/problems/construct-string-with-repeat-limit/

You are given a string s and an integer repeatLimit. Construct a new string repeatLimitedString using the characters of s such that no letter appears more than repeatLimit times in a row. 
You do not have to use all characters from s.

Return the lexicographically largest repeatLimitedString possible.

A string a is lexicographically larger than a string b if in the first position where a and b differ, string a has a letter that appears later in the alphabet than the corresponding letter in b. 
If the first min(a.length, b.length) characters do not differ, then the longer string is the lexicographically larger one.

 

Example 1:

Input: s = "cczazcc", repeatLimit = 3
Output: "zzcccac"
Explanation: We use all of the characters from s to construct the repeatLimitedString "zzcccac".
The letter 'a' appears at most 1 time in a row.
The letter 'c' appears at most 3 times in a row.
The letter 'z' appears at most 2 times in a row.
Hence, no letter appears more than repeatLimit times in a row and the string is a valid repeatLimitedString.
The string is the lexicographically largest repeatLimitedString possible so we return "zzcccac".
Note that the string "zzcccca" is lexicographically larger but the letter 'c' appears more than 3 times in a row, so it is not a valid repeatLimitedString.
Example 2:

Input: s = "aababab", repeatLimit = 2
Output: "bbabaa"
Explanation: We use only some of the characters from s to construct the repeatLimitedString "bbabaa". 
The letter 'a' appears at most 2 times in a row.
The letter 'b' appears at most 2 times in a row.
Hence, no letter appears more than repeatLimit times in a row and the string is a valid repeatLimitedString.
The string is the lexicographically largest repeatLimitedString possible so we return "bbabaa".
Note that the string "bbabaaa" is lexicographically larger but the letter 'a' appears more than 2 times in a row, so it is not a valid repeatLimitedString.
 

Constraints:

1 <= repeatLimit <= s.length <= 105
s consists of lowercase English letters.

class Solution
{
public:
    string repeatLimitedString(string s, int repeatLimit)
    {
        int v[26] = {0};
        for(auto ch : s) v[ch - 'a']++;
        priority_queue<pair<char, int>> pq;
        for(int i = 0; i < 26; i++)
        {
            if (v[i] == 0) continue;
            pq.push({i + 'a', v[i]});
        }
        string ans = "";
        ans.reserve(s.length());
        while(!pq.empty())
        {
            auto [ch, freq] = pq.top();
            pq.pop();
            if(ans.size() == 0 || ans.back() != ch)
            {
                int times = min(freq, repeatLimit);
                ans.append(times, ch);
                freq -= times;
                if(freq > 0) pq.push({ch, freq});
            }
            else
            {
                if(pq.size() == 0) break;
                auto [ch2, freq2] = pq.top();
                pq.pop();
                ans.push_back(ch2);
                freq2--;
                if(freq2 > 0) pq.push({ch2, freq2});
                pq.push({ch, freq});
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/count-array-pairs-divisible-by-k/

Given a 0-indexed integer array nums of length n and an integer k, return the number of pairs (i, j) such that:

0 <= i < j <= n - 1 and
nums[i] * nums[j] is divisible by k.
 

Example 1:

Input: nums = [1,2,3,4,5], k = 2
Output: 7
Explanation: 
The 7 pairs of indices whose corresponding products are divisible by 2 are
(0, 1), (0, 3), (1, 2), (1, 3), (1, 4), (2, 3), and (3, 4).
Their products are 2, 4, 6, 8, 10, 12, and 20 respectively.
Other pairs such as (0, 2) and (2, 4) have products 3 and 15 respectively, which are not divisible by 2.    
Example 2:

Input: nums = [1,2,3,4], k = 5
Output: 0
Explanation: There does not exist any pair of indices whose corresponding product is divisible by 5.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i], k <= 105

class Solution
{
public:
    long long countPairs(vector<int> &nums, int k)
    {
        int n = nums.size();
        long long ans = 0;
        unordered_map<int, int> mp;
        for(int i = 0; i < n; i++)
        {
            long long  gcd = __gcd(nums[i], k);
            long long  a = k / gcd;
            for(auto [val, cnt] : mp)
            {
                if(val % a == 0)
                {
                    ans += cnt;
                }
            }
            mp[gcd]++;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/counting-words-with-a-given-prefix/

You are given an array of strings words and a string pref.

Return the number of strings in words that contain pref as a prefix.

A prefix of a string s is any leading contiguous substring of s.

 

Example 1:

Input: words = ["pay","attention","practice","attend"], pref = "at"
Output: 2
Explanation: The 2 strings that contain "at" as a prefix are: "attention" and "attend".
Example 2:

Input: words = ["leetcode","win","loops","success"], pref = "code"
Output: 0
Explanation: There are no strings that contain "code" as a prefix.
 

Constraints:

1 <= words.length <= 100
1 <= words[i].length, pref.length <= 100
words[i] and pref consist of lowercase English letters.

class Solution
{
public:
    int prefixCount(vector<string> &words, string pref)
    {
        int res = 0;
        int len = pref.length();
        for(auto &s : words)
        {
            if(s.substr(0, len) == pref) ++res;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/minimum-number-of-steps-to-make-two-strings-anagram-ii/

You are given two strings s and t. In one step, you can append any character to either s or t.

Return the minimum number of steps to make s and t anagrams of each other.

An anagram of a string is a string that contains the same characters with a different (or the same) ordering.

 

Example 1:

Input: s = "leetcode", t = "coats"
Output: 7
Explanation: 
- In 2 steps, we can append the letters in "as" onto s = "leetcode", forming s = "leetcodeas".
- In 5 steps, we can append the letters in "leede" onto t = "coats", forming t = "coatsleede".
"leetcodeas" and "coatsleede" are now anagrams of each other.
We used a total of 2 + 5 = 7 steps.
It can be shown that there is no way to make them anagrams of each other with less than 7 steps.
Example 2:

Input: s = "night", t = "thing"
Output: 0
Explanation: The given strings are already anagrams of each other. Thus, we do not need any further steps.
 

Constraints:

1 <= s.length, t.length <= 2 * 105
s and t consist of lowercase English letters.

class Solution
{
public:
    int minSteps(string s, string t)
    {
        int res = 0;
        vector<int> freq(26, 0);
        for(auto ch : s) freq[ch - 'a']++;
        for(auto ch : t) freq[ch - 'a']--;
        for(int i = 0; i < 26; i++)
        {
            res += abs(freq[i]);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/minimum-time-to-complete-trips/

You are given an array time where time[i] denotes the time taken by the ith bus to complete one trip.

Each bus can make multiple trips successively; that is, the next trip can start immediately after completing the current trip. 
Also, each bus operates independently; that is, the trips of one bus do not influence the trips of any other bus.

You are also given an integer totalTrips, which denotes the number of trips all buses should make in total. Return the minimum time required for all buses to complete at least totalTrips trips.

 

Example 1:

Input: time = [1,2,3], totalTrips = 5
Output: 3
Explanation:
- At time t = 1, the number of trips completed by each bus are [1,0,0]. 
  The total number of trips completed is 1 + 0 + 0 = 1.
- At time t = 2, the number of trips completed by each bus are [2,1,0]. 
  The total number of trips completed is 2 + 1 + 0 = 3.
- At time t = 3, the number of trips completed by each bus are [3,1,1]. 
  The total number of trips completed is 3 + 1 + 1 = 5.
So the minimum time needed for all buses to complete at least 5 trips is 3.
Example 2:

Input: time = [2], totalTrips = 1
Output: 2
Explanation:
There is only one bus, and it will complete its first trip at t = 2.
So the minimum time needed to complete 1 trip is 2.
 

Constraints:

1 <= time.length <= 105
1 <= time[i], totalTrips <= 107

class Solution
{
public:
    long long minimumTime(vector<int> &time, int totalTrips)
    {
        long l = *min_element(time.begin(), time.end());
        long r = totalTrips * l;
        while(l < r)
        {
            long mid = l + (r - l) / 2;
            long long cnt = 0;
            for(int t : time)
            {
                cnt += mid / t;
            }
            if(cnt >= totalTrips)
            {
                r = mid;
            }
            else
            {
                l = mid + 1;
            }
        }
        return l;
    }
};


// Source https://leetcode.com/problems/minimum-time-to-finish-the-race/

You are given a 0-indexed 2D integer array tires where tires[i] = [fi, ri] indicates that the ith tire can finish its xth successive lap in fi * ri^(x-1) seconds.

For example, if fi = 3 and ri = 2, then the tire would finish its 1st lap in 3 seconds, its 2nd lap in 3 * 2 = 6 seconds, its 3rd lap in 3 * 2^2 = 12 seconds, etc.
You are also given an integer changeTime and an integer numLaps.

The race consists of numLaps laps and you may start the race with any tire. You have an unlimited supply of each tire and after every lap, 
you may change to any given tire (including the current tire type) if you wait changeTime seconds.

Return the minimum time to finish the race.

给你一个下标从 0 开始的二维整数数组 tires ，其中 tires[i] = [fi, ri] 表示第 i 种轮胎如果连续使用，第 x 圈需要耗时 fi * ri(x-1) 秒。

比方说，如果 fi = 3 且 ri = 2 ，且一直使用这种类型的同一条轮胎，那么该轮胎完成第 1 圈赛道耗时 3 秒，完成第 2 圈耗时 3 * 2 = 6 秒，完成第 3 圈耗时 3 * 22 = 12 秒，依次类推。
同时给你一个整数 changeTime 和一个整数 numLaps 。

比赛总共包含 numLaps 圈，你可以选择 任意 一种轮胎开始比赛。每一种轮胎都有 无数条 。每一圈后，你可以选择耗费 changeTime 秒 换成 任意一种轮胎（也可以换成当前种类的新轮胎）。

请你返回完成比赛需要耗费的 最少 时间。


Example 1:

Input: tires = [[2,3],[3,4]], changeTime = 5, numLaps = 4
Output: 21
Explanation: 
Lap 1: Start with tire 0 and finish the lap in 2 seconds.
Lap 2: Continue with tire 0 and finish the lap in 2 * 3 = 6 seconds.
Lap 3: Change tires to a new tire 0 for 5 seconds and then finish the lap in another 2 seconds.
Lap 4: Continue with tire 0 and finish the lap in 2 * 3 = 6 seconds.
Total time = 2 + 6 + 5 + 2 + 6 = 21 seconds.
The minimum time to complete the race is 21 seconds.
Example 2:

Input: tires = [[1,10],[2,2],[3,4]], changeTime = 6, numLaps = 5
Output: 25
Explanation: 
Lap 1: Start with tire 1 and finish the lap in 2 seconds.
Lap 2: Continue with tire 1 and finish the lap in 2 * 2 = 4 seconds.
Lap 3: Change tires to a new tire 1 for 6 seconds and then finish the lap in another 2 seconds.
Lap 4: Continue with tire 1 and finish the lap in 2 * 2 = 4 seconds.
Lap 5: Change tires to tire 0 for 6 seconds then finish the lap in another 1 second.
Total time = 2 + 4 + 6 + 2 + 4 + 6 + 1 = 25 seconds.
The minimum time to complete the race is 25 seconds. 
 

Constraints:

1 <= tires.length <= 105
tires[i].length == 2
1 <= fi, changeTime <= 105
2 <= ri <= 105
1 <= numLaps <= 1000

f[i], the minimum time to complete i laps

class Solution
{
public:

    int minimumFinishTime(vector<vector<int>>& tires, int changeTime, int numLaps)
    {
        vector<long> f(numLaps + 1, 1e9);
        for (auto &v : tires)
        {
            long lap_time = v[0];
            long tot_time = v[0];
            for (int i = 1; i <= numLaps; i++)
            {
                f[i] = min(f[i], tot_time);
                lap_time *= v[1];
                tot_time += lap_time;
                if (tot_time > 1e9)
                {
                    break;
                }
            }
        }
        for (int i = 2; i <= numLaps; i++)
        {
            for (int j = 1; j < i; j++)
            {
                f[i] = min(f[i], f[j] + changeTime + f[i - j]);
            }
        }
        return f[numLaps];
    }
};


// Source https://leetcode.com/problems/most-frequent-number-following-key-in-an-array/

You are given a 0-indexed integer array nums. You are also given an integer key, which is present in nums.

For every unique integer target in nums, count the number of times target immediately follows an occurrence of key in nums. In other words, count the number of indices i such that:

0 <= i <= nums.length - 2,
nums[i] == key and,
nums[i + 1] == target.
Return the target with the maximum count. The test cases will be generated such that the target with maximum count is unique.

 

Example 1:

Input: nums = [1,100,200,1,100], key = 1
Output: 100
Explanation: For target = 100, there are 2 occurrences at indices 1 and 4 which follow an occurrence of key.
No other integers follow an occurrence of key, so we return 100.
Example 2:

Input: nums = [2,2,2,2,3], key = 2
Output: 2
Explanation: For target = 2, there are 3 occurrences at indices 1, 2, and 3 which follow an occurrence of key.
For target = 3, there is only one occurrence at index 4 which follows an occurrence of key.
target = 2 has the maximum number of occurrences following an occurrence of key, so we return 2.
 

Constraints:

2 <= nums.length <= 1000
1 <= nums[i] <= 1000
The test cases will be generated such that the answer is unique.

class Solution
{
public:
    int mostFrequent(vector<int> &nums, int key)
    {
        int n = nums.size();
        unordered_map<int, int> mp;
        for (int i = 0; i < n - 1; i++)
        {
            if (nums[i] == key)
            {
                mp[nums[i + 1]]++;
            }
        }
        int res = 0, maxOccurence = 0;
        for (auto [val, freq] : mp)
        {
            if (freq > maxOccurence)
            {
                maxOccurence = freq;
                res = val;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/sort-the-jumbled-numbers/

You are given a 0-indexed integer array mapping which represents the mapping rule of a shuffled decimal system. mapping[i] = j means digit i should be mapped to digit j in this system.

The mapped value of an integer is the new integer obtained by replacing each occurrence of digit i in the integer with mapping[i] for all 0 <= i <= 9.

You are also given another integer array nums. Return the array nums sorted in non-decreasing order based on the mapped values of its elements.

Notes:

Elements with the same mapped values should appear in the same relative order as in the input.
The elements of nums should only be sorted based on their mapped values and not be replaced by them.
 

Example 1:

Input: mapping = [8,9,4,0,2,1,3,5,7,6], nums = [991,338,38]
Output: [338,38,991]
Explanation: 
Map the number 991 as follows:
1. mapping[9] = 6, so all occurrences of the digit 9 will become 6.
2. mapping[1] = 9, so all occurrences of the digit 1 will become 9.
Therefore, the mapped value of 991 is 669.
338 maps to 007, or 7 after removing the leading zeros.
38 maps to 07, which is also 7 after removing leading zeros.
Since 338 and 38 share the same mapped value, they should remain in the same relative order, so 338 comes before 38.
Thus, the sorted array is [338,38,991].
Example 2:

Input: mapping = [0,1,2,3,4,5,6,7,8,9], nums = [789,456,123]
Output: [123,456,789]
Explanation: 789 maps to 789, 456 maps to 456, and 123 maps to 123. Thus, the sorted array is [123,456,789].
 

Constraints:

mapping.length == 10
0 <= mapping[i] <= 9
All the values of mapping[i] are unique.
1 <= nums.length <= 3 * 104
0 <= nums[i] < 109

class Solution
{
public:

    int helper(vector<int> &mapping, int num)
    {
        if (num == 0) return mapping[0];
        int res = 0;
        int place = 1;
        while(num > 0)
        {
            res += place * (mapping[num % 10]);
            place *= 10;
            num /= 10;
        }
        return res;
    }

    vector<int> sortJumbled(vector<int> &mapping, vector<int> &nums)
    {
        int n = nums.size();
        vector<pair<int, int>> vec;
        vec.reserve(n);
        for (int i = 0; i < n; i++)
        {
            vec.push_back({helper(mapping, nums[i]), i});
        }
        sort(vec.begin(), vec.end());
        vector<int> ans(n);
        for (int i = 0; i < n; ++i)
        {
            ans[i] = nums[vec[i].second];
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/all-ancestors-of-a-node-in-a-directed-acyclic-graph/

You are given a positive integer n representing the number of nodes of a Directed Acyclic Graph (DAG). The nodes are numbered from 0 to n - 1 (inclusive).

You are also given a 2D integer array edges, where edges[i] = [fromi, toi] denotes that there is a unidirectional edge from fromi to toi in the graph.

Return a list answer, where answer[i] is the list of ancestors of the ith node, sorted in ascending order.

A node u is an ancestor of another node v if u can reach v via a set of edges.

 

Example 1:


Input: n = 8, edgeList = [[0,3],[0,4],[1,3],[2,4],[2,7],[3,5],[3,6],[3,7],[4,6]]
Output: [[],[],[],[0,1],[0,2],[0,1,3],[0,1,2,3,4],[0,1,2,3]]
Explanation:
The above diagram represents the input graph.
- Nodes 0, 1, and 2 do not have any ancestors.
- Node 3 has two ancestors 0 and 1.
- Node 4 has two ancestors 0 and 2.
- Node 5 has three ancestors 0, 1, and 3.
- Node 6 has five ancestors 0, 1, 2, 3, and 4.
- Node 7 has four ancestors 0, 1, 2, and 3.
Example 2:


Input: n = 5, edgeList = [[0,1],[0,2],[0,3],[0,4],[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]
Output: [[],[0],[0,1],[0,1,2],[0,1,2,3]]
Explanation:
The above diagram represents the input graph.
- Node 0 does not have any ancestor.
- Node 1 has one ancestor 0.
- Node 2 has two ancestors 0 and 1.
- Node 3 has three ancestors 0, 1, and 2.
- Node 4 has four ancestors 0, 1, 2, and 3.
 

Constraints:

1 <= n <= 1000
0 <= edges.length <= min(2000, n * (n - 1) / 2)
edges[i].length == 2
0 <= fromi, toi <= n - 1
fromi != toi
There are no duplicate edges.
The graph is directed and acyclic.

class Solution
{
public:
    vector<vector<int>> getAncestors(int n, vector<vector<int>> &edges)
    {
        vector<int> adj[n];
        vector<int> indegree(n);
        for (auto &v : edges)
        {
            adj[v[0]].push_back(v[1]);
            indegree[v[1]]++;
        }
        queue<int> q;
        for (int i = 0; i < n; i++)
        {
            if (indegree[i] == 0)
            {
                q.push(i);
            }
        }
        bitset<1001> ancestors[n];
        while (!q.empty())
        {
            int node = q.front();
            q.pop();
            for (auto child : adj[node])
            {
                ancestors[child] |= ancestors[node];
                ancestors[child].set(node);
                indegree[child]--;
                if (indegree[child] == 0)
                {
                    q.push(child);
                }
            }
        }
        vector<vector<int>> res(n);
        for (int i = 0; i < n; i++)
        {
            int cnt = ancestors[i].count();
            vector<int> temp;
            temp.reserve(cnt);
            for (int j = 0; j < n; j++)
            {
                if (ancestors[i].test(j))
                {
                    temp.push_back(j);
                }
            }
            res[i] = std::move(temp);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/minimum-number-of-moves-to-make-palindrome/

You are given a string s consisting only of lowercase English letters.

In one move, you can select any two adjacent characters of s and swap them.

Return the minimum number of moves needed to make s a palindrome.

Note that the input will be generated such that s can always be converted to a palindrome.

 

Example 1:

Input: s = "aabb"
Output: 2
Explanation:
We can obtain two palindromes from s, "abba" and "baab". 
- We can obtain "abba" from s in 2 moves: "aabb" -> "abab" -> "abba".
- We can obtain "baab" from s in 2 moves: "aabb" -> "abab" -> "baab".
Thus, the minimum number of moves needed to make s a palindrome is 2.
Example 2:

Input: s = "letelt"
Output: 2
Explanation:
One of the palindromes we can obtain from s in 2 moves is "lettel".
One of the ways we can obtain it is "letelt" -> "letetl" -> "lettel".
Other palindromes such as "tleelt" can also be obtained in 2 moves.
It can be shown that it is not possible to obtain a palindrome in less than 2 moves.
 

Constraints:

1 <= s.length <= 2000
s consists only of lowercase English letters.
s can be converted to a palindrome using a finite number of moves.

class Solution
{
public:
    int minMovesToMakePalindrome(string s)
    {
        int n = s.length();
        int i = 0, j = n - 1;
        int res = 0;
        while(i < j)
        {
            if(s[i] == s[j])
            {
                i++;
                j--;
                continue;
            }
            int k = i;
            while(k < j && s[k] != s[j])
            {
                k++;
            }
            if(k == j)
            {
                /* element is odd and should
                be present at the middle of the string;*/
                swap(s[j - 1], s[j]);
                ++res;
                continue;
            }
            while(s[i] != s[j])
            {
                swap(s[k - 1], s[k]);
                ++res;
                k--;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/cells-in-a-range-on-an-excel-sheet/

A cell (r, c) of an excel sheet is represented as a string "<col><row>" where:

<col> denotes the column number c of the cell. It is represented by alphabetical letters.
For example, the 1st column is denoted by 'A', the 2nd by 'B', the 3rd by 'C', and so on.
<row> is the row number r of the cell. The rth row is represented by the integer r.
You are given a string s in the format "<col1><row1>:<col2><row2>", where <col1> represents the column c1, <row1> represents the row r1, <col2> represents the column c2, and <row2> represents the row r2, 
such that r1 <= r2 and c1 <= c2.

Return the list of cells (x, y) such that r1 <= x <= r2 and c1 <= y <= c2. The cells should be represented as strings in the format mentioned above 
and be sorted in non-decreasing order first by columns and then by rows.

 

Example 1:


Input: s = "K1:L2"
Output: ["K1","K2","L1","L2"]
Explanation:
The above diagram shows the cells which should be present in the list.
The red arrows denote the order in which the cells should be presented.
Example 2:


Input: s = "A1:F1"
Output: ["A1","B1","C1","D1","E1","F1"]
Explanation:
The above diagram shows the cells which should be present in the list.
The red arrow denotes the order in which the cells should be presented.
 

Constraints:

s.length == 5
'A' <= s[0] <= s[3] <= 'Z'
'1' <= s[1] <= s[4] <= '9'
s consists of uppercase English letters, digits and ':'.

class Solution
{
public:
    vector<string> cellsInRange(string s)
    {
        vector<string> ans;
        int cnt = (s[3] - s[0] + 1) * (s[4] - s[1] + 1);
        ans.reserve(cnt);
        for(char i = s[0]; i <= s[3]; i++)
        {
            for(char j = s[1]; j <= s[4]; j++)
            {
                ans.emplace_back(string{i, j});
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/append-k-integers-with-minimal-sum/

You are given an integer array nums and an integer k. Append k unique positive integers that do not appear in nums to nums such that the resulting total sum is minimum.

Return the sum of the k integers appended to nums.

 

Example 1:

Input: nums = [1,4,25,10,25], k = 2
Output: 5
Explanation: The two unique positive integers that do not appear in nums which we append are 2 and 3.
The resulting sum of nums is 1 + 4 + 25 + 10 + 25 + 2 + 3 = 70, which is the minimum.
The sum of the two integers appended is 2 + 3 = 5, so we return 5.
Example 2:

Input: nums = [5,6], k = 6
Output: 25
Explanation: The six unique positive integers that do not appear in nums which we append are 1, 2, 3, 4, 7, and 8.
The resulting sum of nums is 5 + 6 + 1 + 2 + 3 + 4 + 7 + 8 = 36, which is the minimum. 
The sum of the six integers appended is 1 + 2 + 3 + 4 + 7 + 8 = 25, so we return 25.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 109
1 <= k <= 108

class Solution
{
public:

    long getSum(long x)
    {
        return (x * (x + 1)) / 2;
    }

    long long minimalKSum(vector<int> &nums, int k)
    {
        sort(nums.begin(), nums.end());
        int n = nums.size();
        long sum = 0;
        int mn = min(k, nums[0] - 1);
        sum += getSum(mn);
        k -= mn;
        if (k == 0) return sum;
        for(int i = 0; i < n - 1; ++i)
        {
            if(nums[i] == nums[i + 1]) continue;
            int addn = min(k, nums[i + 1] - nums[i] - 1);
            k -= addn;
            sum += (getSum(nums[i] + addn) - getSum(nums[i]));
            if (k == 0) return sum;
        }
        sum += (getSum(nums.back() + k) - getSum(nums.back()));
        return sum;
    }
};


// Source https://leetcode.com/problems/create-binary-tree-from-descriptions/

You are given a 2D integer array descriptions where descriptions[i] = [parenti, childi, isLefti] indicates that parenti is the parent of childi in a binary tree of unique values. Furthermore,

If isLefti == 1, then childi is the left child of parenti.
If isLefti == 0, then childi is the right child of parenti.
Construct the binary tree described by descriptions and return its root.

The test cases will be generated such that the binary tree is valid.

 

Example 1:


Input: descriptions = [[20,15,1],[20,17,0],[50,20,1],[50,80,0],[80,19,1]]
Output: [50,20,80,15,17,19]
Explanation: The root node is the node with value 50 since it has no parent.
The resulting binary tree is shown in the diagram.
Example 2:


Input: descriptions = [[1,2,1],[2,3,0],[3,4,1]]
Output: [1,2,null,null,3,4]
Explanation: The root node is the node with value 1 since it has no parent.
The resulting binary tree is shown in the diagram.
 

Constraints:

1 <= descriptions.length <= 104
descriptions[i].length == 3
1 <= parenti, childi <= 105
0 <= isLefti <= 1
The binary tree described by descriptions is valid.

class Solution
{
public:

    TreeNode *createBinaryTree(vector<vector<int>> &descriptions)
    {
        unordered_map<int, TreeNode *> mp;
        for(auto &v : descriptions)
        {
            mp[v[1]] =  new TreeNode(v[1]);
        }
        TreeNode *root = nullptr;
        for(auto &v : descriptions)
        {
            if(mp.find(v[0]) == mp.end())
            {
                root = new TreeNode(v[0]);
                mp[v[0]] = root;
            }
            TreeNode *parent = mp[v[0]];
            TreeNode *cur =  mp[v[1]];
            if(v[2] == 1)
            {
                parent->left = cur;
            }
            else
            {
                parent->right = cur;
            }
        }
        return root;
    }
};


// Source https://leetcode.com/problems/replace-non-coprime-numbers-in-array/

You are given an array of integers nums. Perform the following steps:

Find any two adjacent numbers in nums that are non-coprime.
If no such numbers are found, stop the process.
Otherwise, delete the two numbers and replace them with their LCM (Least Common Multiple).
Repeat this process as long as you keep finding two adjacent non-coprime numbers.
Return the final modified array. It can be shown that replacing adjacent non-coprime numbers in any arbitrary order will lead to the same result.

The test cases are generated such that the values in the final array are less than or equal to 108.

Two values x and y are non-coprime if GCD(x, y) > 1 where GCD(x, y) is the Greatest Common Divisor of x and y.

 

Example 1:

Input: nums = [6,4,3,2,7,6,2]
Output: [12,7,6]
Explanation: 
- (6, 4) are non-coprime with LCM(6, 4) = 12. Now, nums = [12,3,2,7,6,2].
- (12, 3) are non-coprime with LCM(12, 3) = 12. Now, nums = [12,2,7,6,2].
- (12, 2) are non-coprime with LCM(12, 2) = 12. Now, nums = [12,7,6,2].
- (6, 2) are non-coprime with LCM(6, 2) = 6. Now, nums = [12,7,6].
There are no more adjacent non-coprime numbers in nums.
Thus, the final modified array is [12,7,6].
Note that there are other ways to obtain the same resultant array.
Example 2:

Input: nums = [2,2,1,1,3,3,3]
Output: [2,1,1,3]
Explanation: 
- (3, 3) are non-coprime with LCM(3, 3) = 3. Now, nums = [2,2,1,1,3,3].
- (3, 3) are non-coprime with LCM(3, 3) = 3. Now, nums = [2,2,1,1,3].
- (2, 2) are non-coprime with LCM(2, 2) = 2. Now, nums = [2,1,1,3].
There are no more adjacent non-coprime numbers in nums.
Thus, the final modified array is [2,1,1,3].
Note that there are other ways to obtain the same resultant array.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 105
The test cases are generated such that the values in the final array are less than or equal to 108.

class Solution
{
public:
    vector<int> replaceNonCoprimes(vector<int> &nums)
    {
        int n = nums.size();
        stack<int> st;
        for(int i = 0; i < n; i++)
        {
            st.push(nums[i]);
            while(st.size() > 1)
            {
                int a = st.top();
                st.pop();
                int b = st.top();
                st.pop();
                int t = __gcd(a, b);
                if(t > 1)
                {
                    int lcm = 1ll * a * b / t;
                    st.push(lcm);
                }
                else
                {
                    st.push(b);
                    st.push(a);
                    break;
                }
            }
        }
        vector<int> ans;
        ans.reserve(st.size());
        while(!st.empty())
        {
            ans.push_back(st.top());
            st.pop();
        }
        reverse(ans.begin(), ans.end());
        return ans;
    }
};


// Source https://leetcode.com/problems/find-all-k-distant-indices-in-an-array/

You are given a 0-indexed integer array nums and two integers key and k. A k-distant index is an index i of nums for which there exists at least one index j such that |i - j| <= k and nums[j] == key.

Return a list of all k-distant indices sorted in increasing order.

 

Example 1:

Input: nums = [3,4,9,1,3,9,5], key = 9, k = 1
Output: [1,2,3,4,5,6]
Explanation: Here, nums[2] == key and nums[5] == key.
- For index 0, |0 - 2| > k and |0 - 5| > k, so there is no j where |0 - j| <= k and nums[j] == key. Thus, 0 is not a k-distant index.
- For index 1, |1 - 2| <= k and nums[2] == key, so 1 is a k-distant index.
- For index 2, |2 - 2| <= k and nums[2] == key, so 2 is a k-distant index.
- For index 3, |3 - 2| <= k and nums[2] == key, so 3 is a k-distant index.
- For index 4, |4 - 5| <= k and nums[5] == key, so 4 is a k-distant index.
- For index 5, |5 - 5| <= k and nums[5] == key, so 5 is a k-distant index.
- For index 6, |6 - 5| <= k and nums[5] == key, so 6 is a k-distant index.
Thus, we return [1,2,3,4,5,6] which is sorted in increasing order. 
Example 2:

Input: nums = [2,2,2,2,2], key = 2, k = 2
Output: [0,1,2,3,4]
Explanation: For all indices i in nums, there exists some index j such that |i - j| <= k and nums[j] == key, so every index is a k-distant index. 
Hence, we return [0,1,2,3,4].
 

Constraints:

1 <= nums.length <= 1000
1 <= nums[i] <= 1000
key is an integer from the array nums.
1 <= k <= nums.length

class Solution
{
public:
    vector<int> findKDistantIndices(vector<int> &nums, int key, int k)
    {
        int n = nums.size();
        vector<int> vec;
        vec.reserve(n);
        for (int i = 0; i < n; i++)
        {
            if (nums[i] != key) continue;
            int start = max(i - k , 0);
            if (!vec.empty()) start = max(start, vec.back() + 1);
            int end = min(i + k, n - 1);
            for (int j = start; j <= end; j++)
            {
                vec.push_back(j);
            }
        }
        return vec;
    }
};


// Source https://leetcode.com/problems/count-artifacts-that-can-be-extracted/

There is an n x n 0-indexed grid with some artifacts buried in it. You are given the integer n and a 0-indexed 2D integer array artifacts describing the positions of the rectangular artifacts 
where artifacts[i] = [r1i, c1i, r2i, c2i] denotes that the ith artifact is buried in the subgrid where:

(r1i, c1i) is the coordinate of the top-left cell of the ith artifact and
(r2i, c2i) is the coordinate of the bottom-right cell of the ith artifact.
You will excavate some cells of the grid and remove all the mud from them. If the cell has a part of an artifact buried underneath, it will be uncovered. 
If all the parts of an artifact are uncovered, you can extract it.

Given a 0-indexed 2D integer array dig where dig[i] = [ri, ci] indicates that you will excavate the cell (ri, ci), return the number of artifacts that you can extract.

The test cases are generated such that:

No two artifacts overlap.
Each artifact only covers at most 4 cells.
The entries of dig are unique.

存在一个 n x n 大小、下标从 0 开始的网格，网格中埋着一些工件。给你一个整数 n 和一个下标从 0 开始的二维整数数组 artifacts ，artifacts 描述了矩形工件的位置，
其中 artifacts[i] = [r1i, c1i, r2i, c2i] 表示第 i 个工件在子网格中的填埋情况：

(r1i, c1i) 是第 i 个工件 左上 单元格的坐标，且
(r2i, c2i) 是第 i 个工件 右下 单元格的坐标。
你将会挖掘网格中的一些单元格，并清除其中的填埋物。如果单元格中埋着工件的一部分，那么该工件这一部分将会裸露出来。如果一个工件的所有部分都都裸露出来，你就可以提取该工件。

给你一个下标从 0 开始的二维整数数组 dig ，其中 dig[i] = [ri, ci] 表示你将会挖掘单元格 (ri, ci) ，返回你可以提取的工件数目。

生成的测试用例满足：

不存在重叠的两个工件。
每个工件最多只覆盖 4 个单元格。
dig 中的元素互不相同。

Example 1:


Input: n = 2, artifacts = [[0,0,0,0],[0,1,1,1]], dig = [[0,0],[0,1]]
Output: 1
Explanation: 
The different colors represent different artifacts. Excavated cells are labeled with a 'D' in the grid.
There is 1 artifact that can be extracted, namely the red artifact.
The blue artifact has one part in cell (1,1) which remains uncovered, so we cannot extract it.
Thus, we return 1.
Example 2:


Input: n = 2, artifacts = [[0,0,0,0],[0,1,1,1]], dig = [[0,0],[0,1],[1,1]]
Output: 2
Explanation: Both the red and blue artifacts have all parts uncovered (labeled with a 'D') and can be extracted, so we return 2. 
 

Constraints:

1 <= n <= 1000
1 <= artifacts.length, dig.length <= min(n2, 105)
artifacts[i].length == 4
dig[i].length == 2
0 <= r1i, c1i, r2i, c2i, ri, ci <= n - 1
r1i <= r2i
c1i <= c2i
No two artifacts will overlap.
The number of cells covered by an artifact is at most 4.
The entries of dig are unique.

class Solution
{
public:
    int digged[1000][1000];

    int digArtifacts(int n, vector<vector<int>> &artifacts, vector<vector<int>> &dig)
    {
        for (auto &v : dig)
        {
            digged[v[0]][v[1]] = 1;
        }
        int ans = 0;
        for (auto &v : artifacts)
        {
            int rst = v[0], cst = v[1], rend = v[2], cend = v[3];
            bool flag = true;
            for(int x = rst; x <= rend; x++)
            {
                for(int y = cst; y <= cend; y++)
                {
                    if(digged[x][y] == 0)
                    {
                        flag = false;
                        break;
                    }
                }
            }
            if(flag) ++ans;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/maximize-the-topmost-element-after-k-moves/

You are given a 0-indexed integer array nums representing the contents of a pile, where nums[0] is the topmost element of the pile.

In one move, you can perform either of the following:

If the pile is not empty, remove the topmost element of the pile.
If there are one or more removed elements, add any one of them back onto the pile. This element becomes the new topmost element.
You are also given an integer k, which denotes the total number of moves to be made.

Return the maximum value of the topmost element of the pile possible after exactly k moves. In case it is not possible to obtain a non-empty pile after k moves, return -1.

给你一个下标从 0 开始的整数数组 nums ，它表示一个 栈 ，其中 nums[0] 是栈顶的元素。

每一次操作中，你可以执行以下操作 之一 ：

如果栈非空，那么 删除 栈顶端的元素。
如果存在 1 个或者多个被删除的元素，你可以从它们中选择任何一个，添加 回栈顶，这个元素成为新的栈顶元素。
同时给你一个整数 k ，它表示你总共需要执行操作的次数。

请你返回 恰好 执行 k 次操作以后，栈顶元素的 最大值 。如果执行完 k 次操作以后，栈一定为空，请你返回 -1 。

Example 1:

Input: nums = [5,2,2,4,0,6], k = 4
Output: 5
Explanation:
One of the ways we can end with 5 at the top of the pile after 4 moves is as follows:
- Step 1: Remove the topmost element = 5. The pile becomes [2,2,4,0,6].
- Step 2: Remove the topmost element = 2. The pile becomes [2,4,0,6].
- Step 3: Remove the topmost element = 2. The pile becomes [4,0,6].
- Step 4: Add 5 back onto the pile. The pile becomes [5,4,0,6].
Note that this is not the only way to end with 5 at the top of the pile. It can be shown that 5 is the largest answer possible after 4 moves.
Example 2:

Input: nums = [2], k = 1
Output: -1
Explanation: 
In the first move, our only option is to pop the topmost element of the pile.
Since it is not possible to obtain a non-empty pile after one move, we return -1.
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i], k <= 109

class Solution
{
public:
    int maximumTop(vector<int> &nums, int k)
    {
        int n = nums.size();
        if(k == 0) return nums[0];
        if(n == 1 && k % 2 == 1) return -1;
        if(n < k) return *max_element(nums.begin(), nums.end());
        if(n == k) return *max_element(nums.begin(), nums.end() - 1);
        if(k == 1) return nums[1];
        int res = *max_element(nums.begin(), nums.begin() + k - 1);
        res = max(res, nums[k]);
        return res;
    }
};


// Source https://leetcode.com/problems/minimum-weighted-subgraph-with-the-required-paths/

You are given an integer n denoting the number of nodes of a weighted directed graph. The nodes are numbered from 0 to n - 1.

You are also given a 2D integer array edges where edges[i] = [fromi, toi, weighti] denotes that there exists a directed edge from fromi to toi with weight weighti.

Lastly, you are given three distinct integers src1, src2, and dest denoting three distinct nodes of the graph.

Return the minimum weight of a subgraph of the graph such that it is possible to reach dest from both src1 and src2 via a set of edges of this subgraph. 
In case such a subgraph does not exist, return -1.

A subgraph is a graph whose vertices and edges are subsets of the original graph. The weight of a subgraph is the sum of weights of its constituent edges.

给你一个整数 n ，它表示一个 带权有向 图的节点数，节点编号为 0 到 n - 1 。

同时给你一个二维整数数组 edges ，其中 edges[i] = [fromi, toi, weighti] ，表示从 fromi 到 toi 有一条边权为 weighti 的 有向 边。

最后，给你三个 互不相同 的整数 src1 ，src2 和 dest ，表示图中三个不同的点。

请你从图中选出一个 边权和最小 的子图，使得从 src1 和 src2 出发，在这个子图中，都 可以 到达 dest 。如果这样的子图不存在，请返回 -1 。

子图 中的点和边都应该属于原图的一部分。子图的边权和定义为它所包含的所有边的权值之和。


Example 1:


Input: n = 6, edges = [[0,2,2],[0,5,6],[1,0,3],[1,4,5],[2,1,1],[2,3,3],[2,3,4],[3,4,2],[4,5,1]], src1 = 0, src2 = 1, dest = 5
Output: 9
Explanation:
The above figure represents the input graph.
The blue edges represent one of the subgraphs that yield the optimal answer.
Note that the subgraph [[1,0,3],[0,5,6]] also yields the optimal answer. It is not possible to get a subgraph with less weight satisfying all the constraints.
Example 2:


Input: n = 3, edges = [[0,1,1],[2,1,1]], src1 = 0, src2 = 1, dest = 2
Output: -1
Explanation:
The above figure represents the input graph.
It can be seen that there does not exist any path from node 1 to node 2, hence there are no subgraphs satisfying all the constraints.
 

Constraints:

3 <= n <= 105
0 <= edges.length <= 105
edges[i].length == 3
0 <= fromi, toi, src1, src2, dest <= n - 1
fromi != toi
src1, src2, and dest are pairwise distinct.
1 <= weight[i] <= 105

class Solution
{
public:

    vector<long> dijkstra(int src, int n, vector<vector<pair<int, int>>> &graph)
    {
        vector<bool> visited(n);
        vector<long> dist(n, 1e18);
        dist[src] = 0;
        priority_queue<pair<long, int>, vector<pair<long, int>>, greater<pair<long, int>>> pq;
        pq.push({0, src});
        while(!pq.empty())
        {
            auto [cost, node] = pq.top();
            pq.pop();
            if(visited[node]) continue;
            visited[node] = true;
            for(auto [next, w] : graph[node])
            {
                if(dist[node] + w < dist[next])
                {
                    dist[next] = dist[node] + w;
                    pq.push({dist[next], next});
                }
            }
        }
        return dist;
    }

    long long minimumWeight(int n, vector<vector<int>> &edges, int src1, int src2, int dest)
    {
        vector<vector<pair<int, int>>> graph(n), rev_graph(n);
        for(auto &v : edges)
        {
            graph[v[0]].push_back({v[1], v[2]});
            rev_graph[v[1]].push_back({v[0], v[2]});
        }
        vector<long> dist1 = dijkstra(src1, n, graph);
        vector<long> dist2 = dijkstra(src2, n, graph);
        vector<long> dist3 = dijkstra(dest, n, rev_graph);
        long ans = 1e18;
        for(int i = 0; i < n; i++)
        {
            if(dist1[i] != 1e18 && dist2[i] != 1e18 && dist3[i] != 1e18)
                ans = min(ans, dist1[i] + dist2[i] + dist3[i]);
        }
        return ans == 1e18 ? -1 : ans;
    }
};


// Source https://leetcode.com/problems/divide-array-into-equal-pairs/

You are given an integer array nums consisting of 2 * n integers.

You need to divide nums into n pairs such that:

Each element belongs to exactly one pair.
The elements present in a pair are equal.
Return true if nums can be divided into n pairs, otherwise return false.

 

Example 1:

Input: nums = [3,2,3,2,2,2]
Output: true
Explanation: 
There are 6 elements in nums, so they should be divided into 6 / 2 = 3 pairs.
If nums is divided into the pairs (2, 2), (3, 3), and (2, 2), it will satisfy all the conditions.
Example 2:

Input: nums = [1,2,3,4]
Output: false
Explanation: 
There is no way to divide nums into 4 / 2 = 2 pairs such that the pairs satisfy every condition.
 

Constraints:

nums.length == 2 * n
1 <= n <= 500
1 <= nums[i] <= 500

class Solution
{
public:
    bool divideArray(vector<int> &nums)
    {
        unordered_map<int, int> mp;
        for(auto val : nums)
        {
            mp[val]++;
        }
        for(auto [val, freq] : mp)
        {
            if(freq % 2) return false;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/maximize-number-of-subsequences-in-a-string/

You are given a 0-indexed string text and another 0-indexed string pattern of length 2, both of which consist of only lowercase English letters.

You can add either pattern[0] or pattern[1] anywhere in text exactly once. Note that the character can be added even at the beginning or at the end of text.

Return the maximum number of times pattern can occur as a subsequence of the modified text.

A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.

 

Example 1:

Input: text = "abdcdbc", pattern = "ac"
Output: 4
Explanation:
If we add pattern[0] = 'a' in between text[1] and text[2], we get "abadcdbc". Now, the number of times "ac" occurs as a subsequence is 4.
Some other strings which have 4 subsequences "ac" after adding a character to text are "aabdcdbc" and "abdacdbc".
However, strings such as "abdcadbc", "abdccdbc", and "abdcdbcc", although obtainable, have only 3 subsequences "ac" and are thus suboptimal.
It can be shown that it is not possible to get more than 4 subsequences "ac" by adding only one character.
Example 2:

Input: text = "aabb", pattern = "ab"
Output: 6
Explanation:
Some of the strings which can be obtained from text and have 6 subsequences "ab" are "aaabb", "aaabb", and "aabbb".
 

Constraints:

1 <= text.length <= 105
pattern.length == 2
text and pattern consist only of lowercase English letters.

class Solution
{
public:
    long long maximumSubsequenceCount(string text, string pattern)
    {
        long long ls = 0;
        long long rs = 0;
        long long res = 0;
        for (auto ch : text)
        {
            if (ch == pattern[0])
            {
                ++ls;
            }
            else if (ch == pattern[1])
            {
                res += ls;
                ++rs;
            }
        }
        if (pattern[0] == pattern[1])
            return (ls + 1) * (ls) / 2;

        return max(ls, rs) + res;
    }
};


// Source https://leetcode.com/problems/minimum-operations-to-halve-array-sum/

You are given an array nums of positive integers. In one operation, you can choose any number from nums and reduce it to exactly half the number. 
(Note that you may choose this reduced number in future operations.)

Return the minimum number of operations to reduce the sum of nums by at least half.

 

Example 1:

Input: nums = [5,19,8,1]
Output: 3
Explanation: The initial sum of nums is equal to 5 + 19 + 8 + 1 = 33.
The following is one of the ways to reduce the sum by at least half:
Pick the number 19 and reduce it to 9.5.
Pick the number 9.5 and reduce it to 4.75.
Pick the number 8 and reduce it to 4.
The final array is [5, 4.75, 4, 1] with a total sum of 5 + 4.75 + 4 + 1 = 14.75. 
The sum of nums has been reduced by 33 - 14.75 = 18.25, which is at least half of the initial sum, 18.25 >= 33/2 = 16.5.
Overall, 3 operations were used so we return 3.
It can be shown that we cannot reduce the sum by at least half in less than 3 operations.
Example 2:

Input: nums = [3,8,20]
Output: 3
Explanation: The initial sum of nums is equal to 3 + 8 + 20 = 31.
The following is one of the ways to reduce the sum by at least half:
Pick the number 20 and reduce it to 10.
Pick the number 10 and reduce it to 5.
Pick the number 3 and reduce it to 1.5.
The final array is [1.5, 8, 5] with a total sum of 1.5 + 8 + 5 = 14.5. 
The sum of nums has been reduced by 31 - 14.5 = 16.5, which is at least half of the initial sum, 16.5 >= 31/2 = 16.5.
Overall, 3 operations were used so we return 3.
It can be shown that we cannot reduce the sum by at least half in less than 3 operations.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 107

class Solution
{
public:
    int halveArray(vector<int> &nums)
    {
        priority_queue<double> pq(nums.begin(), nums.end());
        double total = accumulate(nums.begin(), nums.end(), 0.0);
        double sum = 0.0;
        double target = total / 2;
        int res = 0;
        while (sum < target)
        {
            auto top = pq.top();
            pq.pop();
            sum += top / 2;
            ++res;
            pq.push(top / 2);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/minimum-white-tiles-after-covering-with-carpets/

You are given a 0-indexed binary string floor, which represents the colors of tiles on a floor:

floor[i] = '0' denotes that the ith tile of the floor is colored black.
On the other hand, floor[i] = '1' denotes that the ith tile of the floor is colored white.
You are also given numCarpets and carpetLen. You have numCarpets black carpets, each of length carpetLen tiles. 
Cover the tiles with the given carpets such that the number of white tiles still visible is minimum. Carpets may overlap one another.

Return the minimum number of white tiles still visible.

给你一个下标从 0 开始的 二进制 字符串 floor ，它表示地板上砖块的颜色。

floor[i] = '0' 表示地板上第 i 块砖块的颜色是 黑色 。
floor[i] = '1' 表示地板上第 i 块砖块的颜色是 白色 。
同时给你 numCarpets 和 carpetLen 。你有 numCarpets 条 黑色 的地毯，每一条 黑色 的地毯长度都为 carpetLen 块砖块。请你使用这些地毯去覆盖砖块，使得未被覆盖的剩余 白色 砖块的数目 最小 。
地毯相互之间可以覆盖。

请你返回没被覆盖的白色砖块的 最少 数目。


Example 1:


Input: floor = "10110101", numCarpets = 2, carpetLen = 2
Output: 2
Explanation: 
The figure above shows one way of covering the tiles with the carpets such that only 2 white tiles are visible.
No other way of covering the tiles with the carpets can leave less than 2 white tiles visible.
Example 2:


Input: floor = "11111", numCarpets = 2, carpetLen = 3
Output: 0
Explanation: 
The figure above shows one way of covering the tiles with the carpets such that no white tiles are visible.
Note that the carpets are able to overlap one another.
 

Constraints:

1 <= carpetLen <= floor.length <= 1000
floor[i] is either '0' or '1'.
1 <= numCarpets <= 1000

class Solution
{
public:
    int n;
    int dp[1001][1001];

    int recur(string &s, int nc, int carpetLen, vector<int> &pref, int i)
    {
        if(i < 0) return 0;
        if(nc == 0) return pref[i];
        if(dp[i][nc] != -1) return dp[i][nc];
        int take = recur(s, nc - 1, carpetLen, pref, i - carpetLen);
        int not_take = (s[i] - '0') + recur(s, nc, carpetLen, pref, i - 1);
        return dp[i][nc] = min(take, not_take);
    }

    int minimumWhiteTiles(string floor, int numCarpets, int carpetLen)
    {
        n = floor.length();
        memset(dp, -1, sizeof(dp));
        vector<int> pref(n);
        int sum = 0;
        for(int i = 0; i < n; i++)
        {
            sum += (floor[i] - '0');
            pref[i] = sum;
        }
        return recur(floor, numCarpets, carpetLen, pref, n - 1);
    }
};


// Source https://leetcode.com/problems/count-hills-and-valleys-in-an-array/

You are given a 0-indexed integer array nums. An index i is part of a hill in nums if the closest non-equal neighbors of i are smaller than nums[i]. 
Similarly, an index i is part of a valley in nums if the closest non-equal neighbors of i are larger than nums[i]. 
Adjacent indices i and j are part of the same hill or valley if nums[i] == nums[j].

Note that for an index to be part of a hill or valley, it must have a non-equal neighbor on both the left and right of the index.

Return the number of hills and valleys in nums.

给你一个下标从 0 开始的整数数组 nums 。如果两侧距 i 最近的不相等邻居的值均小于 nums[i] ，则下标 i 是 nums 中，某个峰的一部分。
类似地，如果两侧距 i 最近的不相等邻居的值均大于 nums[i] ，则下标 i 是 nums 中某个谷的一部分。
对于相邻下标 i 和 j ，如果 nums[i] == nums[j] ， 则认为这两下标属于 同一个 峰或谷。

注意，要使某个下标所做峰或谷的一部分，那么它左右两侧必须 都 存在不相等邻居。

返回 nums 中峰和谷的数量。

Example 1:

Input: nums = [2,4,1,1,6,5]
Output: 3
Explanation:
At index 0: There is no non-equal neighbor of 2 on the left, so index 0 is neither a hill nor a valley.
At index 1: The closest non-equal neighbors of 4 are 2 and 1. Since 4 > 2 and 4 > 1, index 1 is a hill. 
At index 2: The closest non-equal neighbors of 1 are 4 and 6. Since 1 < 4 and 1 < 6, index 2 is a valley.
At index 3: The closest non-equal neighbors of 1 are 4 and 6. Since 1 < 4 and 1 < 6, index 3 is a valley, but note that it is part of the same valley as index 2.
At index 4: The closest non-equal neighbors of 6 are 1 and 5. Since 6 > 1 and 6 > 5, index 4 is a hill.
At index 5: There is no non-equal neighbor of 5 on the right, so index 5 is neither a hill nor a valley. 
There are 3 hills and valleys so we return 3.
Example 2:

Input: nums = [6,6,5,5,4,1]
Output: 0
Explanation:
At index 0: There is no non-equal neighbor of 6 on the left, so index 0 is neither a hill nor a valley.
At index 1: There is no non-equal neighbor of 6 on the left, so index 1 is neither a hill nor a valley.
At index 2: The closest non-equal neighbors of 5 are 6 and 4. Since 5 < 6 and 5 > 4, index 2 is neither a hill nor a valley.
At index 3: The closest non-equal neighbors of 5 are 6 and 4. Since 5 < 6 and 5 > 4, index 3 is neither a hill nor a valley.
At index 4: The closest non-equal neighbors of 4 are 5 and 1. Since 4 < 5 and 4 > 1, index 4 is neither a hill nor a valley.
At index 5: There is no non-equal neighbor of 1 on the right, so index 5 is neither a hill nor a valley.
There are 0 hills and valleys so we return 0.
 

Constraints:

3 <= nums.length <= 100
1 <= nums[i] <= 100

class Solution
{
public:
    int countHillValley(vector<int> &nums)
    {
        int n = nums.size();
        vector<int> vec;
        vec.reserve(n);
        for(int i = 0; i < n; i++)
        {
            vec.push_back(nums[i]);
            int j = i + 1;
            for(; j < n && nums[i] == nums[j]; j++);
            i = j - 1;
        }
        int len = vec.size();
        int res = 0;
        for(int i = 1; i < len - 1; i++)
        {
            if(vec[i - 1] > vec[i] && vec[i + 1] > vec[i]) { ++res; continue; }
            if(vec[i - 1] < vec[i] && vec[i + 1] < vec[i]) ++res;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/count-collisions-on-a-road/

There are n cars on an infinitely long road. The cars are numbered from 0 to n - 1 from left to right and each car is present at a unique point.

You are given a 0-indexed string directions of length n. directions[i] can be either 'L', 'R', or 'S' denoting whether the ith car is moving towards the left, towards the right, or staying at its current point respectively. 
Each moving car has the same speed.

The number of collisions can be calculated as follows:

When two cars moving in opposite directions collide with each other, the number of collisions increases by 2.
When a moving car collides with a stationary car, the number of collisions increases by 1.
After a collision, the cars involved can no longer move and will stay at the point where they collided. Other than that, cars cannot change their state or direction of motion.

Return the total number of collisions that will happen on the road.

 

Example 1:

Input: directions = "RLRSLL"
Output: 5
Explanation:
The collisions that will happen on the road are:
- Cars 0 and 1 will collide with each other. Since they are moving in opposite directions, the number of collisions becomes 0 + 2 = 2.
- Cars 2 and 3 will collide with each other. Since car 3 is stationary, the number of collisions becomes 2 + 1 = 3.
- Cars 3 and 4 will collide with each other. Since car 3 is stationary, the number of collisions becomes 3 + 1 = 4.
- Cars 4 and 5 will collide with each other. After car 4 collides with car 3, it will stay at the point of collision and get hit by car 5. The number of collisions becomes 4 + 1 = 5.
Thus, the total number of collisions that will happen on the road is 5. 
Example 2:

Input: directions = "LLRR"
Output: 0
Explanation:
No cars will collide with each other. Thus, the total number of collisions that will happen on the road is 0.
 

Constraints:

1 <= directions.length <= 105
directions[i] is either 'L', 'R', or 'S'.

LLRRLRSRLSLRLLRR
   RRLRSRLSLRLL

class Solution
{
public:
    int countCollisions(string s)
    {
        int n = s.size();
        int i = 0, j = n - 1;
        while(i < n && s[i] == 'L') i++;
        while(j >= 0 && s[j] == 'R') j--;
        int cnt_S = 0;
        for(int k = i; k <= j; k++)
        {
            if(s[k] == 'S') cnt_S++;
        }
        return (i <= j) ? (j - i - cnt_S + 1) : 0;
    }
};


// Source https://leetcode.com/problems/maximum-points-in-an-archery-competition/

Alice and Bob are opponents in an archery competition. The competition has set the following rules:

Alice first shoots numArrows arrows and then Bob shoots numArrows arrows.
The points are then calculated as follows:
The target has integer scoring sections ranging from 0 to 11 inclusive.
For each section of the target with score k (in between 0 to 11), say Alice and Bob have shot ak and bk arrows on that section respectively. 
If ak >= bk, then Alice takes k points. If ak < bk, then Bob takes k points.
However, if ak == bk == 0, then nobody takes k points.
For example, if Alice and Bob both shot 2 arrows on the section with score 11, then Alice takes 11 points. 
On the other hand, if Alice shot 0 arrows on the section with score 11 and Bob shot 2 arrows on that same section, then Bob takes 11 points.

You are given the integer numArrows and an integer array aliceArrows of size 12, which represents the number of arrows Alice shot on each scoring section from 0 to 11. 
Now, Bob wants to maximize the total number of points he can obtain.

Return the array bobArrows which represents the number of arrows Bob shot on each scoring section from 0 to 11. The sum of the values in bobArrows should equal numArrows.

If there are multiple ways for Bob to earn the maximum total points, return any one of them.

Alice 和 Bob 是一场射箭比赛中的对手。比赛规则如下：

Alice 先射 numArrows 支箭，然后 Bob 也射 numArrows 支箭。
分数按下述规则计算：
箭靶有若干整数计分区域，范围从 0 到 11 （含 0 和 11）。
箭靶上每个区域都对应一个得分 k（范围是 0 到 11），Alice 和 Bob 分别在得分 k 区域射中 ak 和 bk 支箭。如果 ak >= bk ，那么 Alice 得 k 分。如果 ak < bk ，则 Bob 得 k 分
如果 ak == bk == 0 ，那么无人得到 k 分。
例如，Alice 和 Bob 都向计分为 11 的区域射 2 支箭，那么 Alice 得 11 分。如果 Alice 向计分为 11 的区域射 0 支箭，但 Bob 向同一个区域射 2 支箭，那么 Bob 得 11 分。

给你整数 numArrows 和一个长度为 12 的整数数组 aliceArrows ，该数组表示 Alice 射中 0 到 11 每个计分区域的箭数量。现在，Bob 想要尽可能 最大化 他所能获得的总分。

返回数组 bobArrows ，该数组表示 Bob 射中 0 到 11 每个 计分区域的箭数量。且 bobArrows 的总和应当等于 numArrows 。

如果存在多种方法都可以使 Bob 获得最大总分，返回其中 任意一种 即可。

Example 1:


Input: numArrows = 9, aliceArrows = [1,1,0,1,0,0,2,1,0,1,2,0]
Output: [0,0,0,0,1,1,0,0,1,2,3,1]
Explanation: The table above shows how the competition is scored. 
Bob earns a total point of 4 + 5 + 8 + 9 + 10 + 11 = 47.
It can be shown that Bob cannot obtain a score higher than 47 points.
Example 2:


Input: numArrows = 3, aliceArrows = [0,0,1,0,0,0,0,0,0,0,0,2]
Output: [0,0,0,0,0,0,0,0,1,1,1,0]
Explanation: The table above shows how the competition is scored.
Bob earns a total point of 8 + 9 + 10 = 27.
It can be shown that Bob cannot obtain a score higher than 27 points.
 

Constraints:

1 <= numArrows <= 105
aliceArrows.length == bobArrows.length == 12
0 <= aliceArrows[i], bobArrows[i] <= numArrows
sum(aliceArrows[i]) == numArrows

class Solution
{
public:
    int maxScore;
    vector<int> ans;

    void dfs(int idx, int arrows, int score, vector<int> &alice, vector<int> &bob)
    {
        if(idx == 12)
        {
            if(score > maxScore)
            {
                ans = bob;
                ans.back() += arrows;
                maxScore = score;
            }
            return;
        }
        dfs(idx + 1, arrows, score, alice, bob);
        if(arrows > alice[idx])
        {
            bob[idx] = alice[idx] + 1;
            dfs(idx + 1, arrows - alice[idx] - 1, score + idx, alice, bob);
            bob[idx] = 0;
        }
    }

    vector<int> maximumBobPoints(int numArrows, vector<int> &aliceArrows)
    {
        maxScore = 0;
        vector<int> bob(12, 0);
        dfs(0, numArrows, 0, aliceArrows, bob);
        return ans;
    }
};


// Source https://leetcode.com/problems/longest-substring-of-one-repeating-character/

You are given a 0-indexed string s. You are also given a 0-indexed string queryCharacters of length k and a 0-indexed array of integer indices queryIndices of length k, 
both of which are used to describe k queries.

The ith query updates the character in s at index queryIndices[i] to the character queryCharacters[i].

Return an array lengths of length k where lengths[i] is the length of the longest substring of s consisting of only one repeating character after the ith query is performed.

 

Example 1:

Input: s = "babacc", queryCharacters = "bcb", queryIndices = [1,3,3]
Output: [3,3,4]
Explanation: 
- 1st query updates s = "bbbacc". The longest substring consisting of one repeating character is "bbb" with length 3.
- 2nd query updates s = "bbbccc". 
  The longest substring consisting of one repeating character can be "bbb" or "ccc" with length 3.
- 3rd query updates s = "bbbbcc". The longest substring consisting of one repeating character is "bbbb" with length 4.
Thus, we return [3,3,4].
Example 2:

Input: s = "abyzz", queryCharacters = "aa", queryIndices = [2,1]
Output: [2,3]
Explanation:
- 1st query updates s = "abazz". The longest substring consisting of one repeating character is "zz" with length 2.
- 2nd query updates s = "aaazz". The longest substring consisting of one repeating character is "aaa" with length 3.
Thus, we return [2,3].
 

Constraints:

1 <= s.length <= 105
s consists of lowercase English letters.
k == queryCharacters.length == queryIndices.length
1 <= k <= 105
queryCharacters consists of lowercase English letters.
0 <= queryIndices[i] < s.length

left = s[leftPos]
right = s[rightPos]
prefixCommon = the length of the longest prefix of s[leftPos ... rightPos] consisting of only one repeating character
suffixCommon = the length of the longest suffix of s[leftPos ... rightPos] consisting of only one repeating character
res = the length of the longest substring of s[leftPos ... rightPos] consisting of only one repeating character

class Solution
{
public:

    struct Info
    {
        char left = '#';
        char right = '#';
        int prefixCommon = 0;
        int suffixCommon = 0;
        int res = 0;
    };

    Info tree[400001];

    Info merge(int low, int mid, int high, int id)
    {
        int leftId = 2 * id + 1;
        int rightId = 2 * id + 2;
        Info temp;
        temp.left = tree[leftId].left;
        temp.right = tree[rightId].right;
        temp.prefixCommon = tree[leftId].prefixCommon;
        temp.suffixCommon = tree[rightId].suffixCommon;
        temp.res = max(tree[leftId].res, tree[rightId].res);
        if(tree[leftId].left == tree[rightId].left && tree[leftId].prefixCommon == mid - low + 1)
        {
            temp.prefixCommon = tree[leftId].prefixCommon + tree[rightId].prefixCommon;
        }
        if(tree[leftId].right == tree[rightId].right && tree[rightId].suffixCommon == high - (mid + 1) + 1)
        {
            temp.suffixCommon = tree[leftId].suffixCommon + tree[rightId].suffixCommon;
        }
        if(tree[leftId].right == tree[rightId].left)
        {
            temp.res = max(temp.res, tree[leftId].suffixCommon + tree[rightId].prefixCommon);
        }
        return temp;
    }

    void build(string &s, int low, int high, int id)
    {
        if(low > high)
        {
            return;
        }
        if(low == high)
        {
            Info res = {s[low], s[low], 1, 1, 1};
            tree[id] = res;
            return;
        }
        int mid = (low + high) / 2;
        int leftId = 2 * id + 1;
        int rightId = 2 * id + 2;
        build(s, low, mid, leftId);
        build(s, mid + 1, high, rightId);
        tree[id] = merge(low, mid, high, id);
    }

    void update(int low, int high, int id, int index, char val)
    {
        if(low > high)
        {
            return;
        }
        if(low == high)
        {
            Info res = {val, val, 1, 1, 1};
            tree[id] = res;
            return;
        }
        int mid = (low + high) / 2;
        if(index <= mid)
        {
            update(low, mid, 2 * id + 1, index, val);
        }
        else
        {
            update(mid + 1, high, 2 * id + 2, index, val);
        }
        tree[id] = merge(low, mid, high, id);
    }

    vector<int> longestRepeating(string s, string queryCharacters, vector<int> &queryIndices)
    {
        int n = s.length();
        build(s, 0, n - 1, 0);
        vector<int> res;
        int len = queryIndices.size();
        res.reserve(len);
        for(int i = 0; i < len; i++)
        {
            update(0, n - 1, 0, queryIndices[i], queryCharacters[i]);
            res.push_back(tree[0].res);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/find-the-difference-of-two-arrays/

Given two 0-indexed integer arrays nums1 and nums2, return a list answer of size 2 where:

answer[0] is a list of all distinct integers in nums1 which are not present in nums2.
answer[1] is a list of all distinct integers in nums2 which are not present in nums1.
Note that the integers in the lists may be returned in any order.

 

Example 1:

Input: nums1 = [1,2,3], nums2 = [2,4,6]
Output: [[1,3],[4,6]]
Explanation:
For nums1, nums1[1] = 2 is present at index 0 of nums2, whereas nums1[0] = 1 and nums1[2] = 3 are not present in nums2. Therefore, answer[0] = [1,3].
For nums2, nums2[0] = 2 is present at index 1 of nums1, whereas nums2[1] = 4 and nums2[2] = 6 are not present in nums2. Therefore, answer[1] = [4,6].
Example 2:

Input: nums1 = [1,2,3,3], nums2 = [1,1,2,2]
Output: [[3],[]]
Explanation:
For nums1, nums1[2] and nums1[3] are not present in nums2. Since nums1[2] == nums1[3], their value is only included once and answer[0] = [3].
Every integer in nums2 is present in nums1. Therefore, answer[1] = [].
 

Constraints:

1 <= nums1.length, nums2.length <= 1000
-1000 <= nums1[i], nums2[i] <= 1000

class Solution
{
public:

    vector<vector<int>> findDifference(vector<int> &num1, vector<int> &num2)
    {
        unordered_set<int> st1(num1.begin(), num1.end());
        unordered_set<int> st2(num2.begin(), num2.end());
        vector<vector<int>> res(2);
        vector<int> &v1 = res[0];
        v1.reserve(st1.size());
        for (auto val : st1)
        {
            if (st2.find(val) == st2.end()) v1.push_back(val);
        }
        vector<int> &v2 = res[1];
        v2.reserve(st2.size());
        for (auto val : st2)
        {
            if (st1.find(val) == st1.end()) v2.push_back(val);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/minimum-deletions-to-make-array-beautiful/

You are given a 0-indexed integer array nums. The array nums is beautiful if:

nums.length is even.
nums[i] != nums[i + 1] for all i % 2 == 0.
Note that an empty array is considered beautiful.

You can delete any number of elements from nums. When you delete an element, all the elements to the right of the deleted element will be shifted one unit to the left to fill the gap created 
and all the elements to the left of the deleted element will remain unchanged.

Return the minimum number of elements to delete from nums to make it beautiful.

 

Example 1:

Input: nums = [1,1,2,3,5]
Output: 1
Explanation: You can delete either nums[0] or nums[1] to make nums = [1,2,3,5] which is beautiful. It can be proven you need at least 1 deletion to make nums beautiful.
Example 2:

Input: nums = [1,1,2,2,3,3]
Output: 2
Explanation: You can delete nums[0] and nums[5] to make nums = [1,2,2,3] which is beautiful. It can be proven you need at least 2 deletions to make nums beautiful.
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 105

class Solution
{
public:
    int minDeletion(vector<int> &nums)
    {
        int n = nums.size();
        int ans = 0;
        for(int i = 0; i < n - 1; i++)
        {
            if((i - ans) % 2 == 0 && nums[i] == nums[i + 1]) ++ans;
        }
        if((n - ans) % 2) ++ans;
        return ans;
    }
};


// Source https://leetcode.com/problems/find-palindrome-with-fixed-length/

Given an integer array queries and a positive integer intLength, return an array answer where answer[i] is either the queries[i]th smallest positive palindrome of length intLength or -1 if no such palindrome exists.

A palindrome is a number that reads the same backwards and forwards. Palindromes cannot have leading zeros.

给你一个整数数组 queries 和一个 正 整数 intLength ，请你返回一个数组 answer ，其中 answer[i] 是长度为 intLength 的 正回文数 中第 queries[i] 小的数字，如果不存在这样的回文数，则为 -1 。

回文数 指的是从前往后和从后往前读一模一样的数字。回文数不能有前导 0 。

Example 1:

Input: queries = [1,2,3,4,5,90], intLength = 3
Output: [101,111,121,131,141,999]
Explanation:
The first few palindromes of length 3 are:
101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, ...
The 90th palindrome of length 3 is 999.
Example 2:

Input: queries = [2,4,6], intLength = 4
Output: [1111,1331,1551]
Explanation:
The first six palindromes of length 4 are:
1001, 1111, 1221, 1331, 1441, and 1551.
 

Constraints:

1 <= queries.length <= 5 * 104
1 <= queries[i] <= 109
1 <= intLength <= 15

class Solution
{
public:
    vector<long long> kthPalindrome(vector<int> &q, int il)
    {
        int l = (il + 1) / 2;
        int ll = pow(10, l - 1);
        int rl = pow(10, l) - 1;
        int range = rl - ll + 1;
        vector<long long> res;
        int len = q.size();
        res.reserve(len);
        for(int i = 0; i < len; i++)
        {
            if(q[i] <= range)
            {
                string a = to_string(ll + q[i] - 1);
                string b = a;
                if(il % 2 == 1)b.pop_back();
                reverse(b.begin(), b.end());
                a.append(b);
                res.push_back(stoll(a));
            }
            else res.push_back(-1);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/maximum-value-of-k-coins-from-piles/

There are n piles of coins on a table. Each pile consists of a positive number of coins of assorted denominations.

In one move, you can choose any coin on top of any pile, remove it, and add it to your wallet.

Given a list piles, where piles[i] is a list of integers denoting the composition of the ith pile from top to bottom, and a positive integer k, 
return the maximum total value of coins you can have in your wallet if you choose exactly k coins optimally.

一张桌子上总共有 n 个硬币 栈 。每个栈有 正整数 个带面值的硬币。

每一次操作中，你可以从任意一个栈的 顶部 取出 1 个硬币，从栈中移除它，并放入你的钱包里。

给你一个列表 piles ，其中 piles[i] 是一个整数数组，分别表示第 i 个栈里 从顶到底 的硬币面值。同时给你一个正整数 k ，请你返回在 恰好 进行 k 次操作的前提下，你钱包里硬币面值之和 最大为多少 。

Example 1:


Input: piles = [[1,100,3],[7,8,9]], k = 2
Output: 101
Explanation:
The above diagram shows the different ways we can choose k coins.
The maximum total we can obtain is 101.
Example 2:

Input: piles = [[100],[100],[100],[100],[100],[100],[1,1,1,1,1,1,700]], k = 7
Output: 706
Explanation:
The maximum total can be obtained if we choose all coins from the last pile.
 

Constraints:

n == piles.length
1 <= n <= 1000
1 <= piles[i][j] <= 105
1 <= k <= sum(piles[i].length) <= 2000

class Solution
{
public:
    int n;
    int sumArr[1001];
    int dp[1001][2001];

    int solve(vector<vector<int>> &piles, int k, int idx)
    {
        if(k == 0)return 0;
        if(idx >= n) return -1e9;
        if(k > sumArr[idx]) return -1e9;
        if(dp[idx][k] != 0) return dp[idx][k];
        if(idx == n - 1)
        {
            int sum = 0;
            for(int i = 0; i < k ; i++) sum += piles[idx][i];
            return dp[idx][k] = sum;
        }
        int ans = solve(piles, k, idx + 1);
        int sum = 0;
        int len = min((int)piles[idx].size(), k);
        for(int i = 0; i < len; i++)
        {
            sum += piles[idx][i];
            ans = max(ans, sum + solve(piles, k - i - 1, idx + 1));
        }
        return dp[idx][k] = ans;
    }

    int maxValueOfCoins(vector<vector<int>> &piles, int k)
    {
        n = piles.size();
        sumArr[n - 1] = piles[n - 1].size();
        for (int i = n - 2; i >= 0; --i)
        {
            sumArr[i] = sumArr[i + 1] + piles[i].size();
        }
        return solve(piles, k, 0);
    }
};


// Source https://leetcode.com/problems/minimum-bit-flips-to-convert-number/

A bit flip of a number x is choosing a bit in the binary representation of x and flipping it from either 0 to 1 or 1 to 0.

For example, for x = 7, the binary representation is 111 and we may choose any bit (including any leading zeros not shown) and flip it. 
We can flip the first bit from the right to get 110, flip the second bit from the right to get 101, flip the fifth bit from the right (a leading zero) to get 10111, etc.
Given two integers start and goal, return the minimum number of bit flips to convert start to goal.

 

Example 1:

Input: start = 10, goal = 7
Output: 3
Explanation: The binary representation of 10 and 7 are 1010 and 0111 respectively. We can convert 10 to 7 in 3 steps:
- Flip the first bit from the right: 1010 -> 1011.
- Flip the third bit from the right: 1011 -> 1111.
- Flip the fourth bit from the right: 1111 -> 0111.
It can be shown we cannot convert 10 to 7 in less than 3 steps. Hence, we return 3.

1010
0111
1101

Example 2:

Input: start = 3, goal = 4
Output: 3
Explanation: The binary representation of 3 and 4 are 011 and 100 respectively. We can convert 3 to 4 in 3 steps:
- Flip the first bit from the right: 011 -> 010.
- Flip the second bit from the right: 010 -> 000.
- Flip the third bit from the right: 000 -> 100.
It can be shown we cannot convert 3 to 4 in less than 3 steps. Hence, we return 3.
 

Constraints:

0 <= start, goal <= 109

Xor will have bit'1' at positions where bits of both numbers are different and
we need to flip only those bits which are different so number of bit'1' in xor
will give us result;

class Solution
{
public:
    int minBitFlips(int start, int goal)
    {
        uint32_t val= start ^ goal;
        return bitset<32>{val}.count();
    }
};


// Source https://leetcode.com/problems/find-triangular-sum-of-an-array/

You are given a 0-indexed integer array nums, where nums[i] is a digit between 0 and 9 (inclusive).

The triangular sum of nums is the value of the only element present in nums after the following process terminates:

Let nums comprise of n elements. If n == 1, end the process. Otherwise, create a new 0-indexed integer array newNums of length n - 1.
For each index i, where 0 <= i < n - 1, assign the value of newNums[i] as (nums[i] + nums[i+1]) % 10, where % denotes modulo operator.
Replace the array nums with newNums.
Repeat the entire process starting from step 1.
Return the triangular sum of nums.

给你一个下标从 0 开始的整数数组 nums ，其中 nums[i] 是 0 到 9 之间（两者都包含）的一个数字。

nums 的 三角和 是执行以下操作以后最后剩下元素的值：

nums 初始包含 n 个元素。如果 n == 1 ，终止 操作。否则，创建 一个新的下标从 0 开始的长度为 n - 1 的整数数组 newNums 。
对于满足 0 <= i < n - 1 的下标 i ，newNums[i] 赋值 为 (nums[i] + nums[i+1]) % 10 ，% 表示取余运算。
将 newNums 替换 数组 nums 。
从步骤 1 开始 重复 整个过程。
请你返回 nums 的三角和。

Example 1:


Input: nums = [1,2,3,4,5]
Output: 8
Explanation:
The above diagram depicts the process from which we obtain the triangular sum of the array.
Example 2:

Input: nums = [5]
Output: 5
Explanation:
Since there is only one element in nums, the triangular sum is the value of that element itself.
 

Constraints:

1 <= nums.length <= 1000
0 <= nums[i] <= 9

class Solution
{
public:
    int triangularSum(vector<int> &nums)
    {
        while(nums.size() > 1)
        {
            int len = nums.size();
            for(int i = 0; i < len - 1; ++i)
            {
                nums[i] = (nums[i] + nums[i + 1]) % 10;
            }
            nums.pop_back();
        }
        return nums[0];
    }
};


// Source https://leetcode.com/problems/number-of-ways-to-select-buildings/

You are given a 0-indexed binary string s which represents the types of buildings along a street where:

s[i] = '0' denotes that the ith building is an office and
s[i] = '1' denotes that the ith building is a restaurant.
As a city official, you would like to select 3 buildings for random inspection. However, to ensure variety, no two consecutive buildings out of the selected buildings can be of the same type.

For example, given s = "001101", we cannot select the 1st, 3rd, and 5th buildings as that would form "011" which is not allowed due to having two consecutive buildings of the same type.
Return the number of valid ways to select 3 buildings.

给你一个下标从 0 开始的二进制字符串 s ，它表示一条街沿途的建筑类型，其中：

s[i] = '0' 表示第 i 栋建筑是一栋办公楼，
s[i] = '1' 表示第 i 栋建筑是一间餐厅。
作为市政厅的官员，你需要随机 选择 3 栋建筑。然而，为了确保多样性，选出来的 3 栋建筑 相邻 的两栋不能是同一类型。

比方说，给你 s = "001101" ，我们不能选择第 1 ，3 和 5 栋建筑，因为得到的子序列是 "011" ，有相邻两栋建筑是同一类型，所以 不合 题意。
请你返回可以选择 3 栋建筑的 有效方案数 。


Example 1:

Input: s = "001101"
Output: 6
Explanation: 
The following sets of indices selected are valid:
- [0,2,4] from "001101" forms "010"
- [0,3,4] from "001101" forms "010"
- [1,2,4] from "001101" forms "010"
- [1,3,4] from "001101" forms "010"
- [2,4,5] from "001101" forms "101"
- [3,4,5] from "001101" forms "101"
No other selection is valid. Thus, there are 6 total ways.
Example 2:

Input: s = "11100"
Output: 0
Explanation: It can be shown that there are no valid selections.
 

Constraints:

3 <= s.length <= 105
s[i] is either '0' or '1'.

class Solution
{
public:
    long long numberOfWays(string s)
    {
        int len = s.size();
        vector<int> left_ones(len);
        vector<int> left_zeros(len);
        if (s[0] == '0') left_zeros[0] = 1;
        else left_ones[0] = 1;
        for (int i = 1; i < len; ++i)
        {
            left_ones[i] = left_ones[i - 1] + (s[i] == '1');
            left_zeros[i] = left_zeros[i - 1] + (s[i] == '0');
        }
        vector<int> right_ones(len);
        vector<int> right_zeros(len);
        if (s[len - 1] == '0') right_zeros[len - 1] = 1;
        else right_ones[len - 1] = 1;
        for (int i = len - 2; i >= 0; --i)
        {
            right_ones[i] = right_ones[i + 1] + (s[i] == '1');
            right_zeros[i] = right_zeros[i + 1] + (s[i] == '0');
        }
        long long res = 0;
        for (int i = 1; i < len - 1; ++i)
        {
            if (s[i] == '0')
            {
                res += left_ones[i - 1] * right_ones[i + 1];
            }
            else
            {
                res += left_zeros[i - 1] * right_zeros[i + 1];
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/sum-of-scores-of-built-strings/

You are building a string s of length n one character at a time, prepending each new character to the front of the string. 
The strings are labeled from 1 to n, where the string with length i is labeled si.

For example, for s = "abaca", s1 == "a", s2 == "ca", s3 == "aca", etc.
The score of si is the length of the longest common prefix between si and sn (Note that s == sn).

Given the final string s, return the sum of the score of every si.

你需要从空字符串开始 构造 一个长度为 n 的字符串 s ，构造的过程为每次给当前字符串 前面 添加 一个 字符。构造过程中得到的所有字符串编号为 1 到 n ，其中长度为 i 的字符串编号为 si 。

比方说，s = "abaca" ，s1 == "a" ，s2 == "ca" ，s3 == "aca" 依次类推。
si 的 得分 为 si 和 sn 的 最长公共前缀 的长度（注意 s == sn ）。

给你最终的字符串 s ，请你返回每一个 si 的 得分之和 。

Example 1:

Input: s = "babab"
Output: 9
Explanation:
For s1 == "b", the longest common prefix is "b" which has a score of 1.
For s2 == "ab", there is no common prefix so the score is 0.
For s3 == "bab", the longest common prefix is "bab" which has a score of 3.
For s4 == "abab", there is no common prefix so the score is 0.
For s5 == "babab", the longest common prefix is "babab" which has a score of 5.
The sum of the scores is 1 + 0 + 3 + 0 + 5 = 9, so we return 9.
Example 2:

Input: s = "azbazbzaz"
Output: 14
Explanation: 
For s2 == "az", the longest common prefix is "az" which has a score of 2.
For s6 == "azbzaz", the longest common prefix is "azb" which has a score of 3.
For s9 == "azbazbzaz", the longest common prefix is "azbazbzaz" which has a score of 9.
For all other si, the score is 0.
The sum of the scores is 2 + 3 + 9 = 14, so we return 14.
 

Constraints:

1 <= s.length <= 105
s consists of lowercase English letters.

class Solution
{
public:
    int n;
    int Z[100001];

    void getZarr(string &str)
    {
        Z[0] = n;
        int L, R;
        L = R = 0;
        for (int i = 1; i < n; ++i)
        {
            if (i > R)
            {
                L = i;
                int j = i;
                while (j < n && str[j - L] == str[j])
                    j++;
                Z[i] = j - L;
                R = j - 1;
            }
            else
            {
                int k = i - L;
                if (Z[k] < R - i + 1)
                {
                    Z[i] = Z[k];
                }
                else
                {
                    L = i;
                    int j = R + 1;
                    while (j < n && str[j - L] == str[j])
                        j++;
                    Z[i] = j - L;
                    R = j - 1;
                }
            }
        }
    }

    long long sumScores(string s)
    {
        n = s.length();
        getZarr(s);
        long long ans = 0;
        for (int i = 0; i < n; i++)
        {
            ans += Z[i];
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/minimum-number-of-operations-to-convert-time/

You are given two strings current and correct representing two 24-hour times.

24-hour times are formatted as "HH:MM", where HH is between 00 and 23, and MM is between 00 and 59. The earliest 24-hour time is 00:00, and the latest is 23:59.

In one operation you can increase the time current by 1, 5, 15, or 60 minutes. You can perform this operation any number of times.

Return the minimum number of operations needed to convert current to correct.

 

Example 1:

Input: current = "02:30", correct = "04:35"
Output: 3
Explanation:
We can convert current to correct in 3 operations as follows:
- Add 60 minutes to current. current becomes "03:30".
- Add 60 minutes to current. current becomes "04:30".
- Add 5 minutes to current. current becomes "04:35".
It can be proven that it is not possible to convert current to correct in fewer than 3 operations.

150
275
125

Example 2:

Input: current = "11:00", correct = "11:01"
Output: 1
Explanation: We only have to add one minute to current, so the minimum number of operations needed is 1.
 

Constraints:

current and correct are in the format "HH:MM"
current <= correct

class Solution
{
public:
    int convertTime(string current, string correct)
    {
        string currH = current.substr(0, 2);
        string currM = current.substr(3, 2);
        string corrH = correct.substr(0, 2);
        string corrM = correct.substr(3, 2);
        int curh = stoi(currH);
        int curm = stoi(currM);
        int corh = stoi(corrH);
        int corm = stoi(corrM);
        int curr = curh * 60 + curm;
        int corr = corh * 60 + corm;
        int diff = corr - curr;
        int res = 0;
        res += diff / 60;
        diff %= 60;
        res += diff / 15;
        diff %= 15;
        res += diff / 5;
        diff %= 5;
        res += diff;
        return res;
    }
};


// Source https://leetcode.com/problems/find-players-with-zero-or-one-losses/

You are given an integer array matches where matches[i] = [winneri, loseri] indicates that the player winneri defeated player loseri in a match.

Return a list answer of size 2 where:

answer[0] is a list of all players that have not lost any matches.
answer[1] is a list of all players that have lost exactly one match.
The values in the two lists should be returned in increasing order.

Note:

You should only consider the players that have played at least one match.
The testcases will be generated such that no two matches will have the same outcome.
 

Example 1:

Input: matches = [[1,3],[2,3],[3,6],[5,6],[5,7],[4,5],[4,8],[4,9],[10,4],[10,9]]
Output: [[1,2,10],[4,5,7,8]]
Explanation:
Players 1, 2, and 10 have not lost any matches.
Players 4, 5, 7, and 8 each have lost one match.
Players 3, 6, and 9 each have lost two matches.
Thus, answer[0] = [1,2,10] and answer[1] = [4,5,7,8].
Example 2:

Input: matches = [[2,3],[1,3],[5,4],[6,4]]
Output: [[1,2,5,6],[]]
Explanation:
Players 1, 2, 5, and 6 have not lost any matches.
Players 3 and 4 each have lost two matches.
Thus, answer[0] = [1,2,5,6] and answer[1] = [].
 

Constraints:

1 <= matches.length <= 105
matches[i].length == 2
1 <= winneri, loseri <= 105
winneri != loseri
All matches[i] are unique.

class Solution
{
public:
    vector<vector<int>> findWinners(vector<vector<int>> &matches)
    {
        vector<vector<int>> ans(2);
        unordered_map<int, pair<int, int>> mp;
        for(auto &v : matches)
        {
            mp[v[0]].first++;
            mp[v[1]].second++;
        }
        vector<int> &v0 = ans[0];
        vector<int> &v1 = ans[1];
        v0.reserve(30000);
        v1.reserve(30000);
        for(auto &[player, p] : mp)
        {
            if(p.second == 0)
                v0.push_back(player);
            else if(p.second == 1)
                v1.push_back(player);
        }
        sort(v0.begin(), v0.end());
        sort(v1.begin(), v1.end());
        return ans;
    }
};


// Source https://leetcode.com/problems/maximum-candies-allocated-to-k-children/

You are given a 0-indexed integer array candies. Each element in the array denotes a pile of candies of size candies[i]. 
You can divide each pile into any number of sub piles, but you cannot merge two piles together.

You are also given an integer k. You should allocate piles of candies to k children such that each child gets the same number of candies. 
Each child can take at most one pile of candies and some piles of candies may go unused.

Return the maximum number of candies each child can get.

 

Example 1:

Input: candies = [5,8,6], k = 3
Output: 5
Explanation: We can divide candies[1] into 2 piles of size 5 and 3, and candies[2] into 2 piles of size 5 and 1. We now have five piles of candies of sizes 5, 5, 3, 5, and 1. We can allocate the 3 piles of size 5 to 3 children. It can be proven that each child cannot receive more than 5 candies.
Example 2:

Input: candies = [2,5], k = 11
Output: 0
Explanation: There are 11 children but only 7 candies in total, so it is impossible to ensure each child receives at least one candy. Thus, each child gets no candy and the answer is 0.
 

Constraints:

1 <= candies.length <= 10^5
1 <= candies[i] <= 10^7
1 <= k <= 10^12

class Solution
{
public:

    bool check(const vector<int> &candies, long long val, long long k)
    {
        long long res = 0;
        for (auto t : candies)
        {
            res += t / val;
        }
        return res >= k;
    }

    int maximumCandies(vector<int> &candies, long long k)
    {
        long long total = accumulate(candies.begin(), candies.end(), 0LL);
        if (total < k) return 0;
        if (total == k) return 1;
        long long ans = 0;
        long long low = 1;
        long long high = total;
        while (low <= high)
        {
            long long mid = low + (high - low) / 2;
            if (check(candies, mid, k))
            {
                ans = mid;
                low = mid + 1;
            }
            else
            {
                high = mid - 1;
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/encrypt-and-decrypt-strings/

You are given a character array keys containing unique characters and a string array values containing strings of length 2. 
You are also given another string array dictionary that contains all permitted original strings after decryption. 
You should implement a data structure that can encrypt or decrypt a 0-indexed string.

A string is encrypted with the following process:

For each character c in the string, we find the index i satisfying keys[i] == c in keys.
Replace c with values[i] in the string.
Note that in case a character of the string is not present in keys, the encryption process cannot be carried out, and an empty string "" is returned.

A string is decrypted with the following process:

For each substring s of length 2 occurring at an even index in the string, we find an i such that values[i] == s. 
If there are multiple valid i, we choose any one of them. This means a string could have multiple possible strings it can decrypt to.
Replace s with keys[i] in the string.
Implement the Encrypter class:

Encrypter(char[] keys, String[] values, String[] dictionary) Initializes the Encrypter class with keys, values, and dictionary.
String encrypt(String word1) Encrypts word1 with the encryption process described above and returns the encrypted string.
int decrypt(String word2) Returns the number of possible strings word2 could decrypt to that also appear in dictionary.

给你一个字符数组 keys ，由若干 互不相同 的字符组成。还有一个字符串数组 values ，内含若干长度为 2 的字符串。另给你一个字符串数组 dictionary ，包含解密后所有允许的原字符串。
请你设计并实现一个支持加密及解密下标从 0 开始字符串的数据结构。

字符串 加密 按下述步骤进行：

对字符串中的每个字符 c ，先从 keys 中找出满足 keys[i] == c 的下标 i 。
在字符串中，用 values[i] 替换字符 c 。
字符串 解密 按下述步骤进行：

将字符串每相邻 2 个字符划分为一个子字符串，对于每个子字符串 s ，找出满足 values[i] == s 的一个下标 i 。如果存在多个有效的 i ，从中选择 任意 一个。这意味着一个字符串解密可能得到多个解密字符串。
在字符串中，用 keys[i] 替换 s 。
实现 Encrypter 类：

Encrypter(char[] keys, String[] values, String[] dictionary) 用 keys、values 和 dictionary 初始化 Encrypter 类。
String encrypt(String word1) 按上述加密过程完成对 word1 的加密，并返回加密后的字符串。
int decrypt(String word2) 统计并返回可以由 word2 解密得到且出现在 dictionary 中的字符串数目。

Example 1:

Input
["Encrypter", "encrypt", "decrypt"]
[[['a', 'b', 'c', 'd'], ["ei", "zf", "ei", "am"], ["abcd", "acbd", "adbc", "badc", "dacb", "cadb", "cbda", "abad"]], ["abcd"], ["eizfeiam"]]
Output
[null, "eizfeiam", 2]

Explanation
Encrypter encrypter = new Encrypter([['a', 'b', 'c', 'd'], ["ei", "zf", "ei", "am"], ["abcd", "acbd", "adbc", "badc", "dacb", "cadb", "cbda", "abad"]);
encrypter.encrypt("abcd"); // return "eizfeiam". 
                           // 'a' maps to "ei", 'b' maps to "zf", 'c' maps to "ei", and 'd' maps to "am".
encrypter.decrypt("eizfeiam"); // return 2. 
                              // "ei" can map to 'a' or 'c', "zf" maps to 'b', and "am" maps to 'd'. 
                              // Thus, the possible strings after decryption are "abad", "cbad", "abcd", and "cbcd". 
                              // 2 of those strings, "abad" and "abcd", appear in dictionary, so the answer is 2.
 

Constraints:

1 <= keys.length == values.length <= 26
values[i].length == 2
1 <= dictionary.length <= 100
1 <= dictionary[i].length <= 100
All keys[i] and dictionary[i] are unique.
1 <= word1.length <= 2000
1 <= word2.length <= 200
All word1[i] appear in keys.
word2.length is even.
keys, values[i], dictionary[i], word1, and word2 only contain lowercase English letters.
At most 200 calls will be made to encrypt and decrypt in total.

class Encrypter
{
public:
    unordered_map<char, string> mp;
    unordered_map<string, int> freq;

    Encrypter(vector<char> &keys, vector<string> &values, vector<string> &dictionary)
    {
        int len = keys.size();
        for (int i = 0; i < len; ++i) mp[keys[i]] = values[i];
        for (auto &str : dictionary)
        {
            string key;
            bool flag = true;
            for (auto ch : str)
            {
                if (!mp.count(ch)) { flag = false; break; }
                key += mp[ch];
            }
            if (flag) ++freq[key];
        }
    }

    string encrypt(string word1)
    {
        string ans;
        for (auto ch : word1) ans += mp[ch];
        return ans;
    }

    int decrypt(string word2)
    {
        return freq[word2];
    }
};


// Source https://leetcode.com/problems/largest-number-after-digit-swaps-by-parity/

You are given a positive integer num. You may swap any two digits of num that have the same parity (i.e. both odd digits or both even digits).

Return the largest possible value of num after any number of swaps.

 

Example 1:

Input: num = 1234
Output: 3412
Explanation: Swap the digit 3 with the digit 1, this results in the number 3214.
Swap the digit 2 with the digit 4, this results in the number 3412.
Note that there may be other sequences of swaps but it can be shown that 3412 is the largest possible number.
Also note that we may not swap the digit 4 with the digit 1 since they are of different parities.
Example 2:

Input: num = 65875
Output: 87655
Explanation: Swap the digit 8 with the digit 6, this results in the number 85675.
Swap the first digit 5 with the digit 7, this results in the number 87655.
Note that there may be other sequences of swaps but it can be shown that 87655 is the largest possible number.
 

Constraints:

1 <= num <= 109

class Solution
{
public:
    int largestInteger(int num)
    {
        string s = to_string(num);
        int n = s.length();
        vector<int> evenVec;
        vector<int> oddVec;
        evenVec.reserve(n);
        oddVec.reserve(n);
        for (int i = 0; i < n; i++)
        {
            int val = s[i] - '0';
            if (val % 2) oddVec.push_back(i);
            else evenVec.push_back(i);
        }
        sort(s.begin(), s.end(), greater<char>());
        int evenIdx = 0, oddIdx = 0;
        string ans(n, '#');
        for (int i = 0; i < n; i++)
        {
            int val = s[i] - '0';
            if (val % 2) ans[oddVec[oddIdx++]] = s[i];
            else ans[evenVec[evenIdx++]] = s[i];
        }
        return stoi(ans);
    }
};


// Source https://leetcode.com/problems/minimize-result-by-adding-parentheses-to-expression/

You are given a 0-indexed string expression of the form "<num1>+<num2>" where <num1> and <num2> represent positive integers.

Add a pair of parentheses to expression such that after the addition of parentheses, expression is a valid mathematical expression and evaluates to the smallest possible value. 
The left parenthesis must be added to the left of '+' and the right parenthesis must be added to the right of '+'.

Return expression after adding a pair of parentheses such that expression evaluates to the smallest possible value. If there are multiple answers that yield the same result, return any of them.

The input has been generated such that the original value of expression, and the value of expression after adding any pair of parentheses that meets the requirements fits within a signed 32-bit integer.

 

Example 1:

Input: expression = "247+38"
Output: "2(47+38)"
Explanation: The expression evaluates to 2 * (47 + 38) = 2 * 85 = 170.
Note that "2(4)7+38" is invalid because the right parenthesis must be to the right of the '+'.
It can be shown that 170 is the smallest possible value.
Example 2:

Input: expression = "12+34"
Output: "1(2+3)4"
Explanation: The expression evaluates to 1 * (2 + 3) * 4 = 1 * 5 * 4 = 20.
Example 3:

Input: expression = "999+999"
Output: "(999+999)"
Explanation: The expression evaluates to 999 + 999 = 1998.
 

Constraints:

3 <= expression.length <= 10
expression consists of digits from '1' to '9' and '+'.
expression starts and ends with digits.
expression contains exactly one '+'.
The original value of expression, and the value of expression after adding any pair of parentheses that meets the requirements fits within a signed 32-bit integer.

class Solution
{
public:

    string minimizeResult(string expression)
    {
        int pos = expression.find('+');
        string left = expression.substr(0, pos);
        string right = expression.substr(pos + 1);
        int m = left.size(), n = right.size();
        int mnVal = INT_MAX;
        string res = "";
        for(int i = 0; i < m; ++i)
        {
            int left1Val = 1;
            if (i > 0) left1Val = stoi(left.substr(0, i));
            int left2Val = stoi(left.substr(i));
            for(int j = 1; j <= n; ++j)
            {
                int right1Val = stoi(right.substr(0, j));
                int right2Val = 1;
                if (j < n) right2Val = stoi(right.substr(j));
                int t = left1Val * (left2Val + right1Val) * right2Val;
                if(t < mnVal)
                {
                    mnVal = t;
                    res = left.substr(0, i) + "(" + left.substr(i) + "+" + right.substr(0, j) + ")" + right.substr(j);
                }
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/maximum-product-after-k-increments/

You are given an array of non-negative integers nums and an integer k. In one operation, you may choose any element from nums and increment it by 1.

Return the maximum product of nums after at most k operations. Since the answer may be very large, return it modulo 109 + 7. 
Note that you should maximize the product before taking the modulo. 

 

Example 1:

Input: nums = [0,4], k = 5
Output: 20
Explanation: Increment the first number 5 times.
Now nums = [5, 4], with a product of 5 * 4 = 20.
It can be shown that 20 is maximum product possible, so we return 20.
Note that there may be other ways to increment nums to have the maximum product.
Example 2:

Input: nums = [6,3,3,2], k = 2
Output: 216
Explanation: Increment the second number 1 time and increment the fourth number 1 time.
Now nums = [6, 4, 3, 3], with a product of 6 * 4 * 3 * 3 = 216.
It can be shown that 216 is maximum product possible, so we return 216.
Note that there may be other ways to increment nums to have the maximum product.
 

Constraints:

1 <= nums.length, k <= 105
0 <= nums[i] <= 106

class Solution
{
public:
    int maximumProduct(vector<int> &nums, int k)
    {
        const long long mod = 1e9 + 7;
        priority_queue<int, vector<int>, greater<int>> pq;
        for(auto x : nums) pq.push(x);
        while(k > 0)
        {
            int val = pq.top();
            pq.pop();
            pq.push(val + 1);
            --k;
        }
        long long res = 1;
        while(!pq.empty())
        {
            res  = (res * pq.top()) % mod;
            pq.pop();
        }
        return res;
    }
};


// Source https://leetcode.com/problems/maximum-total-beauty-of-the-gardens/

Alice is a caretaker of n gardens and she wants to plant flowers to maximize the total beauty of all her gardens.

You are given a 0-indexed integer array flowers of size n, where flowers[i] is the number of flowers already planted in the ith garden. 
Flowers that are already planted cannot be removed. You are then given another integer newFlowers, which is the maximum number of flowers that Alice can additionally plant. 
You are also given the integers target, full, and partial.

A garden is considered complete if it has at least target flowers. The total beauty of the gardens is then determined as the sum of the following:

The number of complete gardens multiplied by full.
The minimum number of flowers in any of the incomplete gardens multiplied by partial. If there are no incomplete gardens, then this value will be 0.
Return the maximum total beauty that Alice can obtain after planting at most newFlowers flowers.

Alice 是 n 个花园的园丁，她想通过种花，最大化她所有花园的总美丽值。

给你一个下标从 0 开始大小为 n 的整数数组 flowers ，其中 flowers[i] 是第 i 个花园里已经种的花的数目。已经种了的花 不能 移走。
同时给你 newFlowers ，表示 Alice 额外可以种花的 最大数目 。同时给你的还有整数 target ，full 和 partial 。

如果一个花园有 至少 target 朵花，那么这个花园称为 完善的 ，花园的 总美丽值 为以下分数之 和 ：

完善 花园数目乘以 full.
剩余 不完善 花园里，花的 最少数目 乘以 partial 。如果没有不完善花园，那么这一部分的值为 0 。
请你返回 Alice 种最多 newFlowers 朵花以后，能得到的 最大 总美丽值。


Example 1:

Input: flowers = [1,3,1,1], newFlowers = 7, target = 6, full = 12, partial = 1
Output: 14
Explanation: Alice can plant
- 2 flowers in the 0th garden
- 3 flowers in the 1st garden
- 1 flower in the 2nd garden
- 1 flower in the 3rd garden
The gardens will then be [3,6,2,2]. She planted a total of 2 + 3 + 1 + 1 = 7 flowers.
There is 1 garden that is complete.
The minimum number of flowers in the incomplete gardens is 2.
Thus, the total beauty is 1 * 12 + 2 * 1 = 12 + 2 = 14.
No other way of planting flowers can obtain a total beauty higher than 14.
Example 2:

Input: flowers = [2,4,5,3], newFlowers = 10, target = 5, full = 2, partial = 6
Output: 30
Explanation: Alice can plant
- 3 flowers in the 0th garden
- 0 flowers in the 1st garden
- 0 flowers in the 2nd garden
- 2 flowers in the 3rd garden
The gardens will then be [5,4,5,5]. She planted a total of 3 + 0 + 0 + 2 = 5 flowers.
There are 3 gardens that are complete.
The minimum number of flowers in the incomplete gardens is 4.
Thus, the total beauty is 3 * 2 + 4 * 6 = 6 + 24 = 30.
No other way of planting flowers can obtain a total beauty higher than 30.
Note that Alice could make all the gardens complete but in this case, she would obtain a lower total beauty.
 

Constraints:

1 <= flowers.length <= 105
1 <= flowers[i], target <= 105
1 <= newFlowers <= 1010
1 <= full, partial <= 105

cost[i] 表示 把f[0 ... i - 1]都变成f[i]需要增加的花朵数量

class Solution
{
public:

    long long maximumBeauty(vector<int> &f, long long newF, int t, int fl, int pl)
    {
        sort(f.begin(), f.end());
        int n = f.size();
        if(f[0] >= t) return (long long)fl * n;
        int rightpos = lower_bound(f.begin(), f.end(), t) - f.begin() - 1;
        long long sum = 0;
        for(int i = 0; i <= rightpos; i++) sum += f[i];
        if(newF >= (long long)t * (rightpos + 1) - sum)
            return (long long)(n - 1) * fl + max((long long)fl, (long long)pl * (t - 1));

        vector<long long> cost(rightpos + 1);
        for(int i = 1 ; i <= rightpos; i++)
            cost[i] = cost[i - 1] + (long long)i * (f[i] - f[i - 1]);

        long long ans = 0;
        while(newF >= 0 && rightpos >= 0)
        {
            int pos = min(rightpos, int(upper_bound(cost.begin(), cost.end(), newF) - cost.begin() - 1));
            int minInc = f[pos] + (newF - cost[pos]) / (pos + 1);
            int mnVal = min(t - 1, minInc);
            ans = max(ans, (long long)mnVal * pl + (long long)fl * (n - rightpos - 1));
            newF -= (t - f[rightpos]);
            rightpos--;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/add-two-integers/

Given two integers num1 and num2, return the sum of the two integers.
 

Example 1:

Input: num1 = 12, num2 = 5
Output: 17
Explanation: num1 is 12, num2 is 5, and their sum is 12 + 5 = 17, so 17 is returned.
Example 2:

Input: num1 = -10, num2 = 4
Output: -6
Explanation: num1 + num2 = -6, so -6 is returned.
 

Constraints:

-100 <= num1, num2 <= 100

class Solution
{
public:
    int sum(int num1, int num2)
    {
        return num1 + num2;
    }
};


// Source https://leetcode.com/problems/root-equals-sum-of-children/

You are given the root of a binary tree that consists of exactly 3 nodes: the root, its left child, and its right child.

Return true if the value of the root is equal to the sum of the values of its two children, or false otherwise.

 

Example 1:


Input: root = [10,4,6]
Output: true
Explanation: The values of the root, its left child, and its right child are 10, 4, and 6, respectively.
10 is equal to 4 + 6, so we return true.
Example 2:


Input: root = [5,3,1]
Output: false
Explanation: The values of the root, its left child, and its right child are 5, 3, and 1, respectively.
5 is not equal to 3 + 1, so we return false.
 

Constraints:

The tree consists only of the root, its left child, and its right child.
-100 <= Node.val <= 100

class Solution
{
public:
    bool checkTree(TreeNode *root)
    {
        return (root->val == root->left->val + root->right->val);
    }
};


// Source https://leetcode.com/problems/find-closest-number-to-zero/

Given an integer array nums of size n, return the number with the value closest to 0 in nums. If there are multiple answers, return the number with the largest value.

 

Example 1:

Input: nums = [-4,-2,1,4,8]
Output: 1
Explanation:
The distance from -4 to 0 is |-4| = 4.
The distance from -2 to 0 is |-2| = 2.
The distance from 1 to 0 is |1| = 1.
The distance from 4 to 0 is |4| = 4.
The distance from 8 to 0 is |8| = 8.
Thus, the closest number to 0 in the array is 1.
Example 2:

Input: nums = [2,-1,1]
Output: 1
Explanation: 1 and -1 are both the closest numbers to 0, so 1 being larger is returned.
 

Constraints:

1 <= n <= 1000
-105 <= nums[i] <= 105

class Solution
{
public:
    int findClosestNumber(vector<int> &nums)
    {
        sort(nums.begin(), nums.end());
        auto itr = lower_bound(nums.begin(), nums.end(), 0);
        if (itr == nums.end())
        {
            --itr;
            return *itr;
        }
        if (itr == nums.begin()) return *itr;
        auto itr2 = itr;
        --itr2;
        int diff = *itr;
        int diff2 = abs(*itr2);
        if (diff < diff2) return *itr;
        else if (diff > diff2) return *itr2;
        else return *itr;
    }
};


// Source https://leetcode.com/problems/number-of-ways-to-buy-pens-and-pencils/

You are given an integer total indicating the amount of money you have. You are also given two integers cost1 and cost2 indicating the price of a pen and pencil respectively. 
You can spend part or all of your money to buy multiple quantities (or none) of each kind of writing utensil.

Return the number of distinct ways you can buy some number of pens and pencils.

 

Example 1:

Input: total = 20, cost1 = 10, cost2 = 5
Output: 9
Explanation: The price of a pen is 10 and the price of a pencil is 5.
- If you buy 0 pens, you can buy 0, 1, 2, 3, or 4 pencils.
- If you buy 1 pen, you can buy 0, 1, or 2 pencils.
- If you buy 2 pens, you cannot buy any pencils.
The total number of ways to buy pens and pencils is 5 + 3 + 1 = 9.
Example 2:

Input: total = 5, cost1 = 10, cost2 = 10
Output: 1
Explanation: The price of both pens and pencils are 10, which cost more than total, so you cannot buy any writing utensils. Therefore, there is only 1 way: buy 0 pens and 0 pencils.
 

Constraints:

1 <= total, cost1, cost2 <= 106

class Solution
{
public:
    long long waysToBuyPensPencils(int total, int cost1, int cost2)
    {
        long long res = 0;
        while(total >= 0)
        {
            res += (total / cost2) + 1;
            total -= cost1;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/design-an-atm-machine/

There is an ATM machine that stores banknotes of 5 denominations: 20, 50, 100, 200, and 500 dollars. Initially the ATM is empty. 
The user can use the machine to deposit or withdraw any amount of money.

When withdrawing, the machine prioritizes using banknotes of larger values.

For example, if you want to withdraw $300 and there are 2 $50 banknotes, 1 $100 banknote, and 1 $200 banknote, then the machine will use the $100 and $200 banknotes.
However, if you try to withdraw $600 and there are 3 $200 banknotes and 1 $500 banknote, then the withdraw request will be rejected 
because the machine will first try to use the $500 banknote and then be unable to use banknotes to complete the remaining $100. 
Note that the machine is not allowed to use the $200 banknotes instead of the $500 banknote.
Implement the ATM class:

ATM() Initializes the ATM object.
void deposit(int[] banknotesCount) Deposits new banknotes in the order $20, $50, $100, $200, and $500.
int[] withdraw(int amount) Returns an array of length 5 of the number of banknotes that will be handed to the user in the order $20, $50, $100, $200, and $500, 
and update the number of banknotes in the ATM after withdrawing. Returns [-1] if it is not possible (do not withdraw any banknotes in this case).
 
一个 ATM 机器，存有 5 种面值的钞票：20 ，50 ，100 ，200 和 500 美元。初始时，ATM 机是空的。用户可以用它存或者取任意数目的钱。

取款时，机器会优先取 较大 数额的钱。

比方说，你想取 $300 ，并且机器里有 2 张 $50 的钞票，1 张 $100 的钞票和1 张 $200 的钞票，那么机器会取出 $100 和 $200 的钞票。
但是，如果你想取 $600 ，机器里有 3 张 $200 的钞票和1 张 $500 的钞票，那么取款请求会被拒绝，因为机器会先取出 $500 的钞票，然后无法取出剩余的 $100 。
注意，因为有 $500 钞票的存在，机器 不能 取 $200 的钞票。
请你实现 ATM 类：

ATM() 初始化 ATM 对象。
void deposit(int[] banknotesCount) 分别存入 $20 ，$50，$100，$200 和 $500 钞票的数目。
int[] withdraw(int amount) 返回一个长度为 5 的数组，分别表示 $20 ，$50，$100 ，$200 和 $500 钞票的数目，并且更新 ATM 机里取款后钞票的剩余数量。如果无法取出指定数额的钱，请返回 [-1] （这种情况下 不 取出任何钞票）。

Example 1:

Input
["ATM", "deposit", "withdraw", "deposit", "withdraw", "withdraw"]
[[], [[0,0,1,2,1]], [600], [[0,1,0,1,1]], [600], [550]]
Output
[null, null, [0,0,1,0,1], null, [-1], [0,1,0,0,1]]

Explanation
ATM atm = new ATM();
atm.deposit([0,0,1,2,1]); // Deposits 1 $100 banknote, 2 $200 banknotes,
                          // and 1 $500 banknote.
atm.withdraw(600);        // Returns [0,0,1,0,1]. The machine uses 1 $100 banknote
                          // and 1 $500 banknote. The banknotes left over in the
                          // machine are [0,0,0,2,0].
atm.deposit([0,1,0,1,1]); // Deposits 1 $50, $200, and $500 banknote.
                          // The banknotes in the machine are now [0,1,0,3,1].
atm.withdraw(600);        // Returns [-1]. The machine will try to use a $500 banknote
                          // and then be unable to complete the remaining $100,
                          // so the withdraw request will be rejected.
                          // Since the request is rejected, the number of banknotes
                          // in the machine is not modified.
atm.withdraw(550);        // Returns [0,1,0,0,1]. The machine uses 1 $50 banknote
                          // and 1 $500 banknote.
 

Constraints:

banknotesCount.length == 5
0 <= banknotesCount[i] <= 109
1 <= amount <= 109
At most 5000 calls in total will be made to withdraw and deposit.
At least one call will be made to each function withdraw and deposit.

class ATM
{
public:
    vector<int>v = {20, 50, 100, 200, 500};
    vector<long long>atm = {0, 0, 0, 0, 0};

    ATM()
    {

    }

    void deposit(vector<int> bC)
    {
        for(int i = 0; i < 5; i++) atm[i] += bC[i];
    }

    vector<int> withdraw(int amount)
    {
        vector<int> vec(5);
        for (int i = 4; i >= 0 && amount > 0; --i)
        {
            if (atm[i] == 0) continue;
            vec[i] = min(atm[i], (long long)amount / v[i]);
            amount -= vec[i] * v[i];
        }
        if(amount > 0) return {-1};
        for(int i = 0; i < 5; i++) atm[i] -= vec[i];
        return vec;
    }
};


// Source https://leetcode.com/problems/maximum-score-of-a-node-sequence/

There is an undirected graph with n nodes, numbered from 0 to n - 1.

You are given a 0-indexed integer array scores of length n where scores[i] denotes the score of node i. 
You are also given a 2D integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting nodes ai and bi.

A node sequence is valid if it meets the following conditions:

There is an edge connecting every pair of adjacent nodes in the sequence.
No node appears more than once in the sequence.
The score of a node sequence is defined as the sum of the scores of the nodes in the sequence.

Return the maximum score of a valid node sequence with a length of 4. If no such sequence exists, return -1.

 

Example 1:


Input: scores = [5,2,9,8,4], edges = [[0,1],[1,2],[2,3],[0,2],[1,3],[2,4]]
Output: 24
Explanation: The figure above shows the graph and the chosen node sequence [0,1,2,3].
The score of the node sequence is 5 + 2 + 9 + 8 = 24.
It can be shown that no other node sequence has a score of more than 24.
Note that the sequences [3,1,2,0] and [1,0,2,3] are also valid and have a score of 24.
The sequence [0,3,2,4] is not valid since no edge connects nodes 0 and 3.
Example 2:


Input: scores = [9,20,6,4,11,12], edges = [[0,3],[5,3],[2,4],[1,3]]
Output: -1
Explanation: The figure above shows the graph.
There are no valid node sequences of length 4, so we return -1.
 

Constraints:

n == scores.length
4 <= n <= 5 * 104
1 <= scores[i] <= 108
0 <= edges.length <= 5 * 104
edges[i].length == 2
0 <= ai, bi <= n - 1
ai != bi
There are no duplicate edges.

class Solution
{
public:
    int maximumScore(vector<int> &scores, vector<vector<int>> &edges)
    {
        int n = scores.size();
        auto compare = [&scores] (const int &nodeA, const int &nodeB)
        {
            return scores[nodeA] > scores[nodeB];
        };
        vector<vector<int>> graph(n);
        for(auto &v : edges)
        {
            int nodeA = v[0], nodeB = v[1];
            graph[nodeA].push_back(nodeB);
            graph[nodeB].push_back(nodeA);

            sort(graph[nodeA].begin(), graph[nodeA].end(), compare);
            sort(graph[nodeB].begin(), graph[nodeB].end(), compare);

            if(graph[nodeA].size() > 3) graph[nodeA].pop_back();
            if(graph[nodeB].size() > 3) graph[nodeB].pop_back();
        }
        int ans = -1;
        for(auto &v : edges)
        {
            int nodeA = v[0], nodeB = v[1];
            for(auto a : graph[nodeA])
            {
                for(auto b : graph[nodeB])
                {
                    if(a != nodeB && b != nodeA && a != b)
                    {
                        ans = max(ans, scores[nodeA] + scores[nodeB] + scores[a] + scores[b]);
                    }
                }
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/calculate-digit-sum-of-a-string/

You are given a string s consisting of digits and an integer k.

A round can be completed if the length of s is greater than k. In one round, do the following:

Divide s into consecutive groups of size k such that the first k characters are in the first group, the next k characters are in the second group, and so on. 
Note that the size of the last group can be smaller than k.
Replace each group of s with a string representing the sum of all its digits. For example, "346" is replaced with "13" because 3 + 4 + 6 = 13.
Merge consecutive groups together to form a new string. If the length of the string is greater than k, repeat from step 1.
Return s after all rounds have been completed.

 

Example 1:

Input: s = "11111222223", k = 3
Output: "135"
Explanation: 
- For the first round, we divide s into groups of size 3: "111", "112", "222", and "23".
  ​​​​​Then we calculate the digit sum of each group: 1 + 1 + 1 = 3, 1 + 1 + 2 = 4, 2 + 2 + 2 = 6, and 2 + 3 = 5. 
  So, s becomes "3" + "4" + "6" + "5" = "3465" after the first round.
- For the second round, we divide s into "346" and "5".
  Then we calculate the digit sum of each group: 3 + 4 + 6 = 13, 5 = 5. 
  So, s becomes "13" + "5" = "135" after second round. 
Now, s.length <= k, so we return "135" as the answer.
Example 2:

Input: s = "00000000", k = 3
Output: "000"
Explanation: 
We divide s into "000", "000", and "00".
Then we calculate the digit sum of each group: 0 + 0 + 0 = 0, 0 + 0 + 0 = 0, and 0 + 0 = 0. 
s becomes "0" + "0" + "0" = "000", whose length is equal to k, so we return "000".
 

Constraints:

1 <= s.length <= 100
2 <= k <= 100
s consists of digits only.

class Solution
{
public:

    string digitSum(string s, int k)
    {
        while(s.length() > k)
        {
            int len = s.length();
            string temp = "";
            for(int i = 0; i < len; i += k)
            {
                int val = 0;
                int cnt = min(len - i, k);
                int j = i;
                while (cnt > 0)
                {
                    val += s[j] - '0';
                    --cnt;
                    ++j;
                }
                temp.append(to_string(val));
            }
            s = std::move(temp);
        }
        return s;
    }
};


// Source https://leetcode.com/problems/minimum-rounds-to-complete-all-tasks/

You are given a 0-indexed integer array tasks, where tasks[i] represents the difficulty level of a task. In each round, you can complete either 2 or 3 tasks of the same difficulty level.

Return the minimum rounds required to complete all the tasks, or -1 if it is not possible to complete all the tasks.

 

Example 1:

Input: tasks = [2,2,3,3,2,4,4,4,4,4]
Output: 4
Explanation: To complete all the tasks, a possible plan is:
- In the first round, you complete 3 tasks of difficulty level 2. 
- In the second round, you complete 2 tasks of difficulty level 3. 
- In the third round, you complete 3 tasks of difficulty level 4. 
- In the fourth round, you complete 2 tasks of difficulty level 4.  
It can be shown that all the tasks cannot be completed in fewer than 4 rounds, so the answer is 4.
222 33 444 44
Example 2:

Input: tasks = [2,3,3]
Output: -1
Explanation: There is only 1 task of difficulty level 2, but in each round, you can only complete either 2 or 3 tasks of the same difficulty level. Hence, you cannot complete all the tasks, and the answer is -1.
 

Constraints:

1 <= tasks.length <= 105
1 <= tasks[i] <= 109

class Solution
{
public:

    int minimumRounds(vector<int> &tasks)
    {
        unordered_map<int, int> mp;
        for (auto val : tasks)
        {
            mp[val]++;
        }
        int res = 0;
        for (auto [val, freq] : mp)
        {
            if(freq == 1)
            {
                return -1;
            }
            else
            {
                if(freq % 3 == 0)
                {
                    res += freq / 3;
                }
                else if(freq % 3 == 1)
                {
                    res += (freq / 3 - 1) + 2;
                }
                else
                {
                    res += freq / 3 + 1;
                }
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/maximum-trailing-zeros-in-a-cornered-path/

You are given a 2D integer array grid of size m x n, where each cell contains a positive integer.

A cornered path is defined as a set of adjacent cells with at most one turn. 
More specifically, the path should exclusively move either horizontally or vertically up to the turn (if there is one), without returning to a previously visited cell. 
After the turn, the path will then move exclusively in the alternate direction: move vertically if it moved horizontally, and vice versa, also without returning to a previously visited cell.

The product of a path is defined as the product of all the values in the path.

Return the maximum number of trailing zeros in the product of a cornered path found in grid.

Note:

Horizontal movement means moving in either the left or right direction.
Vertical movement means moving in either the up or down direction.
 
给你一个二维整数数组 grid ，大小为 m x n，其中每个单元格都含一个正整数。

转角路径 定义为：包含至多一个弯的一组相邻单元。具体而言，路径应该完全 向水平方向 或者 向竖直方向 移动过弯（如果存在弯），而不能访问之前访问过的单元格。
在过弯之后，路径应当完全朝 另一个 方向行进：如果之前是向水平方向，那么就应该变为向竖直方向；反之亦然。当然，同样不能访问之前已经访问过的单元格。

一条路径的 乘积 定义为：路径上所有值的乘积。

请你从 grid 中找出一条乘积中尾随零数目最多的转角路径，并返回该路径中尾随零的数目。

注意：

水平 移动是指向左或右移动。
竖直 移动是指向上或下移动。

Example 1:


Input: grid = [[23,17,15,3,20],[8,1,20,27,11],[9,4,6,2,21],[40,9,1,10,6],[22,7,4,5,3]]
Output: 3
Explanation: The grid on the left shows a valid cornered path.
It has a product of 15 * 20 * 6 * 1 * 10 = 18000 which has 3 trailing zeros.
It can be shown that this is the maximum trailing zeros in the product of a cornered path.

The grid in the middle is not a cornered path as it has more than one turn.
The grid on the right is not a cornered path as it requires a return to a previously visited cell.
Example 2:


Input: grid = [[4,3,2],[7,6,1],[8,8,8]]
Output: 0
Explanation: The grid is shown in the figure above.
There are no cornered paths in the grid that result in a product with a trailing zero.
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 105
1 <= m * n <= 105
1 <= grid[i][j] <= 1000


class Solution
{
public:
    int maxTrailingZeros(vector<vector<int>> &grid)
    {
        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> fiveHor(m, vector<int>(n, 0)), fiveVer(m, vector<int>(n, 0)), twoHor(m, vector<int>(n, 0)),  twoVer(m, vector<int>(n, 0));
        for (int i = 0; i < m; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                int v = grid[i][j], fiveCount = 0, twoCount = 0;
                while (v > 0 && (v % 5 == 0))
                {
                    fiveCount++;
                    v /= 5;
                }
                while (v > 0 && (v % 2 == 0))
                {
                    twoCount++;
                    v /= 2;
                }
                fiveHor[i][j] = ((j == 0) ? 0 : fiveHor[i][j - 1]) + fiveCount;
                fiveVer[i][j] = ((i == 0) ? 0 : fiveVer[i - 1][j]) + fiveCount;
                twoHor[i][j]  = ((j == 0) ? 0 : twoHor[i][j - 1]) + twoCount;
                twoVer[i][j]  = ((i == 0) ? 0 : twoVer[i - 1][j]) + twoCount;
            }
        }
        int res = 0;
        for (int i = 0; i < m; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                int a = fiveHor[i][j] - (j == 0 ? 0 : fiveHor[i][j - 1]); //current cell's count of 5
                int b = twoHor[i][j]  - (j == 0 ? 0 : twoHor[i][j - 1]); //current cell's count of 2
                int a1 = fiveHor[i][n - 1] - fiveHor[i][j];
                int b1 = twoHor[i][n - 1] - twoHor[i][j];    //right
                int a2 = fiveVer[m - 1][j] - fiveVer[i][j];
                int b2 = twoVer[m - 1][j] - twoVer[i][j];    //down
                int a3 = (j == 0) ? 0 : fiveHor[i][j - 1];
                int b3 = (j == 0) ? 0 : twoHor[i][j - 1];    //left
                int a4 = (i == 0) ? 0 : fiveVer[i - 1][j];
                int b4 = (i == 0) ? 0 : twoVer[i - 1][j];    //up
                res = max(res, min(a + a1 + a2, b + b1 + b2));
                res = max(res, min(a + a2 + a3, b + b2 + b3));
                res = max(res, min(a + a3 + a4, b + b3 + b4));
                res = max(res, min(a + a4 + a1, b + b4 + b1));
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/longest-path-with-different-adjacent-characters/

You are given a tree (i.e. a connected, undirected graph that has no cycles) rooted at node 0 consisting of n nodes numbered from 0 to n - 1. 
The tree is represented by a 0-indexed array parent of size n, where parent[i] is the parent of node i. Since node 0 is the root, parent[0] == -1.

You are also given a string s of length n, where s[i] is the character assigned to node i.

Return the length of the longest path in the tree such that no pair of adjacent nodes on the path have the same character assigned to them.

 

Example 1:


Input: parent = [-1,0,0,1,1,2], s = "abacbe"
Output: 3
Explanation: The longest path where each two adjacent nodes have different characters in the tree is the path: 0 -> 1 -> 3. The length of this path is 3, so 3 is returned.
It can be proven that there is no longer path that satisfies the conditions. 
Example 2:


Input: parent = [-1,0,0,0], s = "aabc"
Output: 3
Explanation: The longest path where each two adjacent nodes have different characters is the path: 2 -> 0 -> 3. The length of this path is 3, so 3 is returned.
 

Constraints:

n == parent.length == s.length
1 <= n <= 105
0 <= parent[i] <= n - 1 for all i >= 1
parent[0] == -1
parent represents a valid tree.
s consists of only lowercase English letters.

class Solution
{
public:
    int ans;

    int dfs(int root, vector<int> adj[], string &s, char prev_val)
    {
        int max1 = 0, max2 = 0;
        for(auto child : adj[root])
        {
            int temp = dfs(child, adj, s, s[root]);
            if (temp > max1) { max2 = max1; max1 = temp; }
            else if(temp > max2) { max2 = temp; }
        }
        ans = max(ans, max1 + max2 + 1);
        return prev_val != s[root] ? max1 + 1 : 0;
    }

    int longestPath(vector<int> &parent, string s)
    {
        int n = parent.size();
        vector<int>adj[n];
        for(auto i = 1; i < n; i++)
        {
            adj[parent[i]].push_back(i);
        }
        ans = 0;
        dfs(0, adj, s, '#');
        return ans;
    }
};


// Source https://leetcode.com/problems/intersection-of-multiple-arrays/

Given a 2D integer array nums where nums[i] is a non-empty array of distinct positive integers, return the list of integers that are present in each array of nums sorted in ascending order.
 

Example 1:

Input: nums = [[3,1,2,4,5],[1,2,3,4],[3,4,5,6]]
Output: [3,4]
Explanation: 
The only integers present in each of nums[0] = [3,1,2,4,5], nums[1] = [1,2,3,4], and nums[2] = [3,4,5,6] are 3 and 4, so we return [3,4].
Example 2:

Input: nums = [[1,2,3],[4,5,6]]
Output: []
Explanation: 
There does not exist any integer present both in nums[0] and nums[1], so we return an empty list [].
 

Constraints:

1 <= nums.length <= 1000
1 <= sum(nums[i].length) <= 1000
1 <= nums[i][j] <= 1000
All the values of nums[i] are unique.

class Solution
{
public:
    vector<int> intersection(vector<vector<int>> &nums)
    {
        int n = nums.size();
        unordered_map<int, bitset<1001>> mp;
        for (int i = 0; i < n; ++i)
        {
            for (auto val : nums[i])
            {
                mp[val].set(i);
            }
        }
        vector<int> vec;
        vec.reserve(1000);
        for (auto &[val, bs] : mp)
        {
            if (bs.count() == n) vec.push_back(val);
        }
        sort(vec.begin(), vec.end());
        return vec;
    }
};


// Source https://leetcode.com/problems/count-lattice-points-inside-a-circle/

Given a 2D integer array circles where circles[i] = [xi, yi, ri] represents the center (xi, yi) and radius ri of the ith circle drawn on a grid, 
return the number of lattice points that are present inside at least one circle.

Note:

A lattice point is a point with integer coordinates.
Points that lie on the circumference of a circle are also considered to be inside it.

给你一个二维整数数组 circles ，其中 circles[i] = [xi, yi, ri] 表示网格上圆心为 (xi, yi) 且半径为 ri 的第 i 个圆，返回出现在 至少一个 圆内的 格点数目 。

注意：

格点 是指整数坐标对应的点。
圆周上的点 也被视为出现在圆内的点。

Example 1:


Input: circles = [[2,2,1]]
Output: 5
Explanation:
The figure above shows the given circle.
The lattice points present inside the circle are (1, 2), (2, 1), (2, 2), (2, 3), and (3, 2) and are shown in green.
Other points such as (1, 1) and (1, 3), which are shown in red, are not considered inside the circle.
Hence, the number of lattice points present inside at least one circle is 5.
Example 2:


Input: circles = [[2,2,2],[3,4,1]]
Output: 16
Explanation:
The figure above shows the given circles.
There are exactly 16 lattice points which are present inside at least one circle. 
Some of them are (0, 2), (2, 0), (2, 4), (3, 2), and (4, 4).
 

Constraints:

1 <= circles.length <= 200
circles[i].length == 3
1 <= xi, yi <= 100
1 <= ri <= min(xi, yi)

class Solution
{
public:
    int countLatticePoints(vector<vector<int>> &circles)
    {
        int min_x = INT_MAX;
        int max_x = INT_MIN;
        int min_y = INT_MAX;
        int max_y = INT_MIN;
        for (auto &v : circles)
        {
            min_x = min(min_x, v[0] - v[2]);
            max_x = max(max_x,v[0] + v[2]);
            min_y = min(min_y, v[1] - v[2]);
            max_y = max(max_y, v[1] + v[2]);
        }
        int ans = 0;
        for(int i = min_x; i <= max_x; i++)
        {
            for(int j = min_y; j <= max_y; j++)
            {
                bool flag = false;
                for (auto &v : circles)
                {
                    if (((v[0] - i) * (v[0] - i) + (v[1] - j) * (v[1] - j)) <= (v[2] * v[2]))
                    {
                        flag = true;
                        break;
                    }
                }
                if(flag) ++ans;
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/count-number-of-rectangles-containing-each-point/

You are given a 2D integer array rectangles where rectangles[i] = [li, hi] indicates that ith rectangle has a length of li and a height of hi. 
You are also given a 2D integer array points where points[j] = [xj, yj] is a point with coordinates (xj, yj).

The ith rectangle has its bottom-left corner point at the coordinates (0, 0) and its top-right corner point at (li, hi).

Return an integer array count of length points.length where count[j] is the number of rectangles that contain the jth point.

The ith rectangle contains the jth point if 0 <= xj <= li and 0 <= yj <= hi. Note that points that lie on the edges of a rectangle are also considered to be contained by that rectangle.

 

Example 1:


Input: rectangles = [[1,2],[2,3],[2,5]], points = [[2,1],[1,4]]
Output: [2,1]
Explanation: 
The first rectangle contains no points.
The second rectangle contains only the point (2, 1).
The third rectangle contains the points (2, 1) and (1, 4).
The number of rectangles that contain the point (2, 1) is 2.
The number of rectangles that contain the point (1, 4) is 1.
Therefore, we return [2, 1].
Example 2:


Input: rectangles = [[1,1],[2,2],[3,3]], points = [[1,3],[1,1]]
Output: [1,3]
Explanation:
The first rectangle contains only the point (1, 1).
The second rectangle contains only the point (1, 1).
The third rectangle contains the points (1, 3) and (1, 1).
The number of rectangles that contain the point (1, 3) is 1.
The number of rectangles that contain the point (1, 1) is 3.
Therefore, we return [1, 3].
 

Constraints:

1 <= rectangles.length, points.length <= 5 * 104
rectangles[i].length == points[j].length == 2
1 <= li, xj <= 109
1 <= hi, yj <= 100
All the rectangles are unique.
All the points are unique.

class Solution
{
public:

    vector<int> countRectangles(vector<vector<int>> &rectangles, vector<vector<int>> &points)
    {
        vector<vector<int>> heightLookup(101);
        for (vector<int> &v : heightLookup) v.reserve(1000);
        for (vector<int> &v : rectangles)
        {
            heightLookup[v[1]].push_back(v[0]);
        }
        for (vector<int> &v : heightLookup)
        {
            sort(v.begin(), v.end());
        }
        vector<int> res;
        res.reserve(points.size());
        for (vector<int> &v : points)
        {
            int cnt = 0;
            for (int i = 100; i >= v[1]; i--)
            {
                if (heightLookup[i].empty()) continue;
                auto itr = lower_bound(heightLookup[i].begin(), heightLookup[i].end(), v[0]);
                if (itr != heightLookup[i].end())
                {
                    int idx = itr - heightLookup[i].begin();
                    cnt += (heightLookup[i].size() - idx);
                }
            }
            res.push_back(cnt);
        }
        return res;
    }
};


// Source https://leetcode.com/problems/number-of-flowers-in-full-bloom/

You are given a 0-indexed 2D integer array flowers, where flowers[i] = [starti, endi] means the ith flower will be in full bloom from starti to endi (inclusive). 
You are also given a 0-indexed integer array persons of size n, where persons[i] is the time that the ith person will arrive to see the flowers.

Return an integer array answer of size n, where answer[i] is the number of flowers that are in full bloom when the ith person arrives.

给你一个下标从 0 开始的二维整数数组 flowers ，其中 flowers[i] = [starti, endi] 表示第 i 朵花的 花期 从 starti 到 endi （都 包含）。
同时给你一个下标从 0 开始大小为 n 的整数数组 persons ，persons[i] 是第 i 个人来看花的时间。

请你返回一个大小为 n 的整数数组 answer ，其中 answer[i]是第 i 个人到达时在花期内花的 数目 。

Example 1:


Input: flowers = [[1,6],[3,7],[9,12],[4,13]], persons = [2,3,7,11]
Output: [1,2,2,2]
Explanation: The figure above shows the times when the flowers are in full bloom and when the people arrive.
For each person, we return the number of flowers in full bloom during their arrival.
Example 2:


Input: flowers = [[1,10],[3,3]], persons = [3,3,2]
Output: [2,2,1]
Explanation: The figure above shows the times when the flowers are in full bloom and when the people arrive.
For each person, we return the number of flowers in full bloom during their arrival.
 

Constraints:

1 <= flowers.length <= 5 * 104
flowers[i].length == 2
1 <= starti <= endi <= 109
1 <= persons.length <= 5 * 104
1 <= persons[i] <= 109

class Solution
{
public:
    vector<int> fullBloomFlowers(vector<vector<int>> &flowers, vector<int> &persons)
    {
        map<int, int> mp;
        for (auto &v : flowers)
        {
            mp[v[0]]++;
            mp[v[1] + 1]--;
        }
        int sum = 0;
        for (auto &p : mp)
        {
            sum += p.second;
            p.second = sum;
        }
        int len = persons.size();
        vector<int> res(len);
        for (int i = 0; i < len; i++)
        {
            auto itr= mp.upper_bound(persons[i]);
            if (itr != mp.begin())
            {
                --itr;
                res[i] = itr->second;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/count-prefixes-of-a-given-string/

You are given a string array words and a string s, where words[i] and s comprise only of lowercase English letters.

Return the number of strings in words that are a prefix of s.

A prefix of a string is a substring that occurs at the beginning of the string. A substring is a contiguous sequence of characters within a string.

 

Example 1:

Input: words = ["a","b","c","ab","bc","abc"], s = "abc"
Output: 3
Explanation:
The strings in words which are a prefix of s = "abc" are:
"a", "ab", and "abc".
Thus the number of strings in words which are a prefix of s is 3.
Example 2:

Input: words = ["a","a"], s = "aa"
Output: 2
Explanation:
Both of the strings are a prefix of s. 
Note that the same string can occur multiple times in words, and it should be counted each time.
 

Constraints:

1 <= words.length <= 1000
1 <= words[i].length, s.length <= 10
words[i] and s consist of lowercase English letters only.

class Solution
{
public:
    int countPrefixes(vector<string> &words, string s)
    {
        int res = 0;
        for(auto &str : words)
        {
            if(s.find(str) == 0)
            {
                ++res;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/minimum-average-difference/

You are given a 0-indexed integer array nums of length n.

The average difference of the index i is the absolute difference between the average of the first i + 1 elements of nums and the average of the last n - i - 1 elements. 
Both averages should be rounded down to the nearest integer.

Return the index with the minimum average difference. If there are multiple such indices, return the smallest one.

Note:

The absolute difference of two numbers is the absolute value of their difference.
The average of n elements is the sum of the n elements divided (integer division) by n.
The average of 0 elements is considered to be 0.
 

Example 1:

Input: nums = [2,5,3,9,5,3]
Output: 3
Explanation:
- The average difference of index 0 is: |2 / 1 - (5 + 3 + 9 + 5 + 3) / 5| = |2 / 1 - 25 / 5| = |2 - 5| = 3.
- The average difference of index 1 is: |(2 + 5) / 2 - (3 + 9 + 5 + 3) / 4| = |7 / 2 - 20 / 4| = |3 - 5| = 2.
- The average difference of index 2 is: |(2 + 5 + 3) / 3 - (9 + 5 + 3) / 3| = |10 / 3 - 17 / 3| = |3 - 5| = 2.
- The average difference of index 3 is: |(2 + 5 + 3 + 9) / 4 - (5 + 3) / 2| = |19 / 4 - 8 / 2| = |4 - 4| = 0.
- The average difference of index 4 is: |(2 + 5 + 3 + 9 + 5) / 5 - 3 / 1| = |24 / 5 - 3 / 1| = |4 - 3| = 1.
- The average difference of index 5 is: |(2 + 5 + 3 + 9 + 5 + 3) / 6 - 0| = |27 / 6 - 0| = |4 - 0| = 4.
The average difference of index 3 is the minimum average difference so return 3.
Example 2:

Input: nums = [0]
Output: 0
Explanation:
The only index is 0 so return 0.
The average difference of index 0 is: |0 / 1 - 0| = |0 - 0| = 0.
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 105

class Solution
{
public:
    int minimumAverageDifference(vector<int> &nums)
    {
        long long int total = accumulate(nums.begin(), nums.end(), 0LL);
        int n = nums.size();
        long long int mnVal = INT_MAX;
        int res;
        long long int sum = 0;
        for(int i = 0; i < n; i++)
        {
            sum += nums[i];
            long long int diff1 = sum / (i + 1);
            long long int diff2 = 0;
            if (i < n - 1) diff2 = (total - sum) / (n - i - 1);
            long long int curr = abs(diff1 - diff2);
            if(curr < mnVal)
            {
                mnVal = curr;
                res = i;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/count-unguarded-cells-in-the-grid/

You are given two integers m and n representing a 0-indexed m x n grid. You are also given two 2D integer arrays guards and walls 
where guards[i] = [rowi, coli] and walls[j] = [rowj, colj] represent the positions of the ith guard and jth wall respectively.

A guard can see every cell in the four cardinal directions (north, east, south, or west) starting from their position unless obstructed by a wall or another guard. 
A cell is guarded if there is at least one guard that can see it.

Return the number of unoccupied cells that are not guarded.

 

Example 1:


Input: m = 4, n = 6, guards = [[0,0],[1,1],[2,3]], walls = [[0,1],[2,2],[1,4]]
Output: 7
Explanation: The guarded and unguarded cells are shown in red and green respectively in the above diagram.
There are a total of 7 unguarded cells, so we return 7.
Example 2:


Input: m = 3, n = 3, guards = [[1,1]], walls = [[0,1],[1,0],[2,1],[1,2]]
Output: 4
Explanation: The unguarded cells are shown in green in the above diagram.
There are a total of 4 unguarded cells, so we return 4.
 

Constraints:

1 <= m, n <= 105
2 <= m * n <= 105
1 <= guards.length, walls.length <= 5 * 104
2 <= guards.length + walls.length <= m * n
guards[i].length == walls[j].length == 2
0 <= rowi, rowj < m
0 <= coli, colj < n
All the positions in guards and walls are unique.

class Solution
{
public:
    int countUnguarded(int m, int n, vector<vector<int>> &guards, vector<vector<int>> &walls)
    {
        vector<vector<int>>matrix(m, vector<int>(n));
        for (auto &v : guards)
            matrix[v[0]][v[1]] = 2;
        for (auto &v : walls)
            matrix[v[0]][v[1]] = 2;
        int dx[4] = {1, -1, 0, 0};
        int dy[4] = {0, 0, 1, -1};
        for (auto &guard : guards)
        {
            for (int k = 0; k < 4; ++k)
            {
                int i = guard[0], j = guard[1];
                while (true)
                {
                    i += dx[k];
                    j += dy[k];
                    if (i < 0 || i >= m || j < 0 || j >= n) break;
                    if (matrix[i][j] == 2) break;
                    matrix[i][j] = 1;
                }
            }
        }
        int res = 0;
        for (int i = 0; i < m; i++)
        {
            for (int j = 0; j < n; j++)
            {
                if (matrix[i][j] == 0) ++res;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/escape-the-spreading-fire/

You are given a 0-indexed 2D integer array grid of size m x n which represents a field. Each cell has one of three values:

0 represents grass,
1 represents fire,
2 represents a wall that you and fire cannot pass through.
You are situated in the top-left cell, (0, 0), and you want to travel to the safehouse at the bottom-right cell, (m - 1, n - 1). Every minute, you may move to an adjacent grass cell. After your move, every fire cell will spread to all adjacent cells that are not walls.

Return the maximum number of minutes that you can stay in your initial position before moving while still safely reaching the safehouse. If this is impossible, return -1. If you can always reach the safehouse regardless of the minutes stayed, return 109.

Note that even if the fire spreads to the safehouse immediately after you have reached it, it will be counted as safely reaching the safehouse.

A cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).

给你一个下标从 0 开始大小为 m x n 的二维整数数组 grid ，它表示一个网格图。每个格子为下面 3 个值之一：

0 表示草地。
1 表示着火的格子。
2 表示一座墙，你跟火都不能通过这个格子。
一开始你在最左上角的格子 (0, 0) ，你想要到达最右下角的安全屋格子 (m - 1, n - 1) 。每一分钟，你可以移动到 相邻 的草地格子。每次你移动 之后 ，着火的格子会扩散到所有不是墙的 相邻 格子。

请你返回你在初始位置可以停留的 最多 分钟数，且停留完这段时间后你还能安全到达安全屋。如果无法实现，请你返回 -1 。如果不管你在初始位置停留多久，你 总是 能到达安全屋，请你返回 10^9 。

注意，如果你到达安全屋后，火马上到了安全屋，这视为你能够安全到达安全屋。

如果两个格子有共同边，那么它们为 相邻 格子。


Example 1:


Input: grid = [[0,2,0,0,0,0,0],[0,0,0,2,2,1,0],[0,2,0,0,1,2,0],[0,0,2,2,2,0,2],[0,0,0,0,0,0,0]]
Output: 3
Explanation: The figure above shows the scenario where you stay in the initial position for 3 minutes.
You will still be able to safely reach the safehouse.
Staying for more than 3 minutes will not allow you to safely reach the safehouse.
Example 2:


Input: grid = [[0,0,0,0],[0,1,2,0],[0,2,0,0]]
Output: -1
Explanation: The figure above shows the scenario where you immediately move towards the safehouse.
Fire will spread to any cell you move towards and it is impossible to safely reach the safehouse.
Thus, -1 is returned.
Example 3:


Input: grid = [[0,0,0],[2,2,0],[1,2,0]]
Output: 1000000000
Explanation: The figure above shows the initial grid.
Notice that the fire is contained by walls and you will always be able to safely reach the safehouse.
Thus, 109 is returned.
 

Constraints:

m == grid.length
n == grid[i].length
2 <= m, n <= 300
4 <= m * n <= 2 * 104
grid[i][j] is either 0, 1, or 2.
grid[0][0] == grid[m - 1][n - 1] == 0

class Solution
{
public:
    int m, n;
    int fire[301][301];
    bool visited[301][301];
    int dx[4] = {-1, 0, 1, 0};
    int dy[4] = {0, -1, 0, 1};

    bool isPossible(long maxT)
    {
        memset(visited, 0, sizeof(visited));
        visited[0][0] = true;
        queue<tuple<int, int, int>> q;
        q.push({0, 0, maxT});
        while(!q.empty())
        {
            auto [r, c, t] = q.front();
            q.pop();
            if(r == m - 1 && c == n - 1) return true;
            if(fire[r][c] <= t) continue;
            for(int k = 0; k < 4; ++k)
            {
                int nR = r + dx[k];
                int nC = c + dy[k];
                if (nR < 0 || nR >= m || nC < 0 || nC >= n || fire[nR][nC] == -1 || (t + 1) > fire[nR][nC]) continue;
                if(!visited[nR][nC])
                {
                    visited[nR][nC] = true;
                    q.push({nR, nC, t + 1});
                }
            }
        }
        return false;
    }

    int maximumMinutes(vector<vector<int>> &grid)
    {
        m = grid.size();
        n = grid[0].size();
        memset(fire, 0x7F, sizeof(fire));
        queue<pair<int, int>> q;
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(grid[i][j] == 1)
                {
                    fire[i][j] = 0;
                    q.push({i, j});
                }
                else if(grid[i][j] == 2)
                {
                    fire[i][j] = -1;
                }
            }
        }
        while(!q.empty())
        {
            auto [row, col] = q.front();
            q.pop();
            for(int k = 0; k < 4; ++k)
            {
                int nRow = row + dx[k];
                int nCol = col + dy[k];
                if (nRow < 0 || nRow >= m || nCol < 0 || nCol >= n || fire[nRow][nCol] == -1) continue;
                if(fire[nRow][nCol] > fire[row][col] + 1)
                {
                    fire[nRow][nCol] = fire[row][col] + 1 ;
                    q.push({nRow, nCol});
                }
            }
        }
        long l = 0, h = 2e4, maxWaitingTime = -1;
        while(l <= h)
        {
            long mid = l + (h - l) / 2;
            if(isPossible(mid))
            {
                maxWaitingTime = mid;
                l = mid + 1;
            }
            else
            {
                h = mid - 1;
            }
        }
        if (maxWaitingTime == 2e4) return 1e9;
        return maxWaitingTime;
    }
};


// Source https://leetcode.com/problems/remove-digit-from-number-to-maximize-result/

You are given a string number representing a positive integer and a character digit.

Return the resulting string after removing exactly one occurrence of digit from number such that the value of the resulting string in decimal form is maximized. 
The test cases are generated such that digit occurs at least once in number.

 

Example 1:

Input: number = "123", digit = "3"
Output: "12"
Explanation: There is only one '3' in "123". After removing '3', the result is "12".
Example 2:

Input: number = "1231", digit = "1"
Output: "231"
Explanation: We can remove the first '1' to get "231" or remove the second '1' to get "123".
Since 231 > 123, we return "231".
Example 3:

Input: number = "551", digit = "5"
Output: "51"
Explanation: We can remove either the first or second '5' from "551".
Both result in the string "51".
 

Constraints:

2 <= number.length <= 100
number consists of digits from '1' to '9'.
digit is a digit from '1' to '9'.
digit occurs at least once in number.

class Solution
{
public:
    string removeDigit(string number, char digit)
    {
        int len = number.length();
        for (int i = 0; i < len - 1; ++i)
        {
            if (number[i] == digit && number[i + 1] > digit)
                return number.substr(0, i) + number.substr(i + 1);
        }
        int last_d = number.rfind(digit);
        return number.substr(0, last_d) + number.substr(last_d + 1);
    }
};


// Source https://leetcode.com/problems/minimum-consecutive-cards-to-pick-up/

You are given an integer array cards where cards[i] represents the value of the ith card. A pair of cards are matching if the cards have the same value.

Return the minimum number of consecutive cards you have to pick up to have a pair of matching cards among the picked cards. If it is impossible to have matching cards, return -1.

 

Example 1:

Input: cards = [3,4,2,3,4,7]
Output: 4
Explanation: We can pick up the cards [3,4,2,3] which contain a matching pair of cards with value 3. Note that picking up the cards [4,2,3,4] is also optimal.
Example 2:

Input: cards = [1,0,5,3]
Output: -1
Explanation: There is no way to pick up a set of consecutive cards that contain a pair of matching cards.
 

Constraints:

1 <= cards.length <= 105
0 <= cards[i] <= 106

class Solution
{
public:
    int minimumCardPickup(vector<int> &cards)
    {
        int n = cards.size();
        unordered_map<int, int> mp;
        int res = INT_MAX;
        for(int i = 0; i < n; i++)
        {
            if(mp.find(cards[i]) != mp.end())
            {
                res = min(res, i + 1 - mp[cards[i]]);
                mp[cards[i]] = i;
            }
            else
            {
                mp[cards[i]] = i;
            }
        }
        return res == INT_MAX ? -1 : res;
    }
};


// Source https://leetcode.com/problems/k-divisible-elements-subarrays/

Given an integer array nums and two integers k and p, return the number of distinct subarrays which have at most k elements divisible by p.

Two arrays nums1 and nums2 are said to be distinct if:

They are of different lengths, or
There exists at least one index i where nums1[i] != nums2[i].
A subarray is defined as a non-empty contiguous sequence of elements in an array.

 

Example 1:

Input: nums = [2,3,3,2,2], k = 2, p = 2
Output: 11
Explanation:
The elements at indices 0, 3, and 4 are divisible by p = 2.
The 11 distinct subarrays which have at most k = 2 elements divisible by 2 are:
[2], [2,3], [2,3,3], [2,3,3,2], [3], [3,3], [3,3,2], [3,3,2,2], [3,2], [3,2,2], and [2,2].
Note that the subarrays [2] and [3] occur more than once in nums, but they should each be counted only once.
The subarray [2,3,3,2,2] should not be counted because it has 3 elements that are divisible by 2.
Example 2:

Input: nums = [1,2,3,4], k = 4, p = 1
Output: 10
Explanation:
All element of nums are divisible by p = 1.
Also, every subarray of nums will have at most 4 elements that are divisible by 1.
Since all subarrays are distinct, the total number of subarrays satisfying all the constraints is 10.
 

Constraints:

1 <= nums.length <= 200
1 <= nums[i], p <= 200
1 <= k <= nums.length

class Solution
{
public:
    int countDistinct(vector<int> &nums, int k, int p)
    {
        int n = nums.size();
        unordered_set<string> st;
        for(int i = 0; i < n; i++)
        {
            int cnt = 0;
            string str = "";
            str.reserve(100);
            for(int j = i; j < n && cnt <= k; j++)
            {
                str.push_back(nums[j]+'0');
                if(nums[j] % p == 0) ++cnt;
                if(cnt <= k) st.insert(str);
            }
        }
        return st.size();
    }
};


// Source https://leetcode.com/problems/total-appeal-of-a-string/

The appeal of a string is the number of distinct characters found in the string.

For example, the appeal of "abbca" is 3 because it has 3 distinct characters: 'a', 'b', and 'c'.
Given a string s, return the total appeal of all of its substrings.

A substring is a contiguous sequence of characters within a string.

 

Example 1:

Input: s = "abbca"
Output: 28
Explanation: The following are the substrings of "abbca":
- Substrings of length 1: "a", "b", "b", "c", "a" have an appeal of 1, 1, 1, 1, and 1 respectively. The sum is 5.
- Substrings of length 2: "ab", "bb", "bc", "ca" have an appeal of 2, 1, 2, and 2 respectively. The sum is 7.
- Substrings of length 3: "abb", "bbc", "bca" have an appeal of 2, 2, and 3 respectively. The sum is 7.
- Substrings of length 4: "abbc", "bbca" have an appeal of 3 and 3 respectively. The sum is 6.
- Substrings of length 5: "abbca" has an appeal of 3. The sum is 3.
The total sum is 5 + 7 + 7 + 6 + 3 = 28.
Example 2:

Input: s = "code"
Output: 20
Explanation: The following are the substrings of "code":
- Substrings of length 1: "c", "o", "d", "e" have an appeal of 1, 1, 1, and 1 respectively. The sum is 4.
- Substrings of length 2: "co", "od", "de" have an appeal of 2, 2, and 2 respectively. The sum is 6.
- Substrings of length 3: "cod", "ode" have an appeal of 3 and 3 respectively. The sum is 6.
- Substrings of length 4: "code" has an appeal of 4. The sum is 4.
The total sum is 4 + 6 + 6 + 4 = 20.
 

Constraints:

1 <= s.length <= 105
s consists of lowercase English letters.

dp[i] 表示the total appeal of all of 以s[i]为最后一个字符的 substrings.
dp[i] = dp[i - 1] + (i - position[s[i] - 'a']);

s[0 ... i -1] = abcdefg
s[0 ... i] =     abcdefgc

abcdefgc
bcdefgc
cdefgc
defgc
efgc
fgc
gc
c

class Solution
{
public:
    long long dp[100001];

    long long appealSum(string s)
    {
        int n = s.length();
        int position[26];
        memset(position, -1, sizeof(position));
        position[s[0] - 'a'] = 0;
        dp[0] = 1;
        long long res = 1;
        for(int i = 1; i < n; ++i)
        {
            dp[i] = dp[i - 1] + (i - position[s[i] - 'a']);
            res += dp[i];
            position[s[i] - 'a'] = i;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/largest-3-same-digit-number-in-string/

You are given a string num representing a large integer. An integer is good if it meets the following conditions:

It is a substring of num with length 3.
It consists of only one unique digit.
Return the maximum good integer as a string or an empty string "" if no such integer exists.

Note:

A substring is a contiguous sequence of characters within a string.
There may be leading zeroes in num or a good integer.
 

Example 1:

Input: num = "6777133339"
Output: "777"
Explanation: There are two distinct good integers: "777" and "333".
"777" is the largest, so we return "777".
Example 2:

Input: num = "2300019"
Output: "000"
Explanation: "000" is the only good integer.
Example 3:

Input: num = "42352338"
Output: ""
Explanation: No substring of length 3 consists of only one unique digit. Therefore, there are no good integers.
 

Constraints:

3 <= num.length <= 1000
num only consists of digits.

class Solution
{
public:
    string largestGoodInteger(string num)
    {
        int n = num.length();
        char mxVal = 0x00;
        for(int i = 0; i < n - 2; )
        {
            int j = i + 1;
            for (; j < n && num[j] == num[i]; ++j);
            if ((j - i) >= 3)
            {
                mxVal = max(mxVal, num[i]);
            }
            i = j;
        }
        if (mxVal == 0x00) return "";
        return string(3, mxVal);
    }
};


// Source https://leetcode.com/problems/count-nodes-equal-to-average-of-subtree/

Given the root of a binary tree, return the number of nodes where the value of the node is equal to the average of the values in its subtree.

Note:

The average of n elements is the sum of the n elements divided by n and rounded down to the nearest integer.
A subtree of root is a tree consisting of root and all of its descendants.
 

Example 1:


Input: root = [4,8,5,0,1,null,6]
Output: 5
Explanation: 
For the node with value 4: The average of its subtree is (4 + 8 + 5 + 0 + 1 + 6) / 6 = 24 / 6 = 4.
For the node with value 5: The average of its subtree is (5 + 6) / 2 = 11 / 2 = 5.
For the node with value 0: The average of its subtree is 0 / 1 = 0.
For the node with value 1: The average of its subtree is 1 / 1 = 1.
For the node with value 6: The average of its subtree is 6 / 1 = 6.
Example 2:


Input: root = [1]
Output: 1
Explanation: For the node with value 1: The average of its subtree is 1 / 1 = 1.
 

Constraints:

The number of nodes in the tree is in the range [1, 1000].
0 <= Node.val <= 1000

class Solution
{
public:
    int ans;

    pair<int, int> helper(TreeNode *root)
    {
        if(!root) return {0, 0} ;

        pair<int, int> lst = helper(root->left) ;
        pair<int, int> rst = helper(root->right ) ;

        int count = lst.second + rst.second + 1 ;
        int sum = lst.first + rst.first + root->val;

        int avg = sum / count ;
        if(avg == root->val) ++ans ;
        return {sum, count};
    }

    int averageOfSubtree(TreeNode *root)
    {
        ans = 0;
        helper(root) ;
        return ans ;
    }
};


// Source https://leetcode.com/problems/count-number-of-texts/

Alice is texting Bob using her phone. The mapping of digits to letters is shown in the figure below.

1	2(abc)	3(def)
4(ghi)	5(jkl)	6(mno)
7(pqrs)	8(tuv)	9(wxyz)
*	0	#

In order to add a letter, Alice has to press the key of the corresponding digit i times, where i is the position of the letter in the key.

For example, to add the letter 's', Alice has to press '7' four times. Similarly, to add the letter 'k', Alice has to press '5' twice.
Note that the digits '0' and '1' do not map to any letters, so Alice does not use them.
However, due to an error in transmission, Bob did not receive Alice's text message but received a string of pressed keys instead.

For example, when Alice sent the message "bob", Bob received the string "2266622".
Given a string pressedKeys representing the string received by Bob, return the total number of possible text messages Alice could have sent.

Since the answer may be very large, return it modulo 109 + 7.

Alice 在给 Bob 用手机打字。数字到字母的 对应 如下图所示。

1	2(abc)	3(def)
4(ghi)	5(jkl)	6(mno)
7(pqrs)	8(tuv)	9(wxyz)
*	0	#

为了 打出 一个字母，Alice 需要 按 对应字母 i 次，i 是该字母在这个按键上所处的位置。

比方说，为了按出字母 's' ，Alice 需要按 '7' 四次。类似的， Alice 需要按 '5' 两次得到字母  'k' 。
注意，数字 '0' 和 '1' 不映射到任何字母，所以 Alice 不 使用它们。
但是，由于传输的错误，Bob 没有收到 Alice 打字的字母信息，反而收到了 按键的字符串信息 。

比方说，Alice 发出的信息为 "bob" ，Bob 将收到字符串 "2266622" 。
给你一个字符串 pressedKeys ，表示 Bob 收到的字符串，请你返回 Alice 总共可能发出多少种文字信息 。

由于答案可能很大，将它对 109 + 7 取余 后返回。


Example 1:

Input: pressedKeys = "22233"
Output: 8
Explanation:
The possible text messages Alice could have sent are:
"aaadd", "abdd", "badd", "cdd", "aaae", "abe", "bae", and "ce".
Since there are 8 possible messages, we return 8.
Example 2:

Input: pressedKeys = "222222222222222222222222222222222222"
Output: 82876089
Explanation:
There are 2082876103 possible text messages Alice could have sent.
Since we need to return the answer modulo 109 + 7, we return 2082876103 % (109 + 7) = 82876089.
 

Constraints:

1 <= pressedKeys.length <= 105
pressedKeys only consists of digits from '2' - '9'.

class Solution
{
public:
    int n;
    int dp[100001];
    const int mod = 1e9 + 7;

    int solve(string &s, int i)
    {
        if(i >= n) return 1;
        if(dp[i] != -1) return dp[i];
        int ans = 0;
        for (int j = i; j < i + 4 && j < n; ++j)
        {
            if (s[j] != s[i]) break;
            if (j == (i + 3) && s[j] != '7' && s[j] != '9') continue;
            ans = (ans + solve(s, j + 1) % mod) % mod;
        }
        return dp[i] = ans;
    }

    int countTexts(string s)
    {
        n = s.size();
        memset(dp, -1, sizeof(dp));
        return solve(s, 0);
    }
};


// Source https://leetcode.com/problems/check-if-there-is-a-valid-parentheses-string-path/

A parentheses string is a non-empty string consisting only of '(' and ')'. It is valid if any of the following conditions is true:

It is ().
It can be written as AB (A concatenated with B), where A and B are valid parentheses strings.
It can be written as (A), where A is a valid parentheses string.
You are given an m x n matrix of parentheses grid. A valid parentheses string path in the grid is a path satisfying all of the following conditions:

The path starts from the upper left cell (0, 0).
The path ends at the bottom-right cell (m - 1, n - 1).
The path only ever moves down or right.
The resulting parentheses string formed by the path is valid.
Return true if there exists a valid parentheses string path in the grid. Otherwise, return false.

 

Example 1:


Input: grid = [["(","(","("],[")","(",")"],["(","(",")"],["(","(",")"]]
Output: true
Explanation: The above diagram shows two possible paths that form valid parentheses strings.
The first path shown results in the valid parentheses string "()(())".
The second path shown results in the valid parentheses string "((()))".
Note that there may be other valid parentheses string paths.
Example 2:


Input: grid = [[")",")"],["(","("]]
Output: false
Explanation: The two possible paths form the parentheses strings "))(" and ")((". Since neither of them are valid parentheses strings, we return false.
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 100
grid[i][j] is either '(' or ')'.

class Solution
{
public:
    int n, m;
    uint8_t dp[101][101][201];

    uint8_t solve(vector<vector<char>> &grid, int count, int i, int j)
    {
        if(i < 0 || i >= n || j < 0 || j >= m) return 0;
        if(grid[i][j] == ')')
        {
            if(count <= 0) return 0;
            else --count;
        }
        else ++count;
        if(i == n - 1 && j == m - 1)
        {
            if(count == 0) return 1;
            return 0;
        }
        if(dp[i][j][count] != 0x7F) return dp[i][j][count];
        if(solve(grid, count, i + 1, j) == 1) return dp[i][j][count] = 1;
        if(solve(grid, count, i, j + 1) == 1) return dp[i][j][count] = 1;
        return dp[i][j][count] = 0;
    }

    bool hasValidPath(vector<vector<char>> &grid)
    {
        n = grid.size();
        m = grid[0].size();
        memset(dp, 0x7F, sizeof(dp));
        uint8_t res = solve(grid, 0, 0, 0);
        if(res == 1) return true;
        return false;
    }
};


// Source https://leetcode.com/problems/find-the-k-beauty-of-a-number/

The k-beauty of an integer num is defined as the number of substrings of num when it is read as a string that meet the following conditions:

It has a length of k.
It is a divisor of num.
Given integers num and k, return the k-beauty of num.

Note:

Leading zeros are allowed.
0 is not a divisor of any value.
A substring is a contiguous sequence of characters in a string.

 

Example 1:

Input: num = 240, k = 2
Output: 2
Explanation: The following are the substrings of num of length k:
- "24" from "240": 24 is a divisor of 240.
- "40" from "240": 40 is a divisor of 240.
Therefore, the k-beauty is 2.
Example 2:

Input: num = 430043, k = 2
Output: 2
Explanation: The following are the substrings of num of length k:
- "43" from "430043": 43 is a divisor of 430043.
- "30" from "430043": 30 is not a divisor of 430043.
- "00" from "430043": 0 is not a divisor of 430043.
- "04" from "430043": 4 is not a divisor of 430043.
- "43" from "430043": 43 is a divisor of 430043.
Therefore, the k-beauty is 2.
 

Constraints:

1 <= num <= 109
1 <= k <= num.length (taking num as a string)

class Solution
{
public:
    int divisorSubstrings(int num, int k)
    {
        string s = to_string(num);
        int n = s.length();
        int i = 0, j = k - 1;
        int res = 0;
        while(j < n)
        {
            int t = stoi(s.substr(i, k));
            if(t != 0 && num % t == 0) ++res;
            ++i;
            ++j;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/number-of-ways-to-split-array/

You are given a 0-indexed integer array nums of length n.

nums contains a valid split at index i if the following are true:

The sum of the first i + 1 elements is greater than or equal to the sum of the last n - i - 1 elements.
There is at least one element to the right of i. That is, 0 <= i < n - 1.
Return the number of valid splits in nums.

 

Example 1:

Input: nums = [10,4,-8,7]
Output: 2
Explanation: 
There are three ways of splitting nums into two non-empty parts:
- Split nums at index 0. Then, the first part is [10], and its sum is 10. The second part is [4,-8,7], and its sum is 3. Since 10 >= 3, i = 0 is a valid split.
- Split nums at index 1. Then, the first part is [10,4], and its sum is 14. The second part is [-8,7], and its sum is -1. Since 14 >= -1, i = 1 is a valid split.
- Split nums at index 2. Then, the first part is [10,4,-8], and its sum is 6. The second part is [7], and its sum is 7. Since 6 < 7, i = 2 is not a valid split.
Thus, the number of valid splits in nums is 2.
Example 2:

Input: nums = [2,3,1,0]
Output: 2
Explanation: 
There are two valid splits in nums:
- Split nums at index 1. Then, the first part is [2,3], and its sum is 5. The second part is [1,0], and its sum is 1. Since 5 >= 1, i = 1 is a valid split. 
- Split nums at index 2. Then, the first part is [2,3,1], and its sum is 6. The second part is [0], and its sum is 0. Since 6 >= 0, i = 2 is a valid split.
 

Constraints:

2 <= nums.length <= 105
-105 <= nums[i] <= 105

class Solution
{
public:
    int waysToSplitArray(vector<int> &nums)
    {
        int n = nums.size();
        long total = accumulate(nums.begin(), nums.end(), 0LL);
        long sum = 0;
        int res = 0;
        for (int i = 1; i < n; i++)
        {
            sum += nums[i - 1];
            if (sum >= (total - sum))
            {
                ++res;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/maximum-white-tiles-covered-by-a-carpet/

You are given a 2D integer array tiles where tiles[i] = [li, ri] represents that every tile j in the range li <= j <= ri is colored white.

You are also given an integer carpetLen, the length of a single carpet that can be placed anywhere.

Return the maximum number of white tiles that can be covered by the carpet.

给你一个二维整数数组 tiles ，其中 tiles[i] = [li, ri] ，表示所有在 li <= j <= ri 之间的每个瓷砖位置 j 都被涂成了白色。

同时给你一个整数 carpetLen ，表示可以放在 任何位置 的一块毯子。

请你返回使用这块毯子，最多 可以盖住多少块瓷砖。

Example 1:


Input: tiles = [[1,5],[10,11],[12,18],[20,25],[30,32]], carpetLen = 10
Output: 9
Explanation: Place the carpet starting on tile 10. 
It covers 9 white tiles, so we return 9.
Note that there may be other places where the carpet covers 9 white tiles.
It can be shown that the carpet cannot cover more than 9 white tiles.
Example 2:


Input: tiles = [[10,11],[1,1]], carpetLen = 2
Output: 2
Explanation: Place the carpet starting on tile 10. 
It covers 2 white tiles, so we return 2.
 

Constraints:

1 <= tiles.length <= 5 * 104
tiles[i].length == 2
1 <= li <= ri <= 109
1 <= carpetLen <= 109
The tiles are non-overlapping.

class Solution
{
public:
    int maximumWhiteTiles(vector<vector<int>> &tiles, int carpetLen)
    {
        int n = tiles.size();
        vector<array<int, 2>> vec;
        vec.reserve(n);
        for (auto &v : tiles) vec.push_back({v[0], v[1]});
        sort(vec.begin(), vec.end());
        int i = 0, j = 0, sum = 0, ans = 0;
        while (i < n && j < n)
        {
            int startPos = vec[i][0];
            int endPos = startPos + carpetLen - 1;
            while (j < n && vec[j][1] <= endPos)
            {
                sum += vec[j][1] - vec[j][0] + 1;
                j++;
            }
            if (j == n || vec[j][0] > endPos)
            {
                ans = max(ans, sum);
            }
            else
            {
                ans = max(ans, sum + (endPos - vec[j][0] + 1));
            }
            sum -= (vec[i][1] - vec[i][0] + 1);
            i++;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/substring-with-largest-variance/

The variance of a string is defined as the largest difference between the number of occurrences of any 2 characters present in the string. Note the two characters may or may not be the same.

Given a string s consisting of lowercase English letters only, return the largest variance possible among all substrings of s.

A substring is a contiguous sequence of characters within a string.

aabaaabbabbbb
5

Example 1:

Input: s = "aababbb"
Output: 3
Explanation:
All possible variances along with their respective substrings are listed below:
- Variance 0 for substrings "a", "aa", "ab", "abab", "aababb", "ba", "b", "bb", and "bbb".
- Variance 1 for substrings "aab", "aba", "abb", "aabab", "ababb", "aababbb", and "bab".
- Variance 2 for substrings "aaba", "ababbb", "abbb", and "babb".
- Variance 3 for substring "babbb".
Since the largest possible variance is 3, we return it.
Example 2:

Input: s = "abcde"
Output: 0
Explanation:
No letter occurs more than once in s, so the variance of every substring is 0.
 

Constraints:

1 <= s.length <= 104
s consists of lowercase English letters.

class Solution
{
public:

    int Kadane(char x, char y, string &s)
    {
        int d = 0, n = s.size();
        int ans = 0, ycnt = 0;
        for(int i = 0; i < n; i++)
        {
            if(s[i] == x)
            {
                d++;
            }
            else if(s[i] == y)
            {
                d--;
                ycnt++;
            }
            else {continue;}
            if(d < 0)
            {
                d = 0;
                ycnt = 0;
                continue;
            }
            if(ycnt != 0)
            {
                ans = max(ans, d);
            }
            else
            {
                ans = max(ans, d - 1);
            }
        }
        return ans;
    }

    int largestVariance(string s)
    {
        int freq[26] = {0};
        for(char ch : s) freq[ch - 'a']++;
        int ans = 0;
        for(int i = 0; i < 25; i++)
        {
            if(freq[i] == 0) continue;
            for(int j = i + 1; j < 26; j++)
            {
                if(freq[j] == 0) continue;
                int val = max(Kadane(i + 'a', j + 'a', s), Kadane(j + 'a', i + 'a', s));
                ans = max(ans, val);
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/find-resultant-array-after-removing-anagrams/

You are given a 0-indexed string array words, where words[i] consists of lowercase English letters.

In one operation, select any index i such that 0 < i < words.length and words[i - 1] and words[i] are anagrams, and delete words[i] from words.
 Keep performing this operation as long as you can select an index that satisfies the conditions.

Return words after performing all operations. It can be shown that selecting the indices for each operation in any arbitrary order will lead to the same result.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase using all the original letters exactly once. For example, "dacb" is an anagram of "abdc".

给你一个下标从 0 开始的字符串 words ，其中 words[i] 由小写英文字符组成。

在一步操作中，需要选出任一下标 i ，从 words 中 删除 words[i] 。其中下标 i 需要同时满足下述两个条件：

0 < i < words.length
words[i - 1] 和 words[i] 是 字母异位词 。
只要可以选出满足条件的下标，就一直执行这个操作。

在执行所有操作后，返回 words 。可以证明，按任意顺序为每步操作选择下标都会得到相同的结果。

字母异位词 是由重新排列源单词的字母得到的一个新单词，所有源单词中的字母通常恰好只用一次。例如，"dacb" 是 "abdc" 的一个字母异位词。

Example 1:

Input: words = ["abba","baba","bbaa","cd","cd"]
Output: ["abba","cd"]
Explanation:
One of the ways we can obtain the resultant array is by using the following operations:
- Since words[2] = "bbaa" and words[1] = "baba" are anagrams, we choose index 2 and delete words[2].
  Now words = ["abba","baba","cd","cd"].
- Since words[1] = "baba" and words[0] = "abba" are anagrams, we choose index 1 and delete words[1].
  Now words = ["abba","cd","cd"].
- Since words[2] = "cd" and words[1] = "cd" are anagrams, we choose index 2 and delete words[2].
  Now words = ["abba","cd"].
We can no longer perform any operations, so ["abba","cd"] is the final answer.
Example 2:

Input: words = ["a","b","c","d","e"]
Output: ["a","b","c","d","e"]
Explanation:
No two adjacent strings in words are anagrams of each other, so no operations are performed.
 

Constraints:

1 <= words.length <= 100
1 <= words[i].length <= 10
words[i] consists of lowercase English letters.

class Solution
{
public:
    bool isAnagram(string s1, string s2)
    {
        sort(s1.begin(), s1.end());
        sort(s2.begin(), s2.end());
        if(s1 == s2) return true;
        return false;
    }

    vector<string> removeAnagrams(vector<string> &words)
    {
        int n = words.size();
        if(n == 1) return words;
        vector<string> ans;
        ans.reserve(32);
        int i = 0;
        while (i < n)
        {
            int j = i + 1;
            for (; j < n && isAnagram(words[i], words[j]); ++j);
            ans.push_back(words[i]);
            i = j;
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/maximum-consecutive-floors-without-special-floors/

Alice manages a company and has rented some floors of a building as office space. Alice has decided some of these floors should be special floors, used for relaxation only.

You are given two integers bottom and top, which denote that Alice has rented all the floors from bottom to top (inclusive). 
You are also given the integer array special, where special[i] denotes a special floor that Alice has designated for relaxation.

Return the maximum number of consecutive floors without a special floor.

Alice 管理着一家公司，并租用大楼的部分楼层作为办公空间。Alice 决定将一些楼层作为 特殊楼层 ，仅用于放松。

给你两个整数 bottom 和 top ，表示 Alice 租用了从 bottom 到 top（含 bottom 和 top 在内）的所有楼层。另给你一个整数数组 special ，其中 special[i] 表示  Alice 指定用于放松的特殊楼层。

返回不含特殊楼层的 最大 连续楼层数。

Example 1:

Input: bottom = 2, top = 9, special = [4,6]
Output: 3
Explanation: The following are the ranges (inclusive) of consecutive floors without a special floor:
- (2, 3) with a total amount of 2 floors.
- (5, 5) with a total amount of 1 floor.
- (7, 9) with a total amount of 3 floors.
Therefore, we return the maximum number which is 3 floors.
Example 2:

Input: bottom = 6, top = 8, special = [7,6,8]
Output: 0
Explanation: Every floor rented is a special floor, so we return 0.
 

Constraints:

1 <= special.length <= 105
1 <= bottom <= special[i] <= top <= 109
All the values of special are unique.

class Solution
{
public:
    int maxConsecutive(int bottom, int top, vector<int> &special)
    {
        sort(special.begin(), special.end());
        int n = special.size();
        int res = 0;
        for (int i = 1; i < n; i++)
        {
            res = max(res, special[i] - special[i - 1] - 1);
        }
        return max({res, special[0] - bottom, top - special.back()});
    }
};


// Source https://leetcode.com/problems/largest-combination-with-bitwise-and-greater-than-zero/

The bitwise AND of an array nums is the bitwise AND of all integers in nums.

For example, for nums = [1, 5, 3], the bitwise AND is equal to 1 & 5 & 3 = 1.
Also, for nums = [7], the bitwise AND is 7.
You are given an array of positive integers candidates. Evaluate the bitwise AND of every combination of numbers of candidates. 
Each number in candidates may only be used once in each combination.

Return the size of the largest combination of candidates with a bitwise AND greater than 0.

对数组 nums 执行 按位与 相当于对数组 nums 中的所有整数执行 按位与 。

例如，对 nums = [1, 5, 3] 来说，按位与等于 1 & 5 & 3 = 1 。
同样，对 nums = [7] 而言，按位与等于 7 。
给你一个正整数数组 candidates 。计算 candidates 中的数字每种组合下 按位与 的结果。 candidates 中的每个数字在每种组合中只能使用 一次 。

返回按位与结果大于 0 的 最长 组合的长度。

Example 1:

Input: candidates = [16,17,71,62,12,24,14]
Output: 4
Explanation: The combination [16,17,62,24] has a bitwise AND of 16 & 17 & 62 & 24 = 16 > 0.
The size of the combination is 4.
It can be shown that no combination with a size greater than 4 has a bitwise AND greater than 0.
Note that more than one combination may have the largest size.
For example, the combination [62,12,24,14] has a bitwise AND of 62 & 12 & 24 & 14 = 8 > 0.
Example 2:

Input: candidates = [8,8]
Output: 2
Explanation: The largest combination [8,8] has a bitwise AND of 8 & 8 = 8 > 0.
The size of the combination is 2, so we return 2.
 

Constraints:

1 <= candidates.length <= 105
1 <= candidates[i] <= 107

class Solution
{
public:

    int largestCombination(vector<int> &candidates)
    {
        vector<int> cnt(32, 0);
        for(int i = 0; i < 32; i++)
        {
            for(int x : candidates)
            {
                if(x & (1 << i)) cnt[i]++;
            }
        }
        return *max_element(cnt.begin(), cnt.end());
    }
};


// Source https://leetcode.com/problems/count-integers-in-intervals/

Given an empty set of intervals, implement a data structure that can:

Add an interval to the set of intervals.
Count the number of integers that are present in at least one interval.
Implement the CountIntervals class:

CountIntervals() Initializes the object with an empty set of intervals.
void add(int left, int right) Adds the interval [left, right] to the set of intervals.
int count() Returns the number of integers that are present in at least one interval.
Note that an interval [left, right] denotes all the integers x where left <= x <= right.

 

Example 1:

Input
["CountIntervals", "add", "add", "count", "add", "count"]
[[], [2, 3], [7, 10], [], [5, 8], []]
Output
[null, null, null, 6, null, 8]

Explanation
CountIntervals countIntervals = new CountIntervals(); // initialize the object with an empty set of intervals. 
countIntervals.add(2, 3);  // add [2, 3] to the set of intervals.
countIntervals.add(7, 10); // add [7, 10] to the set of intervals.
countIntervals.count();    // return 6
                           // the integers 2 and 3 are present in the interval [2, 3].
                           // the integers 7, 8, 9, and 10 are present in the interval [7, 10].
countIntervals.add(5, 8);  // add [5, 8] to the set of intervals.
countIntervals.count();    // return 8
                           // the integers 2 and 3 are present in the interval [2, 3].
                           // the integers 5 and 6 are present in the interval [5, 8].
                           // the integers 7 and 8 are present in the intervals [5, 8] and [7, 10].
                           // the integers 9 and 10 are present in the interval [7, 10].
 

Constraints:

1 <= left <= right <= 109
At most 105 calls in total will be made to add and count.
At least one call will be made to count.

[2 5] [7 9] [11 13] [15 19] [21 23]
      8 18
[2 5] [7 19] [21 23]

class CountIntervals
{
public:
    set<pair<int, int>> st;
    int total;

    CountIntervals()
    {
        st.clear();
        total = 0;
    }

    void add(int left, int right)
    {
        if(st.size() == 0)
        {
            st.insert({left, right});
            total += (right - left + 1);
        }
        else
        {
            auto itr = st.upper_bound({right, INT_MAX});
            if(itr == st.begin())
            {
                st.insert({left, right});
                total += (right - left + 1);
            }
            else
            {
                --itr;
                while((itr->second) >= left)
                {
                    total -= (itr->second - itr->first + 1);
                    left = min(left, itr->first);
                    right = max(right, itr->second);
                    if(itr == st.begin())
                    {
                        st.erase(itr);
                        break;
                    }
                    itr = st.erase(itr);
                    --itr;
                }
                st.insert({left, right});
                total += (right - left + 1);
            }
        }
    }

    int count()
    {
        return total;
    }
};


// Source https://leetcode.com/problems/percentage-of-letter-in-string/

Given a string s and a character letter, return the percentage of characters in s that equal letter rounded down to the nearest whole percent.

给你一个字符串 s 和一个字符 letter ，返回在 s 中等于 letter 字符所占的 百分比 ，向下取整到最接近的百分比。

Example 1:

Input: s = "foobar", letter = "o"
Output: 33
Explanation:
The percentage of characters in s that equal the letter 'o' is 2 / 6 * 100% = 33% when rounded down, so we return 33.
Example 2:

Input: s = "jjjj", letter = "k"
Output: 0
Explanation:
The percentage of characters in s that equal the letter 'k' is 0%, so we return 0.
 

Constraints:

1 <= s.length <= 100
s consists of lowercase English letters.
letter is a lowercase English letter.

class Solution
{
public:
    int percentageLetter(string s, char letter)
    {
        int n = s.length();
        int cnt = count(s.begin(), s.end(), letter);
        return (cnt * 100) / n;
    }
};


// Source https://leetcode.com/problems/maximum-bags-with-full-capacity-of-rocks/

You have n bags numbered from 0 to n - 1. You are given two 0-indexed integer arrays capacity and rocks. 
The ith bag can hold a maximum of capacity[i] rocks and currently contains rocks[i] rocks. 
You are also given an integer additionalRocks, the number of additional rocks you can place in any of the bags.

Return the maximum number of bags that could have full capacity after placing the additional rocks in some bags.

 

Example 1:

Input: capacity = [2,3,4,5], rocks = [1,2,4,4], additionalRocks = 2
Output: 3
Explanation:
Place 1 rock in bag 0 and 1 rock in bag 1.
The number of rocks in each bag are now [2,3,4,4].
Bags 0, 1, and 2 have full capacity.
There are 3 bags at full capacity, so we return 3.
It can be shown that it is not possible to have more than 3 bags at full capacity.
Note that there may be other ways of placing the rocks that result in an answer of 3.
Example 2:

Input: capacity = [10,2,2], rocks = [2,2,0], additionalRocks = 100
Output: 3
Explanation:
Place 8 rocks in bag 0 and 2 rocks in bag 2.
The number of rocks in each bag are now [10,2,2].
Bags 0, 1, and 2 have full capacity.
There are 3 bags at full capacity, so we return 3.
It can be shown that it is not possible to have more than 3 bags at full capacity.
Note that we did not use all of the additional rocks.
 

Constraints:

n == capacity.length == rocks.length
1 <= n <= 5 * 104
1 <= capacity[i] <= 109
0 <= rocks[i] <= capacity[i]
1 <= additionalRocks <= 109

class Solution
{
public:
    int maximumBags(vector<int> &cap, vector<int> &rocks, int aR)
    {
        int n = cap.size();
        for(int i = 0; i < n; i++)
        {
            cap[i] = cap[i] - rocks[i];
        }
        sort(cap.begin(), cap.end());
        int res = 0;
        for(auto x : cap)
        {
            if(x == 0)
            {
                ++res;
                continue;
            }
            if (aR < x) break;
            ++res;
            aR -= x;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/minimum-lines-to-represent-a-line-chart/

You are given a 2D integer array stockPrices where stockPrices[i] = [dayi, pricei] indicates the price of the stock on day dayi is pricei. 
A line chart is created from the array by plotting the points on an XY plane with the X-axis representing the day and the Y-axis representing the price and connecting adjacent points. 
One such example is shown below:


Return the minimum number of lines needed to represent the line chart.

 

Example 1:


Input: stockPrices = [[1,7],[2,6],[3,5],[4,4],[5,4],[6,3],[7,2],[8,1]]
Output: 3
Explanation:
The diagram above represents the input, with the X-axis representing the day and Y-axis representing the price.
The following 3 lines can be drawn to represent the line chart:
- Line 1 (in red) from (1,7) to (4,4) passing through (1,7), (2,6), (3,5), and (4,4).
- Line 2 (in blue) from (4,4) to (5,4).
- Line 3 (in green) from (5,4) to (8,1) passing through (5,4), (6,3), (7,2), and (8,1).
It can be shown that it is not possible to represent the line chart using less than 3 lines.
Example 2:


Input: stockPrices = [[3,4],[1,2],[7,8],[2,3]]
Output: 1
Explanation:
As shown in the diagram above, the line chart can be represented with a single line.
 

Constraints:

1 <= stockPrices.length <= 105
stockPrices[i].length == 2
1 <= dayi, pricei <= 109
All dayi are distinct.

y2-y1/x2-x1 = slope1
y3-y2/x3-x2 = slope2

y2-y1/x2-x1 == y3-y2/x3-x2
(y2-y1)(x3-x2) == (y3-y2)(x2-x1)

class Solution
{
public:
    int minimumLines(vector<vector<int>>& stockPrices)
    {
        int n = stockPrices.size();
        if(n <= 2) return n - 1;
        vector<array<int, 2>> arr;
        arr.reserve(n);
        for (auto &v : stockPrices) arr.push_back({v[0], v[1]});
        sort(arr.begin(), arr.end());
        int res = 1;
        for(int i = 2; i < n; i++)
        {
            long slope1 = (long)(arr[i - 1][1] - arr[i - 2][1]) * (arr[i][0] - arr[i - 1][0]);
            long slope2 = (long)(arr[i][1] - arr[i - 1][1]) * (arr[i - 1][0] - arr[i - 2][0]);
            if(slope1 != slope2) ++res;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/sum-of-total-strength-of-wizards/

As the ruler of a kingdom, you have an army of wizards at your command.

You are given a 0-indexed integer array strength, where strength[i] denotes the strength of the ith wizard. 
For a contiguous group of wizards (i.e. the wizards' strengths form a subarray of strength), the total strength is defined as the product of the following two values:

The strength of the weakest wizard in the group.
The total of all the individual strengths of the wizards in the group.
Return the sum of the total strengths of all contiguous groups of wizards. Since the answer may be very large, return it modulo 109 + 7.

A subarray is a contiguous non-empty sequence of elements within an array.

作为国王的统治者，你有一支巫师军队听你指挥。

给你一个下标从 0 开始的整数数组 strength ，其中 strength[i] 表示第 i 位巫师的力量值。对于连续的一组巫师（也就是这些巫师的力量值是 strength 的 子数组），总力量 定义为以下两个值的 乘积 ：

巫师中 最弱 的能力值。
组中所有巫师的个人力量值 之和 。
请你返回 所有 巫师组的 总 力量之和。由于答案可能很大，请将答案对 109 + 7 取余 后返回。

子数组 是一个数组里 非空 连续子序列。


Example 1:

Input: strength = [1,3,1,2]
Output: 44
Explanation: The following are all the contiguous groups of wizards:
- [1] from [1,3,1,2] has a total strength of min([1]) * sum([1]) = 1 * 1 = 1
- [3] from [1,3,1,2] has a total strength of min([3]) * sum([3]) = 3 * 3 = 9
- [1] from [1,3,1,2] has a total strength of min([1]) * sum([1]) = 1 * 1 = 1
- [2] from [1,3,1,2] has a total strength of min([2]) * sum([2]) = 2 * 2 = 4
- [1,3] from [1,3,1,2] has a total strength of min([1,3]) * sum([1,3]) = 1 * 4 = 4
- [3,1] from [1,3,1,2] has a total strength of min([3,1]) * sum([3,1]) = 1 * 4 = 4
- [1,2] from [1,3,1,2] has a total strength of min([1,2]) * sum([1,2]) = 1 * 3 = 3
- [1,3,1] from [1,3,1,2] has a total strength of min([1,3,1]) * sum([1,3,1]) = 1 * 5 = 5
- [3,1,2] from [1,3,1,2] has a total strength of min([3,1,2]) * sum([3,1,2]) = 1 * 6 = 6
- [1,3,1,2] from [1,3,1,2] has a total strength of min([1,3,1,2]) * sum([1,3,1,2]) = 1 * 7 = 7
The sum of all the total strengths is 1 + 9 + 1 + 4 + 4 + 4 + 3 + 5 + 6 + 7 = 44.
1
1 3
1 3 1
1 3 1 2

   3 1
   3 1 2
      1
      1 2

   3
         2

Example 2:

Input: strength = [5,4,6]
Output: 213
Explanation: The following are all the contiguous groups of wizards: 
- [5] from [5,4,6] has a total strength of min([5]) * sum([5]) = 5 * 5 = 25
- [4] from [5,4,6] has a total strength of min([4]) * sum([4]) = 4 * 4 = 16
- [6] from [5,4,6] has a total strength of min([6]) * sum([6]) = 6 * 6 = 36
- [5,4] from [5,4,6] has a total strength of min([5,4]) * sum([5,4]) = 4 * 9 = 36
- [4,6] from [5,4,6] has a total strength of min([4,6]) * sum([4,6]) = 4 * 10 = 40
- [5,4,6] from [5,4,6] has a total strength of min([5,4,6]) * sum([5,4,6]) = 4 * 15 = 60
The sum of all the total strengths is 25 + 16 + 36 + 36 + 40 + 60 = 213.

5

5 4 6
   4 6
5 4
   4

      6


Constraints:

1 <= strength.length <= 105
1 <= strength[i] <= 109

1, 4, 5, 2, 3, 4, 2, 1

1
1 4
1 4 5
1 4 5 2
1 4 5 2 3
1 4 5 2 3 4
1 4 5 2 3 4 2
1 4 5 2 3 4 2 1
   4
   4 5
      5
   4 5 2 3 4 2
      5 2 3 4 2
         2 3 4 2
   4 5 2 3 4
      5 2 3 4
         2 3 4
   4 5 2 3
      5 2 3
         2 3
   4 5 2
      5 2
         2
           3 4
           3
              4
           3 4 2
              4 2
                 2
  4 5 2 3 4 2 1
     5 2 3 4 2 1
        2 3 4 2 1
           3 4 2 1
              4 2 1
                 2 1
                    1

   4 5 2 3 4 2
      5 2 3 4 2
         2 3 4 2
   4 5 2 3 4
      5 2 3 4
         2 3 4
   4 5 2 3
      5 2 3
         2 3
   4 5 2
      5 2
         2

4 5 和 5 出现4次
3 4 2 和 3 4 和 3出现3次
2 出现4 * 3= 12 次

1
1 4
1 4 5
1 4 5 2
1 4 5 2 3
1 4 5 2 3 4
1 4 5 2 3 4 2
-
1
1 4
1 4 5
1 4 5
1 4 5
1 4 5
1 4 5
=
2
2 3
2 3 4
2 3 4 2

4 5 2 3 4 2 1
   5 2 3 4 2 1
      2 3 4 2 1
         3 4 2 1
            4 2 1
               2 1
                  1
-        3 4 2 1
         3 4 2 1
         3 4 2 1
         3 4 2 1
            4 2 1
               2 1
                  1
=
4 5 2
   5 2
      2

每个strength[i] 都有可能是某些子数组的最小值，关键在于找出strength[i] 作为子数组的最小值时，子数组的最左边可以取到的坐标left，子数组的最右边可以取到的坐标right
由于strength[i]和strength[j]可能相等，为了避免重复计算，采用以下方式查找left和right
从i向左查找，直到遇见一个<=strength[i]的strength[j]，此时left = j + 1;
从i向右查找，直到遇见一个<strength[i]的strength[j]，此时right = j - 1;
总共有(i - left + 1) * (right - i + 1)个这样的子数组


class Solution
{
public:
    int totalStrength(vector<int> &strength)
    {
        const int mod = 1e9 + 7;
        int n = strength.size();
        vector<long long> rightPref(n), rightPrefSum(n);
        rightPref[0] = strength[0];
        rightPrefSum[0] = strength[0];
        for(int i = 1; i < n; i++)
        {
            rightPref[i] = rightPref[i - 1] + strength[i];
            rightPrefSum[i] = rightPrefSum[i - 1] + rightPref[i];
        }
        vector<long long> leftPref(n), leftPrefSum(n);
        leftPref[n - 1] = strength[n - 1];
        leftPrefSum[n - 1] = strength[n - 1];
        for(int i = n - 2; i >= 0; i--)
        {
            leftPref[i] = leftPref[i + 1] + strength[i];
            leftPrefSum[i] = leftPrefSum[i + 1] + leftPref[i];
        }
        vector<int> rightIndex(n);
        stack<int> st;
        st.push(n);
        for(int i = n - 1; i >= 0; i--)
        {
            while(st.top() != n && strength[st.top()] >= strength[i]) st.pop();
            rightIndex[i] = st.top() - 1;
            st.push(i);
        }
        stack<int> lst;
        lst.push(-1);
        long long res = 0;
        for(int i = 0; i < n; i++)
        {
            while(lst.top() != -1 && strength[lst.top()] > strength[i]) lst.pop();
            int left = lst.top() + 1;
            lst.push(i);
            int right = rightIndex[i];
            int lsize = i - left + 1;
            int rsize = right - i + 1;
            long long rightSum = (rightPrefSum[right] - (i > 0 ? rightPrefSum[i - 1] + rightPref[i - 1] * rsize : 0)) % mod;
            long long leftSum = (leftPrefSum[left] - (i < n - 1 ? leftPrefSum[i + 1] + leftPref[i + 1] * lsize : 0)) % mod;
            long long totalSum = (rightSum * lsize) % mod + (leftSum * rsize) % mod - ((long long)strength[i] * lsize * rsize) % mod;
            res = (res + ((totalSum + mod) % mod * strength[i]) % mod) % mod;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/check-if-number-has-equal-digit-count-and-digit-value/

You are given a 0-indexed string num of length n consisting of digits.

Return true if for every index i in the range 0 <= i < n, the digit i occurs num[i] times in num, otherwise return false.

Example 1:

Input: num = "1210"
Output: true
Explanation:
num[0] = '1'. The digit 0 occurs once in num.
num[1] = '2'. The digit 1 occurs twice in num.
num[2] = '1'. The digit 2 occurs once in num.
num[3] = '0'. The digit 3 occurs zero times in num.
The condition holds true for every index in "1210", so return true.
Example 2:

Input: num = "030"
Output: false
Explanation:
num[0] = '0'. The digit 0 should occur zero times, but actually occurs twice in num.
num[1] = '3'. The digit 1 should occur three times, but actually occurs zero times in num.
num[2] = '0'. The digit 2 occurs zero times in num.
The indices 0 and 1 both violate the condition, so return false.
 

Constraints:

n == num.length
1 <= n <= 10
num consists of digits.

class Solution
{
public:
    bool digitCount(string num)
    {
        int n = num.length();
        int freq[10] = {0};
        for(char ch : num)
        {
            freq[ch - '0']++;
        }
        for(int i = 0; i < n; i++)
        {
            if((num[i] - '0') != freq[i])
                return false;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/sender-with-largest-word-count/

You have a chat log of n messages. You are given two string arrays messages and senders where messages[i] is a message sent by senders[i].

A message is list of words that are separated by a single space with no leading or trailing spaces. The word count of a sender is the total number of words sent by the sender. 
Note that a sender may send more than one message.

Return the sender with the largest word count. If there is more than one sender with the largest word count, return the one with the lexicographically largest name.

Note:

Uppercase letters come before lowercase letters in lexicographical order.
"Alice" and "alice" are distinct.
 

Example 1:

Input: messages = ["Hello userTwooo","Hi userThree","Wonderful day Alice","Nice day userThree"], senders = ["Alice","userTwo","userThree","Alice"]
Output: "Alice"
Explanation: Alice sends a total of 2 + 3 = 5 words.
userTwo sends a total of 2 words.
userThree sends a total of 3 words.
Since Alice has the largest word count, we return "Alice".
Example 2:

Input: messages = ["How is leetcode for everyone","Leetcode is useful for practice"], senders = ["Bob","Charlie"]
Output: "Charlie"
Explanation: Bob sends a total of 5 words.
Charlie sends a total of 5 words.
Since there is a tie for the largest word count, we return the sender with the lexicographically larger name, Charlie.
 

Constraints:

n == messages.length == senders.length
1 <= n <= 104
1 <= messages[i].length <= 100
1 <= senders[i].length <= 10
messages[i] consists of uppercase and lowercase English letters and ' '.
All the words in messages[i] are separated by a single space.
messages[i] does not have leading or trailing spaces.
senders[i] consists of uppercase and lowercase English letters only.

class Solution
{
public:
    string largestWordCount(vector<string> &messages, vector<string> &senders)
    {
        string res = "";
        int mxVal = 0;
        unordered_map<string, int> sender_messages;
        int n = messages.size();
        for (int i = 0; i < n; ++i)
        {
            auto &message = messages[i];
            auto &sender = senders[i];
            int cnt = 0;
            for (auto ch : message) cnt += ch == ' ';
            ++cnt;
            sender_messages[sender] += cnt;
            int t = sender_messages[sender];
            if ((t > mxVal) || (t == mxVal && sender > res))
            {
                mxVal = t;
                res = sender;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/maximum-total-importance-of-roads/

You are given an integer n denoting the number of cities in a country. The cities are numbered from 0 to n - 1.

You are also given a 2D integer array roads where roads[i] = [ai, bi] denotes that there exists a bidirectional road connecting cities ai and bi.

You need to assign each city with an integer value from 1 to n, where each value can only be used once. 
The importance of a road is then defined as the sum of the values of the two cities it connects.

Return the maximum total importance of all roads possible after assigning the values optimally.

 

Example 1:


Input: n = 5, roads = [[0,1],[1,2],[2,3],[0,2],[1,3],[2,4]]
Output: 43
Explanation: The figure above shows the country and the assigned values of [2,4,5,3,1].
- The road (0,1) has an importance of 2 + 4 = 6.
- The road (1,2) has an importance of 4 + 5 = 9.
- The road (2,3) has an importance of 5 + 3 = 8.
- The road (0,2) has an importance of 2 + 5 = 7.
- The road (1,3) has an importance of 4 + 3 = 7.
- The road (2,4) has an importance of 5 + 1 = 6.
The total importance of all roads is 6 + 9 + 8 + 7 + 7 + 6 = 43.
It can be shown that we cannot obtain a greater total importance than 43.
Example 2:


Input: n = 5, roads = [[0,3],[2,4],[1,3]]
Output: 20
Explanation: The figure above shows the country and the assigned values of [4,3,2,5,1].
- The road (0,3) has an importance of 4 + 5 = 9.
- The road (2,4) has an importance of 2 + 1 = 3.
- The road (1,3) has an importance of 3 + 5 = 8.
The total importance of all roads is 9 + 3 + 8 = 20.
It can be shown that we cannot obtain a greater total importance than 20.
 

Constraints:

2 <= n <= 5 * 104
1 <= roads.length <= 5 * 104
roads[i].length == 2
0 <= ai, bi <= n - 1
ai != bi
There are no duplicate roads.

5
[[0,1],[1,2],[2,3],[0,2],[1,3],[2,4]]
0 2
1 3
2 4
3 2
4 1
5 * 4 + 4 * 3 + 3 * 2 + 2 * 2 + 1 * 1 = 43

class Solution
{
public:
    long long maximumImportance(int n, vector<vector<int>> &roads)
    {
        vector<long long> degree(n, 0);
        for(auto &v : roads)
        {
            degree[v[0]]++;
            degree[v[1]]++;
        }
        sort(degree.begin(), degree.end());
        long long ans = 0;
        for(int i = 0; i < n; i++)
        {
            ans += (long)(degree[i]) * (i + 1);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/booking-concert-tickets-in-groups/

A concert hall has n rows numbered from 0 to n - 1, each with m seats, numbered from 0 to m - 1. You need to design a ticketing system that can allocate seats in the following cases:

If a group of k spectators can sit together in a row.
If every member of a group of k spectators can get a seat. They may or may not sit together.
Note that the spectators are very picky. Hence:

They will book seats only if each member of their group can get a seat with row number less than or equal to maxRow. maxRow can vary from group to group.
In case there are multiple rows to choose from, the row with the smallest number is chosen. If there are multiple seats to choose in the same row, the seat with the smallest number is chosen.
Implement the BookMyShow class:

BookMyShow(int n, int m) Initializes the object with n as number of rows and m as number of seats per row.
int[] gather(int k, int maxRow) Returns an array of length 2 denoting the row and seat number (respectively) of the first seat being allocated to the k members of the group, 
who must sit together. In other words, it returns the smallest possible r and c such that all [c, c + k - 1] seats are valid and empty in row r, and r <= maxRow. 
Returns [] in case it is not possible to allocate seats to the group.
boolean scatter(int k, int maxRow) Returns true if all k members of the group can be allocated seats in rows 0 to maxRow, who may or may not sit together. 
If the seats can be allocated, it allocates k seats to the group with the smallest row numbers, and the smallest possible seat numbers in each row. Otherwise, returns false.

一个音乐会总共有 n 排座位，编号从 0 到 n - 1 ，每一排有 m 个座椅，编号为 0 到 m - 1 。你需要设计一个买票系统，针对以下情况进行座位安排：

同一组的 k 位观众坐在 同一排座位，且座位连续 。
k 位观众中 每一位 都有座位坐，但他们 不一定 坐在一起。
由于观众非常挑剔，所以：

只有当一个组里所有成员座位的排数都 小于等于 maxRow ，这个组才能订座位。每一组的 maxRow 可能 不同 。
如果有多排座位可以选择，优先选择 最小 的排数。如果同一排中有多个座位可以坐，优先选择号码 最小 的。
请你实现 BookMyShow 类：

BookMyShow(int n, int m) ，初始化对象，n 是排数，m 是每一排的座位数。
int[] gather(int k, int maxRow) 返回长度为 2 的数组，表示 k 个成员中 第一个座位 的排数和座位编号，这 k 位成员必须坐在 同一排座位，且座位连续 。换言之，返回最小可能的 r 和 c 满足第 r 排中 [c, c + k - 1] 的座位都是空的，且 r <= maxRow 。如果 无法 安排座位，返回 [] 。
boolean scatter(int k, int maxRow) 如果组里所有 k 个成员 不一定 要坐在一起的前提下，都能在第 0 排到第 maxRow 排之间找到座位，那么请返回 true 。这种情况下，每个成员都优先找排数 最小 ，然后是座位编号最小的座位。如果不能安排所有 k 个成员的座位，请返回 false 。

Example 1:

Input
["BookMyShow", "gather", "gather", "scatter", "scatter"]
[[2, 5], [4, 0], [2, 0], [5, 1], [5, 1]]
Output
[null, [0, 0], [], true, false]

Explanation
BookMyShow bms = new BookMyShow(2, 5); // There are 2 rows with 5 seats each 
bms.gather(4, 0); // return [0, 0]
                  // The group books seats [0, 3] of row 0. 
bms.gather(2, 0); // return []
                  // There is only 1 seat left in row 0,
                  // so it is not possible to book 2 consecutive seats. 
bms.scatter(5, 1); // return True
                   // The group books seat 4 of row 0 and seats [0, 3] of row 1. 
bms.scatter(5, 1); // return False
                   // There is only one seat left in the hall.
 

Constraints:

1 <= n <= 5 * 104
1 <= m, k <= 109
0 <= maxRow <= n - 1
At most 5 * 104 calls in total will be made to gather and scatter.

stree[i][0] 表示 覆盖的区间内 单行最长的连续空位数
stree[i][1] 表示 覆盖的区间内 空位数之和

class BookMyShow
{
public:
    int n, m;
    vector<array<long long, 2>> stree;

    void build(int i, int p, int q)
    {
        if (p == q)
        {
            stree[i] = {m, m};
            return;
        }
        int mid = (p + q) / 2;
        stree[i] = {m, (long long)(q - p + 1) *m};
        build(2 * i + 1, p, mid);
        build(2 * i + 2, mid + 1, q);
    }

    vector<int> query_max(int i, int p, int q, int k, int maxRow)
    {
        if (p > maxRow)
            return {};
        if (stree[i][0] < k)
            return {};
        if (p == q)
            return {p, (int)(m - stree[i][0])};
        int mid = (p + q) / 2;
        vector<int> ret = query_max(2 * i + 1, p, mid, k, maxRow);
        if (ret.size()) return ret;
        return query_max(2 * i + 2, mid + 1, q, k, maxRow);
    }

    void update_max(int i, int p, int q, int row, int k)
    {
        if (p > row || q < row)
            return;
        if (p == q)
        {
            stree[i][0] -= k;
            stree[i][1] -= k;
            return;
        }
        int mid = (p + q) / 2;
        stree[i][1] -= k;
        if (row <= mid) update_max(2 * i + 1, p, mid, row, k);
        else update_max(2 * i + 2, mid + 1, q, row, k);
        stree[i][0] = max(stree[2 * i + 1][0], stree[2 * i + 2][0]);
    }

    long long query_sum(int i, int p, int q, int maxRow)
    {
        if (p > maxRow)
            return 0;
        if (q <= maxRow)
            return stree[i][1];
        int mid = (p + q) / 2;
        return query_sum(2 * i + 1, p, mid, maxRow) + query_sum(2 * i + 2, mid + 1, q, maxRow);
    }

    void update_sum(int i, int p, int q, int k, int maxRow)
    {
        if (p > maxRow)
            return;
        if (p == q)
        {
            stree[i][0] -= k;
            stree[i][1] -= k;
            return;
        }
        int mid = (p + q) / 2;
        stree[i][1] -= k;
        if (maxRow <= mid || stree[2 * i + 1][1] >= k)
        {
            update_sum(2 * i + 1, p, mid, k, maxRow);
        }
        else
        {
            k -= stree[2 * i + 1][1];
            update_sum(2 * i + 1, p, mid, stree[2 * i + 1][1], maxRow);
            update_sum(2 * i + 2, mid + 1, q, k, maxRow);
        }
        stree[i][0] = max(stree[2 * i + 1][0], stree[2 * i + 2][0]);
    }

    BookMyShow(int n, int m)
    {
        this->n = n;
        this->m = m;
        int sz = 1;
        while (sz < n) sz <<= 1;
        stree.resize(2 * sz);
        build(0, 0, n - 1);
    }

    vector<int> gather(int k, int maxRow)
    {
        vector<int> ret = query_max(0, 0, n - 1, k, maxRow);
        if (ret.size()) update_max(0, 0, n - 1, ret[0], k);
        return ret;
    }

    bool scatter(int k, int maxRow)
    {
        long long cnt = query_sum(0, 0, n - 1, maxRow);
        bool ret = cnt >= k;
        if (ret) update_sum(0, 0, n - 1, k, maxRow);
        return ret;
    }
};


// Source https://leetcode.com/problems/rearrange-characters-to-make-target-string/

You are given two 0-indexed strings s and target. You can take some letters from s and rearrange them to form new strings.

Return the maximum number of copies of target that can be formed by taking letters from s and rearranging them.

 

Example 1:

Input: s = "ilovecodingonleetcode", target = "code"
Output: 2
Explanation:
For the first copy of "code", take the letters at indices 4, 5, 6, and 7.
For the second copy of "code", take the letters at indices 17, 18, 19, and 20.
The strings that are formed are "ecod" and "code" which can both be rearranged into "code".
We can make at most two copies of "code", so we return 2.
Example 2:

Input: s = "abcba", target = "abc"
Output: 1
Explanation:
We can make one copy of "abc" by taking the letters at indices 0, 1, and 2.
We can make at most one copy of "abc", so we return 1.
Note that while there is an extra 'a' and 'b' at indices 3 and 4, we cannot reuse the letter 'c' at index 2, so we cannot make a second copy of "abc".
Example 3:

Input: s = "abbaccaddaeea", target = "aaaaa"
Output: 1
Explanation:
We can make one copy of "aaaaa" by taking the letters at indices 0, 3, 6, 9, and 12.
We can make at most one copy of "aaaaa", so we return 1.
 

Constraints:

1 <= s.length <= 100
1 <= target.length <= 10
s and target consist of lowercase English letters.

class Solution
{
public:
    int rearrangeCharacters(string s, string target)
    {
        int freq1[26] = {0};
        for(auto ch : s) freq1[ch - 'a']++;
        int freq2[26] = {0};
        for(auto ch : target) freq2[ch - 'a']++;
        int ans = INT_MAX;
        for (int i = 0; i < 26; ++i)
        {
            if (freq2[i] == 0) continue;
            ans = min(ans, freq1[i] / freq2[i]);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/apply-discount-to-prices/

A sentence is a string of single-space separated words where each word can contain digits, lowercase letters, and the dollar sign '$'. 
A word represents a price if it is a sequence of digits preceded by a dollar sign.

For example, "$100", "$23", and "$6" represent prices while "100", "$", and "$1e5" do not.
You are given a string sentence representing a sentence and an integer discount. 
For each word representing a price, apply a discount of discount% on the price and update the word in the sentence. 
All updated prices should be represented with exactly two decimal places.

Return a string representing the modified sentence.

Note that all prices will contain at most 10 digits.

 

Example 1:

Input: sentence = "there are $1 $2 and 5$ candies in the shop", discount = 50
Output: "there are $0.50 $1.00 and 5$ candies in the shop"
Explanation: 
The words which represent prices are "$1" and "$2". 
- A 50% discount on "$1" yields "$0.50", so "$1" is replaced by "$0.50".
- A 50% discount on "$2" yields "$1". Since we need to have exactly 2 decimal places after a price, we replace "$2" with "$1.00".
Example 2:

Input: sentence = "1 2 $3 4 $5 $6 7 8$ $9 $10$", discount = 100
Output: "1 2 $0.00 4 $0.00 $0.00 7 8$ $0.00 $10$"
Explanation: 
Applying a 100% discount on any price will result in 0.
The words representing prices are "$3", "$5", "$6", and "$9".
Each of them is replaced by "$0.00".
 

Constraints:

1 <= sentence.length <= 105
sentence consists of lowercase English letters, digits, ' ', and '$'.
sentence does not have leading or trailing spaces.
All words in sentence are separated by a single space.
All prices will be positive numbers without leading zeros.
All prices will have at most 10 digits.
0 <= discount <= 100

class Solution
{
public:

    bool check(string &str)
    {
        int len = str.length();
        if (len <= 1) return false;
        if (str[0] != '$') return false;
        int i = 1;
        for (; i < len && isdigit(str[i]); ++i);
        return i == len;
    }

    string helper(string &str, int discount)
    {
        int len = str.length();
        long val = 0;
        for (int i = 1; i < len; ++i)
        {
            val = (val * 10) + (str[i] - '0');
        }
        val *= (100 - discount);
        return to_string(val / 100) + "." + (val % 100 < 10 ? "0" : "") + to_string(val % 100);
    }

    string discountPrices(string sentence, int discount)
    {
        int n = sentence.length();
        string res;
        res.reserve(n);
        stringstream ss(sentence);
        string t;
        while (ss >> t)
        {
            if (!check(t))
            {
                res.append(t);
                res.push_back(' ');
                continue;
            }
            res.push_back('$');
            res.append(helper(t, discount));
            res.push_back(' ');
        }
        res.pop_back();
        return res;
    }
};


// Source https://leetcode.com/problems/steps-to-make-array-non-decreasing/

You are given a 0-indexed integer array nums. In one step, remove all elements nums[i] where nums[i - 1] > nums[i] for all 0 < i < nums.length.

Return the number of steps performed until nums becomes a non-decreasing array.

给你一个下标从 0 开始的整数数组 nums 。在一步操作中，移除所有满足 nums[i - 1] > nums[i] 的 nums[i] ，其中 0 < i < nums.length 。

重复执行步骤，直到 nums 变为 非递减 数组，返回所需执行的操作数。

Example 1:

Input: nums = [5,3,4,4,7,3,6,11,8,5,11]
Output: 3
Explanation: The following are the steps performed:
- Step 1: [5,3,4,4,7,3,6,11,8,5,11] becomes [5,4,4,7,6,11,11]
- Step 2: [5,4,4,7,6,11,11] becomes [5,4,7,11,11]
- Step 3: [5,4,7,11,11] becomes [5,7,11,11]
[5,7,11,11] is a non-decreasing array. Therefore, we return 3.
Example 2:

Input: nums = [4,5,7,7,13]
Output: 0
Explanation: nums is already a non-decreasing array. Therefore, we return 0.
 
6 3 5 5 4 4 7 7 8 8 5 5 11 8 5 11
6 5 5 4 7 7 8 8 5 11 11
6 5 7 7 8 8 11 11
6 7 7 8 8 11 11

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 109

class Solution
{
public:

    int totalSteps(vector<int> &nums)
    {
        int n = nums.size();
        stack<pair<int, int> > stk;
        //first: number itself
        //second: the step in which it will get deleted
        //first element will never get deleted so its second param is 0
        stk.push({nums[0], 0});
        int ans = 0;
        for (int i = 1; i < n; i++)
        {
            int mx = 0;
            while (!stk.empty() && stk.top().first <= nums[i])
            {
                mx = max(mx, stk.top().second);
                stk.pop();
            }
            if (stk.empty())
            {
                stk.push({nums[i], 0});
            }
            else
            {
                ans = max(ans, mx + 1);
                stk.push({nums[i], mx + 1});
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/minimum-obstacle-removal-to-reach-corner/

You are given a 0-indexed 2D integer array grid of size m x n. Each cell has one of two values:

0 represents an empty cell,
1 represents an obstacle that may be removed.
You can move up, down, left, or right from and to an empty cell.

Return the minimum number of obstacles to remove so you can move from the upper left corner (0, 0) to the lower right corner (m - 1, n - 1).

 

Example 1:


Input: grid = [[0,1,1],[1,1,0],[1,1,0]]
Output: 2
Explanation: We can remove the obstacles at (0, 1) and (0, 2) to create a path from (0, 0) to (2, 2).
It can be shown that we need to remove at least 2 obstacles, so we return 2.
Note that there may be other ways to remove 2 obstacles to create a path.
Example 2:


Input: grid = [[0,1,0,0,0],[0,1,0,1,0],[0,0,0,1,0]]
Output: 0
Explanation: We can move from (0, 0) to (2, 4) without removing any obstacles, so we return 0.
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 105
2 <= m * n <= 105
grid[i][j] is either 0 or 1.
grid[0][0] == grid[m - 1][n - 1] == 0

class Solution
{
public:
    int n, m;
    int dx[4] = {-1, 0, 1, 0};
    int dy[4] = {0, 1, 0, -1};

    int bfs(vector<vector<int>> &g, vector<vector<int>> &dist)
    {
        dist[0][0] = 0;
        priority_queue<array<int, 3>, vector<array<int, 3>>, greater<array<int, 3>>> pq;
        pq.push({0, 0, 0});
        while(!pq.empty())
        {
            auto v = pq.top();
            pq.pop();
            int d = v[0];
            int i = v[1];
            int j = v[2];
            if (d >  dist[i][j]) continue;
            for(int k = 0; k < 4; k++)
            {
                int ni = i + dx[k];
                int nj = j + dy[k];
                if (ni < 0 || ni >= n || nj < 0 || nj >= m) continue;
                if(dist[ni][nj] > d + g[ni][nj])
                {
                    dist[ni][nj] = d + g[ni][nj];
                    pq.push({dist[ni][nj], ni, nj});
                }
            }
        }
        return dist[n - 1][m - 1];
    }

    int minimumObstacles(vector<vector<int>> &g)
    {
        n = g.size();
        m = g[0].size();
        vector<vector<int>>dist(n, vector<int>(m, INT_MAX));
        return bfs(g, dist);
    }
};


// Source https://leetcode.com/problems/min-max-game/

You are given a 0-indexed integer array nums whose length is a power of 2.

Apply the following algorithm on nums:

Let n be the length of nums. If n == 1, end the process. Otherwise, create a new 0-indexed integer array newNums of length n / 2.
For every even index i where 0 <= i < n / 2, assign the value of newNums[i] as min(nums[2 * i], nums[2 * i + 1]).
For every odd index i where 0 <= i < n / 2, assign the value of newNums[i] as max(nums[2 * i], nums[2 * i + 1]).
Replace the array nums with newNums.
Repeat the entire process starting from step 1.
Return the last number that remains in nums after applying the algorithm.

 

Example 1:


Input: nums = [1,3,5,2,4,8,2,2]
Output: 1
Explanation: The following arrays are the results of applying the algorithm repeatedly.
First: nums = [1,5,4,2]
Second: nums = [1,4]
Third: nums = [1]
1 is the last remaining number, so we return 1.
Example 2:

Input: nums = [3]
Output: 3
Explanation: 3 is already the last remaining number, so we return 3.
 

Constraints:

1 <= nums.length <= 1024
1 <= nums[i] <= 109
nums.length is a power of 2.

class Solution
{
public:
    int arr[1010];

    int minMaxGame(vector<int> &nums)
    {
        int n = nums.size();
        if(n == 1) return nums[0];
        while(n > 1)
        {
            n /= 2;
            for(int i = 0; i < n; ++i)
            {
                if(i % 2)
                    arr[i] = max(nums[2 * i], nums[2 * i + 1]);
                else
                    arr[i] = min(nums[2 * i], nums[2 * i + 1]);
            }
            nums.clear();
            nums.resize(n, 0);
            for (int i = 0; i < n; ++i) nums[i] = arr[i];
        }
        return nums[0];
    }
};


// Source https://leetcode.com/problems/partition-array-such-that-maximum-difference-is-k/

You are given an integer array nums and an integer k. You may partition nums into one or more subsequences such that each element in nums appears in exactly one of the subsequences.

Return the minimum number of subsequences needed such that the difference between the maximum and minimum values in each subsequence is at most k.

A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:

Input: nums = [3,6,1,2,5], k = 2
Output: 2
Explanation:
We can partition nums into the two subsequences [3,1,2] and [6,5].
The difference between the maximum and minimum value in the first subsequence is 3 - 1 = 2.
The difference between the maximum and minimum value in the second subsequence is 6 - 5 = 1.
Since two subsequences were created, we return 2. It can be shown that 2 is the minimum number of subsequences needed.
Example 2:

Input: nums = [1,2,3], k = 1
Output: 2
Explanation:
We can partition nums into the two subsequences [1,2] and [3].
The difference between the maximum and minimum value in the first subsequence is 2 - 1 = 1.
The difference between the maximum and minimum value in the second subsequence is 3 - 3 = 0.
Since two subsequences were created, we return 2. Note that another optimal solution is to partition nums into the two subsequences [1] and [2,3].
Example 3:

Input: nums = [2,2,4,5], k = 0
Output: 3
Explanation:
We can partition nums into the three subsequences [2,2], [4], and [5].
The difference between the maximum and minimum value in the first subsequences is 2 - 2 = 0.
The difference between the maximum and minimum value in the second subsequences is 4 - 4 = 0.
The difference between the maximum and minimum value in the third subsequences is 5 - 5 = 0.
Since three subsequences were created, we return 3. It can be shown that 3 is the minimum number of subsequences needed.
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 105
0 <= k <= 105

class Solution
{
public:
    int partitionArray(vector<int> &nums, int k)
    {
        int n = nums.size();
        sort(nums.begin(), nums.end());
        int res = 0;
        int i = 0;
        while (i < n)
        {
            int j = i + 1;
            for (; j < n && nums[j] <= (nums[i] + k); ++j);
            ++res;
             i = j;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/replace-elements-in-an-array/

You are given a 0-indexed array nums that consists of n distinct positive integers. 
Apply m operations to this array, where in the ith operation you replace the number operations[i][0] with operations[i][1].

It is guaranteed that in the ith operation:

operations[i][0] exists in nums.
operations[i][1] does not exist in nums.
Return the array obtained after applying all the operations.

 

Example 1:

Input: nums = [1,2,4,6], operations = [[1,3],[4,7],[6,1]]
Output: [3,2,7,1]
Explanation: We perform the following operations on nums:
- Replace the number 1 with 3. nums becomes [3,2,4,6].
- Replace the number 4 with 7. nums becomes [3,2,7,6].
- Replace the number 6 with 1. nums becomes [3,2,7,1].
We return the final array [3,2,7,1].
Example 2:

Input: nums = [1,2], operations = [[1,3],[2,1],[3,2]]
Output: [2,1]
Explanation: We perform the following operations to nums:
- Replace the number 1 with 3. nums becomes [3,2].
- Replace the number 2 with 1. nums becomes [3,1].
- Replace the number 3 with 2. nums becomes [2,1].
We return the array [2,1].
 

Constraints:

n == nums.length
m == operations.length
1 <= n, m <= 105
All the values of nums are distinct.
operations[i].length == 2
1 <= nums[i], operations[i][0], operations[i][1] <= 106
operations[i][0] will exist in nums when applying the ith operation.
operations[i][1] will not exist in nums when applying the ith operation.

class Solution
{
public:
    vector<int> arrayChange(vector<int> &nums, vector<vector<int>> &operations)
    {
        int n = nums.size();
        unordered_map<int, int> mp;
        for(int i = 0; i < n; i++) mp[nums[i]] = i;
        for (auto &v : operations)
        {
            int idx = mp[v[0]];
            nums[idx] = v[1];
            mp[v[1]] = idx;
            mp.erase(v[0]);
        }
        return nums;
    }
};


// Source https://leetcode.com/problems/design-a-text-editor/

Design a text editor with a cursor that can do the following:

Add text to where the cursor is.
Delete text from where the cursor is (simulating the backspace key).
Move the cursor either left or right.
When deleting text, only characters to the left of the cursor will be deleted. The cursor will also remain within the actual text and cannot be moved beyond it. 
More formally, we have that 0 <= cursor.position <= currentText.length always holds.

Implement the TextEditor class:

TextEditor() Initializes the object with empty text.
void addText(string text) Appends text to where the cursor is. The cursor ends to the right of text.
int deleteText(int k) Deletes k characters to the left of the cursor. Returns the number of characters actually deleted.
string cursorLeft(int k) Moves the cursor to the left k times. Returns the last min(10, len) characters to the left of the cursor, where len is the number of characters to the left of the cursor.
string cursorRight(int k) Moves the cursor to the right k times. Returns the last min(10, len) characters to the left of the cursor, where len is the number of characters to the left of the cursor.
 

Example 1:

Input
["TextEditor", "addText", "deleteText", "addText", "cursorRight", "cursorLeft", "deleteText", "cursorLeft", "cursorRight"]
[[], ["leetcode"], [4], ["practice"], [3], [8], [10], [2], [6]]
Output
[null, null, 4, null, "etpractice", "leet", 4, "", "practi"]

Explanation
TextEditor textEditor = new TextEditor(); // The current text is "|". (The '|' character represents the cursor)
textEditor.addText("leetcode"); // The current text is "leetcode|".
textEditor.deleteText(4); // return 4
                          // The current text is "leet|". 
                          // 4 characters were deleted.
textEditor.addText("practice"); // The current text is "leetpractice|". 
textEditor.cursorRight(3); // return "etpractice"
                           // The current text is "leetpractice|". 
                           // The cursor cannot be moved beyond the actual text and thus did not move.
                           // "etpractice" is the last 10 characters to the left of the cursor.
textEditor.cursorLeft(8); // return "leet"
                          // The current text is "leet|practice".
                          // "leet" is the last min(10, 4) = 4 characters to the left of the cursor.
textEditor.deleteText(10); // return 4
                           // The current text is "|practice".
                           // Only 4 characters were deleted.
textEditor.cursorLeft(2); // return ""
                          // The current text is "|practice".
                          // The cursor cannot be moved beyond the actual text and thus did not move. 
                          // "" is the last min(10, 0) = 0 characters to the left of the cursor.
textEditor.cursorRight(6); // return "practi"
                           // The current text is "practi|ce".
                           // "practi" is the last min(10, 6) = 6 characters to the left of the cursor.
 

Constraints:

1 <= text.length, k <= 40
text consists of lowercase English letters.
At most 2 * 104 calls in total will be made to addText, deleteText, cursorLeft and cursorRight.

class TextEditor
{
public:
    string left, right;

    TextEditor()
    {
        left = right = "";
        left.reserve(1000);
        right.reserve(1000);
    }

    string get()
    {
        int n = left.length();
        int idx = max(0, n - 10);
        string s = "";
        s.reserve(n - idx);
        for(int i = idx; i < n; ++i) s.push_back(left[i]);
        return s;
    }

    void addText(string text)
    {
        left.append(text);
    }

    int deleteText(int k)
    {
        int x = min(k, (int)left.length());
        for(int i = 0; i < x; i++)
            left.pop_back();
        return x;
    }

    string cursorLeft(int k)
    {
        int x = min(k, (int)left.length());
        for(int i = 0; i < x; i++)
        {
            right.push_back(left.back());
            left.pop_back();
        }
        return get();
    }

    string cursorRight(int k)
    {
        int x = min(k, (int)right.length());
        for(int i = 0; i < x; i++)
        {
            left.push_back(right.back());
            right.pop_back();
        }
        return get();
    }
};


// Source https://leetcode.com/problems/strong-password-checker-ii/

A password is said to be strong if it satisfies all the following criteria:

It has at least 8 characters.
It contains at least one lowercase letter.
It contains at least one uppercase letter.
It contains at least one digit.
It contains at least one special character. The special characters are the characters in the following string: "!@#$%^&*()-+".
It does not contain 2 of the same character in adjacent positions (i.e., "aab" violates this condition, but "aba" does not).
Given a string password, return true if it is a strong password. Otherwise, return false.

 

Example 1:

Input: password = "IloveLe3tcode!"
Output: true
Explanation: The password meets all the requirements. Therefore, we return true.
Example 2:

Input: password = "Me+You--IsMyDream"
Output: false
Explanation: The password does not contain a digit and also contains 2 of the same character in adjacent positions. Therefore, we return false.
Example 3:

Input: password = "1aB!"
Output: false
Explanation: The password does not meet the length requirement. Therefore, we return false.
 

Constraints:

1 <= password.length <= 100
password consists of letters, digits, and special characters: "!@#$%^&*()-+".

class Solution
{
public:
    bool strongPasswordCheckerII(string password)
    {
        int n = password.length();
        if (n < 8) return false;
        int digitCnt = 0, lowerCnt = 0, upperCnt = 0, specialCnt = 0;
        uint8_t flag[256] = {0};
        flag['!'] = 1;
        flag['@'] = 1;
        flag['#'] = 1;
        flag['$'] = 1;
        flag['%'] = 1;
        flag['^'] = 1;
        flag['&'] = 1;
        flag['*'] = 1;
        flag['('] = 1;
        flag[')'] = 1;
        flag['-'] = 1;
        flag['+'] = 1;
        char ch = password[0];
        if (isdigit(ch)) digitCnt = 1;
        if (islower(ch)) lowerCnt = 1;
        if (isupper(ch)) upperCnt = 1;
        if (flag[ch]) specialCnt = 1;
        for (int i = 1; i < n; ++i)
        {
            if (password[i] == password[i - 1]) return false;
            ch = password[i];
            if (isdigit(ch)) ++digitCnt;
            if (islower(ch)) ++lowerCnt;
            if (isupper(ch)) ++upperCnt;
            if (flag[ch]) ++specialCnt;
        }
        if (digitCnt > 0 && lowerCnt > 0 && upperCnt > 0 && specialCnt > 0) return true;
        return false;
    }
};


// Source https://leetcode.com/problems/successful-pairs-of-spells-and-potions/

You are given two positive integer arrays spells and potions, of length n and m respectively, 
where spells[i] represents the strength of the ith spell and potions[j] represents the strength of the jth potion.

You are also given an integer success. A spell and potion pair is considered successful if the product of their strengths is at least success.

Return an integer array pairs of length n where pairs[i] is the number of potions that will form a successful pair with the ith spell.

给你两个正整数数组 spells 和 potions ，长度分别为 n 和 m ，其中 spells[i] 表示第 i 个咒语的能量强度，potions[j] 表示第 j 瓶药水的能量强度。

同时给你一个整数 success 。一个咒语和药水的能量强度 相乘 如果 大于等于 success ，那么它们视为一对 成功 的组合。

请你返回一个长度为 n 的整数数组 pairs，其中 pairs[i] 是能跟第 i 个咒语成功组合的 药水 数目。

Example 1:

Input: spells = [5,1,3], potions = [1,2,3,4,5], success = 7
Output: [4,0,3]
Explanation:
- 0th spell: 5 * [1,2,3,4,5] = [5,10,15,20,25]. 4 pairs are successful.
- 1st spell: 1 * [1,2,3,4,5] = [1,2,3,4,5]. 0 pairs are successful.
- 2nd spell: 3 * [1,2,3,4,5] = [3,6,9,12,15]. 3 pairs are successful.
Thus, [4,0,3] is returned.
Example 2:

Input: spells = [3,1,2], potions = [8,5,8], success = 16
Output: [2,0,2]
Explanation:
- 0th spell: 3 * [8,5,8] = [24,15,24]. 2 pairs are successful.
- 1st spell: 1 * [8,5,8] = [8,5,8]. 0 pairs are successful. 
- 2nd spell: 2 * [8,5,8] = [16,10,16]. 2 pairs are successful. 
Thus, [2,0,2] is returned.
 

Constraints:

n == spells.length
m == potions.length
1 <= n, m <= 105
1 <= spells[i], potions[i] <= 105
1 <= success <= 1010

class Solution
{
public:
    int n, m;

    int bs(vector<int> &potions, long long curr, long long success)
    {
        int res = -1;
        int l = 0;
        int r = m - 1;
        while(l <= r)
        {
            int mid = l + (r - l) / 2;
            long long t = potions[mid];
            long long p = curr * t;
            if(p >= success)
            {
                res = mid;
                r = mid - 1;
            }
            else
            {
                l = mid + 1;
            }
        }
        return res;
    }

    vector<int> successfulPairs(vector<int> &spells, vector<int> &potions, long long success)
    {
        n = spells.size();
        m = potions.size();
        sort(potions.begin(), potions.end());
        vector<int> res;
        res.reserve(n);
        for(int x : spells)
        {
            int idx = bs(potions, x, success);
            res.push_back(idx == -1 ? 0 : (m - idx));
        }
        return res;
    }
};


// Source https://leetcode.com/problems/match-substring-after-replacement/

You are given two strings s and sub. You are also given a 2D character array mappings 
where mappings[i] = [oldi, newi] indicates that you may perform the following operation any number of times:

Replace a character oldi of sub with newi.
Each character in sub cannot be replaced more than once.

Return true if it is possible to make sub a substring of s by replacing zero or more characters according to mappings. Otherwise, return false.

A substring is a contiguous non-empty sequence of characters within a string.

 

Example 1:

Input: s = "fool3e7bar", sub = "leet", mappings = [["e","3"],["t","7"],["t","8"]]
Output: true
Explanation: Replace the first 'e' in sub with '3' and 't' in sub with '7'.
Now sub = "l3e7" is a substring of s, so we return true.
Example 2:

Input: s = "fooleetbar", sub = "f00l", mappings = [["o","0"]]
Output: false
Explanation: The string "f00l" is not a substring of s and no replacements can be made.
Note that we cannot replace '0' with 'o'.
Example 3:

Input: s = "Fool33tbaR", sub = "leetd", mappings = [["e","3"],["t","7"],["t","8"],["d","b"],["p","b"]]
Output: true
Explanation: Replace the first and second 'e' in sub with '3' and 'd' in sub with 'b'.
Now sub = "l33tb" is a substring of s, so we return true.

 

Constraints:

1 <= sub.length <= s.length <= 5000
0 <= mappings.length <= 1000
mappings[i].length == 2
oldi != newi
s and sub consist of uppercase and lowercase English letters and digits.
oldi and newi are either uppercase or lowercase English letters or digits.

class Solution
{
public:
    uint8_t dp[256][256];

    bool matchReplacement(string s, string sub, vector<vector<char>> &mappings)
    {
        int n = s.length();
        int m = sub.length();
        if (n < m) return false;
        unordered_map<string, int> mp;
        int end = n - m;
        for(int i = 0; i <= end; ++i)
        {
            mp[s.substr(i, m)]++;
        }
        for (auto &v : mappings)
        {
            dp[v[0]][v[1]] = 1;
        }
        for(auto &[str, cnt] : mp)
        {
            int j = 0;
            while(j < m)
            {
                if(str[j] != sub[j] && dp[sub[j]][str[j]] == 0) break;
                ++j;
            }
            if(j == m) return true;
        }
        return false;
    }
};


// Source https://leetcode.com/problems/count-subarrays-with-score-less-than-k/

The score of an array is defined as the product of its sum and its length.

For example, the score of [1, 2, 3, 4, 5] is (1 + 2 + 3 + 4 + 5) * 5 = 75.
Given a positive integer array nums and an integer k, return the number of non-empty subarrays of nums whose score is strictly less than k.

A subarray is a contiguous sequence of elements within an array.

 

Example 1:

Input: nums = [2,1,4,3,5], k = 10
Output: 6
Explanation:
The 6 subarrays having scores less than 10 are:
- [2] with score 2 * 1 = 2.
- [1] with score 1 * 1 = 1.
- [4] with score 4 * 1 = 4.
- [3] with score 3 * 1 = 3. 
- [5] with score 5 * 1 = 5.
- [2,1] with score (2 + 1) * 2 = 6.
Note that subarrays such as [1,4] and [4,3,5] are not considered because their scores are 10 and 36 respectively, while we need scores strictly less than 10.
Example 2:

Input: nums = [1,1,1], k = 5
Output: 5
Explanation:
Every subarray except [1,1,1] has a score less than 5.
[1,1,1] has a score (1 + 1 + 1) * 3 = 9, which is greater than 5.
Thus, there are 5 subarrays having scores less than 5.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 105
1 <= k <= 1015

class Solution
{
public:
    long long countSubarrays(vector<int> &nums, long long k)
    {
        int n = nums.size();
        vector<long long> preSum(n + 1, 0);
        for(int i = 1; i <= n; i++)
        {
            preSum[i] = preSum[i - 1] + nums[i - 1];
        }
        long long ans = 0;
        int l = 0, r = 0;
        while (r < n)
        {
            while(l <= r && (preSum[r + 1] - preSum[l]) * (r - l + 1) >= k)
            {
                ++l;
            }
            ans += (r - l + 1);
            ++r;
        }
        return ans;
    }
};

// Source https://leetcode.com/problems/calculate-amount-paid-in-taxes/

You are given a 0-indexed 2D integer array brackets where brackets[i] = [upperi, percenti] means that the ith tax bracket has an upper bound of upperi and is taxed at a rate of percenti. 
The brackets are sorted by upper bound (i.e. upperi-1 < upperi for 0 < i < brackets.length).

Tax is calculated as follows:

The first upper0 dollars earned are taxed at a rate of percent0.
The next upper1 - upper0 dollars earned are taxed at a rate of percent1.
The next upper2 - upper1 dollars earned are taxed at a rate of percent2.
And so on.
You are given an integer income representing the amount of money you earned. 
Return the amount of money that you have to pay in taxes. Answers within 10-5 of the actual answer will be accepted.

给你一个下标从 0 开始的二维整数数组 brackets ，其中 brackets[i] = [upperi, percenti] ，表示第 i 个税级的上限是 upperi ，征收的税率为 percenti 。
税级按上限 从低到高排序（在满足 0 < i < brackets.length 的前提下，upperi-1 < upperi）。

税款计算方式如下：

不超过 upper0 的收入按税率 percent0 缴纳
接着 upper1 - upper0 的部分按税率 percent1 缴纳
然后 upper2 - upper1 的部分按税率 percent2 缴纳
以此类推
给你一个整数 income 表示你的总收入。返回你需要缴纳的税款总额。与标准答案误差不超 10-5 的结果将被视作正确答案。

Example 1:

Input: brackets = [[3,50],[7,10],[12,25]], income = 10
Output: 2.65000
Explanation:
Based on your income, you have 3 dollars in the 1st tax bracket, 4 dollars in the 2nd tax bracket, and 3 dollars in the 3rd tax bracket.
The tax rate for the three tax brackets is 50%, 10%, and 25%, respectively.
In total, you pay $3 * 50% + $4 * 10% + $3 * 25% = $2.65 in taxes.
Example 2:

Input: brackets = [[1,0],[4,25],[5,50]], income = 2
Output: 0.25000
Explanation:
Based on your income, you have 1 dollar in the 1st tax bracket and 1 dollar in the 2nd tax bracket.
The tax rate for the two tax brackets is 0% and 25%, respectively.
In total, you pay $1 * 0% + $1 * 25% = $0.25 in taxes.
Example 3:

Input: brackets = [[2,50]], income = 0
Output: 0.00000
Explanation:
You have no income to tax, so you have to pay a total of $0 in taxes.
 

Constraints:

1 <= brackets.length <= 100
1 <= upperi <= 1000
0 <= percenti <= 100
0 <= income <= 1000
upperi is sorted in ascending order.
All the values of upperi are unique.
The upper bound of the last tax bracket is greater than or equal to income.

class Solution
{
public:
    double calculateTax(vector<vector<int>> &brackets, int income)
    {
        int n = brackets.size();
        double result = 0;
        if(income <= brackets[0][0]) return double(income) * brackets[0][1] * 0.01;
        income -= brackets[0][0];
        result = double(brackets[0][0]) * brackets[0][1] * 0.01;
        for(int i = 1; i < n; i++)
        {
            if(income > (brackets[i][0] - brackets[i - 1][0]))
            {
                result += double(brackets[i][0] - brackets[i - 1][0]) * brackets[i][1] * 0.01;
                income -= (brackets[i][0] - brackets[i - 1][0]);
            }
            else
            {
                result += double(income) * brackets[i][1] * 0.01;
                break;
            }
        }
        return result;
    }
};


// Source https://leetcode.com/problems/minimum-path-cost-in-a-grid/

You are given a 0-indexed m x n integer matrix grid consisting of distinct integers from 0 to m * n - 1. 
You can move in this matrix from a cell to any other cell in the next row. 
That is, if you are in cell (x, y) such that x < m - 1, you can move to any of the cells (x + 1, 0), (x + 1, 1), ..., (x + 1, n - 1). Note that it is not possible to move from cells in the last row.

Each possible move has a cost given by a 0-indexed 2D array moveCost of size (m * n) x n, where moveCost[i][j] is the cost of moving from a cell with value i to a cell in column j of the next row. 
The cost of moving from cells in the last row of grid can be ignored.

The cost of a path in grid is the sum of all values of cells visited plus the sum of costs of all the moves made. 
Return the minimum cost of a path that starts from any cell in the first row and ends at any cell in the last row.

给你一个下标从 0 开始的整数矩阵 grid ，矩阵大小为 m x n ，由从 0 到 m * n - 1 的不同整数组成。
你可以在此矩阵中，从一个单元格移动到 下一行 的任何其他单元格。
如果你位于单元格 (x, y) ，且满足 x < m - 1 ，你可以移动到 (x + 1, 0), (x + 1, 1), ..., (x + 1, n - 1) 中的任何一个单元格。
注意： 在最后一行中的单元格不能触发移动。

每次可能的移动都需要付出对应的代价，代价用一个下标从 0 开始的二维数组 moveCost 表示，该数组大小为 (m * n) x n ，
其中 moveCost[i][j] 是从值为 i 的单元格移动到下一行第 j 列单元格的代价。从 grid 最后一行的单元格移动的代价可以忽略。

grid 一条路径的代价是：所有路径经过的单元格的 值之和 加上 所有移动的 代价之和 。从 第一行 任意单元格出发，返回到达 最后一行 任意单元格的最小路径代价。

Example 1:


Input: grid = [[5,3],[4,0],[2,1]], moveCost = [[9,8],[1,5],[10,12],[18,6],[2,4],[14,3]]
Output: 17
Explanation: The path with the minimum possible cost is the path 5 -> 0 -> 1.
- The sum of the values of cells visited is 5 + 0 + 1 = 6.
- The cost of moving from 5 to 0 is 3.
- The cost of moving from 0 to 1 is 8.
So the total cost of the path is 6 + 3 + 8 = 17.
Example 2:

Input: grid = [[5,1,2],[4,0,3]], moveCost = [[12,10,15],[20,23,8],[21,7,1],[8,1,13],[9,10,25],[5,3,2]]
Output: 6
Explanation: The path with the minimum possible cost is the path 2 -> 3.
- The sum of the values of cells visited is 2 + 3 = 5.
- The cost of moving from 2 to 3 is 1.
So the total cost of this path is 5 + 1 = 6.
 

Constraints:

m == grid.length
n == grid[i].length
2 <= m, n <= 50
grid consists of distinct integers from 0 to m * n - 1.
moveCost.length == m * n
moveCost[i].length == n
1 <= moveCost[i][j] <= 100

class Solution
{
public:
    int m, n;
    int dp[51][51];

    int solve(vector<vector<int>> &grid, vector<vector<int>> &moveCost, int i, int j)
    {
        if(i == m - 1) return grid[i][j];
        if(dp[i][j] != -1) return dp[i][j];
        int temp = grid[i][j];
        int res = INT_MAX;
        for(int k = 0; k < n; k++)
        {
            res = min(res, temp + moveCost[temp][k] + solve(grid, moveCost, i + 1, k));
        }
        return dp[i][j] = res;
    }

    int minPathCost(vector<vector<int>> &grid, vector<vector<int>> &moveCost)
    {
        m = grid.size();
        n = grid[0].size();
        memset(dp, -1, sizeof(dp));
        int ans = INT_MAX;
        for(int j = 0; j < n; j++)
        {
            ans = min(ans, solve(grid, moveCost, 0, j));
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/fair-distribution-of-cookies/

You are given an integer array cookies, where cookies[i] denotes the number of cookies in the ith bag. 
You are also given an integer k that denotes the number of children to distribute all the bags of cookies to. All the cookies in the same bag must go to the same child and cannot be split up.

The unfairness of a distribution is defined as the maximum total cookies obtained by a single child in the distribution.

Return the minimum unfairness of all distributions.

给你一个整数数组 cookies ，其中 cookies[i] 表示在第 i 个零食包中的饼干数量。另给你一个整数 k 表示等待分发零食包的孩子数量，所有 零食包都需要分发。在同一个零食包中的所有饼干都必须分发给同一个孩子，不能分开。

分发的 不公平程度 定义为单个孩子在分发过程中能够获得饼干的最大总数。

返回所有分发的最小不公平程度。

Example 1:

Input: cookies = [8,15,10,20,8], k = 2
Output: 31
Explanation: One optimal distribution is [8,15,8] and [10,20]
- The 1st child receives [8,15,8] which has a total of 8 + 15 + 8 = 31 cookies.
- The 2nd child receives [10,20] which has a total of 10 + 20 = 30 cookies.
The unfairness of the distribution is max(31,30) = 31.
It can be shown that there is no distribution with an unfairness less than 31.
Example 2:

Input: cookies = [6,1,3,2,2,4,1,2], k = 3
Output: 7
Explanation: One optimal distribution is [6,1], [3,2,2], and [4,1,2]
- The 1st child receives [6,1] which has a total of 6 + 1 = 7 cookies.
- The 2nd child receives [3,2,2] which has a total of 3 + 2 + 2 = 7 cookies.
- The 3rd child receives [4,1,2] which has a total of 4 + 1 + 2 = 7 cookies.
The unfairness of the distribution is max(7,7,7) = 7.
It can be shown that there is no distribution with an unfairness less than 7.
 

Constraints:

2 <= cookies.length <= 8
1 <= cookies[i] <= 105
2 <= k <= cookies.length

class Solution
{
public:
    int n, k;
    int result;

    void solve(vector<int> &cookies, vector<int> &students, int idx)
    {
        if(idx == n)
        {
            result = min(result, *max_element(students.begin(), students.end()));
            return;
        }
        for(int i = 0; i < k; i++)
        {
            if(students[i] + cookies[idx] < result)
            {
                students[i] += cookies[idx];
                solve(cookies, students, idx + 1);
                students[i] -= cookies[idx];
            }
        }
    }

    int distributeCookies(vector<int> &cookies, int k)
    {
        n = cookies.size();
        this->k = k;
        vector<int> students(k, 0);
        result = INT_MAX;
        solve(cookies, students, 0);
        return result;
    }
};


// Source https://leetcode.com/problems/naming-a-company/

You are given an array of strings ideas that represents a list of names to be used in the process of naming a company. The process of naming a company is as follows:

Choose 2 distinct names from ideas, call them ideaA and ideaB.
Swap the first letters of ideaA and ideaB with each other.
If both of the new names are not found in the original ideas, then the name ideaA ideaB (the concatenation of ideaA and ideaB, separated by a space) is a valid company name.
Otherwise, it is not a valid name.
Return the number of distinct valid names for the company.

 

Example 1:

Input: ideas = ["coffee","donuts","time","toffee"]
Output: 6
Explanation: The following selections are valid:
- ("coffee", "donuts"): The company name created is "doffee conuts".
- ("donuts", "coffee"): The company name created is "conuts doffee".
- ("donuts", "time"): The company name created is "tonuts dime".
- ("donuts", "toffee"): The company name created is "tonuts doffee".
- ("time", "donuts"): The company name created is "dime tonuts".
- ("toffee", "donuts"): The company name created is "doffee tonuts".
Therefore, there are a total of 6 distinct company names.

The following are some examples of invalid selections:
- ("coffee", "time"): The name "toffee" formed after swapping already exists in the original array.
- ("time", "toffee"): Both names are still the same after swapping and exist in the original array.
- ("coffee", "toffee"): Both names formed after swapping already exist in the original array.
Example 2:

Input: ideas = ["lack","back"]
Output: 0
Explanation: There are no valid selections. Therefore, 0 is returned.
 

Constraints:

2 <= ideas.length <= 5 * 104
1 <= ideas[i].length <= 10
ideas[i] consists of lowercase English letters.
All the strings in ideas are unique.

class Solution
{
public:
    long long distinctNames(vector<string> &ideas)
    {
        vector<unordered_set<string>> v(26);
        for(auto &s : ideas)
        {
            v[s[0] - 'a'].emplace(s.substr(1));
        }
        long long ans = 0;
        for(int i = 0; i < 25; i++)
        {
            for(int j = i + 1; j < 26; j++)
            {
                long long cnt = 0;
                for(const auto &str : v[j])
                {
                    if(v[i].find(str) != v[i].end()) cnt++;
                }
                ans += (v[i].size() - cnt) * (v[j].size() - cnt) * 2;
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/greatest-english-letter-in-upper-and-lower-case/

Given a string of English letters s, return the greatest English letter which occurs as both a lowercase and uppercase letter in s. 
The returned letter should be in uppercase. If no such letter exists, return an empty string.

An English letter b is greater than another letter a if b appears after a in the English alphabet.

 

Example 1:

Input: s = "lEeTcOdE"
Output: "E"
Explanation:
The letter 'E' is the only letter to appear in both lower and upper case.
Example 2:

Input: s = "arRAzFif"
Output: "R"
Explanation:
The letter 'R' is the greatest letter to appear in both lower and upper case.
Note that 'A' and 'F' also appear in both lower and upper case, but 'R' is greater than 'F' or 'A'.
Example 3:

Input: s = "AbCdEfGhIjK"
Output: ""
Explanation:
There is no letter that appears in both lower and upper case.
 

Constraints:

1 <= s.length <= 1000
s consists of lowercase and uppercase English letters.

class Solution
{
public:
    string greatestLetter(string s)
    {
        int lower[26] = {0};
        int upper[26] = {0};
        for(char c : s)
        {
            if(islower(c))
                lower[c - 'a']++;
            if(isupper(c))
                upper[c - 'A']++;
        }
        for(int i = 25 ; i >= 0; i--)
        {
            if(upper[i]  &&  lower[i])
                return string(1, 'A' + i);
        }
        return "";
    }
};


// Source https://leetcode.com/problems/sum-of-numbers-with-units-digit-k/

Given two integers num and k, consider a set of positive integers with the following properties:

The units digit of each integer is k.
The sum of the integers is num.
Return the minimum possible size of such a set, or -1 if no such set exists.

Note:

The set can contain multiple instances of the same integer, and the sum of an empty set is considered 0.
The units digit of a number is the rightmost digit of the number.

给你两个整数 num 和 k ，考虑具有以下属性的正整数多重集：

每个整数个位数字都是 k 。
所有整数之和是 num 。
返回该多重集的最小大小，如果不存在这样的多重集，返回 -1 。

注意：

多重集与集合类似，但多重集可以包含多个同一整数，空多重集的和为 0 。
个位数字 是数字最右边的数位。

Example 1:

Input: num = 58, k = 9
Output: 2
Explanation:
One valid set is [9,49], as the sum is 58 and each integer has a units digit of 9.
Another valid set is [19,39].
It can be shown that 2 is the minimum possible size of a valid set.
Example 2:

Input: num = 37, k = 2
Output: -1
Explanation: It is not possible to obtain a sum of 37 using only integers that have a units digit of 2.
Example 3:

Input: num = 0, k = 7
Output: 0
Explanation: The sum of an empty set is considered 0.
 

Constraints:

0 <= num <= 3000
0 <= k <= 9

class Solution
{
public:
    int minimumNumbers(int num, int k)
    {
        if (num == 0) return 0;
        if ((k % 2 == 0) && (num & 1)) return -1;
        for (int i = 1; i <= num && num - i * k >= 0; ++i)
        {
            if ((num - i * k) % 10 == 0) return i;
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/longest-binary-subsequence-less-than-or-equal-to-k/

You are given a binary string s and a positive integer k.

Return the length of the longest subsequence of s that makes up a binary number less than or equal to k.

Note:

The subsequence can contain leading zeroes.
The empty string is considered to be equal to 0.
A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.
 

Example 1:

Input: s = "1001010", k = 5
Output: 5
Explanation: The longest subsequence of s that makes up a binary number less than or equal to 5 is "00010", as this number is equal to 2 in decimal.
Note that "00100" and "00101" are also possible, which are equal to 4 and 5 in decimal, respectively.
The length of this subsequence is 5, so 5 is returned.
Example 2:

Input: s = "00101001", k = 1
Output: 6
Explanation: "000001" is the longest subsequence of s that makes up a binary number less than or equal to 1, as this number is equal to 1 in decimal.
The length of this subsequence is 6, so 6 is returned.
 

Constraints:

1 <= s.length <= 1000
s[i] is either '0' or '1'.
1 <= k <= 109

cur 表示 the value of the longest subsequence of s[i ... n - 1] that makes up a binary number less than or equal to k
res 表示 the length of the longest subsequence of s[i ... n - 1] that makes up a binary number less than or equal to k

class Solution
{
public:
    int longestSubsequence(string s, int k)
    {
        int n = s.length();
        int cur = 0, res = 0;
        for (int i = n - 1; i >= 0; i--)
        {
            if (s[i] == '0')
            {
                res++;
            }
            else if (res < 30 && cur + (1 << res) <= k)
            {
                cur += 1 << res;
                res++;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/selling-pieces-of-wood/

You are given two integers m and n that represent the height and width of a rectangular piece of wood. 
You are also given a 2D integer array prices, where prices[i] = [hi, wi, pricei] indicates you can sell a rectangular piece of wood of height hi and width wi for pricei dollars.

To cut a piece of wood, you must make a vertical or horizontal cut across the entire height or width of the piece to split it into two smaller pieces. 
After cutting a piece of wood into some number of smaller pieces, you can sell pieces according to prices. 
You may sell multiple pieces of the same shape, and you do not have to sell all the shapes. The grain of the wood makes a difference, so you cannot rotate a piece to swap its height and width.

Return the maximum money you can earn after cutting an m x n piece of wood.

Note that you can cut the piece of wood as many times as you want.

给你两个整数 m 和 n ，分别表示一块矩形木块的高和宽。同时给你一个二维整数数组 prices ，其中 prices[i] = [hi, wi, pricei] 表示你可以以 pricei 元的价格卖一块高为 hi 宽为 wi 的矩形木块。

每一次操作中，你必须按下述方式之一执行切割操作，以得到两块更小的矩形木块：

沿垂直方向按高度 完全 切割木块，或
沿水平方向按宽度 完全 切割木块
在将一块木块切成若干小木块后，你可以根据 prices 卖木块。你可以卖多块同样尺寸的木块。你不需要将所有小木块都卖出去。你 不能 旋转切好后木块的高和宽。

请你返回切割一块大小为 m x n 的木块后，能得到的 最多 钱数。

注意你可以切割木块任意次。

Example 1:


Input: m = 3, n = 5, prices = [[1,4,2],[2,2,7],[2,1,3]]
Output: 19
Explanation: The diagram above shows a possible scenario. It consists of:
- 2 pieces of wood shaped 2 x 2, selling for a price of 2 * 7 = 14.
- 1 piece of wood shaped 2 x 1, selling for a price of 1 * 3 = 3.
- 1 piece of wood shaped 1 x 4, selling for a price of 1 * 2 = 2.
This obtains a total of 14 + 3 + 2 = 19 money earned.
It can be shown that 19 is the maximum amount of money that can be earned.
Example 2:


Input: m = 4, n = 6, prices = [[3,2,10],[1,4,2],[4,1,3]]
Output: 32
Explanation: The diagram above shows a possible scenario. It consists of:
- 3 pieces of wood shaped 3 x 2, selling for a price of 3 * 10 = 30.
- 1 piece of wood shaped 1 x 4, selling for a price of 1 * 2 = 2.
This obtains a total of 30 + 2 = 32 money earned.
It can be shown that 32 is the maximum amount of money that can be earned.
Notice that we cannot rotate the 1 x 4 piece of wood to obtain a 4 x 1 piece of wood.
 

Constraints:

1 <= m, n <= 200
1 <= prices.length <= 2 * 104
prices[i].length == 3
1 <= hi <= m
1 <= wi <= n
1 <= pricei <= 106
All the shapes of wood (hi, wi) are pairwise distinct.

class Solution
{
public:
    long long dp[201][201];
    long long price[201][201];

    long long recur(int rows, int columns)
    {
        if(rows == 1 && columns == 1) return price[1][1];
        if(dp[rows][columns] != -1) return dp[rows][columns];
        long long ans = price[rows][columns];
        for(int i = 1; i <= rows / 2; i++)
        {
            ans = max(ans, recur(i, columns) + recur(rows - i, columns));
        }
        for(int i = 1; i <= columns / 2; i++)
        {
            ans = max(ans, recur(rows, i) + recur(rows, columns - i));
        }
        return dp[rows][columns] = ans;
    }

    long long sellingWood(int m, int n, vector<vector<int>> &prices)
    {
        memset(dp, -1, sizeof(dp));
        for(auto &v : prices) price[v[0]][v[1]] = v[2];
        return recur(m, n);
    }
};


// Source https://leetcode.com/problems/count-asterisks/

You are given a string s, where every two consecutive vertical bars '|' are grouped into a pair. In other words, the 1st and 2nd '|' make a pair, the 3rd and 4th '|' make a pair, and so forth.

Return the number of '*' in s, excluding the '*' between each pair of '|'.

Note that each '|' will belong to exactly one pair.

给你一个字符串 s ，每 两个 连续竖线 '|' 为 一对 。换言之，第一个和第二个 '|' 为一对，第三个和第四个 '|' 为一对，以此类推。

请你返回 不在 竖线对之间，s 中 '*' 的数目。

注意，每个竖线 '|' 都会 恰好 属于一个对。

Example 1:

Input: s = "l|*e*et|c**o|*de|"
Output: 2
Explanation: The considered characters are underlined: "l|*e*et|c**o|*de|".
The characters between the first and second '|' are excluded from the answer.
Also, the characters between the third and fourth '|' are excluded from the answer.
There are 2 asterisks considered. Therefore, we return 2.
Example 2:

Input: s = "iamprogrammer"
Output: 0
Explanation: In this example, there are no asterisks in s. Therefore, we return 0.
Example 3:

Input: s = "yo|uar|e**|b|e***au|tifu|l"
Output: 5
Explanation: The considered characters are underlined: "yo|uar|e**|b|e***au|tifu|l". There are 5 asterisks considered. Therefore, we return 5.
 

Constraints:

1 <= s.length <= 1000
s consists of lowercase English letters, vertical bars '|', and asterisks '*'.
s contains an even number of vertical bars '|'.

class Solution
{
public:
    int countAsterisks(string s)
    {
        int n = s.length();
        int cnt = 0;
        int res = 0;
        for (auto ch : s)
        {
            if(ch == '|') { ++cnt; continue; }
            if((ch == '*') && (cnt % 2 == 0))
            {
                ++res;
            }
        }
        return res;
    }
};


// Source https://leetcode.com/problems/count-unreachable-pairs-of-nodes-in-an-undirected-graph/

You are given an integer n. There is an undirected graph with n nodes, numbered from 0 to n - 1. 
You are given a 2D integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting nodes ai and bi.

Return the number of pairs of different nodes that are unreachable from each other.

 

Example 1:


Input: n = 3, edges = [[0,1],[0,2],[1,2]]
Output: 0
Explanation: There are no pairs of nodes that are unreachable from each other. Therefore, we return 0.
Example 2:


Input: n = 7, edges = [[0,2],[0,5],[2,4],[1,6],[5,4]]
Output: 14
Explanation: There are 14 pairs of nodes that are unreachable from each other:
[[0,1],[0,3],[0,6],[1,2],[1,3],[1,4],[1,5],[2,3],[2,6],[3,4],[3,5],[3,6],[4,6],[5,6]].
Therefore, we return 14.
 

Constraints:

1 <= n <= 105
0 <= edges.length <= 2 * 105
edges[i].length == 2
0 <= ai, bi < n
ai != bi
There are no repeated edges.

class Solution
{
public:

    struct DSU
    {
        int parent[100001];
        int size[100001];

        DSU(int n)
        {
            for(int i = 0; i < n; i++)
            {
                parent[i] = i;
                size[i] = 1;
            }
        }

        int find(int x)
        {
            if(parent[x] != x) parent[x] = find(parent[x]);
            return parent[x];
        }

        bool join(int a, int b)
        {
            int root_a = find(a);
            int root_b = find(b);
            if (root_a == root_b) return false;
            if (size[root_a] > size[root_b])
            {
                parent[root_b] = root_a;
                size[root_a] += size[root_b];
            }
            else
            {
                parent[root_a] = root_b;
                size[root_b] += size[root_a];
            }
            return true;
        }

        int count(int x)
        {
            return size[x];
        }
    };

    long long countPairs(int n, vector<vector<int>> &edges)
    {
        DSU dsu(n);
        for (auto &v : edges) dsu.join(v[0], v[1]);
        unordered_map<int, long long> mp;
        for(int i = 0; i < n; i++)
        {
            int root = dsu.find(i);
            mp[root]++;
        }
        long long ans = 0;
        for (auto &[root, cnt] : mp)
        {
            ans += cnt * (n - cnt);
        }
        return ans / 2;
    }
};


// Source https://leetcode.com/problems/maximum-xor-after-operations/

You are given a 0-indexed integer array nums. In one operation, select any non-negative integer x and an index i, then update nums[i] to be equal to nums[i] AND (nums[i] XOR x).

Note that AND is the bitwise AND operation and XOR is the bitwise XOR operation.

Return the maximum possible bitwise XOR of all elements of nums after applying the operation any number of times.

 

Example 1:

Input: nums = [3,2,4,6]
Output: 7
Explanation: Apply the operation with x = 4 and i = 3, num[3] = 6 AND (6 XOR 4) = 6 AND 2 = 2.
Now, nums = [3, 2, 4, 2] and the bitwise XOR of all the elements = 3 XOR 2 XOR 4 XOR 2 = 7.
It can be shown that 7 is the maximum possible bitwise XOR.
Note that other operations may be used to achieve a bitwise XOR of 7.
Example 2:

Input: nums = [1,2,3,9,2]
Output: 11
Explanation: Apply the operation zero times.
The bitwise XOR of all the elements = 1 XOR 2 XOR 3 XOR 9 XOR 2 = 11.
It can be shown that 11 is the maximum possible bitwise XOR.
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 108

class Solution
{
public:
    int maximumXOR(vector<int> &nums)
    {
        int ans = 0;
        for(auto x : nums) ans |= x;
        return ans;
    }
};


// Source https://leetcode.com/problems/number-of-distinct-roll-sequences/

You are given an integer n. You roll a fair 6-sided dice n times. Determine the total number of distinct sequences of rolls possible such that the following conditions are satisfied:

The greatest common divisor of any adjacent values in the sequence is equal to 1.
There is at least a gap of 2 rolls between equal valued rolls. More formally, if the value of the ith roll is equal to the value of the jth roll, then abs(i - j) > 2.
Return the total number of distinct sequences possible. Since the answer may be very large, return it modulo 109 + 7.

Two sequences are considered distinct if at least one element is different.

给你一个整数 n 。你需要掷一个 6 面的骰子 n 次。请你在满足以下要求的前提下，求出 不同 骰子序列的数目：

序列中任意 相邻 数字的 最大公约数 为 1 。
序列中 相等 的值之间，至少有 2 个其他值的数字。正式地，如果第 i 次掷骰子的值 等于 第 j 次的值，那么 abs(i - j) > 2 。
请你返回不同序列的 总数目 。由于答案可能很大，请你将答案对 109 + 7 取余 后返回。

如果两个序列中至少有一个元素不同，那么它们被视为不同的序列。

Example 1:

Input: n = 4
Output: 184
Explanation: Some of the possible sequences are (1, 2, 3, 4), (6, 1, 2, 3), (1, 2, 3, 1), etc.
Some invalid sequences are (1, 2, 1, 3), (1, 2, 3, 6).
(1, 2, 1, 3) is invalid since the first and third roll have an equal value and abs(1 - 3) = 2 (i and j are 1-indexed).
(1, 2, 3, 6) is invalid since the greatest common divisor of 3 and 6 = 3.
There are a total of 184 distinct sequences possible, so we return 184.
Example 2:

Input: n = 2
Output: 22
Explanation: Some of the possible sequences are (1, 2), (2, 1), (3, 2).
Some invalid sequences are (3, 6), (2, 4) since the greatest common divisor is not equal to 1.
There are a total of 22 distinct sequences possible, so we return 22.
 

Constraints:

1 <= n <= 104

class Solution
{
public:
    const int mod = 1e9 + 7;
    int dp[10001][7][7];

    int solve(int n, int prev, int prev_of_prev)
    {
        if(n == 0) return 1;
        if(dp[n][prev][prev_of_prev] != -1) return dp[n][prev][prev_of_prev];
        int res = 0;
        for(int i = 1; i <= 6; i++)
        {
            if(i != prev && i != prev_of_prev && (__gcd(i, prev) == 1 || prev == 0))
            {
                res += solve(n - 1, i, prev);
                res %= mod;
            }
        }
        return dp[n][prev][prev_of_prev] = res;
    }

    int distinctSequences(int n)
    {
        memset(dp, -1, sizeof(dp));
        return solve(n, 0, 0);
    }
};


// Source https://leetcode.com/problems/check-if-matrix-is-x-matrix/

A square matrix is said to be an X-Matrix if both of the following conditions hold:

All the elements in the diagonals of the matrix are non-zero.
All other elements are 0.
Given a 2D integer array grid of size n x n representing a square matrix, return true if grid is an X-Matrix. Otherwise, return false.



Example 1:


Input: grid = [[2,0,0,1],[0,3,1,0],[0,5,2,0],[4,0,0,2]]
Output: true
Explanation: Refer to the diagram above. 
An X-Matrix should have the green elements (diagonals) be non-zero and the red elements be 0.
Thus, grid is an X-Matrix.
Example 2:


Input: grid = [[5,7,0],[0,3,1],[0,5,0]]
Output: false
Explanation: Refer to the diagram above.
An X-Matrix should have the green elements (diagonals) be non-zero and the red elements be 0.
Thus, grid is not an X-Matrix.
 

Constraints:

n == grid.length == grid[i].length
3 <= n <= 100
0 <= grid[i][j] <= 105

class Solution
{
public:
    bool checkXMatrix(vector<vector<int>> &nums)
    {
        int n = nums.size();
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(i == j || j == n - 1 - i)
                {
                    if(nums[i][j] == 0) return false;
                }
                else
                {
                    if(nums[i][j] != 0) return false;
                }
            }
        }
        return true;
    }
};


// Source https://leetcode.com/problems/count-number-of-ways-to-place-houses/

There is a street with n * 2 plots, where there are n plots on each side of the street. The plots on each side are numbered from 1 to n. On each plot, a house can be placed.

Return the number of ways houses can be placed such that no two houses are adjacent to each other on the same side of the street. 
Since the answer may be very large, return it modulo 109 + 7.

Note that if a house is placed on the ith plot on one side of the street, a house can also be placed on the ith plot on the other side of the street.

一条街道上共有 n * 2 个 地块 ，街道的两侧各有 n 个地块。每一边的地块都按从 1 到 n 编号。每个地块上都可以放置一所房子。

现要求街道同一侧不能存在两所房子相邻的情况，请你计算并返回放置房屋的方式数目。由于答案可能很大，需要对 109 + 7 取余后再返回。

注意，如果一所房子放置在这条街某一侧上的第 i 个地块，不影响在另一侧的第 i 个地块放置房子。

Example 1:

Input: n = 1
Output: 4
Explanation: 
Possible arrangements:
1. All plots are empty.
2. A house is placed on one side of the street.
3. A house is placed on the other side of the street.
4. Two houses are placed, one on each side of the street.
Example 2:


Input: n = 2
Output: 9
Explanation: The 9 possible arrangements are shown in the diagram above.
 

Constraints:

1 <= n <= 104

class Solution
{
public:
    const int mod = 1e9 + 7;
    int dp[10001];

    int recur(int n)
    {
        if(n <= 0) return 1;
        if(dp[n] != -1) return dp[n];
        int choose = recur(n - 2);
        int notChoose = recur(n - 1);
        int ans = (choose  + notChoose) % mod;
        return dp[n] = ans;
    }

    int countHousePlacements(int n)
    {
        memset(dp, -1, sizeof(dp));
        long t = recur(n);
        long ans = (t * t) % mod;
        return ans;
    }
};


// Source https://leetcode.com/problems/maximum-score-of-spliced-array/

You are given two 0-indexed integer arrays nums1 and nums2, both of length n.

You can choose two integers left and right where 0 <= left <= right < n and swap the subarray nums1[left...right] with the subarray nums2[left...right].

For example, if nums1 = [1,2,3,4,5] and nums2 = [11,12,13,14,15] and you choose left = 1 and right = 2, nums1 becomes [1,12,13,4,5] and nums2 becomes [11,2,3,14,15].
You may choose to apply the mentioned operation once or not do anything.

The score of the arrays is the maximum of sum(nums1) and sum(nums2), where sum(arr) is the sum of all the elements in the array arr.

Return the maximum possible score.

A subarray is a contiguous sequence of elements within an array. arr[left...right] denotes the subarray that contains the elements of nums between indices left and right (inclusive).

给你两个下标从 0 开始的整数数组 nums1 和 nums2 ，长度都是 n 。

你可以选择两个整数 left 和 right ，其中 0 <= left <= right < n ，接着 交换 两个子数组 nums1[left...right] 和 nums2[left...right] 。

例如，设 nums1 = [1,2,3,4,5] 和 nums2 = [11,12,13,14,15] ，整数选择 left = 1 和 right = 2，那么 nums1 会变为 [1,12,13,4,5] 而 nums2 会变为 [11,2,3,14,15] 。
你可以选择执行上述操作 一次 或不执行任何操作。

数组的 分数 取 sum(nums1) 和 sum(nums2) 中的最大值，其中 sum(arr) 是数组 arr 中所有元素之和。

返回 可能的最大分数 。

子数组 是数组中连续的一个元素序列。arr[left...right] 表示子数组包含 nums 中下标 left 和 right 之间的元素（含 下标 left 和 right 对应元素）。

Example 1:

Input: nums1 = [60,60,60], nums2 = [10,90,10]
Output: 210
Explanation: Choosing left = 1 and right = 1, we have nums1 = [60,90,60] and nums2 = [10,60,10].
The score is max(sum(nums1), sum(nums2)) = max(210, 80) = 210.
Example 2:

Input: nums1 = [20,40,20,70,30], nums2 = [50,20,50,40,20]
Output: 220
Explanation: Choosing left = 3, right = 4, we have nums1 = [20,40,20,40,20] and nums2 = [50,20,50,70,30].
The score is max(sum(nums1), sum(nums2)) = max(140, 220) = 220.
Example 3:

Input: nums1 = [7,11,13], nums2 = [1,1,1]
Output: 31
Explanation: We choose not to swap any subarray.
The score is max(sum(nums1), sum(nums2)) = max(31, 3) = 31.
 

Constraints:

n == nums1.length == nums2.length
1 <= n <= 105
1 <= nums1[i], nums2[i] <= 104

class Solution
{
public:
    int maximumsSplicedArray(vector<int> &nums1, vector<int> &nums2)
    {
        int n = nums1.size();
        long sum1 = accumulate(nums1.begin(), nums1.end(), 0LL);
        long sum2 = accumulate(nums2.begin(), nums2.end(), 0LL);
        long ans = max(sum1, sum2);
        long diff = 0;
        long mxVal = 0;
        for (int i = 0; i < n; ++i)
        {
            long t = (nums2[i] - nums1[i]);
            diff = max(diff + t , t);
            mxVal = max(mxVal, diff);
        }
        if (mxVal > 0) ans = max(ans, sum1 + mxVal);
        diff = 0;
        mxVal = 0;
        for (int i = 0; i < n; ++i)
        {
            long t = (nums1[i] - nums2[i]);
            diff = max(diff + t , t);
            mxVal = max(mxVal, diff);
        }
        if (mxVal > 0) ans = max(ans, sum2 + mxVal);
        return ans;
    }
};


// Source https://leetcode.com/problems/minimum-score-after-removals-on-a-tree/

There is an undirected connected tree with n nodes labeled from 0 to n - 1 and n - 1 edges.

You are given a 0-indexed integer array nums of length n where nums[i] represents the value of the ith node. 
You are also given a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.

Remove two distinct edges of the tree to form three connected components. For a pair of removed edges, the following steps are defined:

Get the XOR of all the values of the nodes for each of the three components respectively.
The difference between the largest XOR value and the smallest XOR value is the score of the pair.
For example, say the three components have the node values: [4,5,7], [1,9], and [3,3,3]. The three XOR values are 4 ^ 5 ^ 7 = 6, 1 ^ 9 = 8, and 3 ^ 3 ^ 3 = 3. 
The largest XOR value is 8 and the smallest XOR value is 3. The score is then 8 - 3 = 5.
Return the minimum score of any possible pair of edge removals on the given tree.

存在一棵无向连通树，树中有编号从 0 到 n - 1 的 n 个节点， 以及 n - 1 条边。

给你一个下标从 0 开始的整数数组 nums ，长度为 n ，其中 nums[i] 表示第 i 个节点的值。另给你一个二维整数数组 edges ，长度为 n - 1 ，其中 edges[i] = [ai, bi] 表示树中存在一条位于节点 ai 和 bi 之间的边。

删除树中两条 不同 的边以形成三个连通组件。对于一种删除边方案，定义如下步骤以计算其分数：

分别获取三个组件 每个 组件中所有节点值的异或值。
最大 异或值和 最小 异或值的 差值 就是这一种删除边方案的分数。
例如，三个组件的节点值分别是：[4,5,7]、[1,9] 和 [3,3,3] 。三个异或值分别是 4 ^ 5 ^ 7 = 6、1 ^ 9 = 8 和 3 ^ 3 ^ 3 = 3 。最大异或值是 8 ，最小异或值是 3 ，分数是 8 - 3 = 5 。
返回在给定树上执行任意删除边方案可能的 最小 分数。

Example 1:


Input: nums = [1,5,5,4,11], edges = [[0,1],[1,2],[1,3],[3,4]]
Output: 9
Explanation: The diagram above shows a way to make a pair of removals.
- The 1st component has nodes [1,3,4] with values [5,4,11]. Its XOR value is 5 ^ 4 ^ 11 = 10.
- The 2nd component has node [0] with value [1]. Its XOR value is 1 = 1.
- The 3rd component has node [2] with value [5]. Its XOR value is 5 = 5.
The score is the difference between the largest and smallest XOR value which is 10 - 1 = 9.
It can be shown that no other pair of removals will obtain a smaller score than 9.
Example 2:


Input: nums = [5,5,2,4,4,2], edges = [[0,1],[1,2],[5,2],[4,3],[1,3]]
Output: 0
Explanation: The diagram above shows a way to make a pair of removals.
- The 1st component has nodes [3,4] with values [4,4]. Its XOR value is 4 ^ 4 = 0.
- The 2nd component has nodes [1,0] with values [5,5]. Its XOR value is 5 ^ 5 = 0.
- The 3rd component has nodes [2,5] with values [2,2]. Its XOR value is 2 ^ 2 = 0.
The score is the difference between the largest and smallest XOR value which is 0 - 0 = 0.
We cannot obtain a smaller score than 0.
 

Constraints:

n == nums.length
3 <= n <= 1000
1 <= nums[i] <= 108
edges.length == n - 1
edges[i].length == 2
0 <= ai, bi < n
ai != bi
edges represents a valid tree.

class Solution
{
public:
    uint8_t ancestor[1001][1001];

    void dfs(int i, vector<int> adj[], vector<int> &path, int parent)
    {
        for(auto x : path) ancestor[i][x] = 1;
        path.push_back(i);
        for(auto x : adj[i])
        {
            if(x != parent)
            {
                dfs(x, adj, path, i);
            }
        }
        path.pop_back();
    }

    int calcXor(int i, vector<int> &nums, vector<int> &xorVec, vector<int> adj[], int parent, vector<int> &depthVec, int curDepth)
    {
        xorVec[i] = nums[i];
        depthVec[i] = curDepth;
        for(auto x : adj[i])
        {
            if(x != parent)
            {
                xorVec[i] ^= calcXor(x, nums, xorVec, adj, i, depthVec, curDepth + 1);
            }
        }
        return xorVec[i];
    }

    int minimumScore(vector<int>& nums, vector<vector<int>>& edges)
    {
        int n = nums.size();
        vector<int> adj[n];
        for(auto &v : edges)
        {
            adj[v[0]].push_back(v[1]);
            adj[v[1]].push_back(v[0]);
        }
        vector<int> xorVec(n, 0);
        vector<int> depthVec(n, 0);
        calcXor(0, nums, xorVec, adj, -1, depthVec, 0);
        vector<int> path;
        dfs(0, adj, path, -1);
        int ans = INT_MAX;
        int len = edges.size();
        for(int i = 0; i < len - 1; i++)
        {
            auto &ed1 = edges[i];
            if(depthVec[ed1[0]] > depthVec[ed1[1]]) swap(ed1[0], ed1[1]);
            for(int j = i + 1; j < len; j++)
            {
                auto &ed2 = edges[j];
                if(depthVec[ed2[0]] > depthVec[ed2[1]]) swap(ed2[0], ed2[1]);

                if(ancestor[ed2[1]][ed1[1]])  //ed2 is in the subtree connected by ed1
                {
                    int x1 = xorVec[ed2[1]];
                    int x2 = xorVec[ed1[1]] ^ x1;
                    int x3 = xorVec[0] ^ xorVec[ed1[1]];
                    ans = min(ans, max({x1, x2, x3}) - min({x1, x2, x3}));
                }
                else if(ancestor[ed1[1]][ed2[1]])  //ed1 is in the subtree connected by ed2
                {
                    int x1 = xorVec[ed1[1]];
                    int x2 = xorVec[ed2[1]] ^ x1;
                    int x3 = xorVec[0] ^ xorVec[ed2[1]];
                    ans = min(ans, max({x1, x2, x3}) - min({x1, x2, x3}));
                }
                else  //ed1 and ed2 connect different, independent subtrees
                {
                    int x1 = xorVec[ed2[1]];
                    int x2 = xorVec[ed1[1]];
                    int x3 = xorVec[0] ^ x2 ^ x1;
                    ans = min(ans, max({x1, x2, x3}) - min({x1, x2, x3}));
                }
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/decode-the-message/

You are given the strings key and message, which represent a cipher key and a secret message, respectively. The steps to decode message are as follows:

Use the first appearance of all 26 lowercase English letters in key as the order of the substitution table.
Align the substitution table with the regular English alphabet.
Each letter in message is then substituted using the table.
Spaces ' ' are transformed to themselves.
For example, given key = "happy boy" (actual key would have at least one instance of each letter in the alphabet), 
we have the partial substitution table of ('h' -> 'a', 'a' -> 'b', 'p' -> 'c', 'y' -> 'd', 'b' -> 'e', 'o' -> 'f').
Return the decoded message.

 

Example 1:


Input: key = "the quick brown fox jumps over the lazy dog", message = "vkbs bs t suepuv"
Output: "this is a secret"
Explanation: The diagram above shows the substitution table.
It is obtained by taking the first appearance of each letter in "the quick brown fox jumps over the lazy dog".
Example 2:


Input: key = "eljuxhpwnyrdgtqkviszcfmabo", message = "zwx hnfx lqantp mnoeius ycgk vcnjrdb"
Output: "the five boxing wizards jump quickly"
Explanation: The diagram above shows the substitution table.
It is obtained by taking the first appearance of each letter in "eljuxhpwnyrdgtqkviszcfmabo".
 

Constraints:

26 <= key.length <= 2000
key consists of lowercase English letters and ' '.
key contains every letter in the English alphabet ('a' to 'z') at least once.
1 <= message.length <= 2000
message consists of lowercase English letters and ' '.

class Solution
{
public:
    string decodeMessage(string key, string message)
    {
        char arr[256] = {0};
        char ch = 'a';
        for(auto x : key)
        {
            if(x == ' ') continue;
            if(arr[x] == 0)
            {
                arr[x] = ch;
                ch++;
            }
        }
        for (auto &x : message)
        {
            if(x == ' ') continue;
            else x = arr[x];
        }
        return message;
    }
};


// Source https://leetcode.com/problems/spiral-matrix-iv/

You are given two integers m and n, which represent the dimensions of a matrix.

You are also given the head of a linked list of integers.

Generate an m x n matrix that contains the integers in the linked list presented in spiral order (clockwise), starting from the top-left of the matrix. 
If there are remaining empty spaces, fill them with -1.

Return the generated matrix.

给你两个整数：m 和 n ，表示矩阵的维数。

另给你一个整数链表的头节点 head 。

请你生成一个大小为 m x n 的螺旋矩阵，矩阵包含链表中的所有整数。链表中的整数从矩阵 左上角 开始、顺时针 按 螺旋 顺序填充。如果还存在剩余的空格，则用 -1 填充。

返回生成的矩阵。

Example 1:


Input: m = 3, n = 5, head = [3,0,2,6,8,1,7,9,4,2,5,5,0]
Output: [[3,0,2,6,8],[5,0,-1,-1,1],[5,2,4,9,7]]
Explanation: The diagram above shows how the values are printed in the matrix.
Note that the remaining spaces in the matrix are filled with -1.
Example 2:


Input: m = 1, n = 4, head = [0,1,2]
Output: [[0,1,2,-1]]
Explanation: The diagram above shows how the values are printed from left to right in the matrix.
The last space in the matrix is set to -1.
 

Constraints:

1 <= m, n <= 105
1 <= m * n <= 105
The number of nodes in the list is in the range [1, m * n].
0 <= Node.val <= 1000

class Solution
{
public:
    vector<vector<int>> spiralMatrix(int m, int n, ListNode *head)
    {
        vector<vector<int>> mat(m, vector<int>(n, -1));
        int sr = 0, sc = 0;
        int er = m - 1;
        int ec = n - 1;
        ListNode *curr = head;
        while(sr <= er && sc <= ec && curr != NULL)
        {
            for(int i = sc; i <= ec && curr != NULL; i++)
            {
                mat[sr][i] = curr->val;
                curr = curr->next;
            }
            for(int j = sr + 1; j <= er && curr != NULL; j++)
            {
                mat[j][ec] = curr->val;
                curr = curr->next;
            }
            if(er > sr)
            {
                for(int i = ec - 1; i >= sc && curr != NULL; i--)
                {
                    mat[er][i] = curr->val;
                    curr = curr->next;
                }
            }
            if(sc < ec)
            {
                for(int j = er - 1; j > sr && curr != NULL; j--)
                {
                    mat[j][sc] = curr->val;
                    curr = curr->next;
                }
            }
            ++sr;
            --er;
            ++sc;
             --ec;
        }
        return mat;
    }
};


// Source https://leetcode.com/problems/number-of-people-aware-of-a-secret/

On day 1, one person discovers a secret.

You are given an integer delay, which means that each person will share the secret with a new person every day, starting from delay days after discovering the secret. 
You are also given an integer forget, which means that each person will forget the secret forget days after discovering it. 
A person cannot share the secret on the same day they forgot it, or on any day afterwards.

Given an integer n, return the number of people who know the secret at the end of day n. Since the answer may be very large, return it modulo 109 + 7.

在第 1 天，有一个人发现了一个秘密。

给你一个整数 delay ，表示每个人会在发现秘密后的 delay 天之后，每天 给一个新的人 分享 秘密。同时给你一个整数 forget ，表示每个人在发现秘密 forget 天之后会 忘记 这个秘密。
一个人 不能 在忘记秘密那一天及之后的日子里分享秘密。

给你一个整数 n ，请你返回在第 n 天结束时，知道秘密的人数。由于答案可能会很大，请你将结果对 109 + 7 取余 后返回。

Example 1:

Input: n = 6, delay = 2, forget = 4
Output: 5
Explanation:
Day 1: Suppose the first person is named A. (1 person)
Day 2: A is the only person who knows the secret. (1 person)
Day 3: A shares the secret with a new person, B. (2 people)
Day 4: A shares the secret with a new person, C. (3 people)
Day 5: A forgets the secret, and B shares the secret with a new person, D. (3 people)
Day 6: B shares the secret with E, and C shares the secret with F. (5 people)
Example 2:

Input: n = 4, delay = 1, forget = 3
Output: 6
Explanation:
Day 1: The first person is named A. (1 person)
Day 2: A shares the secret with B. (2 people)
Day 3: A and B share the secret with 2 new people, C and D. (4 people)
Day 4: A forgets the secret. B, C, and D share the secret with 3 new people. (6 people)
 

Constraints:

2 <= n <= 1000
1 <= delay < forget <= n

class Solution
{
public:
    int n, delay, forget;
    const int mod = 1e9 + 7;
    int dp[1001];

    int solve(int curr)
    {
        if (curr > n) return 0;
        if (curr == n) return 1;
        if(dp[curr] != -1) return dp[curr];
        long long res = 1;
        for(int i = curr + delay; i < (curr + forget) && i <= n; i++)
        {
            res = (res + solve(i)) % mod;
        }
        if ((curr + forget) <= n) res = (res - 1 + mod) % mod;
        return dp[curr] = res;
    }

    int peopleAwareOfSecret(int n, int delay, int forget)
    {
        this->n = n;
        this->delay = delay;
        this->forget = forget;
        memset(dp, -1, sizeof(dp));
        return solve(1);
    }
};


// Source https://leetcode.com/problems/number-of-increasing-paths-in-a-grid/

You are given an m x n integer matrix grid, where you can move from a cell to any adjacent cell in all 4 directions.

Return the number of strictly increasing paths in the grid such that you can start from any cell and end at any cell. Since the answer may be very large, return it modulo 109 + 7.

Two paths are considered different if they do not have exactly the same sequence of visited cells.

 

Example 1:


Input: grid = [[1,1],[3,4]]
Output: 8
Explanation: The strictly increasing paths are:
- Paths with length 1: [1], [1], [3], [4].
- Paths with length 2: [1 -> 3], [1 -> 4], [3 -> 4].
- Paths with length 3: [1 -> 3 -> 4].
The total number of paths is 4 + 3 + 1 = 8.
Example 2:

Input: grid = [[1],[2]]
Output: 3
Explanation: The strictly increasing paths are:
- Paths with length 1: [1], [2].
- Paths with length 2: [1 -> 2].
The total number of paths is 2 + 1 = 3.
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 1000
1 <= m * n <= 105
1 <= grid[i][j] <= 105

class Solution
{
public:
    int m, n;
    const int mod = 1e9 + 7;

    int solve(vector<vector<int>> &grid, int row, int col, int prev, vector<vector<int>> &dp)
    {
        if (row < 0 || row >= m || col < 0 || col >= n || grid[row][col] <= prev) return 0;
        if (dp[row][col] != -1) return dp[row][col];
        int ans = 1;
        ans = (ans + solve(grid, row + 1, col, grid[row][col], dp)) % mod;
        ans = (ans + solve(grid, row - 1, col, grid[row][col], dp)) % mod;
        ans = (ans + solve(grid, row, col + 1, grid[row][col], dp)) % mod;
        ans = (ans + solve(grid, row, col - 1, grid[row][col], dp)) % mod;
        return dp[row][col] = ans;
    }

    int countPaths(vector<vector<int>> &grid)
    {
        m = grid.size();
        n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n, -1));
        int ans = 0;
        for (int row = 0; row < m; row++)
        {
            for (int col = 0; col < n; col++)
            {
                int temp = solve(grid, row, col, -1, dp);
                ans = (ans + temp) % mod;
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/evaluate-boolean-binary-tree/

You are given the root of a full binary tree with the following properties:

Leaf nodes have either the value 0 or 1, where 0 represents False and 1 represents True.
Non-leaf nodes have either the value 2 or 3, where 2 represents the boolean OR and 3 represents the boolean AND.
The evaluation of a node is as follows:

If the node is a leaf node, the evaluation is the value of the node, i.e. True or False.
Otherwise, evaluate the node's two children and apply the boolean operation of its value with the children's evaluations.
Return the boolean result of evaluating the root node.

A full binary tree is a binary tree where each node has either 0 or 2 children.

A leaf node is a node that has zero children.

 

Example 1:


Input: root = [2,1,3,null,null,0,1]
Output: true
Explanation: The above diagram illustrates the evaluation process.
The AND node evaluates to False AND True = False.
The OR node evaluates to True OR False = True.
The root node evaluates to True, so we return true.
Example 2:

Input: root = [0]
Output: false
Explanation: The root node is a leaf node and it evaluates to false, so we return false.
 

Constraints:

The number of nodes in the tree is in the range [1, 1000].
0 <= Node.val <= 3
Every node has either 0 or 2 children.
Leaf nodes have a value of 0 or 1.
Non-leaf nodes have a value of 2 or 3.

class Solution
{
public:

    bool recur(TreeNode *root)
    {
        if(!root->left && !root->right)
        {
            return root->val;
        }
        bool lVal = recur(root->left);
        bool rVal = recur(root->right);
        int t = root->val;
        if(t == 2)
            return (lVal || rVal);
        else
            return (lVal && rVal);
    }

    bool evaluateTree(TreeNode *root)
    {
        return recur(root);
    }
};


// Source https://leetcode.com/problems/the-latest-time-to-catch-a-bus/

You are given a 0-indexed integer array buses of length n, where buses[i] represents the departure time of the ith bus. 
You are also given a 0-indexed integer array passengers of length m, where passengers[j] represents the arrival time of the jth passenger. 
All bus departure times are unique. All passenger arrival times are unique.

You are given an integer capacity, which represents the maximum number of passengers that can get on each bus.

The passengers will get on the next available bus. You can get on a bus that will depart at x minutes if you arrive at y minutes where y <= x, and the bus is not full. 
Passengers with the earliest arrival times get on the bus first.

Return the latest time you may arrive at the bus station to catch a bus. You cannot arrive at the same time as another passenger.

Note: The arrays buses and passengers are not necessarily sorted.

给你一个下标从 0 开始长度为 n 的整数数组 buses ，其中 buses[i] 表示第 i 辆公交车的出发时间。
同时给你一个下标从 0 开始长度为 m 的整数数组 passengers ，其中 passengers[j] 表示第 j 位乘客的到达时间。
所有公交车出发的时间互不相同，所有乘客到达的时间也互不相同。

给你一个整数 capacity ，表示每辆公交车 最多 能容纳的乘客数目。

每位乘客都会搭乘下一辆有座位的公交车。如果你在 y 时刻到达，公交在 x 时刻出发，满足 y <= x  且公交没有满，那么你可以搭乘这一辆公交。最早 到达的乘客优先上车。

返回你可以搭乘公交车的最晚到达公交站时间。你 不能 跟别的乘客同时刻到达。

注意：数组 buses 和 passengers 不一定是有序的。

Example 1:

Input: buses = [10,20], passengers = [2,17,18,19], capacity = 2
Output: 16
Explanation: 
The 1st bus departs with the 1st passenger. 
The 2nd bus departs with you and the 2nd passenger.
Note that you must not arrive at the same time as the passengers, which is why you must arrive before the 2nd passenger to catch the bus.
Example 2:

Input: buses = [20,30,10], passengers = [19,13,26,4,25,11,21], capacity = 2
Output: 20
Explanation: 
The 1st bus departs with the 4th passenger. 
The 2nd bus departs with the 6th and 2nd passengers.
The 3rd bus departs with the 1st passenger and you.
 

Constraints:

n == buses.length
m == passengers.length
1 <= n, m, capacity <= 105
2 <= buses[i], passengers[i] <= 109
Each element in buses is unique.
Each element in passengers is unique.

class Solution
{
public:
    int latestTimeCatchTheBus(vector<int> &buses, vector<int> &passengers, int capacity)
    {
        sort(buses.begin(), buses.end());
        sort(passengers.begin(), passengers.end());
        int n = buses.size(), m = passengers.size();
        int p = 0, last_c = 0;
        for (int i = 0; i < n; i++)
        {
            int c = 0;
            while (p < m && c < capacity && passengers[p] <= buses[i])
            {
                p++;
                c++;
            }
            if (i == n - 1) last_c = c;
        }
        int r;
        if (last_c < capacity) r = buses.back();
        else r = passengers[p - 1] - 1;
        for (int i = m - 1; i >= 0; --i)
        {
            if (passengers[i] > r) continue;
            if (passengers[i] < r) break;
            --r;
        }
        return r;
    }
};


// Source https://leetcode.com/problems/minimum-sum-of-squared-difference/

You are given two positive 0-indexed integer arrays nums1 and nums2, both of length n.

The sum of squared difference of arrays nums1 and nums2 is defined as the sum of (nums1[i] - nums2[i])2 for each 0 <= i < n.

You are also given two positive integers k1 and k2. You can modify any of the elements of nums1 by +1 or -1 at most k1 times. 
Similarly, you can modify any of the elements of nums2 by +1 or -1 at most k2 times.

Return the minimum sum of squared difference after modifying array nums1 at most k1 times and modifying array nums2 at most k2 times.

Note: You are allowed to modify the array elements to become negative integers.

 

Example 1:

Input: nums1 = [1,2,3,4], nums2 = [2,10,20,19], k1 = 0, k2 = 0
Output: 579
Explanation: The elements in nums1 and nums2 cannot be modified because k1 = 0 and k2 = 0. 
The sum of square difference will be: (1 - 2)2 + (2 - 10)2 + (3 - 20)2 + (4 - 19)2 = 579.
Example 2:

Input: nums1 = [1,4,10,12], nums2 = [5,8,6,9], k1 = 1, k2 = 1
Output: 43
Explanation: One way to obtain the minimum sum of square difference is: 
- Increase nums1[0] once.
- Increase nums2[2] once.
The minimum of the sum of square difference will be: 
(2 - 5)2 + (4 - 8)2 + (10 - 7)2 + (12 - 9)2 = 43.
Note that, there are other ways to obtain the minimum of the sum of square difference, but there is no way to obtain a sum smaller than 43.
 

Constraints:

n == nums1.length == nums2.length
1 <= n <= 105
0 <= nums1[i], nums2[i] <= 105
0 <= k1, k2 <= 109

class Solution
{
public:
    int arr[100001];

    long long minSumSquareDiff(vector<int> &nums1, vector<int> &nums2, int k1, int k2)
    {
        int n = nums1.size();
        int maxdiff = 0;
        for(int i = 0; i < n; i++)
        {
            int diff = abs(nums1[i] - nums2[i]);
            arr[diff]++;
            maxdiff = max(maxdiff, diff);
        }
        int k = k1 + k2;
        long long sum = 0;
        long diff = maxdiff;
        for(; diff > 0 && k > 0; --diff)
        {
            if (arr[diff] == 0) continue;
            if(arr[diff] < k)
            {
                k -= arr[diff];
                arr[diff - 1] += arr[diff];
            }
            else
            {
                arr[diff - 1] += k;
                sum += (diff * diff * (arr[diff] - k));
                k = 0;
            }
        }
        for (; diff > 0; --diff)
        {
            if (arr[diff] == 0) continue;
            sum += (diff * diff * arr[diff]);
        }
        return sum;
    }
};


// Source https://leetcode.com/problems/subarray-with-elements-greater-than-varying-threshold/

You are given an integer array nums and an integer threshold.

Find any subarray of nums of length k such that every element in the subarray is greater than threshold / k.

Return the size of any such subarray. If there is no such subarray, return -1.

A subarray is a contiguous non-empty sequence of elements within an array.

给你一个整数数组 nums 和一个整数 threshold 。

找到长度为 k 的 nums 子数组，满足数组中 每个 元素都 大于 threshold / k 。

请你返回满足要求的 任意 子数组的 大小 。如果没有这样的子数组，返回 -1 。

子数组 是数组中一段连续非空的元素序列。

Example 1:

Input: nums = [1,3,4,3,1], threshold = 6
Output: 3
Explanation: The subarray [3,4,3] has a size of 3, and every element is greater than 6 / 3 = 2.
Note that this is the only valid subarray.
Example 2:

Input: nums = [6,5,6,5,8], threshold = 7
Output: 1
Explanation: The subarray [8] has a size of 1, and 8 > 7 / 1 = 7. So 1 is returned.
Note that the subarray [6,5] has a size of 2, and every element is greater than 7 / 2 = 3.5. 
Similarly, the subarrays [6,5,6], [6,5,6,5], [6,5,6,5,8] also satisfy the given conditions.
Therefore, 2, 3, 4, or 5 may also be returned.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i], threshold <= 109

class Solution
{
public:
    int validSubarraySize(vector<int> &nums, int threshold)
    {
        int n = nums.size();
        vector<int> left_smaller(n, -1);
        stack<int> lst;
        for(int i = 0; i < n; i++)
        {
            while(!lst.empty() && nums[lst.top()] >= nums[i]) lst.pop();
            if(!lst.empty()) left_smaller[i] = lst.top();
            lst.push(i);
        }
        vector<int> right_smaller(n, n);
        stack<int> rst;
        for(int i = n - 1; i >= 0; i--)
        {
            while(!rst.empty() && nums[rst.top()] >= nums[i]) rst.pop();
            if(!rst.empty()) right_smaller[i] = rst.top();
            rst.push(i);
        }
        double t = threshold;
        for(int i = 0; i < n; i++)
        {
            int k = right_smaller[i] - left_smaller[i] - 1;
            double val = t / k;
            if(nums[i] > val) return k;
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/minimum-amount-of-time-to-fill-cups/

You have a water dispenser that can dispense cold, warm, and hot water. Every second, you can either fill up 2 cups with different types of water, or 1 cup of any type of water.

You are given a 0-indexed integer array amount of length 3 where amount[0], amount[1], and amount[2] denote the number of cold, warm, and hot water cups you need to fill respectively. 
Return the minimum number of seconds needed to fill up all the cups.

现有一台饮水机，可以制备冷水、温水和热水。每秒钟，可以装满 2 杯 不同 类型的水或者 1 杯任意类型的水。

给你一个下标从 0 开始、长度为 3 的整数数组 amount ，其中 amount[0]、amount[1] 和 amount[2] 分别表示需要装满冷水、温水和热水的杯子数量。返回装满所有杯子所需的 最少 秒数。

Example 1:

Input: amount = [1,4,2]
Output: 4
Explanation: One way to fill up the cups is:
Second 1: Fill up a cold cup and a warm cup.
Second 2: Fill up a warm cup and a hot cup.
Second 3: Fill up a warm cup and a hot cup.
Second 4: Fill up a warm cup.
It can be proven that 4 is the minimum number of seconds needed.
Example 2:

Input: amount = [5,4,4]
Output: 7
Explanation: One way to fill up the cups is:
Second 1: Fill up a cold cup, and a hot cup.
Second 2: Fill up a cold cup, and a warm cup.
Second 3: Fill up a cold cup, and a warm cup.
Second 4: Fill up a warm cup, and a hot cup.
Second 5: Fill up a cold cup, and a hot cup.
Second 6: Fill up a cold cup, and a warm cup.
Second 7: Fill up a hot cup.
Example 3:

Input: amount = [5,0,0]
Output: 5
Explanation: Every second, we fill up a cold cup.
 

Constraints:

amount.length == 3
0 <= amount[i] <= 100

class Solution
{
public:
    int fillCups(vector<int>& amount)
    {
        sort(amount.begin(), amount.end());
        int mxVal = amount[2];
        int rem = amount[0] + amount[1];
        if (rem <= mxVal) return mxVal;
        int diff = (rem - mxVal);
        int t = diff / 2;
        if (diff % 2) ++t;
        return t + mxVal;
    }
};


// Source https://leetcode.com/problems/smallest-number-in-infinite-set/

You have a set which contains all positive integers [1, 2, 3, 4, 5, ...].

Implement the SmallestInfiniteSet class:

SmallestInfiniteSet() Initializes the SmallestInfiniteSet object to contain all positive integers.
int popSmallest() Removes and returns the smallest integer contained in the infinite set.
void addBack(int num) Adds a positive integer num back into the infinite set, if it is not already in the infinite set.
 

Example 1:

Input
["SmallestInfiniteSet", "addBack", "popSmallest", "popSmallest", "popSmallest", "addBack", "popSmallest", "popSmallest", "popSmallest"]
[[], [2], [], [], [], [1], [], [], []]
Output
[null, null, 1, 2, 3, null, 1, 4, 5]

Explanation
SmallestInfiniteSet smallestInfiniteSet = new SmallestInfiniteSet();
smallestInfiniteSet.addBack(2);    // 2 is already in the set, so no change is made.
smallestInfiniteSet.popSmallest(); // return 1, since 1 is the smallest number, and remove it from the set.
smallestInfiniteSet.popSmallest(); // return 2, and remove it from the set.
smallestInfiniteSet.popSmallest(); // return 3, and remove it from the set.
smallestInfiniteSet.addBack(1);    // 1 is added back to the set.
smallestInfiniteSet.popSmallest(); // return 1, since 1 was added back to the set and
                                   // is the smallest number, and remove it from the set.
smallestInfiniteSet.popSmallest(); // return 4, and remove it from the set.
smallestInfiniteSet.popSmallest(); // return 5, and remove it from the set.
 

Constraints:

1 <= num <= 1000
At most 1000 calls will be made in total to popSmallest and addBack.

class SmallestInfiniteSet
{
public:
    set<int> st;

    SmallestInfiniteSet()
    {
        for(int i = 1; i <= 1010; i++) st.insert(i);
    }

    int popSmallest()
    {
        int x = *st.begin();
        st.erase(x);
        return x;
    }

    void addBack(int num)
    {
        st.insert(num);
    }
};


// Source https://leetcode.com/problems/move-pieces-to-obtain-a-string/

You are given two strings start and target, both of length n. Each string consists only of the characters 'L', 'R', and '_' where:

The characters 'L' and 'R' represent pieces, where a piece 'L' can move to the left only if there is a blank space directly to its left, 
and a piece 'R' can move to the right only if there is a blank space directly to its right.
The character '_' represents a blank space that can be occupied by any of the 'L' or 'R' pieces.
Return true if it is possible to obtain the string target by moving the pieces of the string start any number of times. Otherwise, return false.

给你两个字符串 start 和 target ，长度均为 n 。每个字符串 仅 由字符 'L'、'R' 和 '_' 组成，其中：

字符 'L' 和 'R' 表示片段，其中片段 'L' 只有在其左侧直接存在一个 空位 时才能向 左 移动，而片段 'R' 只有在其右侧直接存在一个 空位 时才能向 右 移动。
字符 '_' 表示可以被 任意 'L' 或 'R' 片段占据的空位。
如果在移动字符串 start 中的片段任意次之后可以得到字符串 target ，返回 true ；否则，返回 false 。

Example 1:

Input: start = "_L__R__R_", target = "L______RR"
Output: true
Explanation: We can obtain the string target from start by doing the following moves:
- Move the first piece one step to the left, start becomes equal to "L___R__R_".
- Move the last piece one step to the right, start becomes equal to "L___R___R".
- Move the second piece three steps to the right, start becomes equal to "L______RR".
Since it is possible to get the string target from start, we return true.
Example 2:

Input: start = "R_L_", target = "__LR"
Output: false
Explanation: The 'R' piece in the string start can move one step to the right to obtain "_RL_".
After that, no pieces can move anymore, so it is impossible to obtain the string target from start.
Example 3:

Input: start = "_R", target = "R_"
Output: false
Explanation: The piece in the string start can move only to the right, so it is impossible to obtain the string target from start.
 

Constraints:

n == start.length == target.length
1 <= n <= 105
start and target consist of the characters 'L', 'R', and '_'.

class Solution
{
public:
    bool canChange(string start, string target)
    {
        int n = start.length();
        string s1, s2;
        s1.reserve(30000);
        s2.reserve(30000);
        for(int i = 0; i < n; i++)
        {
            if(start[i] != '_') s1.push_back(start[i]);
            if(target[i] != '_') s2.push_back(target[i]);
        }
        if(s1 != s2) return false;
        int l1 = 0, l2 = 0, r1 = 0, r2 = 0;
        for(int i = 0.; i < n; i++)
        {
            if(start[i] == 'L') l1++;
            if(start[i] == 'R') r1++;

            if(target[i] == 'L') l2++;
            if(target[i] == 'R') r2++;

            if(l1 > l2) return false;
            if(r1 < r2) return false;
        }
        return true;
    }
};


// Source https://leetcode.com/problems/count-the-number-of-ideal-arrays/

You are given two integers n and maxValue, which are used to describe an ideal array.

A 0-indexed integer array arr of length n is considered ideal if the following conditions hold:

Every arr[i] is a value from 1 to maxValue, for 0 <= i < n.
Every arr[i] is divisible by arr[i - 1], for 0 < i < n.
Return the number of distinct ideal arrays of length n. Since the answer may be very large, return it modulo 109 + 7.

Example 1:

Input: n = 2, maxValue = 5
Output: 10
Explanation: The following are the possible ideal arrays:
- Arrays starting with the value 1 (5 arrays): [1,1], [1,2], [1,3], [1,4], [1,5]
- Arrays starting with the value 2 (2 arrays): [2,2], [2,4]
- Arrays starting with the value 3 (1 array): [3,3]
- Arrays starting with the value 4 (1 array): [4,4]
- Arrays starting with the value 5 (1 array): [5,5]
There are a total of 5 + 2 + 1 + 1 + 1 = 10 distinct ideal arrays.

Example 2:

Input: n = 5, maxValue = 3
Output: 11
Explanation: The following are the possible ideal arrays:
- Arrays starting with the value 1 (9 arrays): 
   - With no other distinct values (1 array): [1,1,1,1,1] 
   - With 2nd distinct value 2 (4 arrays): [1,1,1,1,2], [1,1,1,2,2], [1,1,2,2,2], [1,2,2,2,2]
   - With 2nd distinct value 3 (4 arrays): [1,1,1,1,3], [1,1,1,3,3], [1,1,3,3,3], [1,3,3,3,3]
- Arrays starting with the value 2 (1 array): [2,2,2,2,2]
- Arrays starting with the value 3 (1 array): [3,3,3,3,3]
There are a total of 9 + 1 + 1 = 11 distinct ideal arrays.

Constraints:

2 <= n <= 104
1 <= maxValue <= 104

class Combination
{
public:
    using ll = long long;
    Combination(int size) : factorial(size)
    {
        factorial[0] = 1;
        for(int i = 1; i < size; i++) factorial[i] = i * factorial[i - 1] % mod;
    }

    ll power(ll a, ll b)
    {
        ll x = 1, y = a % mod;
        while (b > 0)
        {
            if (b % 2) x = x * y % mod;
            y = y * y % mod;
            b /= 2;
        }
        return x % mod;
    }

    ll modular_inverse(ll n)
    {
        return power(n, mod - 2);
    }

    ll nCr(ll n, ll k)
    {
        return factorial[n] * modular_inverse(factorial[k] * factorial[n - k]) % mod;
    }

    vector<ll> factorial;
    static constexpr ll mod = 1e9 + 7;
};

class Solution
{
public:
    int idealArrays(int n, int maxValue)
    {
        init();
        Combination cb(20001);
        long res = 0;
        for (int i = 1; i <= maxValue; ++i)
        {
            auto factors = numFactor(i);
            long cnt = 1;
            for(auto i : factors)
            {
                cnt *= cb.nCr(i + n - 1, n - 1);
                cnt %= mod;
            }
            res = (res + cnt) % mod;
        }
        return res;
    }

    void init()
    {
        for(int i = 2; i < 110; i++)
        {
            bool flag = true;
            for (auto val : vprime)
            {
                if (i % val == 0) { flag = false; break; }
            }
            if (flag) vprime.push_back(i);
        }
    }

    vector<int> numFactor(int x)
    {
        vector<int> res;
        int sq = 1 + sqrt(x);
        for(auto p : vprime)
        {
            if(p > sq) break;
            int cnt = 0;
            while(x % p == 0)
            {
                x /= p;
                cnt++;
            }
            if(cnt > 0) res.push_back(cnt);
        }
        if(x > 1) res.push_back(1);
        return res;
    }

    vector<int> vprime;
    const long mod = 1e9 + 7;
};


// Source https://leetcode.com/problems/maximum-number-of-pairs-in-array/

You are given a 0-indexed integer array nums. In one operation, you may do the following:

Choose two integers in nums that are equal.
Remove both integers from nums, forming a pair.
The operation is done on nums as many times as possible.

Return a 0-indexed integer array answer of size 2 where answer[0] is the number of pairs that are formed 
and answer[1] is the number of leftover integers in nums after doing the operation as many times as possible.

 

Example 1:

Input: nums = [1,3,2,1,3,2,2]
Output: [3,1]
Explanation:
Form a pair with nums[0] and nums[3] and remove them from nums. Now, nums = [3,2,3,2,2].
Form a pair with nums[0] and nums[2] and remove them from nums. Now, nums = [2,2,2].
Form a pair with nums[0] and nums[1] and remove them from nums. Now, nums = [2].
No more pairs can be formed. A total of 3 pairs have been formed, and there is 1 number leftover in nums.
Example 2:

Input: nums = [1,1]
Output: [1,0]
Explanation: Form a pair with nums[0] and nums[1] and remove them from nums. Now, nums = [].
No more pairs can be formed. A total of 1 pair has been formed, and there are 0 numbers leftover in nums.
Example 3:

Input: nums = [0]
Output: [0,1]
Explanation: No pairs can be formed, and there is 1 number leftover in nums.
 

Constraints:

1 <= nums.length <= 100
0 <= nums[i] <= 100

class Solution
{
public:
    vector<int> numberOfPairs(vector<int> &nums)
    {
        int freq[101] = {0};
        for (auto val : nums) freq[val]++;
        int cnt0 = 0, cnt1 = 0;
        for (int i = 0; i <= 100; ++i)
        {
            if (freq[i] == 0) continue;
            cnt0 += freq[i] / 2;
            cnt1 += freq[i] % 2;
        }
        return {cnt0, cnt1};
    }
};


// Source https://leetcode.com/problems/max-sum-of-a-pair-with-equal-sum-of-digits/

You are given a 0-indexed array nums consisting of positive integers. You can choose two indices i and j, such that i != j, and the sum of digits of the number nums[i] is equal to that of nums[j].

Return the maximum value of nums[i] + nums[j] that you can obtain over all possible indices i and j that satisfy the conditions.

 

Example 1:

Input: nums = [18,43,36,13,7]
Output: 54
Explanation: The pairs (i, j) that satisfy the conditions are:
- (0, 2), both numbers have a sum of digits equal to 9, and their sum is 18 + 36 = 54.
- (1, 4), both numbers have a sum of digits equal to 7, and their sum is 43 + 7 = 50.
So the maximum sum that we can obtain is 54.
Example 2:

Input: nums = [10,12,19,14]
Output: -1
Explanation: There are no two numbers that satisfy the conditions, so we return -1.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 109

class Solution
{
public:

    int helper(int x)
    {
        int sum = 0;
        while(x > 0)
        {
            sum += x % 10;
            x = x / 10;
        }
        return sum;
    }

    int maximumSum(vector<int> &nums)
    {
        unordered_map<int, int> mp;
        int ans = 0;
        for(int x : nums)
        {
            int t = helper(x);
            if(mp.find(t) == mp.end())
            {
                mp[t] = x;
            }
            else
            {
                ans = max(ans, mp[t] + x);
                mp[t] = max(mp[t], x);
            }
        }
        return ans == 0 ? - 1 : ans;
    }
};


// Source https://leetcode.com/problems/query-kth-smallest-trimmed-number/

You are given a 0-indexed array of strings nums, where each string is of equal length and consists of only digits.

You are also given a 0-indexed 2D integer array queries where queries[i] = [ki, trimi]. For each queries[i], you need to:

Trim each number in nums to its rightmost trimi digits.
Determine the index of the kith smallest trimmed number in nums. If two trimmed numbers are equal, the number with the lower index is considered to be smaller.
Reset each number in nums to its original length.
Return an array answer of the same length as queries, where answer[i] is the answer to the ith query.

Note:

To trim to the rightmost x digits means to keep removing the leftmost digit, until only x digits remain.
Strings in nums may contain leading zeros.
 
给你一个下标从 0 开始的字符串数组 nums ，其中每个字符串 长度相等 且只包含数字。

再给你一个下标从 0 开始的二维整数数组 queries ，其中 queries[i] = [ki, trimi] 。对于每个 queries[i] ，你需要：

将 nums 中每个数字 裁剪 到剩下 最右边 trimi 个数位。
在裁剪过后的数字中，找到 nums 中第 ki 小数字对应的 下标 。如果两个裁剪后数字一样大，那么下标 更小 的数字视为更小的数字。
将 nums 中每个数字恢复到原本字符串。
请你返回一个长度与 queries 相等的数组 answer，其中 answer[i]是第 i 次查询的结果。

提示：

裁剪到剩下 x 个数位的意思是不断删除最左边的数位，直到剩下 x 个数位。
nums 中的字符串可能会有前导 0 。

Example 1:

Input: nums = ["102","473","251","814"], queries = [[1,1],[2,3],[4,2],[1,2]]
Output: [2,2,1,0]
Explanation:
1. After trimming to the last digit, nums = ["2","3","1","4"]. The smallest number is 1 at index 2.
2. Trimmed to the last 3 digits, nums is unchanged. The 2nd smallest number is 251 at index 2.
3. Trimmed to the last 2 digits, nums = ["02","73","51","14"]. The 4th smallest number is 73.
4. Trimmed to the last 2 digits, the smallest number is 2 at index 0.
   Note that the trimmed number "02" is evaluated as 2.
Example 2:

Input: nums = ["24","37","96","04"], queries = [[2,1],[2,2]]
Output: [3,0]
Explanation:
1. Trimmed to the last digit, nums = ["4","7","6","4"]. The 2nd smallest number is 4 at index 3.
   There are two occurrences of 4, but the one at index 0 is considered smaller than the one at index 3.
2. Trimmed to the last 2 digits, nums is unchanged. The 2nd smallest number is 24.
 

Constraints:

1 <= nums.length <= 100
1 <= nums[i].length <= 100
nums[i] consists of only digits.
All nums[i].length are equal.
1 <= queries.length <= 100
queries[i].length == 2
1 <= ki <= nums.length
1 <= trimi <= nums[i].length

class Solution
{
public:
    vector<int> smallestTrimmedNumbers(vector<string> &nums, vector<vector<int>> &queries)
    {
        int n = nums.size();
        int len = nums[0].size();
        int m = queries.size();
        vector<int> res(m);
        for (int i = 0; i < m; i++)
        {
            int k = queries[i][0];
            int l = queries[i][1];
            vector<pair<string_view, int>> newNums(n);
            for (int i = 0; i < n; i++)
            {
                newNums[i] = pair<string_view, int>(string_view(nums[i].c_str() + len - l, l), i);
            }
            sort(newNums.begin(), newNums.end(), [] (auto &a, auto &b)
            {
                if (a.first == b.first) return a.second < b.second;
                return a.first < b.first;
            });
            res[i] = newNums[k - 1].second;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/minimum-deletions-to-make-array-divisible/

You are given two positive integer arrays nums and numsDivide. You can delete any number of elements from nums.

Return the minimum number of deletions such that the smallest element in nums divides all the elements of numsDivide. If this is not possible, return -1.

Note that an integer x divides y if y % x == 0.

 

Example 1:

Input: nums = [2,3,2,4,3], numsDivide = [9,6,9,3,15]
Output: 2
Explanation: 
The smallest element in [2,3,2,4,3] is 2, which does not divide all the elements of numsDivide.
We use 2 deletions to delete the elements in nums that are equal to 2 which makes nums = [3,4,3].
The smallest element in [3,4,3] is 3, which divides all the elements of numsDivide.
It can be shown that 2 is the minimum number of deletions needed.
Example 2:

Input: nums = [4,3,6], numsDivide = [8,2,6,10]
Output: -1
Explanation: 
We want the smallest element in nums to divide all the elements of numsDivide.
There is no way to delete elements from nums to allow this.
 

Constraints:

1 <= nums.length, numsDivide.length <= 105
1 <= nums[i], numsDivide[i] <= 109

class Solution
{
public:
    int minOperations(vector<int> &nums, vector<int> &numsDivide)
    {
        int t = 0;
        for(int val : numsDivide)
        {
            t = __gcd(val, t);
        }
        int n = nums.size();
        sort(nums.begin(), nums.end());
        for(int j = 0; j < n && nums[j] <= t; j++)
        {
            if(t % nums[j] == 0) return j;
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/best-poker-hand/

You are given an integer array ranks and a character array suits. You have 5 cards where the ith card has a rank of ranks[i] and a suit of suits[i].

The following are the types of poker hands you can make from best to worst:

"Flush": Five cards of the same suit.
"Three of a Kind": Three cards of the same rank.
"Pair": Two cards of the same rank.
"High Card": Any single card.
Return a string representing the best type of poker hand you can make with the given cards.

Note that the return values are case-sensitive.

给你一个整数数组 ranks 和一个字符数组 suit 。你有 5 张扑克牌，第 i 张牌大小为 ranks[i] ，花色为 suits[i] 。

下述是从好到坏你可能持有的 手牌类型 ：

"Flush"：同花，五张相同花色的扑克牌。
"Three of a Kind"：三条，有 3 张大小相同的扑克牌。
"Pair"：对子，两张大小一样的扑克牌。
"High Card"：高牌，五张大小互不相同的扑克牌。
请你返回一个字符串，表示给定的 5 张牌中，你能组成的 最好手牌类型 。

注意：返回的字符串 大小写 需与题目描述相同。


Example 1:

Input: ranks = [13,2,3,1,9], suits = ["a","a","a","a","a"]
Output: "Flush"
Explanation: The hand with all the cards consists of 5 cards with the same suit, so we have a "Flush".
Example 2:

Input: ranks = [4,4,2,4,4], suits = ["d","a","a","b","c"]
Output: "Three of a Kind"
Explanation: The hand with the first, second, and fourth card consists of 3 cards with the same rank, so we have a "Three of a Kind".
Note that we could also make a "Pair" hand but "Three of a Kind" is a better hand.
Also note that other cards could be used to make the "Three of a Kind" hand.
Example 3:

Input: ranks = [10,10,2,12,9], suits = ["a","b","c","a","d"]
Output: "Pair"
Explanation: The hand with the first and second card consists of 2 cards with the same rank, so we have a "Pair".
Note that we cannot make a "Flush" or a "Three of a Kind".
 

Constraints:

ranks.length == suits.length == 5
1 <= ranks[i] <= 13
'a' <= suits[i] <= 'd'
No two cards have the same rank and suit.

class Solution
{
public:
    string bestHand(vector<int> &ranks, vector<char> &suits)
    {
        uint8_t rankArr[16] = {0};
        uint8_t suitArr[16] = {0};
        bool rank3 = false, rank2 = false;
        for (auto val : ranks)
        {
            int t = rankArr[val];
            ++t;
            if (t >= 3) rank3 = true;
            if (t >= 2) rank2 = true;
            rankArr[val] = t;
        }
        bool suit5 = false;
        for (auto ch : suits)
        {
            int val = ch - 'a';
            int t = suitArr[val];
            ++t;
            if (t >= 5) suit5 = true;
            suitArr[val] = t;
        }
        if (suit5) return "Flush";
        if (rank3) return "Three of a Kind";
        if (rank2) return "Pair";
        return "High Card";
    }
};


// Source https://leetcode.com/problems/number-of-zero-filled-subarrays/

Given an integer array nums, return the number of subarrays filled with 0.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:

Input: nums = [1,3,0,0,2,0,0,4]
Output: 6
Explanation: 
There are 4 occurrences of [0] as a subarray.
There are 2 occurrences of [0,0] as a subarray.
There is no occurrence of a subarray with a size more than 2 filled with 0. Therefore, we return 6.
Example 2:

Input: nums = [0,0,0,2,0,0]
Output: 9
Explanation:
There are 5 occurrences of [0] as a subarray.
There are 3 occurrences of [0,0] as a subarray.
There is 1 occurrence of [0,0,0] as a subarray.
There is no occurrence of a subarray with a size more than 3 filled with 0. Therefore, we return 9.
Example 3:

Input: nums = [2,10,2019]
Output: 0
Explanation: There is no subarray filled with 0. Therefore, we return 0.
 

Constraints:

1 <= nums.length <= 105
-109 <= nums[i] <= 109

class Solution
{
public:
    long long zeroFilledSubarray(vector<int>& nums)
    {
        int n = nums.size();
        long long res = 0;
        long long cnt = 0;
        for(int i = 0; i < n; i++)
        {
            if (nums[i] != 0) { cnt = 0; continue; }
            ++cnt;
            res += cnt;
        }
        return res;
    }
};


// Source https://leetcode.com/problems/design-a-number-container-system/

Design a number container system that can do the following:

Insert or Replace a number at the given index in the system.
Return the smallest index for the given number in the system.
Implement the NumberContainers class:

NumberContainers() Initializes the number container system.
void change(int index, int number) Fills the container at index with the number. If there is already a number at that index, replace it.
int find(int number) Returns the smallest index for the given number, or -1 if there is no index that is filled by number in the system.
 

Example 1:

Input
["NumberContainers", "find", "change", "change", "change", "change", "find", "change", "find"]
[[], [10], [2, 10], [1, 10], [3, 10], [5, 10], [10], [1, 20], [10]]
Output
[null, -1, null, null, null, null, 1, null, 2]

Explanation
NumberContainers nc = new NumberContainers();
nc.find(10); // There is no index that is filled with number 10. Therefore, we return -1.
nc.change(2, 10); // Your container at index 2 will be filled with number 10.
nc.change(1, 10); // Your container at index 1 will be filled with number 10.
nc.change(3, 10); // Your container at index 3 will be filled with number 10.
nc.change(5, 10); // Your container at index 5 will be filled with number 10.
nc.find(10); // Number 10 is at the indices 1, 2, 3, and 5. Since the smallest index that is filled with 10 is 1, we return 1.
nc.change(1, 20); // Your container at index 1 will be filled with number 20. Note that index 1 was filled with 10 and then replaced with 20. 
nc.find(10); // Number 10 is at the indices 2, 3, and 5. The smallest index that is filled with 10 is 2. Therefore, we return 2.
 

Constraints:

1 <= index, number <= 109
At most 105 calls will be made in total to change and find.

class NumberContainers
{
public:
    map<int, int>mp;

    NumberContainers()
    {
        mp.clear();
    }

    void change(int index, int number)
    {
        mp[index] = number;
    }

    int find(int number)
    {
        for(auto p : mp)
        {
            if(p.second == number)
            {
                return p.first;
            }
        }
        return -1;
    }
};


// Source https://leetcode.com/problems/shortest-impossible-sequence-of-rolls/

You are given an integer array rolls of length n and an integer k. You roll a k sided dice numbered from 1 to k, n times, where the result of the ith roll is rolls[i].

Return the length of the shortest sequence of rolls that cannot be taken from rolls.

A sequence of rolls of length len is the result of rolling a k sided dice len times.

Note that the sequence taken does not have to be consecutive as long as it is in order.

给你一个长度为 n 的整数数组 rolls 和一个整数 k 。你扔一个 k 面的骰子 n 次，骰子的每个面分别是 1 到 k ，其中第 i 次扔得到的数字是 rolls[i] 。

请你返回 无法 从 rolls 中得到的 最短 骰子子序列的长度。

扔一个 k 面的骰子 len 次得到的是一个长度为 len 的 骰子子序列 。

注意 ，子序列只需要保持在原数组中的顺序，不需要连续。

4 3 2 1 4 3 2 1
1 2 3 4 1 2 3 4

Example 1:

Input: rolls = [4,2,1,2,3,3,2,4,1], k = 4
Output: 3
Explanation: Every sequence of rolls of length 1, [1], [2], [3], [4], can be taken from rolls.
Every sequence of rolls of length 2, [1, 1], [1, 2], ..., [4, 4], can be taken from rolls.
The sequence [1, 4, 2] cannot be taken from rolls, so we return 3.
Note that there are other sequences that cannot be taken from rolls.
Example 2:

Input: rolls = [1,1,2,2], k = 2
Output: 2
Explanation: Every sequence of rolls of length 1, [1], [2], can be taken from rolls.
The sequence [2, 1] cannot be taken from rolls, so we return 2.
Note that there are other sequences that cannot be taken from rolls but [2, 1] is the shortest.
Example 3:

Input: rolls = [1,1,3,2,2,2,3,3], k = 4
Output: 1
Explanation: The sequence [4] cannot be taken from rolls, so we return 1.
Note that there are other sequences that cannot be taken from rolls but [4] is the shortest.
 

Constraints:

n == rolls.length
1 <= n <= 105
1 <= rolls[i] <= k <= 105

class Solution
{
public:
    int shortestSequence(vector<int> &rolls, int k)
    {
        unordered_map<int, int> mp;
        int ans = 1;
        for (auto r : rolls)
        {
            mp[r]++;
            if(mp.size() == k)
            {
                ans++;
                mp.clear();
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/first-letter-to-appear-twice/

Given a string s consisting of lowercase English letters, return the first letter to appear twice.

Note:

A letter a appears twice before another letter b if the second occurrence of a is before the second occurrence of b.
s will contain at least one letter that appears twice.
 

Example 1:

Input: s = "abccbaacz"
Output: "c"
Explanation:
The letter 'a' appears on the indexes 0, 5 and 6.
The letter 'b' appears on the indexes 1 and 4.
The letter 'c' appears on the indexes 2, 3 and 7.
The letter 'z' appears on the index 8.
The letter 'c' is the first letter to appear twice, because out of all the letters the index of its second occurrence is the smallest.
Example 2:

Input: s = "abcdd"
Output: "d"
Explanation:
The only letter that appears twice is 'd' so we return 'd'.
 

Constraints:

2 <= s.length <= 100
s consists of lowercase English letters.
s has at least one repeated letter.

class Solution
{
public:
    char repeatedCharacter(string s)
    {
        int freq[256] = {0};
        for(auto ch : s)
        {
            if(++freq[ch] > 1)
                return ch;
        }
        return 'a';
    }
};


// Source https://leetcode.com/problems/equal-row-and-column-pairs/

Given a 0-indexed n x n integer matrix grid, return the number of pairs (Ri, Cj) such that row Ri and column Cj are equal.

A row and column pair is considered equal if they contain the same elements in the same order (i.e. an equal array).

 

Example 1:


Input: grid = [[3,2,1],[1,7,6],[2,7,7]]
Output: 1
Explanation: There is 1 equal row and column pair:
- (Row 2, Column 1): [2,7,7]
Example 2:


Input: grid = [[3,1,2,2],[1,4,4,5],[2,4,2,2],[2,4,2,2]]
Output: 3
Explanation: There are 3 equal row and column pairs:
- (Row 0, Column 0): [3,1,2,2]
- (Row 2, Column 2): [2,4,2,2]
- (Row 3, Column 2): [2,4,2,2]
 

Constraints:

n == grid.length == grid[i].length
1 <= n <= 200
1 <= grid[i][j] <= 105

class Solution
{
public:
    int equalPairs(vector<vector<int>> &grid)
    {
        map<vector<int>, int> mp;
        for(auto &v : grid)
        {
            mp[v]++;
        }
        int n = grid.size();
        vector<int> v;
        v.reserve(n);
        int res = 0;
        for(int j = 0; j < n; j++)
        {
            v.clear();
            for(int k = 0; k < n; k++)
            {
                v.push_back(grid[k][j]);
            }
            res += mp[v];
        }
        return res;
    }
};


// Source https://leetcode.com/problems/design-a-food-rating-system/

Design a food rating system that can do the following:

Modify the rating of a food item listed in the system.
Return the highest-rated food item for a type of cuisine in the system.
Implement the FoodRatings class:

FoodRatings(String[] foods, String[] cuisines, int[] ratings) Initializes the system. The food items are described by foods, cuisines and ratings, all of which have a length of n.
foods[i] is the name of the ith food,
cuisines[i] is the type of cuisine of the ith food, and
ratings[i] is the initial rating of the ith food.
void changeRating(String food, int newRating) Changes the rating of the food item with the name food.
String highestRated(String cuisine) Returns the name of the food item that has the highest rating for the given type of cuisine. 
If there is a tie, return the item with the lexicographically smaller name.
Note that a string x is lexicographically smaller than string y if x comes before y in dictionary order, that is, either x is a prefix of y, or if i is the first position such that x[i] != y[i], 
then x[i] comes before y[i] in alphabetic order.

设计一个支持下述操作的食物评分系统：

修改 系统中列出的某种食物的评分。
返回系统中某一类烹饪方式下评分最高的食物。
实现 FoodRatings 类：

FoodRatings(String[] foods, String[] cuisines, int[] ratings) 初始化系统。食物由 foods、cuisines 和 ratings 描述，长度均为 n 。
foods[i] 是第 i 种食物的名字。
cuisines[i] 是第 i 种食物的烹饪方式。
ratings[i] 是第 i 种食物的最初评分。
void changeRating(String food, int newRating) 修改名字为 food 的食物的评分。
String highestRated(String cuisine) 返回指定烹饪方式 cuisine 下评分最高的食物的名字。如果存在并列，返回 字典序较小 的名字。
注意，字符串 x 的字典序比字符串 y 更小的前提是：x 在字典中出现的位置在 y 之前，也就是说，要么 x 是 y 的前缀，或者在满足 x[i] != y[i] 的第一个位置 i 处，x[i] 在字母表中出现的位置在 y[i] 之前。

Example 1:

Input
["FoodRatings", "highestRated", "highestRated", "changeRating", "highestRated", "changeRating", "highestRated"]
[[["kimchi", "miso", "sushi", "moussaka", "ramen", "bulgogi"], ["korean", "japanese", "japanese", "greek", "japanese", "korean"], [9, 12, 8, 15, 14, 7]], ["korean"], ["japanese"], ["sushi", 16], ["japanese"], ["ramen", 16], ["japanese"]]
Output
[null, "kimchi", "ramen", null, "sushi", null, "ramen"]

Explanation
FoodRatings foodRatings = new FoodRatings(["kimchi", "miso", "sushi", "moussaka", "ramen", "bulgogi"], ["korean", "japanese", "japanese", "greek", "japanese", "korean"], [9, 12, 8, 15, 14, 7]);
foodRatings.highestRated("korean"); // return "kimchi"
                                    // "kimchi" is the highest rated korean food with a rating of 9.
foodRatings.highestRated("japanese"); // return "ramen"
                                      // "ramen" is the highest rated japanese food with a rating of 14.
foodRatings.changeRating("sushi", 16); // "sushi" now has a rating of 16.
foodRatings.highestRated("japanese"); // return "sushi"
                                      // "sushi" is the highest rated japanese food with a rating of 16.
foodRatings.changeRating("ramen", 16); // "ramen" now has a rating of 16.
foodRatings.highestRated("japanese"); // return "ramen"
                                      // Both "sushi" and "ramen" have a rating of 16.
                                      // However, "ramen" is lexicographically smaller than "sushi".
 

Constraints:

1 <= n <= 2 * 104
n == foods.length == cuisines.length == ratings.length
1 <= foods[i].length, cuisines[i].length <= 10
foods[i], cuisines[i] consist of lowercase English letters.
1 <= ratings[i] <= 108
All the strings in foods are distinct.
food will be the name of a food item in the system across all calls to changeRating.
cuisine will be a type of cuisine of at least one food item in the system across all calls to highestRated.
At most 2 * 104 calls in total will be made to changeRating and highestRated.

class FoodRatings
{
public:
    struct cmp
    {
        bool operator()(const pair<int, string> &a, const pair<int, string> &b) const
        {
            if(a.first == b.first) return a.second < b.second;
            return a.first > b.first;
        }
    };

    unordered_map<string, set<pair<int, string>, cmp>> CTF;
    unordered_map<string, string> FTC;
    unordered_map<string, int> FTR;

    FoodRatings(vector<string> &foods, vector<string> &cuisines, vector<int> &ratings)
    {
        int n = foods.size();
        for(int i = 0; i < n; i++)
        {
            string &f = foods[i];
            string &c = cuisines[i];
            int r = ratings[i];
            FTR[f] = r;
            FTC[f] = c;
            CTF[c].insert({r, f});
        }
    }

    void changeRating(string food, int newRating)
    {
        string &c = FTC[food];
        int r = FTR[food];
        CTF[c].erase({r, food});
        CTF[c].insert({newRating, food});
        FTR[food] = newRating;
    }

    string highestRated(string cuisine)
    {
        if (CTF[cuisine].empty()) return "";
        auto &[r, food] = *CTF[cuisine].begin();
        return food;
    }
};


// Source https://leetcode.com/problems/number-of-excellent-pairs/

You are given a 0-indexed positive integer array nums and a positive integer k.

A pair of numbers (num1, num2) is called excellent if the following conditions are satisfied:

Both the numbers num1 and num2 exist in the array nums.
The sum of the number of set bits in num1 OR num2 and num1 AND num2 is greater than or equal to k, where OR is the bitwise OR operation and AND is the bitwise AND operation.
Return the number of distinct excellent pairs.

Two pairs (a, b) and (c, d) are considered distinct if either a != c or b != d. For example, (1, 2) and (2, 1) are distinct.

Note that a pair (num1, num2) such that num1 == num2 can also be excellent if you have at least one occurrence of num1 in the array.

给你一个下标从 0 开始的正整数数组 nums 和一个正整数 k 。

如果满足下述条件，则数对 (num1, num2) 是 优质数对 ：

num1 和 num2 都 在数组 nums 中存在。
num1 OR num2 和 num1 AND num2 的二进制表示中值为 1 的位数之和大于等于 k ，其中 OR 是按位 或 操作，而 AND 是按位 与 操作。
返回 不同 优质数对的数目。

如果 a != c 或者 b != d ，则认为 (a, b) 和 (c, d) 是不同的两个数对。例如，(1, 2) 和 (2, 1) 不同。

注意：如果 num1 在数组中至少出现 一次 ，则满足 num1 == num2 的数对 (num1, num2) 也可以是优质数对。

Example 1:

Input: nums = [1,2,3,1], k = 3
Output: 5
Explanation: The excellent pairs are the following:
- (3, 3). (3 AND 3) and (3 OR 3) are both equal to (11) in binary. The total number of set bits is 2 + 2 = 4, which is greater than or equal to k = 3.
- (2, 3) and (3, 2). (2 AND 3) is equal to (10) in binary, and (2 OR 3) is equal to (11) in binary. The total number of set bits is 1 + 2 = 3.
- (1, 3) and (3, 1). (1 AND 3) is equal to (01) in binary, and (1 OR 3) is equal to (11) in binary. The total number of set bits is 1 + 2 = 3.
So the number of excellent pairs is 5.
Example 2:

Input: nums = [5,1,1], k = 10
Output: 0
Explanation: There are no excellent pairs for this array.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 109
1 <= k <= 60

class Solution
{
public:

    long long countExcellentPairs(vector<int> &nums, int k)
    {
        unordered_set<int> st;
        for (auto val : nums)
        {
            st.insert(val);
        }
        int len = st.size();
        vector<int> sum;
        sum.reserve(len);
        for(auto val : st)
        {
            sum.push_back(__builtin_popcount(val));
        }
        sort(sum.begin(), sum.end());
        int i = 0, j = len - 1;
        long long ans = 0;
        while(i <= j)
        {
            if(sum[i] + sum[j] >= k)
            {
                ans += 2 * (j - i) + 1;
                --j;
            }
            else
            {
                ++i;
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/make-array-zero-by-subtracting-equal-amounts/

You are given a non-negative integer array nums. In one operation, you must:

Choose a positive integer x such that x is less than or equal to the smallest non-zero element in nums.
Subtract x from every positive element in nums.
Return the minimum number of operations to make every element in nums equal to 0.

 

Example 1:

Input: nums = [1,5,0,3,5]
Output: 3
Explanation:
In the first operation, choose x = 1. Now, nums = [0,4,0,2,4].
In the second operation, choose x = 2. Now, nums = [0,2,0,0,2].
In the third operation, choose x = 2. Now, nums = [0,0,0,0,0].
Example 2:

Input: nums = [0]
Output: 0
Explanation: Each element in nums is already 0 so no operations are needed.
 

Constraints:

1 <= nums.length <= 100
0 <= nums[i] <= 100

class Solution
{
public:
    int minimumOperations(vector<int> &nums)
    {
        unordered_set<int> st;
        for (auto val : nums)
        {
            if (val > 0) st.insert(val);
        }
        return st.size();
    }
};


// Source https://leetcode.com/problems/maximum-number-of-groups-entering-a-competition/

You are given a positive integer array grades which represents the grades of students in a university. 
You would like to enter all these students into a competition in ordered non-empty groups, such that the ordering meets the following conditions:

The sum of the grades of students in the ith group is less than the sum of the grades of students in the (i + 1)th group, for all groups (except the last).
The total number of students in the ith group is less than the total number of students in the (i + 1)th group, for all groups (except the last).
Return the maximum number of groups that can be formed.

给你一个正整数数组 grades ，表示大学中一些学生的成绩。你打算将 所有 学生分为一些 有序 的非空分组，其中分组间的顺序满足以下全部条件：

第 i 个分组中的学生总成绩 小于 第 (i + 1) 个分组中的学生总成绩，对所有组均成立（除了最后一组）。
第 i 个分组中的学生总数 小于 第 (i + 1) 个分组中的学生总数，对所有组均成立（除了最后一组）。
返回可以形成的 最大 组数。

Example 1:

Input: grades = [10,6,12,7,3,5]
Output: 3
Explanation: The following is a possible way to form 3 groups of students:
- 1st group has the students with grades = [12]. Sum of grades: 12. Student count: 1
- 2nd group has the students with grades = [6,7]. Sum of grades: 6 + 7 = 13. Student count: 2
- 3rd group has the students with grades = [10,3,5]. Sum of grades: 10 + 3 + 5 = 18. Student count: 3
It can be shown that it is not possible to form more than 3 groups.

3 5 6 7 10 12
3   5 6   7 10 12

Example 2:

Input: grades = [8,8]
Output: 1
Explanation: We can only form 1 group, since forming 2 groups would lead to an equal number of students in both groups.
 

Constraints:

1 <= grades.length <= 105
1 <= grades[i] <= 105

如果按照从小到大的顺序依次分组，则条件一会永远成立，只需要在满足条件二的前提下尽可能分成最大的组数。
通过贪心，显然第一组 1 个学生，第二组 2 个学生，以此类推，可以得到最大的组数。

class Solution
{
public:
    int maximumGroups(vector<int> &grades)
    {
        int n = grades.size();
        int i = 1;
        while ((i * (i + 1)) / 2 <= n) ++i;
        return i - 1;
    }
};


// Source https://leetcode.com/problems/find-closest-node-to-given-two-nodes/

You are given a directed graph of n nodes numbered from 0 to n - 1, where each node has at most one outgoing edge.

The graph is represented with a given 0-indexed array edges of size n, indicating that there is a directed edge from node i to node edges[i]. 
If there is no outgoing edge from i, then edges[i] == -1.

You are also given two integers node1 and node2.

Return the index of the node that can be reached from both node1 and node2, such that the maximum between the distance from node1 to that node, and from node2 to that node is minimized. 
If there are multiple answers, return the node with the smallest index, and if no possible answer exists, return -1.

Note that edges may contain cycles.

 

Example 1:


Input: edges = [2,2,3,-1], node1 = 0, node2 = 1
Output: 2
Explanation: The distance from node 0 to node 2 is 1, and the distance from node 1 to node 2 is 1.
The maximum of those two distances is 1. It can be proven that we cannot get a node with a smaller maximum distance than 1, so we return node 2.
Example 2:


Input: edges = [1,2,-1], node1 = 0, node2 = 2
Output: 2
Explanation: The distance from node 0 to node 2 is 2, and the distance from node 2 to itself is 0.
The maximum of those two distances is 2. It can be proven that we cannot get a node with a smaller maximum distance than 2, so we return node 2.
 

Constraints:

n == edges.length
2 <= n <= 105
-1 <= edges[i] < n
edges[i] != i
0 <= node1, node2 < n

class Solution
{
public:
    int n;
    uint8_t vis[100001];

    void DFS(vector<int> &edges, int node, vector<int> &dis, int d)
    {
        vis[node] = 1;
        dis[node] = d;
        if(edges[node] != -1 && vis[edges[node]] == 0)
            DFS(edges, edges[node], dis, d + 1);
        return ;
    }

    int closestMeetingNode(vector<int> &edges, int node1, int node2)
    {
        n = edges.size();
        vector<int> dis1(n, -1);
        DFS(edges, node1, dis1, 0);
        vector<int> dis2(n, -1);
        memset(vis, 0, sizeof(vis));
        DFS(edges, node2, dis2, 0);
        int mnVal = INT_MAX;
        int ans = -1 ;
        for(int i = 0 ; i < n ; i++)
        {
            if(dis1[i] != -1 && dis2[i] != -1)
            {
                int t = max(dis1[i], dis2[i]);
                if( t < mnVal)
                {
                    mnVal = t;
                    ans = i;
                }
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/longest-cycle-in-a-graph/

You are given a directed graph of n nodes numbered from 0 to n - 1, where each node has at most one outgoing edge.

The graph is represented with a given 0-indexed array edges of size n, indicating that there is a directed edge from node i to node edges[i]. 
If there is no outgoing edge from node i, then edges[i] == -1.

Return the length of the longest cycle in the graph. If no cycle exists, return -1.

A cycle is a path that starts and ends at the same node.

 

Example 1:


Input: edges = [3,3,4,2,3]
Output: 3
Explanation: The longest cycle in the graph is the cycle: 2 -> 4 -> 3 -> 2.
The length of this cycle is 3, so 3 is returned.
Example 2:


Input: edges = [2,-1,3,1]
Output: -1
Explanation: There are no cycles in this graph.
 

Constraints:

n == edges.length
2 <= n <= 105
-1 <= edges[i] < n
edges[i] != i

class Solution
{
public:
    int n;
    uint8_t visited[100001];
    int indegree[100001];

    int longestCycle(vector<int> &edges)
    {
        n = edges.size();
        for(int i = 0; i < n; i++)
        {
            int node = edges[i];
            if(node != -1) indegree[node]++;
        }
        queue<int> q;
        for(int i = 0; i < n; i++)
        {
            if(indegree[i] == 0)
                q.push(i);
        }
        int count = 0;
        while(!q.empty())
        {
            int node = q.front();
            q.pop();
            ++count;
            int next = edges[node];
            if(next != -1)
            {
                if(--indegree[next] == 0)
                {
                    q.push(next);
                }
            }
        }
        if(count == n) return -1;
        int ans = INT_MIN;
        for(int i = 0; i < n; i++)
        {
            if (indegree[i] == 0) continue;
            int len = 1;
            visited[i] = 1;
            int next = edges[i];
            while(next != -1 && !visited[next])
            {
                len++;
                visited[next] = 1;
                next = edges[next];
            }
            ans = max(ans, len);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/merge-similar-items/

You are given two 2D integer arrays, items1 and items2, representing two sets of items. Each array items has the following properties:

items[i] = [valuei, weighti] where valuei represents the value and weighti represents the weight of the ith item.
The value of each item in items is unique.
Return a 2D integer array ret where ret[i] = [valuei, weighti], with weighti being the sum of weights of all items with value valuei.

Note: ret should be returned in ascending order by value.

 

Example 1:

Input: items1 = [[1,1],[4,5],[3,8]], items2 = [[3,1],[1,5]]
Output: [[1,6],[3,9],[4,5]]
Explanation: 
The item with value = 1 occurs in items1 with weight = 1 and in items2 with weight = 5, total weight = 1 + 5 = 6.
The item with value = 3 occurs in items1 with weight = 8 and in items2 with weight = 1, total weight = 8 + 1 = 9.
The item with value = 4 occurs in items1 with weight = 5, total weight = 5.  
Therefore, we return [[1,6],[3,9],[4,5]].
Example 2:

Input: items1 = [[1,1],[3,2],[2,3]], items2 = [[2,1],[3,2],[1,3]]
Output: [[1,4],[2,4],[3,4]]
Explanation: 
The item with value = 1 occurs in items1 with weight = 1 and in items2 with weight = 3, total weight = 1 + 3 = 4.
The item with value = 2 occurs in items1 with weight = 3 and in items2 with weight = 1, total weight = 3 + 1 = 4.
The item with value = 3 occurs in items1 with weight = 2 and in items2 with weight = 2, total weight = 2 + 2 = 4.
Therefore, we return [[1,4],[2,4],[3,4]].
Example 3:

Input: items1 = [[1,3],[2,2]], items2 = [[7,1],[2,2],[1,4]]
Output: [[1,7],[2,4],[7,1]]
Explanation:
The item with value = 1 occurs in items1 with weight = 3 and in items2 with weight = 4, total weight = 3 + 4 = 7. 
The item with value = 2 occurs in items1 with weight = 2 and in items2 with weight = 2, total weight = 2 + 2 = 4. 
The item with value = 7 occurs in items2 with weight = 1, total weight = 1.
Therefore, we return [[1,7],[2,4],[7,1]].
 

Constraints:

1 <= items1.length, items2.length <= 1000
items1[i].length == items2[i].length == 2
1 <= valuei, weighti <= 1000
Each valuei in items1 is unique.
Each valuei in items2 is unique.

class Solution
{
public:
    vector<vector<int>> mergeSimilarItems(vector<vector<int>> &items1, vector<vector<int>> &items2)
    {
        map<int, int> mp;
        for (auto &v : items1)
        {
            mp[v[0]] += v[1];
        }
        for (auto &v : items2)
        {
            mp[v[0]] += v[1];
        }
        vector<vector<int>>res;
        res.reserve(mp.size());
        for(auto p : mp)
        {
            res.push_back({p.first, p.second});
        }
        return res;
    }
};


// Source https://leetcode.com/problems/count-number-of-bad-pairs/

You are given a 0-indexed integer array nums. A pair of indices (i, j) is a bad pair if i < j and j - i != nums[j] - nums[i].

Return the total number of bad pairs in nums.

j - i != nums[j] - nums[i].
nums[j] - j != nums[i] - i

Example 1:

Input: nums = [4,1,3,3]
Output: 5
Explanation: The pair (0, 1) is a bad pair since 1 - 0 != 1 - 4.
The pair (0, 2) is a bad pair since 2 - 0 != 3 - 4, 2 != -1.
The pair (0, 3) is a bad pair since 3 - 0 != 3 - 4, 3 != -1.
The pair (1, 2) is a bad pair since 2 - 1 != 3 - 1, 1 != 2.
The pair (2, 3) is a bad pair since 3 - 2 != 3 - 3, 1 != 0.
There are a total of 5 bad pairs, so we return 5.
Example 2:

Input: nums = [1,2,3,4,5]
Output: 0
Explanation: There are no bad pairs.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 109

class Solution
{
public:
    long long countBadPairs(vector<int> &nums)
    {
        int n = nums.size();
        long totalPairs = long(n) * (n - 1) / 2;
        unordered_map<int, int> mp;
        long goodPairs = 0;
        for (int i = 0; i < n; ++i)
        {
            if (mp.count(nums[i] - i)) goodPairs += mp[nums[i] - i];
            mp[nums[i] - i]++;
        }
        return totalPairs - goodPairs;
    }
};


// Source https://leetcode.com/problems/task-scheduler-ii/

You are given a 0-indexed array of positive integers tasks, representing tasks that need to be completed in order, where tasks[i] represents the type of the ith task.

You are also given a positive integer space, which represents the minimum number of days that must pass after the completion of a task before another task of the same type can be performed.

Each day, until all tasks have been completed, you must either:

Complete the next task from tasks, or
Take a break.
Return the minimum number of days needed to complete all tasks.

给你一个下标从 0 开始的正整数数组 tasks ，表示需要 按顺序 完成的任务，其中 tasks[i] 表示第 i 件任务的 类型 。

同时给你一个正整数 space ，表示一个任务完成 后 ，另一个 相同 类型任务完成前需要间隔的 最少 天数。

在所有任务完成前的每一天，你都必须进行以下两种操作中的一种：

完成 tasks 中的下一个任务
休息一天
请你返回完成所有任务所需的 最少 天数。

Example 1:

Input: tasks = [1,2,1,2,3,1], space = 3
Output: 9
Explanation:
One way to complete all tasks in 9 days is as follows:
Day 1: Complete the 0th task.
Day 2: Complete the 1st task.
Day 3: Take a break.
Day 4: Take a break.
Day 5: Complete the 2nd task.
Day 6: Complete the 3rd task.
Day 7: Take a break.
Day 8: Complete the 4th task.
Day 9: Complete the 5th task.
It can be shown that the tasks cannot be completed in less than 9 days.
Example 2:

Input: tasks = [5,8,8,5], space = 2
Output: 6
Explanation:
One way to complete all tasks in 6 days is as follows:
Day 1: Complete the 0th task.
Day 2: Complete the 1st task.
Day 3: Take a break.
Day 4: Take a break.
Day 5: Complete the 2nd task.
Day 6: Complete the 3rd task.
It can be shown that the tasks cannot be completed in less than 6 days.
 

Constraints:

1 <= tasks.length <= 105
1 <= tasks[i] <= 109
1 <= space <= tasks.length

class Solution
{
public:
    long long taskSchedulerII(vector<int> &tasks, int space)
    {
        unordered_map<int, long long> mp;
        long long countDay = 1;
        int n = tasks.size();
        for(int i = 0; i < n; i++)
        {
            if(mp.count(tasks[i]) == 0)
            {
                mp[tasks[i]] = countDay;
                ++countDay;
            }
            else
            {
                if(countDay <= (mp[tasks[i]] + space))
                {
                    countDay = space + mp[tasks[i]] + 1;
                    mp[tasks[i]] = countDay;
                    ++countDay;
                }
                else
                {
                    mp[tasks[i]] = countDay;
                    ++countDay;
                }
            }
        }
        return countDay - 1;
    }
};

// Source https://leetcode.com/problems/minimum-replacements-to-sort-the-array/

You are given a 0-indexed integer array nums. In one operation you can replace any element of the array with any two elements that sum to it.

For example, consider nums = [5,6,7]. In one operation, we can replace nums[1] with 2 and 4 and convert nums to [5,2,4,7].
Return the minimum number of operations to make an array that is sorted in non-decreasing order.

 

Example 1:

Input: nums = [3,9,3]
Output: 2
Explanation: Here are the steps to sort the array in non-decreasing order:
- From [3,9,3], replace the 9 with 3 and 6 so the array becomes [3,3,6,3]
- From [3,3,6,3], replace the 6 with 3 and 3 so the array becomes [3,3,3,3,3]
There are 2 steps to sort the array in non-decreasing order. Therefore, we return 2.

Example 2:

Input: nums = [1,2,3,4,5]
Output: 0
Explanation: The array is already in non-decreasing order. Therefore, we return 0. 
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 109

13 5
4 4 5 5
14 5
4 5 5 5
15 5
5 5 5 5
16 5
4 4 4 4 5
17 5
4 4 4 5 5
18 5
4 4 5 5 5
19 5
4 5 5 5 5
20 5
5 5 5 5 5

class Solution
{
public:
    long long minimumReplacement(vector<int> &v)
    {
        int n = v.size();
        long long ans = 0;
        int prev = v[n - 1];
        for(int i = n - 2; i >= 0; i--)
        {
            int len = (v[i] + prev - 1) / prev;
            prev = (v[i] / len);
            ans += (len - 1);
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/number-of-arithmetic-triplets/

You are given a 0-indexed, strictly increasing integer array nums and a positive integer diff. A triplet (i, j, k) is an arithmetic triplet if the following conditions are met:

i < j < k,
nums[j] - nums[i] == diff, and
nums[k] - nums[j] == diff.
Return the number of unique arithmetic triplets.

 

Example 1:

Input: nums = [0,1,4,6,7,10], diff = 3
Output: 2
Explanation:
(1, 2, 4) is an arithmetic triplet because both 7 - 4 == 3 and 4 - 1 == 3.
(2, 4, 5) is an arithmetic triplet because both 10 - 7 == 3 and 7 - 4 == 3. 
Example 2:

Input: nums = [4,5,6,7,8,9], diff = 2
Output: 2
Explanation:
(0, 2, 4) is an arithmetic triplet because both 8 - 6 == 2 and 6 - 4 == 2.
(1, 3, 5) is an arithmetic triplet because both 9 - 7 == 2 and 7 - 5 == 2.
 

Constraints:

3 <= nums.length <= 200
0 <= nums[i] <= 200
1 <= diff <= 50
nums is strictly increasing.

class Solution
{
public:
    int arithmeticTriplets(vector<int> &nums, int diff)
    {
        unordered_set<int> st;
        for (auto val : nums)
        {
            st.insert(val);
        }
        int ans = 0;
        for (auto val : nums)
        {
            if(st.find(val + diff) != st.end() && st.find(val - diff) != st.end())
            {
                ++ans;
            }
        }
        return ans;
    }
};


// Source https://leetcode.com/problems/reachable-nodes-with-restrictions/

There is an undirected tree with n nodes labeled from 0 to n - 1 and n - 1 edges.

You are given a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. 
You are also given an integer array restricted which represents restricted nodes.

Return the maximum number of nodes you can reach from node 0 without visiting a restricted node.

Note that node 0 will not be a restricted node.

 

Example 1:


Input: n = 7, edges = [[0,1],[1,2],[3,1],[4,0],[0,5],[5,6]], restricted = [4,5]
Output: 4
Explanation: The diagram above shows the tree.
We have that [0,1,2,3] are the only nodes that can be reached from node 0 without visiting a restricted node.
Example 2:


Input: n = 7, edges = [[0,1],[0,2],[0,5],[0,4],[3,2],[6,5]], restricted = [4,2,1]
Output: 3
Explanation: The diagram above shows the tree.
We have that [0,5,6] are the only nodes that can be reached from node 0 without visiting a restricted node.
 

Constraints:

2 <= n <= 105
edges.length == n - 1
edges[i].length == 2
0 <= ai, bi < n
ai != bi
edges represents a valid tree.
1 <= restricted.length < n
1 <= restricted[i] < n
All the values of restricted are unique.

class Solution
{
public:
    uint8_t visited[100001];

    void dfs(int u, vector<int> adj[], int &cnt)
    {
        visited[u] = 1;
        ++cnt; 
        for (auto v : adj[u])
        {
            if (!visited[v])
            {
                dfs(v, adj, cnt);
            }
        }
    }

    int reachableNodes(int n, vector<vector<int>> &edges, vector<int> &restricted)
    {
        vector<int> adj[n];
        for (auto &v : edges)
        {
            adj[v[0]].push_back(v[1]);
            adj[v[1]].push_back(v[0]);
        }
        for (auto node : restricted)
        {
            visited[node] = 1;
        }
        int cnt = 0;
        dfs(0, adj, cnt);
        return cnt;
    }
};


// Source https://leetcode.com/problems/check-if-there-is-a-valid-partition-for-the-array/

You are given a 0-indexed integer array nums. You have to partition the array into one or more contiguous subarrays.

We call a partition of the array valid if each of the obtained subarrays satisfies one of the following conditions:

The subarray consists of exactly 2 equal elements. For example, the subarray [2,2] is good.
The subarray consists of exactly 3 equal elements. For example, the subarray [4,4,4] is good.
The subarray consists of exactly 3 consecutive increasing elements, that is, the difference between adjacent elements is 1. For example, the subarray [3,4,5] is good, but the subarray [1,3,5] is not.
Return true if the array has at least one valid partition. Otherwise, return false.

 

Example 1:

Input: nums = [4,4,4,5,6]
Output: true
Explanation: The array can be partitioned into the subarrays [4,4] and [4,5,6].
This partition is valid, so we return true.
Example 2:

Input: nums = [1,1,1,2]
Output: false
Explanation: There is no valid partition for this array.
 

Constraints:

2 <= nums.length <= 105
1 <= nums[i] <= 106

class Solution
{
public:
    int n;
    uint8_t dp[100001];

    bool solve(int idx, vector<int> &nums)
    {
        if(idx >= n) return true;
        if(dp[idx] != 0x7F) return dp[idx];
        bool ans = false;
        if(idx + 1 < n && nums[idx + 1] == nums[idx])
        {
            ans |= solve(idx + 2, nums);
        }
        if(!ans && idx + 2 < n && nums[idx + 2] == nums[idx + 1] && nums[idx + 1] == nums[idx])
        {
            ans |= solve(idx + 3, nums);
        }
        if(!ans && idx + 2 < n && nums[idx + 2] - nums[idx + 1] == 1 && nums[idx + 1] - nums[idx] == 1)
        {
            ans |= solve(idx + 3, nums);
        }
        return dp[idx] = ans;
    }

    bool validPartition(vector<int> &nums)
    {
        n = nums.size();
        memset(dp, 0x7F, sizeof(dp));
        return solve(0, nums);
    }
};


// Source https://leetcode.com/problems/longest-ideal-subsequence/

You are given a string s consisting of lowercase letters and an integer k. We call a string t ideal if the following conditions are satisfied:

t is a subsequence of the string s.
The absolute difference in the alphabet order of every two adjacent letters in t is less than or equal to k.
Return the length of the longest ideal string.

A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.

Note that the alphabet order is not cyclic. For example, the absolute difference in the alphabet order of 'a' and 'z' is 25, not 1.

 

Example 1:

Input: s = "acfgbd", k = 2
Output: 4
Explanation: The longest ideal string is "acbd". The length of this string is 4, so 4 is returned.
Note that "acfgbd" is not ideal because 'c' and 'f' have a difference of 3 in alphabet order.
Example 2:

Input: s = "abcd", k = 3
Output: 4
Explanation: The longest ideal string is "abcd". The length of this string is 4, so 4 is returned.
 

Constraints:

1 <= s.length <= 105
0 <= k <= 25
s consists of lowercase English letters.

class Solution
{
public:
    int n, k;
    int dp[100001][26];

    int recur(string &s, int i, char prev)
    {
        if(i >= n) return 0;
        if(dp[i][prev - 'a'] != -1) return dp[i][prev - 'a'];
        int res = 0;
        if(abs(s[i] - prev) <= k)
        {
            res = max(res, 1 + recur(s, i + 1, s[i]));
        }
        res = max(res, recur(s, i + 1, prev));
        return dp[i][prev - 'a'] = res;
    }

    int longestIdealString(string s, int k)
    {
        n = s.length();
        this->k = k;
        memset(dp, -1, sizeof(dp));
        int ans = 1;
        for(int i = 0; i < n; i++)
        {
            ans = max(ans, 1 + recur(s, i + 1, s[i]));
        }
        return ans;
    }
};

class Solution
{
public:
    int longestIdealString(string s, int k)
    {
        int dp[26] = {0};
        int ans = 1;
        for (char ch : s)
        {
            int i = ch - 'a';
            dp[i] = dp[i] + 1;
            int start = max(0, i - k);
            int end = min(25, i + k);
            for (int j = start; j <= end; j++)
            {
                if (j != i) dp[i] = max(dp[i], dp[j] + 1);
            }
            ans = max(ans, dp[i]);
        }
        return ans;
    }
};
